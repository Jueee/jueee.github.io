[{"title":"搭建Jekyll环境","url":"/2020/06/2020-06-17-%E6%90%AD%E5%BB%BAJekyll%E7%8E%AF%E5%A2%83/","content":"<p>需要搭建Jekyll环境，通过遵循Jekyll的规范，让Jekyll帮助我们生成静态网站。</p>\n<ol>\n<li><p>安装Ruby：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVieS1sYW5nLm9yZy96aF9jbi9kb2N1bWVudGF0aW9uL2luc3RhbGxhdGlvbi8=\">Ruby安装教程<i class=\"fa fa-external-link-alt\"></i></span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ydWJ5aW5zdGFsbGVyLm9yZy9kb3dubG9hZHMv\">Windows 下载<i class=\"fa fa-external-link-alt\"></i></span></p>\n</li>\n<li><p>打开CMD，执行命令安装Jekyll：</p>\n<pre class=\"language-none\"><code class=\"language-none\">gem install jekyll</code></pre>\n</li>\n<li><p>进入仓库文件夹，执行命令：</p>\n<pre class=\"language-none\"><code class=\"language-none\">bundle install</code></pre>\n\n</li>\n</ol>\n<h3 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h3><p>每个目录的作用：</p>\n<table>\n<thead>\n<tr>\n<th>文件 / 目录</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>_config.yml</code></td>\n<td>保存<span class=\"exturl\" data-url=\"aHR0cDovL2pla3lsbGNuLmNvbS9kb2NzL2NvbmZpZ3VyYXRpb24v\">配置<i class=\"fa fa-external-link-alt\"></i></span>数据。很多配置选项都可以直接在命令行中进行设置，但是如果你把那些配置写在这儿，你就不用非要去记住那些命令了。</td>\n</tr>\n<tr>\n<td><code>_drafts</code></td>\n<td>drafts（草稿）是未发布的文章。这些文件的格式中都没有 <code>title.MARKUP</code> 数据。学习如何 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLmppYW5zaHUuY29tLz90PWh0dHA6Ly9qZWt5bGxjbi5jb20vZG9jcy9kcmFmdHMv\">使用草稿<i class=\"fa fa-external-link-alt\"></i></span>.</td>\n</tr>\n<tr>\n<td><code>_includes</code></td>\n<td>你可以加载这些包含部分到你的布局或者文章中以方便重用。可以用这个标签 <code>&#123;% include file.ext %&#125;</code> 来把文件 <code>_includes/file.ext</code> 包含进来。</td>\n</tr>\n<tr>\n<td><code>_layouts</code></td>\n<td>layouts（布局）是包裹在文章外部的模板。布局可以在 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLmppYW5zaHUuY29tLz90PWh0dHA6Ly9qZWt5bGxjbi5jb20vZG9jcy9mcm9udG1hdHRlci8=\">YAML 头信息<i class=\"fa fa-external-link-alt\"></i></span>中根据不同文章进行选择。 这将在下一个部分进行介绍。</td>\n</tr>\n<tr>\n<td><code>_posts</code></td>\n<td>这里放的就是你的文章了。文件格式很重要，必须要符合:<code>YEAR-MONTH-DAY-title.MARKUP</code>。 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLmppYW5zaHUuY29tLz90PWh0dHA6Ly9qZWt5bGxjbi5jb20vZG9jcy9wZXJtYWxpbmtzLw==\">永久链接<i class=\"fa fa-external-link-alt\"></i></span> 可以在文章中自己定制，但是数据和标记语言都是根据文件名来确定的。</td>\n</tr>\n<tr>\n<td><code>_data</code></td>\n<td>格式化好的网站数据应放在这里。jekyll 的引擎会自动加载在该目录下所有的 yaml 文件（后缀是 <code>.yml</code>, <code>.yaml</code>, <code>.json</code> 或者 <code>.csv</code> ）。这些文件可以经由 ｀site.data｀ 访问。如果有一个 <code>members.yml</code> 文件在该目录下，你就可以通过 <code>site.data.members</code> 获取该文件的内容。</td>\n</tr>\n<tr>\n<td><code>_site</code></td>\n<td>一旦 Jekyll 完成转换，就会将生成的页面放在这里（默认）。最好将这个目录放进你的 <code>.gitignore</code> 文件中。</td>\n</tr>\n<tr>\n<td><code>.jekyll-metadata</code></td>\n<td>该文件帮助 Jekyll 跟踪哪些文件从上次建立站点开始到现在没有被修改，哪些文件需要在下一次站点建立时重新生成。该文件不会被包含在生成的站点中。将它加入到你的 <code>.gitignore</code> 文件可能是一个好注意。</td>\n</tr>\n<tr>\n<td><code>index.html</code> and other HTML, Markdown, Textile files</td>\n<td>如果这些文件中包含 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLmppYW5zaHUuY29tLz90PWh0dHA6Ly9qZWt5bGxjbi5jb20vZG9jcy9mcm9udG1hdHRlci8=\">YAML 头信息<i class=\"fa fa-external-link-alt\"></i></span> 部分，Jekyll 就会自动将它们进行转换。当然，其他的如 <code>.html</code>, <code>.markdown</code>, <code>.md</code>, 或者 <code>.textile</code> 等在你的站点根目录下或者不是以上提到的目录中的文件也会被转换。</td>\n</tr>\n<tr>\n<td>Other Files/Folders</td>\n<td>其他一些未被提及的目录和文件如 <code>css</code> 还有 <code>images</code> 文件夹， <code>favicon.ico</code> 等文件都将被完全拷贝到生成的 site 中。这里有一些<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLmppYW5zaHUuY29tLz90PWh0dHA6Ly9qZWt5bGxjbi5jb20vZG9jcy9zaXRlcy8=\">使用 Jekyll 的站点<i class=\"fa fa-external-link-alt\"></i></span>，如果你感兴趣就来看看吧。</td>\n</tr>\n</tbody></table>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2pla3lsbGNuLmNvbS9kb2NzL3RlbXBsYXRlcy8=\">jekyll 模板<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9saXF1aWQuYm9vdGNzcy5jb20v\">Liquid 模板语言<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<h3 id=\"问题处理\"><a href=\"#问题处理\" class=\"headerlink\" title=\"问题处理\"></a>问题处理</h3><h4 id=\"问题一\"><a href=\"#问题一\" class=\"headerlink\" title=\"问题一\"></a>问题一</h4><blockquote>\n<p><code>bundle install</code> 提示 <code>Could not locate Gemfile</code></p>\n</blockquote>\n<p>原因：项目下缺少 <code>Gemfile</code> 文件。</p>\n<p>解决：<code>jekyll new myblog</code> 创建项目，将  <code>Gemfile</code> 文件拷贝过来。</p>\n<h4 id=\"问题二\"><a href=\"#问题二\" class=\"headerlink\" title=\"问题二\"></a>问题二</h4><blockquote>\n<p>Dependency Error: Yikes! It looks like you don&#39;t have jekyll-sitemap or one of its dependencies installed.</p>\n</blockquote>\n<p>解决：在<code>Gemfile</code> 文件中增加如下内容：</p>\n<pre class=\"language-none\"><code class=\"language-none\">gem &#39;jekyll-sitemap&#39;\ngem &#39;jekyll-paginate&#39; </code></pre>\n\n<h4 id=\"问题三\"><a href=\"#问题三\" class=\"headerlink\" title=\"问题三\"></a>问题三</h4><blockquote>\n<p>Liquid Exception: Could not locate the included file &#39;file.ext&#39; in any of [&quot;E:/code/GitHub/Jueee/jueee.github.io/_includes&quot;]. Ensure it exists in one of those directories and, if it is a symlink, does not point outside your site source.</p>\n</blockquote>\n","categories":["Blog"],"tags":["Blog","Ruby","jekyll"]},{"title":"为Jekyll博客系统增加来必力评论系统","url":"/2020/07/2020-07-01-%E4%B8%BAJekyll%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F%E5%A2%9E%E5%8A%A0%E6%9D%A5%E5%BF%85%E5%8A%9B%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/","content":"<p>来必力（LiveRe）是韩国的产品。是一款通过链接社交网站账户，免去额外的注册过程的社会化评论系统。</p>\n<p>来必力安装简单、使用方便、UI美观，同时支持所有的主流社交网络，以及评论管理、通知等功能，深受国内外互联网用户的欢迎。</p>\n<p>该产品主要分为中文、英文、韩文三个版本，用户可以根据语言选择对应的版本。</p>\n<h3 id=\"来必力（LiveRe）\"><a href=\"#来必力（LiveRe）\" class=\"headerlink\" title=\"来必力（LiveRe）\"></a>来必力（LiveRe）</h3><p>官网介绍</p>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubGl2ZXJlLmNvbS8=\">https://www.livere.com/<i class=\"fa fa-external-link-alt\"></i></span></p>\n</blockquote>\n<p>核心功能：</p>\n<ul>\n<li>使用社交网站账户登录，免去注册过程。</li>\n<li>提高用户的参与和沟通意愿。</li>\n<li>管理/删除我的评论内容。</li>\n<li>提供管理页面，管理网站文章及评论内容。</li>\n</ul>\n<h3 id=\"域名设置\"><a href=\"#域名设置\" class=\"headerlink\" title=\"域名设置\"></a>域名设置</h3><p>在网站列表中，设置个人域名。</p>\n<h3 id=\"代码设置\"><a href=\"#代码设置\" class=\"headerlink\" title=\"代码设置\"></a>代码设置</h3><p>在 <code>_config.yml</code> 文件中添加：</p>\n<pre class=\"language-none\"><code class=\"language-none\"># Support for LiveRe comments system.\n# You can get your uid from https:&#x2F;&#x2F;livere.com&#x2F;insight&#x2F;myCode (General web site)\nlivere_uid: MTAyMC81MDgwMC8yNzI4Mg&#x3D;&#x3D;</code></pre>\n\n<p>参考 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubGl2ZXJlLmNvbS9pbnNpZ2h0L215Q29kZSVFRiVCQyU4QyVFNSU5QyVBOA==\">https://www.livere.com/insight/myCode，在<i class=\"fa fa-external-link-alt\"></i></span> <code>post.html</code> 文件中添加：</p>\n<pre class=\"language-html\" data-language=\"html\"><code class=\"language-html\">&#123;% raw %&#125;<span class=\"token comment\">&lt;!-- 来必力City版安装代码 --></span>\n<p><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">&quot;</span>lv-container<span class=\"token punctuation\">&quot;</span></span> <span class=\"token attr-name\">data-id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">&quot;</span>city<span class=\"token punctuation\">&quot;</span></span> <span class=\"token attr-name\">data-uid</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">&quot;</span>&#123;&#123;site.livere_uid&#125;&#125;<span class=\"token punctuation\">&quot;</span></span><span class=\"token style-attr language-css\"><span class=\"token attr-name\">  <span class=\"token attr-name\">style</span></span><span class=\"token punctuation\">=&quot;</span><span class=\"token attr-value\"><span class=\"token property\">padding-right</span><span class=\"token punctuation\">:</span> 10%<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">&quot;</span></span><span class=\"token punctuation\">&gt;</span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">&quot;</span>text/javascript<span class=\"token punctuation\">&quot;</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"><span class=\"token language-javascript\"><br>  <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">d<span class=\"token punctuation\">,</span> s</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><br>     <span class=\"token keyword\">var</span> j<span class=\"token punctuation\">,</span> e <span class=\"token operator\">=</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByTagName</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></p>\n<pre><code> &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;typeof&lt;/span&gt; LivereTower &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;function&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;\n\n j &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; d&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;\n j&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;src &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;https://cdn-city.livere.com/js/embed.dist.js&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;\n j&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;async &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;\n\n e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;parentNode&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;insertBefore&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;j&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;</code></pre>\n<p>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">,</span> <span class=\"token string\">&#39;script&#39;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>noscript</span><span class=\"token punctuation\">&gt;</span></span>为正常使用来必力评论功能请激活JavaScript<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>noscript</span><span class=\"token punctuation\">&gt;</span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><br><span class=\"token comment\">&lt;!-- City版安装代码已完成 --&gt;</span>&#123;% endraw %&#125;</code></pre>:hexoPostRenderEscape--&gt;</p>\n","categories":["Blog"],"tags":["Blog","LiveRe"]},{"title":"为Jekyll博客系统增加百度统计","url":"/2020/06/2020-06-19-%E4%B8%BAJekyll%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F%E5%A2%9E%E5%8A%A0%E7%99%BE%E5%BA%A6%E7%BB%9F%E8%AE%A1/","content":"<p>百度统计是网站用户行为分析平台，为 Jekyll 博客系统接入百度统计，可以很方便的查看博客的各种访问、统计数据。</p>\n<h3 id=\"百度统计\"><a href=\"#百度统计\" class=\"headerlink\" title=\"百度统计\"></a>百度统计</h3><p>官网介绍</p>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly90b25namkuYmFpZHUuY29tL3dlYi93ZWxjb21lL2xvZ2lu\">https://tongji.baidu.com/web/welcome/login<i class=\"fa fa-external-link-alt\"></i></span></p>\n</blockquote>\n<h3 id=\"域名设置\"><a href=\"#域名设置\" class=\"headerlink\" title=\"域名设置\"></a>域名设置</h3><p>在网站列表中，设置个人域名。</p>\n<h3 id=\"代码设置\"><a href=\"#代码设置\" class=\"headerlink\" title=\"代码设置\"></a>代码设置</h3><p>在 <code>_config.yml</code> 文件中添加：</p>\n<pre class=\"language-none\"><code class=\"language-none\">baidu_tmid: d11c8b9bc802239c2cc46ff39d3faf79</code></pre>\n\n<p>在 <code>footer.html</code> 文件中添加：</p>\n<pre class=\"language-html\" data-language=\"html\"><code class=\"language-html\">&#123;% raw %&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n<span class=\"token keyword\">var</span> _hmt <span class=\"token operator\">=</span> _hmt <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">var</span> hm <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"script\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   hm<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> <span class=\"token string\">\"https://hm.baidu.com/hm.js?&#123;&#123;site.baidu_tmid&#125;&#125;\"</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">var</span> s <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByTagName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"script\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> \n   s<span class=\"token punctuation\">.</span>parentNode<span class=\"token punctuation\">.</span><span class=\"token function\">insertBefore</span><span class=\"token punctuation\">(</span>hm<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>&#123;% endraw %&#125;</code></pre>\n\n","categories":["Blog"],"tags":["Blog","Baidu"]},{"title":"模板List分两列展示","url":"/2020/07/2020-07-06-%E6%A8%A1%E6%9D%BFList%E5%88%86%E4%B8%A4%E5%88%97%E5%B1%95%E7%A4%BA/","content":"<p>使用 freeMarker 的机会有很多，自然也就会接触下 <code>&lt;List&gt;</code> 标签，我想大家应该都不陌生。</p>\n<p><code>&lt;#list attrList as attr&gt;$&#123;a.name&#125;&lt;/#list&gt;</code> 类似的用法很多，但是偶尔会用到两列的展示效果我们改怎么办呢？</p>\n<p>我们可以根据模型中的 int 类型的某一列，一般是自动增长的id标识列。</p>\n<h3 id=\"freemarker-模板语言\"><a href=\"#freemarker-模板语言\" class=\"headerlink\" title=\"freemarker 模板语言\"></a>freemarker 模板语言</h3><pre class=\"language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>#list</span> <span class=\"token attr-name\">attrList</span> <span class=\"token attr-name\">as</span> <span class=\"token attr-name\">attr</span><span class=\"token punctuation\">></span></span>\n       &lt;#if attr_index%2 ==0>\n        &lt;#if attr_index==0>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tr</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>#else</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tr</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>#if</span><span class=\"token punctuation\">></span></span>\n       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>#if</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>th</span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>118<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>$&#123;attr.key!&#125;:<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>th</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">></span></span>$&#123;attr.value!&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">></span></span> \n    &lt;#if attr_index==attrList?size-1>\n        &lt;#if attr_index%2 ==1>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>#else</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>th</span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>118<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>th</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>#if</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>#if</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>#list</span><span class=\"token punctuation\">></span></span></code></pre>\n\n<h3 id=\"Liquid-模板语言\"><a href=\"#Liquid-模板语言\" class=\"headerlink\" title=\"Liquid 模板语言\"></a>Liquid 模板语言</h3><p>Liquid 是一门开源的模板语言，由 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuc2hvcGlmeS5jb20v\">Shopify<i class=\"fa fa-external-link-alt\"></i></span> 创造并用 Ruby 实现。它是 Shopify 主题的骨骼，并且被用于加载店铺系统的动态内容。</p>\n<pre class=\"language-html\" data-language=\"html\"><code class=\"language-html\">&#123;% raw %&#125;\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>table</span> <span class=\"token punctuation\">></span></span>\n&#123;% for post in site.gitpagelink %&#125;\n&#123;% assign index_2 = forloop.index | modulo: 2 %&#125;\n    &#123;% if index_2 == 1 %&#125;\n        &#123;% if forloop.index == 1 %&#125; <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tr</span><span class=\"token punctuation\">></span></span> &#123;% else %&#125; <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tr</span><span class=\"token punctuation\">></span></span> &#123;% endif %&#125;\n    &#123;% endif %&#125;\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">></span></span>&#123;&#123; post.name &#125;&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">></span></span>\n    &#123;% if forloop.size == forloop.index %&#125;\n        &#123;% if index_2 == 0 %&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">></span></span>&#123;% else %&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">></span></span>&#123;% endif %&#125;\n    &#123;% endif %&#125;\n&#123;% endfor %&#125;\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>table</span><span class=\"token punctuation\">></span></span>\n&#123;% endraw %&#125;</code></pre>\n\n","categories":["HTML"],"tags":["HTML","freemarker","Liquid"]},{"title":"使用rinetd实现端口转发重定向","url":"/2020/07/2020-07-07-%E4%BD%BF%E7%94%A8rinetd%E5%AE%9E%E7%8E%B0%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91%E9%87%8D%E5%AE%9A%E5%90%91/","content":"<h3 id=\"工具介绍\"><a href=\"#工具介绍\" class=\"headerlink\" title=\"工具介绍\"></a>工具介绍</h3><p>linux下简单好用的工具rinetd，实现端口映射/转发/重定向。</p>\n<p>用于有效地将连接从一个 IP 地址/端口组合重定向到另一 IP 地址/端口组合。在操作虚拟服务器、防火墙等时很有用。</p>\n<p>Rinetd是单一过程的服务器，它处理任何数量的连接到在配置文件etc/rinetd中指定的地址/端口对。尽管rinetd使用非闭锁I/O运行作为一个单一过程，它可能重定向很多连接而不对这台机器增加额外的负担。</p>\n<p>官网地址：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5ib3V0ZWxsLmNvbS9yaW5ldGQ=\">http://www.boutell.com/rinetd<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h3 id=\"软件安装\"><a href=\"#软件安装\" class=\"headerlink\" title=\"软件安装\"></a>软件安装</h3><h4 id=\"方法一：压缩包\"><a href=\"#方法一：压缩包\" class=\"headerlink\" title=\"方法一：压缩包\"></a>方法一：压缩包</h4><pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\">wget http:&#x2F;&#x2F;www.boutell.com&#x2F;rinetd&#x2F;http&#x2F;rinetd.tar.gz\ntar zxvf rinetd.tar.gz\nmake\nmake install</code></pre>\n\n<h4 id=\"方法二：apt-get\"><a href=\"#方法二：apt-get\" class=\"headerlink\" title=\"方法二：apt-get\"></a>方法二：apt-get</h4><pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\">apt-cache search rinetd\napt-get install rinetd -y</code></pre>\n\n<h3 id=\"软件配置\"><a href=\"#软件配置\" class=\"headerlink\" title=\"软件配置\"></a>软件配置</h3><p>配置文件格式：</p>\n<pre class=\"language-none\"><code class=\"language-none\">[Source Address] [Source Port] [Destination Address] [Destination Port]\n源地址 源端口 目的地址 目的端口</code></pre>\n\n<p>在每一单独的行中指定每个要转发的端口。源地址和目的地址都可以是主机名或IP地址，IP 地址0.0.0.0将rinetd绑定到任何可用的本地IP地址上。</p>\n<p>例如：</p>\n<pre class=\"language-none\"><code class=\"language-none\">vi &#x2F;etc&#x2F;rinetd.conf\n0.0.0.0 8080 172.19.94.3 8080\n0.0.0.0 2222 192.168.0.103 3389\n1.2.3.4 80     192.168.0.10 80</code></pre>\n\n<p>说明一下（0.0.0.0表示本机绑定所有可用地址）</p>\n<ul>\n<li>将所有发往本机8080端口的请求转发到172.19.94.3的8080端口</li>\n<li>将所有发往本机2222端口的请求转发到192.168.0.103的3389端口</li>\n<li>将所有发往1.2.3.4的80端口请求转发到192.168.0.10的80端口</li>\n</ul>\n<h3 id=\"启动程序\"><a href=\"#启动程序\" class=\"headerlink\" title=\"启动程序\"></a>启动程序</h3><p>关闭进程</p>\n<pre class=\"language-none\"><code class=\"language-none\">pkill rinetd</code></pre>\n\n<p>启动转发</p>\n<pre class=\"language-none\"><code class=\"language-none\">rinetd -c &#x2F;etc&#x2F;rinetd.conf</code></pre>\n\n<h3 id=\"开机启动\"><a href=\"#开机启动\" class=\"headerlink\" title=\"开机启动\"></a>开机启动</h3><p>把这条命令加到 <code>/etc/rc.local</code> 里面就可以开机自动运行。</p>\n<h3 id=\"查看状态\"><a href=\"#查看状态\" class=\"headerlink\" title=\"查看状态\"></a>查看状态</h3><pre class=\"language-none\"><code class=\"language-none\">netstat -antup</code></pre>\n\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><ol>\n<li><p>rinetd.conf 中绑定的本机端口必须没有被其它程序占用。</p>\n</li>\n<li><p>运行 rinetd 的系统防火墙应该打开绑定的本机端口。</p>\n<p>例如：</p>\n<p>&lt;!--hexoPostRenderEscape:<pre class=\"language-none\"><code class=\"language-none\">-A RH-Firewall-1-INPUT -m state --state NEW -m tcp -p tcp --dport 1111 -jACCEPT</p>\n</li>\n</ol>\n<p>-A RH-Firewall-1-INPUT -m state --state NEW -m tcp -p tcp --dport 2222 -jACCEPT</code></pre>:hexoPostRenderEscape--&gt;</p>\n","categories":["Linux"],"tags":["Linux","工具"]},{"title":"jekyll使用中文路径","url":"/2020/07/2020-07-08-jekyll%E4%BD%BF%E7%94%A8%E4%B8%AD%E6%96%87%E8%B7%AF%E5%BE%84/","content":"<h2 id=\"出现问题\"><a href=\"#出现问题\" class=\"headerlink\" title=\"出现问题\"></a>出现问题</h2><p>在使用 jekyll 在本地预览自己写的博客无法正常打开，而提交到 github 上却可以正常解析。</p>\n<p>看了一下，发现原来是因为博客的markdown文件使用了中文文件名，jekyll 无法正常解析出现乱码。</p>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><p>修改 安装目录 <code>Ruby26-x64\\lib\\ruby\\2.6.0\\webrick\\httpservlet</code> 下的 <code>filehandler.rb</code> 文件，建议先备份。</p>\n<p>找到下列两处，添加一句（+的一行为添加部分）</p>\n<p>第285行： </p>\n<pre class=\"language-ruby\" data-language=\"ruby\"><code class=\"language-ruby\">path <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>path_info<span class=\"token punctuation\">.</span>dup<span class=\"token punctuation\">.</span>force_encoding<span class=\"token punctuation\">(</span><span class=\"token constant\">Encoding</span><span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span><span class=\"token string\">\"filesystem\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">+</span> path<span class=\"token punctuation\">.</span>force_encoding<span class=\"token punctuation\">(</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 加入编码</span>\n<span class=\"token keyword\">if</span> trailing_pathsep<span class=\"token operator\">?</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>path_info<span class=\"token punctuation\">)</span>       </code></pre>\n<p>第333行：</p>\n<pre class=\"language-ruby\" data-language=\"ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">break</span> <span class=\"token keyword\">if</span> base <span class=\"token operator\">==</span> <span class=\"token string\">\"/\"</span>\n<span class=\"token operator\">+</span> base<span class=\"token punctuation\">.</span>force_encoding<span class=\"token punctuation\">(</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#加入編碼</span>\n<span class=\"token keyword\">break</span> <span class=\"token keyword\">unless</span> <span class=\"token builtin\">File</span><span class=\"token punctuation\">.</span>directory<span class=\"token operator\">?</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">File</span><span class=\"token punctuation\">.</span>expand_path<span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>filename <span class=\"token operator\">+</span> base<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  </code></pre>\n\n<p>修改完重新 jekyll serve 即可支持中文文件名。</p>\n","categories":["Blog"],"tags":["Blog","Ruby","jekyll"]},{"title":"网页粒子背景插件canvas-nest.js","url":"/2020/07/2020-07-10-%E7%BD%91%E9%A1%B5%E7%B2%92%E5%AD%90%E8%83%8C%E6%99%AF%E6%8F%92%E4%BB%B6canvas-nest.js/","content":"<p><strong>Canvas-nest.js是一个非常好看的网页粒子背景插件，不需要依赖任何第三方库即可运行，提供额非常炫酷的背景。</strong></p>\n<h3 id=\"Canvas-nest-js\"><a href=\"#Canvas-nest-js\" class=\"headerlink\" title=\"Canvas-nest.js\"></a>Canvas-nest.js</h3><p>官网介绍</p>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2h1c3RjYy9jYW52YXMtbmVzdC5qcw==\">https://github.com/hustcc/canvas-nest.js<i class=\"fa fa-external-link-alt\"></i></span></p>\n</blockquote>\n<h4 id=\"特征\"><a href=\"#特征\" class=\"headerlink\" title=\"特征\"></a>特征</h4><ul>\n<li>它不依赖jQuery，并且使用原始的 javascrpit。</li>\n<li>体积小巧，只有 2 Kb。</li>\n<li>易于实现，配置简单。</li>\n<li>您不必是Web开发人员即可使用它。</li>\n<li>使用区域渲染进行模块化。</li>\n</ul>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>使用非常简单，将下面的代码插入到 <code>&lt;body&gt;</code> 和 <code>&lt;/body&gt;</code> 之间就行了。</p>\n<pre class=\"language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">color</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#34495e<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">opacity</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>0.5<span class=\"token punctuation\">'</span></span> <span class=\"token attr-name\">zIndex</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>-2<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">count</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>99<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>canvas-nest.min.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre>\n\n<h4 id=\"组态\"><a href=\"#组态\" class=\"headerlink\" title=\"组态\"></a>组态</h4><ul>\n<li><strong>color</strong>：线条颜色，默认值：<code>&#39;0,0,0&#39;</code>；RGB值：（R，G，B）。（注意：使用&#39;，&#39;分隔。）</li>\n<li><strong>pointColor</strong>：点的颜色，默认值：<code>&#39;0,0,0&#39;</code>；RGB值：（R，G，B）。（注意：使用&#39;，&#39;分隔。）</li>\n<li><strong>opacity</strong>：线的不透明度（0〜1），默认值：<code>0.5</code>。</li>\n<li><strong>count</strong>：线条数量，默认值：<code>99</code>。</li>\n<li><strong>zIndex</strong>：背景的 z-index 属性，默认值：<code>-1</code>。</li>\n</ul>\n","categories":["Blog"],"tags":["Blog","HTML"]},{"title":"使用不蒜子增加Jekyll博客访问量统计","url":"/2020/07/2020-07-09-%E4%BD%BF%E7%94%A8%E4%B8%8D%E8%92%9C%E5%AD%90%E5%A2%9E%E5%8A%A0Jekyll%E5%8D%9A%E5%AE%A2%E8%AE%BF%E9%97%AE%E9%87%8F%E7%BB%9F%E8%AE%A1/","content":"<p>“不蒜子”是一款极简的网页计数器，可以很方便的统计博客的总访问量和访问次数。</p>\n<p>“不蒜子”与百度统计谷歌分析等有区别：“不蒜子”可直接将访问次数显示在您在网页上（也可不显示）；对于已经上线一段时间的网站，“不蒜子”允许您初始化首次数据。</p>\n<h3 id=\"不蒜子\"><a href=\"#不蒜子\" class=\"headerlink\" title=\"不蒜子\"></a>不蒜子</h3><p>官网介绍</p>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL2J1c3VhbnppLmlicnVjZS5pbmZvLw==\">http://busuanzi.ibruce.info/<i class=\"fa fa-external-link-alt\"></i></span></p>\n</blockquote>\n<p>两行代码 搞定计数</p>\n<pre class=\"language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">async</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>busuanzi_container_site_pv<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    本站总访问量<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>busuanzi_value_site_pv<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>次\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span></code></pre>\n\n<h3 id=\"安装标签\"><a href=\"#安装标签\" class=\"headerlink\" title=\"安装标签\"></a>安装标签</h3><p>只需要复制相应的html标签到你的网站要显示访问量的位置即可。</p>\n<p>您可以随意更改不蒜子标签为自己喜欢的显示效果，内容参考第三部分<strong>扩展开发</strong>。</p>\n<p>根据你要显示内容的不同，这分几种情况。</p>\n<h4 id=\"显示站点总访问量\"><a href=\"#显示站点总访问量\" class=\"headerlink\" title=\"显示站点总访问量\"></a>显示站点总访问量</h4><p>要显示站点总访问量，复制以下代码添加到你需要显示的位置。</p>\n<p>有两种算法可选：</p>\n<p>算法a：pv的方式，单个用户连续点击n篇文章，记录n次访问量。</p>\n<pre class=\"language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>busuanzi_container_site_pv<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>    \n    本站总访问量<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>busuanzi_value_site_pv<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>次\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span></code></pre>\n\n<p>算法b：uv的方式，单个用户连续点击n篇文章，只记录1次访客数。</p>\n<pre class=\"language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>busuanzi_container_site_uv<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>  \n    本站访客数<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>busuanzi_value_site_uv<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>人次\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span></code></pre>\n\n<h4 id=\"显示单页面访问量\"><a href=\"#显示单页面访问量\" class=\"headerlink\" title=\"显示单页面访问量\"></a>显示单页面访问量</h4><p>要显示每篇文章的访问量，复制以下代码添加到你需要显示的位置。</p>\n<p>算法：pv的方式，单个用户点击1篇文章，本篇文章记录1次阅读量。</p>\n<pre class=\"language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>busuanzi_container_page_pv<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>  \n    本文总阅读量<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>busuanzi_value_page_pv<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>次\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span></code></pre>\n\n<h3 id=\"扩展开发\"><a href=\"#扩展开发\" class=\"headerlink\" title=\"扩展开发\"></a>扩展开发</h3><p>不蒜子之所以称为极客的算子，正是因为不蒜子自身只提供标签+数字，至于显示的style和css动画效果，任你发挥。</p>\n<p><code>busuanzi_value_site_pv</code> 的作用是异步回填访问数，这个id一定要正确。</p>\n<p><code>busuanzi_container_site_pv</code>的作用是为防止计数服务访问出错或超时（3秒）的情况下，使整个标签自动隐藏显示，带来更好的体验。这个id可以省略。</p>\n<p>因此，你也可以使用极简模式：</p>\n<pre class=\"language-html\" data-language=\"html\"><code class=\"language-html\">本站总访问量<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>busuanzi_value_site_pv<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>次\n本站访客数<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>busuanzi_value_site_uv<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>人次\n本文总阅读量<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>busuanzi_value_page_pv<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>次</code></pre>\n\n<p>或者个性化一下：</p>\n<pre class=\"language-html\" data-language=\"html\"><code class=\"language-html\">Total <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>busuanzi_value_site_pv<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span> views.\n您是xxx的第<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>busuanzi_value_site_uv<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>个小伙伴\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>busuanzi_value_page_pv<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span> Hits</code></pre>\n\n<h3 id=\"其他问题\"><a href=\"#其他问题\" class=\"headerlink\" title=\"其他问题\"></a>其他问题</h3><ol>\n<li><p>我只要统计不显示？</p>\n<p>只引入busuanzi.js，不引入显示标签即可。</p>\n</li>\n<li><p>你的标签太丑了，我想美化一下可以么？</p>\n<p>可以的，您可以用自己站点的css进行控制，只要内层span的id正确以便回填访问次数即可，甚至标签都可以不是span。</p>\n</li>\n<li><p>中文字体太丑了，我的主题不适合？</p>\n<p>您可以将本站总访问量xxx次改成view xxx times等英文以获得更和谐的显示效果。</p>\n</li>\n<li><p>在访问量数据未取回来之前，我不想让页面显示为诸如“本站总访问量 次”，显得太low，怎么办？</p>\n<p>只需要如下css，不蒜子执行完毕会自动将标签显示出来，其他以此类推：</p>\n<pre class=\"language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>busuanzi_container_site_pv<span class=\"token punctuation\">\"</span></span><span class=\"token style-attr language-css\"><span class=\"token attr-name\"> <span class=\"token attr-name\">style</span></span><span class=\"token punctuation\">='</span><span class=\"token attr-value\"><span class=\"token property\">display</span><span class=\"token punctuation\">:</span>none</span><span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span>\n 本站总访问量<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>busuanzi_value_site_pv<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>次\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span></code></pre>\n\n\n</li>\n</ol>\n<p>   上面的做法还是很low？！可以在没加载出来前就显示个菊花转转转:<br>   首先，你要引入font-awesome字体：</p>\n   <pre class=\"language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>//maxcdn.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.min.css<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n或\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>//cdn.bootcss.com/font-awesome/4.3.0/css/font-awesome.min.css<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></code></pre>\n\n<p>   其次，修改不蒜子标签：</p>\n   <pre class=\"language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>busuanzi_value_page_pv<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>i</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>fa fa-spinner<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>i</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span> Hits\n或（旋转效果）\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>busuanzi_value_page_pv<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>i</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>fa fa-spinner fa-spin<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>i</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span> Hits</code></pre>\n\n<p>   和谐多了！</p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2licnVjZS5pbmZvLzIwMTUvMDQvMDQvYnVzdWFuemkv\">http://ibruce.info/2015/04/04/busuanzi/<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n","categories":["Blog"],"tags":["Blog"]},{"title":"关于toString方法的重写工具ToStringBuilder","url":"/2020/07/2020-07-15-%E5%85%B3%E4%BA%8EtoString%E6%96%B9%E6%B3%95%E7%9A%84%E9%87%8D%E5%86%99%E5%B7%A5%E5%85%B7ToStringBuilder/","content":"<p>Apache 的 <code>commons-lang3</code> 的工具包里有一个 <code>ToStringBuilder</code> 类，这样在打日志的时候可以方便的打印出类实例中的各属性的值。</p>\n<h3 id=\"依赖引入\"><a href=\"#依赖引入\" class=\"headerlink\" title=\"依赖引入\"></a>依赖引入</h3><pre class=\"language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>commons-lang<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>commons-lang<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.4<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></code></pre>\n\n<h3 id=\"重写-toString\"><a href=\"#重写-toString\" class=\"headerlink\" title=\"重写 toString\"></a>重写 toString</h3><pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">ToStringBuilder</span><span class=\"token punctuation\">.</span><span class=\"token function\">reflectionToString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<p>打印结果参考：</p>\n<blockquote>\n<p>com.zzz.other.City@4eec7777[id=1,name=杭州,province=浙江,country=CN]</p>\n</blockquote>\n<h3 id=\"ToStringStyle\"><a href=\"#ToStringStyle\" class=\"headerlink\" title=\"ToStringStyle\"></a>ToStringStyle</h3><p><code>ToStringBuilder.reflectionToString</code>  默认为 <code>ToStringStyle.DEFAULT_STYLE</code>。</p>\n<p>使用方法：</p>\n<pre class=\"language-none\"><code class=\"language-none\">ToStringBuilder.reflectionToString(this, ToStringStyle.DEFAULT_STYLE);</code></pre>\n\n<p>ToStringStyle 还有其他样式，可调整 ToStringBuilder 的打印结果：</p>\n<ul>\n<li><p><strong>ToStringStyle.DEFAULT_STYLE</strong>：对象及其属性一行显示</p>\n<pre class=\"language-none\"><code class=\"language-none\">com.zzz.other.City@4eec7777[id&#x3D;1,name&#x3D;杭州,province&#x3D;浙江,country&#x3D;CN]</code></pre>\n</li>\n<li><p><strong>ToStringStyle.MULTI_LINE_STYLE</strong>：属性换行显示</p>\n<pre class=\"language-none\"><code class=\"language-none\">com.zzz.other.City@4eec7777[\nid&#x3D;1\nname&#x3D;杭州\nprovince&#x3D;浙江\ncountry&#x3D;CN\n]</code></pre>\n</li>\n<li><p><strong>ToStringStyle.NO_FIELD_NAMES_STYLE</strong>：不显示属性名，只显示属性值</p>\n<pre class=\"language-none\"><code class=\"language-none\">com.zzz.other.City@4eec7777[1,杭州,浙江,CN]</code></pre>\n</li>\n<li><p><strong>ToStringStyle.SHORT_PREFIX_STYLE</strong>：对象名称简写</p>\n<pre class=\"language-none\"><code class=\"language-none\">City[id&#x3D;1,name&#x3D;杭州,province&#x3D;浙江,country&#x3D;CN]</code></pre></li>\n<li><p><strong>ToStringStyle.SIMPLE_STYLE</strong>：只显示属性</p>\n<pre class=\"language-none\"><code class=\"language-none\">1,杭州,浙江,CN</code></pre>\n\n</li>\n</ul>\n<h3 id=\"原理解析\"><a href=\"#原理解析\" class=\"headerlink\" title=\"原理解析\"></a>原理解析</h3><p><code>ReflectionToStringBuilder</code> 主要是通过java 反射实现的属性拼接。</p>\n<p><strong>org.apache.commons.lang.builder.ReflectionToStringBuilder</strong>：</p>\n <pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> object<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ToStringStyle</span> style<span class=\"token punctuation\">,</span> \n                              <span class=\"token keyword\">boolean</span> outputTransients<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> outputStatics<span class=\"token punctuation\">,</span>\n                              <span class=\"token class-name\">Class</span> reflectUpToClass<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReflectionToStringBuilder</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">,</span> style<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> \n                                         reflectUpToClass<span class=\"token punctuation\">,</span> outputTransients<span class=\"token punctuation\">,</span>\n                                         outputStatics<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getStyle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getNullText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token class-name\">Class</span> clazz <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">appendFieldsIn</span><span class=\"token punctuation\">(</span>clazz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>clazz<span class=\"token punctuation\">.</span><span class=\"token function\">getSuperclass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> clazz <span class=\"token operator\">!=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getUpToClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        clazz <span class=\"token operator\">=</span> clazz<span class=\"token punctuation\">.</span><span class=\"token function\">getSuperclass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">appendFieldsIn</span><span class=\"token punctuation\">(</span>clazz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<p>其中参数  <code>ToStringStyle</code>  是个抽象类，定义了输出的格式 主要是 append了一类类信息到字符串上，可以自己继承 <code>ToStringStyle</code>  实现自定义的输出格式。</p>\n","categories":["Java","JavaClass"],"tags":["JavaClass","Apache"]},{"title":"使用LFTP进行SFTP文件上传与下载","url":"/2020/07/2020-07-14-%E4%BD%BF%E7%94%A8LFTP%E8%BF%9B%E8%A1%8CSFTP%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%B8%8E%E4%B8%8B%E8%BD%BD/","content":"<h3 id=\"工具介绍\"><a href=\"#工具介绍\" class=\"headerlink\" title=\"工具介绍\"></a>工具介绍</h3><p>LFTP 是一款非常著名的字符界面的文件传输工具。支持FTP、HTTP、FISH、SFTP、HTTPS和FTPS协议。</p>\n<h3 id=\"软件安装\"><a href=\"#软件安装\" class=\"headerlink\" title=\"软件安装\"></a>软件安装</h3><pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\">apt-cache search lftp\napt-get install lftp -y</code></pre>\n\n<h3 id=\"lftp-的使用\"><a href=\"#lftp-的使用\" class=\"headerlink\" title=\"lftp 的使用\"></a>lftp 的使用</h3><h4 id=\"使用语法\"><a href=\"#使用语法\" class=\"headerlink\" title=\"使用语法\"></a>使用语法</h4><ul>\n<li><code>lftp -[fceup] user:passwd@host</code>：passwd可选,此方式密码明文保存,history可查看 </li>\n<li><code>-f &lt;file&gt;</code>：执行文件中的命令后退出</li>\n<li><code>-c &lt;cmd&gt;</code>：执行命令后退出 </li>\n<li><code>-e &lt;cmd&gt;</code>：登录后后执行命令 </li>\n<li><code>-u &lt;user&gt;[,&lt;pass&gt;]</code>：使用指定的用户名/口令进行验证 </li>\n<li><code>-p &lt;port&gt;</code>：连接指定的端口，默认21</li>\n</ul>\n<h4 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h4><ul>\n<li><code>cd</code>：切换FTP目录 </li>\n<li><code>lcd</code>：切换本地目录</li>\n<li><code>ls</code>：列出FTP目录文件</li>\n<li><code>!ls</code>：列出本地目录文件 </li>\n<li><code>find ./ -name file</code>：查找文件</li>\n<li><code>mv</code>：移动</li>\n<li><code>rm</code>：删除</li>\n<li><code>mkdir</code>：新建目录</li>\n<li><code>rmdir</code>：删除目录</li>\n</ul>\n<h4 id=\"上传下载文件\"><a href=\"#上传下载文件\" class=\"headerlink\" title=\"上传下载文件\"></a>上传下载文件</h4><ul>\n<li><p><code>get [cEaO] file -o newfilename</code>：下载文件</p>\n</li>\n<li><p><code>put [cEaO] file -o newfilename</code>：上传文件</p>\n</li>\n<li><p><code>pget -n</code>：多线程下载</p>\n<p>可选参数：</p>\n<ul>\n<li><code>-c</code>：支持断点续传 </li>\n<li><code>-E</code>：下载后删除远端文件</li>\n<li><code>-a</code>：指定传输为ascii模式, 默认为二进制模式 </li>\n<li><code>-O</code>：指定存放目录</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"上传下载目录\"><a href=\"#上传下载目录\" class=\"headerlink\" title=\"上传下载目录\"></a>上传下载目录</h4><ul>\n<li><p><code>mirror [cRnr] remote [local]</code> </p>\n<p>可选参数： </p>\n<ul>\n<li><code>-c</code>：支持断点续传 </li>\n<li><code>-R</code>：上传整个目录 </li>\n<li><code>-n</code>：只下载较新的档案，可用于增量备份 </li>\n<li><code>-r</code>：只下载当前目录，不递归目录</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"书签管理\"><a href=\"#书签管理\" class=\"headerlink\" title=\"书签管理\"></a>书签管理</h4><ul>\n<li><code>bookmark add name</code>：保存当前连接为书签名字name，下次打开可直接使用lftp name</li>\n<li><code>bookmark del name</code>：删除书签</li>\n<li><code>bookmark list</code>：显示书签列表</li>\n<li><code>bookmark edit</code>：编辑书签</li>\n</ul>\n<h4 id=\"编码设置\"><a href=\"#编码设置\" class=\"headerlink\" title=\"编码设置\"></a>编码设置</h4><ul>\n<li><code>set ftp:charset &quot;gbk&quot;</code> </li>\n<li><code>set file:charset &quot;UTF-8&quot;</code> </li>\n<li>或加入配置文件<code>.lftp/rc</code></li>\n</ul>\n<h4 id=\"主动-被动模式\"><a href=\"#主动-被动模式\" class=\"headerlink\" title=\"主动/被动模式\"></a>主动/被动模式</h4><p>默认为被动模式 。</p>\n<p><code>set ftp:passive-mode no</code>：关闭被动模式转为主动模式</p>\n<p>主动客户端开启数据传输端口，被动服务端开启数据传输端口。</p>\n<h3 id=\"Shell脚本\"><a href=\"#Shell脚本\" class=\"headerlink\" title=\"Shell脚本\"></a>Shell脚本</h3><h4 id=\"批量上传\"><a href=\"#批量上传\" class=\"headerlink\" title=\"批量上传\"></a>批量上传</h4><pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\">#!&#x2F;bin&#x2F;bash\n\n#SFTP配置信息\n#用户名\nUSER&#x3D;root\n#密码\nPASSWORD&#x3D;5EYS40T04BMF\n#待上传文件根目录\nSRCDIR&#x3D;&#x2F;u02&#x2F;dab&#x2F;sftpFiles\n#FTP目录\nDESDIR&#x3D;&#x2F;u01&#x2F;sftpFiles\n#IP\nIP&#x3D;192.168.10.11\n#端口\nPORT&#x3D;22022\n\n#获取文件\ncd $&#123;SRCDIR&#125; ;\n#目录下的所有文件\n#FILES&#x3D;&#96;ls&#96; \n#修改时间在执行时间五分钟之前的xml文件\nFILES&#x3D;&#96;find $&#123;SRCDIR&#125; -mmin -50 -name &#39;*.xml&#39;&#96;\n\nfor FILE in $&#123;FILES&#125;\ndo\n    echo $&#123;FILE&#125;\n#发送文件 (关键部分）  复制出来，如有结尾有空格，请自行去掉\nlftp -u $&#123;USER&#125;,$&#123;PASSWORD&#125; sftp:&#x2F;&#x2F;$&#123;IP&#125;:$&#123;PORT&#125; &lt;&lt;EOF\ncd $&#123;DESDIR&#125;&#x2F;\nlcd $&#123;SRCDIR&#125;\nput $&#123;FILE&#125;\nby\nEOF\n\ndone</code></pre>\n\n<h4 id=\"单文件下载\"><a href=\"#单文件下载\" class=\"headerlink\" title=\"单文件下载\"></a>单文件下载</h4><pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\">#!&#x2F;bin&#x2F;bash\n\nUSER&#x3D;root\n#密码\nPASSWORD&#x3D;5EYS40T04BMF\n#下载文件目录\nSRCDIR&#x3D;&#x2F;u02&#x2F;dab\n#FTP目录(待下载文件目录)\nDESDIR&#x3D;&#x2F;u01&#x2F;sftpFiles\n#银联IP\nIP&#x3D;192.168.1.10\n#端口\nPORT&#x3D;22022\n\nlftp -u $&#123;USER&#125;,$&#123;PASSWORD&#125; sftp:&#x2F;&#x2F;$&#123;IP&#125;:$&#123;PORT&#125;&lt;&lt;EOF\ncd $&#123;DESDIR&#125;\nlcd $&#123;SRCDIR&#125;\n#需要下载的文件为text.xml\nget text.xml\nby\nEOF</code></pre>\n\n","categories":["Linux","Shell"],"tags":["Linux","工具"]},{"title":"使用 Arthas 热更新 Java 代码","url":"/2020/07/2020-07-16-%E4%BD%BF%E7%94%A8Arthas%E7%83%AD%E6%9B%B4%E6%96%B0Java%E4%BB%A3%E7%A0%81/","content":"<p>Arthas（阿尔萨斯）是 Alibaba 开源的一款 Java 诊断工具，使用它我们可以监控和排查 Java 程序，然而它还提供了非常实用的 Java 热更新功能。</p>\n<p>所谓的 Java 热更新是指在不重启项目的情况下实现代码的更新与替换。使用它可以实现不停机更新 Java 程序，尤其是对那些启动非常耗时的 Java 项目来说，更是效果显著。</p>\n<h3 id=\"Arthas-使用\"><a href=\"#Arthas-使用\" class=\"headerlink\" title=\"Arthas 使用\"></a>Arthas 使用</h3><h4 id=\"Arthas资料\"><a href=\"#Arthas资料\" class=\"headerlink\" title=\"Arthas资料\"></a>Arthas资料</h4><p>Github 地址：</p>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvYXJ0aGFz\"> https://github.com/alibaba/arthas<i class=\"fa fa-external-link-alt\"></i></span></p>\n</blockquote>\n<p>Arthas<br>用户文档：</p>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9hbGliYWJhLmdpdGh1Yi5pby9hcnRoYXMv\">https://alibaba.github.io/arthas/<i class=\"fa fa-external-link-alt\"></i></span></p>\n</blockquote>\n<h4 id=\"下载-Arthas\"><a href=\"#下载-Arthas\" class=\"headerlink\" title=\"下载 Arthas\"></a>下载 Arthas</h4><p>首先，我们先把 Arthas 的 Jar 包下载到本地，它的下载地址是：</p>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9hbGliYWJhLmdpdGh1Yi5pby9hcnRoYXMvYXJ0aGFzLWJvb3QuamFy\">https://alibaba.github.io/arthas/arthas-boot.jar<i class=\"fa fa-external-link-alt\"></i></span></p>\n</blockquote>\n<h4 id=\"启动-Arthas\"><a href=\"#启动-Arthas\" class=\"headerlink\" title=\"启动 Arthas\"></a>启动 Arthas</h4><p>我们只需要使用普通的 jar 包启动命令：<code>java -jar arthas-boot.jar</code> 来启动 Arthas 即可。</p>\n<h4 id=\"Windows-运行\"><a href=\"#Windows-运行\" class=\"headerlink\" title=\"Windows 运行\"></a>Windows 运行</h4><p>Windows 需要以管理员方式运行，bat 脚本如下：</p>\n<pre class=\"language-bat\" data-language=\"bat\"><code class=\"language-bat\">%1 mshta vbscript:CreateObject(&quot;Shell.Application&quot;).ShellExecute(&quot;cmd.exe&quot;,&quot;&#x2F;c %~s0 ::&quot;,&quot;&quot;,&quot;runas&quot;,1)(window.close)&amp;&amp;exit\ncd &#x2F;d &quot;%~dp0&quot;\njava -jar arthas-boot.jar</code></pre>\n\n<h3 id=\"热更新-Java-代码\"><a href=\"#热更新-Java-代码\" class=\"headerlink\" title=\"热更新 Java 代码\"></a>热更新 Java 代码</h3><p>假如我们原来的代码是这样的：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">sample<span class=\"token punctuation\">.</span>redefine</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RedefineSuccess</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">printFlag</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printFlag</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">boolean</span> flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"flag is true.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"flag is false.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<p>我们现在想要把 <code>flag</code> 变量改为 <code>false</code> 就可以这样来做：</p>\n<ol>\n<li>使用 Arthas 的内存编译工具将新的 Java 代码编译为字节码；</li>\n<li>使用 Arthas 的 <code>redefine</code> 命令实现热更新。</li>\n</ol>\n<h4 id=\"编译字节码\"><a href=\"#编译字节码\" class=\"headerlink\" title=\"编译字节码\"></a>编译字节码</h4><p>首先，我们需要将新的 Java 代码编译为字节码，我们可以通过 Arthas 提供的 <code>mc</code> 命令实现，<code>mc</code> 是 Memory Compiler（内存编译器）的缩写。</p>\n<p>实现示例如下：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">[</span>arthas<span class=\"token annotation punctuation\">@10200</span><span class=\"token punctuation\">]</span>$ mc <span class=\"token class-name\">C</span><span class=\"token operator\">:</span><span class=\"token operator\">/</span>arthas<span class=\"token operator\">-</span>demo<span class=\"token operator\">/</span>src<span class=\"token operator\">/</span>main<span class=\"token operator\">/</span>java<span class=\"token operator\">/</span>sample<span class=\"token operator\">/</span>redefine<span class=\"token operator\">/</span><span class=\"token class-name\">RedefineSuccess</span><span class=\"token punctuation\">.</span>java <span class=\"token operator\">-</span>d  <span class=\"token class-name\">E</span><span class=\"token operator\">:</span>\n<span class=\"token class-name\">Memory</span> compiler output<span class=\"token operator\">:</span>\n<span class=\"token class-name\">E</span><span class=\"token operator\">:</span>\\sample\\redefine\\<span class=\"token class-name\">RedefineSuccess</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span>\n<span class=\"token class-name\">Affect</span><span class=\"token punctuation\">(</span>row<span class=\"token operator\">-</span>cnt<span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> cost in <span class=\"token number\">500</span> ms<span class=\"token punctuation\">.</span></code></pre>\n\n<p>其中 <code>-d</code> 表示编译文件的存放位置。</p>\n<blockquote>\n<p>小贴士：我们也可以使用 javac App.java 生成的字节码，它与此步骤执行的结果相同。</p>\n</blockquote>\n<h4 id=\"执行热更新\"><a href=\"#执行热更新\" class=\"headerlink\" title=\"执行热更新\"></a>执行热更新</h4><p>有了字节码文件之后，我们就可以使用 <code>redefine</code> 命令来实现热更新了，实现示例如下：</p>\n<pre class=\"language-none\"><code class=\"language-none\">[arthas@10200]$ redefine e:&#x2F;sample&#x2F;redefine&#x2F;RedefineSuccess.class\nredefine success, size: 1</code></pre>\n\n<p>从上述结果可以看出，热更新执行成功，此时我们去控制台查看执行结果，如下图所示：</p>\n<p><img src=\"/images/2020/07/1594883244673.png\" alt=\"1594883244673\" loading=\"lazy\"></p>\n<p>这说明热更新执行确实成功了。</p>\n<h3 id=\"结合-jad-mc-命令使用\"><a href=\"#结合-jad-mc-命令使用\" class=\"headerlink\" title=\"结合 jad/mc 命令使用\"></a>结合 jad/mc 命令使用</h3><pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\">jad --source-only com.example.demo.arthas.user.UserController &gt; &#x2F;tmp&#x2F;UserController.java\nmc &#x2F;tmp&#x2F;UserController.java -d &#x2F;tmp\nredefine &#x2F;tmp&#x2F;com&#x2F;example&#x2F;demo&#x2F;arthas&#x2F;user&#x2F;UserController.class</code></pre>\n\n<ul>\n<li>jad命令反编译，然后可以用其它编译器，比如vim来修改源码</li>\n<li>mc命令来内存编译修改过的代码</li>\n<li>用redefine命令加载新的字节码</li>\n</ul>\n<h3 id=\"热更新注意事项\"><a href=\"#热更新注意事项\" class=\"headerlink\" title=\"热更新注意事项\"></a>热更新注意事项</h3><h4 id=\"redefine-特别说明\"><a href=\"#redefine-特别说明\" class=\"headerlink\" title=\"redefine 特别说明\"></a>redefine 特别说明</h4><p><code>redefine</code>命令和<code>jad</code>/<code>watch</code>/<code>trace</code>/<code>monitor</code>/<code>tt</code>等命令会冲突。</p>\n<p>执行完<code>redefine</code>之后，如果再执行上面提到的命令，则会把<code>redefine</code>的字节码重置。 </p>\n<p>原因是jdk本身redefine和Retransform是不同的机制，同时使用两种机制来更新字节码，只有最后修改的会生效。</p>\n<h4 id=\"条件限制\"><a href=\"#条件限制\" class=\"headerlink\" title=\"条件限制\"></a>条件限制</h4><p>使用热更新功能有一些条件限制，我们只能用它来修改方法内部的一些业务代码，如果我们出现了以下任意一种情况，那么热更新就会执行失败：</p>\n<ol>\n<li>增加类属性（类字段）；</li>\n<li>增加或删除方法；</li>\n<li>替换正在运行的方法。</li>\n</ol>\n<p>最后一条我们需要单独说明一下，假如我们把上面的示例改为如下代码：</p>\n <pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">sample<span class=\"token punctuation\">.</span>redefine</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RedefineError</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">boolean</span> flag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"flag is true.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"flag is false.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n</code></pre>\n\n<p>那么此时我们再进行热更新操作修改 <code>flag</code> 的值，那么就会执行失败，因为我们替换的是正在运行中的方法，而我们正常示例中的代码之所以能成功，是因为我们在 <code>while</code> 无线循环中调用了另一个方法，而那个方法是被间歇性使用的，因此可以替换成功。</p>\n","categories":["Java","Java诊断"],"tags":["Java诊断","Arthas"]},{"title":"博客添加 Fork me on GitHub","url":"/2020/07/2020-07-16-%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0Fork%20me%20on%20GitHub/","content":"<p><strong>在网上浏览博客时经常看到页面的右上角或左上角有一个fork me on github的按钮，本文将介绍如何实现。</strong></p>\n<h3 id=\"Fork-me-on-GitHub\"><a href=\"#Fork-me-on-GitHub\" class=\"headerlink\" title=\"Fork me on GitHub\"></a>Fork me on GitHub</h3><p>GitHub 获取 css 文件：</p>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3NpbW9ud2hpdGFrZXIvZ2l0aHViLWZvcmstcmliYm9uLWNzcy8=\">https://github.com/simonwhitaker/github-fork-ribbon-css/<i class=\"fa fa-external-link-alt\"></i></span></p>\n</blockquote>\n<p>效果演示：</p>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaW1vbndoaXRha2VyLmdpdGh1Yi5pby9naXRodWItZm9yay1yaWJib24tY3NzLw==\">https://simonwhitaker.github.io/github-fork-ribbon-css/<i class=\"fa fa-external-link-alt\"></i></span></p>\n</blockquote>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>将以下代码复制到<code>&lt;head&gt;</code>页面的中，引入 css：</p>\n<pre class=\"language-none\"><code class=\"language-none\">&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;https:&#x2F;&#x2F;cdnjs.cloudflare.com&#x2F;ajax&#x2F;libs&#x2F;github-fork-ribbon-css&#x2F;0.2.3&#x2F;gh-fork-ribbon.min.css&quot; &#x2F;&gt;</code></pre>\n\n<p>使用非常简单，将下面的代码插入到 <code>&lt;body&gt;</code> 和 <code>&lt;/body&gt;</code> 之间就行了。</p>\n<pre class=\"language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>github-fork-ribbon<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://github.com/Jueee<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">target</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>_blank<span class=\"token punctuation\">\"</span></span> \n       <span class=\"token attr-name\">data-ribbon</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Fork me on GitHub<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">title</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Fork me on GitHub<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    Fork me on GitHub\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span></code></pre>\n\n<p>默认是在页面右上角。</p>\n<h3 id=\"其他样式\"><a href=\"#其他样式\" class=\"headerlink\" title=\"其他样式\"></a>其他样式</h3><ul>\n<li><p>固定标签：<code>class=&quot;github-fork-ribbon fixed&quot;</code></p>\n</li>\n<li><p>更换位置：</p>\n<ul>\n<li>右上角：<code>class=&quot;github-fork-ribbon right-top&quot;</code></li>\n<li>右下角：<code>class=&quot;github-fork-ribbon right-bottom&quot;</code></li>\n<li>左上角：<code>class=&quot;github-fork-ribbon left-top&quot;</code></li>\n<li>左下角：<code>class=&quot;github-fork-ribbon left-bottom fixed&quot;</code></li>\n</ul>\n</li>\n<li><p>更换背景颜色：</p>\n<pre class=\"language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">.github-fork-ribbon.left-bottom:before</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #333<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n</li>\n</ul>\n<h3 id=\"小屏幕不显示\"><a href=\"#小屏幕不显示\" class=\"headerlink\" title=\"小屏幕不显示\"></a>小屏幕不显示</h3><p>按照上面的步骤当屏幕缩小后还会显示fork me on github图标，但这不是我想要的，如果希望在大屏下显示，小屏后就不显示了。方法如下：</p>\n<p>新增样式：</p>\n<pre class=\"language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">.forkme</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 1350px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token selector\">.forkme</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> inline<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<p>代码块上套上div加上class就行了，如下：</p>\n<pre class=\"language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>forkme<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>github-fork-ribbon fixed<span class=\"token punctuation\">\"</span></span>    <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://github.com/Jueee<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">></span></span>\n        Fork me on GitHub\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre>\n\n","categories":["Blog"],"tags":["Blog","HTML"]},{"title":"迁移VMware虚拟机至微软Hyper-V","url":"/2020/07/2020-07-31-%E8%BF%81%E7%A7%BBVMware%E8%99%9A%E6%8B%9F%E6%9C%BA%E8%87%B3%E5%BE%AE%E8%BD%AFHyper-V/","content":"<h3 id=\"Hyper-V-虚拟机\"><a href=\"#Hyper-V-虚拟机\" class=\"headerlink\" title=\"Hyper-V 虚拟机\"></a>Hyper-V 虚拟机</h3><p>Hyper-V是微软的一款虚拟化产品，是微软第一个采用类似Vmware ESXi和Citrix Xen的基于hypervisor的技术。</p>\n<h3 id=\"开启-Hyper-V\"><a href=\"#开启-Hyper-V\" class=\"headerlink\" title=\"开启 Hyper-V\"></a>开启 Hyper-V</h3><p>进入电脑的控制面板-&gt;程序-&gt;启用或关闭Windows功能-&gt;把Hyper-v勾上，启用后电脑会重启。</p>\n<p><img src=\"/images/2020/07/1595925972986.png\" alt=\"1595925972986\" loading=\"lazy\"></p>\n<h3 id=\"迁移VMware虚拟机\"><a href=\"#迁移VMware虚拟机\" class=\"headerlink\" title=\"迁移VMware虚拟机\"></a>迁移VMware虚拟机</h3><h4 id=\"使用微软MVMC工具实现迁移\"><a href=\"#使用微软MVMC工具实现迁移\" class=\"headerlink\" title=\"使用微软MVMC工具实现迁移\"></a>使用微软MVMC工具实现迁移</h4><p>MVMC工具可以直接由微软官网下载</p>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5taWNyb3NvZnQuY29tL2VuLXVzL2Rvd25sb2FkL2RldGFpbHMuYXNweD9pZD00MjQ5Nw==\">下载链接<i class=\"fa fa-external-link-alt\"></i></span></p>\n</blockquote>\n<p>下载完成后，将安装文件拷贝到要安装MVMC的服务器上。</p>\n<h4 id=\"安装StarWind-V2V-Converter\"><a href=\"#安装StarWind-V2V-Converter\" class=\"headerlink\" title=\"安装StarWind V2V Converter\"></a>安装StarWind V2V Converter</h4><p>下载StarWind V2V Converter安装文件并执行安装，安装过程按照引导进行即可。</p>\n<p>安装完成后，打开 <code>StarWind V2V Image Converter</code>。</p>\n<p>选择 Local file：</p>\n<p><img src=\"/images/2020/07/1596174987682.png\" alt=\"1596174987682\" loading=\"lazy\"></p>\n<p>Next，选择 VMware虚拟机的 vmdk 文件：</p>\n<p><img src=\"/images/2020/07/1596175078239.png\" alt=\"1596175078239\" loading=\"lazy\"></p>\n<p>再点击 Next，等待转换完成，即可。</p>\n<p><img src=\"/images/2020/07/1596174902166.png\" alt=\"1596174902166\" loading=\"lazy\"></p>\n<h4 id=\"导入-vhd-文件\"><a href=\"#导入-vhd-文件\" class=\"headerlink\" title=\"导入 vhd 文件\"></a>导入 vhd 文件</h4><p>打开 Hyper-V，新建虚拟机。</p>\n<p>指定名称和存储位置。</p>\n<p><img src=\"/images/2020/07/1596175210979.png\" alt=\"1596175210979\" loading=\"lazy\"></p>\n<p>指定虚拟机的代数，选择第一代。</p>\n<blockquote>\n<p>Windows10 Hyper-V支持的虚拟机文件格式有两代，第一代的文件后缀为.vhd；第二代的文件后缀为.vhdx。</p>\n</blockquote>\n<p><img src=\"/images/2020/07/1596175283830.png\" alt=\"1596175283830\" loading=\"lazy\"></p>\n<p>分配内存：</p>\n<p><img src=\"/images/2020/07/1596175352095.png\" alt=\"1596175352095\" loading=\"lazy\"></p>\n<p>配置网络：</p>\n<p><img src=\"/images/2020/07/1596175380895.png\" alt=\"1596175380895\" loading=\"lazy\"></p>\n<p>选择指定刚刚生成的.vhd文件：</p>\n<p><img src=\"/images/2020/07/1596175428931.png\" alt=\"1596175428931\" loading=\"lazy\"></p>\n<p>转换导入成功，接下来，虚拟机就可以运行了。</p>\n<h3 id=\"Hyper-v虚拟机联网配置\"><a href=\"#Hyper-v虚拟机联网配置\" class=\"headerlink\" title=\"Hyper-v虚拟机联网配置\"></a>Hyper-v虚拟机联网配置</h3><h4 id=\"新建虚拟交换机\"><a href=\"#新建虚拟交换机\" class=\"headerlink\" title=\"新建虚拟交换机\"></a>新建虚拟交换机</h4><p>选择：</p>\n<p><img src=\"/images/2020/07/1596175872059.png\" alt=\"1596175872059\" loading=\"lazy\"></p>\n<p>输入交换机名称和选择外部网络，可以看到外部网络的下拉框的选项，这里选择当前计算机的联网方式。</p>\n<p>如何知道当前使用什么方式联网呢？---查看网络适配器。</p>\n<p><img src=\"/images/2020/07/1596176082370.png\" alt=\"1596176082370\" loading=\"lazy\"></p>\n<p><strong>如果主机切换了联网方式，只要去虚拟机里改下对应的下拉选项即可。</strong></p>\n<p><img src=\"/images/2020/07/1596175973333.png\" alt=\"1596175973333\" loading=\"lazy\"></p>\n<p>点击确定，建立虚拟交换机。</p>\n<h4 id=\"更改虚拟机的网络适配器\"><a href=\"#更改虚拟机的网络适配器\" class=\"headerlink\" title=\"更改虚拟机的网络适配器\"></a>更改虚拟机的网络适配器</h4><p>右键---设置---网络适配器：</p>\n<p><img src=\"/images/2020/07/1596176189357.png\" alt=\"1596176189357\" loading=\"lazy\"></p>\n<h3 id=\"debian-设置网络\"><a href=\"#debian-设置网络\" class=\"headerlink\" title=\"debian 设置网络\"></a>debian 设置网络</h3><p>问题描述：</p>\n<p>配置完/etc/networking/interfaces后，使用 /etc/init.d/networking restart 出现启动失败，根据提示输入systemctl status networking.service 发现不认识/etc/networking/interfaces中配置的虚拟网卡(或者是因为虚拟机的重新移动导致的设备不匹配问题等)</p>\n<p>解决方法：</p>\n<p>首先可以查看etc/udev/rules.d/70-persistent-net.rules 是否存在，如果存在，则删除 rm etc/udev/rules.d/70-persistent-net.rules，重启即可</p>\n<p>如果etc/udev/rules.d/70-persistent-net.rules 不存在，则ifconfig -a查看全部网卡，修改/etc/networking/interfaces中的网卡名和ifconfig -a命令显示的网卡名匹配，重启网络即可。</p>\n","categories":["Windows"],"tags":["Windows","软件"]},{"title":"使用 GitBook 进行团队文档协作","url":"/2020/07/2020-07-24-%E4%BD%BF%E7%94%A8GitBook%E8%BF%9B%E8%A1%8C%E5%9B%A2%E9%98%9F%E6%96%87%E6%A1%A3%E5%8D%8F%E4%BD%9C/","content":"<p><strong>GitBook 提供了 GitBook Editor ，GitBook cli 这两个工具，一个是编辑文档，一个可以生成文档。只要本地搭建一个Git 服务就完全可以实现本地化了。</strong></p>\n<h3 id=\"工具准备\"><a href=\"#工具准备\" class=\"headerlink\" title=\"工具准备\"></a>工具准备</h3><p>如果没有团队协作要求，只想生成电子书，只在自己机器上安装GitBook CI 就可以，1，2 就可以省略了。</p>\n<ol>\n<li>GitLab 一键安装包 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9hYm91dC5naXRsYWIuY29tL2Rvd25sb2Fkcy8=\">https://about.gitlab.com/downloads/<i class=\"fa fa-external-link-alt\"></i></span> </li>\n<li>GitLab Ci Runner <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2dpdGxhYmhxL2dpdGxhYi1jaS1ydW5uZXI=\">https://github.com/gitlabhq/gitlab-ci-runner<i class=\"fa fa-external-link-alt\"></i></span> </li>\n<li>GitBook CI <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0dpdGJvb2tJTy9naXRib29rLWNsaQ==\">https://github.com/GitbookIO/gitbook-cli<i class=\"fa fa-external-link-alt\"></i></span> </li>\n<li>GitBook Editor <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZ2l0Ym9vay5jb20vZWRpdG9y\">https://www.gitbook.com/editor<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ol>\n<h3 id=\"GitLab-Runner配置\"><a href=\"#GitLab-Runner配置\" class=\"headerlink\" title=\"GitLab Runner配置\"></a>GitLab Runner配置</h3><h4 id=\"编辑-gitlab-ci-yml\"><a href=\"#编辑-gitlab-ci-yml\" class=\"headerlink\" title=\"编辑 .gitlab-ci.yml\"></a>编辑 .gitlab-ci.yml</h4><pre class=\"language-yml\" data-language=\"yml\"><code class=\"language-yml\"># 定义 stages\nstages:\n  - build\n# 定义 job\nGenerateHTML:\n  stage: build\n  script:\n    - p&#x3D;&#96;pwd&#96;\n    - echo $p\n    - gitbook build</code></pre>\n\n<p>gitlab 执行构建，会在文件夹下生成 _book 的目录。</p>\n<p>手工执行 gitbook serve 启动。</p>\n<p>打开 ip:4000 就可以查看文档了。</p>\n<h3 id=\"相关命令\"><a href=\"#相关命令\" class=\"headerlink\" title=\"相关命令\"></a>相关命令</h3><pre class=\"language-ruby\" data-language=\"ruby\"><code class=\"language-ruby\">$ gitbook init <span class=\"token comment\"># 初始化一个仓库</span>\n\n$ gitbook install <span class=\"token comment\"># 安装插件</span>\n\n$ gitbook serve <span class=\"token comment\"># 本地预览</span>\n\n$ gitbook serve <span class=\"token operator\">--</span>port <span class=\"token number\">8001</span> <span class=\"token comment\"># 指定端口,默认4000</span>\n\n$ gitbook build  <span class=\"token comment\"># 输出一个静态网站</span>\n\n$ gitbook pdf <span class=\"token comment\"># 生成pdf文件</span>\n\n$ gitbook help <span class=\"token comment\"># 查看帮助</span></code></pre>\n\n<p>可以使用<code>--log=debug</code>和<code>--debug</code>来获得更详细的错误消息（堆栈跟踪）。例如：</p>\n<pre class=\"language-none\"><code class=\"language-none\">$ gitbook build .&#x2F; --log&#x3D;debug --debug</code></pre>\n\n<p>or</p>\n<pre class=\"language-none\"><code class=\"language-none\">$ gitbook serve .&#x2F; --log&#x3D;debug --debug</code></pre>\n\n<h3 id=\"Docker容器化\"><a href=\"#Docker容器化\" class=\"headerlink\" title=\"Docker容器化\"></a>Docker容器化</h3><p><code>Dockerfile</code> 文件如下：</p>\n<pre class=\"language-none\"><code class=\"language-none\">From node:10\n\nLABEL version&#x3D;$VERSION\n\nENV TZ&#x3D;Asia&#x2F;Shanghai\nRUN ln -snf &#x2F;usr&#x2F;share&#x2F;zoneinfo&#x2F;$TZ &#x2F;etc&#x2F;localtime &amp;&amp; echo $TZ &gt; &#x2F;etc&#x2F;timezone\n\nWORKDIR &#x2F;gitbook\nCOPY xxx_deploy &#x2F;gitbook\n\nRUN npm install gitbook-cli -g &amp;&amp; gitbook fetch $&#123;VERSION&#125; &amp;&amp; npm cache clear --force &amp;&amp; rm -rf &#x2F;tmp&#x2F;*\nRUN gitbook build\n\nCMD [&quot;gitbook&quot;, &quot;serve&quot;,&quot;--port&quot;,&quot;4000&quot;]</code></pre>\n\n<h3 id=\"问题解决\"><a href=\"#问题解决\" class=\"headerlink\" title=\"问题解决\"></a>问题解决</h3><h4 id=\"windows更新报错\"><a href=\"#windows更新报错\" class=\"headerlink\" title=\"windows更新报错\"></a>windows更新报错</h4><p>gitbook的新版本，在windows下有个bug，当文件内容发生更新时，gitbook报错然后退出：</p>\n<pre class=\"language-none\"><code class=\"language-none\">Error: EPERM: operation not permitted, open</code></pre>\n\n<p>gitbook 官方已有bug，存在半年了，一直没有fix：</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0dpdGJvb2tJTy9naXRib29rL2lzc3Vlcy8xMzc5\">git serve can&#39;t restart when file changes<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0dpdGJvb2tJTy9naXRib29rLWNsaS9pc3N1ZXMvNTE=\">gitbook-cli crashes with EPERM: operation not permitted on windows<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<p><strong>解决方法</strong></p>\n<p>在官方bugfix之前，暂时只能回避：</p>\n<ol>\n<li><p>不要在 windows 下使用gitbook：linux没有这个问题</p>\n</li>\n<li><p>不是办法的办法：</p>\n<p>新建一个 <code>run.bat</code> ，内容如下：</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">@Echo off\n:Start\ncall gitbook serve\ngoto Start</code></pre>\n\n<p>每次崩溃之后立即重新启动一次，凑合着用吧。</p>\n</li>\n</ol>\n<h4 id=\"底部链接修改与隐藏\"><a href=\"#底部链接修改与隐藏\" class=\"headerlink\" title=\"底部链接修改与隐藏\"></a>底部链接修改与隐藏</h4><p>用 GitBook 生成的网页中，在左侧目录下方默认有一个 Published with GitBook 连接，可以将这个连接去掉，或者替换成其它连接。</p>\n<p>在 GitBook 站点目录创建 <code>_layouts-&gt;website-&gt;summary.html</code></p>\n<pre class=\"language-html\" data-language=\"html\"><code class=\"language-html\">&#123;% raw %&#125;\n&#123;% macro articles(_articles) %&#125;\n    &#123;% for article in _articles %&#125;\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>chapter &#123;% if article.path == file.path and not article.anchor %&#125;active&#123;% endif %&#125;<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">data-level</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>&#123;&#123; article.level &#125;&#125;<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">&#123;%</span> <span class=\"token attr-name\">if</span> <span class=\"token attr-name\">article.path</span> <span class=\"token attr-name\">%&#125;data-path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>&#123;&#123; article.path|resolveFile &#125;&#125;<span class=\"token punctuation\">\"</span></span><span class=\"token attr-name\">&#123;%</span> <span class=\"token attr-name\">endif</span> <span class=\"token attr-name\">%&#125;</span><span class=\"token punctuation\">></span></span>\n            &#123;% if article.path and getPageByPath(article.path) %&#125;\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>&#123;&#123; article.path|resolveFile &#125;&#125;&#123;&#123; article.anchor &#125;&#125;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n            &#123;% elif article.url %&#125;\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">target</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>_blank<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>&#123;&#123; article.url &#125;&#125;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n            &#123;% else %&#125;\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>\n            &#123;% endif %&#125;\n                    &#123;% if article.level != \"0\" and config.pluginsConfig['theme-default'].showLevel %&#125;\n                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>b</span><span class=\"token punctuation\">></span></span>&#123;&#123; article.level &#125;&#125;.<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>b</span><span class=\"token punctuation\">></span></span>\n                    &#123;% endif %&#125;\n                    &#123;&#123; article.title &#125;&#125;\n            &#123;% if article.path  or article.url %&#125;\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span>\n            &#123;% else %&#125;\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n            &#123;% endif %&#125;\n\n            &#123;% if article.articles.length > 0 %&#125;\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>articles<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n                &#123;&#123; articles(article.articles, file, config) &#125;&#125;\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span>\n            &#123;% endif %&#125;\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n    &#123;% endfor %&#125;\n&#123;% endmacro %&#125;\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>summary<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    &#123;% set _divider = false %&#125;\n    &#123;% if config.links.sidebar  %&#125;\n    &#123;% for linkTitle, link in config.links.sidebar  %&#125;\n        &#123;% set _divider = true %&#125;\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>&#123;&#123; link &#125;&#125;<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">target</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>_blank<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>custom-link<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>&#123;&#123; linkTitle &#125;&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n    &#123;% endfor %&#125;\n    &#123;% endif %&#125;\n\n    &#123;% if _divider %&#125;\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>divider<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n    &#123;% endif %&#125;\n\n    &#123;% for part in summary.parts %&#125;\n        &#123;% if part.title %&#125;\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>header<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>&#123;&#123; part.title &#125;&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n        &#123;% elif not loop.first %&#125;\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>divider<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n        &#123;% endif %&#125;\n        &#123;&#123; articles(part.articles, file, config) &#125;&#125;\n    &#123;% endfor %&#125;\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>divider<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token comment\">&lt;!--&lt;li>\n        &lt;a href=\"https://www.gitbook.com\" target=\"blank\" class=\"gitbook-link\">\n            &#123;&#123; \"GITBOOK_LINK\"|t &#125;&#125;\n        &lt;/a>\n    &lt;/li>--></span>\n<p><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span><br>&#123;% endraw %&#125;</code></pre>:hexoPostRenderEscape--&gt;</p>\n","categories":["Blog"],"tags":["Blog","GitBook"]},{"title":"为 GitLab 代码库配置 Specific Runner","url":"/2020/07/2020-07-25-%E4%B8%BAGitLab%E4%BB%A3%E7%A0%81%E5%BA%93%E9%85%8D%E7%BD%AESpecific%20Runner/","content":"<h3 id=\"添加-k8s-集群\"><a href=\"#添加-k8s-集群\" class=\"headerlink\" title=\"添加 k8s 集群\"></a>添加 k8s 集群</h3><p>单击<strong>添加现有集群</strong>选项卡，然后填写详细信息：</p>\n<ul>\n<li><p><strong>Kubernetes集群名称</strong>（必填）-您希望为<strong>集群指定</strong>的名称。</p>\n</li>\n<li><p><strong>环境范围</strong>（必需）-  <a href=\"index.md#setting-the-environment-scope-premium\">与</a>此集群<a href=\"index.md#setting-the-environment-scope-premium\">相关的环境</a>。</p>\n</li>\n<li><p><strong>API URL</strong>（必填）-这是GitLab用于访问Kubernetes API的URL。Kubernetes公开了几个API，我们希望所有API都具有通用的“基本” URL，例如，<code>https://kubernetes.example.com</code>而不是<code>https://kubernetes.example.com/api/v1</code>。</p>\n<p>通过运行以下命令获取API URL：</p>\n<pre class=\"language-none\"><code class=\"language-none\">kubectl cluster-info | grep &#39;Kubernetes master&#39; | awk &#39;&#x2F;http&#x2F; &#123;print $NF&#125;&#39;</code></pre>\n</li>\n<li><p><strong>CA证书</strong>（必需）-需要有效的Kubernetes证书才能对集群进行身份验证。我们将使用默认创建的证书。</p>\n<ul>\n<li><p>用列出秘密<code>kubectl get secrets</code>，并命名类似  <code>default-token-xxxxx</code>。复制该令牌名称以在下面使用。</p>\n</li>\n<li><p>通过运行以下命令获取证书：</p>\n<pre class=\"language-none\"><code class=\"language-none\">kubectl get secret &lt;secret name&gt; -o jsonpath&#x3D;&quot;&#123;[&#39;data&#39;][&#39;ca\\.crt&#39;]&#125;&quot; | base64 --decode</code></pre>\n\n<p>注意：<strong>注意：</strong>  如果命令返回整个证书链，则需要在证书链 底部复制<em>root ca</em>证书。</p>\n</li>\n</ul>\n</li>\n<li><p><strong>令牌</strong> -GitLab使用服务令牌对Kubernetes进行身份验证，该服务令牌的范围仅限于特定的<code>namespace</code>。 <strong>使用的令牌应属于具有cluster-admin 特权的服务帐户  。</strong>要创建此服务帐户：</p>\n<ol>\n<li><p>创建一个<code>gitlab-admin-service-account.yaml</code>包含内容的文件：</p>\n<p>&lt;!--hexoPostRenderEscape:<pre class=\"language-none\"><code class=\"language-none\">apiVersion: v1<br>kind: ServiceAccount<br>metadata:<br>name: gitlab-admin<br>namespace: kube-system</p>\n</li>\n</ol>\n</li>\n</ul>\n<hr>\n<p>apiVersion: rbac.authorization.k8s.io&#x2F;v1beta1<br>kind: ClusterRoleBinding<br>metadata:<br>  name: gitlab-admin<br>roleRef:<br>  apiGroup: rbac.authorization.k8s.io<br>  kind: ClusterRole<br>  name: cluster-admin<br>subjects:</p>\n<ul>\n<li><p>kind: ServiceAccount<br>name: gitlab-admin<br>namespace: kube-system</code></pre>:hexoPostRenderEscape--&gt;</p>\n<ol start=\"2\">\n<li><p>将服务帐户和群集角色绑定应用于您的群集：</p>\n<pre class=\"language-none\"><code class=\"language-none\">kubectl apply -f gitlab-admin-service-account.yaml</code></pre>\n\n<p>您将需要<code>container.clusterRoleBindings.create</code>许可权才能创建集群级角色。如果您没有此权限，则可以选择启用基本身份验证，然后<code>kubectl apply</code>以管理员身份运行  命令：</p>\n<pre class=\"language-none\"><code class=\"language-none\">kubectl apply -f gitlab-admin-service-account.yaml --username&#x3D;admin --password&#x3D;&lt;password&gt;</code></pre>\n\n<p>注意：<strong>注意：</strong>  可以打开基本身份验证，并可以使用Google Cloud Console获取密码凭据。</p>\n<p>输出：</p>\n<pre class=\"language-none\"><code class=\"language-none\">serviceaccount &quot;gitlab-admin&quot; created\nclusterrolebinding &quot;gitlab-admin&quot; created</code></pre>\n</li>\n<li><p>检索<code>gitlab-admin</code>服务帐户的令牌：</p>\n<pre class=\"language-none\"><code class=\"language-none\">kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | grep gitlab-admin | awk &#39;&#123;print $1&#125;&#39;)</code></pre>\n\n<p>复制<code>&lt;authentication_token&gt;</code>输出中的值：</p>\n<p>&lt;!--hexoPostRenderEscape:<pre class=\"language-none\"><code class=\"language-none\">Name:         gitlab-admin-token-b5zv4<br>Namespace:    kube-system<br>Labels:       &lt;none&gt;<br>Annotations:  kubernetes.io&#x2F;service-account.name&#x3D;gitlab-admin</p>\n<pre><code>     kubernetes.io&amp;#x2F;service-account.uid&amp;#x3D;bcfe66ac-39be-11e8-97e8-026dce96b6e8</code></pre>\n</li>\n</ol>\n</li>\n</ul>\n<p>Type:  kubernetes.io&#x2F;service-account-token</p>\n<p>Data<br>&#x3D;&#x3D;&#x3D;&#x3D;<br>ca.crt:     1025 bytes<br>namespace:  11 bytes<br>token:      &lt;authentication_token&gt;</code></pre>:hexoPostRenderEscape--&gt;</p>\n<h3 id=\"配置-Specific-Runner\"><a href=\"#配置-Specific-Runner\" class=\"headerlink\" title=\"配置 Specific Runner\"></a>配置 Specific Runner</h3><p>在 GitLab 的 CI/CD 流程中具体执行任务的节点叫做 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmdpdGxhYi5jb20vcnVubmVyLw==\">runner<i class=\"fa fa-external-link-alt\"></i></span>。GitLab 中有两种类型的 runner：</p>\n<ul>\n<li><strong>Shared Runners</strong> 由 GitLab 管理员配置的公有 runner。多个项目公用。作为开发人员无需配置，可以直接使用。</li>\n<li><strong>Specific Runners</strong> 开发人员为每个代码库单独配置的专属 runner。只能执行所属代码库的任务。需要开发人员手动搭建。</li>\n</ul>\n<p>由于我厂的 GitLab 并没有配置任何 Shared Runner。所以只能选择在自己的台式机上手动搭建。</p>\n<h3 id=\"下载-runner-可执行文件\"><a href=\"#下载-runner-可执行文件\" class=\"headerlink\" title=\"下载 runner 可执行文件\"></a>下载 runner 可执行文件</h3><p>根据你的环境下载 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRsYWItcnVubmVyLWRvd25sb2Fkcy5zMy5hbWF6b25hd3MuY29tL2xhdGVzdC9iaW5hcmllcy9naXRsYWItcnVubmVyLXdpbmRvd3MtMzg2LmV4ZQ==\">x86<i class=\"fa fa-external-link-alt\"></i></span> 或者 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRsYWItcnVubmVyLWRvd25sb2Fkcy5zMy5hbWF6b25hd3MuY29tL2xhdGVzdC9iaW5hcmllcy9naXRsYWItcnVubmVyLXdpbmRvd3MtYW1kNjQuZXhl\">amd64<i class=\"fa fa-external-link-alt\"></i></span> 版本。</p>\n<p>创建 <code>D:\\GitLab-Runner</code> 目录，将刚刚下载好的文件复制到该目录并重命名为 <code>gitlab-runner.exe</code>。</p>\n<h3 id=\"获取配置信息\"><a href=\"#获取配置信息\" class=\"headerlink\" title=\"获取配置信息\"></a>获取配置信息</h3><p>进入代码库主页，依次点击 <code>Settings</code> =&gt; <code>CI / CD</code> =&gt; <code>Runners settings</code>。</p>\n<p><img src=\"/images/2020/07/1595562311495.png\" alt=\"1595562311495\" loading=\"lazy\"></p>\n<p>这里展开的信息中有两个字段需要我们记下来。分别是一个 URL 和一个 Token。</p>\n<p><img src=\"/images/2020/07/1595562367478.png\" alt=\"1595562367478\" loading=\"lazy\"></p>\n<h3 id=\"注册-runner\"><a href=\"#注册-runner\" class=\"headerlink\" title=\"注册 runner\"></a>注册 runner</h3><h4 id=\"Linux\"><a href=\"#Linux\" class=\"headerlink\" title=\"Linux\"></a>Linux</h4><pre class=\"language-none\"><code class=\"language-none\">k exec -it runner-gitlab-runner-74cf6f794b-22vln gitlab-runner register -n gitlab-managed-apps</code></pre>\n\n<h4 id=\"Windows\"><a href=\"#Windows\" class=\"headerlink\" title=\"Windows\"></a>Windows</h4><p>进入 <code>D:\\GitLab-Runner</code> 目录执行命令：</p>\n<pre class=\"language-yml\" data-language=\"yml\"><code class=\"language-yml\">.&#x2F;gitlab-runner.exe register</code></pre>\n\n<h4 id=\"进行注册\"><a href=\"#进行注册\" class=\"headerlink\" title=\"进行注册\"></a>进行注册</h4><p>执行完后会进入一个交互式的配置流程，你需要回答以下问题：</p>\n<ul>\n<li><code>Please enter the gitlab-ci coordinator URL</code>：填入上一步获取的 URL</li>\n<li><code>Please enter the gitlab-ci token for this runner</code>：填入上一步获取的 Token</li>\n<li><code>Please enter the gitlab-ci description for this runner</code>：给你的 runner 起一个名字</li>\n<li><code>Please enter the gitlab-ci tags for this runner (comma separated)</code>：GitLab 允许我们给 runner 设置标签，设置好后该 runner 只会执行拥有相同标签的任务。由于我们的 runner 只为我们自己的代码库服务，所以此处不做过多配置。留空即可。</li>\n<li><code>Whether to lock Runner to current project</code>：该 runner 是否应该锁定在当前项目上。由于我们是自己用，选 <code>true</code> 即可。</li>\n<li><code>Please enter the executor: ssh, docker+machine, docker-ssh+machine, kubernetes, docker, parallels, virtualbox, docker-ssh, shell: docker</code>：选择任务执行环境，我们选择最简单的 <code>shell</code>。</li>\n</ul>\n<h3 id=\"验证服务已启动\"><a href=\"#验证服务已启动\" class=\"headerlink\" title=\"验证服务已启动\"></a>验证服务已启动</h3><p>进入代码库主页，依次点击 <code>Settings</code> =&gt; <code>CI / CD</code> =&gt; <code>Runners settings</code>。</p>\n<p><img src=\"/images/2020/07/1595562200358.png\" alt=\"1595562200358\" loading=\"lazy\"></p>\n","categories":["Git"],"tags":["Git"]},{"title":"为Github项目说明添加优美标签","url":"/2020/07/2020-07-30-%E4%B8%BAGithub%E9%A1%B9%E7%9B%AE%E8%AF%B4%E6%98%8E%E6%B7%BB%E5%8A%A0%E4%BC%98%E7%BE%8E%E6%A0%87%E7%AD%BE/","content":"<p>大家在Github上看项目的时候，是不是经常在项目介绍README.md里看到这种高大上的标签：</p>\n<p> <img src=\"/images/2020/07/1596161123283.png\" alt=\"1596161123283\" loading=\"lazy\"></p>\n<p><strong>接下来我们来制作这种标签</strong>。</p>\n<h3 id=\"标签网站\"><a href=\"#标签网站\" class=\"headerlink\" title=\"标签网站\"></a>标签网站</h3><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaGllbGRzLmlvLw==\">https://shields.io/<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<h3 id=\"制作标签\"><a href=\"#制作标签\" class=\"headerlink\" title=\"制作标签\"></a>制作标签</h3><p>下拉，找到Your Badge：</p>\n<p><img src=\"/images/2020/07/1596160368983.png\" alt=\"1596160368983\" loading=\"lazy\"></p>\n<p>填写<strong>subject、status、color</strong>三个字段，点击<strong>Make Badge</strong>生成标签：</p>\n<p><img src=\"/images/2020/07/1596160688666.png\" alt=\"1596160688666\" loading=\"lazy\"></p>\n<p>生成结果：</p>\n<p><img src=\"/images/2020/07/1596160441795.png\" alt=\"1596160441795\" loading=\"lazy\"></p>\n<p>复制标签地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pbWcuc2hpZWxkcy5pby9iYWRnZS9hdXRob3ItSnVlZWUtZ3JlZW4=\">https://img.shields.io/badge/author-Jueee-green<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>在README.md里添加如下代码：</p>\n<pre class=\"language-html\" data-language=\"html\"><code class=\"language-html\">![](https://img.shields.io/badge/author-Jueee-green)</code></pre>\n\n<p>可以看到如下显示：</p>\n<p><img src=\"https://img.shields.io/badge/author-Jueee-green\" loading=\"lazy\"></p>\n<p>这些图片url是有规律的：<code>文字-文字-颜色</code>。</p>\n<h3 id=\"组合标签\"><a href=\"#组合标签\" class=\"headerlink\" title=\"组合标签\"></a>组合标签</h3><pre class=\"language-none\"><code class=\"language-none\">![](https:&#x2F;&#x2F;img.shields.io&#x2F;badge&#x2F;build-success-green) ![](https:&#x2F;&#x2F;img.shields.io&#x2F;badge&#x2F;version-1.0-orange) ![](https:&#x2F;&#x2F;img.shields.io&#x2F;badge&#x2F;author-Jueee-blue)</code></pre>\n\n<p>效果如下：</p>\n<p><img src=\"/images/2020/07/1596162573650.png\" alt=\"1596162573650\" loading=\"lazy\"></p>\n<h3 id=\"添加点击事件\"><a href=\"#添加点击事件\" class=\"headerlink\" title=\"添加点击事件\"></a>添加点击事件</h3><p>为标签添加点击事件，代码如下：</p>\n<pre class=\"language-none\"><code class=\"language-none\">[![](https:&#x2F;&#x2F;img.shields.io&#x2F;badge&#x2F;author-Jueee-green)](点击跳转的链接)</code></pre>\n\n<h4 id=\"为啥这么写？\"><a href=\"#为啥这么写？\" class=\"headerlink\" title=\"为啥这么写？\"></a>为啥这么写？</h4><p>我们知道，MarkDown中<strong>链接</strong>显示语法为</p>\n<pre class=\"language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token punctuation\">[</span>链接名称<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>链接地址<span class=\"token punctuation\">)</span></code></pre>\n\n<p><strong>图片</strong>显示语法为：</p>\n<pre class=\"language-css\" data-language=\"css\"><code class=\"language-css\">![图片名称]<span class=\"token punctuation\">(</span>图片地址<span class=\"token punctuation\">)</span></code></pre>\n\n<p>那么带链接的图片就是将两者语法嵌套就行了，即<code>[链接名称]</code>部分变成图片显示语法，语法变成：</p>\n<pre class=\"language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token punctuation\">[</span><span class=\"token operator\">!</span><span class=\"token punctuation\">[</span>图片名称<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>图片地址<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>链接地址<span class=\"token punctuation\">)</span></code></pre>","categories":["Blog"],"tags":["Blog","HTML"]},{"title":"Arthas之各模块简介","url":"/2020/08/2020-08-02-Arthas%E4%B9%8B%E5%90%84%E6%A8%A1%E5%9D%97%E7%AE%80%E4%BB%8B/","content":"<h3 id=\"Arthas\"><a href=\"#Arthas\" class=\"headerlink\" title=\"Arthas\"></a>Arthas</h3><h4 id=\"项目代码\"><a href=\"#项目代码\" class=\"headerlink\" title=\"项目代码\"></a>项目代码</h4><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvYXJ0aGFz\">GitHub Code by arthas<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h4 id=\"包含模块\"><a href=\"#包含模块\" class=\"headerlink\" title=\"包含模块\"></a>包含模块</h4><p><img src=\"/images/2020/08/1596679506644.png\" alt=\"1596679506644\" loading=\"lazy\"></p>\n<h3 id=\"模块简介\"><a href=\"#模块简介\" class=\"headerlink\" title=\"模块简介\"></a>模块简介</h3><ul>\n<li>arthas-agent：基于JavaAgent技术的代理</li>\n<li>bin：一些启动脚本</li>\n<li>arthas-boot：Java版本的一键安装启动脚本</li>\n<li>arthas-client：telnet client代码</li>\n<li>arthas-common：一些共用的工具类和枚举类</li>\n<li>arthas-core：核心库，各种arthas命令的交互和实现</li>\n<li>arthas-demo：示例代码</li>\n<li>arthas-memorycompiler：内存编绎器代码</li>\n<li>arthas-packaging：maven打包相关的</li>\n<li>arthas-site：arthas站点</li>\n<li>arthas-spy：编织到目标类中的各个切面</li>\n<li>static：静态资源</li>\n<li>arthas-testcase：测试</li>\n</ul>\n<h3 id=\"主要功能\"><a href=\"#主要功能\" class=\"headerlink\" title=\"主要功能\"></a>主要功能</h3><p>Arthas 提供的功能主要可以分为以下三个方面：</p>\n<ol>\n<li>信息监控<ul>\n<li>进程运行基本信息包括：内存、CPU占用、线程信息、线程堆栈、线程数统计、环境变量信息。</li>\n<li>对象信息：类对象静态属性、 Mbean 的属性信息、已加载类信息、类加载器、类方法信息。</li>\n</ul>\n</li>\n<li>方法调用<ul>\n<li>方法调用入参、返回值查看。</li>\n<li>方法被调用的调用路径、调用耗时、方法调用次数、成功次数、失败次数等统计。</li>\n<li>记录和重做方法调用。</li>\n</ul>\n</li>\n<li>类文件处理<ul>\n<li>dump 已加载类的字节码、字节码反编译、类编译、类重新热加载。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"模块关系\"><a href=\"#模块关系\" class=\"headerlink\" title=\"模块关系\"></a>模块关系</h3><p>整体宏观模块调用图：</p>\n<p><img src=\"/images/2020/08/1596698216827.png\" alt=\"1596698216827\" loading=\"lazy\"></p>\n<p>模块描述：</p>\n<p><img src=\"/images/2020/08/1596616373228.png\" alt=\"1596616373228\" loading=\"lazy\"></p>\n<h3 id=\"核心类描述\"><a href=\"#核心类描述\" class=\"headerlink\" title=\"核心类描述\"></a>核心类描述</h3><p>核心类描述：</p>\n<p><img src=\"/images/2020/08/1596710846489.png\" alt=\"1596710846489\" loading=\"lazy\"></p>\n<p>核心类描述（精简版）</p>\n<p><img src=\"/images/2020/08/1596700025625.png\" alt=\"1596700025625\" loading=\"lazy\"></p>\n<h3 id=\"常用命令汇总\"><a href=\"#常用命令汇总\" class=\"headerlink\" title=\"常用命令汇总\"></a>常用命令汇总</h3><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvYXJ0aGFzL2lzc3Vlcy8xMDAz\">Arthas 常用命令汇总<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p><img src=\"/images/2020/08/1596701687793.png\" alt=\"1596701687793\" loading=\"lazy\"></p>\n","categories":["Java","Java诊断"],"tags":["Java诊断","Arthas"]},{"title":"Arthas之jad反编译原理","url":"/2020/08/2020-08-04-Arthas%E4%B9%8Bjad%E5%8F%8D%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/","content":"<h3 id=\"jad-命令介绍\"><a href=\"#jad-命令介绍\" class=\"headerlink\" title=\"jad 命令介绍\"></a>jad 命令介绍</h3><p>jad 即 java decompiler，把 JVM 已加载类的字节码反编译成Java代码。</p>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9hbGliYWJhLmdpdGh1Yi5pby9hcnRoYXMvamFkLmh0bWw=\">https://alibaba.github.io/arthas/jad.html<i class=\"fa fa-external-link-alt\"></i></span></p>\n</blockquote>\n<h3 id=\"获取到类的字节码\"><a href=\"#获取到类的字节码\" class=\"headerlink\" title=\"获取到类的字节码\"></a>获取到类的字节码</h3><p>反编译有两部分工作：</p>\n<ol>\n<li>获取到字节码</li>\n<li>反编译为Java代码</li>\n</ol>\n<p>那么怎么从运行的JVM里获取到字节码？</p>\n<p>最常见的思路是，在<code>classpaths</code>下面查找，比如 <code>ClassLoader.getResource(&quot;java/lang/String.class&quot;)</code>，但是这样子查找到的字节码不一定对。比如可能有多个冲突的jar，或者有Java Agent修改了字节码。</p>\n<h3 id=\"ClassFileTransformer机制\"><a href=\"#ClassFileTransformer机制\" class=\"headerlink\" title=\"ClassFileTransformer机制\"></a>ClassFileTransformer机制</h3><p>从JDK 1.5起，有一套<code>ClassFileTransformer</code>的机制，Java Agent通过<code>Instrumentation</code>注册<code>ClassFileTransformer</code>，那么在类加载或者<code>retransform</code>时就可以回调修改字节码。</p>\n<p>显然，在Arthas里，要增强的类是已经被加载的，所以它们的字节码都是在<code>retransform</code>时被修改的。<br>通过显式调用<code>Instrumentation.retransformClasses(Class&lt;?&gt;...)</code>可以触发回调。</p>\n<p>Arthas里增强字节码的<code>watch</code>/<code>trace</code>/<code>stack</code>/<code>tt</code>等命令都是通过<code>ClassFileTransformer</code>来实现的。</p>\n<p><code>java.lang.instrument.ClassFileTransformer</code>的接口如下：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">ClassFileTransformer</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token function\">transform</span><span class=\"token punctuation\">(</span>  <span class=\"token class-name\">ClassLoader</span>         loader<span class=\"token punctuation\">,</span>\n                <span class=\"token class-name\">String</span>              className<span class=\"token punctuation\">,</span>\n                <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span>            classBeingRedefined<span class=\"token punctuation\">,</span>\n                <span class=\"token class-name\">ProtectionDomain</span>    protectionDomain<span class=\"token punctuation\">,</span>\n                <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>              classfileBuffer<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IllegalClassFormatException</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<p>看到这里，读者应该猜到<code>jad</code>是怎么获取到字节码的了：</p>\n<ol>\n<li>注册一个<code>ClassFileTransformer</code></li>\n<li>通过<code>Instrumentation.retransformClasses</code>触发回调</li>\n<li>在回调的<code>transform</code>函数里获取到字节码</li>\n<li>删掉注册的<code>ClassFileTransformer</code></li>\n</ol>\n<h3 id=\"使用cfr来反编译\"><a href=\"#使用cfr来反编译\" class=\"headerlink\" title=\"使用cfr来反编译\"></a>使用cfr来反编译</h3><p>获取到字节码之后，怎样转换为Java代码呢？</p>\n<p>以前大家使用比较多的反编译软件可能是<code>jd-gui</code>，但是它不支持JDK8的lambda语法和一些新版本JDK的特性。</p>\n<p>后面比较成熟的反编译软件是<code>cfr</code>，它以前是不开源的。直到最近的<code>0.145</code>版本，作者终于开源了，可喜可贺。地址是</p>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2xlaWJuaXR6MjcvY2Zy\">https://github.com/leibnitz27/cfr<i class=\"fa fa-external-link-alt\"></i></span></p>\n</blockquote>\n<p>在Arthas <code>jad</code>命令里，通过调用<code>cfr</code>来完成反编译。</p>\n<h3 id=\"jad-命令的缺陷\"><a href=\"#jad-命令的缺陷\" class=\"headerlink\" title=\"jad 命令的缺陷\"></a>jad 命令的缺陷</h3><p>99%的情况下，<code>jad</code>命令dump下来的字节码是准确的，除了一些极端情况。</p>\n<ol>\n<li>因为JVM里注册的<code>ClassFileTransformer</code>可能有多个，那么在JVM里运行的字节码里，可能是被多个<code>ClassFileTransformer</code>处理过的。</li>\n<li>触发了<code>retransformClasses</code>之后，这些注册的<code>ClassFileTransformer</code>会被依次回，上一个处理的字节码传递到下一个。<br>所以不能保证这些<code>ClassFileTransformer</code>第二次执行会返回同样的结果。</li>\n<li>有可能一些<code>ClassFileTransformer</code>会被删掉，触发<code>retransformClasses</code>之后，之前的一些修改就会丢失掉。</li>\n</ol>\n<p>所以目前在Arthas里，如果开两个窗口，一个窗口执行<code>watch</code>/<code>tt</code>等命令，另一个窗口对这个类执行<code>jad</code>，那么可以观察到<code>watch</code>/<code>tt</code>停止了输出，实际上是因为字节码在触发了<code>retransformClasses</code>之后，<code>watch</code>/<code>tt</code>所做的修改丢失了。</p>\n<h3 id=\"精确获取字节码\"><a href=\"#精确获取字节码\" class=\"headerlink\" title=\"精确获取字节码\"></a>精确获取字节码</h3><p>如果想精确获取到JVM内运行的Java字节码，可以使用这个<code>dumpclass</code>工具，它是通过<code>sa-jdi.jar</code>来实现的，保证dump下来的字节码是JVM内所运行的。</p>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hlbmd5dW5hYmMvZHVtcGNsYXNz\">https://github.com/hengyunabc/dumpclass<i class=\"fa fa-external-link-alt\"></i></span></p>\n</blockquote>\n<h3 id=\"cfr反编译示例\"><a href=\"#cfr反编译示例\" class=\"headerlink\" title=\"cfr反编译示例\"></a>cfr反编译示例</h3><p>参考Arthas代码：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvYXJ0aGFzL2Jsb2IvbWFzdGVyL2NvcmUvc3JjL21haW4vamF2YS9jb20vdGFvYmFvL2FydGhhcy9jb3JlL3V0aWwvRGVjb21waWxlci5qYXZh\">com.taobao.arthas.core.util.Decompiler.java<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h4 id=\"引入依赖\"><a href=\"#引入依赖\" class=\"headerlink\" title=\"引入依赖\"></a>引入依赖</h4><p>首先，需要引入 maven 依赖：</p>\n<pre class=\"language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.benf<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>cfr<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>0.150<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></code></pre>\n\n<h4 id=\"编写方法\"><a href=\"#编写方法\" class=\"headerlink\" title=\"编写方法\"></a>编写方法</h4><p>编写反编译类 <code>sample.utils.Decompiler</code>：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">decompile</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> classFilePath<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> methodName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">decompile</span><span class=\"token punctuation\">(</span>classFilePath<span class=\"token punctuation\">,</span> methodName<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">/**\n * @param classFilePath\n * @param methodName\n * @param hideUnicode\n * @return\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">decompile</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> classFilePath<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> methodName<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> hideUnicode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">final</span> <span class=\"token class-name\">StringBuilder</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token number\">8192</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">OutputSinkFactory</span> mySink <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OutputSinkFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token annotation punctuation\">@Override</span>\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SinkClass</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getSupportedSinks</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SinkType</span> sinkType<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SinkClass</span><span class=\"token punctuation\">></span></span> collection<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SinkClass</span><span class=\"token punctuation\">.</span>STRING<span class=\"token punctuation\">,</span> <span class=\"token class-name\">SinkClass</span><span class=\"token punctuation\">.</span>DECOMPILED<span class=\"token punctuation\">,</span> <span class=\"token class-name\">SinkClass</span><span class=\"token punctuation\">.</span>DECOMPILED_MULTIVER<span class=\"token punctuation\">,</span>\n                            <span class=\"token class-name\">SinkClass</span><span class=\"token punctuation\">.</span>EXCEPTION_MESSAGE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token annotation punctuation\">@Override</span>\n        <span class=\"token keyword\">public</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">Sink</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getSink</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">SinkType</span> sinkType<span class=\"token punctuation\">,</span> <span class=\"token class-name\">SinkClass</span> sinkClass<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Sink</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token annotation punctuation\">@Override</span>\n                <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> sinkable<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token comment\">// skip message like: Analysing type demo.MathGame</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sinkType <span class=\"token operator\">==</span> <span class=\"token class-name\">SinkType</span><span class=\"token punctuation\">.</span>PROGRESS<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                    result<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>sinkable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> options <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/**\n     * @see org.benf.cfr.reader.util.MiscConstants.Version.getVersion() Currently,\n     *      the cfr version is wrong. so disable show cfr version.\n     */</span>\n    options<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"showversion\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"false\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    options<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hideutf\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>hideUnicode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isBlank</span><span class=\"token punctuation\">(</span>methodName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        options<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"methodname\"</span><span class=\"token punctuation\">,</span> methodName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token class-name\">CfrDriver</span> driver <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CfrDriver</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">withOptions</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">withOutputSink</span><span class=\"token punctuation\">(</span>mySink<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> toAnalyse <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    toAnalyse<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>classFilePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    driver<span class=\"token punctuation\">.</span><span class=\"token function\">analyse</span><span class=\"token punctuation\">(</span>toAnalyse<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<h4 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h4><pre class=\"language-none\"><code class=\"language-none\">String className &#x3D; &quot;sample&#x2F;redefine&#x2F;RedefineSuccess.class&quot;;\nString classPath &#x3D; Thread.currentThread().getContextClassLoader().getResource(className).getFile();\nSystem.out.println(classPath);\n\nString result &#x3D; decompile(classPath, null);\nSystem.out.println(result);\n\nString result2 &#x3D; decompile(classPath, &quot;printFlag&quot;);\nSystem.out.println(result2);</code></pre>\n\n<h4 id=\"输出\"><a href=\"#输出\" class=\"headerlink\" title=\"输出\"></a>输出</h4><pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token operator\">/</span><span class=\"token class-name\">C</span><span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token class-name\">Codes</span><span class=\"token operator\">/</span><span class=\"token class-name\">JavaWorkSpace</span><span class=\"token operator\">/</span>workspace48<span class=\"token operator\">/</span>arthas<span class=\"token operator\">-</span>demo<span class=\"token operator\">/</span>target<span class=\"token operator\">/</span>classes<span class=\"token operator\">/</span>sample<span class=\"token operator\">/</span>redefine<span class=\"token operator\">/</span><span class=\"token class-name\">RedefineSuccess</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span>\n<span class=\"token comment\">/*\n * Decompiled with CFR.\n */</span>\n<span class=\"token keyword\">package</span> <span class=\"token namespace\">sample<span class=\"token punctuation\">.</span>redefine</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RedefineSuccess</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">3L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">RedefineSuccess</span><span class=\"token punctuation\">.</span><span class=\"token function\">printFlag</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printFlag</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">boolean</span> flag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"flag is true.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"flag is false.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printFlag</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">boolean</span> flag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"flag is true.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"flag is false.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<h3 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h3><blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL2hlbmd5dW5hYmMuZ2l0aHViLmlvL2FydGhhcy1qYWQv\">http://hengyunabc.github.io/arthas-jad/<i class=\"fa fa-external-link-alt\"></i></span></p>\n</blockquote>\n","categories":["Java","Java诊断"],"tags":["Java诊断","Arthas"]},{"title":"idea相关配置总结","url":"/2020/07/2020-08-06-idea%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE%E6%80%BB%E7%BB%93/","content":"<h3 id=\"对maven仓库建立快捷方式\"><a href=\"#对maven仓库建立快捷方式\" class=\"headerlink\" title=\"对maven仓库建立快捷方式\"></a>对maven仓库建立快捷方式</h3><p>对于 maven 仓库配置在其他磁盘的情况，建立快捷方式。</p>\n<p>使用管理员权限执行如下命令：</p>\n<pre class=\"language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">cmd <span class=\"token operator\">/</span>c mklink <span class=\"token operator\">/</span>D C:\\Users\\hzweiyongqiang\\<span class=\"token punctuation\">.</span>m2\\repository E:\\code\\Java\\repository</code></pre>\n\n<h3 id=\"配置阿里云中央仓库\"><a href=\"#配置阿里云中央仓库\" class=\"headerlink\" title=\"配置阿里云中央仓库\"></a>配置阿里云中央仓库</h3><p>进入到idea安装目录，找到\\plugins\\maven\\lib 目录，可以看到maven有几个</p>\n<p><img src=\"/images/2020/08/1596678866870.png\" alt=\"1596678866870\" loading=\"lazy\"></p>\n<p>修改 maven3 下 conf 目录下的settings.xml 。</p>\n<p>找到mirrors，添加以下内容：</p>\n<pre class=\"language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mirror</span><span class=\"token punctuation\">></span></span>  \n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>id</span><span class=\"token punctuation\">></span></span>alimaven<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>id</span><span class=\"token punctuation\">></span></span>  \n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>aliyun maven<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>  \n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>url</span><span class=\"token punctuation\">></span></span>http://maven.aliyun.com/nexus/content/groups/public/<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>url</span><span class=\"token punctuation\">></span></span>  \n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mirrorOf</span><span class=\"token punctuation\">></span></span>central<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>mirrorOf</span><span class=\"token punctuation\">></span></span>          \n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>mirror</span><span class=\"token punctuation\">></span></span></code></pre>\n\n<p>修改后保存，打开idea，菜单 file-settings,搜索maven，选择刚才修改的maven：</p>\n<p><img src=\"/images/2020/08/1596679064163.png\" alt=\"1596679064163\" loading=\"lazy\"></p>\n<p>设置好后保存，以后使用maven速度会提升很多倍。</p>\n<h3 id=\"鼠标控制放大缩小\"><a href=\"#鼠标控制放大缩小\" class=\"headerlink\" title=\"鼠标控制放大缩小\"></a>鼠标控制放大缩小</h3><p>File -&gt; Setting -&gt; Editor -&gt; General</p>\n<p><img src=\"/images/2020/08/1596680119868.png\" alt=\"1596680119868\" loading=\"lazy\"></p>\n","categories":["软件","IDE"],"tags":["软件","idea"]},{"title":"Arthas之源码简要分析","url":"/2020/08/2020-08-03-Arthas%E4%B9%8B%E6%BA%90%E7%A0%81%E7%AE%80%E8%A6%81%E5%88%86%E6%9E%90/","content":"<h3 id=\"启动模块（boot）\"><a href=\"#启动模块（boot）\" class=\"headerlink\" title=\"启动模块（boot）\"></a>启动模块（boot）</h3><h4 id=\"启动-Arthas\"><a href=\"#启动-Arthas\" class=\"headerlink\" title=\"启动 Arthas\"></a>启动 Arthas</h4><pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token function\">wget</span> https://alibaba.github.io/arthas/arthas-boot.jar\njava -jar arthas-boot.jar</code></pre>\n\n<p><strong>模块代码</strong>：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvYXJ0aGFzL3RyZWUvbWFzdGVyL2Jvb3Q=\">GitHub Code by arthas-boot<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h4 id=\"模块入口\"><a href=\"#模块入口\" class=\"headerlink\" title=\"模块入口\"></a>模块入口</h4><p>在 arthas-boot模块的 pom.xml 文件中，找到启动类：</p>\n<pre class=\"language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>manifest</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mainClass</span><span class=\"token punctuation\">></span></span>com.taobao.arthas.boot.Bootstrap<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>mainClass</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>manifest</span><span class=\"token punctuation\">></span></span></code></pre>\n\n<p><code>com.taobao.arthas.boot.Bootstrap.main()</code> 方法：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvYXJ0aGFzL2Jsb2IvbWFzdGVyL2Jvb3Qvc3JjL21haW4vamF2YS9jb20vdGFvYmFvL2FydGhhcy9ib290L0Jvb3RzdHJhcC5qYXZhI0wyNzM=\">GitHub Code by Bootstrap.java<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h4 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h4><h5 id=\"参数解析\"><a href=\"#参数解析\" class=\"headerlink\" title=\"参数解析\"></a>参数解析</h5><p>使用了阿里开源的组件 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvY2xp\">cli<i class=\"fa fa-external-link-alt\"></i></span>，对参数进行了解析。</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">CLI</span> cli <span class=\"token operator\">=</span> <span class=\"token class-name\">CLIConfigurator</span><span class=\"token punctuation\">.</span><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Bootstrap</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">CommandLine</span> commandLine <span class=\"token operator\">=</span> cli<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">CLIConfigurator</span><span class=\"token punctuation\">.</span><span class=\"token function\">inject</span><span class=\"token punctuation\">(</span>commandLine<span class=\"token punctuation\">,</span> bootstrap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">usage</span><span class=\"token punctuation\">(</span>cli<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<h5 id=\"参数处理\"><a href=\"#参数处理\" class=\"headerlink\" title=\"参数处理\"></a>参数处理</h5><p>对传入的参数进行处理。</p>\n<p>如调整日志级别，设置 RepoMirror 地址，Java版本，telnet/http的端口检查。</p>\n<h5 id=\"检查-pid\"><a href=\"#检查-pid\" class=\"headerlink\" title=\"检查 pid\"></a>检查 pid</h5><p>如果在传入参数中没有 pid，则会调用本地 jps 命令，列出 java 进程（当然会排除本身）</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">long</span> pid <span class=\"token operator\">=</span> bootstrap<span class=\"token punctuation\">.</span><span class=\"token function\">getPid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// select pid</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pid <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n        pid <span class=\"token operator\">=</span> <span class=\"token class-name\">ProcessUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span>bootstrap<span class=\"token punctuation\">.</span><span class=\"token function\">isVerbose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> telnetPortPid<span class=\"token punctuation\">,</span> bootstrap<span class=\"token punctuation\">.</span><span class=\"token function\">getSelect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InputMismatchException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Please input an integer to select pid.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pid <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Please select an available pid.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvYXJ0aGFzL2Jsb2IvbWFzdGVyL2Jvb3Qvc3JjL21haW4vamF2YS9jb20vdGFvYmFvL2FydGhhcy9ib290L1Byb2Nlc3NVdGlscy5qYXZhI0wxMjM=\">GitHub Code by ProcessUtils.java<i class=\"fa fa-external-link-alt\"></i></span></p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Long</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">listProcessByJps</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">boolean</span> v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Long</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedHashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Long</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">String</span> jps <span class=\"token operator\">=</span> <span class=\"token string\">\"jps\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">File</span> jpsFile <span class=\"token operator\">=</span> <span class=\"token function\">findJps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>jpsFile <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        jps <span class=\"token operator\">=</span> jpsFile<span class=\"token punctuation\">.</span><span class=\"token function\">getAbsolutePath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token class-name\">AnsiLog</span><span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Try use jps to lis java process, jps: \"</span> <span class=\"token operator\">+</span> jps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> command <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        command <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span> jps<span class=\"token punctuation\">,</span> <span class=\"token string\">\"-v\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"-l\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        command <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span> jps<span class=\"token punctuation\">,</span> <span class=\"token string\">\"-l\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> lines <span class=\"token operator\">=</span> <span class=\"token class-name\">ExecutingCommand</span><span class=\"token punctuation\">.</span><span class=\"token function\">runNative</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">AnsiLog</span><span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jps result: \"</span> <span class=\"token operator\">+</span> lines<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">long</span> currentPid <span class=\"token operator\">=</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseLong</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PidUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentPid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> line <span class=\"token operator\">:</span> lines<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> strings <span class=\"token operator\">=</span> line<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\\\s+\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>strings<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">long</span> pid <span class=\"token operator\">=</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseLong</span><span class=\"token punctuation\">(</span>strings<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pid <span class=\"token operator\">==</span> currentPid<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>strings<span class=\"token punctuation\">.</span>length <span class=\"token operator\">>=</span> <span class=\"token number\">2</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">isJpsProcess</span><span class=\"token punctuation\">(</span>strings<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// skip jps</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            result<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>pid<span class=\"token punctuation\">,</span> line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// https://github.com/alibaba/arthas/issues/970</span>\n            <span class=\"token comment\">// ignore</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<h5 id=\"启动服务端\"><a href=\"#启动服务端\" class=\"headerlink\" title=\"启动服务端\"></a>启动服务端</h5><p>进入主逻辑，会在用户目录下建立 <code>.arthas</code> 目录，同时下载 <code>arthas-core</code> 和 <code>arthas-agent</code> 等lib文件，然后启动客户端和服务端。</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>telnetPortPid <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> pid <span class=\"token operator\">==</span> telnetPortPid<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">AnsiLog</span><span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The target process already listen port &#123;&#125;, skip attach.\"</span><span class=\"token punctuation\">,</span> bootstrap<span class=\"token punctuation\">.</span><span class=\"token function\">getTelnetPort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//double check telnet port and pid before attach</span>\n    telnetPortPid <span class=\"token operator\">=</span> <span class=\"token function\">findProcessByTelnetClient</span><span class=\"token punctuation\">(</span>arthasHomeDir<span class=\"token punctuation\">.</span><span class=\"token function\">getAbsolutePath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> bootstrap<span class=\"token punctuation\">.</span><span class=\"token function\">getTelnetPort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">checkTelnetPortPid</span><span class=\"token punctuation\">(</span>bootstrap<span class=\"token punctuation\">,</span> telnetPortPid<span class=\"token punctuation\">,</span> pid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// start arthas-core.jar</span>\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> attachArgs <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    attachArgs<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-jar\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    attachArgs<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span>arthasHomeDir<span class=\"token punctuation\">,</span> <span class=\"token string\">\"arthas-core.jar\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAbsolutePath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    attachArgs<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-pid\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    attachArgs<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span> <span class=\"token operator\">+</span> pid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    attachArgs<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-target-ip\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    attachArgs<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>bootstrap<span class=\"token punctuation\">.</span><span class=\"token function\">getTargetIp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    attachArgs<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-telnet-port\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    attachArgs<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span> <span class=\"token operator\">+</span> bootstrap<span class=\"token punctuation\">.</span><span class=\"token function\">getTelnetPort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    attachArgs<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-http-port\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    attachArgs<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span> <span class=\"token operator\">+</span> bootstrap<span class=\"token punctuation\">.</span><span class=\"token function\">getHttpPort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    attachArgs<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-core\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    attachArgs<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span>arthasHomeDir<span class=\"token punctuation\">,</span> <span class=\"token string\">\"arthas-core.jar\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAbsolutePath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    attachArgs<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-agent\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    attachArgs<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span>arthasHomeDir<span class=\"token punctuation\">,</span> <span class=\"token string\">\"arthas-agent.jar\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAbsolutePath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bootstrap<span class=\"token punctuation\">.</span><span class=\"token function\">getSessionTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        attachArgs<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-session-timeout\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        attachArgs<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span> <span class=\"token operator\">+</span> bootstrap<span class=\"token punctuation\">.</span><span class=\"token function\">getSessionTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bootstrap<span class=\"token punctuation\">.</span><span class=\"token function\">getTunnelServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        attachArgs<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-tunnel-server\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        attachArgs<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>bootstrap<span class=\"token punctuation\">.</span><span class=\"token function\">getTunnelServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bootstrap<span class=\"token punctuation\">.</span><span class=\"token function\">getAgentId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        attachArgs<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-agent-id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        attachArgs<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>bootstrap<span class=\"token punctuation\">.</span><span class=\"token function\">getAgentId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bootstrap<span class=\"token punctuation\">.</span><span class=\"token function\">getStatUrl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        attachArgs<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-stat-url\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        attachArgs<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>bootstrap<span class=\"token punctuation\">.</span><span class=\"token function\">getStatUrl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token class-name\">AnsiLog</span><span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Try to attach process \"</span> <span class=\"token operator\">+</span> pid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">AnsiLog</span><span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Start arthas-core.jar args: \"</span> <span class=\"token operator\">+</span> attachArgs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 启动服务端</span>\n    <span class=\"token class-name\">ProcessUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">startArthasCore</span><span class=\"token punctuation\">(</span>pid<span class=\"token punctuation\">,</span> attachArgs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">AnsiLog</span><span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Attach process &#123;&#125; success.\"</span><span class=\"token punctuation\">,</span> pid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<h5 id=\"启动客户端\"><a href=\"#启动客户端\" class=\"headerlink\" title=\"启动客户端\"></a>启动客户端</h5><p>最后通过反射的方式来启动字符客户端，等待用户输入指令。</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">URLClassLoader</span> classLoader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URLClassLoader</span><span class=\"token punctuation\">(</span>\n                <span class=\"token keyword\">new</span> URL<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span>arthasHomeDir<span class=\"token punctuation\">,</span> <span class=\"token string\">\"arthas-client.jar\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toURI</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toURL</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> telnetConsoleClas <span class=\"token operator\">=</span> classLoader<span class=\"token punctuation\">.</span><span class=\"token function\">loadClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.taobao.arthas.client.TelnetConsole\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Method</span> mainMethod <span class=\"token operator\">=</span> telnetConsoleClas<span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"main\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n<h3 id=\"服务端模块（core）\"><a href=\"#服务端模块（core）\" class=\"headerlink\" title=\"服务端模块（core）\"></a>服务端模块（core）</h3><p><strong>模块代码</strong>：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvYXJ0aGFzL3RyZWUvbWFzdGVyL2NvcmU=\">GitHub Code by arthas-core<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h4 id=\"模块入口-1\"><a href=\"#模块入口-1\" class=\"headerlink\" title=\"模块入口\"></a>模块入口</h4><p>在 arthas-core 模块的 pom.xml 中，找到启动类：</p>\n<pre class=\"language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>transformers</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>transformer</span> <span class=\"token attr-name\">implementation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>org.apache.maven.plugins.shade.resource.ManifestResourceTransformer<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mainClass</span><span class=\"token punctuation\">></span></span>com.taobao.arthas.core.Arthas<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>mainClass</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>transformer</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>transformers</span><span class=\"token punctuation\">></span></span></code></pre>\n\n<p><code>com.taobao.arthas.core.Arthas.main()</code> 方法：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvYXJ0aGFzL2Jsb2IvbWFzdGVyL2NvcmUvc3JjL21haW4vamF2YS9jb20vdGFvYmFvL2FydGhhcy9jb3JlL0FydGhhcy5qYXZh\">GitHub Code by Arthas.java<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h4 id=\"源码分析-1\"><a href=\"#源码分析-1\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h4><h5 id=\"连接进程\"><a href=\"#连接进程\" class=\"headerlink\" title=\"连接进程\"></a>连接进程</h5><p>使用 <code>VirutalMachine.attach(pid)</code> 来连接进程,同时使用 <code>virtualMachine.loadAgent</code> 加载自定义的agent.</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">attachAgent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Configure</span> configure<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 省略部分代码</span>\n    <span class=\"token comment\">// 连接进程</span>\n            virtualMachine <span class=\"token operator\">=</span> <span class=\"token class-name\">VirtualMachine</span><span class=\"token punctuation\">.</span><span class=\"token function\">attach</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span> <span class=\"token operator\">+</span> configure<span class=\"token punctuation\">.</span><span class=\"token function\">getJavaPid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 省略部分代码</span>\n    <span class=\"token comment\">// 动态加载Agent</span>\n        virtualMachine<span class=\"token punctuation\">.</span><span class=\"token function\">loadAgent</span><span class=\"token punctuation\">(</span>arthasAgentPath<span class=\"token punctuation\">,</span>\n                configure<span class=\"token punctuation\">.</span><span class=\"token function\">getArthasCore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\";\"</span> <span class=\"token operator\">+</span> configure<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<h3 id=\"JavaAgent代理（agent）\"><a href=\"#JavaAgent代理（agent）\" class=\"headerlink\" title=\"JavaAgent代理（agent）\"></a>JavaAgent代理（agent）</h3><p><strong>模块代码</strong>：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvYXJ0aGFzL3RyZWUvbWFzdGVyL2FnZW50\">GitHub Code by arthas-agent<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h4 id=\"模块入口-2\"><a href=\"#模块入口-2\" class=\"headerlink\" title=\"模块入口\"></a>模块入口</h4><p>在 arthas-core 模块的 pom.xml 中，找到启动类：</p>\n<pre class=\"language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>manifestEntries</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Premain-Class</span><span class=\"token punctuation\">></span></span>com.taobao.arthas.agent334.AgentBootstrap<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Premain-Class</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Agent-Class</span><span class=\"token punctuation\">></span></span>com.taobao.arthas.agent334.AgentBootstrap<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Agent-Class</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>manifestEntries</span><span class=\"token punctuation\">></span></span></code></pre>\n\n<p><code>com.taobao.arthas.agent334.AgentBootstrap.main()</code> 方法：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvYXJ0aGFzL2Jsb2IvbWFzdGVyL2FnZW50L3NyYy9tYWluL2phdmEvY29tL3Rhb2Jhby9hcnRoYXMvYWdlbnQzMzQvQWdlbnRCb290c3RyYXAuamF2YQ==\">GitHub Code by AgentBootstrap.java<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h4 id=\"源码分析-2\"><a href=\"#源码分析-2\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h4><p><code>main()</code>方法中对于<code>arthas-spy</code>(简单理解为勾子类,类似于spring aop的前置方法,后置方法)进行了加载。</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">final</span> <span class=\"token class-name\">ClassLoader</span> agentLoader <span class=\"token operator\">=</span> <span class=\"token function\">getClassLoader</span><span class=\"token punctuation\">(</span>inst<span class=\"token punctuation\">,</span> arthasCoreJarFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n<p>将spyJar添加到了BootstrapClassLoader(启动类加载器)，优先加载启动类加载器，spy可以在各个ClassLoader中使用。</p>\n<pre class=\"language-none\"><code class=\"language-none\">private static ClassLoader getClassLoader(Instrumentation inst, File arthasCoreJarFile) throws Throwable &#123;\n    &#x2F;&#x2F; 构造自定义的类加载器，尽量减少Arthas对现有工程的侵蚀\n    return loadOrDefineClassLoader(arthasCoreJarFile);\n&#125;</code></pre>\n\n<p>异步调用bind()方法，启动服务端，监听端口，和客户端进行通讯。</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Thread</span> bindingThread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>inst<span class=\"token punctuation\">,</span> agentLoader<span class=\"token punctuation\">,</span> agentArgs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> throwable<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            throwable<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span>ps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></code></pre>\n\n","categories":["Java","Java诊断"],"tags":["Java诊断","Arthas"]},{"title":"搭建hexo+github+next主题博客","url":"/2020/08/2020-08-07-%E6%90%AD%E5%BB%BAhexo+github+next%E4%B8%BB%E9%A2%98%E5%8D%9A%E5%AE%A2/","content":"<h3 id=\"博客介绍\"><a href=\"#博客介绍\" class=\"headerlink\" title=\"博客介绍\"></a>博客介绍</h3><p>博客预览地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly90aGVtZS1uZXh0LmpzLm9yZy8=\">https://theme-next.js.org/<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h3 id=\"搭建博客\"><a href=\"#搭建博客\" class=\"headerlink\" title=\"搭建博客\"></a>搭建博客</h3><p>GitHub：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL25leHQtdGhlbWUvdGhlbWUtbmV4dC1kb2Nz\">https://github.com/next-theme/theme-next-docs<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>在本地安装：</p>\n<pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token function\">git</span> clone https://github.com/next-theme/theme-next-docs\n<span class=\"token builtin class-name\">cd</span> theme-next-docs\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span></code></pre>\n\n<p>生成：</p>\n<pre class=\"language-none\"><code class=\"language-none\">npx hexo generate</code></pre>\n\n<p>运行：</p>\n<pre class=\"language-none\"><code class=\"language-none\">npx hexo server</code></pre>\n\n<h3 id=\"博客主题\"><a href=\"#博客主题\" class=\"headerlink\" title=\"博客主题\"></a>博客主题</h3><p>GitHub：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL25leHQtdGhlbWUvaGV4by10aGVtZS1uZXh0\">https://github.com/next-theme/hexo-theme-next<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h3 id=\"发布到github-io\"><a href=\"#发布到github-io\" class=\"headerlink\" title=\"发布到github.io\"></a>发布到github.io</h3><p>在 hexo下的_config.yml文件中配置：</p>\n<pre class=\"language-yml\" data-language=\"yml\"><code class=\"language-yml\">deploy:\n  type: git\n  repository: git@github.com:Jueee&#x2F;jueee.github.io.git\n  branch: master</code></pre>\n\n<p>安装插件：</p>\n<pre class=\"language-none\"><code class=\"language-none\">npm install hexo-deployer-git --save</code></pre>\n\n<p>打开你的git bash，输入<code>hexo d</code>就会将本次有改动的代码全部提交，没有改动的不会：</p>\n<pre class=\"language-none\"><code class=\"language-none\">$ npx hexo g -d</code></pre>\n\n<p>【注】部署这个命令一定要用git bash，否则会提示<code>Permission denied (publickey).</code></p>\n<p>此时，会在项目中生成 <code>.deploy_git</code> 文件夹。</p>\n<p>打开git bash，切换到hexo/.deploy_git，执行</p>\n<pre class=\"language-none\"><code class=\"language-none\">git init</code></pre>\n\n<p>再绑定远程仓库</p>\n<pre class=\"language-none\"><code class=\"language-none\">git remote add origin git@github.com:jueee&#x2F;jueee.github.io.git</code></pre>\n\n<p>回到cmd命令行</p>\n<pre class=\"language-none\"><code class=\"language-none\">$ npx hexo g -d</code></pre>\n\n<p>搞定了，成功提交了正确的博客内容。</p>\n<h3 id=\"常用hexo命令\"><a href=\"#常用hexo命令\" class=\"headerlink\" title=\"常用hexo命令\"></a>常用hexo命令</h3><p>常见命令</p>\n<pre class=\"language-none\"><code class=\"language-none\">hexo new &quot;postName&quot; #新建文章\nhexo new page &quot;pageName&quot; #新建页面\nhexo generate #生成静态页面至public目录\nhexo server #开启预览访问端口（默认端口4000，&#39;ctrl + c&#39;关闭server）\nhexo deploy #部署到GitHub\nhexo help  # 查看帮助\nhexo version  #查看Hexo的版本</code></pre>\n\n<p>缩写：</p>\n<pre class=\"language-none\"><code class=\"language-none\">hexo n &#x3D;&#x3D; hexo new\nhexo g &#x3D;&#x3D; hexo generate\nhexo s &#x3D;&#x3D; hexo server\nhexo d &#x3D;&#x3D; hexo deploy</code></pre>\n\n<p>组合命令：</p>\n<pre class=\"language-none\"><code class=\"language-none\">hexo s -g #生成并本地预览\nhexo d -g #生成并上传</code></pre>\n\n<h3 id=\"问题处理\"><a href=\"#问题处理\" class=\"headerlink\" title=\"问题处理\"></a>问题处理</h3><pre class=\"language-none\"><code class=\"language-none\">PS E:\\code\\GitHub\\Jueee\\jueee-blog&gt; npx hexo clean\n(node:44956) ExperimentalWarning: The fs.promises API is experimental\nERROR &#123; err:\n   E:\\code\\GitHub\\Jueee\\jueee-blog\\node_modules\\hexo-theme-next\\package.json:2\n     &quot;_from&quot;: &quot;hexo-theme-next@8.0.0-rc.5&quot;,</code></pre>\n\n<p>查看 node 版本</p>\n<pre class=\"language-none\"><code class=\"language-none\">node -v\nv10.16.0\nnpm -v\n6.9.0</code></pre>\n\n<p>需要升级 node 到最新版。</p>\n<p>下载地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ub2RlanMub3JnL3poLWNuL2Rvd25sb2FkLw==\">https://nodejs.org/zh-cn/download/<i class=\"fa fa-external-link-alt\"></i></span></p>\n","categories":["Blog"],"tags":["Blog","Node.js"]},{"title":"hexo博客个性化设置","url":"/2020/08/2020-08-08-hexo%E5%8D%9A%E5%AE%A2%E4%B8%AA%E6%80%A7%E5%8C%96%E8%AE%BE%E7%BD%AE/","content":"<h3 id=\"创建categories\"><a href=\"#创建categories\" class=\"headerlink\" title=\"创建categories\"></a>创建categories</h3><ol>\n<li><p><strong>新建一个页面，命名为categories。命令如下：</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">npx hexo new page categories</code></pre>\n\n<p>在myBlog/source下会新生成一个新的文件夹categories<br>，在该文件夹下会有一个index.md文件。</p>\n</li>\n<li><p><strong>编辑categories文件夹下的index.md</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">title: categories\ndate: 2020-08-07 10:29:47\ntype: &quot;categories&quot;\ncomments: false</code></pre>\n</li>\n<li><p><strong>在菜单中添加链接。</strong></p>\n<p>编辑主题的 <code>_config.next.yml</code>，将menu中的 categories: /categories 注释去掉，如下:</p>\n<pre class=\"language-none\"><code class=\"language-none\">categories: &#x2F;categories&#x2F; || fa fa-fw fa-th</code></pre>\n</li>\n<li><p><strong>安装依赖</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">npm install hexo-generator-index --save\nnpm install hexo-generator-archive --save\nnpm install hexo-generator-category --save\nnpm install hexo-generator-tag --save</code></pre>\n\n</li>\n</ol>\n<p>参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL3dpa2kvTWlncmF0aW5nLWZyb20tMi54LXRvLTMuMA==\">https://github.com/hexojs/hexo/wiki/Migrating-from-2.x-to-3.0<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h3 id=\"添加README-md\"><a href=\"#添加README-md\" class=\"headerlink\" title=\"添加README.md\"></a>添加README.md</h3><h4 id=\"添加README-md-1\"><a href=\"#添加README-md-1\" class=\"headerlink\" title=\"添加README.md\"></a>添加README.md</h4><p>使用 Github Pages 和 Hexo 搭建的博客，如果在最开始建立仓库的时候没有创建README.md文件，那么在后期如何添加呢？</p>\n<p>添加方法：在根目录 source 文件夹下新建README.md即可。</p>\n<p>新增：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0p1ZWVlL2p1ZWVlLWJsb2cvYmxvYi9tYXN0ZXIvc291cmNlL1JFQURNRS5tZA==\">source/README.md<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>效果：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0p1ZWVlL2p1ZWVlLmdpdGh1Yi5pbw==\">https://github.com/Jueee/jueee.github.io<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h4 id=\"显示异常\"><a href=\"#显示异常\" class=\"headerlink\" title=\"显示异常\"></a>显示异常</h4><p>当我们执行 <code>hexo g -d</code> 部署博客的时候会发现README.md变成了 README.html。</p>\n<p>原因就在于当我们在执行 <code>hexo g -d</code> 命令时，.md 文件会被转化成 HTML 文件，并将这些文件放到 public 目录里，最后再提交到远程 GitHub 仓库。</p>\n<p>而 Hexo 也提供了一个方法，让md文件不被转换成HTML，在根目录的 _config.yml 配置文件里，找到 skip_render 关键字，添加 README.md，让解释器跳过渲染：</p>\n<pre class=\"language-yml\" data-language=\"yml\"><code class=\"language-yml\">skip_render:\n  - README.md</code></pre>\n\n<h3 id=\"修改脚注\"><a href=\"#修改脚注\" class=\"headerlink\" title=\"修改脚注\"></a>修改脚注</h3><p>修改文件： <code>source\\_data\\footer.njk</code></p>\n<pre class=\"language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>footer-custom<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>powered-by<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>由 <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://github.com/next-theme/theme-next-docs<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>theme-link<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>noopener<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">target</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>_blank<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Hexo<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span> v8.0.0 驱动<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>post-meta-divider<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>|<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>theme-info<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>主题 – <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://github.com/next-theme/hexo-theme-next<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>theme-link<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>noopener<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">target</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>_blank<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Hexo.NexT<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span> v8.0.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre>\n\n<h3 id=\"代码高亮\"><a href=\"#代码高亮\" class=\"headerlink\" title=\"代码高亮\"></a>代码高亮</h3><p>由于 Hexo 自带的代码高亮主题显示不好看，所以主题中使用到了<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2VsZTgyOC9oZXhvLXByaXNtLXBsdWdpbg==\">hexo-prism-plugin<i class=\"fa fa-external-link-alt\"></i></span>的 Hexo 插件来做代码高亮，安装命令如下：</p>\n<p>bash</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i -S hexo-prism-plugin</code></pre>\n\n<p>然后，修改 Hexo 根目录下<code>_config.yml</code>文件中<code>highlight.enable</code>的值为<code>false</code>，并新增<code>prism</code>插件相关的配置，主要配置如下：</p>\n<pre class=\"language-yml\" data-language=\"yml\"><code class=\"language-yml\">highlight:\n  enable: false\n\nprism_plugin:\n  mode: &#39;preprocess&#39;    # realtime&#x2F;preprocess\n  theme: &#39;tomorrow&#39;\n  line_number: false    # default false\n  custom_css:</code></pre>\n\n<p>配置参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvaGV4by1wcmlzbS1wbHVnaW4=\">https://www.npmjs.com/package/hexo-prism-plugin<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h3 id=\"修改菜单\"><a href=\"#修改菜单\" class=\"headerlink\" title=\"修改菜单\"></a>修改菜单</h3><p>将导航栏的 “归档” 修改为 “博客”。</p>\n<p>修改文件： <code>source\\_data\\languages.yml</code></p>\n<pre class=\"language-yml\" data-language=\"yml\"><code class=\"language-yml\">zh-CN:\n  menu:\n    archives: 博客</code></pre>\n\n<h3 id=\"相关热门帖子\"><a href=\"#相关热门帖子\" class=\"headerlink\" title=\"相关热门帖子\"></a>相关热门帖子</h3><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3RlYTMvaGV4by1yZWxhdGVkLXBvcHVsYXItcG9zdHM=\">NexT<i class=\"fa fa-external-link-alt\"></i></span>根据<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3RlYTMvaGV4by1yZWxhdGVkLXBvcHVsYXItcG9zdHM=\">hexo-related-popular-posts<i class=\"fa fa-external-link-alt\"></i></span>支持相关的帖子功能.</p>\n<p><code>hexo-related-popular-posts</code>通过执行以下命令来安装网站根目录:</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span> hexo-related-popular-posts\n$ npx hexo clean</code></pre>\n\n<p>可以通过将值设置<code>related_posts.enable</code>为<code>true</code>in 来启用它主题配置文件.</p>\n<pre class=\"language-yml\" data-language=\"yml\"><code class=\"language-yml\">related_posts:\n  enable: true</code></pre>\n\n<h3 id=\"添加评论系统\"><a href=\"#添加评论系统\" class=\"headerlink\" title=\"添加评论系统\"></a>添加评论系统</h3><p>Valine是基于Leancloud的快速，简单和高效的无后端评论系统。</p>\n<ol>\n<li><p>创建一个帐户或登录 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWFuY2xvdWQuY24vZGFzaGJvYXJkL2xvZ2luLmh0bWwjL3NpZ25pbg==\">LeanCloud<i class=\"fa fa-external-link-alt\"></i></span>，然后单击左下角以<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWFuY2xvdWQuY24vZGFzaGJvYXJkL2FwcGxpc3QuaHRtbCMvbmV3YXBw\">创建应用程序<i class=\"fa fa-external-link-alt\"></i></span>在<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWFuY2xvdWQuY24vZGFzaGJvYXJkL2FwcGxpc3QuaHRtbCMvYXBwcw==\">仪表板中<i class=\"fa fa-external-link-alt\"></i></span>.</p>\n</li>\n<li><p>转到您刚创建的应用程序，<code>Settings → App Keys</code>在左下角选择，您将看到您的APP ID和APP Key。</p>\n</li>\n<li><p>将值设置<code>enable</code>为<code>true</code>，添加获得的APP ID（<code>appId</code>）和APP Key（<code>appKey</code>），然后<code>valine</code>在主题配置文件 如下：</p>\n<pre class=\"language-none\"><code class=\"language-none\">valine:\nenable: false\nappId:  # your leancloud application appid\nappKey:  # your leancloud application appkey\nplaceholder: Just go go # comment box placeholder\navatar: mm # gravatar style\nmeta: [nick, mail, link] # Custom comment header\npageSize: 10 # pagination size\nvisitor: false # leancloud-counter-security is not supported for now. When visitor is set to be true, appid and appkey are recommended to be the same as leancloud_visitors&#39; for counter compatibility. Article reading statistic https:&#x2F;&#x2F;valine.js.org&#x2F;visitor.html\ncomment_count: true # If false, comment count will only be displayed in post page, not in home page\nrecordIP: false # Whether to record the commenter IP\nserverURLs: # When the custom domain name is enabled, fill it in here (it will be detected automatically by default, no need to fill in)</code></pre>\n\n\n</li>\n</ol>\n<h3 id=\"更换网页图标\"><a href=\"#更换网页图标\" class=\"headerlink\" title=\"更换网页图标\"></a>更换网页图标</h3><h4 id=\"制作favicon图标\"><a href=\"#制作favicon图标\" class=\"headerlink\" title=\"制作favicon图标\"></a>制作favicon图标</h4><ol>\n<li>准备好用作标签页/网页小图标favicon的图片</li>\n<li>搜索<em>favicon 在线</em>，可以看到一些在线图片转favicon的工具<br>我用的是这个（link）： <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5iaXRidWcubmV0Lw==\">bitbug<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>利用工具做成图标。<br>我做了16x16，与32x32的。</li>\n</ol>\n<h4 id=\"编辑配置文件\"><a href=\"#编辑配置文件\" class=\"headerlink\" title=\"编辑配置文件\"></a>编辑配置文件</h4><p>在next主题的<strong>_config.yml</strong>文件，修改新的图片作为favicon的对象：</p>\n<pre class=\"language-yml\" data-language=\"yml\"><code class=\"language-yml\">favicon:\n  small: &#x2F;images&#x2F;basic&#x2F;jue.ico\n  medium: &#x2F;images&#x2F;basic&#x2F;jue.ico</code></pre>\n\n","categories":["Blog"],"tags":["Blog","Node.js"]},{"title":"Neo4j初始化密码","url":"/2020/08/2020-08-10-Neo4j%E5%88%9D%E5%A7%8B%E5%8C%96%E5%AF%86%E7%A0%81/","content":"<h3 id=\"初始化Neo4j\"><a href=\"#初始化Neo4j\" class=\"headerlink\" title=\"初始化Neo4j\"></a>初始化Neo4j</h3><p>Web 浏览器访问：<code>http://IP:7474/</code></p>\n<p>连接 URL 为 ：<code>bolt://IP:7687</code>，初始用户名、密码为 <code>neo4j</code>，如下图所示：</p>\n<p><img src=\"/images/2020/08/1597130874884.png\" alt=\"1597130874884\" loading=\"lazy\"></p>\n<p>初始化登录成功后，会要求重置 neo4j 密码，修改并确认新密码。</p>\n<p><img src=\"/images/2020/08/1597130933055.png\" alt=\"1597130933055\" loading=\"lazy\"></p>\n<h3 id=\"浏览器下更改密码\"><a href=\"#浏览器下更改密码\" class=\"headerlink\" title=\"浏览器下更改密码\"></a>浏览器下更改密码</h3><p>Web 浏览器访问：<code>http://IP:7474/</code>，登录成功后，输入命令：</p>\n<pre class=\"language-none\"><code class=\"language-none\">:server change-password</code></pre>\n\n<h3 id=\"命令行更改密码\"><a href=\"#命令行更改密码\" class=\"headerlink\" title=\"命令行更改密码\"></a>命令行更改密码</h3><ol>\n<li>进入neo4j安装目录， 并进入bin目录；</li>\n<li>运行 <code>./cypher-shell</code> 命令， 输入用户名，密码（初始默认用户名和密码为neo4j）</li>\n<li>输入命令: <code>CALL dbms.security.changePassword(&#39;新密码&#39;);</code> 输入命令  <code>:exit;</code> 退出</li>\n</ol>\n<p>例如：</p>\n<p><img src=\"/images/2020/08/1597132382397.png\" alt=\"1597132382397\" loading=\"lazy\"></p>\n<h3 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h3><p>neo4j 设置项：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9uZW80ai5jb20vZG9jcy9vcGVyYXRpb25zLW1hbnVhbC9jdXJyZW50L3JlZmVyZW5jZS9wcm9jZWR1cmVzLw==\">https://neo4j.com/docs/operations-manual/current/reference/procedures/<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>设置初始化密码：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9uZW80ai5jb20vZG9jcy9vcGVyYXRpb25zLW1hbnVhbC9jdXJyZW50L2NvbmZpZ3VyYXRpb24vc2V0LWluaXRpYWwtcGFzc3dvcmQv\">https://neo4j.com/docs/operations-manual/current/configuration/set-initial-password/<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>密码和用户恢复：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9uZW80ai5jb20vZG9jcy9vcGVyYXRpb25zLW1hbnVhbC9jdXJyZW50L2NvbmZpZ3VyYXRpb24vcGFzc3dvcmQtYW5kLXVzZXItcmVjb3Zlcnkv\">https://neo4j.com/docs/operations-manual/current/configuration/password-and-user-recovery/<i class=\"fa fa-external-link-alt\"></i></span></p>\n","categories":["Neo4j"],"tags":["Neo4j"]},{"title":"MySQL中DBlink的使用","url":"/2020/08/2020-08-11-MySQL%E4%B8%ADDBlink%E7%9A%84%E4%BD%BF%E7%94%A8/","content":"<p>在实际工作中，我们可能会遇到需要操作其他数据库实例的部分表，但又不想系统连接多库。此时我们就需要用到数据表映射。</p>\n<p>如同Oracle中的DBlink一般，使用过Oracle DBlink数据库链接的人都知道可以跨实例来进行数据查询，同样的，Mysql自带的 FEDERATED 引擎完美的帮我们解决了该问题。</p>\n<h3 id=\"检查引擎\"><a href=\"#检查引擎\" class=\"headerlink\" title=\"检查引擎\"></a>检查引擎</h3><p>查看target端是否安装了FEDERATED存储引擎：</p>\n<pre class=\"language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">mysql&gt; show engines ;</code></pre>\n\n<p>例如：</p>\n<p><img src=\"/images/2020/08/1597126521400.png\" alt=\"1597126521400\" loading=\"lazy\"></p>\n<h3 id=\"安装引擎\"><a href=\"#安装引擎\" class=\"headerlink\" title=\"安装引擎\"></a>安装引擎</h3><p>注意：如果没有安装<strong>FEDERATED 引擎</strong>，执行：</p>\n<pre class=\"language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">install plugin federated soname &#39;ha_federated.so&#39;;</code></pre>\n\n<p>例如：</p>\n<p><img src=\"/images/2020/08/1597126538702.png\" alt=\"1597126538702\" loading=\"lazy\"></p>\n<p>再次检查引擎：</p>\n<pre class=\"language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">mysql&gt; show engines ;</code></pre>\n\n<p>例如：</p>\n<p><img src=\"/images/2020/08/1597126564647.png\" alt=\"1597126564647\" loading=\"lazy\"></p>\n<h3 id=\"开启引擎\"><a href=\"#开启引擎\" class=\"headerlink\" title=\"开启引擎\"></a>开启引擎</h3><p>将 federated 添加到 my.cnf 重启数据库</p>\n<pre class=\"language-cnf\" data-language=\"cnf\"><code class=\"language-cnf\">vi &#x2F;etc&#x2F;my.cnf\n[mysqld]\nfederated</code></pre>\n\n<p>再次检查引擎，例如：</p>\n<p><img src=\"/images/2020/08/1597126649766.png\" alt=\"1597126649766\" loading=\"lazy\"></p>\n<h3 id=\"建表访问\"><a href=\"#建表访问\" class=\"headerlink\" title=\"建表访问\"></a>建表访问</h3><p>使用CONNECTION创建FEDERATED引擎表通用模型：</p>\n<pre class=\"language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">CREATE TABLE (......) \nENGINE &#x3D;FEDERATED CONNECTION&#x3D;&#39;mysql:&#x2F;&#x2F;username:password@hostname:port&#x2F;database&#x2F;tablename&#39;</code></pre>\n\n<p>注意 ENGINE=FEDERATED CONNECTION 后为源端地址 避免使用带@的密码</p>\n<h3 id=\"使用总结\"><a href=\"#使用总结\" class=\"headerlink\" title=\"使用总结\"></a>使用总结</h3><p>基于MySQL5.7.23版本，笔者在源端及目标端实验了多种DDL及DML，现简单总结如下，有兴趣的同学可以试试看。</p>\n<ul>\n<li>目标端建表结构可以与源端不一样 推荐与源端结构一致</li>\n<li>源端DDL(CREATE、ALTER、DROP等语句)语句更改表结构 目标端不会变化</li>\n<li>源端DML（SELECT、UPDATE、INSERT、DELETEt等语句）语句目标端查询会同步</li>\n<li>源端drop表 目标端结构还在但无法查询</li>\n<li>目标端不能执行DDL语句</li>\n<li>目标端执行DML语句 源端数据也会变化</li>\n<li>目标端truncate表 源端表数据也会被清空</li>\n<li>目标端drop表对源端无影响</li>\n</ul>\n<h3 id=\"最佳实践\"><a href=\"#最佳实践\" class=\"headerlink\" title=\"最佳实践\"></a>最佳实践</h3><p>目前FEDERATED引擎使用范围还不多，若确实有跨实例访问的需求，建议做好规范，个人总结最佳实践如下：</p>\n<ol>\n<li>源端专门创建只读权限的用户来供目标端使用。</li>\n<li>目标端建议用CREATE SERVER方式创建FEDERATED表。</li>\n<li>FEDERATED表不宜太多，迁移时要特别注意。</li>\n<li>目标端应该只做查询使用，禁止在目标端更改FEDERATED表。</li>\n<li>建议目标端表名及结构和源端保持一致。</li>\n<li>源端表结构变更后 目标端要及时删除重建。</li>\n</ol>\n","categories":["MySQL"],"tags":["MySQL"]},{"title":"博客网址增加站点分析","url":"/2020/08/2020-08-09-%E5%8D%9A%E5%AE%A2%E7%BD%91%E5%9D%80%E5%A2%9E%E5%8A%A0%E7%AB%99%E7%82%B9%E5%88%86%E6%9E%90/","content":"<h3 id=\"谷歌分析\"><a href=\"#谷歌分析\" class=\"headerlink\" title=\"谷歌分析\"></a>谷歌分析</h3><ol>\n<li><p>创建一个帐户并登录<span class=\"exturl\" data-url=\"aHR0cHM6Ly9hbmFseXRpY3MuZ29vZ2xlLmNvbS8=\">Google Analytics（分析）<i class=\"fa fa-external-link-alt\"></i></span>。<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zdXBwb3J0Lmdvb2dsZS5jb20vYW5hbHl0aWNzLz9obD1lbiN0b3BpYz0zNTQ0OTA2\">更详细的文档<i class=\"fa fa-external-link-alt\"></i></span></p>\n</li>\n<li><p>编辑 主题配置文件并<code>tracking_id</code>在部分下填写<code>google_analytics</code>您的Google跟踪ID。Google曲目ID始终以开头<code>UA-</code>。</p>\n<pre class=\"language-yml\" data-language=\"yml\"><code class=\"language-yml\"># Google Analytics\ngoogle_analytics:\ntracking_id: UA-XXXXXXXX-X\nonly_pageview: false</code></pre>\n</li>\n<li><p>当field <code>only_pageview</code>设置为true时，NexT将仅向<code>pageview</code>Google Analytics（分析）发送事件。<br>使用它而不是使用它的好处<code>only_pageview: false</code>是减少了站点上的外部脚本，这将为您提供更好的性能，但没有完整的分析功能。</p>\n</li>\n</ol>\n<h3 id=\"百度分析\"><a href=\"#百度分析\" class=\"headerlink\" title=\"百度分析\"></a>百度分析</h3><ol>\n<li><p>登录<span class=\"exturl\" data-url=\"aHR0cHM6Ly90b25namkuYmFpZHUuY29tLw==\">百度分析<i class=\"fa fa-external-link-alt\"></i></span> 并找到网站代码获取页面。</p>\n</li>\n<li><p>在后面复制脚本ID <code>hm.js?</code>，如下图：</p>\n<p><img src=\"/images/2020/08/1597041510807.png\" alt=\"1597041510807\" loading=\"lazy\"></p>\n</li>\n<li><p>编辑 主题配置文件并将部分更改<code>baidu_analytics</code>为您的脚本ID。</p>\n<pre class=\"language-yml\" data-language=\"yml\"><code class=\"language-yml\"># Baidu Analytics ID\nbaidu_analytics: your_id</code></pre></li>\n</ol>\n","categories":["Blog"],"tags":["Blog"]},{"title":"博客网址增加站点地图sitemap","url":"/2020/08/2020-08-09-%E5%8D%9A%E5%AE%A2%E7%BD%91%E5%9D%80%E5%A2%9E%E5%8A%A0%E7%AB%99%E7%82%B9%E5%9C%B0%E5%9B%BEsitemap/","content":"<p>站点地图是一种文件，您可以通过该文件列出您网站上的网页，从而将您网站内容的组织架构告知Google和其他搜索引擎。Googlebot等搜索引擎网页抓取工具会读取此文件，以便更加智能地抓取您的网站。</p>\n<h3 id=\"站点地图\"><a href=\"#站点地图\" class=\"headerlink\" title=\"站点地图\"></a>站点地图</h3><p>站点地图是一个网站所有链接的容器。很多网站的连接层次比较深，爬虫很难抓取到，站点地图可以方便爬虫抓取网站页面，通过抓取网站页面，清晰了解网站的架构，网站地图一般存放在根目录下并命名sitemap，为爬虫指路，增加网站重要内容页面的收录。</p>\n<p>站点地图就是根据网站的结构、框架、内容，生成的导航网页文件。站点地图对于提高用户体验有好处，它们为网站访问者指明方向，并帮助迷失的访问者找到他们想看的页面。</p>\n<h3 id=\"添加sitemap\"><a href=\"#添加sitemap\" class=\"headerlink\" title=\"添加sitemap\"></a>添加sitemap</h3><ol>\n<li><p>安装插件：</p>\n<pre class=\"language-none\"><code class=\"language-none\">npm install hexo-generator-sitemap --save\nnpm install hexo-generator-baidu-sitemap --save</code></pre>\n</li>\n<li><p>在博客目录的_config.yml中添加如下代码：</p>\n<pre class=\"language-yml\" data-language=\"yml\"><code class=\"language-yml\"># 自动生成sitemap\nsitemap:\n path: sitemap.xml\nbaidusitemap:\n path: baidusitemap.xml</code></pre>\n</li>\n<li><p>编译博客</p>\n<pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\">npx hexo generate</code></pre>\n</li>\n<li><p>在你的博客根目录的public下面发现生成了sitemap.xml以及baidusitemap.xml就表示成功了。</p>\n<p>如下图所示：</p>\n<p><img src=\"/images/2020/08/1597229983009.png\" alt=\"1597229983009\" loading=\"lazy\"></p>\n</li>\n</ol>\n<h3 id=\"查看站点地图\"><a href=\"#查看站点地图\" class=\"headerlink\" title=\"查看站点地图\"></a>查看站点地图</h3><ul>\n<li><a href=\"https://jueee.github.io/sitemap.xml\">sitemap.xml</a></li>\n<li><a href=\"https://jueee.github.io/baidusitemap.xml\">baidusitemap.xml</a></li>\n</ul>\n","categories":["Blog"],"tags":["Blog"]},{"title":"404","url":"//404.html","content":"<pre class=\"language-none\"><code class=\"language-none\">██╗  ██╗ ██████╗ ██╗  ██╗    ███╗   ██╗ ██████╗ ████████╗\n██║  ██║██╔═████╗██║  ██║    ████╗  ██║██╔═══██╗╚══██╔══╝\n███████║██║██╔██║███████║    ██╔██╗ ██║██║   ██║   ██║\n╚════██║████╔╝██║╚════██║    ██║╚██╗██║██║   ██║   ██║\n     ██║╚██████╔╝     ██║    ██║ ╚████║╚██████╔╝   ██║\n     ╚═╝ ╚═════╝      ╚═╝    ╚═╝  ╚═══╝ ╚═════╝    ╚═╝\n\n    ███████╗ ██████╗ ██╗   ██╗███╗   ██╗██████╗\n    ██╔════╝██╔═══██╗██║   ██║████╗  ██║██╔══██╗\n    █████╗  ██║   ██║██║   ██║██╔██╗ ██║██║  ██║\n    ██╔══╝  ██║   ██║██║   ██║██║╚██╗██║██║  ██║\n    ██║     ╚██████╔╝╚██████╔╝██║ ╚████║██████╔╝\n    ╚═╝      ╚═════╝  ╚═════╝ ╚═╝  ╚═══╝╚═════╝</code></pre>\n"},{"title":"所有分类","url":"/categories/index.html","content":""},{"title":"阅读笔记合集","url":"/nodes/index.html","content":"<h3 id=\"容器化相关笔记\"><a href=\"#容器化相关笔记\" class=\"headerlink\" title=\"容器化相关笔记\"></a>容器化相关笔记</h3><div class=\"link-grid\"><div class=\"link-grid-container\">\n<div class=\"link-grid-image\" style=\"background-image: url(/images/nodes/docker.jpg);\"></div>\n<p>docker 相关</p><p>docker 相关学习笔记</p>\n<a href=\"https://jueee.github.io/docker-doc/\"></a>\n</div><div class=\"link-grid-container\">\n<div class=\"link-grid-image\" style=\"background-image: url(/images/nodes/kubernetes.jpg);\"></div>\n<p>kubernetes 相关</p><p>kubernetes 相关学习笔记</p>\n<a href=\"https://jueee.github.io/kubernetes-doc/\"></a>\n</div></div>\n\n<h3 id=\"Java-相关笔记\"><a href=\"#Java-相关笔记\" class=\"headerlink\" title=\"Java 相关笔记\"></a>Java 相关笔记</h3><div class=\"link-grid\"><div class=\"link-grid-container\">\n<div class=\"link-grid-image\" style=\"background-image: url(/images/nodes/design-patterns.png);\"></div>\n<p>设计模式</p><p>《设计模式:可复用面向对象软件的基础》学习笔记</p>\n<a href=\"https://jueee.github.io/design-patterns/\"></a>\n</div><div class=\"link-grid-container\">\n<div class=\"link-grid-image\" style=\"background-image: url(/images/nodes/Effective-Java.png);\"></div>\n<p>Effective Java</p><p>《Effective Java 第三版》学习笔记</p>\n<a href=\"https://jueee.github.io/effective-Java/\"></a>\n</div><div class=\"link-grid-container\">\n<div class=\"link-grid-image\" style=\"background-image: url(/images/nodes/ConcurrencyWithJava.png);\"></div>\n<p>Java 并发编程</p><p>《精通 Java 并发编程（第2 版 ）》学习笔记</p>\n<a href=\"https://jueee.github.io/ConcurrencyWithJava/\"></a>\n</div><div class=\"link-grid-container\">\n<div class=\"link-grid-image\" style=\"background-image: url(/images/nodes/JavaTestDrivenDev.png);\"></div>\n<p>Java 测试驱动开发</p><p>《Java 测试驱动开发》学习笔记</p>\n<a href=\"https://jueee.github.io/JavaTestDrivenDev/\"></a>\n</div><div class=\"link-grid-container\">\n<div class=\"link-grid-image\" style=\"background-image: url(/images/nodes/lambda.png);\"></div>\n<p>Java 8 函数式编程</p><p>《Java 8 函数式编程》学习笔记</p>\n<a href=\"https://jueee.github.io/Java8Lambdas/\"></a>\n</div></div>\n\n<h3 id=\"Spark-相关笔记\"><a href=\"#Spark-相关笔记\" class=\"headerlink\" title=\"Spark 相关笔记\"></a>Spark 相关笔记</h3><div class=\"link-grid\"><div class=\"link-grid-container\">\n<div class=\"link-grid-image\" style=\"background-image: url(/images/nodes/spark.png);\"></div>\n<p>Spark 大数据分析</p><p>《Spark 快速大数据分析》学习笔记</p>\n<a href=\"https://jueee.github.io/SparkFastDataAnalysis/\"></a>\n</div></div>"},{"title":"所有标签","url":"/tags/index.html","content":""}]