[{"title":"搭建 Jekyll 环境","url":"/2020/06/2020-06-17-%E6%90%AD%E5%BB%BAJekyll%E7%8E%AF%E5%A2%83/","content":"<p>需要搭建 Jekyll 环境，通过遵循 Jekyll 的规范，让 Jekyll 帮助我们生成静态网站。</p>\n<ol>\n<li><p>安装 Ruby：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVieS1sYW5nLm9yZy96aF9jbi9kb2N1bWVudGF0aW9uL2luc3RhbGxhdGlvbi8=\">Ruby 安装教程<i class=\"fa fa-external-link-alt\"></i></span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ydWJ5aW5zdGFsbGVyLm9yZy9kb3dubG9hZHMv\">Windows 下载<i class=\"fa fa-external-link-alt\"></i></span></p>\n</li>\n<li><p>打开 CMD，执行命令安装 Jekyll：</p>\n<pre class=\"language-none\"><code class=\"language-none\">gem install jekyll</code></pre>\n</li>\n<li><p>进入仓库文件夹，执行命令：</p>\n<pre class=\"language-none\"><code class=\"language-none\">bundle install</code></pre>\n\n</li>\n</ol>\n<h3 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h3><p>每个目录的作用：</p>\n<table>\n<thead>\n<tr>\n<th>文件 / 目录</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>_config.yml</code></td>\n<td>保存<span class=\"exturl\" data-url=\"aHR0cDovL2pla3lsbGNuLmNvbS9kb2NzL2NvbmZpZ3VyYXRpb24v\">配置<i class=\"fa fa-external-link-alt\"></i></span>数据。很多配置选项都可以直接在命令行中进行设置，但是如果你把那些配置写在这儿，你就不用非要去记住那些命令了。</td>\n</tr>\n<tr>\n<td><code>_drafts</code></td>\n<td>drafts（草稿）是未发布的文章。这些文件的格式中都没有 <code>title.MARKUP</code> 数据。学习如何 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLmppYW5zaHUuY29tLz90PWh0dHA6Ly9qZWt5bGxjbi5jb20vZG9jcy9kcmFmdHMv\">使用草稿<i class=\"fa fa-external-link-alt\"></i></span>.</td>\n</tr>\n<tr>\n<td><code>_includes</code></td>\n<td>你可以加载这些包含部分到你的布局或者文章中以方便重用。可以用这个标签 <code>{% include file.ext %}</code> 来把文件 <code>_includes/file.ext</code> 包含进来。</td>\n</tr>\n<tr>\n<td><code>_layouts</code></td>\n<td>layouts（布局）是包裹在文章外部的模板。布局可以在 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLmppYW5zaHUuY29tLz90PWh0dHA6Ly9qZWt5bGxjbi5jb20vZG9jcy9mcm9udG1hdHRlci8=\">YAML 头信息<i class=\"fa fa-external-link-alt\"></i></span>中根据不同文章进行选择。 这将在下一个部分进行介绍。</td>\n</tr>\n<tr>\n<td><code>_posts</code></td>\n<td>这里放的就是你的文章了。文件格式很重要，必须要符合:<code>YEAR-MONTH-DAY-title.MARKUP</code>。 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLmppYW5zaHUuY29tLz90PWh0dHA6Ly9qZWt5bGxjbi5jb20vZG9jcy9wZXJtYWxpbmtzLw==\">永久链接<i class=\"fa fa-external-link-alt\"></i></span> 可以在文章中自己定制，但是数据和标记语言都是根据文件名来确定的。</td>\n</tr>\n<tr>\n<td><code>_data</code></td>\n<td>格式化好的网站数据应放在这里。jekyll 的引擎会自动加载在该目录下所有的 yaml 文件（后缀是 <code>.yml</code>, <code>.yaml</code>, <code>.json</code> 或者 <code>.csv</code> ）。这些文件可以经由 ｀site.data｀ 访问。如果有一个 <code>members.yml</code> 文件在该目录下，你就可以通过 <code>site.data.members</code> 获取该文件的内容。</td>\n</tr>\n<tr>\n<td><code>_site</code></td>\n<td>一旦 Jekyll 完成转换，就会将生成的页面放在这里（默认）。最好将这个目录放进你的 <code>.gitignore</code> 文件中。</td>\n</tr>\n<tr>\n<td><code>.jekyll-metadata</code></td>\n<td>该文件帮助 Jekyll 跟踪哪些文件从上次建立站点开始到现在没有被修改，哪些文件需要在下一次站点建立时重新生成。该文件不会被包含在生成的站点中。将它加入到你的 <code>.gitignore</code> 文件可能是一个好注意。</td>\n</tr>\n<tr>\n<td><code>index.html</code> and other HTML, Markdown, Textile files</td>\n<td> 如果这些文件中包含 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLmppYW5zaHUuY29tLz90PWh0dHA6Ly9qZWt5bGxjbi5jb20vZG9jcy9mcm9udG1hdHRlci8=\">YAML 头信息<i class=\"fa fa-external-link-alt\"></i></span> 部分，Jekyll 就会自动将它们进行转换。当然，其他的如 <code>.html</code>, <code>.markdown</code>, <code>.md</code>, 或者 <code>.textile</code> 等在你的站点根目录下或者不是以上提到的目录中的文件也会被转换。</td>\n</tr>\n<tr>\n<td>Other Files/Folders</td>\n<td> 其他一些未被提及的目录和文件如 <code>css</code> 还有 <code>images</code> 文件夹， <code>favicon.ico</code> 等文件都将被完全拷贝到生成的 site 中。这里有一些<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLmppYW5zaHUuY29tLz90PWh0dHA6Ly9qZWt5bGxjbi5jb20vZG9jcy9zaXRlcy8=\">使用 Jekyll 的站点<i class=\"fa fa-external-link-alt\"></i></span>，如果你感兴趣就来看看吧。</td>\n</tr>\n</tbody></table>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2pla3lsbGNuLmNvbS9kb2NzL3RlbXBsYXRlcy8=\">jekyll 模板<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9saXF1aWQuYm9vdGNzcy5jb20v\">Liquid 模板语言<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<h3 id=\"问题处理\"><a href=\"#问题处理\" class=\"headerlink\" title=\"问题处理\"></a>问题处理</h3><h4 id=\"问题一\"><a href=\"#问题一\" class=\"headerlink\" title=\"问题一\"></a>问题一</h4><blockquote>\n<p><code>bundle install</code> 提示 <code>Could not locate Gemfile</code></p>\n</blockquote>\n<p>原因：项目下缺少 <code>Gemfile</code> 文件。</p>\n<p>解决：<code>jekyll new myblog</code> 创建项目，将  <code>Gemfile</code> 文件拷贝过来。</p>\n<h4 id=\"问题二\"><a href=\"#问题二\" class=\"headerlink\" title=\"问题二\"></a>问题二</h4><blockquote>\n<p>Dependency Error: Yikes! It looks like you don't have jekyll-sitemap or one of its dependencies installed.</p>\n</blockquote>\n<p>解决：在 <code>Gemfile</code> 文件中增加如下内容：</p>\n<pre class=\"language-none\"><code class=\"language-none\">gem 'jekyll-sitemap'\ngem 'jekyll-paginate' </code></pre>\n\n<h4 id=\"问题三\"><a href=\"#问题三\" class=\"headerlink\" title=\"问题三\"></a>问题三</h4><blockquote>\n<p>Liquid Exception: Could not locate the included file 'file.ext' in any of [\"E:/code/GitHub/Jueee/jueee.github.io/_includes\"]. Ensure it exists in one of those directories and, if it is a symlink, does not point outside your site source.</p>\n</blockquote>\n","categories":["Blog"],"tags":["Ruby","Blog","jekyll"]},{"title":"为 Jekyll 博客系统增加百度统计","url":"/2020/06/2020-06-19-%E4%B8%BAJekyll%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F%E5%A2%9E%E5%8A%A0%E7%99%BE%E5%BA%A6%E7%BB%9F%E8%AE%A1/","content":"<p>百度统计是网站用户行为分析平台，为 Jekyll 博客系统接入百度统计，可以很方便的查看博客的各种访问、统计数据。</p>\n<h3 id=\"百度统计\"><a href=\"#百度统计\" class=\"headerlink\" title=\"百度统计\"></a>百度统计</h3><p>官网介绍</p>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly90b25namkuYmFpZHUuY29tL3dlYi93ZWxjb21lL2xvZ2lu\">https://tongji.baidu.com/web/welcome/login<i class=\"fa fa-external-link-alt\"></i></span></p>\n</blockquote>\n<h3 id=\"域名设置\"><a href=\"#域名设置\" class=\"headerlink\" title=\"域名设置\"></a>域名设置</h3><p>在网站列表中，设置个人域名。</p>\n<h3 id=\"代码设置\"><a href=\"#代码设置\" class=\"headerlink\" title=\"代码设置\"></a>代码设置</h3><p>在 <code>_config.yml</code> 文件中添加：</p>\n<pre class=\"language-none\"><code class=\"language-none\">baidu_tmid: d11c8b9bc802239c2cc46ff39d3faf79</code></pre>\n\n<p>在 <code>footer.html</code> 文件中添加：</p>\n<pre class=\"language-html\" data-language=\"html\"><code class=\"language-html\">{% raw %}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"><span class=\"token language-javascript\">\n<span class=\"token keyword\">var</span> _hmt <span class=\"token operator\">=</span> _hmt <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">var</span> hm <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"script\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   hm<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> <span class=\"token string\">\"https://hm.baidu.com/hm.js?{{site.baidu_tmid}}\"</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">var</span> s <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByTagName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"script\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> \n   s<span class=\"token punctuation\">.</span>parentNode<span class=\"token punctuation\">.</span><span class=\"token function\">insertBefore</span><span class=\"token punctuation\">(</span>hm<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>{% endraw %}</code></pre>\n\n","categories":["Blog"],"tags":["Blog","Baidu"]},{"title":"为 Jekyll 博客系统增加来必力评论系统","url":"/2020/07/2020-07-01-%E4%B8%BAJekyll%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F%E5%A2%9E%E5%8A%A0%E6%9D%A5%E5%BF%85%E5%8A%9B%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/","content":"<p>来必力（LiveRe）是韩国的产品。是一款通过链接社交网站账户，免去额外的注册过程的社会化评论系统。</p>\n<p>来必力安装简单、使用方便、UI 美观，同时支持所有的主流社交网络，以及评论管理、通知等功能，深受国内外互联网用户的欢迎。</p>\n<p>该产品主要分为中文、英文、韩文三个版本，用户可以根据语言选择对应的版本。</p>\n<h3 id=\"来必力（LiveRe）\"><a href=\"#来必力（LiveRe）\" class=\"headerlink\" title=\"来必力（LiveRe）\"></a>来必力（LiveRe）</h3><p>官网介绍</p>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubGl2ZXJlLmNvbS8=\">https://www.livere.com/<i class=\"fa fa-external-link-alt\"></i></span></p>\n</blockquote>\n<p>核心功能：</p>\n<ul>\n<li>使用社交网站账户登录，免去注册过程。</li>\n<li>提高用户的参与和沟通意愿。</li>\n<li>管理 / 删除我的评论内容。</li>\n<li>提供管理页面，管理网站文章及评论内容。</li>\n</ul>\n<h3 id=\"域名设置\"><a href=\"#域名设置\" class=\"headerlink\" title=\"域名设置\"></a>域名设置</h3><p>在网站列表中，设置个人域名。</p>\n<h3 id=\"代码设置\"><a href=\"#代码设置\" class=\"headerlink\" title=\"代码设置\"></a>代码设置</h3><p>在 <code>_config.yml</code> 文件中添加：</p>\n<pre class=\"language-none\"><code class=\"language-none\"># Support for LiveRe comments system.\n# You can get your uid from https://livere.com/insight/myCode (General web site)\nlivere_uid: MTAyMC81MDgwMC8yNzI4Mg==</code></pre>\n\n<p>参考 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubGl2ZXJlLmNvbS9pbnNpZ2h0L215Q29kZSVFRiVCQyU4QyVFNSU5QyVBOA==\">https://www.livere.com/insight/myCode，在<i class=\"fa fa-external-link-alt\"></i></span> <code>post.html</code> 文件中添加：</p>\n<pre class=\"language-html\" data-language=\"html\"><code class=\"language-html\">{% raw %}<span class=\"token comment\">&lt;!-- 来必力City版安装代码 --&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>lv-container<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">data-id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>city<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">data-uid</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>{{site.livere_uid}}<span class=\"token punctuation\">\"</span></span><span class=\"token style-attr language-css\"><span class=\"token attr-name\">  <span class=\"token attr-name\">style</span></span><span class=\"token punctuation\">=\"</span><span class=\"token attr-value\"><span class=\"token property\">padding-right</span><span class=\"token punctuation\">:</span> 10%<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"><span class=\"token language-javascript\">\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">d<span class=\"token punctuation\">,</span> s</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t <span class=\"token keyword\">var</span> j<span class=\"token punctuation\">,</span> e <span class=\"token operator\">=</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByTagName</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n\t <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> LivereTower <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n\t j <span class=\"token operator\">=</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t j<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> <span class=\"token string\">'https://cdn-city.livere.com/js/embed.dist.js'</span><span class=\"token punctuation\">;</span>\n\t j<span class=\"token punctuation\">.</span>async <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n\t e<span class=\"token punctuation\">.</span>parentNode<span class=\"token punctuation\">.</span><span class=\"token function\">insertBefore</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">,</span> <span class=\"token string\">'script'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>noscript</span><span class=\"token punctuation\">&gt;</span></span>为正常使用来必力评论功能请激活JavaScript<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>noscript</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token comment\">&lt;!-- City版安装代码已完成 --&gt;</span>{% endraw %}</code></pre>\n\n","categories":["Blog"],"tags":["Blog","LiveRe"]},{"title":"模板 List 分两列展示","url":"/2020/07/2020-07-06-%E6%A8%A1%E6%9D%BFList%E5%88%86%E4%B8%A4%E5%88%97%E5%B1%95%E7%A4%BA/","content":"<p>使用 freeMarker 的机会有很多，自然也就会接触下 <code>&lt;List&gt;</code> 标签，我想大家应该都不陌生。</p>\n<p><code>&lt;#list attrList as attr&gt;${a.name}&lt;/#list&gt;</code> 类似的用法很多，但是偶尔会用到两列的展示效果我们改怎么办呢？</p>\n<p>我们可以根据模型中的 int 类型的某一列，一般是自动增长的 id 标识列。</p>\n<h3 id=\"freemarker-模板语言\"><a href=\"#freemarker-模板语言\" class=\"headerlink\" title=\"freemarker 模板语言\"></a>freemarker 模板语言</h3><pre class=\"language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>#list</span> <span class=\"token attr-name\">attrList</span> <span class=\"token attr-name\">as</span> <span class=\"token attr-name\">attr</span><span class=\"token punctuation\">&gt;</span></span>\n       &lt;#if attr_index%2 ==0&gt;\n\t\t&lt;#if attr_index==0&gt;\n\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tr</span><span class=\"token punctuation\">&gt;</span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>#else</span><span class=\"token punctuation\">&gt;</span></span>\n\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tr</span><span class=\"token punctuation\">&gt;</span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>#if</span><span class=\"token punctuation\">&gt;</span></span>\n       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>#if</span><span class=\"token punctuation\">&gt;</span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>th</span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>118<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>${attr.key!}:<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>th</span><span class=\"token punctuation\">&gt;</span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">&gt;</span></span>${attr.value!}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">&gt;</span></span> \n\t&lt;#if attr_index==attrList?size-1&gt;\n\t\t&lt;#if attr_index%2 ==1&gt;\n\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">&gt;</span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>#else</span><span class=\"token punctuation\">&gt;</span></span>\n\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>th</span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>118<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>th</span><span class=\"token punctuation\">&gt;</span></span>\n\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">&gt;</span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>#if</span><span class=\"token punctuation\">&gt;</span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>#if</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>#list</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n\n<h3 id=\"Liquid-模板语言\"><a href=\"#Liquid-模板语言\" class=\"headerlink\" title=\"Liquid 模板语言\"></a>Liquid 模板语言</h3><p>Liquid 是一门开源的模板语言，由 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuc2hvcGlmeS5jb20v\">Shopify<i class=\"fa fa-external-link-alt\"></i></span> 创造并用 Ruby 实现。它是 Shopify 主题的骨骼，并且被用于加载店铺系统的动态内容。</p>\n<pre class=\"language-html\" data-language=\"html\"><code class=\"language-html\">{% raw %}\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>table</span> <span class=\"token punctuation\">&gt;</span></span>\n{% for post in site.gitpagelink %}\n{% assign index_2 = forloop.index | modulo: 2 %}\n\t{% if index_2 == 1 %}\n\t\t{% if forloop.index == 1 %} <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tr</span><span class=\"token punctuation\">&gt;</span></span> {% else %} <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tr</span><span class=\"token punctuation\">&gt;</span></span> {% endif %}\n\t{% endif %}\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">&gt;</span></span>{{ post.name }}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">&gt;</span></span>\n\t{% if forloop.size == forloop.index %}\n\t\t{% if index_2 == 0 %}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">&gt;</span></span>{% else %}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">&gt;</span></span>{% endif %}\n\t{% endif %}\n{% endfor %}\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>table</span><span class=\"token punctuation\">&gt;</span></span>\n{% endraw %}</code></pre>\n\n","categories":["HTML","Apache","FreeMarker"],"tags":["HTML","FreeMarker","Liquid"]},{"title":"使用 rinetd 实现端口转发重定向","url":"/2020/07/2020-07-07-%E4%BD%BF%E7%94%A8rinetd%E5%AE%9E%E7%8E%B0%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91%E9%87%8D%E5%AE%9A%E5%90%91/","content":"<h3 id=\"工具介绍\"><a href=\"#工具介绍\" class=\"headerlink\" title=\"工具介绍\"></a>工具介绍</h3><p>linux 下简单好用的工具 rinetd，实现端口映射 / 转发 / 重定向。</p>\n<p>用于有效地将连接从一个 IP 地址 / 端口组合重定向到另一 IP 地址 / 端口组合。在操作虚拟服务器、防火墙等时很有用。</p>\n<p>Rinetd 是单一过程的服务器，它处理任何数量的连接到在配置文件 etc/rinetd 中指定的地址 / 端口对。尽管 rinetd 使用非闭锁 I/O 运行作为一个单一过程，它可能重定向很多连接而不对这台机器增加额外的负担。</p>\n<p>官网地址：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5ib3V0ZWxsLmNvbS9yaW5ldGQ=\">http://www.boutell.com/rinetd<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h3 id=\"软件安装\"><a href=\"#软件安装\" class=\"headerlink\" title=\"软件安装\"></a>软件安装</h3><h4 id=\"方法一：压缩包\"><a href=\"#方法一：压缩包\" class=\"headerlink\" title=\"方法一：压缩包\"></a>方法一：压缩包</h4><pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\">wget http://www.boutell.com/rinetd/http/rinetd.tar.gz\ntar zxvf rinetd.tar.gz\nmake\nmake install</code></pre>\n\n<h4 id=\"方法二：apt-get\"><a href=\"#方法二：apt-get\" class=\"headerlink\" title=\"方法二：apt-get\"></a>方法二：apt-get</h4><pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\">apt-cache search rinetd\napt-get install rinetd -y</code></pre>\n\n<h3 id=\"软件配置\"><a href=\"#软件配置\" class=\"headerlink\" title=\"软件配置\"></a>软件配置</h3><p>配置文件格式：</p>\n<pre class=\"language-none\"><code class=\"language-none\">[Source Address] [Source Port] [Destination Address] [Destination Port]\n源地址 源端口 目的地址 目的端口</code></pre>\n\n<p>在每一单独的行中指定每个要转发的端口。源地址和目的地址都可以是主机名或 IP 地址，IP 地址 0.0.0.0 将 rinetd 绑定到任何可用的本地 IP 地址上。</p>\n<p>例如：</p>\n<pre class=\"language-none\"><code class=\"language-none\">vi /etc/rinetd.conf\n0.0.0.0 8080 172.19.94.3 8080\n0.0.0.0 2222 192.168.0.103 3389\n1.2.3.4 80     192.168.0.10 80</code></pre>\n\n<p>说明一下（0.0.0.0 表示本机绑定所有可用地址）</p>\n<ul>\n<li>将所有发往本机 8080 端口的请求转发到 172.19.94.3 的 8080 端口</li>\n<li>将所有发往本机 2222 端口的请求转发到 192.168.0.103 的 3389 端口</li>\n<li>将所有发往 1.2.3.4 的 80 端口请求转发到 192.168.0.10 的 80 端口</li>\n</ul>\n<h3 id=\"启动程序\"><a href=\"#启动程序\" class=\"headerlink\" title=\"启动程序\"></a>启动程序</h3><p>关闭进程</p>\n<pre class=\"language-none\"><code class=\"language-none\">pkill rinetd</code></pre>\n\n<p>启动转发</p>\n<pre class=\"language-none\"><code class=\"language-none\">rinetd -c /etc/rinetd.conf</code></pre>\n\n<h3 id=\"开机启动\"><a href=\"#开机启动\" class=\"headerlink\" title=\"开机启动\"></a>开机启动</h3><p>把这条命令加到 <code>/etc/rc.local</code> 里面就可以开机自动运行。</p>\n<h3 id=\"查看状态\"><a href=\"#查看状态\" class=\"headerlink\" title=\"查看状态\"></a>查看状态</h3><pre class=\"language-none\"><code class=\"language-none\">netstat -antup</code></pre>\n\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><ol>\n<li><p>rinetd.conf 中绑定的本机端口必须没有被其它程序占用。</p>\n</li>\n<li><p>运行 rinetd 的系统防火墙应该打开绑定的本机端口。</p>\n<p>例如：</p>\n<pre class=\"language-none\"><code class=\"language-none\">-A RH-Firewall-1-INPUT -m state --state NEW -m tcp -p tcp --dport 1111 -jACCEPT\n-A RH-Firewall-1-INPUT -m state --state NEW -m tcp -p tcp --dport 2222 -jACCEPT</code></pre>\n\n\n\n</li>\n</ol>\n","categories":["Linux"],"tags":["Linux","工具"]},{"title":"使用不蒜子增加 Jekyll 博客访问量统计","url":"/2020/07/2020-07-09-%E4%BD%BF%E7%94%A8%E4%B8%8D%E8%92%9C%E5%AD%90%E5%A2%9E%E5%8A%A0Jekyll%E5%8D%9A%E5%AE%A2%E8%AE%BF%E9%97%AE%E9%87%8F%E7%BB%9F%E8%AE%A1/","content":"<p>“不蒜子” 是一款极简的网页计数器，可以很方便的统计博客的总访问量和访问次数。</p>\n<p>“不蒜子” 与百度统计谷歌分析等有区别：“不蒜子” 可直接将访问次数显示在您在网页上（也可不显示）；对于已经上线一段时间的网站，“不蒜子” 允许您初始化首次数据。</p>\n<h3 id=\"不蒜子\"><a href=\"#不蒜子\" class=\"headerlink\" title=\"不蒜子\"></a>不蒜子</h3><p>官网介绍</p>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL2J1c3VhbnppLmlicnVjZS5pbmZvLw==\">http://busuanzi.ibruce.info/<i class=\"fa fa-external-link-alt\"></i></span></p>\n</blockquote>\n<p>两行代码 搞定计数</p>\n<pre class=\"language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">async</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>busuanzi_container_site_pv<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n\t本站总访问量<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>busuanzi_value_site_pv<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">&gt;</span></span>次\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n\n<h3 id=\"安装标签\"><a href=\"#安装标签\" class=\"headerlink\" title=\"安装标签\"></a>安装标签</h3><p>只需要复制相应的 html 标签到你的网站要显示访问量的位置即可。</p>\n<p>您可以随意更改不蒜子标签为自己喜欢的显示效果，内容参考第三部分<strong>扩展开发</strong>。</p>\n<p>根据你要显示内容的不同，这分几种情况。</p>\n<h4 id=\"显示站点总访问量\"><a href=\"#显示站点总访问量\" class=\"headerlink\" title=\"显示站点总访问量\"></a>显示站点总访问量</h4><p>要显示站点总访问量，复制以下代码添加到你需要显示的位置。</p>\n<p>有两种算法可选：</p>\n<p>算法 a：pv 的方式，单个用户连续点击 n 篇文章，记录 n 次访问量。</p>\n<pre class=\"language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>busuanzi_container_site_pv<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>    \n\t本站总访问量<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>busuanzi_value_site_pv<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">&gt;</span></span>次\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n\n<p>算法 b：uv 的方式，单个用户连续点击 n 篇文章，只记录 1 次访客数。</p>\n<pre class=\"language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>busuanzi_container_site_uv<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>  \n\t本站访客数<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>busuanzi_value_site_uv<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">&gt;</span></span>人次\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n\n<h4 id=\"显示单页面访问量\"><a href=\"#显示单页面访问量\" class=\"headerlink\" title=\"显示单页面访问量\"></a>显示单页面访问量</h4><p>要显示每篇文章的访问量，复制以下代码添加到你需要显示的位置。</p>\n<p>算法：pv 的方式，单个用户点击 1 篇文章，本篇文章记录 1 次阅读量。</p>\n<pre class=\"language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>busuanzi_container_page_pv<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>  \n\t本文总阅读量<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>busuanzi_value_page_pv<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">&gt;</span></span>次\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n\n<h3 id=\"扩展开发\"><a href=\"#扩展开发\" class=\"headerlink\" title=\"扩展开发\"></a>扩展开发</h3><p>不蒜子之所以称为极客的算子，正是因为不蒜子自身只提供标签 + 数字，至于显示的 style 和 css 动画效果，任你发挥。</p>\n<p><code>busuanzi_value_site_pv</code> 的作用是异步回填访问数，这个 id 一定要正确。</p>\n<p><code>busuanzi_container_site_pv</code> 的作用是为防止计数服务访问出错或超时（3 秒）的情况下，使整个标签自动隐藏显示，带来更好的体验。这个 id 可以省略。</p>\n<p>因此，你也可以使用极简模式：</p>\n<pre class=\"language-html\" data-language=\"html\"><code class=\"language-html\">本站总访问量<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>busuanzi_value_site_pv<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">&gt;</span></span>次\n本站访客数<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>busuanzi_value_site_uv<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">&gt;</span></span>人次\n本文总阅读量<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>busuanzi_value_page_pv<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">&gt;</span></span>次</code></pre>\n\n<p>或者个性化一下：</p>\n<pre class=\"language-html\" data-language=\"html\"><code class=\"language-html\">Total <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>busuanzi_value_site_pv<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">&gt;</span></span> views.\n您是xxx的第<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>busuanzi_value_site_uv<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">&gt;</span></span>个小伙伴\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>busuanzi_value_page_pv<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">&gt;</span></span> Hits</code></pre>\n\n<h3 id=\"其他问题\"><a href=\"#其他问题\" class=\"headerlink\" title=\"其他问题\"></a>其他问题</h3><ol>\n<li><p>我只要统计不显示？</p>\n<p>只引入 busuanzi.js，不引入显示标签即可。</p>\n</li>\n<li><p>你的标签太丑了，我想美化一下可以么？</p>\n<p>可以的，您可以用自己站点的 css 进行控制，只要内层 span 的 id 正确以便回填访问次数即可，甚至标签都可以不是 span。</p>\n</li>\n<li><p>中文字体太丑了，我的主题不适合？</p>\n<p>您可以将本站总访问量 xxx 次改成 view xxx times 等英文以获得更和谐的显示效果。</p>\n</li>\n<li><p>在访问量数据未取回来之前，我不想让页面显示为诸如 “本站总访问量 次”，显得太 low，怎么办？</p>\n<p>只需要如下 css，不蒜子执行完毕会自动将标签显示出来，其他以此类推：</p>\n<pre class=\"language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>busuanzi_container_site_pv<span class=\"token punctuation\">\"</span></span><span class=\"token style-attr language-css\"><span class=\"token attr-name\"> <span class=\"token attr-name\">style</span></span><span class=\"token punctuation\">='</span><span class=\"token attr-value\"><span class=\"token property\">display</span><span class=\"token punctuation\">:</span>none</span><span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">&gt;</span></span>\n    本站总访问量<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>busuanzi_value_site_pv<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">&gt;</span></span>次\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n\n\n</li>\n</ol>\n<p>   上面的做法还是很 low？！可以在没加载出来前就显示个菊花转转转:<br>   首先，你要引入 font-awesome 字体：</p>\n   <pre class=\"language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>//maxcdn.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.min.css<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n或\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>//cdn.bootcss.com/font-awesome/4.3.0/css/font-awesome.min.css<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n\n<p>   其次，修改不蒜子标签：</p>\n   <pre class=\"language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>busuanzi_value_page_pv<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>i</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>fa fa-spinner<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>i</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">&gt;</span></span> Hits\n或（旋转效果）\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>busuanzi_value_page_pv<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>i</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>fa fa-spinner fa-spin<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>i</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">&gt;</span></span> Hits</code></pre>\n\n<p>   和谐多了！</p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2licnVjZS5pbmZvLzIwMTUvMDQvMDQvYnVzdWFuemkv\">http://ibruce.info/2015/04/04/busuanzi/<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n","categories":["Blog"],"tags":["Blog"]},{"title":"jekyll 使用中文路径","url":"/2020/07/2020-07-08-jekyll%E4%BD%BF%E7%94%A8%E4%B8%AD%E6%96%87%E8%B7%AF%E5%BE%84/","content":"<h2 id=\"出现问题\"><a href=\"#出现问题\" class=\"headerlink\" title=\"出现问题\"></a>出现问题</h2><p>在使用 jekyll 在本地预览自己写的博客无法正常打开，而提交到 github 上却可以正常解析。</p>\n<p>看了一下，发现原来是因为博客的 markdown 文件使用了中文文件名，jekyll 无法正常解析出现乱码。</p>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><p>修改 安装目录 <code>Ruby26-x64\\lib\\ruby\\2.6.0\\webrick\\httpservlet</code> 下的 <code>filehandler.rb</code> 文件，建议先备份。</p>\n<p>找到下列两处，添加一句（+ 的一行为添加部分）</p>\n<p>第 285 行： </p>\n<pre class=\"language-ruby\" data-language=\"ruby\"><code class=\"language-ruby\">path <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>path_info<span class=\"token punctuation\">.</span>dup<span class=\"token punctuation\">.</span>force_encoding<span class=\"token punctuation\">(</span><span class=\"token constant\">Encoding</span><span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span><span class=\"token string\">\"filesystem\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">+</span> path<span class=\"token punctuation\">.</span>force_encoding<span class=\"token punctuation\">(</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 加入编码</span>\n<span class=\"token keyword\">if</span> trailing_pathsep<span class=\"token operator\">?</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>path_info<span class=\"token punctuation\">)</span>       </code></pre>\n<p>第 333 行：</p>\n<pre class=\"language-ruby\" data-language=\"ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">break</span> <span class=\"token keyword\">if</span> base <span class=\"token operator\">==</span> <span class=\"token string\">\"/\"</span>\n<span class=\"token operator\">+</span> base<span class=\"token punctuation\">.</span>force_encoding<span class=\"token punctuation\">(</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#加入編碼</span>\n<span class=\"token keyword\">break</span> <span class=\"token keyword\">unless</span> <span class=\"token builtin\">File</span><span class=\"token punctuation\">.</span>directory<span class=\"token operator\">?</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">File</span><span class=\"token punctuation\">.</span>expand_path<span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>filename <span class=\"token operator\">+</span> base<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  </code></pre>\n\n<p>修改完重新 jekyll serve 即可支持中文文件名。</p>\n","categories":["Blog"],"tags":["Ruby","Blog","jekyll"]},{"title":"网页粒子背景插件 canvas-nest.js","url":"/2020/07/2020-07-10-%E7%BD%91%E9%A1%B5%E7%B2%92%E5%AD%90%E8%83%8C%E6%99%AF%E6%8F%92%E4%BB%B6canvas-nest.js/","content":"<p><strong>Canvas-nest.js 是一个非常好看的网页粒子背景插件，不需要依赖任何第三方库即可运行，提供额非常炫酷的背景。</strong></p>\n<h3 id=\"Canvas-nest-js\"><a href=\"#Canvas-nest-js\" class=\"headerlink\" title=\"Canvas-nest.js\"></a>Canvas-nest.js</h3><p>官网介绍</p>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2h1c3RjYy9jYW52YXMtbmVzdC5qcw==\">https://github.com/hustcc/canvas-nest.js<i class=\"fa fa-external-link-alt\"></i></span></p>\n</blockquote>\n<h4 id=\"特征\"><a href=\"#特征\" class=\"headerlink\" title=\"特征\"></a>特征</h4><ul>\n<li>它不依赖 jQuery，并且使用原始的 javascrpit。</li>\n<li>体积小巧，只有 2 Kb。</li>\n<li>易于实现，配置简单。</li>\n<li>您不必是 Web 开发人员即可使用它。</li>\n<li>使用区域渲染进行模块化。</li>\n</ul>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>使用非常简单，将下面的代码插入到 <code>&lt;body&gt;</code> 和 <code>&lt;/body&gt;</code> 之间就行了。</p>\n<pre class=\"language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">color</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#34495e<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">opacity</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>0.5<span class=\"token punctuation\">'</span></span> <span class=\"token attr-name\">zIndex</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>-2<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">count</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>99<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>canvas-nest.min.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n\n<h4 id=\"组态\"><a href=\"#组态\" class=\"headerlink\" title=\"组态\"></a>组态</h4><ul>\n<li><strong>color</strong>：线条颜色，默认值：<code>'0,0,0'</code>；RGB 值：（R，G，B）。（注意：使用 '，' 分隔。）</li>\n<li><strong>pointColor</strong>：点的颜色，默认值：<code>'0,0,0'</code>；RGB 值：（R，G，B）。（注意：使用 '，' 分隔。）</li>\n<li><strong>opacity</strong>：线的不透明度（0〜1），默认值：<code>0.5</code>。</li>\n<li><strong>count</strong>：线条数量，默认值：<code>99</code>。</li>\n<li><strong>zIndex</strong>：背景的 z-index 属性，默认值：<code>-1</code>。</li>\n</ul>\n","categories":["Blog"],"tags":["Blog","HTML"]},{"title":"关于 toString 方法的重写工具 ToStringBuilder","url":"/2020/07/2020-07-15-%E5%85%B3%E4%BA%8EtoString%E6%96%B9%E6%B3%95%E7%9A%84%E9%87%8D%E5%86%99%E5%B7%A5%E5%85%B7ToStringBuilder/","content":"<p>Apache 的 <code>commons-lang3</code> 的工具包里有一个 <code>ToStringBuilder</code> 类，这样在打日志的时候可以方便的打印出类实例中的各属性的值。</p>\n<h3 id=\"依赖引入\"><a href=\"#依赖引入\" class=\"headerlink\" title=\"依赖引入\"></a>依赖引入</h3><pre class=\"language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>commons-lang<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>commons-lang<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>2.4<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n\n<h3 id=\"重写-toString\"><a href=\"#重写-toString\" class=\"headerlink\" title=\"重写 toString\"></a>重写 toString</h3><pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token class-name\">ToStringBuilder</span><span class=\"token punctuation\">.</span><span class=\"token function\">reflectionToString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<p>打印结果参考：</p>\n<blockquote>\n<p>com.zzz.other.City@4eec7777 [id=1,name = 杭州，province = 浙江，country=CN]</p>\n</blockquote>\n<h3 id=\"ToStringStyle\"><a href=\"#ToStringStyle\" class=\"headerlink\" title=\"ToStringStyle\"></a>ToStringStyle</h3><p><code>ToStringBuilder.reflectionToString</code>  默认为 <code>ToStringStyle.DEFAULT_STYLE</code>。</p>\n<p>使用方法：</p>\n<pre class=\"language-none\"><code class=\"language-none\">ToStringBuilder.reflectionToString(this, ToStringStyle.DEFAULT_STYLE);</code></pre>\n\n<p>ToStringStyle 还有其他样式，可调整 ToStringBuilder 的打印结果：</p>\n<ul>\n<li><p><strong>ToStringStyle.DEFAULT_STYLE</strong>：对象及其属性一行显示</p>\n<pre class=\"language-none\"><code class=\"language-none\">com.zzz.other.City@4eec7777[id=1,name=杭州,province=浙江,country=CN]</code></pre>\n</li>\n<li><p><strong>ToStringStyle.MULTI_LINE_STYLE</strong>：属性换行显示</p>\n<pre class=\"language-none\"><code class=\"language-none\">com.zzz.other.City@4eec7777[\n  id=1\n  name=杭州\n  province=浙江\n  country=CN\n]</code></pre>\n</li>\n<li><p><strong>ToStringStyle.NO_FIELD_NAMES_STYLE</strong>：不显示属性名，只显示属性值</p>\n<pre class=\"language-none\"><code class=\"language-none\">com.zzz.other.City@4eec7777[1,杭州,浙江,CN]</code></pre>\n</li>\n<li><p><strong>ToStringStyle.SHORT_PREFIX_STYLE</strong>：对象名称简写</p>\n<pre class=\"language-none\"><code class=\"language-none\">City[id=1,name=杭州,province=浙江,country=CN]</code></pre></li>\n<li><p><strong>ToStringStyle.SIMPLE_STYLE</strong>：只显示属性</p>\n<pre class=\"language-none\"><code class=\"language-none\">1,杭州,浙江,CN</code></pre>\n\n</li>\n</ul>\n<h3 id=\"原理解析\"><a href=\"#原理解析\" class=\"headerlink\" title=\"原理解析\"></a>原理解析</h3><p><code>ReflectionToStringBuilder</code> 主要是通过 java 反射实现的属性拼接。</p>\n<p><strong>org.apache.commons.lang.builder.ReflectionToStringBuilder</strong>：</p>\n <pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> object<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ToStringStyle</span> style<span class=\"token punctuation\">,</span> \n                              <span class=\"token keyword\">boolean</span> outputTransients<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> outputStatics<span class=\"token punctuation\">,</span>\n                              <span class=\"token class-name\">Class</span> reflectUpToClass<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReflectionToStringBuilder</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">,</span> style<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> \n                                         reflectUpToClass<span class=\"token punctuation\">,</span> outputTransients<span class=\"token punctuation\">,</span>\n                                         outputStatics<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getStyle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getNullText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token class-name\">Class</span> clazz <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">appendFieldsIn</span><span class=\"token punctuation\">(</span>clazz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>clazz<span class=\"token punctuation\">.</span><span class=\"token function\">getSuperclass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> clazz <span class=\"token operator\">!=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getUpToClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tclazz <span class=\"token operator\">=</span> clazz<span class=\"token punctuation\">.</span><span class=\"token function\">getSuperclass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">appendFieldsIn</span><span class=\"token punctuation\">(</span>clazz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<p>其中参数  <code>ToStringStyle</code>  是个抽象类，定义了输出的格式 主要是 append 了一类类信息到字符串上，可以自己继承 <code>ToStringStyle</code>  实现自定义的输出格式。</p>\n","categories":["Java","Apache","JavaClass","Commons"],"tags":["JavaClass","Apache"]},{"title":"使用 LFTP 进行 SFTP 文件上传与下载","url":"/2020/07/2020-07-14-%E4%BD%BF%E7%94%A8LFTP%E8%BF%9B%E8%A1%8CSFTP%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%B8%8E%E4%B8%8B%E8%BD%BD/","content":"<h3 id=\"工具介绍\"><a href=\"#工具介绍\" class=\"headerlink\" title=\"工具介绍\"></a>工具介绍</h3><p>LFTP 是一款非常著名的字符界面的文件传输工具。支持 FTP、HTTP、FISH、SFTP、HTTPS 和 FTPS 协议。</p>\n<h3 id=\"软件安装\"><a href=\"#软件安装\" class=\"headerlink\" title=\"软件安装\"></a>软件安装</h3><pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\">apt-cache search lftp\napt-get install lftp -y</code></pre>\n\n<h3 id=\"lftp-的使用\"><a href=\"#lftp-的使用\" class=\"headerlink\" title=\"lftp 的使用\"></a>lftp 的使用</h3><h4 id=\"使用语法\"><a href=\"#使用语法\" class=\"headerlink\" title=\"使用语法\"></a>使用语法</h4><ul>\n<li><code>lftp -[fceup] user:passwd@host</code>：passwd 可选，此方式密码明文保存，history 可查看 </li>\n<li><code>-f &lt;file&gt;</code>：执行文件中的命令后退出</li>\n<li><code>-c &lt;cmd&gt;</code>：执行命令后退出 </li>\n<li><code>-e &lt;cmd&gt;</code>：登录后后执行命令 </li>\n<li><code>-u &lt;user&gt;[,&lt;pass&gt;]</code>：使用指定的用户名 / 口令进行验证 </li>\n<li><code>-p &lt;port&gt;</code>：连接指定的端口，默认 21</li>\n</ul>\n<h4 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h4><ul>\n<li><code>cd</code>：切换 FTP 目录 </li>\n<li><code>lcd</code>：切换本地目录</li>\n<li><code>ls</code>：列出 FTP 目录文件</li>\n<li><code>!ls</code>：列出本地目录文件 </li>\n<li><code>find ./ -name file</code>：查找文件</li>\n<li><code>mv</code>：移动</li>\n<li><code>rm</code>：删除</li>\n<li><code>mkdir</code>：新建目录</li>\n<li><code>rmdir</code>：删除目录</li>\n</ul>\n<h4 id=\"上传下载文件\"><a href=\"#上传下载文件\" class=\"headerlink\" title=\"上传下载文件\"></a>上传下载文件</h4><ul>\n<li><p><code>get [cEaO] file -o newfilename</code>：下载文件</p>\n</li>\n<li><p><code>put [cEaO] file -o newfilename</code>：上传文件</p>\n</li>\n<li><p><code>pget -n</code>：多线程下载</p>\n<p>可选参数：</p>\n<ul>\n<li><code>-c</code>：支持断点续传 </li>\n<li><code>-E</code>：下载后删除远端文件</li>\n<li><code>-a</code>：指定传输为 ascii 模式，默认为二进制模式 </li>\n<li><code>-O</code>：指定存放目录</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"上传下载目录\"><a href=\"#上传下载目录\" class=\"headerlink\" title=\"上传下载目录\"></a>上传下载目录</h4><ul>\n<li><p><code>mirror [cRnr] remote [local]</code> </p>\n<p>可选参数： </p>\n<ul>\n<li><code>-c</code>：支持断点续传 </li>\n<li><code>-R</code>：上传整个目录 </li>\n<li><code>-n</code>：只下载较新的档案，可用于增量备份 </li>\n<li><code>-r</code>：只下载当前目录，不递归目录</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"书签管理\"><a href=\"#书签管理\" class=\"headerlink\" title=\"书签管理\"></a>书签管理</h4><ul>\n<li><code>bookmark add name</code>：保存当前连接为书签名字 name，下次打开可直接使用 lftp name</li>\n<li><code>bookmark del name</code>：删除书签</li>\n<li><code>bookmark list</code>：显示书签列表</li>\n<li><code>bookmark edit</code>：编辑书签</li>\n</ul>\n<h4 id=\"编码设置\"><a href=\"#编码设置\" class=\"headerlink\" title=\"编码设置\"></a>编码设置</h4><ul>\n<li><code>set ftp:charset \"gbk\"</code> </li>\n<li><code>set file:charset \"UTF-8\"</code> </li>\n<li>或加入配置文件<code>.lftp/rc</code></li>\n</ul>\n<h4 id=\"主动-被动模式\"><a href=\"#主动-被动模式\" class=\"headerlink\" title=\"主动/被动模式\"></a>主动 / 被动模式</h4><p>默认为被动模式 。</p>\n<p><code>set ftp:passive-mode no</code>：关闭被动模式转为主动模式</p>\n<p>主动客户端开启数据传输端口，被动服务端开启数据传输端口。</p>\n<h3 id=\"Shell脚本\"><a href=\"#Shell脚本\" class=\"headerlink\" title=\"Shell脚本\"></a>Shell 脚本</h3><h4 id=\"批量上传\"><a href=\"#批量上传\" class=\"headerlink\" title=\"批量上传\"></a>批量上传</h4><pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\">#!/bin/bash\n\n#SFTP配置信息\n#用户名\nUSER=root\n#密码\nPASSWORD=5EYS40T04BMF\n#待上传文件根目录\nSRCDIR=/u02/dab/sftpFiles\n#FTP目录\nDESDIR=/u01/sftpFiles\n#IP\nIP=192.168.10.11\n#端口\nPORT=22022\n\n#获取文件\ncd ${SRCDIR} ;\n#目录下的所有文件\n#FILES=`ls` \n#修改时间在执行时间五分钟之前的xml文件\nFILES=`find ${SRCDIR} -mmin -50 -name '*.xml'`\n\nfor FILE in ${FILES}\ndo\n    echo ${FILE}\n#发送文件 (关键部分）  复制出来，如有结尾有空格，请自行去掉\nlftp -u ${USER},${PASSWORD} sftp://${IP}:${PORT} &lt;&lt;EOF\ncd ${DESDIR}/\nlcd ${SRCDIR}\nput ${FILE}\nby\nEOF\n\ndone</code></pre>\n\n<h4 id=\"单文件下载\"><a href=\"#单文件下载\" class=\"headerlink\" title=\"单文件下载\"></a>单文件下载</h4><pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\">#!/bin/bash\n\nUSER=root\n#密码\nPASSWORD=5EYS40T04BMF\n#下载文件目录\nSRCDIR=/u02/dab\n#FTP目录(待下载文件目录)\nDESDIR=/u01/sftpFiles\n#银联IP\nIP=192.168.1.10\n#端口\nPORT=22022\n\nlftp -u ${USER},${PASSWORD} sftp://${IP}:${PORT}&lt;&lt;EOF\ncd ${DESDIR}\nlcd ${SRCDIR}\n#需要下载的文件为text.xml\nget text.xml\nby\nEOF</code></pre>\n\n","categories":["Linux","Shell"],"tags":["Linux","工具"]},{"title":"博客添加 Fork me on GitHub","url":"/2020/07/2020-07-16-%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0Fork%20me%20on%20GitHub/","content":"<p><strong>在网上浏览博客时经常看到页面的右上角或左上角有一个 fork me on github 的按钮，本文将介绍如何实现。</strong></p>\n<h3 id=\"Fork-me-on-GitHub\"><a href=\"#Fork-me-on-GitHub\" class=\"headerlink\" title=\"Fork me on GitHub\"></a>Fork me on GitHub</h3><p>GitHub 获取 css 文件：</p>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3NpbW9ud2hpdGFrZXIvZ2l0aHViLWZvcmstcmliYm9uLWNzcy8=\">https://github.com/simonwhitaker/github-fork-ribbon-css/<i class=\"fa fa-external-link-alt\"></i></span></p>\n</blockquote>\n<p>效果演示：</p>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaW1vbndoaXRha2VyLmdpdGh1Yi5pby9naXRodWItZm9yay1yaWJib24tY3NzLw==\">https://simonwhitaker.github.io/github-fork-ribbon-css/<i class=\"fa fa-external-link-alt\"></i></span></p>\n</blockquote>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>将以下代码复制到 <code>&lt;head&gt;</code> 页面的中，引入 css：</p>\n<pre class=\"language-none\"><code class=\"language-none\">&lt;link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/github-fork-ribbon-css/0.2.3/gh-fork-ribbon.min.css\" /&gt;</code></pre>\n\n<p>使用非常简单，将下面的代码插入到 <code>&lt;body&gt;</code> 和 <code>&lt;/body&gt;</code> 之间就行了。</p>\n<pre class=\"language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>github-fork-ribbon<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://github.com/Jueee<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">target</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>_blank<span class=\"token punctuation\">\"</span></span> \n   \t<span class=\"token attr-name\">data-ribbon</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Fork me on GitHub<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">title</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Fork me on GitHub<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    Fork me on GitHub\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n\n<p>默认是在页面右上角。</p>\n<h3 id=\"其他样式\"><a href=\"#其他样式\" class=\"headerlink\" title=\"其他样式\"></a>其他样式</h3><ul>\n<li><p>固定标签：<code>class=\"github-fork-ribbon fixed\"</code></p>\n</li>\n<li><p>更换位置：</p>\n<ul>\n<li>右上角：<code>class=\"github-fork-ribbon right-top\"</code></li>\n<li>右下角：<code>class=\"github-fork-ribbon right-bottom\"</code></li>\n<li>左上角：<code>class=\"github-fork-ribbon left-top\"</code></li>\n<li>左下角：<code>class=\"github-fork-ribbon left-bottom fixed\"</code></li>\n</ul>\n</li>\n<li><p>更换背景颜色：</p>\n<pre class=\"language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">.github-fork-ribbon.left-bottom:before</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #333<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n</li>\n</ul>\n<h3 id=\"小屏幕不显示\"><a href=\"#小屏幕不显示\" class=\"headerlink\" title=\"小屏幕不显示\"></a>小屏幕不显示</h3><p>按照上面的步骤当屏幕缩小后还会显示 fork me on github 图标，但这不是我想要的，如果希望在大屏下显示，小屏后就不显示了。方法如下：</p>\n<p>新增样式：</p>\n<pre class=\"language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">.forkme</span><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 1350px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token selector\">.forkme</span><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> inline<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<p>代码块上套上 div 加上 class 就行了，如下：</p>\n<pre class=\"language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>forkme<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>github-fork-ribbon fixed<span class=\"token punctuation\">\"</span></span>\t<span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://github.com/Jueee<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">&gt;</span></span>\n\t\tFork me on GitHub\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n\n","categories":["Blog"],"tags":["Blog","HTML"]},{"title":"使用 Arthas 热更新 Java 代码","url":"/2020/07/2020-07-16-%E4%BD%BF%E7%94%A8Arthas%E7%83%AD%E6%9B%B4%E6%96%B0Java%E4%BB%A3%E7%A0%81/","content":"<p>Arthas（阿尔萨斯）是 Alibaba 开源的一款 Java 诊断工具，使用它我们可以监控和排查 Java 程序，然而它还提供了非常实用的 Java 热更新功能。</p>\n<p>所谓的 Java 热更新是指在不重启项目的情况下实现代码的更新与替换。使用它可以实现不停机更新 Java 程序，尤其是对那些启动非常耗时的 Java 项目来说，更是效果显著。</p>\n<h3 id=\"Arthas-使用\"><a href=\"#Arthas-使用\" class=\"headerlink\" title=\"Arthas 使用\"></a>Arthas 使用</h3><h4 id=\"Arthas资料\"><a href=\"#Arthas资料\" class=\"headerlink\" title=\"Arthas资料\"></a>Arthas 资料</h4><p>Github 地址：</p>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvYXJ0aGFz\"> https://github.com/alibaba/arthas<i class=\"fa fa-external-link-alt\"></i></span></p>\n</blockquote>\n<p>Arthas<br>用户文档：</p>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9hbGliYWJhLmdpdGh1Yi5pby9hcnRoYXMv\">https://alibaba.github.io/arthas/<i class=\"fa fa-external-link-alt\"></i></span></p>\n</blockquote>\n<h4 id=\"下载-Arthas\"><a href=\"#下载-Arthas\" class=\"headerlink\" title=\"下载 Arthas\"></a>下载 Arthas</h4><p>首先，我们先把 Arthas 的 Jar 包下载到本地，它的下载地址是：</p>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9hbGliYWJhLmdpdGh1Yi5pby9hcnRoYXMvYXJ0aGFzLWJvb3QuamFy\">https://alibaba.github.io/arthas/arthas-boot.jar<i class=\"fa fa-external-link-alt\"></i></span></p>\n</blockquote>\n<h4 id=\"启动-Arthas\"><a href=\"#启动-Arthas\" class=\"headerlink\" title=\"启动 Arthas\"></a>启动 Arthas</h4><p>我们只需要使用普通的 jar 包启动命令：<code>java -jar arthas-boot.jar</code> 来启动 Arthas 即可。</p>\n<h4 id=\"Windows-运行\"><a href=\"#Windows-运行\" class=\"headerlink\" title=\"Windows 运行\"></a>Windows 运行</h4><p>Windows 需要以管理员方式运行，bat 脚本如下：</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">%1 mshta vbscript:CreateObject<span class=\"token punctuation\">(</span><span class=\"token string\">\"Shell.Application\"</span><span class=\"token punctuation\">)</span>.ShellExecute<span class=\"token punctuation\">(</span><span class=\"token string\">\"cmd.exe\"</span>,<span class=\"token string\">\"/c %~s0 ::\"</span>,<span class=\"token string\">\"\"</span>,<span class=\"token string\">\"runas\"</span>,1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>window.close<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token builtin class-name\">exit</span>\n<span class=\"token builtin class-name\">cd</span> /d <span class=\"token string\">\"%~dp0\"</span>\njava -jar arthas-boot.jar</code></pre>\n\n<h3 id=\"热更新-Java-代码\"><a href=\"#热更新-Java-代码\" class=\"headerlink\" title=\"热更新 Java 代码\"></a>热更新 Java 代码</h3><p>假如我们原来的代码是这样的：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">sample<span class=\"token punctuation\">.</span>redefine</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RedefineSuccess</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">printFlag</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printFlag</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">boolean</span> flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"flag is true.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"flag is false.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<p>我们现在想要把 <code>flag</code> 变量改为 <code>false</code> 就可以这样来做：</p>\n<ol>\n<li>使用 Arthas 的内存编译工具将新的 Java 代码编译为字节码；</li>\n<li>使用 Arthas 的 <code>redefine</code> 命令实现热更新。</li>\n</ol>\n<h4 id=\"编译字节码\"><a href=\"#编译字节码\" class=\"headerlink\" title=\"编译字节码\"></a>编译字节码</h4><p>首先，我们需要将新的 Java 代码编译为字节码，我们可以通过 Arthas 提供的 <code>mc</code> 命令实现，<code>mc</code> 是 Memory Compiler（内存编译器）的缩写。</p>\n<p>实现示例如下：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">[</span>arthas<span class=\"token annotation punctuation\">@10200</span><span class=\"token punctuation\">]</span>$ mc <span class=\"token class-name\">C</span><span class=\"token operator\">:</span><span class=\"token operator\">/</span>arthas<span class=\"token operator\">-</span>demo<span class=\"token operator\">/</span>src<span class=\"token operator\">/</span>main<span class=\"token operator\">/</span>java<span class=\"token operator\">/</span>sample<span class=\"token operator\">/</span>redefine<span class=\"token operator\">/</span><span class=\"token class-name\">RedefineSuccess</span><span class=\"token punctuation\">.</span>java <span class=\"token operator\">-</span>d  <span class=\"token class-name\">E</span><span class=\"token operator\">:</span>\n<span class=\"token class-name\">Memory</span> compiler output<span class=\"token operator\">:</span>\n<span class=\"token class-name\">E</span><span class=\"token operator\">:</span>\\sample\\redefine\\<span class=\"token class-name\">RedefineSuccess</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span>\n<span class=\"token class-name\">Affect</span><span class=\"token punctuation\">(</span>row<span class=\"token operator\">-</span>cnt<span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> cost in <span class=\"token number\">500</span> ms<span class=\"token punctuation\">.</span></code></pre>\n\n<p>其中 <code>-d</code> 表示编译文件的存放位置。</p>\n<blockquote>\n<p>小贴士：我们也可以使用 javac App.java 生成的字节码，它与此步骤执行的结果相同。</p>\n</blockquote>\n<h4 id=\"执行热更新\"><a href=\"#执行热更新\" class=\"headerlink\" title=\"执行热更新\"></a>执行热更新</h4><p>有了字节码文件之后，我们就可以使用 <code>redefine</code> 命令来实现热更新了，实现示例如下：</p>\n<pre class=\"language-none\"><code class=\"language-none\">[arthas@10200]$ redefine e:/sample/redefine/RedefineSuccess.class\nredefine success, size: 1</code></pre>\n\n<p>从上述结果可以看出，热更新执行成功，此时我们去控制台查看执行结果，如下图所示：</p>\n<p><img src=\"/images/2020/07/1594883244673.png\" alt=\"1594883244673\" loading=\"lazy\"></p>\n<p>这说明热更新执行确实成功了。</p>\n<h3 id=\"结合-jad-mc-命令使用\"><a href=\"#结合-jad-mc-命令使用\" class=\"headerlink\" title=\"结合 jad/mc 命令使用\"></a>结合 jad/mc 命令使用</h3><pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">jad --source-only com.example.demo.arthas.user.UserController <span class=\"token operator\">&gt;</span> /tmp/UserController.java\n<span class=\"token function\">mc</span> /tmp/UserController.java -d /tmp\nredefine /tmp/com/example/demo/arthas/user/UserController.class</code></pre>\n\n<ul>\n<li>jad 命令反编译，然后可以用其它编译器，比如 vim 来修改源码</li>\n<li> mc 命令来内存编译修改过的代码</li>\n<li>用 redefine 命令加载新的字节码</li>\n</ul>\n<h3 id=\"热更新注意事项\"><a href=\"#热更新注意事项\" class=\"headerlink\" title=\"热更新注意事项\"></a>热更新注意事项</h3><h4 id=\"redefine-特别说明\"><a href=\"#redefine-特别说明\" class=\"headerlink\" title=\"redefine 特别说明\"></a>redefine 特别说明</h4><p><code>redefine</code> 命令和 <code>jad</code>/<code>watch</code>/<code>trace</code>/<code>monitor</code>/<code>tt</code> 等命令会冲突。</p>\n<p>执行完 <code>redefine</code> 之后，如果再执行上面提到的命令，则会把 <code>redefine</code> 的字节码重置。 </p>\n<p>原因是 jdk 本身 redefine 和 Retransform 是不同的机制，同时使用两种机制来更新字节码，只有最后修改的会生效。</p>\n<h4 id=\"条件限制\"><a href=\"#条件限制\" class=\"headerlink\" title=\"条件限制\"></a>条件限制</h4><p>使用热更新功能有一些条件限制，我们只能用它来修改方法内部的一些业务代码，如果我们出现了以下任意一种情况，那么热更新就会执行失败：</p>\n<ol>\n<li>增加类属性（类字段）；</li>\n<li>增加或删除方法；</li>\n<li>替换正在运行的方法。</li>\n</ol>\n<p>最后一条我们需要单独说明一下，假如我们把上面的示例改为如下代码：</p>\n <pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">sample<span class=\"token punctuation\">.</span>redefine</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RedefineError</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">boolean</span> flag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"flag is true.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"flag is false.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t        <span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n\n<p>那么此时我们再进行热更新操作修改 <code>flag</code> 的值，那么就会执行失败，因为我们替换的是正在运行中的方法，而我们正常示例中的代码之所以能成功，是因为我们在 <code>while</code> 无线循环中调用了另一个方法，而那个方法是被间歇性使用的，因此可以替换成功。</p>\n","categories":["Java","Arthas"],"tags":["Java","Java诊断","Arthas"]},{"title":"使用 GitBook 进行团队文档协作","url":"/2020/07/2020-07-24-%E4%BD%BF%E7%94%A8GitBook%E8%BF%9B%E8%A1%8C%E5%9B%A2%E9%98%9F%E6%96%87%E6%A1%A3%E5%8D%8F%E4%BD%9C/","content":"<p><strong>GitBook 提供了 GitBook Editor ，GitBook cli 这两个工具，一个是编辑文档，一个可以生成文档。只要本地搭建一个 Git 服务就完全可以实现本地化了。</strong></p>\n<h3 id=\"工具准备\"><a href=\"#工具准备\" class=\"headerlink\" title=\"工具准备\"></a>工具准备</h3><p>如果没有团队协作要求，只想生成电子书，只在自己机器上安装 GitBook CI 就可以，1，2 就可以省略了。</p>\n<ol>\n<li>GitLab 一键安装包 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9hYm91dC5naXRsYWIuY29tL2Rvd25sb2Fkcy8=\">https://about.gitlab.com/downloads/<i class=\"fa fa-external-link-alt\"></i></span> </li>\n<li>GitLab Ci Runner <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2dpdGxhYmhxL2dpdGxhYi1jaS1ydW5uZXI=\">https://github.com/gitlabhq/gitlab-ci-runner<i class=\"fa fa-external-link-alt\"></i></span> </li>\n<li>GitBook CI <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0dpdGJvb2tJTy9naXRib29rLWNsaQ==\">https://github.com/GitbookIO/gitbook-cli<i class=\"fa fa-external-link-alt\"></i></span> </li>\n<li>GitBook Editor <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZ2l0Ym9vay5jb20vZWRpdG9y\">https://www.gitbook.com/editor<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ol>\n<h3 id=\"GitLab-Runner配置\"><a href=\"#GitLab-Runner配置\" class=\"headerlink\" title=\"GitLab Runner配置\"></a>GitLab Runner 配置</h3><h4 id=\"编辑-gitlab-ci-yml\"><a href=\"#编辑-gitlab-ci-yml\" class=\"headerlink\" title=\"编辑 .gitlab-ci.yml\"></a>编辑 .gitlab-ci.yml</h4><pre class=\"language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># 定义 stages</span>\n<span class=\"token key atrule\">stages</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> build\n<span class=\"token comment\"># 定义 job</span>\n<span class=\"token key atrule\">GenerateHTML</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">stage</span><span class=\"token punctuation\">:</span> build\n  <span class=\"token key atrule\">script</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> p=`pwd`\n    <span class=\"token punctuation\">-</span> echo $p\n    <span class=\"token punctuation\">-</span> gitbook build</code></pre>\n\n<p>gitlab 执行构建，会在文件夹下生成 _book 的目录。</p>\n<p>手工执行 gitbook serve 启动。</p>\n<p>打开 ip:4000 就可以查看文档了。</p>\n<h3 id=\"相关命令\"><a href=\"#相关命令\" class=\"headerlink\" title=\"相关命令\"></a>相关命令</h3><pre class=\"language-ruby\" data-language=\"ruby\"><code class=\"language-ruby\">$ gitbook init <span class=\"token comment\"># 初始化一个仓库</span>\n\n$ gitbook install <span class=\"token comment\"># 安装插件</span>\n\n$ gitbook serve <span class=\"token comment\"># 本地预览</span>\n\n$ gitbook serve <span class=\"token operator\">--</span>port <span class=\"token number\">8001</span> <span class=\"token comment\"># 指定端口,默认4000</span>\n\n$ gitbook build  <span class=\"token comment\"># 输出一个静态网站</span>\n\n$ gitbook pdf <span class=\"token comment\"># 生成pdf文件</span>\n\n$ gitbook help <span class=\"token comment\"># 查看帮助</span></code></pre>\n\n<p>可以使用 <code>--log=debug</code> 和 <code>--debug</code> 来获得更详细的错误消息（堆栈跟踪）。例如：</p>\n<pre class=\"language-none\"><code class=\"language-none\">$ gitbook build ./ --log=debug --debug</code></pre>\n\n<p>or</p>\n<pre class=\"language-none\"><code class=\"language-none\">$ gitbook serve ./ --log=debug --debug</code></pre>\n\n<h3 id=\"Docker容器化\"><a href=\"#Docker容器化\" class=\"headerlink\" title=\"Docker容器化\"></a>Docker 容器化</h3><p><code>Dockerfile</code> 文件如下：</p>\n<pre class=\"language-none\"><code class=\"language-none\">From node:10\n\nLABEL version=$VERSION\n\nENV TZ=Asia/Shanghai\nRUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime &amp;&amp; echo $TZ &gt; /etc/timezone\n\nWORKDIR /gitbook\nCOPY xxx_deploy /gitbook\n\nRUN npm install gitbook-cli -g &amp;&amp; gitbook fetch ${VERSION} &amp;&amp; npm cache clear --force &amp;&amp; rm -rf /tmp/*\nRUN gitbook build\n\nCMD [\"gitbook\", \"serve\",\"--port\",\"4000\"]</code></pre>\n\n<h3 id=\"问题解决\"><a href=\"#问题解决\" class=\"headerlink\" title=\"问题解决\"></a>问题解决</h3><h4 id=\"windows更新报错\"><a href=\"#windows更新报错\" class=\"headerlink\" title=\"windows更新报错\"></a>windows 更新报错</h4><p>gitbook 的新版本，在 windows 下有个 bug，当文件内容发生更新时，gitbook 报错然后退出：</p>\n<pre class=\"language-none\"><code class=\"language-none\">Error: EPERM: operation not permitted, open</code></pre>\n\n<p>gitbook 官方已有 bug，存在半年了，一直没有 fix：</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0dpdGJvb2tJTy9naXRib29rL2lzc3Vlcy8xMzc5\">git serve can't restart when file changes<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0dpdGJvb2tJTy9naXRib29rLWNsaS9pc3N1ZXMvNTE=\">gitbook-cli crashes with EPERM: operation not permitted on windows<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<p><strong>解决方法</strong></p>\n<p>在官方 bugfix 之前，暂时只能回避：</p>\n<ol>\n<li><p>不要在 windows 下使用 gitbook：linux 没有这个问题</p>\n</li>\n<li><p>不是办法的办法：</p>\n<p>新建一个 <code>run.bat</code> ，内容如下：</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">@Echo off\n:Start\ncall gitbook serve\ngoto Start</code></pre>\n\n<p>每次崩溃之后立即重新启动一次，凑合着用吧。</p>\n</li>\n</ol>\n<h4 id=\"底部链接修改与隐藏\"><a href=\"#底部链接修改与隐藏\" class=\"headerlink\" title=\"底部链接修改与隐藏\"></a>底部链接修改与隐藏</h4><p>用 GitBook 生成的网页中，在左侧目录下方默认有一个 Published with GitBook 连接，可以将这个连接去掉，或者替换成其它连接。</p>\n<p>在 GitBook 站点目录创建 <code>_layouts-&gt;website-&gt;summary.html</code></p>\n<pre class=\"language-html\" data-language=\"html\"><code class=\"language-html\">{% raw %}\n{% macro articles(_articles) %}\n    {% for article in _articles %}\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>chapter {% if article.path == file.path and not article.anchor %}active{% endif %}<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">data-level</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>{{ article.level }}<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">{%</span> <span class=\"token attr-name\">if</span> <span class=\"token attr-name\">article.path</span> <span class=\"token attr-name\">%}data-path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>{{ article.path|resolveFile }}<span class=\"token punctuation\">\"</span></span><span class=\"token attr-name\">{%</span> <span class=\"token attr-name\">endif</span> <span class=\"token attr-name\">%}</span><span class=\"token punctuation\">&gt;</span></span>\n            {% if article.path and getPageByPath(article.path) %}\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>{{ article.path|resolveFile }}{{ article.anchor }}<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n            {% elif article.url %}\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">target</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>_blank<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>{{ article.url }}<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n            {% else %}\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">&gt;</span></span>\n            {% endif %}\n                    {% if article.level != \"0\" and config.pluginsConfig['theme-default'].showLevel %}\n                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>b</span><span class=\"token punctuation\">&gt;</span></span>{{ article.level }}.<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>b</span><span class=\"token punctuation\">&gt;</span></span>\n                    {% endif %}\n                    {{ article.title }}\n            {% if article.path  or article.url %}\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span>\n            {% else %}\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">&gt;</span></span>\n            {% endif %}\n\n            {% if article.articles.length &gt; 0 %}\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>articles<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n                {{ articles(article.articles, file, config) }}\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n            {% endif %}\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n    {% endfor %}\n{% endmacro %}\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>summary<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    {% set _divider = false %}\n    {% if config.links.sidebar  %}\n    {% for linkTitle, link in config.links.sidebar  %}\n        {% set _divider = true %}\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>{{ link }}<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">target</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>_blank<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>custom-link<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>{{ linkTitle }}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n    {% endfor %}\n    {% endif %}\n\n    {% if _divider %}\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>divider<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n    {% endif %}\n\n    {% for part in summary.parts %}\n        {% if part.title %}\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>header<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>{{ part.title }}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n        {% elif not loop.first %}\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>divider<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n        {% endif %}\n        {{ articles(part.articles, file, config) }}\n    {% endfor %}\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>divider<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n    \n    <span class=\"token comment\">&lt;!--&lt;li&gt;\n        &lt;a href=\"https://www.gitbook.com\" target=\"blank\" class=\"gitbook-link\"&gt;\n            {{ \"GITBOOK_LINK\"|t }}\n        &lt;/a&gt;\n    &lt;/li&gt;--&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n{% endraw %}</code></pre>\n\n\n\n\n\n\n","categories":["Blog"],"tags":["Blog","GitBook"]},{"title":"Arthas 之各模块简介","url":"/2020/08/2020-08-02-Arthas%E4%B9%8B%E5%90%84%E6%A8%A1%E5%9D%97%E7%AE%80%E4%BB%8B/","content":"<h3 id=\"Arthas\"><a href=\"#Arthas\" class=\"headerlink\" title=\"Arthas\"></a>Arthas</h3><h4 id=\"项目代码\"><a href=\"#项目代码\" class=\"headerlink\" title=\"项目代码\"></a>项目代码</h4><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvYXJ0aGFz\">GitHub Code by arthas<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h4 id=\"包含模块\"><a href=\"#包含模块\" class=\"headerlink\" title=\"包含模块\"></a>包含模块</h4><p><img src=\"/images/2020/08/1596679506644.png\" alt=\"1596679506644\" loading=\"lazy\"></p>\n<h3 id=\"模块简介\"><a href=\"#模块简介\" class=\"headerlink\" title=\"模块简介\"></a>模块简介</h3><ul>\n<li>arthas-agent：基于 JavaAgent 技术的代理</li>\n<li> bin：一些启动脚本</li>\n<li> arthas-boot：Java 版本的一键安装启动脚本</li>\n<li> arthas-client：telnet client 代码</li>\n<li> arthas-common：一些共用的工具类和枚举类</li>\n<li> arthas-core：核心库，各种 arthas 命令的交互和实现</li>\n<li> arthas-demo：示例代码</li>\n<li> arthas-memorycompiler：内存编绎器代码</li>\n<li> arthas-packaging：maven 打包相关的</li>\n<li> arthas-site：arthas 站点</li>\n<li> arthas-spy：编织到目标类中的各个切面</li>\n<li> static：静态资源</li>\n<li> arthas-testcase：测试</li>\n</ul>\n<h3 id=\"主要功能\"><a href=\"#主要功能\" class=\"headerlink\" title=\"主要功能\"></a>主要功能</h3><p>Arthas 提供的功能主要可以分为以下三个方面：</p>\n<ol>\n<li>信息监控<ul>\n<li>进程运行基本信息包括：内存、CPU 占用、线程信息、线程堆栈、线程数统计、环境变量信息。</li>\n<li>对象信息：类对象静态属性、 Mbean 的属性信息、已加载类信息、类加载器、类方法信息。</li>\n</ul>\n</li>\n<li>方法调用<ul>\n<li>方法调用入参、返回值查看。</li>\n<li>方法被调用的调用路径、调用耗时、方法调用次数、成功次数、失败次数等统计。</li>\n<li>记录和重做方法调用。</li>\n</ul>\n</li>\n<li>类文件处理<ul>\n<li> dump 已加载类的字节码、字节码反编译、类编译、类重新热加载。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"模块关系\"><a href=\"#模块关系\" class=\"headerlink\" title=\"模块关系\"></a>模块关系</h3><p>模块关系说明：</p>\n<ol>\n<li>arthas-boot.jar 和 as.sh 模块功能类似，分别使用 java 和 shell 脚本，下载对应的 jar 包，并生成服务端和客户端的启动命令，然后启动客户端和服务端。</li>\n<li>arthas-core.jar 是服务端程序的启动入口类，会调用 <code>virtualMachine#attach</code> 到目标进程，并加载 arthas-agent.jar 作为 agent jar 包。</li>\n<li>arthas-agent.jar 既可以使用 premain 方式（在目标进程启动之前，通过 - agent 参数静态指定），也可以通过 agentmain 方式（在进程启动之后 attach 上去）。arthas-agent 会使用自定义的 classloader (<code>ArthasClassLoader</code>) 加载 arthas-core.jar 里面的 <code>com.taobao.arthas.core.config.Configure</code> 类以及 <code>com.taobao.arthas.core.server.ArthasBootstrap</code>。 同时程序运行的时候会使用 arthas-spy.jar。</li>\n<li>arthas-spy.jar 里面只包含 Spy 类，目的是为了将 Spy 类使用 <code>BootstrapClassLoader</code> 来加载，从而使目标进程的 java 应用可以访问 Spy 类。通过 ASM 修改字节码，可以将 Spy 类的方法 <code>ON_BEFORE_METHOD</code>， <code>ON_RETURN_METHOD</code> 等编织到目标类里面。Spy 类你可以简单理解为类似 spring aop 的 Advice，有前置方法，后置方法等。</li>\n<li>arthas-client.jar 是客户端程序，用来连接 arthas-core.jar 启动的服务端代码，使用 telnet 方式。一般由 arthas-boot.jar 和 as.sh 来负责启动。</li>\n</ol>\n<p>整体宏观模块调用图：</p>\n<p><img src=\"/images/2020/08/1596698216827.png\" alt=\"1596698216827\" loading=\"lazy\"></p>\n<p>模块描述：</p>\n<p><img src=\"/images/2020/08/1596616373228.png\" alt=\"1596616373228\" loading=\"lazy\"></p>\n<h3 id=\"核心类描述\"><a href=\"#核心类描述\" class=\"headerlink\" title=\"核心类描述\"></a>核心类描述</h3><p>核心类描述：</p>\n<p><img src=\"/images/2020/08/1596710846489.png\" alt=\"1596710846489\" loading=\"lazy\"></p>\n<p>核心类描述（精简版）</p>\n<p><img src=\"/images/2020/08/1596700025625.png\" alt=\"1596700025625\" loading=\"lazy\"></p>\n<h3 id=\"常用命令汇总\"><a href=\"#常用命令汇总\" class=\"headerlink\" title=\"常用命令汇总\"></a>常用命令汇总</h3><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvYXJ0aGFzL2lzc3Vlcy8xMDAz\">Arthas 常用命令汇总<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p><img src=\"/images/2020/08/1596701687793.png\" alt=\"1596701687793\" loading=\"lazy\"></p>\n","categories":["Java","Arthas"],"tags":["Java","Java诊断","Arthas"]},{"title":"为 GitLab 代码库配置 Specific Runner","url":"/2020/07/2020-07-25-%E4%B8%BAGitLab%E4%BB%A3%E7%A0%81%E5%BA%93%E9%85%8D%E7%BD%AESpecific%20Runner/","content":"<h3 id=\"添加-k8s-集群\"><a href=\"#添加-k8s-集群\" class=\"headerlink\" title=\"添加 k8s 集群\"></a>添加 k8s 集群</h3><p>单击<strong>添加现有集群</strong>选项卡，然后填写详细信息：</p>\n<ul>\n<li><p><strong>Kubernetes 集群名称</strong>（必填）- 您希望为<strong>集群指定</strong>的名称。</p>\n</li>\n<li><p><strong>环境范围</strong>（必需）-  <a href=\"index.md#setting-the-environment-scope-premium\">与</a>此集群<a href=\"index.md#setting-the-environment-scope-premium\">相关的环境</a>。</p>\n</li>\n<li><p><strong>API URL</strong>（必填）- 这是 GitLab 用于访问 Kubernetes API 的 URL。Kubernetes 公开了几个 API，我们希望所有 API 都具有通用的 “基本” URL，例如，<code>https://kubernetes.example.com</code> 而不是 <code>https://kubernetes.example.com/api/v1</code>。</p>\n<p>通过运行以下命令获取 API URL：</p>\n<pre class=\"language-none\"><code class=\"language-none\">kubectl cluster-info | grep 'Kubernetes master' | awk '/http/ {print $NF}'</code></pre>\n</li>\n<li><p><strong>CA 证书</strong>（必需）- 需要有效的 Kubernetes 证书才能对集群进行身份验证。我们将使用默认创建的证书。</p>\n<ul>\n<li><p>用列出秘密 <code>kubectl get secrets</code>，并命名类似  <code>default-token-xxxxx</code>。复制该令牌名称以在下面使用。</p>\n</li>\n<li><p>通过运行以下命令获取证书：</p>\n<pre class=\"language-none\"><code class=\"language-none\">kubectl get secret &lt;secret name&gt; -o jsonpath=\"{['data']['ca\\.crt']}\" | base64 --decode</code></pre>\n\n<p>注意：<strong>注意：</strong>  如果命令返回整个证书链，则需要在证书链 底部复制 <em>root ca</em> 证书。</p>\n</li>\n</ul>\n</li>\n<li><p><strong>令牌</strong> -GitLab 使用服务令牌对 Kubernetes 进行身份验证，该服务令牌的范围仅限于特定的 <code>namespace</code>。 <strong>使用的令牌应属于具有 cluster-admin 特权的服务帐户  。</strong>要创建此服务帐户：</p>\n<ol>\n<li><p>创建一个 <code>gitlab-admin-service-account.yaml</code> 包含内容的文件：</p>\n<pre class=\"language-none\"><code class=\"language-none\">apiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: gitlab-admin\n  namespace: kube-system\n---\napiVersion: rbac.authorization.k8s.io/v1beta1\nkind: ClusterRoleBinding\nmetadata:\n  name: gitlab-admin\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: cluster-admin\nsubjects:\n- kind: ServiceAccount\n  name: gitlab-admin\n  namespace: kube-system</code></pre>\n</li>\n<li><p>将服务帐户和群集角色绑定应用于您的群集：</p>\n<pre class=\"language-none\"><code class=\"language-none\">kubectl apply -f gitlab-admin-service-account.yaml</code></pre>\n\n<p>您将需要 <code>container.clusterRoleBindings.create</code> 许可权才能创建集群级角色。如果您没有此权限，则可以选择启用基本身份验证，然后 <code>kubectl apply</code> 以管理员身份运行  命令：</p>\n<pre class=\"language-none\"><code class=\"language-none\">kubectl apply -f gitlab-admin-service-account.yaml --username=admin --password=&lt;password&gt;</code></pre>\n\n<p>注意：<strong>注意：</strong>  可以打开基本身份验证，并可以使用 Google Cloud Console 获取密码凭据。</p>\n<p>输出：</p>\n<pre class=\"language-none\"><code class=\"language-none\">serviceaccount \"gitlab-admin\" created\nclusterrolebinding \"gitlab-admin\" created</code></pre>\n</li>\n<li><p>检索 <code>gitlab-admin</code> 服务帐户的令牌：</p>\n<pre class=\"language-none\"><code class=\"language-none\">kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | grep gitlab-admin | awk '{print $1}')</code></pre>\n\n<p>复制 <code>&lt;authentication_token&gt;</code> 输出中的值：</p>\n<pre class=\"language-none\"><code class=\"language-none\">Name:         gitlab-admin-token-b5zv4\nNamespace:    kube-system\nLabels:       &lt;none&gt;\nAnnotations:  kubernetes.io/service-account.name=gitlab-admin\n              kubernetes.io/service-account.uid=bcfe66ac-39be-11e8-97e8-026dce96b6e8\n\nType:  kubernetes.io/service-account-token\n\nData\n====\nca.crt:     1025 bytes\nnamespace:  11 bytes\ntoken:      &lt;authentication_token&gt;</code></pre>\n\n</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"配置-Specific-Runner\"><a href=\"#配置-Specific-Runner\" class=\"headerlink\" title=\"配置 Specific Runner\"></a>配置 Specific Runner</h3><p>在 GitLab 的 CI/CD 流程中具体执行任务的节点叫做 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmdpdGxhYi5jb20vcnVubmVyLw==\">runner<i class=\"fa fa-external-link-alt\"></i></span>。GitLab 中有两种类型的 runner：</p>\n<ul>\n<li><strong>Shared Runners</strong> 由 GitLab 管理员配置的公有 runner。多个项目公用。作为开发人员无需配置，可以直接使用。</li>\n<li><strong>Specific Runners</strong> 开发人员为每个代码库单独配置的专属 runner。只能执行所属代码库的任务。需要开发人员手动搭建。</li>\n</ul>\n<p>由于我厂的 GitLab 并没有配置任何 Shared Runner。所以只能选择在自己的台式机上手动搭建。</p>\n<h3 id=\"下载-runner-可执行文件\"><a href=\"#下载-runner-可执行文件\" class=\"headerlink\" title=\"下载 runner 可执行文件\"></a>下载 runner 可执行文件</h3><p>根据你的环境下载 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRsYWItcnVubmVyLWRvd25sb2Fkcy5zMy5hbWF6b25hd3MuY29tL2xhdGVzdC9iaW5hcmllcy9naXRsYWItcnVubmVyLXdpbmRvd3MtMzg2LmV4ZQ==\">x86<i class=\"fa fa-external-link-alt\"></i></span> 或者 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRsYWItcnVubmVyLWRvd25sb2Fkcy5zMy5hbWF6b25hd3MuY29tL2xhdGVzdC9iaW5hcmllcy9naXRsYWItcnVubmVyLXdpbmRvd3MtYW1kNjQuZXhl\">amd64<i class=\"fa fa-external-link-alt\"></i></span> 版本。</p>\n<p>创建 <code>D:\\GitLab-Runner</code> 目录，将刚刚下载好的文件复制到该目录并重命名为 <code>gitlab-runner.exe</code>。</p>\n<h3 id=\"获取配置信息\"><a href=\"#获取配置信息\" class=\"headerlink\" title=\"获取配置信息\"></a>获取配置信息</h3><p>进入代码库主页，依次点击 <code>Settings</code> =&gt; <code>CI / CD</code> =&gt; <code>Runners settings</code>。</p>\n<p><img src=\"/images/2020/07/1595562311495.png\" alt=\"1595562311495\" loading=\"lazy\"></p>\n<p>这里展开的信息中有两个字段需要我们记下来。分别是一个 URL 和一个 Token。</p>\n<p><img src=\"/images/2020/07/1595562367478.png\" alt=\"1595562367478\" loading=\"lazy\"></p>\n<h3 id=\"注册-runner\"><a href=\"#注册-runner\" class=\"headerlink\" title=\"注册 runner\"></a>注册 runner</h3><h4 id=\"Linux\"><a href=\"#Linux\" class=\"headerlink\" title=\"Linux\"></a>Linux</h4><pre class=\"language-none\"><code class=\"language-none\">k exec -it runner-gitlab-runner-74cf6f794b-22vln gitlab-runner register -n gitlab-managed-apps</code></pre>\n\n<h4 id=\"Windows\"><a href=\"#Windows\" class=\"headerlink\" title=\"Windows\"></a>Windows</h4><p>进入 <code>D:\\GitLab-Runner</code> 目录执行命令：</p>\n<pre class=\"language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">./gitlab<span class=\"token punctuation\">-</span>runner.exe register</code></pre>\n\n<h4 id=\"进行注册\"><a href=\"#进行注册\" class=\"headerlink\" title=\"进行注册\"></a>进行注册</h4><p>执行完后会进入一个交互式的配置流程，你需要回答以下问题：</p>\n<ul>\n<li><code>Please enter the gitlab-ci coordinator URL</code>：填入上一步获取的 URL</li>\n<li><code>Please enter the gitlab-ci token for this runner</code>：填入上一步获取的 Token</li>\n<li><code>Please enter the gitlab-ci description for this runner</code>：给你的 runner 起一个名字</li>\n<li><code>Please enter the gitlab-ci tags for this runner (comma separated)</code>：GitLab 允许我们给 runner 设置标签，设置好后该 runner 只会执行拥有相同标签的任务。由于我们的 runner 只为我们自己的代码库服务，所以此处不做过多配置。留空即可。</li>\n<li><code>Whether to lock Runner to current project</code>：该 runner 是否应该锁定在当前项目上。由于我们是自己用，选 <code>true</code> 即可。</li>\n<li><code>Please enter the executor: ssh, docker+machine, docker-ssh+machine, kubernetes, docker, parallels, virtualbox, docker-ssh, shell: docker</code>：选择任务执行环境，我们选择最简单的 <code>shell</code>。</li>\n</ul>\n<h3 id=\"验证服务已启动\"><a href=\"#验证服务已启动\" class=\"headerlink\" title=\"验证服务已启动\"></a>验证服务已启动</h3><p>进入代码库主页，依次点击 <code>Settings</code> =&gt; <code>CI / CD</code> =&gt; <code>Runners settings</code>。</p>\n<p><img src=\"/images/2020/07/1595562200358.png\" alt=\"1595562200358\" loading=\"lazy\"></p>\n","categories":["Git"],"tags":["Git"]},{"title":"为 Github 项目说明添加优美标签","url":"/2020/07/2020-07-30-%E4%B8%BAGithub%E9%A1%B9%E7%9B%AE%E8%AF%B4%E6%98%8E%E6%B7%BB%E5%8A%A0%E4%BC%98%E7%BE%8E%E6%A0%87%E7%AD%BE/","content":"<p>大家在 Github 上看项目的时候，是不是经常在项目介绍 README.md 里看到这种高大上的标签：</p>\n<p> <img src=\"/images/2020/07/1596161123283.png\" alt=\"1596161123283\" loading=\"lazy\"></p>\n<p><strong>接下来我们来制作这种标签</strong>。</p>\n<h3 id=\"标签网站\"><a href=\"#标签网站\" class=\"headerlink\" title=\"标签网站\"></a>标签网站</h3><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaGllbGRzLmlvLw==\">https://shields.io/<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<h3 id=\"制作标签\"><a href=\"#制作标签\" class=\"headerlink\" title=\"制作标签\"></a>制作标签</h3><p>下拉，找到 Your Badge：</p>\n<p><img src=\"/images/2020/07/1596160368983.png\" alt=\"1596160368983\" loading=\"lazy\"></p>\n<p>填写 <strong>subject、status、color</strong> 三个字段，点击 <strong>Make Badge</strong> 生成标签：</p>\n<p><img src=\"/images/2020/07/1596160688666.png\" alt=\"1596160688666\" loading=\"lazy\"></p>\n<p>生成结果：</p>\n<p><img src=\"/images/2020/07/1596160441795.png\" alt=\"1596160441795\" loading=\"lazy\"></p>\n<p>复制标签地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pbWcuc2hpZWxkcy5pby9iYWRnZS9hdXRob3ItSnVlZWUtZ3JlZW4=\">https://img.shields.io/badge/author-Jueee-green<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>在 README.md 里添加如下代码：</p>\n<pre class=\"language-html\" data-language=\"html\"><code class=\"language-html\">![](https://img.shields.io/badge/author-Jueee-green)</code></pre>\n\n<p>可以看到如下显示：</p>\n<p><img src=\"https://img.shields.io/badge/author-Jueee-green\" loading=\"lazy\"></p>\n<p>这些图片 url 是有规律的：<code>文字-文字-颜色</code>。</p>\n<h3 id=\"组合标签\"><a href=\"#组合标签\" class=\"headerlink\" title=\"组合标签\"></a>组合标签</h3><pre class=\"language-none\"><code class=\"language-none\">![](https://img.shields.io/badge/build-success-green) ![](https://img.shields.io/badge/version-1.0-orange) ![](https://img.shields.io/badge/author-Jueee-blue)</code></pre>\n\n<p>效果如下：</p>\n<p><img src=\"/images/2020/07/1596162573650.png\" alt=\"1596162573650\" loading=\"lazy\"></p>\n<h3 id=\"添加点击事件\"><a href=\"#添加点击事件\" class=\"headerlink\" title=\"添加点击事件\"></a>添加点击事件</h3><p>为标签添加点击事件，代码如下：</p>\n<pre class=\"language-none\"><code class=\"language-none\">[![](https://img.shields.io/badge/author-Jueee-green)](点击跳转的链接)</code></pre>\n\n<h4 id=\"为啥这么写？\"><a href=\"#为啥这么写？\" class=\"headerlink\" title=\"为啥这么写？\"></a>为啥这么写？</h4><p>我们知道，MarkDown 中<strong>链接</strong>显示语法为</p>\n<pre class=\"language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token punctuation\">[</span>链接名称<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>链接地址<span class=\"token punctuation\">)</span></code></pre>\n\n<p><strong>图片</strong>显示语法为：</p>\n<pre class=\"language-css\" data-language=\"css\"><code class=\"language-css\">![图片名称]<span class=\"token punctuation\">(</span>图片地址<span class=\"token punctuation\">)</span></code></pre>\n\n<p>那么带链接的图片就是将两者语法嵌套就行了，即 <code>[链接名称]</code> 部分变成图片显示语法，语法变成：</p>\n<pre class=\"language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token punctuation\">[</span><span class=\"token operator\">!</span><span class=\"token punctuation\">[</span>图片名称<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>图片地址<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>链接地址<span class=\"token punctuation\">)</span></code></pre>","categories":["Blog"],"tags":["Blog","HTML"]},{"title":"迁移 VMware 虚拟机至微软 Hyper-V","url":"/2020/07/2020-07-31-%E8%BF%81%E7%A7%BBVMware%E8%99%9A%E6%8B%9F%E6%9C%BA%E8%87%B3%E5%BE%AE%E8%BD%AFHyper-V/","content":"<h3 id=\"Hyper-V-虚拟机\"><a href=\"#Hyper-V-虚拟机\" class=\"headerlink\" title=\"Hyper-V 虚拟机\"></a>Hyper-V 虚拟机</h3><p>Hyper-V 是微软的一款虚拟化产品，是微软第一个采用类似 Vmware ESXi 和 Citrix Xen 的基于 hypervisor 的技术。</p>\n<h3 id=\"开启-Hyper-V\"><a href=\"#开启-Hyper-V\" class=\"headerlink\" title=\"开启 Hyper-V\"></a>开启 Hyper-V</h3><p>进入电脑的控制面板 -&gt; 程序 -&gt; 启用或关闭 Windows 功能 -&gt; 把 Hyper-v 勾上，启用后电脑会重启。</p>\n<p><img src=\"/images/2020/07/1595925972986.png\" alt=\"1595925972986\" loading=\"lazy\"></p>\n<h3 id=\"迁移VMware虚拟机\"><a href=\"#迁移VMware虚拟机\" class=\"headerlink\" title=\"迁移VMware虚拟机\"></a>迁移 VMware 虚拟机</h3><h4 id=\"使用微软MVMC工具实现迁移\"><a href=\"#使用微软MVMC工具实现迁移\" class=\"headerlink\" title=\"使用微软MVMC工具实现迁移\"></a>使用微软 MVMC 工具实现迁移</h4><p>MVMC 工具可以直接由微软官网下载</p>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5taWNyb3NvZnQuY29tL2VuLXVzL2Rvd25sb2FkL2RldGFpbHMuYXNweD9pZD00MjQ5Nw==\">下载链接<i class=\"fa fa-external-link-alt\"></i></span></p>\n</blockquote>\n<p>下载完成后，将安装文件拷贝到要安装 MVMC 的服务器上。</p>\n<h4 id=\"安装StarWind-V2V-Converter\"><a href=\"#安装StarWind-V2V-Converter\" class=\"headerlink\" title=\"安装StarWind V2V Converter\"></a>安装 StarWind V2V Converter</h4><p>下载 StarWind V2V Converter 安装文件并执行安装，安装过程按照引导进行即可。</p>\n<p>安装完成后，打开 <code>StarWind V2V Image Converter</code>。</p>\n<p>选择 Local file：</p>\n<p><img src=\"/images/2020/07/1596174987682.png\" alt=\"1596174987682\" loading=\"lazy\"></p>\n<p>Next，选择 VMware 虚拟机的 vmdk 文件：</p>\n<p><img src=\"/images/2020/07/1596175078239.png\" alt=\"1596175078239\" loading=\"lazy\"></p>\n<p>再点击 Next，等待转换完成，即可。</p>\n<p><img src=\"/images/2020/07/1596174902166.png\" alt=\"1596174902166\" loading=\"lazy\"></p>\n<h4 id=\"导入-vhd-文件\"><a href=\"#导入-vhd-文件\" class=\"headerlink\" title=\"导入 vhd 文件\"></a>导入 vhd 文件</h4><p>打开 Hyper-V，新建虚拟机。</p>\n<p>指定名称和存储位置。</p>\n<p><img src=\"/images/2020/07/1596175210979.png\" alt=\"1596175210979\" loading=\"lazy\"></p>\n<p>指定虚拟机的代数，选择第一代。</p>\n<blockquote>\n<p>Windows10 Hyper-V 支持的虚拟机文件格式有两代，第一代的文件后缀为.vhd；第二代的文件后缀为.vhdx。</p>\n</blockquote>\n<p><img src=\"/images/2020/07/1596175283830.png\" alt=\"1596175283830\" loading=\"lazy\"></p>\n<p>分配内存：</p>\n<p><img src=\"/images/2020/07/1596175352095.png\" alt=\"1596175352095\" loading=\"lazy\"></p>\n<p>配置网络：</p>\n<p><img src=\"/images/2020/07/1596175380895.png\" alt=\"1596175380895\" loading=\"lazy\"></p>\n<p>选择指定刚刚生成的.vhd 文件：</p>\n<p><img src=\"/images/2020/07/1596175428931.png\" alt=\"1596175428931\" loading=\"lazy\"></p>\n<p>转换导入成功，接下来，虚拟机就可以运行了。</p>\n<h3 id=\"Hyper-v虚拟机联网配置\"><a href=\"#Hyper-v虚拟机联网配置\" class=\"headerlink\" title=\"Hyper-v虚拟机联网配置\"></a>Hyper-v 虚拟机联网配置</h3><h4 id=\"新建虚拟交换机\"><a href=\"#新建虚拟交换机\" class=\"headerlink\" title=\"新建虚拟交换机\"></a>新建虚拟交换机</h4><p>选择：</p>\n<p><img src=\"/images/2020/07/1596175872059.png\" alt=\"1596175872059\" loading=\"lazy\"></p>\n<p>输入交换机名称和选择外部网络，可以看到外部网络的下拉框的选项，这里选择当前计算机的联网方式。</p>\n<p>如何知道当前使用什么方式联网呢？--- 查看网络适配器。</p>\n<p><img src=\"/images/2020/07/1596176082370.png\" alt=\"1596176082370\" loading=\"lazy\"></p>\n<p><strong>如果主机切换了联网方式，只要去虚拟机里改下对应的下拉选项即可。</strong></p>\n<p><img src=\"/images/2020/07/1596175973333.png\" alt=\"1596175973333\" loading=\"lazy\"></p>\n<p>点击确定，建立虚拟交换机。</p>\n<h4 id=\"更改虚拟机的网络适配器\"><a href=\"#更改虚拟机的网络适配器\" class=\"headerlink\" title=\"更改虚拟机的网络适配器\"></a>更改虚拟机的网络适配器</h4><p>右键 --- 设置 --- 网络适配器：</p>\n<p><img src=\"/images/2020/07/1596176189357.png\" alt=\"1596176189357\" loading=\"lazy\"></p>\n<h3 id=\"debian-设置网络\"><a href=\"#debian-设置网络\" class=\"headerlink\" title=\"debian 设置网络\"></a>debian 设置网络</h3><p>问题描述：</p>\n<p>配置完 /etc/networking/interfaces 后，使用 /etc/init.d/networking restart 出现启动失败，根据提示输入 systemctl status networking.service 发现不认识 /etc/networking/interfaces 中配置的虚拟网卡 (或者是因为虚拟机的重新移动导致的设备不匹配问题等)</p>\n<p>解决方法：</p>\n<p>首先可以查看 etc/udev/rules.d/70-persistent-net.rules 是否存在，如果存在，则删除 rm etc/udev/rules.d/70-persistent-net.rules，重启即可</p>\n<p>如果 etc/udev/rules.d/70-persistent-net.rules 不存在，则 ifconfig -a 查看全部网卡，修改 /etc/networking/interfaces 中的网卡名和 ifconfig -a 命令显示的网卡名匹配，重启网络即可。</p>\n","categories":["软件","Windows"],"tags":["软件"]},{"title":"Arthas 之源码简要分析","url":"/2020/08/2020-08-03-Arthas%E4%B9%8B%E6%BA%90%E7%A0%81%E7%AE%80%E8%A6%81%E5%88%86%E6%9E%90/","content":"<h3 id=\"启动模块（boot）\"><a href=\"#启动模块（boot）\" class=\"headerlink\" title=\"启动模块（boot）\"></a>启动模块（boot）</h3><h4 id=\"启动-Arthas\"><a href=\"#启动-Arthas\" class=\"headerlink\" title=\"启动 Arthas\"></a>启动 Arthas</h4><pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">wget</span> https://alibaba.github.io/arthas/arthas-boot.jar\njava -jar arthas-boot.jar</code></pre>\n\n<p><strong>模块代码</strong>：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvYXJ0aGFzL3RyZWUvbWFzdGVyL2Jvb3Q=\">GitHub Code by arthas-boot<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h4 id=\"模块入口\"><a href=\"#模块入口\" class=\"headerlink\" title=\"模块入口\"></a>模块入口</h4><p>在 arthas-boot 模块的 pom.xml 文件中，找到启动类：</p>\n<pre class=\"language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>manifest</span><span class=\"token punctuation\">&gt;</span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mainClass</span><span class=\"token punctuation\">&gt;</span></span>com.taobao.arthas.boot.Bootstrap<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>mainClass</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>manifest</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n\n<p><code>com.taobao.arthas.boot.Bootstrap.main()</code> 方法：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvYXJ0aGFzL2Jsb2IvbWFzdGVyL2Jvb3Qvc3JjL21haW4vamF2YS9jb20vdGFvYmFvL2FydGhhcy9ib290L0Jvb3RzdHJhcC5qYXZhI0wyNzM=\">GitHub Code by Bootstrap.java<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h4 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h4><h5 id=\"参数解析\"><a href=\"#参数解析\" class=\"headerlink\" title=\"参数解析\"></a>参数解析</h5><p>使用了阿里开源的组件 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvY2xp\">cli<i class=\"fa fa-external-link-alt\"></i></span>，对参数进行了解析。</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">CLI</span> cli <span class=\"token operator\">=</span> <span class=\"token class-name\">CLIConfigurator</span><span class=\"token punctuation\">.</span><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Bootstrap</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">CommandLine</span> commandLine <span class=\"token operator\">=</span> cli<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token class-name\">CLIConfigurator</span><span class=\"token punctuation\">.</span><span class=\"token function\">inject</span><span class=\"token punctuation\">(</span>commandLine<span class=\"token punctuation\">,</span> bootstrap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">usage</span><span class=\"token punctuation\">(</span>cli<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<h5 id=\"参数处理\"><a href=\"#参数处理\" class=\"headerlink\" title=\"参数处理\"></a>参数处理</h5><p>对传入的参数进行处理。</p>\n<p>如调整日志级别，设置 RepoMirror 地址，Java 版本，telnet/http 的端口检查。</p>\n<h5 id=\"检查-pid\"><a href=\"#检查-pid\" class=\"headerlink\" title=\"检查 pid\"></a>检查 pid</h5><p>如果在传入参数中没有 pid，则会调用本地 jps 命令，列出 java 进程（当然会排除本身）</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">long</span> pid <span class=\"token operator\">=</span> bootstrap<span class=\"token punctuation\">.</span><span class=\"token function\">getPid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// select pid</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pid <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n\t\tpid <span class=\"token operator\">=</span> <span class=\"token class-name\">ProcessUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span>bootstrap<span class=\"token punctuation\">.</span><span class=\"token function\">isVerbose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> telnetPortPid<span class=\"token punctuation\">,</span> bootstrap<span class=\"token punctuation\">.</span><span class=\"token function\">getSelect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InputMismatchException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Please input an integer to select pid.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pid <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Please select an available pid.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvYXJ0aGFzL2Jsb2IvbWFzdGVyL2Jvb3Qvc3JjL21haW4vamF2YS9jb20vdGFvYmFvL2FydGhhcy9ib290L1Byb2Nlc3NVdGlscy5qYXZhI0wxMjM=\">GitHub Code by ProcessUtils.java<i class=\"fa fa-external-link-alt\"></i></span></p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Long</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">listProcessByJps</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">boolean</span> v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Long</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedHashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Long</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token class-name\">String</span> jps <span class=\"token operator\">=</span> <span class=\"token string\">\"jps\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">File</span> jpsFile <span class=\"token operator\">=</span> <span class=\"token function\">findJps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>jpsFile <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tjps <span class=\"token operator\">=</span> jpsFile<span class=\"token punctuation\">.</span><span class=\"token function\">getAbsolutePath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token class-name\">AnsiLog</span><span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Try use jps to lis java process, jps: \"</span> <span class=\"token operator\">+</span> jps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> command <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tcommand <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span> jps<span class=\"token punctuation\">,</span> <span class=\"token string\">\"-v\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"-l\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\tcommand <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span> jps<span class=\"token punctuation\">,</span> <span class=\"token string\">\"-l\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> lines <span class=\"token operator\">=</span> <span class=\"token class-name\">ExecutingCommand</span><span class=\"token punctuation\">.</span><span class=\"token function\">runNative</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token class-name\">AnsiLog</span><span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jps result: \"</span> <span class=\"token operator\">+</span> lines<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">long</span> currentPid <span class=\"token operator\">=</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseLong</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PidUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentPid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> line <span class=\"token operator\">:</span> lines<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> strings <span class=\"token operator\">=</span> line<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\\\s+\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>strings<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">long</span> pid <span class=\"token operator\">=</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseLong</span><span class=\"token punctuation\">(</span>strings<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pid <span class=\"token operator\">==</span> currentPid<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>strings<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&gt;=</span> <span class=\"token number\">2</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">isJpsProcess</span><span class=\"token punctuation\">(</span>strings<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// skip jps</span>\n\t\t\t\t<span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\n\t\t\tresult<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>pid<span class=\"token punctuation\">,</span> line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token comment\">// https://github.com/alibaba/arthas/issues/970</span>\n\t\t\t<span class=\"token comment\">// ignore</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<h5 id=\"启动服务端\"><a href=\"#启动服务端\" class=\"headerlink\" title=\"启动服务端\"></a>启动服务端</h5><p>进入主逻辑，会在用户目录下建立 <code>.arthas</code> 目录，同时下载 <code>arthas-core</code> 和 <code>arthas-agent</code> 等 lib 文件，然后启动客户端和服务端。</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>telnetPortPid <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> pid <span class=\"token operator\">==</span> telnetPortPid<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token class-name\">AnsiLog</span><span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The target process already listen port {}, skip attach.\"</span><span class=\"token punctuation\">,</span> bootstrap<span class=\"token punctuation\">.</span><span class=\"token function\">getTelnetPort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">//double check telnet port and pid before attach</span>\n\ttelnetPortPid <span class=\"token operator\">=</span> <span class=\"token function\">findProcessByTelnetClient</span><span class=\"token punctuation\">(</span>arthasHomeDir<span class=\"token punctuation\">.</span><span class=\"token function\">getAbsolutePath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> bootstrap<span class=\"token punctuation\">.</span><span class=\"token function\">getTelnetPort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">checkTelnetPortPid</span><span class=\"token punctuation\">(</span>bootstrap<span class=\"token punctuation\">,</span> telnetPortPid<span class=\"token punctuation\">,</span> pid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// start arthas-core.jar</span>\n\t<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> attachArgs <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tattachArgs<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-jar\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tattachArgs<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span>arthasHomeDir<span class=\"token punctuation\">,</span> <span class=\"token string\">\"arthas-core.jar\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAbsolutePath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tattachArgs<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-pid\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tattachArgs<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span> <span class=\"token operator\">+</span> pid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tattachArgs<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-target-ip\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tattachArgs<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>bootstrap<span class=\"token punctuation\">.</span><span class=\"token function\">getTargetIp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tattachArgs<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-telnet-port\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tattachArgs<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span> <span class=\"token operator\">+</span> bootstrap<span class=\"token punctuation\">.</span><span class=\"token function\">getTelnetPort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tattachArgs<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-http-port\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tattachArgs<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span> <span class=\"token operator\">+</span> bootstrap<span class=\"token punctuation\">.</span><span class=\"token function\">getHttpPort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tattachArgs<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-core\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tattachArgs<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span>arthasHomeDir<span class=\"token punctuation\">,</span> <span class=\"token string\">\"arthas-core.jar\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAbsolutePath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tattachArgs<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-agent\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tattachArgs<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span>arthasHomeDir<span class=\"token punctuation\">,</span> <span class=\"token string\">\"arthas-agent.jar\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAbsolutePath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bootstrap<span class=\"token punctuation\">.</span><span class=\"token function\">getSessionTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tattachArgs<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-session-timeout\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tattachArgs<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span> <span class=\"token operator\">+</span> bootstrap<span class=\"token punctuation\">.</span><span class=\"token function\">getSessionTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bootstrap<span class=\"token punctuation\">.</span><span class=\"token function\">getTunnelServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tattachArgs<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-tunnel-server\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tattachArgs<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>bootstrap<span class=\"token punctuation\">.</span><span class=\"token function\">getTunnelServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bootstrap<span class=\"token punctuation\">.</span><span class=\"token function\">getAgentId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tattachArgs<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-agent-id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tattachArgs<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>bootstrap<span class=\"token punctuation\">.</span><span class=\"token function\">getAgentId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bootstrap<span class=\"token punctuation\">.</span><span class=\"token function\">getStatUrl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tattachArgs<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-stat-url\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tattachArgs<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>bootstrap<span class=\"token punctuation\">.</span><span class=\"token function\">getStatUrl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token class-name\">AnsiLog</span><span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Try to attach process \"</span> <span class=\"token operator\">+</span> pid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">AnsiLog</span><span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Start arthas-core.jar args: \"</span> <span class=\"token operator\">+</span> attachArgs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 启动服务端</span>\n\t<span class=\"token class-name\">ProcessUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">startArthasCore</span><span class=\"token punctuation\">(</span>pid<span class=\"token punctuation\">,</span> attachArgs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token class-name\">AnsiLog</span><span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Attach process {} success.\"</span><span class=\"token punctuation\">,</span> pid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<h5 id=\"启动客户端\"><a href=\"#启动客户端\" class=\"headerlink\" title=\"启动客户端\"></a>启动客户端</h5><p>最后通过反射的方式来启动字符客户端，等待用户输入指令。</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">URLClassLoader</span> classLoader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URLClassLoader</span><span class=\"token punctuation\">(</span>\n\t\t\t\t<span class=\"token keyword\">new</span> URL<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span>arthasHomeDir<span class=\"token punctuation\">,</span> <span class=\"token string\">\"arthas-client.jar\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toURI</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toURL</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">&gt;</span></span> telnetConsoleClas <span class=\"token operator\">=</span> classLoader<span class=\"token punctuation\">.</span><span class=\"token function\">loadClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.taobao.arthas.client.TelnetConsole\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Method</span> mainMethod <span class=\"token operator\">=</span> telnetConsoleClas<span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"main\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n<h3 id=\"服务端模块（core）\"><a href=\"#服务端模块（core）\" class=\"headerlink\" title=\"服务端模块（core）\"></a>服务端模块（core）</h3><p><strong>模块代码</strong>：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvYXJ0aGFzL3RyZWUvbWFzdGVyL2NvcmU=\">GitHub Code by arthas-core<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h4 id=\"模块入口-1\"><a href=\"#模块入口-1\" class=\"headerlink\" title=\"模块入口\"></a>模块入口</h4><p>在 arthas-core 模块的 pom.xml 中，找到启动类：</p>\n<pre class=\"language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>transformers</span><span class=\"token punctuation\">&gt;</span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>transformer</span> <span class=\"token attr-name\">implementation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>org.apache.maven.plugins.shade.resource.ManifestResourceTransformer<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mainClass</span><span class=\"token punctuation\">&gt;</span></span>com.taobao.arthas.core.Arthas<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>mainClass</span><span class=\"token punctuation\">&gt;</span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>transformer</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>transformers</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n\n<p><code>com.taobao.arthas.core.Arthas.main()</code> 方法：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvYXJ0aGFzL2Jsb2IvbWFzdGVyL2NvcmUvc3JjL21haW4vamF2YS9jb20vdGFvYmFvL2FydGhhcy9jb3JlL0FydGhhcy5qYXZh\">GitHub Code by Arthas.java<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h4 id=\"源码分析-1\"><a href=\"#源码分析-1\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h4><h5 id=\"连接进程\"><a href=\"#连接进程\" class=\"headerlink\" title=\"连接进程\"></a>连接进程</h5><p>使用 <code>VirutalMachine.attach(pid)</code> 来连接进程，同时使用 <code>virtualMachine.loadAgent</code> 加载自定义的 agent.</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">attachAgent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Configure</span> configure<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// 省略部分代码</span>\n\t<span class=\"token comment\">// 连接进程</span>\n\t\t\tvirtualMachine <span class=\"token operator\">=</span> <span class=\"token class-name\">VirtualMachine</span><span class=\"token punctuation\">.</span><span class=\"token function\">attach</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span> <span class=\"token operator\">+</span> configure<span class=\"token punctuation\">.</span><span class=\"token function\">getJavaPid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n\t<span class=\"token comment\">// 省略部分代码</span>\n\t<span class=\"token comment\">// 动态加载Agent</span>\n\t\tvirtualMachine<span class=\"token punctuation\">.</span><span class=\"token function\">loadAgent</span><span class=\"token punctuation\">(</span>arthasAgentPath<span class=\"token punctuation\">,</span>\n\t\t\t\tconfigure<span class=\"token punctuation\">.</span><span class=\"token function\">getArthasCore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\";\"</span> <span class=\"token operator\">+</span> configure<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<h3 id=\"JavaAgent代理（agent）\"><a href=\"#JavaAgent代理（agent）\" class=\"headerlink\" title=\"JavaAgent代理（agent）\"></a>JavaAgent 代理（agent）</h3><p><strong>模块代码</strong>：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvYXJ0aGFzL3RyZWUvbWFzdGVyL2FnZW50\">GitHub Code by arthas-agent<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h4 id=\"模块入口-2\"><a href=\"#模块入口-2\" class=\"headerlink\" title=\"模块入口\"></a>模块入口</h4><p>在 arthas-core 模块的 pom.xml 中，找到启动类：</p>\n<pre class=\"language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>manifestEntries</span><span class=\"token punctuation\">&gt;</span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Premain-Class</span><span class=\"token punctuation\">&gt;</span></span>com.taobao.arthas.agent334.AgentBootstrap<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Premain-Class</span><span class=\"token punctuation\">&gt;</span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Agent-Class</span><span class=\"token punctuation\">&gt;</span></span>com.taobao.arthas.agent334.AgentBootstrap<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Agent-Class</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>manifestEntries</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n\n<p><code>com.taobao.arthas.agent334.AgentBootstrap.main()</code> 方法：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvYXJ0aGFzL2Jsb2IvbWFzdGVyL2FnZW50L3NyYy9tYWluL2phdmEvY29tL3Rhb2Jhby9hcnRoYXMvYWdlbnQzMzQvQWdlbnRCb290c3RyYXAuamF2YQ==\">GitHub Code by AgentBootstrap.java<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h4 id=\"源码分析-2\"><a href=\"#源码分析-2\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h4><p><code>main()</code> 方法中对于 <code>arthas-spy</code>(简单理解为勾子类，类似于 spring aop 的前置方法，后置方法) 进行了加载。</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">final</span> <span class=\"token class-name\">ClassLoader</span> agentLoader <span class=\"token operator\">=</span> <span class=\"token function\">getClassLoader</span><span class=\"token punctuation\">(</span>inst<span class=\"token punctuation\">,</span> arthasCoreJarFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n<p>将 spyJar 添加到了 BootstrapClassLoader (启动类加载器)，优先加载启动类加载器，spy 可以在各个 ClassLoader 中使用。</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">ClassLoader</span> <span class=\"token function\">getClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Instrumentation</span> inst<span class=\"token punctuation\">,</span> <span class=\"token class-name\">File</span> arthasCoreJarFile<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Throwable</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// 构造自定义的类加载器，尽量减少Arthas对现有工程的侵蚀</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">loadOrDefineClassLoader</span><span class=\"token punctuation\">(</span>arthasCoreJarFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<p>异步调用 bind () 方法，启动服务端，监听端口，和客户端进行通讯。</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Thread</span> bindingThread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>inst<span class=\"token punctuation\">,</span> agentLoader<span class=\"token punctuation\">,</span> agentArgs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> throwable<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tthrowable<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span>ps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n\n","categories":["Java","Arthas"],"tags":["Java","Java诊断","Arthas"]},{"title":"搭建 hexo+github+next 主题博客","url":"/2020/08/2020-08-07-%E6%90%AD%E5%BB%BAhexo+github+next%E4%B8%BB%E9%A2%98%E5%8D%9A%E5%AE%A2/","content":"<h3 id=\"博客介绍\"><a href=\"#博客介绍\" class=\"headerlink\" title=\"博客介绍\"></a>博客介绍</h3><p>博客预览地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly90aGVtZS1uZXh0LmpzLm9yZy8=\">https://theme-next.js.org/<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h3 id=\"搭建博客\"><a href=\"#搭建博客\" class=\"headerlink\" title=\"搭建博客\"></a>搭建博客</h3><p>GitHub：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL25leHQtdGhlbWUvdGhlbWUtbmV4dC1kb2Nz\">https://github.com/next-theme/theme-next-docs<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>在本地安装：</p>\n<pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token function\">git</span> clone https://github.com/next-theme/theme-next-docs\n<span class=\"token builtin class-name\">cd</span> theme-next-docs\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span></code></pre>\n\n<p>生成：</p>\n<pre class=\"language-none\"><code class=\"language-none\">npx hexo generate</code></pre>\n\n<p>运行：</p>\n<pre class=\"language-none\"><code class=\"language-none\">npx hexo server</code></pre>\n\n<h3 id=\"博客主题\"><a href=\"#博客主题\" class=\"headerlink\" title=\"博客主题\"></a>博客主题</h3><p>GitHub：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL25leHQtdGhlbWUvaGV4by10aGVtZS1uZXh0\">https://github.com/next-theme/hexo-theme-next<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h3 id=\"发布到github-io\"><a href=\"#发布到github-io\" class=\"headerlink\" title=\"发布到github.io\"></a>发布到 github.io</h3><p>在 hexo 下的_config.yml 文件中配置：</p>\n<pre class=\"language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">deploy</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> git\n  <span class=\"token key atrule\">repository</span><span class=\"token punctuation\">:</span> git@github.com<span class=\"token punctuation\">:</span>Jueee/jueee.github.io.git\n  <span class=\"token key atrule\">branch</span><span class=\"token punctuation\">:</span> master</code></pre>\n\n<p>安装插件：</p>\n<pre class=\"language-none\"><code class=\"language-none\">npm install hexo-deployer-git --save</code></pre>\n\n<p>打开你的 git bash，输入 <code>hexo d</code> 就会将本次有改动的代码全部提交，没有改动的不会：</p>\n<pre class=\"language-none\"><code class=\"language-none\">$ npx hexo g -d</code></pre>\n\n<p>【注】部署这个命令一定要用 git bash，否则会提示 <code>Permission denied (publickey).</code></p>\n<p>此时，会在项目中生成 <code>.deploy_git</code> 文件夹。</p>\n<p>打开 git bash，切换到 hexo/.deploy_git，执行</p>\n<pre class=\"language-none\"><code class=\"language-none\">git init</code></pre>\n\n<p>再绑定远程仓库</p>\n<pre class=\"language-none\"><code class=\"language-none\">git remote add origin git@github.com:jueee/jueee.github.io.git</code></pre>\n\n<p>回到 cmd 命令行</p>\n<pre class=\"language-none\"><code class=\"language-none\">$ npx hexo g -d</code></pre>\n\n<p>搞定了，成功提交了正确的博客内容。</p>\n<h3 id=\"常用hexo命令\"><a href=\"#常用hexo命令\" class=\"headerlink\" title=\"常用hexo命令\"></a>常用 hexo 命令</h3><p>常见命令</p>\n<pre class=\"language-none\"><code class=\"language-none\">hexo new \"postName\" #新建文章\nhexo new page \"pageName\" #新建页面\nhexo generate #生成静态页面至public目录\nhexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）\nhexo deploy #部署到GitHub\nhexo help  # 查看帮助\nhexo version  #查看Hexo的版本</code></pre>\n\n<p>缩写：</p>\n<pre class=\"language-none\"><code class=\"language-none\">hexo n == hexo new\nhexo g == hexo generate\nhexo s == hexo server\nhexo d == hexo deploy</code></pre>\n\n<p>组合命令：</p>\n<pre class=\"language-none\"><code class=\"language-none\">hexo s -g #生成并本地预览\nhexo d -g #生成并上传</code></pre>\n\n<h3 id=\"问题处理\"><a href=\"#问题处理\" class=\"headerlink\" title=\"问题处理\"></a>问题处理</h3><h4 id=\"问题一：\"><a href=\"#问题一：\" class=\"headerlink\" title=\"问题一：\"></a>问题一：</h4><p><img src=\"/images/2020/08/image-20200821165728975.png\" alt=\"image-20200821165728975\" loading=\"lazy\"></p>\n<p>解决方法：<br>配置 git 环境变量，将 <code>C:\\Program Files\\Git\\cmd</code>（具体根据 git 安装目录）添加到系统变量 path 中</p>\n<h4 id=\"问题二：\"><a href=\"#问题二：\" class=\"headerlink\" title=\"问题二：\"></a>问题二：</h4><pre class=\"language-none\"><code class=\"language-none\">PS E:\\code\\GitHub\\Jueee\\jueee-blog&gt; npx hexo clean\n(node:44956) ExperimentalWarning: The fs.promises API is experimental\nERROR { err:\n   E:\\code\\GitHub\\Jueee\\jueee-blog\\node_modules\\hexo-theme-next\\package.json:2\n     \"_from\": \"hexo-theme-next@8.0.0-rc.5\",</code></pre>\n\n<p>查看 node 版本</p>\n<pre class=\"language-none\"><code class=\"language-none\">node -v\nv10.16.0\nnpm -v\n6.9.0</code></pre>\n\n<p>需要升级 node 到最新版。</p>\n<p>下载地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ub2RlanMub3JnL3poLWNuL2Rvd25sb2FkLw==\">https://nodejs.org/zh-cn/download/<i class=\"fa fa-external-link-alt\"></i></span></p>\n","categories":["Blog"],"tags":["Blog","Node.js"]},{"title":"Arthas 之 jad 反编译原理","url":"/2020/08/2020-08-04-Arthas%E4%B9%8Bjad%E5%8F%8D%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/","content":"<h3 id=\"jad-命令介绍\"><a href=\"#jad-命令介绍\" class=\"headerlink\" title=\"jad 命令介绍\"></a>jad 命令介绍</h3><p>jad 即 java decompiler，把 JVM 已加载类的字节码反编译成 Java 代码。</p>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9hbGliYWJhLmdpdGh1Yi5pby9hcnRoYXMvamFkLmh0bWw=\">https://alibaba.github.io/arthas/jad.html<i class=\"fa fa-external-link-alt\"></i></span></p>\n</blockquote>\n<h3 id=\"获取到类的字节码\"><a href=\"#获取到类的字节码\" class=\"headerlink\" title=\"获取到类的字节码\"></a>获取到类的字节码</h3><p>反编译有两部分工作：</p>\n<ol>\n<li>获取到字节码</li>\n<li>反编译为 Java 代码</li>\n</ol>\n<p>那么怎么从运行的 JVM 里获取到字节码？</p>\n<p>最常见的思路是，在 <code>classpaths</code> 下面查找，比如 <code>ClassLoader.getResource(\"java/lang/String.class\")</code>，但是这样子查找到的字节码不一定对。比如可能有多个冲突的 jar，或者有 Java Agent 修改了字节码。</p>\n<h3 id=\"ClassFileTransformer机制\"><a href=\"#ClassFileTransformer机制\" class=\"headerlink\" title=\"ClassFileTransformer机制\"></a>ClassFileTransformer 机制</h3><p>从 JDK 1.5 起，有一套 <code>ClassFileTransformer</code> 的机制，Java Agent 通过 <code>Instrumentation</code> 注册 <code>ClassFileTransformer</code>，那么在类加载或者 <code>retransform</code> 时就可以回调修改字节码。</p>\n<p>显然，在 Arthas 里，要增强的类是已经被加载的，所以它们的字节码都是在 <code>retransform</code> 时被修改的。<br>通过显式调用 <code>Instrumentation.retransformClasses(Class&lt;?&gt;...)</code> 可以触发回调。</p>\n<p>Arthas 里增强字节码的 <code>watch</code>/<code>trace</code>/<code>stack</code>/<code>tt</code> 等命令都是通过 <code>ClassFileTransformer</code> 来实现的。</p>\n<p><code>java.lang.instrument.ClassFileTransformer</code> 的接口如下：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">ClassFileTransformer</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token function\">transform</span><span class=\"token punctuation\">(</span>  <span class=\"token class-name\">ClassLoader</span>         loader<span class=\"token punctuation\">,</span>\n                <span class=\"token class-name\">String</span>              className<span class=\"token punctuation\">,</span>\n                <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">&gt;</span></span>            classBeingRedefined<span class=\"token punctuation\">,</span>\n                <span class=\"token class-name\">ProtectionDomain</span>    protectionDomain<span class=\"token punctuation\">,</span>\n                <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>              classfileBuffer<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IllegalClassFormatException</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<p>看到这里，读者应该猜到 <code>jad</code> 是怎么获取到字节码的了：</p>\n<ol>\n<li>注册一个 <code>ClassFileTransformer</code></li>\n<li>通过 <code>Instrumentation.retransformClasses</code> 触发回调</li>\n<li>在回调的 <code>transform</code> 函数里获取到字节码</li>\n<li>删掉注册的 <code>ClassFileTransformer</code></li>\n</ol>\n<h3 id=\"使用cfr来反编译\"><a href=\"#使用cfr来反编译\" class=\"headerlink\" title=\"使用cfr来反编译\"></a>使用 cfr 来反编译</h3><p>获取到字节码之后，怎样转换为 Java 代码呢？</p>\n<p>以前大家使用比较多的反编译软件可能是 <code>jd-gui</code>，但是它不支持 JDK8 的 lambda 语法和一些新版本 JDK 的特性。</p>\n<p>后面比较成熟的反编译软件是 <code>cfr</code>，它以前是不开源的。直到最近的 <code>0.145</code> 版本，作者终于开源了，可喜可贺。地址是</p>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2xlaWJuaXR6MjcvY2Zy\">https://github.com/leibnitz27/cfr<i class=\"fa fa-external-link-alt\"></i></span></p>\n</blockquote>\n<p>在 Arthas <code>jad</code> 命令里，通过调用 <code>cfr</code> 来完成反编译。</p>\n<h3 id=\"jad-命令的缺陷\"><a href=\"#jad-命令的缺陷\" class=\"headerlink\" title=\"jad 命令的缺陷\"></a>jad 命令的缺陷</h3><p>99% 的情况下，<code>jad</code> 命令 dump 下来的字节码是准确的，除了一些极端情况。</p>\n<ol>\n<li>因为 JVM 里注册的 <code>ClassFileTransformer</code> 可能有多个，那么在 JVM 里运行的字节码里，可能是被多个 <code>ClassFileTransformer</code> 处理过的。</li>\n<li>触发了 <code>retransformClasses</code> 之后，这些注册的 <code>ClassFileTransformer</code> 会被依次回，上一个处理的字节码传递到下一个。<br>所以不能保证这些 <code>ClassFileTransformer</code> 第二次执行会返回同样的结果。</li>\n<li>有可能一些 <code>ClassFileTransformer</code> 会被删掉，触发 <code>retransformClasses</code> 之后，之前的一些修改就会丢失掉。</li>\n</ol>\n<p>所以目前在 Arthas 里，如果开两个窗口，一个窗口执行 <code>watch</code>/<code>tt</code> 等命令，另一个窗口对这个类执行 <code>jad</code>，那么可以观察到 <code>watch</code>/<code>tt</code> 停止了输出，实际上是因为字节码在触发了 <code>retransformClasses</code> 之后，<code>watch</code>/<code>tt</code> 所做的修改丢失了。</p>\n<h3 id=\"精确获取字节码\"><a href=\"#精确获取字节码\" class=\"headerlink\" title=\"精确获取字节码\"></a>精确获取字节码</h3><p>如果想精确获取到 JVM 内运行的 Java 字节码，可以使用这个 <code>dumpclass</code> 工具，它是通过 <code>sa-jdi.jar</code> 来实现的，保证 dump 下来的字节码是 JVM 内所运行的。</p>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hlbmd5dW5hYmMvZHVtcGNsYXNz\">https://github.com/hengyunabc/dumpclass<i class=\"fa fa-external-link-alt\"></i></span></p>\n</blockquote>\n<h3 id=\"jad-命令实现过程\"><a href=\"#jad-命令实现过程\" class=\"headerlink\" title=\"jad 命令实现过程\"></a>jad 命令实现过程</h3><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvYXJ0aGFzL2Jsb2IvbWFzdGVyL2NvcmUvc3JjL21haW4vamF2YS9jb20vdGFvYmFvL2FydGhhcy9jb3JlL2NvbW1hbmQva2xhc3MxMDAvSmFkQ29tbWFuZC5qYXZh\">JadCommand.java<i class=\"fa fa-external-link-alt\"></i></span>：</p>\n<p><code>process()</code> -&gt; <code>processExactMatch()</code> -&gt; <code>Decompiler.decompile()</code></p>\n<h3 id=\"cfr反编译示例\"><a href=\"#cfr反编译示例\" class=\"headerlink\" title=\"cfr反编译示例\"></a>cfr 反编译示例</h3><p>参考 Arthas 代码：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvYXJ0aGFzL2Jsb2IvbWFzdGVyL2NvcmUvc3JjL21haW4vamF2YS9jb20vdGFvYmFvL2FydGhhcy9jb3JlL3V0aWwvRGVjb21waWxlci5qYXZh\">com.taobao.arthas.core.util.Decompiler.java<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h4 id=\"引入依赖\"><a href=\"#引入依赖\" class=\"headerlink\" title=\"引入依赖\"></a>引入依赖</h4><p>首先，需要引入 maven 依赖：</p>\n<pre class=\"language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.benf<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>cfr<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>0.150<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n\n<h4 id=\"编写方法\"><a href=\"#编写方法\" class=\"headerlink\" title=\"编写方法\"></a>编写方法</h4><p>编写反编译类 <code>sample.utils.Decompiler</code>：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">decompile</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> classFilePath<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> methodName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">decompile</span><span class=\"token punctuation\">(</span>classFilePath<span class=\"token punctuation\">,</span> methodName<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * @param classFilePath\n * @param methodName\n * @param hideUnicode\n * @return\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">decompile</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> classFilePath<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> methodName<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> hideUnicode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">final</span> <span class=\"token class-name\">StringBuilder</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token number\">8192</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token class-name\">OutputSinkFactory</span> mySink <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OutputSinkFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token annotation punctuation\">@Override</span>\n\t\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SinkClass</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">getSupportedSinks</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SinkType</span> sinkType<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SinkClass</span><span class=\"token punctuation\">&gt;</span></span> collection<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SinkClass</span><span class=\"token punctuation\">.</span>STRING<span class=\"token punctuation\">,</span> <span class=\"token class-name\">SinkClass</span><span class=\"token punctuation\">.</span>DECOMPILED<span class=\"token punctuation\">,</span> <span class=\"token class-name\">SinkClass</span><span class=\"token punctuation\">.</span>DECOMPILED_MULTIVER<span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\t<span class=\"token class-name\">SinkClass</span><span class=\"token punctuation\">.</span>EXCEPTION_MESSAGE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token annotation punctuation\">@Override</span>\n\t\t<span class=\"token keyword\">public</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token class-name\">Sink</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">getSink</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">SinkType</span> sinkType<span class=\"token punctuation\">,</span> <span class=\"token class-name\">SinkClass</span> sinkClass<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Sink</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token annotation punctuation\">@Override</span>\n\t\t\t\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> sinkable<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t<span class=\"token comment\">// skip message like: Analysing type demo.MathGame</span>\n\t\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sinkType <span class=\"token operator\">==</span> <span class=\"token class-name\">SinkType</span><span class=\"token punctuation\">.</span>PROGRESS<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t\tresult<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>sinkable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> options <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">/**\n\t * @see org.benf.cfr.reader.util.MiscConstants.Version.getVersion() Currently,\n\t *      the cfr version is wrong. so disable show cfr version.\n\t */</span>\n\toptions<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"showversion\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"false\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\toptions<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hideutf\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>hideUnicode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isBlank</span><span class=\"token punctuation\">(</span>methodName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\toptions<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"methodname\"</span><span class=\"token punctuation\">,</span> methodName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token class-name\">CfrDriver</span> driver <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CfrDriver</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">withOptions</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">withOutputSink</span><span class=\"token punctuation\">(</span>mySink<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> toAnalyse <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ttoAnalyse<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>classFilePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tdriver<span class=\"token punctuation\">.</span><span class=\"token function\">analyse</span><span class=\"token punctuation\">(</span>toAnalyse<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<h4 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h4><pre class=\"language-none\"><code class=\"language-none\">String className = \"sample/redefine/RedefineSuccess.class\";\nString classPath = Thread.currentThread().getContextClassLoader().getResource(className).getFile();\nSystem.out.println(classPath);\n\nString result = decompile(classPath, null);\nSystem.out.println(result);\n\nString result2 = decompile(classPath, \"printFlag\");\nSystem.out.println(result2);</code></pre>\n\n<h4 id=\"输出\"><a href=\"#输出\" class=\"headerlink\" title=\"输出\"></a>输出</h4><pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token operator\">/</span><span class=\"token class-name\">C</span><span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token class-name\">Codes</span><span class=\"token operator\">/</span><span class=\"token class-name\">JavaWorkSpace</span><span class=\"token operator\">/</span>workspace48<span class=\"token operator\">/</span>arthas<span class=\"token operator\">-</span>demo<span class=\"token operator\">/</span>target<span class=\"token operator\">/</span>classes<span class=\"token operator\">/</span>sample<span class=\"token operator\">/</span>redefine<span class=\"token operator\">/</span><span class=\"token class-name\">RedefineSuccess</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span>\n<span class=\"token comment\">/*\n * Decompiled with CFR.\n */</span>\n<span class=\"token keyword\">package</span> <span class=\"token namespace\">sample<span class=\"token punctuation\">.</span>redefine</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RedefineSuccess</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">3L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">RedefineSuccess</span><span class=\"token punctuation\">.</span><span class=\"token function\">printFlag</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printFlag</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">boolean</span> flag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"flag is true.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"flag is false.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printFlag</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">boolean</span> flag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"flag is true.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"flag is false.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<h3 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h3><blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL2hlbmd5dW5hYmMuZ2l0aHViLmlvL2FydGhhcy1qYWQv\">http://hengyunabc.github.io/arthas-jad/<i class=\"fa fa-external-link-alt\"></i></span></p>\n</blockquote>\n","categories":["Java","Arthas"],"tags":["Java","Java诊断","Arthas"]},{"title":"hexo 博客个性化设置","url":"/2020/08/2020-08-08-hexo%E5%8D%9A%E5%AE%A2%E4%B8%AA%E6%80%A7%E5%8C%96%E8%AE%BE%E7%BD%AE/","content":"<h3 id=\"创建categories\"><a href=\"#创建categories\" class=\"headerlink\" title=\"创建categories\"></a>创建 categories</h3><ol>\n<li><p><strong>新建一个页面，命名为 categories。命令如下：</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">npx hexo new page categories</code></pre>\n\n<p>在 myBlog/source 下会新生成一个新的文件夹 categories<br>，在该文件夹下会有一个 index.md 文件。</p>\n</li>\n<li><p><strong>编辑 categories 文件夹下的 index.md</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">title: categories\ndate: 2020-08-07 10:29:47\ntype: \"categories\"\ncomments: false</code></pre>\n</li>\n<li><p><strong>在菜单中添加链接。</strong></p>\n<p>编辑主题的 <code>_config.next.yml</code>，将 menu 中的 categories: /categories 注释去掉，如下:</p>\n<pre class=\"language-none\"><code class=\"language-none\">categories: /categories/ || fa fa-fw fa-th</code></pre>\n</li>\n<li><p><strong>安装依赖</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">npm install hexo-generator-index --save\nnpm install hexo-generator-archive --save\nnpm install hexo-generator-category --save\nnpm install hexo-generator-tag --save</code></pre>\n\n</li>\n</ol>\n<p>参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL3dpa2kvTWlncmF0aW5nLWZyb20tMi54LXRvLTMuMA==\">https://github.com/hexojs/hexo/wiki/Migrating-from-2.x-to-3.0<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h3 id=\"添加README-md\"><a href=\"#添加README-md\" class=\"headerlink\" title=\"添加README.md\"></a>添加 README.md</h3><h4 id=\"添加README-md-1\"><a href=\"#添加README-md-1\" class=\"headerlink\" title=\"添加README.md\"></a>添加 README.md</h4><p>使用 Github Pages 和 Hexo 搭建的博客，如果在最开始建立仓库的时候没有创建 README.md 文件，那么在后期如何添加呢？</p>\n<p>添加方法：在根目录 source 文件夹下新建 README.md 即可。</p>\n<p>新增：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0p1ZWVlL2p1ZWVlLWJsb2cvYmxvYi9tYXN0ZXIvc291cmNlL1JFQURNRS5tZA==\">source/README.md<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>效果：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0p1ZWVlL2p1ZWVlLmdpdGh1Yi5pbw==\">https://github.com/Jueee/jueee.github.io<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h4 id=\"显示异常\"><a href=\"#显示异常\" class=\"headerlink\" title=\"显示异常\"></a>显示异常</h4><p>当我们执行 <code>hexo g -d</code> 部署博客的时候会发现 README.md 变成了 README.html。</p>\n<p>原因就在于当我们在执行 <code>hexo g -d</code> 命令时，.md 文件会被转化成 HTML 文件，并将这些文件放到 public 目录里，最后再提交到远程 GitHub 仓库。</p>\n<p>而 Hexo 也提供了一个方法，让 md 文件不被转换成 HTML，在根目录的 _config.yml 配置文件里，找到 skip_render 关键字，添加 README.md，让解释器跳过渲染：</p>\n<pre class=\"language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">skip_render</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> README.md</code></pre>\n\n<h3 id=\"修改脚注\"><a href=\"#修改脚注\" class=\"headerlink\" title=\"修改脚注\"></a>修改脚注</h3><p>修改文件： <code>source\\_data\\footer.njk</code></p>\n<pre class=\"language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>footer-custom<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>powered-by<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>由 <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://github.com/next-theme/theme-next-docs<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>theme-link<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>noopener<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">target</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>_blank<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Hexo<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span> v8.0.0 驱动<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>post-meta-divider<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>|<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>theme-info<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>主题 – <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://github.com/next-theme/hexo-theme-next<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>theme-link<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>noopener<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">target</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>_blank<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Hexo.NexT<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span> v8.0.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n\n<h3 id=\"代码高亮\"><a href=\"#代码高亮\" class=\"headerlink\" title=\"代码高亮\"></a>代码高亮</h3><p>由于 Hexo 自带的代码高亮主题显示不好看，所以主题中使用到了 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2VsZTgyOC9oZXhvLXByaXNtLXBsdWdpbg==\">hexo-prism-plugin<i class=\"fa fa-external-link-alt\"></i></span> 的 Hexo 插件来做代码高亮，安装命令如下：</p>\n<p>bash</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i -S hexo-prism-plugin</code></pre>\n\n<p>然后，修改 Hexo 根目录下<code>_config.yml</code> 文件中 <code>highlight.enable</code> 的值为 <code>false</code>，并新增 <code>prism</code> 插件相关的配置，主要配置如下：</p>\n<pre class=\"language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">highlight</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span>\n\n<span class=\"token key atrule\">prism_plugin</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">mode</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'preprocess'</span>    <span class=\"token comment\"># realtime/preprocess</span>\n  <span class=\"token key atrule\">theme</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'tomorrow'</span>\n  <span class=\"token key atrule\">line_number</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span>    <span class=\"token comment\"># default false</span>\n  custom_css<span class=\"token punctuation\">:</span></code></pre>\n\n<p>配置参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvaGV4by1wcmlzbS1wbHVnaW4=\">https://www.npmjs.com/package/hexo-prism-plugin<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h3 id=\"修改菜单\"><a href=\"#修改菜单\" class=\"headerlink\" title=\"修改菜单\"></a>修改菜单</h3><p>将导航栏的 “归档” 修改为 “博客”。</p>\n<p>修改文件： <code>source\\_data\\languages.yml</code></p>\n<pre class=\"language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">zh-CN</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">menu</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">archives</span><span class=\"token punctuation\">:</span> 博客</code></pre>\n\n<h3 id=\"相关热门帖子\"><a href=\"#相关热门帖子\" class=\"headerlink\" title=\"相关热门帖子\"></a>相关热门帖子</h3><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3RlYTMvaGV4by1yZWxhdGVkLXBvcHVsYXItcG9zdHM=\">NexT<i class=\"fa fa-external-link-alt\"></i></span> 根据 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3RlYTMvaGV4by1yZWxhdGVkLXBvcHVsYXItcG9zdHM=\">hexo-related-popular-posts<i class=\"fa fa-external-link-alt\"></i></span> 支持相关的帖子功能.</p>\n<p><code>hexo-related-popular-posts</code> 通过执行以下命令来安装网站根目录:</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span> hexo-related-popular-posts\n$ npx hexo clean</code></pre>\n\n<p>可以通过将值设置 <code>related_posts.enable</code> 为 <code>true</code>in 来启用它主题配置文件.</p>\n<pre class=\"language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">related_posts</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></code></pre>\n\n\n<h3 id=\"更换网页图标\"><a href=\"#更换网页图标\" class=\"headerlink\" title=\"更换网页图标\"></a>更换网页图标</h3><h4 id=\"制作favicon图标\"><a href=\"#制作favicon图标\" class=\"headerlink\" title=\"制作favicon图标\"></a>制作 favicon 图标</h4><ol>\n<li>准备好用作标签页 / 网页小图标 favicon 的图片</li>\n<li>搜索 <em>favicon 在线</em>，可以看到一些在线图片转 favicon 的工具<br>我用的是这个（link）： <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5iaXRidWcubmV0Lw==\">bitbug<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li> 利用工具做成图标。<br>我做了 16x16，与 32x32 的。</li>\n</ol>\n<h4 id=\"编辑配置文件\"><a href=\"#编辑配置文件\" class=\"headerlink\" title=\"编辑配置文件\"></a>编辑配置文件</h4><p>在 next 主题的<strong>_config.yml</strong> 文件，修改新的图片作为 favicon 的对象：</p>\n<pre class=\"language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">favicon</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">small</span><span class=\"token punctuation\">:</span> /images/basic/jue.ico\n  <span class=\"token key atrule\">medium</span><span class=\"token punctuation\">:</span> /images/basic/jue.ico</code></pre>\n\n","categories":["Blog"],"tags":["Blog","Node.js"]},{"title":"idea 相关配置总结","url":"/2020/07/2020-08-06-idea%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE%E6%80%BB%E7%BB%93/","content":"<h3 id=\"对maven仓库建立快捷方式\"><a href=\"#对maven仓库建立快捷方式\" class=\"headerlink\" title=\"对maven仓库建立快捷方式\"></a>对 maven 仓库建立快捷方式</h3><p>对于 maven 仓库配置在其他磁盘的情况，建立快捷方式。</p>\n<p>使用管理员权限执行如下命令：</p>\n<pre class=\"language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">cmd <span class=\"token operator\">/</span>c mklink <span class=\"token operator\">/</span>D C:\\Users\\hzweiyongqiang\\<span class=\"token punctuation\">.</span>m2\\repository E:\\code\\Java\\repository</code></pre>\n\n<h3 id=\"配置阿里云中央仓库\"><a href=\"#配置阿里云中央仓库\" class=\"headerlink\" title=\"配置阿里云中央仓库\"></a>配置阿里云中央仓库</h3><p>进入到 idea 安装目录，找到 \\plugins\\maven\\lib 目录，可以看到 maven 有几个</p>\n<p><img src=\"/images/2020/08/1596678866870.png\" alt=\"1596678866870\" loading=\"lazy\"></p>\n<p>修改 maven3 下 conf 目录下的 settings.xml 。</p>\n<p>找到 mirrors，添加以下内容：</p>\n<pre class=\"language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mirror</span><span class=\"token punctuation\">&gt;</span></span>  \n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>id</span><span class=\"token punctuation\">&gt;</span></span>alimaven<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>id</span><span class=\"token punctuation\">&gt;</span></span>  \n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">&gt;</span></span>aliyun maven<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">&gt;</span></span>  \n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>url</span><span class=\"token punctuation\">&gt;</span></span>http://maven.aliyun.com/nexus/content/groups/public/<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>url</span><span class=\"token punctuation\">&gt;</span></span>  \n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mirrorOf</span><span class=\"token punctuation\">&gt;</span></span>central<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>mirrorOf</span><span class=\"token punctuation\">&gt;</span></span>          \n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>mirror</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n\n<p>修改后保存，打开 idea，菜单 file-settings, 搜索 maven，选择刚才修改的 maven：</p>\n<p><img src=\"/images/2020/08/1596679064163.png\" alt=\"1596679064163\" loading=\"lazy\"></p>\n<p>设置好后保存，以后使用 maven 速度会提升很多倍。</p>\n<h3 id=\"鼠标控制放大缩小\"><a href=\"#鼠标控制放大缩小\" class=\"headerlink\" title=\"鼠标控制放大缩小\"></a>鼠标控制放大缩小</h3><p>File -&gt; Setting -&gt; Editor -&gt; General</p>\n<p><img src=\"/images/2020/08/1596680119868.png\" alt=\"1596680119868\" loading=\"lazy\"></p>\n","categories":["软件","IDE"],"tags":["软件","IDE","idea"]},{"title":"博客网址增加站点分析","url":"/2020/08/2020-08-09-%E5%8D%9A%E5%AE%A2%E7%BD%91%E5%9D%80%E5%A2%9E%E5%8A%A0%E7%AB%99%E7%82%B9%E5%88%86%E6%9E%90/","content":"<h3 id=\"谷歌分析\"><a href=\"#谷歌分析\" class=\"headerlink\" title=\"谷歌分析\"></a>谷歌分析</h3><ol>\n<li><p>创建一个帐户并登录 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9hbmFseXRpY3MuZ29vZ2xlLmNvbS8=\">Google Analytics（分析）<i class=\"fa fa-external-link-alt\"></i></span>。<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zdXBwb3J0Lmdvb2dsZS5jb20vYW5hbHl0aWNzLz9obD1lbiN0b3BpYz0zNTQ0OTA2\">更详细的文档<i class=\"fa fa-external-link-alt\"></i></span></p>\n</li>\n<li><p>编辑 主题配置文件并 <code>tracking_id</code> 在部分下填写 <code>google_analytics</code> 您的 Google 跟踪 ID。Google 曲目 ID 始终以开头 <code>UA-</code>。</p>\n<pre class=\"language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># Google Analytics</span>\n<span class=\"token key atrule\">google_analytics</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">tracking_id</span><span class=\"token punctuation\">:</span> UA<span class=\"token punctuation\">-</span>XXXXXXXX<span class=\"token punctuation\">-</span>X\n  <span class=\"token key atrule\">only_pageview</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></code></pre>\n</li>\n<li><p>当 field <code>only_pageview</code> 设置为 true 时，NexT 将仅向 <code>pageview</code>Google Analytics（分析）发送事件。<br>使用它而不是使用它的好处 <code>only_pageview: false</code> 是减少了站点上的外部脚本，这将为您提供更好的性能，但没有完整的分析功能。</p>\n</li>\n</ol>\n<h3 id=\"百度分析\"><a href=\"#百度分析\" class=\"headerlink\" title=\"百度分析\"></a>百度分析</h3><ol>\n<li><p>登录<span class=\"exturl\" data-url=\"aHR0cHM6Ly90b25namkuYmFpZHUuY29tLw==\">百度分析<i class=\"fa fa-external-link-alt\"></i></span> 并找到网站代码获取页面。</p>\n</li>\n<li><p>在后面复制脚本 ID <code>hm.js?</code>，如下图：</p>\n<p><img src=\"/images/2020/08/1597041510807.png\" alt=\"1597041510807\" loading=\"lazy\"></p>\n</li>\n<li><p>编辑 主题配置文件并将部分更改 <code>baidu_analytics</code> 为您的脚本 ID。</p>\n<pre class=\"language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># Baidu Analytics ID</span>\n<span class=\"token key atrule\">baidu_analytics</span><span class=\"token punctuation\">:</span> your_id</code></pre>\n\n</li>\n</ol>\n","categories":["Blog"],"tags":["Blog"]},{"title":"Neo4j 初始化密码","url":"/2020/08/2020-08-10-Neo4j%E5%88%9D%E5%A7%8B%E5%8C%96%E5%AF%86%E7%A0%81/","content":"<h3 id=\"浏览器初始化密码\"><a href=\"#浏览器初始化密码\" class=\"headerlink\" title=\"浏览器初始化密码\"></a>浏览器初始化密码</h3><h4 id=\"初始化密码\"><a href=\"#初始化密码\" class=\"headerlink\" title=\"初始化密码\"></a>初始化密码</h4><p>Web 浏览器访问：<code>http://IP:7474/</code></p>\n<p>连接 URL 为 ：<code>bolt://IP:7687</code>，初始用户名、密码为 <code>neo4j</code>，如下图所示：</p>\n<p><img src=\"/images/2020/08/1597130874884.png\" alt=\"1597130874884\" loading=\"lazy\"></p>\n<p>初始化登录成功后，会要求重置 neo4j 密码，修改并确认新密码。</p>\n<p><img src=\"/images/2020/08/1597130933055.png\" alt=\"1597130933055\" loading=\"lazy\"></p>\n<h4 id=\"浏览器更改密码\"><a href=\"#浏览器更改密码\" class=\"headerlink\" title=\"浏览器更改密码\"></a>浏览器更改密码</h4><p>Web 浏览器访问：<code>http://IP:7474/</code>，登录成功后，输入命令：</p>\n<pre class=\"language-none\"><code class=\"language-none\">:server change-password</code></pre>\n\n<h3 id=\"命令行更改密码\"><a href=\"#命令行更改密码\" class=\"headerlink\" title=\"命令行更改密码\"></a>命令行更改密码</h3><ol>\n<li>进入 neo4j 安装目录， 并进入 bin 目录；</li>\n<li>运行 <code>./cypher-shell</code> 命令， 输入用户名，密码（初始默认用户名和密码为 neo4j）</li>\n<li>输入命令: <code>CALL dbms.security.changePassword('123456');</code> 输入命令  <code>:exit;</code> 退出</li>\n</ol>\n<p>例如：</p>\n<p><img src=\"/images/2020/08/1597132382397.png\" alt=\"1597132382397\" loading=\"lazy\"></p>\n<h3 id=\"Docker-容器初始化密码\"><a href=\"#Docker-容器初始化密码\" class=\"headerlink\" title=\"Docker 容器初始化密码\"></a>Docker 容器初始化密码</h3><h4 id=\"初始化密码-1\"><a href=\"#初始化密码-1\" class=\"headerlink\" title=\"初始化密码\"></a>初始化密码</h4><p>默认情况下，Neo4j 需要身份验证，并且要求我们首先登录 <code>neo4j/neo4j</code> 并设置新密码。当使用 <code>--env NEO4J_AUTH=neo4j/&lt;password&gt;</code> 选项创建 Docker 容器时，我们将通过初始化密码来跳过此密码重置。</p>\n<pre class=\"language-none\"><code class=\"language-none\">$ docker run -d --env NEO4J_AUTH=neo4j/123456 -it neo4j:3.5.13</code></pre>\n\n<h3 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h3><ul>\n<li>neo4j 设置项：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9uZW80ai5jb20vZG9jcy9vcGVyYXRpb25zLW1hbnVhbC9jdXJyZW50L3JlZmVyZW5jZS9wcm9jZWR1cmVzLw==\">https://neo4j.com/docs/operations-manual/current/reference/procedures/<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li> 设置初始化密码：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9uZW80ai5jb20vZG9jcy9vcGVyYXRpb25zLW1hbnVhbC9jdXJyZW50L2NvbmZpZ3VyYXRpb24vc2V0LWluaXRpYWwtcGFzc3dvcmQv\">https://neo4j.com/docs/operations-manual/current/configuration/set-initial-password/<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li> 密码和用户恢复：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9uZW80ai5jb20vZG9jcy9vcGVyYXRpb25zLW1hbnVhbC9jdXJyZW50L2NvbmZpZ3VyYXRpb24vcGFzc3dvcmQtYW5kLXVzZXItcmVjb3Zlcnkv\">https://neo4j.com/docs/operations-manual/current/configuration/password-and-user-recovery/<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>Docker 运行 neo4j：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9uZW80ai5jb20vZGV2ZWxvcGVyL2RvY2tlci1ydW4tbmVvNGov\">https://neo4j.com/developer/docker-run-neo4j/<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n","categories":["Database","Neo4j"],"tags":["Neo4j"]},{"title":"MySQL 中 DBlink 的使用","url":"/2020/08/2020-08-11-MySQL%E4%B8%ADDBlink%E7%9A%84%E4%BD%BF%E7%94%A8/","content":"<p>在实际工作中，我们可能会遇到需要操作其他数据库实例的部分表，但又不想系统连接多库。此时我们就需要用到数据表映射。</p>\n<p>如同 Oracle 中的 DBlink 一般，使用过 Oracle DBlink 数据库链接的人都知道可以跨实例来进行数据查询，同样的，Mysql 自带的 FEDERATED 引擎完美的帮我们解决了该问题。</p>\n<h3 id=\"检查引擎\"><a href=\"#检查引擎\" class=\"headerlink\" title=\"检查引擎\"></a>检查引擎</h3><p>查看 target 端是否安装了 FEDERATED 存储引擎：</p>\n<pre class=\"language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">mysql&gt; show engines ;</code></pre>\n\n<p>例如：</p>\n<p><img src=\"/images/2020/08/1597126521400.png\" alt=\"1597126521400\" loading=\"lazy\"></p>\n<h3 id=\"安装引擎\"><a href=\"#安装引擎\" class=\"headerlink\" title=\"安装引擎\"></a>安装引擎</h3><p>注意：如果没有安装 <strong>FEDERATED 引擎</strong>，执行：</p>\n<pre class=\"language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">install plugin federated soname 'ha_federated.so';</code></pre>\n\n<p>例如：</p>\n<p><img src=\"/images/2020/08/1597126538702.png\" alt=\"1597126538702\" loading=\"lazy\"></p>\n<p>再次检查引擎：</p>\n<pre class=\"language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">mysql&gt; show engines ;</code></pre>\n\n<p>例如：</p>\n<p><img src=\"/images/2020/08/1597126564647.png\" alt=\"1597126564647\" loading=\"lazy\"></p>\n<h3 id=\"开启引擎\"><a href=\"#开启引擎\" class=\"headerlink\" title=\"开启引擎\"></a>开启引擎</h3><p>将 federated 添加到 my.cnf 重启数据库</p>\n<pre class=\"language-cnf\" data-language=\"cnf\"><code class=\"language-cnf\">vi /etc/my.cnf\n[mysqld]\nfederated</code></pre>\n\n<p>再次检查引擎，例如：</p>\n<p><img src=\"/images/2020/08/1597126649766.png\" alt=\"1597126649766\" loading=\"lazy\"></p>\n<h3 id=\"建表访问\"><a href=\"#建表访问\" class=\"headerlink\" title=\"建表访问\"></a>建表访问</h3><p>使用 CONNECTION 创建 FEDERATED 引擎表通用模型：</p>\n<pre class=\"language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">CREATE TABLE (......) \nENGINE =FEDERATED CONNECTION='mysql://username:password@hostname:port/database/tablename'</code></pre>\n\n<p>注意 ENGINE=FEDERATED CONNECTION 后为源端地址 避免使用带 @的密码</p>\n<h3 id=\"使用总结\"><a href=\"#使用总结\" class=\"headerlink\" title=\"使用总结\"></a>使用总结</h3><p>基于 MySQL5.7.23 版本，笔者在源端及目标端实验了多种 DDL 及 DML，现简单总结如下，有兴趣的同学可以试试看。</p>\n<ul>\n<li>目标端建表结构可以与源端不一样 推荐与源端结构一致</li>\n<li>源端 DDL (CREATE、ALTER、DROP 等语句) 语句更改表结构 目标端不会变化</li>\n<li>源端 DML（SELECT、UPDATE、INSERT、DELETEt 等语句）语句目标端查询会同步</li>\n<li>源端 drop 表 目标端结构还在但无法查询</li>\n<li>目标端不能执行 DDL 语句</li>\n<li>目标端执行 DML 语句 源端数据也会变化</li>\n<li>目标端 truncate 表 源端表数据也会被清空</li>\n<li>目标端 drop 表对源端无影响</li>\n</ul>\n<h3 id=\"最佳实践\"><a href=\"#最佳实践\" class=\"headerlink\" title=\"最佳实践\"></a>最佳实践</h3><p>目前 FEDERATED 引擎使用范围还不多，若确实有跨实例访问的需求，建议做好规范，个人总结最佳实践如下：</p>\n<ol>\n<li>源端专门创建只读权限的用户来供目标端使用。</li>\n<li>目标端建议用 CREATE SERVER 方式创建 FEDERATED 表。</li>\n<li>FEDERATED 表不宜太多，迁移时要特别注意。</li>\n<li>目标端应该只做查询使用，禁止在目标端更改 FEDERATED 表。</li>\n<li>建议目标端表名及结构和源端保持一致。</li>\n<li>源端表结构变更后 目标端要及时删除重建。</li>\n</ol>\n","categories":["Database","MySQL"],"tags":["MySQL"]},{"title":"博客网址增加站点地图 sitemap","url":"/2020/08/2020-08-09-%E5%8D%9A%E5%AE%A2%E7%BD%91%E5%9D%80%E5%A2%9E%E5%8A%A0%E7%AB%99%E7%82%B9%E5%9C%B0%E5%9B%BEsitemap/","content":"<p>站点地图是一种文件，您可以通过该文件列出您网站上的网页，从而将您网站内容的组织架构告知 Google 和其他搜索引擎。Googlebot 等搜索引擎网页抓取工具会读取此文件，以便更加智能地抓取您的网站。</p>\n<h3 id=\"站点地图\"><a href=\"#站点地图\" class=\"headerlink\" title=\"站点地图\"></a>站点地图</h3><p>站点地图是一个网站所有链接的容器。很多网站的连接层次比较深，爬虫很难抓取到，站点地图可以方便爬虫抓取网站页面，通过抓取网站页面，清晰了解网站的架构，网站地图一般存放在根目录下并命名 sitemap，为爬虫指路，增加网站重要内容页面的收录。</p>\n<p>站点地图就是根据网站的结构、框架、内容，生成的导航网页文件。站点地图对于提高用户体验有好处，它们为网站访问者指明方向，并帮助迷失的访问者找到他们想看的页面。</p>\n<h3 id=\"添加sitemap\"><a href=\"#添加sitemap\" class=\"headerlink\" title=\"添加sitemap\"></a>添加 sitemap</h3><ol>\n<li><p>安装插件：</p>\n<pre class=\"language-none\"><code class=\"language-none\">npm install hexo-generator-sitemap --save\nnpm install hexo-generator-baidu-sitemap --save</code></pre>\n</li>\n<li><p>在博客目录的_config.yml 中添加如下代码：</p>\n<pre class=\"language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># 自动生成sitemap</span>\n<span class=\"token key atrule\">sitemap</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> sitemap.xml\n<span class=\"token key atrule\">baidusitemap</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> baidusitemap.xml</code></pre>\n</li>\n<li><p>编译博客</p>\n<pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\">npx hexo generate</code></pre>\n</li>\n<li><p>在你的博客根目录的 public 下面发现生成了 sitemap.xml 以及 baidusitemap.xml 就表示成功了。</p>\n<p>如下图所示：</p>\n<p><img src=\"/images/2020/08/1597229983009.png\" alt=\"1597229983009\" loading=\"lazy\"></p>\n</li>\n</ol>\n<h3 id=\"查看站点地图\"><a href=\"#查看站点地图\" class=\"headerlink\" title=\"查看站点地图\"></a>查看站点地图</h3><ul>\n<li><a href=\"https://jueee.github.io/sitemap.xml\">sitemap.xml</a></li>\n<li><a href=\"https://jueee.github.io/baidusitemap.xml\">baidusitemap.xml</a></li>\n</ul>\n","categories":["Blog"],"tags":["Blog","SEO"]},{"title":"Arthas 之通过 thread 命令定位线程问题","url":"/2020/08/2020-08-13-Arthas%E4%B9%8B%E9%80%9A%E8%BF%87thread%E5%91%BD%E4%BB%A4%E5%AE%9A%E4%BD%8D%E7%BA%BF%E7%A8%8B%E9%97%AE%E9%A2%98/","content":"<p>通过 Arthas 中的 thread 命令，可以查看当前线程信息及线程的堆栈。从而可以定位线程问题。</p>\n<h3 id=\"thread-命令介绍\"><a href=\"#thread-命令介绍\" class=\"headerlink\" title=\"thread 命令介绍\"></a>thread 命令介绍</h3><p>官方文档：</p>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9hbGliYWJhLmdpdGh1Yi5pby9hcnRoYXMvdGhyZWFkLmh0bWw=\">https://alibaba.github.io/arthas/thread.html<i class=\"fa fa-external-link-alt\"></i></span></p>\n</blockquote>\n<h4 id=\"参数说明\"><a href=\"#参数说明\" class=\"headerlink\" title=\"参数说明\"></a>参数说明</h4><p>使用 <code>thread --help</code> 获取 thread 命令的帮助信息：</p>\n<p><img src=\"/images/2020/08/1597314852787.png\" alt=\"1597314852787\" loading=\"lazy\"></p>\n<p>主要参数说明如下：</p>\n<table>\n<thead>\n<tr>\n<th>参数名称</th>\n<th>参数说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><em> id</em></td>\n<td> 线程 id</td>\n</tr>\n<tr>\n<td>[n:]</td>\n<td> 指定最忙的前 N 个线程并打印堆栈</td>\n</tr>\n<tr>\n<td> [b]</td>\n<td> 找出当前阻塞其他线程的线程</td>\n</tr>\n<tr>\n<td> [i <code>&lt;value&gt;</code>]</td>\n<td> 指定 cpu 占比统计的采样间隔，单位为毫秒</td>\n</tr>\n</tbody></table>\n<h4 id=\"线程常见状态\"><a href=\"#线程常见状态\" class=\"headerlink\" title=\"线程常见状态\"></a>线程常见状态</h4><p>定位线程问题之前，先回顾一下线程的几种常见状态：</p>\n<ul>\n<li><p><strong>RUNNABLE</strong> 运行中</p>\n</li>\n<li><p><strong>TIMED_WAITIN</strong> 调用了以下方法的线程会进入 <strong>TIMED_WAITING</strong>：</p>\n<ol>\n<li>Thread#sleep()</li>\n<li>Object#wait () 并加了超时参数</li>\n<li> Thread#join () 并加了超时参数</li>\n<li> LockSupport#parkNanos()</li>\n<li>LockSupport#parkUntil()</li>\n</ol>\n</li>\n<li><p><strong>WAITING</strong> 当线程调用以下方法时会进入 WAITING 状态：</p>\n<ol>\n<li>Object#wait () 而且不加超时参数</li>\n<li> Thread#join () 而且不加超时参数</li>\n<li> LockSupport#park()</li>\n</ol>\n</li>\n<li><p><strong>BLOCKED</strong> 阻塞，等待锁</p>\n</li>\n</ul>\n<h4 id=\"cpu占比的统计\"><a href=\"#cpu占比的统计\" class=\"headerlink\" title=\"cpu占比的统计\"></a>cpu 占比的统计</h4><blockquote>\n<p>这里的 cpu 统计的是，一段采样间隔内，当前 JVM 里各个线程所占用的 cpu 时间占总 cpu 时间的百分比。</p>\n<p>其计算方法为： 首先进行一次采样，获得所有线程的 cpu 的使用时间 (调用的是 <code>java.lang.management.ThreadMXBean#getThreadCpuTime</code> 这个接口)，然后睡眠一段时间，默认 100ms，可以通过 <code>-i</code> 参数指定，然后再采样一次，最后得出这段时间内各个线程消耗的 cpu 时间情况，最后算出百分比。</p>\n</blockquote>\n<blockquote>\n<p>注意： 这个统计也会产生一定的开销（JDK 这个接口本身开销比较大），因此会看到 as 的线程占用一定的百分比，为了降低统计自身的开销带来的影响，可以把采样间隔拉长一些，比如 5000 毫秒。</p>\n</blockquote>\n<blockquote>\n<p>如果想看从 Java 进程启动开始到现在的 cpu 占比情况：可以使用 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL29sZHJhdGxlZS91c2VmdWwtc2NyaXB0cy9ibG9iL21hc3Rlci9kb2NzL2phdmEubWQjLXNob3ctYnVzeS1qYXZhLXRocmVhZHM=\">show-busy-java-threads<i class=\"fa fa-external-link-alt\"></i></span> 这个脚本</p>\n</blockquote>\n<h3 id=\"示例代码\"><a href=\"#示例代码\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h3><p>首先编写一个有各种情况的测试类运行起来，再使用 <strong>Arthas</strong> 进行问题定位：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadDemo</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> hashSet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">ExecutorService</span> executorService <span class=\"token operator\">=</span> <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">newFixedThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\n\t\t<span class=\"token function\">addHashSetThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 不断的向 hashSet 集合增加数据</span>\n\t\t\n\t\t<span class=\"token function\">cpuHigh</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 模拟 CPU 过高</span>\n\t\t<span class=\"token function\">cpuNormal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token function\">thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 模拟线程阻塞</span>\n\t\t\n\t\t<span class=\"token function\">deadThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 模拟线程死锁</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">/**\n\t * 极度消耗CPU的线程\n\t */</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">cpuHigh</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">Thread</span> thread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-&gt;</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cpu start 100\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// 添加到线程</span>\n\t\texecutorService<span class=\"token punctuation\">.</span><span class=\"token function\">submit</span><span class=\"token punctuation\">(</span>thread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">/**\n\t * 普通消耗CPU的线程\n\t */</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">cpuNormal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-&gt;</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cpu start\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t\t<span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">/**\n\t * 模拟线程阻塞,向已经满了的线程池提交线程\n\t */</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">Thread</span> thread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-&gt;</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"thread start\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t<span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// 添加到线程</span>\n\t\texecutorService<span class=\"token punctuation\">.</span><span class=\"token function\">submit</span><span class=\"token punctuation\">(</span>thread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">/**\n\t * 死锁\n\t */</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">deadThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">/** 创建资源 */</span>\n\t\t<span class=\"token class-name\">Object</span> resourceA <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">Object</span> resourceB <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// 创建线程</span>\n\t\t<span class=\"token class-name\">Thread</span> threadA <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-&gt;</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span>resourceA<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" get ResourceA\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t<span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"waiting get resourceB\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span>resourceB<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" get resourceB\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token class-name\">Thread</span> threadB <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-&gt;</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span>resourceB<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" get ResourceB\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t<span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"waiting get resourceA\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span>resourceA<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" get resourceA\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tthreadA<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tthreadB<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">/**\n\t * 不断的向 hashSet 集合添加数据\n\t */</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addHashSetThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// 初始化常量</span>\n\t\t<span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-&gt;</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\thashSet<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"count\"</span> <span class=\"token operator\">+</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">10000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\tcount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<h3 id=\"定位-CPU-使用较高的线程\"><a href=\"#定位-CPU-使用较高的线程\" class=\"headerlink\" title=\"定位 CPU 使用较高的线程\"></a>定位 CPU 使用较高的线程</h3><p>上面的代码例子有一个 <code>CPU</code> 空转的死循环，非常的消耗 <code>CPU性能</code>，那么怎么找出来呢？</p>\n<p>使用 <strong>thread</strong> 查看<strong>所有</strong>线程信息，同时会列出每个线程的 <code>CPU</code> 使用率，可以看到图里 ID 为 12 的线程 CPU 使用 100%。</p>\n<p><img src=\"/images/2020/08/1597314558126.png\" alt=\"1597314558126\" loading=\"lazy\"></p>\n<p>使用命令 <strong>thread 12</strong> 查看 CPU 消耗较高的 12 号线程信息，可以看到 CPU 使用较高的方法和行数。</p>\n<p><img src=\"/images/2020/08/1597314597613.png\" alt=\"1597314597613\" loading=\"lazy\"></p>\n<p>如果只是为了寻找 CPU 使用较高的线程，可以直接使用命令 <strong>thread -n [显示的线程个数]</strong> ，就可以排列出 CPU 使用率 <strong>Top N</strong> 的线程。</p>\n<p><img src=\"/images/2020/08/1597314636547.png\" alt=\"1597314636547\" loading=\"lazy\"></p>\n<p>定位到的 CPU 使用最高的方法：</p>\n<p><img src=\"/images/2020/08/1597314662083.png\" alt=\"1597314662083\" loading=\"lazy\"></p>\n<h3 id=\"定位线程阻塞\"><a href=\"#定位线程阻塞\" class=\"headerlink\" title=\"定位线程阻塞\"></a>定位线程阻塞</h3><p>上面的模拟代码里，定义了线程池大小为 1 的线程池，然后在 <code>cpuHigh</code> 方法里提交了一个线程，在 <code>thread</code> 方法再次提交了一个线程，后面的这个线程因为线程池已满，会阻塞下来。</p>\n<p>使用 <strong>thread | grep pool</strong> 命令查看线程池里线程信息。</p>\n<p><img src=\"/images/2020/08/1597314720720.png\" alt=\"1597314720720\" loading=\"lazy\"></p>\n<p>可以看到线程池有 <strong>WAITING</strong> 的线程：</p>\n<p><img src=\"/images/2020/08/1597314739701.png\" alt=\"1597314739701\" loading=\"lazy\"></p>\n<h3 id=\"定位线程死锁\"><a href=\"#定位线程死锁\" class=\"headerlink\" title=\"定位线程死锁\"></a>定位线程死锁</h3><p>上面的模拟代码里 <code>deadThread</code> 方法实现了一个死锁，使用 <strong>thread -b</strong> 命令查看直接定位到死锁信息。</p>\n<p><img src=\"/images/2020/08/1597314791433.png\" alt=\"1597314791433\" loading=\"lazy\"></p>\n","categories":["Java","Arthas"],"tags":["Java","Java诊断","Arthas"]},{"title":"浏览器提速软件 SpeedyFox","url":"/2020/08/2020-08-12-%E6%B5%8F%E8%A7%88%E5%99%A8%E6%8F%90%E9%80%9F%E8%BD%AF%E4%BB%B6SpeedyFox/","content":"<h3 id=\"软件介绍\"><a href=\"#软件介绍\" class=\"headerlink\" title=\"软件介绍\"></a>软件介绍</h3><p>SpeedyFox 是一个超级简单的工具，一个单窗口，没有选项的工具来优化浏览器的性能。</p>\n<p>SpeedyFox 声称通过对 SQLITE 数据库进行碎片整理来加速浏览器。它说，这些数据库随着时间的推移而变得变形，减慢了启动速度，并推迟了使用 Cookie 和历史记录的操作。</p>\n<h3 id=\"下载网址\"><a href=\"#下载网址\" class=\"headerlink\" title=\"下载网址\"></a>下载网址</h3><blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jcnlzdGFsaWRlYS5jb20vc3BlZWR5Zm94\">https://crystalidea.com/speedyfox<i class=\"fa fa-external-link-alt\"></i></span></p>\n</blockquote>\n<h3 id=\"使用软件\"><a href=\"#使用软件\" class=\"headerlink\" title=\"使用软件\"></a>使用软件</h3><p>Edge 浏览器，Chrome、Firefox 等浏览器，以及大部分国产浏览器，都可以使用。SpeedyFox 能自动识别，浏览器的配置文件路径。</p>\n<p>所以，打开软件，只要直接点击 Optimize 按钮就行了，不需要复杂的配置。</p>\n<p>优化过程可能需要 5 秒钟到一分钟，具体取决于数据库的大小。整个优化过程很安全，因为它不会影响您的历史记录，书签，密码等。</p>\n<p>根据您的浏览活动，建议每 1-2 周对您的个人资料进行一次优化。</p>\n<p>如下图所示：</p>\n<p><img src=\"/images/2020/08/1597286104064.png\" alt=\"1597286104064\" loading=\"lazy\"></p>\n","categories":["软件","Windows"],"tags":["软件"]},{"title":"Git 每次都需要输入用户名密码的问题解决","url":"/2020/08/2020-08-13-Git%E6%AF%8F%E6%AC%A1%E9%83%BD%E9%9C%80%E8%A6%81%E8%BE%93%E5%85%A5%E7%94%A8%E6%88%B7%E5%90%8D%E5%AF%86%E7%A0%81%E7%9A%84%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/","content":"<h3 id=\"提交GitHub\"><a href=\"#提交GitHub\" class=\"headerlink\" title=\"提交GitHub\"></a>提交 GitHub</h3><p>使用 git 提交文件到 github, 每次都要输入用户名和密码，操作起来很麻烦，以下方法可解决，记录以下。</p>\n<h4 id=\"问题原因\"><a href=\"#问题原因\" class=\"headerlink\" title=\"问题原因\"></a>问题原因</h4><p>在 clone 项目的时候，使用了 https 方式，而不是 ssh 方式。默认 clone 方式是：https。</p>\n<p><img src=\"/images/2020/08/1597317084639.png\" alt=\"1597317084639\" loading=\"lazy\"></p>\n<h4 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h4><ol>\n<li><p>查看 clone 地址：<code>git remote -v</code></p>\n<p><img src=\"/images/2020/08/1597317130019.png\" alt=\"1597317130019\" loading=\"lazy\"></p>\n<p>说明是 https 方式，现在换成 ssh 方式。</p>\n</li>\n<li><p>移除 https 的方式：<code>git remote rm origin</code></p>\n<p><img src=\"/images/2020/08/1597317256891.png\" alt=\"1597317256891\" loading=\"lazy\"></p>\n<p>再次查看 clone 地址：<code>git remote -v</code>，显示没有地址。</p>\n</li>\n<li><p>查看 ssh 方式地址，在 github 上，切换到 ssh 方式，然后复制地址。</p>\n<p><img src=\"/images/2020/08/1597317342069.png\" alt=\"1597317342069\" loading=\"lazy\"></p>\n</li>\n<li><p>添加新的 git 方式： <code>git remote add origin git 地址</code></p>\n<p><img src=\"/images/2020/08/1597317394906.png\" alt=\"1597317394906\" loading=\"lazy\"></p>\n</li>\n<li><p>重新 push：<code>git push origin master</code>。</p>\n</li>\n</ol>\n<h3 id=\"提交普通-Git\"><a href=\"#提交普通-Git\" class=\"headerlink\" title=\"提交普通 Git\"></a>提交普通 Git</h3><h4 id=\"解决办法1\"><a href=\"#解决办法1\" class=\"headerlink\" title=\"解决办法1\"></a>解决办法 1</h4><p>在 <code>C:\\Users\\Administrator</code> 中的<code>.gitconfig</code> 文件，文本编辑器打开，记事本就可以，添加一行</p>\n<pre class=\"language-none\"><code class=\"language-none\">[credential]\n\thelper = store</code></pre>\n\n<h4 id=\"解决方法2\"><a href=\"#解决方法2\" class=\"headerlink\" title=\"解决方法2\"></a>解决方法 2</h4><p>git bash 进入你的项目目录，输入：</p>\n<pre class=\"language-none\"><code class=\"language-none\">git config --global credential.helper store</code></pre>\n\n<p>然后会修改 <code>C:\\Users\\Administrator</code> 中的<code>.gitconfig</code> 文件。</p>\n","categories":["Git"],"tags":["Git"]},{"title":"Ognl 表达式的基本使用方法","url":"/2020/08/2020-08-15-Ognl%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/","content":"<p>OGNL 是 <code>Object-Graph Navigation Language</code>（<strong>对象导航图语言</strong>）的缩写，它是一种功能强大的表达式语言，通过它简单一致的表达式语法，可以存取对象的任意属性，调用对象的方法，遍历整个对象的结构图，实现字段类型转化等功能。它使用相同的表达式去存取对象的属性。这样可以更好的取得数据。</p>\n<h3 id=\"Ognl-语言介绍\"><a href=\"#Ognl-语言介绍\" class=\"headerlink\" title=\"Ognl 语言介绍\"></a>Ognl 语言介绍</h3><p>OGNL 表达式官方指南：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb21tb25zLmFwYWNoZS5vcmcvcHJvcGVyL2NvbW1vbnMtb2dubC9sYW5ndWFnZS1ndWlkZS5odG1s\">https://commons.apache.org/proper/commons-ognl/language-guide.html<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h4 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h4><p>Ognl 是一个功能强大的表达式语言，用来获取和设置 java 对象的属性 ，它旨在提供一个更高抽象度语法来对 java 对象图进行导航。</p>\n<p>另外，java 中很多可以做的事情，也可以使用 OGNL 来完成，例如：列表映射和选择。</p>\n<p>对于开发者来说，使用 OGNL，可以用简洁的语法来完成对 java 对象的导航。通常来说：通过一个 “路径” 来完成对象信息的导航，这个 “路径” 可以是到 java bean 的某个属性，或者集合中的某个索引的对象，等等，而不是直接使用 get 或者 set 方法来完成。</p>\n<h4 id=\"三要素\"><a href=\"#三要素\" class=\"headerlink\" title=\"三要素\"></a>三要素</h4><p><strong>首先来介绍下 OGNL 的三要素：</strong></p>\n<ul>\n<li><p><strong>表达式（Expression）</strong>：</p>\n<p>表达式是整个 OGNL 的核心内容，所有的 OGNL 操作都是针对表达式解析后进行的。通过表达式来告诉 OGNL 操作到底要干些什么。因此，表达式其实是一个带有语法含义的字符串，整个字符串将规定操作的类型和内容。OGNL 表达式支持大量的表达式，如 “链式访问对象”、表达式计算、甚至还支持 Lambda 表达式。</p>\n</li>\n<li><p><strong>Root 对象</strong>：</p>\n<p>OGNL 的 Root 对象可以理解为 OGNL 的操作对象。当我们指定了一个表达式的时候，我们需要指定这个表达式针对的是哪个具体的对象。而这个具体的对象就是 Root 对象，这就意味着，如果有一个 OGNL 表达式，那么我们需要针对 Root 对象来进行 OGNL 表达式的计算并且返回结果。</p>\n</li>\n<li><p><strong>上下文环境</strong>：</p>\n<p>有个 Root 对象和表达式，我们就可以使用 OGNL 进行简单的操作了，如对 Root 对象的赋值与取值操作。但是，实际上在 OGNL 的内部，所有的操作都会在一个特定的数据环境中运行。这个数据环境就是上下文环境（Context）。OGNL 的上下文环境是一个 Map 结构，称之为 OgnlContext。Root 对象也会被添加到上下文环境当中去。</p>\n<p>说白了上下文就是一个 MAP 结构，它实现了 java.utils.Map 的接口。</p>\n</li>\n</ul>\n<h3 id=\"使用-Ognl\"><a href=\"#使用-Ognl\" class=\"headerlink\" title=\"使用 Ognl\"></a>使用 Ognl</h3><p>引入 Maven：</p>\n<pre class=\"language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>ognl<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>ognl<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>3.1.19<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n\n<p>示例代码：</p>\n<p>示例类：<code>sample.ognl.Address</code></p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Data</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Address</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> port<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> address<span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Address</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> port<span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span> address<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>port <span class=\"token operator\">=</span> port<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>address <span class=\"token operator\">=</span> address<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<p>示例类 <code>sample.ognl.User</code>：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Data</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">Address</span> address<span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<h3 id=\"Ognl-的基本语法\"><a href=\"#Ognl-的基本语法\" class=\"headerlink\" title=\"Ognl 的基本语法\"></a>Ognl 的基本语法</h3><h4 id=\"对Root对象的访问\"><a href=\"#对Root对象的访问\" class=\"headerlink\" title=\"对Root对象的访问\"></a>对 Root 对象的访问</h4><p>OGNL 使用的是一种链式的风格进行对象的访问。</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">23</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Address</span> address <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Address</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"330108\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"杭州市滨江区\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nuser<span class=\"token punctuation\">.</span><span class=\"token function\">setAddress</span><span class=\"token punctuation\">(</span>address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Ognl</span><span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// test</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Ognl</span><span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name.length\"</span><span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 4</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Ognl</span><span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"address\"</span><span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// Address(port=330108, address=杭州市滨江区)</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Ognl</span><span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"address.port\"</span><span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 110003</span></code></pre>\n\n<h4 id=\"对上下文对象的访问\"><a href=\"#对上下文对象的访问\" class=\"headerlink\" title=\"对上下文对象的访问\"></a>对上下文对象的访问</h4><p>使用 OGNL 的时候如果不设置上下文对象，系统会自动创建一个上下文对象，如果传入的参数当中包含了上下文对象则会使用传入的上下文对象。</p>\n<p>当访问上下文环境当中的参数时候，需要在表达式前面加上 '#' ，表示了与访问 Root 对象的区别。</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">demo2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">OgnlException</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">23</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">Address</span> address <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Address</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"330108\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"杭州市滨江区\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tuser<span class=\"token punctuation\">.</span><span class=\"token function\">setAddress</span><span class=\"token punctuation\">(</span>address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">&gt;</span></span> context <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcontext<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"init\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcontext<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Ognl</span><span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#init\"</span><span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// hello</span>\n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Ognl</span><span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#user.name\"</span><span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// test</span>\n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Ognl</span><span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// test</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"this is demo2 method\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<h4 id=\"对静态变量的访问\"><a href=\"#对静态变量的访问\" class=\"headerlink\" title=\"对静态变量的访问\"></a>对静态变量的访问</h4><p>在 OGNL 表达式当中也可以访问静态变量或者调用静态方法，格式如 @[class]@[field/method ()]。</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> ONE <span class=\"token operator\">=</span> <span class=\"token string\">\"one\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 对静态变量的访问（@[class]@[field/method()]）</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">demo3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">OgnlException</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token class-name\">Object</span> object1 <span class=\"token operator\">=</span> <span class=\"token class-name\">Ognl</span><span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"@sample.ognl.OgnlDemo@ONE\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">Object</span> object2 <span class=\"token operator\">=</span> <span class=\"token class-name\">Ognl</span><span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"@sample.ognl.OgnlDemo@demo2()\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// hello、test、test</span>\n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>object1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// one\t</span>\n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>object2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// this is demo2 method</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<h4 id=\"方法的调用\"><a href=\"#方法的调用\" class=\"headerlink\" title=\"方法的调用\"></a>方法的调用</h4><p>如果需要调用 Root 对象或者上下文对象当中的方法也可以使用.+ 方法的方式来调用。甚至可以传入参数。</p>\n<p>赋值的时候可以选择上下文当中的元素进行给 Root 对象的 name 属性赋值。</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">&gt;</span></span> context <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncontext<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"rcx\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncontext<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"password\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"password\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Ognl</span><span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"getName()\"</span><span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// null</span>\n<span class=\"token class-name\">Ognl</span><span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"setName(#name)\"</span><span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Ognl</span><span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"getName()\"</span><span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// rcx</span></code></pre>\n\n<h4 id=\"对数组和集合的访问\"><a href=\"#对数组和集合的访问\" class=\"headerlink\" title=\"对数组和集合的访问\"></a>对数组和集合的访问</h4><p>OGNL 支持对数组按照数组下标的顺序进行访问。此方式也适用于对集合的访问，对于 Map 支持使用键进行访问。</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">&gt;</span></span> context <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> strings  <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"aa\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"bb\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlist<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"aa\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlist<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bb\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"value1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"value2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncontext<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"list\"</span><span class=\"token punctuation\">,</span> list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncontext<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"strings\"</span><span class=\"token punctuation\">,</span> strings<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncontext<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"map\"</span><span class=\"token punctuation\">,</span> map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Ognl</span><span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#strings[0]\"</span><span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// aa</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Ognl</span><span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#list[0]\"</span><span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// aa</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Ognl</span><span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#list[0 + 1]\"</span><span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// bb</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Ognl</span><span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#map['key1']\"</span><span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// value1</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Ognl</span><span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#map['key' + '2']\"</span><span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t<span class=\"token comment\">// value2</span></code></pre>\n\n<p>从上面代码不仅看到了访问数组与集合的方式同时也可以看出来 OGNL 表达式当中支持操作符的简单运算。有如下所示：</p>\n<ul>\n<li>2 + 4 // 整数相加（同时也支持减法、乘法、除法、取余 [% /mod]、）</li>\n<li>\"hell\" + \"lo\" // 字符串相加</li>\n<li> i++ // 递增、递减</li>\n<li> i == j // 判断</li>\n<li> var in list // 是否在容器当中</li>\n</ul>\n<h4 id=\"投影与选择\"><a href=\"#投影与选择\" class=\"headerlink\" title=\"投影与选择\"></a>投影与选择</h4><p>OGNL 支持类似数据库当中的选择与投影功能。</p>\n<ul>\n<li><p><strong>投影</strong>：选出集合当中的相同属性组合成一个新的集合。语法为 collection.{XXX}，XXX 就是集合中每个元素的公共属性。</p>\n</li>\n<li><p><strong>选择</strong>：选择就是选择出集合当中符合条件的元素组合成新的集合。语法为 collection.{Y XXX}，其中 Y 是一个选择操作符，XXX 是选择用的逻辑表达式。</p>\n<p>选择操作符有 3 种：</p>\n<ul>\n<li>? ：选择满足条件的所有元素</li>\n<li> ^：选择满足条件的第一个元素</li>\n<li> $：选择满足条件的最后一个元素 </li>\n</ul>\n</li>\n</ul>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">User</span> p1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name1\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">User</span> p2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name2\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">User</span> p3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name3\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">33</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">User</span> p4 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name4\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">44</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">&gt;</span></span> context <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">&gt;</span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlist<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlist<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlist<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>p3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlist<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>p4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncontext<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"list\"</span><span class=\"token punctuation\">,</span> list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Ognl</span><span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#list.{age}\"</span><span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\n<span class=\"token comment\">// [11, 22, 33, 44]</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Ognl</span><span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#list.{age + '-' + name}\"</span><span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\n<span class=\"token comment\">// [11-name1, 22-name2, 33-name3, 44-name4]</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Ognl</span><span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#list.{? #this.age &gt; 22}\"</span><span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\n<span class=\"token comment\">// [User(name=name3, age=33, address=null), User(name=name4, age=44, address=null)]</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Ognl</span><span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#list.{^ #this.age &gt; 22}\"</span><span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\n<span class=\"token comment\">// [User(name=name3, age=33, address=null)]</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Ognl</span><span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#list.{$ #this.age &gt; 22}\"</span><span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\n<span class=\"token comment\">// [User(name=name4, age=44, address=null)]</span></code></pre>\n\n<h4 id=\"创建对象\"><a href=\"#创建对象\" class=\"headerlink\" title=\"创建对象\"></a>创建对象</h4><p>OGNL 支持直接使用表达式来创建对象。主要有三种情况：</p>\n<ul>\n<li>构造 List 对象：使用 {}, 中间使用 ',' 进行分割如 {\"aa\", \"bb\", \"cc\"}</li>\n<li> 构造 Map 对象：使用 #{}，中间使用 ', 进行分割键值对，键值对使用 ':' 区分，如 #{\"key1\" : \"value1\", \"key2\" : \"value2\"}</li>\n<li> 构造任意对象：直接使用已知的对象的构造方法进行构造。</li>\n</ul>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Ognl</span><span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#{'key1':'value1'}\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// {key1=value1}</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Ognl</span><span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{'key1','value1'}\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// [key1, value1]</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Ognl</span><span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"new sample.ognl.User()\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\n<span class=\"token comment\">// User(name=null, age=0, address=null)</span></code></pre>\n\n\n","categories":["Java","Apache","Commons"],"tags":["Java","Ognl"]},{"title":"使用 Jrebel，实现热部署","url":"/2020/08/2020-08-13-%E4%BD%BF%E7%94%A8Jrebel%EF%BC%8C%E5%AE%9E%E7%8E%B0%E7%83%AD%E9%83%A8%E7%BD%B2/","content":"<p>JRebel 是一套 JavaEE 开发工具。JRebel 允许开发团队在有限的时间内完成更多的任务修正更多的问题，发布更高质量的软件产品。 </p>\n<h3 id=\"什么是热部署？\"><a href=\"#什么是热部署？\" class=\"headerlink\" title=\"什么是热部署？\"></a>什么是热部署？</h3><p>所谓热部署，就是在应用正在运行的时候升级软件，却不需要重新启动应用。对于 Java 应用程序来说，热部署就是在运行时更新 Java 类文件。</p>\n<p>在基于 Java 的应用服务器实现热部署的过程中，类装入器扮演着重要的角色。大多数基于 Java 的应用服务器，包括 EJB 服务器和 Servlet 容器，都支持热部署。类装入器不能重新装入一个已经装入的类，但只要使用一个新的类装入器实例，就可以将类再次装入一个正在运行的应用程序。</p>\n<h3 id=\"Jrebel-介绍\"><a href=\"#Jrebel-介绍\" class=\"headerlink\" title=\"Jrebel 介绍\"></a>Jrebel 介绍</h3><p>官网：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9tYW51YWxzLmpyZWJlbC5jb20vanJlYmVsLw==\">https://manuals.jrebel.com/jrebel/<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>JRebel 是一个 JVM Java 代理，它与应用程序服务器集成，从而使类可以使用现有的类加载器<strong>重新</strong>加载。只有更改的类会重新编译并立即重新加载到正在运行的应用程序中。</p>\n<h3 id=\"Jrebel-功能\"><a href=\"#Jrebel-功能\" class=\"headerlink\" title=\"Jrebel 功能\"></a>Jrebel 功能</h3><p>Jrebel 可以实现基于类、XML 文件的增删查改，也能够实现方法体的增删查改的热部署。</p>\n<p>JRebel 工作在与 HotSwap 不同的一个抽象层面上。鉴于 HotSwap 是工作在虚拟机层面上，且依赖于 JVM 的内部运作，JRebel 用到了 JVM 的两个显著的功能特征 —— 抽象的字节码和类加载器。类加载器允许 JRebel 辨别出类被加载的时刻，然后实时地翻译字节码，用以在虚拟机和可执行代码之间创建另一个抽象层。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">支持类别</th>\n<th align=\"left\"> Jrebel</th>\n<th align=\"left\">JVM Hot Swap</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"> 方法体内代码的修改</td>\n<td align=\"left\">支持</td>\n<td align=\"left\">支持</td>\n</tr>\n<tr>\n<td align=\"left\">方法参数、名称、返回值的变动</td>\n<td align=\"left\">支持</td>\n<td align=\"left\">不支持</td>\n</tr>\n<tr>\n<td align=\"left\">方法体注解的变动</td>\n<td align=\"left\">支持</td>\n<td align=\"left\">不支持</td>\n</tr>\n<tr>\n<td align=\"left\">新增、删除 N (N&gt;0) 个方法</td>\n<td align=\"left\">支持</td>\n<td align=\"left\">不支持</td>\n</tr>\n<tr>\n<td align=\"left\">类的增删查改，其他类对此新增类的引用</td>\n<td align=\"left\">支持</td>\n<td align=\"left\">不支持</td>\n</tr>\n<tr>\n<td align=\"left\">新增接口，以及它的实现类</td>\n<td align=\"left\">支持</td>\n<td align=\"left\">不支持</td>\n</tr>\n<tr>\n<td align=\"left\">改变静态字段值（仅 static）</td>\n<td align=\"left\">不支持</td>\n<td align=\"left\">不支持</td>\n</tr>\n<tr>\n<td align=\"left\">改变常量字段值（final static or final）</td>\n<td align=\"left\">支持</td>\n<td align=\"left\">不支持</td>\n</tr>\n<tr>\n<td align=\"left\">枚举类 / 值（增删查改），并对它调用</td>\n<td align=\"left\">支持</td>\n<td align=\"left\">不支持</td>\n</tr>\n</tbody></table>\n<h3 id=\"Jrebel-安装\"><a href=\"#Jrebel-安装\" class=\"headerlink\" title=\"Jrebel 安装\"></a>Jrebel 安装</h3><h4 id=\"安装-Jrebel\"><a href=\"#安装-Jrebel\" class=\"headerlink\" title=\"安装 Jrebel\"></a>安装 Jrebel</h4><p>参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9tYW51YWxzLmpyZWJlbC5jb20vanJlYmVsL2lkZS9pbmRleC5odG1s\">https://manuals.jrebel.com/jrebel/ide/index.html<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p><img src=\"/images/2020/08/1597297821144.png\" alt=\"1597297821144\" loading=\"lazy\"></p>\n<h4 id=\"破解Jrebel\"><a href=\"#破解Jrebel\" class=\"headerlink\" title=\"破解Jrebel\"></a>破解 Jrebel</h4><ol>\n<li>点击打开网站：<span class=\"exturl\" data-url=\"aHR0cDovL215bmlnaHQudG9wOjEwMDg2Lw==\">http://mynight.top:10086<i class=\"fa fa-external-link-alt\"></i></span>，复制第二行链接</li>\n<li><img src=\"/images/2020/08/1597297837282.png\" alt=\"1597297837282\" loading=\"lazy\"></li>\n<li><img src=\"/images/2020/08/1597297849629.png\" alt=\"1597297849629\" loading=\"lazy\"></li>\n<li><img src=\"/images/2020/08/1597297856954.png\" alt=\"1597297856954\" loading=\"lazy\"></li>\n<li><img src=\"/images/2020/08/1597297962755.png\" alt=\"1597297962755\" loading=\"lazy\"></li>\n<li>至此 Jrebel 全部破解完毕。</li>\n</ol>\n<h3 id=\"Jrebel-注意事项\"><a href=\"#Jrebel-注意事项\" class=\"headerlink\" title=\"Jrebel 注意事项\"></a>Jrebel 注意事项</h3><ol>\n<li><p>每次重新编译加载 classes 文件的时候，控制台 console 都会输出一段文字：</p>\n<p>（2018-03-30 10:49:53 JRebel: Reloading class “包名。类名.class”.）</p>\n<p>这段文字代表该类已经重加载完毕，请确保这段文字输出以后，再调试。</p>\n</li>\n<li><p>以 Spring boot，启动的项目需要注意：<br>执行重新编译（recompile）类的时候，需要注意 被编译类 的依赖顺序。</p>\n<p>例如：A 类实现了 B 接口（类 A 和接口 B 都被修改的前提下），那么需要先重新编译（recompile）B 接口<br>再重新编译（recompile）A 类。</p>\n<p>当然，如果只修改了类 A 的内容，接口 B 未做修改，则只需要重新编译（recompile）类 A</p>\n</li>\n</ol>\n","categories":["软件","IDE"],"tags":["软件","IDE"]},{"title":"kafka-manager 的安装和使用","url":"/2020/08/2020-08-14-kafka-manager%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/","content":"<h3 id=\"kafka-manager地址\"><a href=\"#kafka-manager地址\" class=\"headerlink\" title=\"kafka-manager地址\"></a>kafka-manager 地址</h3><p>GitHub 地址：</p>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3lhaG9vL0NNQUs=\">https://github.com/yahoo/CMAK<i class=\"fa fa-external-link-alt\"></i></span></p>\n</blockquote>\n<p>下载地址：</p>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3lhaG9vL0NNQUsvcmVsZWFzZXM=\">https://github.com/yahoo/CMAK/releases<i class=\"fa fa-external-link-alt\"></i></span></p>\n</blockquote>\n<h3 id=\"kafka-manager简介\"><a href=\"#kafka-manager简介\" class=\"headerlink\" title=\"kafka-manager简介\"></a>kafka-manager 简介</h3><p>kafka-manager 是目前最受欢迎的 kafka 集群管理工具，最早由雅虎开源，用户可以在 Web 界面执行一些简单的集群管理操作。具体支持以下内容：</p>\n<ul>\n<li>管理多个集群</li>\n<li>轻松检查群集状态（主题，消费者，偏移，代理，副本分发，分区分发）</li>\n<li>运行首选副本选举</li>\n<li>使用选项生成分区分配以选择要使用的代理</li>\n<li>运行分区重新分配（基于生成的分配）</li>\n<li>使用可选主题配置创建主题（0.8.1.1 具有与 0.8.2 + 不同的配置）</li>\n<li>删除主题（仅支持 0.8.2 + 并记住在代理配置中设置 delete.topic.enable = true）</li>\n<li>主题列表现在指示标记为删除的主题（仅支持 0.8.2+）</li>\n<li>批量生成多个主题的分区分配，并可选择要使用的代理</li>\n<li>批量运行重新分配多个主题的分区</li>\n<li>将分区添加到现有主题</li>\n<li>更新现有主题的配置</li>\n</ul>\n<h3 id=\"安装kafka-manager\"><a href=\"#安装kafka-manager\" class=\"headerlink\" title=\"安装kafka-manager\"></a>安装 kafka-manager</h3><h4 id=\"普通安装\"><a href=\"#普通安装\" class=\"headerlink\" title=\"普通安装\"></a>普通安装</h4><h5 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h5><pre class=\"language-none\"><code class=\"language-none\">wget 'https://github.com/yahoo/CMAK/releases/download/3.0.0.5/cmak-3.0.0.5.zip'\nunzip cmak-3.0.0.5.zip\ncd cmak-3.0.0.5</code></pre>\n\n<h5 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h5><p>修改  <code>conf/application.conf</code> 文件：</p>\n<pre class=\"language-conf\" data-language=\"conf\"><code class=\"language-conf\">kafka-manager.zkhosts=\"127.0.0.1:2181\"\nkafka-manager.zkhosts=${?ZK_HOSTS}\ncmak.zkhosts=\"127.0.0.1:2181\"\ncmak.zkhosts=${?ZK_HOSTS}</code></pre>\n\n<h5 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h5><pre class=\"language-none\"><code class=\"language-none\">$ bin/cmak &amp;</code></pre>\n\n<h4 id=\"docker-安装\"><a href=\"#docker-安装\" class=\"headerlink\" title=\"docker 安装\"></a>docker 安装</h4><p>DockerHub：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9odWIuZG9ja2VyLmNvbS9yL3NoZWVwa2lsbGVyL2thZmthLW1hbmFnZXI=\">https://hub.docker.com/r/sheepkiller/kafka-manager<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>安装命令：</p>\n<pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\">docker run -it <span class=\"token punctuation\">\\</span>\n\t--name kafka-manager <span class=\"token punctuation\">\\</span>\n\t-p <span class=\"token number\">9000</span>:9000 <span class=\"token punctuation\">\\</span>\n\t-e <span class=\"token assign-left variable\">ZK_HOSTS</span><span class=\"token operator\">=</span><span class=\"token number\">127.0</span>.0.1:2181 <span class=\"token punctuation\">\\</span>\n\t-e <span class=\"token assign-left variable\">KAFKA_MANAGER_AUTH_ENABLED</span><span class=\"token operator\">=</span>true <span class=\"token punctuation\">\\</span>\n\t-e <span class=\"token assign-left variable\">KAFKA_MANAGER_USERNAME</span><span class=\"token operator\">=</span>admin <span class=\"token punctuation\">\\</span>\n\t-e <span class=\"token assign-left variable\">KAFKA_MANAGER_PASSWORD</span><span class=\"token operator\">=</span>admin <span class=\"token punctuation\">\\</span>\n\t-d sheepkiller/kafka-manager:latest</code></pre>\n\n<h3 id=\"配置-kafka-manager\"><a href=\"#配置-kafka-manager\" class=\"headerlink\" title=\"配置 kafka-manager\"></a>配置 kafka-manager</h3><p>kafka-manager 默认的端口是 9000。</p>\n<ol>\n<li><p>添加集群</p>\n<p><img src=\"/images/2020/08/1597386588682.png\" alt=\"1597386588682\" loading=\"lazy\"></p>\n</li>\n<li><p>配置集群</p>\n<p><img src=\"/images/2020/08/1597386711921.png\" alt=\"1597386711921\" loading=\"lazy\"></p>\n</li>\n<li><p>开启消费者查看</p>\n<p><img src=\"/images/2020/08/1599558709720.png\" alt=\"1599558709720\" loading=\"lazy\"></p>\n</li>\n</ol>\n<h3 id=\"问题解决\"><a href=\"#问题解决\" class=\"headerlink\" title=\"问题解决\"></a>问题解决</h3><h4 id=\"开启JMX\"><a href=\"#开启JMX\" class=\"headerlink\" title=\"开启JMX\"></a>开启 JMX</h4><p>如果使用 kafka-manager 监控，需要开启 JMX，则需要勾选：</p>\n<p><img src=\"/images/2020/08/1597405340838.png\" alt=\"1597405340838\" loading=\"lazy\"></p>\n<p>否则会有以下报错：</p>\n<pre class=\"language-none\"><code class=\"language-none\">2020-08-14 17:30:58,236 - [ERROR] k.m.j.KafkaJMX$ - Failed to connect to service:jmx:rmi:///jndi/rmi://dm161.bjth.163.org:-1/jmxrmi\njava.lang.IllegalArgumentException: requirement failed: No jmx port but jmx polling enabled!</code></pre>\n\n<p>启动 kafka 服务时指定 <code>JMX_PORT</code> 值:</p>\n<pre class=\"language-none\"><code class=\"language-none\">JMX_PORT=9999 nohup bin/kafka-server-start.sh config/server.properties &amp;</code></pre>\n\n<h4 id=\"kafka-manager-mutex\"><a href=\"#kafka-manager-mutex\" class=\"headerlink\" title=\"/kafka-manager/mutex\"></a>/kafka-manager/mutex</h4><p>CMAK 添加集群的时候报错：</p>\n<pre class=\"language-none\"><code class=\"language-none\">org.apache.zookeeper.KeeperException$UnimplementedException: KeeperErrorCode = Unimplemented for /kafka-manager/mutex\n        at org.apache.zookeeper.KeeperException.create(KeeperException.java:106)\n        at org.apache.zookeeper.KeeperException.create(KeeperException.java:54)\n        at org.apache.zookeeper.ZooKeeper.create(ZooKeeper.java:1538)\n        at org.apache.curator.utils.ZKPaths.mkdirs(ZKPaths.java:291)\n        at org.apache.curator.framework.imps.CreateBuilderImpl$11.call(CreateBuilderImpl.java:746)\n        at org.apache.curator.framework.imps.CreateBuilderImpl$11.call(CreateBuilderImpl.java:723)\n        at org.apache.curator.RetryLoop.callWithRetry(RetryLoop.java:109)\n        at org.apache.curator.framework.imps.CreateBuilderImpl.pathInForeground(CreateBuilderImpl.java:720)\n        at org.apache.curator.framework.imps.CreateBuilderImpl.protectedPathInForeground(CreateBuilderImpl.java:484)\n        at org.apache.curator.framework.imps.CreateBuilderImpl.forPath(CreateBuilderImpl.java:474)</code></pre>\n\n<p>解决：</p>\n<pre class=\"language-none\"><code class=\"language-none\">root@zk-0:/opt/zookeeper/bin# ./zkCli.sh\n[zk: localhost:2181(CONNECTED) 1] ls /kafka-manager\n[configs, deleteClusters, clusters]\n[zk: localhost:2181(CONNECTED) 2] create /kafka-manager/mutex \"\"\nCreated /kafka-manager/mutex\n[zk: localhost:2181(CONNECTED) 3] create /kafka-manager/mutex/locks \"\"\nCreated /kafka-manager/mutex/locks\n[zk: localhost:2181(CONNECTED) 4] create /kafka-manager/mutex/leases \"\"\nCreated /kafka-manager/mutex/leases</code></pre>\n\n<p>参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3lhaG9vL0NNQUsvaXNzdWVzLzczMQ==\">https://github.com/yahoo/CMAK/issues/731<i class=\"fa fa-external-link-alt\"></i></span></p>\n","categories":["Linux","Apache","软件","Kafka"],"tags":["Linux","Apache","软件","Kafka"]},{"title":"Arthas 之定位方法调用问题","url":"/2020/08/2020-08-14-Arthas%E4%B9%8B%E5%AE%9A%E4%BD%8D%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8%E9%97%AE%E9%A2%98/","content":"<p>通过 Arthas 中的 trace/monitor/watch/stack/tt 等命令，可以查看方法内部调用信息，从而定位定位方法调用问题。</p>\n<h3 id=\"示例代码\"><a href=\"#示例代码\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h3><p>Spring Boot 启动类 <code>sample.demo.ServerDemoApplication</code>：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@SpringBootApplication</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ServerDemoApplication</span> <span class=\"token punctuation\">{</span>\n\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServerDemoApplication</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n<span class=\"token punctuation\">}</span></code></pre>\n\n<p>控制类 <code>sample.demo.controller.UserController</code>：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@RestController</span>\n<span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserController</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserService</span> userService<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"/user\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">getUser</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> uid<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 模拟用户查询</span>\n        userService<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>uid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">&gt;</span></span> hashMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        hashMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"uid\"</span><span class=\"token punctuation\">,</span> uid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        hashMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"name\"</span> <span class=\"token operator\">+</span> uid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span>hashMap<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> hashMap<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<p>Service 类：<code>sample.demo.service.UserService</code>：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Service</span>\n<span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserService</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> uid<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">check</span><span class=\"token punctuation\">(</span>uid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">service</span><span class=\"token punctuation\">(</span>uid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">redis</span><span class=\"token punctuation\">(</span>uid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">mysql</span><span class=\"token punctuation\">(</span>uid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">service</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> uid<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            count <span class=\"token operator\">+=</span> i<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"service  end {}\"</span><span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">redis</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> uid<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            count <span class=\"token operator\">+=</span> i<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"redis  end {}\"</span><span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">mysql</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> uid<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">long</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10000000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            count <span class=\"token operator\">+=</span> i<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mysql end {}\"</span><span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n      <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">check</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> uid<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n         <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>uid <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> uid <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n             log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"uid不正确，uid:{}\"</span><span class=\"token punctuation\">,</span> uid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n             <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"uid不正确\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token punctuation\">}</span>\n         <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<h3 id=\"trace（内部调用路径）\"><a href=\"#trace（内部调用路径）\" class=\"headerlink\" title=\"trace（内部调用路径）\"></a>trace（内部调用路径）</h3><h4 id=\"方法介绍\"><a href=\"#方法介绍\" class=\"headerlink\" title=\"方法介绍\"></a>方法介绍</h4><p>通过 Arthas 中的 trace 命令，可以查看方法内部调用路径，并输出方法路径上的每个节点上耗时。</p>\n<p>官方文档：</p>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9hbGliYWJhLmdpdGh1Yi5pby9hcnRoYXMvdHJhY2UuaHRtbA==\">https://alibaba.github.io/arthas/trace.html<i class=\"fa fa-external-link-alt\"></i></span></p>\n</blockquote>\n<h4 id=\"参数说明\"><a href=\"#参数说明\" class=\"headerlink\" title=\"参数说明\"></a>参数说明</h4><p>使用 <code>thread --help</code> 获取 thread 命令的帮助信息：</p>\n<p><img src=\"/images/2020/08/1597393992311.png\" alt=\"1597393992311\" loading=\"lazy\"></p>\n<p>主要参数说明如下：</p>\n<table>\n<thead>\n<tr>\n<th>参数名称</th>\n<th>参数说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><em> class-pattern</em></td>\n<td> 类名表达式匹配</td>\n</tr>\n<tr>\n<td><em> method-pattern</em></td>\n<td> 方法名表达式匹配</td>\n</tr>\n<tr>\n<td><em> condition-express</em></td>\n<td> 条件表达式</td>\n</tr>\n<tr>\n<td> [E]</td>\n<td> 开启正则表达式匹配，默认为通配符匹配</td>\n</tr>\n<tr>\n<td><code>[n:]</code></td>\n<td>命令执行次数</td>\n</tr>\n<tr>\n<td><code>#cost</code></td>\n<td>方法执行耗时</td>\n</tr>\n</tbody></table>\n<h4 id=\"定位耗时问题\"><a href=\"#定位耗时问题\" class=\"headerlink\" title=\"定位耗时问题\"></a>定位耗时问题</h4><p>使用 **trace ** 命令开始检测耗时情况。</p>\n<pre class=\"language-none\"><code class=\"language-none\">trace sample.demo.controller.UserController getUser</code></pre>\n\n<p>结果如下：</p>\n<p><img src=\"/images/2020/08/1597402146114.png\" alt=\"1597402146114\" loading=\"lazy\"></p>\n<p>继续跟踪耗时高的方法，然后再次访问。</p>\n<pre class=\"language-none\"><code class=\"language-none\">trace sample.demo.TraceService get</code></pre>\n\n<p>结果如下：</p>\n<p><img src=\"/images/2020/08/1597402247630.png\" alt=\"1597402247630\" loading=\"lazy\"></p>\n<p>很清楚的看到是 <code>TraceService</code> 的 <code>mysql</code> 方法耗时是最高的。</p>\n<h3 id=\"monitor（方法调用监控）\"><a href=\"#monitor（方法调用监控）\" class=\"headerlink\" title=\"monitor（方法调用监控）\"></a>monitor（方法调用监控）</h3><h4 id=\"方法介绍-1\"><a href=\"#方法介绍-1\" class=\"headerlink\" title=\"方法介绍\"></a>方法介绍</h4><p>monitor 命令可以对匹配 <code>class-pattern</code>／<code>method-pattern</code> 的类、方法的调用进行监控。</p>\n<p>官方文档：</p>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9hbGliYWJhLmdpdGh1Yi5pby9hcnRoYXMvbW9uaXRvci5odG1s\">https://alibaba.github.io/arthas/monitor.html<i class=\"fa fa-external-link-alt\"></i></span></p>\n</blockquote>\n<h4 id=\"参数说明-1\"><a href=\"#参数说明-1\" class=\"headerlink\" title=\"参数说明\"></a>参数说明</h4><p>使用 <code>monitor --help</code> 获取 monitor 命令的帮助信息：</p>\n<p><img src=\"/images/2020/08/1597402367532.png\" alt=\"1597402367532\" loading=\"lazy\"></p>\n<p>方法拥有一个命名参数 <code>[c:]</code>，意思是统计周期（cycle of output），拥有一个整型的参数值</p>\n<table>\n<thead>\n<tr>\n<th>参数名称</th>\n<th>参数说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><em> class-pattern</em></td>\n<td> 类名表达式匹配</td>\n</tr>\n<tr>\n<td><em> method-pattern</em></td>\n<td> 方法名表达式匹配</td>\n</tr>\n<tr>\n<td> [E]</td>\n<td> 开启正则表达式匹配，默认为通配符匹配</td>\n</tr>\n<tr>\n<td><code>[c:]</code></td>\n<td>统计周期，默认值为 120 秒</td>\n</tr>\n</tbody></table>\n<h4 id=\"监控的维度说明\"><a href=\"#监控的维度说明\" class=\"headerlink\" title=\"监控的维度说明\"></a>监控的维度说明</h4><table>\n<thead>\n<tr>\n<th>监控项</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td> timestamp</td>\n<td> 时间戳</td>\n</tr>\n<tr>\n<td> class</td>\n<td>Java 类</td>\n</tr>\n<tr>\n<td> method</td>\n<td> 方法（构造方法、普通方法）</td>\n</tr>\n<tr>\n<td>total</td>\n<td> 调用次数</td>\n</tr>\n<tr>\n<td> success</td>\n<td> 成功次数</td>\n</tr>\n<tr>\n<td> fail</td>\n<td> 失败次数</td>\n</tr>\n<tr>\n<td> rt</td>\n<td> 平均 RT</td>\n</tr>\n<tr>\n<td>fail-rate</td>\n<td> 失败率</td>\n</tr>\n</tbody></table>\n<h4 id=\"统计方法耗时\"><a href=\"#统计方法耗时\" class=\"headerlink\" title=\"统计方法耗时\"></a>统计方法耗时</h4><p>使用 <strong>monitor</strong> 命令监控统计方法的执行情况。</p>\n<p>每 10 秒统计一次 <code>com.UserServiceImpl</code> 类的 <code>get</code> 方法执行情况。</p>\n<pre class=\"language-none\"><code class=\"language-none\">monitor -c 10 sample.demo.controller.UserController getUser</code></pre>\n\n<p><img src=\"/images/2020/08/1597402331522.png\" alt=\"1597402331522\" loading=\"lazy\"></p>\n<h3 id=\"watch（观察方法信息）\"><a href=\"#watch（观察方法信息）\" class=\"headerlink\" title=\"watch（观察方法信息）\"></a>watch（观察方法信息）</h3><h4 id=\"方法介绍-2\"><a href=\"#方法介绍-2\" class=\"headerlink\" title=\"方法介绍\"></a>方法介绍</h4><p>watch 让你能方便的观察到指定方法的调用情况。能观察到的范围为：<code>返回值</code>、<code>抛出异常</code>、<code>入参</code>，通过编写 <code>OGNL</code> 表达式进行对应变量的查看。</p>\n<p>官方文档：</p>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9hbGliYWJhLmdpdGh1Yi5pby9hcnRoYXMvd2F0Y2guaHRtbA==\">https://alibaba.github.io/arthas/watch.html<i class=\"fa fa-external-link-alt\"></i></span></p>\n</blockquote>\n<h4 id=\"参数说明-2\"><a href=\"#参数说明-2\" class=\"headerlink\" title=\"参数说明\"></a>参数说明</h4><p>使用 <code>watch --help</code> 获取 watch 命令的帮助信息：</p>\n<p><img src=\"/images/2020/08/1597402622041.png\" alt=\"1597402622041\" loading=\"lazy\"></p>\n<p>watch 的参数比较多，主要是因为它能在 4 个不同的场景观察对象：</p>\n<table>\n<thead>\n<tr>\n<th>参数名称</th>\n<th>参数说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><em> class-pattern</em></td>\n<td> 类名表达式匹配</td>\n</tr>\n<tr>\n<td><em> method-pattern</em></td>\n<td> 方法名表达式匹配</td>\n</tr>\n<tr>\n<td><em> express</em></td>\n<td> 观察表达式</td>\n</tr>\n<tr>\n<td><em> condition-express</em></td>\n<td> 条件表达式</td>\n</tr>\n<tr>\n<td> [b]</td>\n<td> 在<strong>方法调用之前</strong>观察</td>\n</tr>\n<tr>\n<td> [e]</td>\n<td> 在<strong>方法异常之后</strong>观察</td>\n</tr>\n<tr>\n<td> [s]</td>\n<td> 在<strong>方法返回之后</strong>观察</td>\n</tr>\n<tr>\n<td> [f]</td>\n<td> 在<strong>方法结束之后</strong> (正常返回和异常返回) 观察【默认】</td>\n</tr>\n<tr>\n<td>[E]</td>\n<td> 开启正则表达式匹配，默认为通配符匹配</td>\n</tr>\n<tr>\n<td> [x:]</td>\n<td> 指定输出结果的属性遍历深度，默认为 1</td>\n</tr>\n</tbody></table>\n<h4 id=\"观察表达式\"><a href=\"#观察表达式\" class=\"headerlink\" title=\"观察表达式\"></a>观察表达式</h4><p>观察表达式的构成主要由 ognl 表达式组成，所以你可以这样写 <code>\"{params,returnObj}\"</code>，只要是一个合法的 ognl 表达式，都能被正常支持。</p>\n<p>观察的维度也比较多，主要体现在参数 <code>advice</code> 的数据结构上。<code>Advice</code> 参数最主要是封装了通知节点的所有信息。请参考<span class=\"exturl\" data-url=\"aHR0cHM6Ly9hbGliYWJhLmdpdGh1Yi5pby9hcnRoYXMvYWR2aWNlLWNsYXNzLmh0bWw=\">表达式核心变量<i class=\"fa fa-external-link-alt\"></i></span>中关于该节点的描述。</p>\n<ul>\n<li>特殊用法请参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvYXJ0aGFzL2lzc3Vlcy83MQ==\">https://github.com/alibaba/arthas/issues/71<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>OGNL 表达式官网：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb21tb25zLmFwYWNoZS5vcmcvcHJvcGVyL2NvbW1vbnMtb2dubC9sYW5ndWFnZS1ndWlkZS5odG1s\">https://commons.apache.org/proper/commons-ognl/language-guide.html<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<h4 id=\"特别说明\"><a href=\"#特别说明\" class=\"headerlink\" title=\"特别说明\"></a><strong>特别说明</strong></h4><ul>\n<li>watch 命令定义了 4 个观察事件点，即 <code>-b</code> 方法调用前，<code>-e</code> 方法异常后，<code>-s</code> 方法返回后，<code>-f</code> 方法结束后</li>\n<li> 4 个观察事件点 <code>-b</code>、<code>-e</code>、<code>-s</code> 默认关闭，<code>-f</code> 默认打开，当指定观察点被打开后，在相应事件点会对观察表达式进行求值并输出</li>\n<li>这里要注意<code>方法入参</code>和<code>方法出参</code>的区别，有可能在中间被修改导致前后不一致，除了 <code>-b</code> 事件点 <code>params</code> 代表方法入参外，其余事件都代表方法出参</li>\n<li>当使用 <code>-b</code> 时，由于观察事件点是在方法调用前，此时返回值或异常均不存在</li>\n</ul>\n<h4 id=\"观察方法信息\"><a href=\"#观察方法信息\" class=\"headerlink\" title=\"观察方法信息\"></a>观察方法信息</h4><p><strong>查看入参和出参</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">$ watch sample.demo.controller.UserController getUser '{params[0],returnObj}'</code></pre>\n\n<p><img src=\"/images/2020/08/1597402871452.png\" alt=\"1597402871452\" loading=\"lazy\"></p>\n<p><strong>查看入参和出参大小</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">$ watch sample.demo.controller.UserController getUser '{params[0],returnObj.size}'</code></pre>\n\n<p><img src=\"/images/2020/08/1597402936287.png\" alt=\"1597402936287\" loading=\"lazy\"></p>\n<p><strong>查看入参和出参 String</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">$ watch sample.demo.controller.UserController getUser '{params[0],returnObj.toString()}'</code></pre>\n\n<p><img src=\"/images/2020/08/1597402988837.png\" alt=\"1597402988837\" loading=\"lazy\"></p>\n<p><strong>查看方法异常之后</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">$ watch sample.demo.controller.UserController getUser '{params[0],returnObj}' -e</code></pre>\n\n<p><img src=\"/images/2020/08/1597403442198.png\" alt=\"1597403442198\" loading=\"lazy\"></p>\n<h3 id=\"stack（方法调用路径）\"><a href=\"#stack（方法调用路径）\" class=\"headerlink\" title=\"stack（方法调用路径）\"></a>stack（方法调用路径）</h3><h4 id=\"方法介绍-3\"><a href=\"#方法介绍-3\" class=\"headerlink\" title=\"方法介绍\"></a>方法介绍</h4><p>stack 输出当前方法被调用的调用路径。</p>\n<p>官方文档：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9hbGliYWJhLmdpdGh1Yi5pby9hcnRoYXMvc3RhY2suaHRtbA==\">https://alibaba.github.io/arthas/stack.html<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h4 id=\"参数说明-3\"><a href=\"#参数说明-3\" class=\"headerlink\" title=\"参数说明\"></a>参数说明</h4><p>使用 <code>stack --help</code> 获取 stack 命令的帮助信息：</p>\n<p><img src=\"/images/2020/08/1597403694320.png\" alt=\"1597403694320\" loading=\"lazy\"></p>\n<p>主要参数如下：</p>\n<table>\n<thead>\n<tr>\n<th>参数名称</th>\n<th>参数说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><em> class-pattern</em></td>\n<td> 类名表达式匹配</td>\n</tr>\n<tr>\n<td><em> method-pattern</em></td>\n<td> 方法名表达式匹配</td>\n</tr>\n<tr>\n<td><em> condition-express</em></td>\n<td> 条件表达式</td>\n</tr>\n<tr>\n<td> [E]</td>\n<td> 开启正则表达式匹配，默认为通配符匹配</td>\n</tr>\n<tr>\n<td><code>[n:]</code></td>\n<td>执行次数限制</td>\n</tr>\n</tbody></table>\n<h4 id=\"方法调用路径\"><a href=\"#方法调用路径\" class=\"headerlink\" title=\"方法调用路径\"></a>方法调用路径</h4><pre class=\"language-none\"><code class=\"language-none\">$ stack sample.demo.controller.UserController getUser</code></pre>\n\n<p><img src=\"/images/2020/08/1597403757289.png\" alt=\"1597403757289\" loading=\"lazy\"></p>\n<h3 id=\"tt（方法调用时空隧道）\"><a href=\"#tt（方法调用时空隧道）\" class=\"headerlink\" title=\"tt（方法调用时空隧道）\"></a>tt（方法调用时空隧道）</h3><h4 id=\"方法介绍-4\"><a href=\"#方法介绍-4\" class=\"headerlink\" title=\"方法介绍\"></a>方法介绍</h4><p>tt 方法执行数据的时空隧道，记录下指定方法每次调用的入参和返回信息，并能对这些不同的时间下调用进行观测。</p>\n<p>官方文档：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9hbGliYWJhLmdpdGh1Yi5pby9hcnRoYXMvdHQuaHRtbA==\">https://alibaba.github.io/arthas/tt.html<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h4 id=\"参数说明-4\"><a href=\"#参数说明-4\" class=\"headerlink\" title=\"参数说明\"></a>参数说明</h4><ul>\n<li><p><code>-t</code></p>\n<p>tt 命令有很多个主参数，<code>-t</code> 就是其中之一。这个参数的表明希望记录下类 <code>*Test</code> 的 <code>print</code> 方法的每次执行情况。</p>\n</li>\n<li><p><code>-n 3</code></p>\n<p>当你执行一个调用量不高的方法时可能你还能有足够的时间用 <code>CTRL+C</code> 中断 tt 命令记录的过程，但如果遇到调用量非常大的方法，瞬间就能将你的 JVM 内存撑爆。</p>\n<p>此时你可以通过 <code>-n</code> 参数指定你需要记录的次数，当达到记录次数时 Arthas 会主动中断 tt 命令的记录过程，避免人工操作无法停止的情况。</p>\n</li>\n</ul>\n<h4 id=\"返回结果说明\"><a href=\"#返回结果说明\" class=\"headerlink\" title=\"返回结果说明\"></a>返回结果说明</h4><table>\n<thead>\n<tr>\n<th>表格字段</th>\n<th>字段解释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td> INDEX</td>\n<td> 时间片段记录编号，每一个编号代表着一次调用，后续 tt 还有很多命令都是基于此编号指定记录操作，非常重要。</td>\n</tr>\n<tr>\n<td>TIMESTAMP</td>\n<td> 方法执行的本机时间，记录了这个时间片段所发生的本机时间</td>\n</tr>\n<tr>\n<td> COST(ms)</td>\n<td> 方法执行的耗时</td>\n</tr>\n<tr>\n<td> IS-RET</td>\n<td> 方法是否以正常返回的形式结束</td>\n</tr>\n<tr>\n<td> IS-EXP</td>\n<td> 方法是否以抛异常的形式结束</td>\n</tr>\n<tr>\n<td> OBJECT</td>\n<td> 执行对象的 <code>hashCode()</code>，注意，曾经有人误认为是对象在 JVM 中的内存地址，但很遗憾他不是。但他能帮助你简单的标记当前执行方法的类实体</td>\n</tr>\n<tr>\n<td> CLASS</td>\n<td> 执行的类名</td>\n</tr>\n<tr>\n<td> METHOD</td>\n<td> 执行的方法名</td>\n</tr>\n</tbody></table>\n<h4 id=\"方法调用时空隧道\"><a href=\"#方法调用时空隧道\" class=\"headerlink\" title=\"方法调用时空隧道\"></a>方法调用时空隧道</h4><p><strong>记录方法调用信息</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">$ tt -t sample.demo.controller.UserController getUser</code></pre>\n\n<p><img src=\"/images/2020/08/1597403958714.png\" alt=\"1597403958714\" loading=\"lazy\"></p>\n<p><strong>查看记录的调用信息</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">tt -l</code></pre>\n\n<p><img src=\"/images/2020/08/1597404208135.png\" alt=\"1597404208135\" loading=\"lazy\"></p>\n<p><strong>查看记录的详细信息</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">tt -i 1001</code></pre>\n\n<p><img src=\"/images/2020/08/1597404218381.png\" alt=\"1597404218381\" loading=\"lazy\"></p>\n<p><strong>重新发起调用</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">tt -i 1001 -p</code></pre>\n\n<p><img src=\"/images/2020/08/1597404320236.png\" alt=\"1597404320236\" loading=\"lazy\"></p>\n","categories":["Java","Arthas"],"tags":["Java","Java诊断","Arthas"]},{"title":"Robots.txt 文件介绍及生成","url":"/2020/08/2020-08-18-Robots.txt%E6%96%87%E4%BB%B6%E4%BB%8B%E7%BB%8D%E5%8F%8A%E7%94%9F%E6%88%90/","content":"<p>Robots.txt 是存放在站点根目录下的一个纯文本文件。虽然它的设置很简单，但是作用却很强大。它可以指定搜索引擎蜘蛛只抓取指定的内容，或者是禁止搜索引擎蜘蛛抓取网站的部分或全部内容。</p>\n<h3 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h3><p>Robots.txt 文件应该放在网站根目录下，并且该文件是可以通过互联网进行访问的。</p>\n<p>例如：如果您的网站地址是 <code>http://www.yourdomain.com/</code>。那么，该文件必须能够通过 <code>http://www.yourdomain.com/robots.txt</code> 打开并看到里面的内容。</p>\n<p>例如：<a href=\"https://jueee.github.io/robots.txt\">https://jueee.github.io/robots.txt</a></p>\n<h3 id=\"格式\"><a href=\"#格式\" class=\"headerlink\" title=\"格式\"></a>格式</h3><h4 id=\"User-agent\"><a href=\"#User-agent\" class=\"headerlink\" title=\"User-agent\"></a>User-agent</h4><p>用于描述搜索引擎蜘蛛的名字，在 \"Robots.txt\" 文件中，如果有多条 User-agent 记录说明有多个搜索引擎蜘蛛会受到该协议的限制，对该文件来说，至少要有一条 User-agent 记录。</p>\n<p>如果该项的值设为 <code>*</code>，则该协议对任何搜索引擎蜘蛛均有效，在 \"Robots.txt\" 文件中，\"<code>User-agent:*</code>\" 这样的记录只能有一条。</p>\n<h4 id=\"Disallow\"><a href=\"#Disallow\" class=\"headerlink\" title=\"Disallow\"></a>Disallow</h4><p>用于描述不希望被访问到的一个 URL，这个 URL 可以是一条完整的路径，也可以是部分的，任何以 Disallow 开头的 URL 均不会被 Robot 访问到。</p>\n<p>举例：</p>\n<p>例一：\"Disallow:/help\" 是指 /help.html 和 /help/index.html 都不允许搜索引擎蜘蛛抓取。</p>\n<p>例二：\"Disallow:/help/\" 是指允许搜索引擎蜘蛛抓取 /help.html，而不能抓取 /help/index.html。</p>\n<p>例三：Disallow 记录为空说明该网站的所有页面都允许被搜索引擎抓取，在 \"/robots.txt\" 文件中，至少要有一条 Disallow 记录。如果 \"/robots.txt\" 是一个空文件，则对于所有的搜索引擎蜘蛛，该网站都是开放的可以被抓取的。</p>\n<h4 id=\"注释符\"><a href=\"#注释符\" class=\"headerlink\" title=\"注释符\"></a>注释符</h4><p><code>#</code> 是 Robots.txt 协议中的注释符。</p>\n<h3 id=\"综合例子\"><a href=\"#综合例子\" class=\"headerlink\" title=\"综合例子\"></a>综合例子</h3><p>例一：通过 \"/robots.txt\" 禁止所有搜索引擎蜘蛛抓取 \"/bin/cgi/\" 目录，以及 \"/tmp/\" 目录和 /foo.html 文件，设置方法如下：</p>\n<pre class=\"language-none\"><code class=\"language-none\">User-agent: *\nDisallow: /bin/cgi/\nDisallow: /tmp/\nDisallow: /foo.html</code></pre>\n\n<p>例二：通过 \"/robots.txt\" 只允许某个搜索引擎抓取，而禁止其他的搜索引擎抓取。如：只允许名为 \"slurp\" 的搜索引擎蜘蛛抓取，而拒绝其他的搜索引擎蜘蛛抓取 \"/cgi/\" 目录下的内容，设置方法如下：</p>\n<pre class=\"language-none\"><code class=\"language-none\">User-agent: *\nDisallow: /cgi/\nUser-agent: slurp\nDisallow:</code></pre>\n\n<p>例三：禁止任何搜索引擎抓取我的网站，设置方法如下：</p>\n<pre class=\"language-none\"><code class=\"language-none\">User-agent: *\nDisallow: /</code></pre>\n\n<p>例四：只禁止某个搜索引擎抓取我的网站如：只禁止名为 “slurp” 的搜索引擎蜘蛛抓取，设置方法如下：</p>\n<pre class=\"language-none\"><code class=\"language-none\">User-agent: slurp\nDisallow: /</code></pre>\n\n","categories":["Blog"],"tags":["Blog","SEO"]},{"title":"Arthas 之查看和修改日志级别","url":"/2020/08/2020-08-20-Arthas%E4%B9%8B%E6%9F%A5%E7%9C%8B%E5%92%8C%E4%BF%AE%E6%94%B9%E6%97%A5%E5%BF%97%E7%BA%A7%E5%88%AB/","content":"<h3 id=\"logger-命令\"><a href=\"#logger-命令\" class=\"headerlink\" title=\"logger 命令\"></a>logger 命令</h3><h4 id=\"方法介绍\"><a href=\"#方法介绍\" class=\"headerlink\" title=\"方法介绍\"></a>方法介绍</h4><p>查看 logger 信息，更新 logger level。</p>\n<p>官方文档：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9hbGliYWJhLmdpdGh1Yi5pby9hcnRoYXMvbG9nZ2VyLmh0bWw=\">https://alibaba.github.io/arthas/logger.html<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>帮助信息：</p>\n<p><img src=\"/images/2020/08/1597912401412.png\" alt=\"1597912401412\" loading=\"lazy\"></p>\n<h3 id=\"使用-logger-命令\"><a href=\"#使用-logger-命令\" class=\"headerlink\" title=\"使用 logger 命令\"></a>使用 logger 命令</h3><h4 id=\"修改默认日志级别\"><a href=\"#修改默认日志级别\" class=\"headerlink\" title=\"修改默认日志级别\"></a>修改默认日志级别</h4><p>使用 <code>logger</code> 命令打印的结果是（默认 <code> --name ROOT</code>）：</p>\n<pre class=\"language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\"><span class=\"token namespace\">[arthas@23176]</span>$ logger\n name                ROOT\n <span class=\"token keyword\">class</span>               ch<span class=\"token punctuation\">.</span>qos<span class=\"token punctuation\">.</span>logback<span class=\"token punctuation\">.</span>classic<span class=\"token punctuation\">.</span>Logger\n classLoader         sun<span class=\"token punctuation\">.</span>misc<span class=\"token punctuation\">.</span>Launcher<span class=\"token variable\">$AppClassLoader</span>@73d16e93\n classLoaderHash     73d16e93\n level               INFO\n effectiveLevel      INFO\n additivity          true\n codeSource          file:<span class=\"token operator\">/</span>E:<span class=\"token operator\">/</span>code<span class=\"token operator\">/</span>Java<span class=\"token operator\">/</span>repository<span class=\"token operator\">/</span>ch<span class=\"token operator\">/</span>qos<span class=\"token operator\">/</span>logback<span class=\"token operator\">/</span>logback<span class=\"token operator\">-</span>classic<span class=\"token operator\">/</span>1<span class=\"token punctuation\">.</span>2<span class=\"token punctuation\">.</span>3<span class=\"token operator\">/</span>logback<span class=\"token operator\">-</span>classic<span class=\"token operator\">-</span>1<span class=\"token punctuation\">.</span>2<span class=\"token punctuation\">.</span>3<span class=\"token punctuation\">.</span>jar\n appenders           name            CONSOLE\n                     <span class=\"token keyword\">class</span>           ch<span class=\"token punctuation\">.</span>qos<span class=\"token punctuation\">.</span>logback<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>ConsoleAppender\n                     classLoader     sun<span class=\"token punctuation\">.</span>misc<span class=\"token punctuation\">.</span>Launcher<span class=\"token variable\">$AppClassLoader</span>@73d16e93\n                     classLoaderHash 73d16e93\n                     target          System<span class=\"token punctuation\">.</span>out\n                     name            FILE\n                     <span class=\"token keyword\">class</span>           ch<span class=\"token punctuation\">.</span>qos<span class=\"token punctuation\">.</span>logback<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>rolling<span class=\"token punctuation\">.</span>RollingFileAppender\n                     classLoader     sun<span class=\"token punctuation\">.</span>misc<span class=\"token punctuation\">.</span>Launcher<span class=\"token variable\">$AppClassLoader</span>@73d16e93\n                     classLoaderHash 73d16e93\n                     file            C:\\Users\\HZWEIY~1\\AppData\\Local\\Temp\\<span class=\"token operator\">/</span>spring<span class=\"token punctuation\">.</span>log\n                     name            INFO_FILE\n                     <span class=\"token keyword\">class</span>           ch<span class=\"token punctuation\">.</span>qos<span class=\"token punctuation\">.</span>logback<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>rolling<span class=\"token punctuation\">.</span>RollingFileAppender\n                     classLoader     sun<span class=\"token punctuation\">.</span>misc<span class=\"token punctuation\">.</span>Launcher<span class=\"token variable\">$AppClassLoader</span>@73d16e93\n                     classLoaderHash 73d16e93\n                     file            <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>log<span class=\"token operator\">/</span>info<span class=\"token punctuation\">.</span>log\n                     name            ERROR_FILE\n                     <span class=\"token keyword\">class</span>           ch<span class=\"token punctuation\">.</span>qos<span class=\"token punctuation\">.</span>logback<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>rolling<span class=\"token punctuation\">.</span>RollingFileAppender\n                     classLoader     sun<span class=\"token punctuation\">.</span>misc<span class=\"token punctuation\">.</span>Launcher<span class=\"token variable\">$AppClassLoader</span>@73d16e93\n                     classLoaderHash 73d16e93\n                     file            <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>log<span class=\"token operator\">/</span>error<span class=\"token punctuation\">.</span>log</code></pre>\n\n<p>修改日志级别为 <code>debug</code>：</p>\n<pre class=\"language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\"><span class=\"token namespace\">[arthas@23176]</span>$ logger <span class=\"token operator\">--</span>name ROOT <span class=\"token operator\">--</span>level debug\nUpdate logger level success<span class=\"token punctuation\">.</span></code></pre>\n\n<h4 id=\"修改方法日志级别\"><a href=\"#修改方法日志级别\" class=\"headerlink\" title=\"修改方法日志级别\"></a>修改方法日志级别</h4><p>查看指定类的 logger 信息：</p>\n<pre class=\"language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\"><span class=\"token namespace\">[arthas@23176]</span>$ logger  <span class=\"token operator\">-</span>n sample<span class=\"token punctuation\">.</span>mybatis<span class=\"token punctuation\">.</span>mapper<span class=\"token punctuation\">.</span>CompanyMapper\n name                sample<span class=\"token punctuation\">.</span>mybatis<span class=\"token punctuation\">.</span>mapper<span class=\"token punctuation\">.</span>CompanyMapper\n <span class=\"token keyword\">class</span>               ch<span class=\"token punctuation\">.</span>qos<span class=\"token punctuation\">.</span>logback<span class=\"token punctuation\">.</span>classic<span class=\"token punctuation\">.</span>Logger\n classLoader         sun<span class=\"token punctuation\">.</span>misc<span class=\"token punctuation\">.</span>Launcher<span class=\"token variable\">$AppClassLoader</span>@73d16e93\n classLoaderHash     73d16e93\n level               null\n effectiveLevel      DEBUG\n additivity          true\n codeSource          file:<span class=\"token operator\">/</span>E:<span class=\"token operator\">/</span>code<span class=\"token operator\">/</span>Java<span class=\"token operator\">/</span>repository<span class=\"token operator\">/</span>ch<span class=\"token operator\">/</span>qos<span class=\"token operator\">/</span>logback<span class=\"token operator\">/</span>logback<span class=\"token operator\">-</span>classic<span class=\"token operator\">/</span>1<span class=\"token punctuation\">.</span>2<span class=\"token punctuation\">.</span>3<span class=\"token operator\">/</span>logback<span class=\"token operator\">-</span>classic<span class=\"token operator\">-</span>1<span class=\"token punctuation\">.</span>2<span class=\"token punctuation\">.</span>3<span class=\"token punctuation\">.</span>jar</code></pre>\n\n<p>修改日志级别：</p>\n<pre class=\"language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\"><span class=\"token namespace\">[arthas@23176]</span>$ logger  <span class=\"token operator\">-</span>n sample<span class=\"token punctuation\">.</span>mybatis<span class=\"token punctuation\">.</span>mapper<span class=\"token punctuation\">.</span>CompanyMapper <span class=\"token operator\">-</span>l debug\nUpdate logger level success<span class=\"token punctuation\">.</span></code></pre>\n\n<h3 id=\"使用-ongl-命令\"><a href=\"#使用-ongl-命令\" class=\"headerlink\" title=\"使用 ongl 命令\"></a>使用 ongl 命令</h3><h4 id=\"修改默认日志级别-1\"><a href=\"#修改默认日志级别-1\" class=\"headerlink\" title=\"修改默认日志级别\"></a>修改默认日志级别</h4><p>获取默认日志级别：</p>\n<pre class=\"language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\"><span class=\"token namespace\">[arthas@23176]</span>$ ognl <span class=\"token string\">'@org.slf4j.LoggerFactory@getLogger(\"root\")'</span>\n@Logger<span class=\"token punctuation\">[</span>\n    serialVersionUID=@Long<span class=\"token punctuation\">[</span>5454405123156820674<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    FQCN=@String<span class=\"token namespace\">[ch.qos.logback.classic.Logger]</span><span class=\"token punctuation\">,</span>\n    name=@String<span class=\"token namespace\">[ROOT]</span><span class=\"token punctuation\">,</span>\n    level=@Level<span class=\"token namespace\">[INFO]</span><span class=\"token punctuation\">,</span>\n    effectiveLevelInt=@Integer<span class=\"token punctuation\">[</span>20000<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    parent=null<span class=\"token punctuation\">,</span>\n    childrenList=@CopyOnWriteArrayList<span class=\"token namespace\">[isEmpty=false;size=3]</span><span class=\"token punctuation\">,</span>\n    aai=@AppenderAttachableImpl<span class=\"token namespace\">[ch.qos.logback.core.spi.AppenderAttachableImpl@3a0771d0]</span><span class=\"token punctuation\">,</span>\n    additive=@Boolean<span class=\"token namespace\">[true]</span><span class=\"token punctuation\">,</span>\n    loggerContext=@LoggerContext<span class=\"token namespace\">[ch.qos.logback.classic.LoggerContext[default]]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span></code></pre>\n\n<p>修改日志级别为 <code>debug</code>：</p>\n<pre class=\"language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\"><span class=\"token namespace\">[arthas@23176]</span>$ ognl <span class=\"token string\">'@org.slf4j.LoggerFactory@getLogger(\"root\").setLevel(@ch.qos.logback.classic.Level@DEBUG)'</span>\nnull</code></pre>\n\n<h4 id=\"修改方法日志级别-1\"><a href=\"#修改方法日志级别-1\" class=\"headerlink\" title=\"修改方法日志级别\"></a>修改方法日志级别</h4><p>获取方法日志级别：</p>\n<pre class=\"language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\"><span class=\"token namespace\">[arthas@23176]</span>$ ognl <span class=\"token string\">'@sample.mybatis.SampleXmlApplication@log'</span>\n@Logger<span class=\"token punctuation\">[</span>\n    serialVersionUID=@Long<span class=\"token punctuation\">[</span>5454405123156820674<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    FQCN=@String<span class=\"token namespace\">[ch.qos.logback.classic.Logger]</span><span class=\"token punctuation\">,</span>\n    name=@String<span class=\"token namespace\">[sample.mybatis.SampleXmlApplication]</span><span class=\"token punctuation\">,</span>\n    level=null<span class=\"token punctuation\">,</span>\n    effectiveLevelInt=@Integer<span class=\"token punctuation\">[</span>20000<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    parent=@Logger<span class=\"token namespace\">[Logger[sample.mybatis]]</span><span class=\"token punctuation\">,</span>\n    childrenList=null<span class=\"token punctuation\">,</span>\n    aai=null<span class=\"token punctuation\">,</span>\n    additive=@Boolean<span class=\"token namespace\">[true]</span><span class=\"token punctuation\">,</span>\n    loggerContext=@LoggerContext<span class=\"token namespace\">[ch.qos.logback.classic.LoggerContext[default]]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span></code></pre>\n\n<p>修改日志级别：</p>\n<pre class=\"language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\"><span class=\"token namespace\">[arthas@23176]</span>$ ognl <span class=\"token string\">'@sample.mybatis.SampleXmlApplication@log.setLevel(@ch.qos.logback.classic.Level@DEBUG)'</span>\nnull</code></pre>\n\n<h4 id=\"查看日志配置\"><a href=\"#查看日志配置\" class=\"headerlink\" title=\"查看日志配置\"></a>查看日志配置</h4><pre class=\"language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\"><span class=\"token namespace\">[arthas@23176]</span>$ ognl <span class=\"token string\">'@org.slf4j.LoggerFactory@getLogger(\"root\").loggerContext.objectMap'</span>\n@HashMap<span class=\"token punctuation\">[</span>\n    @String<span class=\"token namespace\">[EVALUATOR_MAP]</span>:@HashMap<span class=\"token namespace\">[isEmpty=true;size=0]</span><span class=\"token punctuation\">,</span>\n    @String<span class=\"token namespace\">[RFA_FILENAME_PATTERN_COLLISION_MAP]</span>:@HashMap<span class=\"token namespace\">[isEmpty=false;size=3]</span><span class=\"token punctuation\">,</span>\n    @String<span class=\"token namespace\">[PATTERN_RULE_REGISTRY]</span>:@HashMap<span class=\"token namespace\">[isEmpty=false;size=3]</span><span class=\"token punctuation\">,</span>\n    @String<span class=\"token namespace\">[CONFIGURATION_WATCH_LIST]</span>:@ConfigurationWatchList<span class=\"token namespace\">[ch.qos.logback.core.joran.spi.ConfigurationWatchList@68ec0e24]</span><span class=\"token punctuation\">,</span>\n    @String<span class=\"token namespace\">[org.springframework.boot.logging.LoggingSystem]</span>:@Object<span class=\"token namespace\">[java.lang.Object@5336a68d]</span><span class=\"token punctuation\">,</span>\n    @String<span class=\"token namespace\">[RECONFIGURE_ON_CHANGE_TASK]</span>:@ReconfigureOnChangeTask<span class=\"token namespace\">[ReconfigureOnChangeTask(born:1597910258119)]</span><span class=\"token punctuation\">,</span>\n    @String<span class=\"token namespace\">[FA_FILENAME_COLLISION_MAP]</span>:@HashMap<span class=\"token namespace\">[isEmpty=false;size=3]</span><span class=\"token punctuation\">,</span>\n    @String<span class=\"token namespace\">[SAFE_JORAN_CONFIGURATION]</span>:@ArrayList<span class=\"token namespace\">[isEmpty=false;size=135]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span></code></pre>\n\n<p>查看日志配置文件加载位置：</p>\n<pre class=\"language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\"><span class=\"token namespace\">[arthas@23176]</span>$ ognl <span class=\"token string\">'#map1=@org.slf4j.LoggerFactory@getLogger(\"root\").loggerContext.objectMap, #map1.get(\"CONFIGURATION_WATCH_LIST\")'</span>\n@ConfigurationWatchList<span class=\"token punctuation\">[</span>\n    mainURL=@URL<span class=\"token namespace\">[file:/C:/Codes/JavaWorkSpace/workspace48/arthas-demo/target/classes/logback.xml]</span><span class=\"token punctuation\">,</span>\n    fileWatchList=@ArrayList<span class=\"token namespace\">[isEmpty=false;size=1]</span><span class=\"token punctuation\">,</span>\n    lastModifiedList=@ArrayList<span class=\"token namespace\">[isEmpty=false;size=1]</span><span class=\"token punctuation\">,</span>\n    noContextWarning=@Integer<span class=\"token punctuation\">[</span>0<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    context=@LoggerContext<span class=\"token namespace\">[ch.qos.logback.classic.LoggerContext[default]]</span><span class=\"token punctuation\">,</span>\n    declaredOrigin=@ConfigurationWatchList<span class=\"token namespace\">[ch.qos.logback.core.joran.spi.ConfigurationWatchList@68ec0e24]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span></code></pre>\n\n","categories":["Java","Arthas"],"tags":["Java","Java诊断","Arthas"]},{"title":"Arthas 之根据输入查找命令执行类","url":"/2020/08/2020-08-17-Arthas%E4%B9%8B%E6%A0%B9%E6%8D%AE%E8%BE%93%E5%85%A5%E6%9F%A5%E6%89%BE%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%B1%BB/","content":"<p>本文介绍 Arthas 命令路由的整个过程，包括如何注册命令、如何读取客户端的输入、如何根据输入找到对应的命令执行类。最后以一个基础命令 help 为例，简要介绍命令执行类是如何执行，如何接收参数，以及如何向客户端返回数据的。</p>\n<h3 id=\"在ShellServer中注册命令\"><a href=\"#在ShellServer中注册命令\" class=\"headerlink\" title=\"在ShellServer中注册命令\"></a>在 ShellServer 中注册命令</h3><p>ShellServer 是与命令行交互的服务端的核心类，启动 Arthas 服务端的整个过程（<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvYXJ0aGFzL2Jsb2IvbWFzdGVyL2NvcmUvc3JjL21haW4vamF2YS9jb20vdGFvYmFvL2FydGhhcy9jb3JlL3NlcnZlci9BcnRoYXNCb290c3RyYXAuamF2YQ==\">com.taobao.arthas.core.server.ArthasBootstrap<i class=\"fa fa-external-link-alt\"></i></span> 类的 bind () 方法）都是围绕着 ShellServer 进行的。</p>\n<p>ShellServer 是开源项目 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2VjbGlwc2UtdmVydHgvdmVydC54\">vert.x<i class=\"fa fa-external-link-alt\"></i></span> 提供的，Arthas 仅在此之上进行了少量的二次开发。</p>\n<p>在 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvYXJ0aGFzL2Jsb2IvbWFzdGVyL2NvcmUvc3JjL21haW4vamF2YS9jb20vdGFvYmFvL2FydGhhcy9jb3JlL3NlcnZlci9BcnRoYXNCb290c3RyYXAuamF2YQ==\">ArthasBootstrap<i class=\"fa fa-external-link-alt\"></i></span>&nbsp;类的 bind () 方法中，首先通过一个自建的类 <code>BuiltinCommandPack</code> 来读取所有的命令类：</p>\n<p><img src=\"/images/2020/08/1597663881528.png\" alt=\"1597663881528\" loading=\"lazy\"></p>\n<p>而这个 <code>BuiltinCommandPack</code> 是怎样运转的呢？非常简单，仅仅是将一个个类添加到一个 list 里而已。</p>\n<p>见 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvYXJ0aGFzL2Jsb2IvbWFzdGVyL2NvcmUvc3JjL21haW4vamF2YS9jb20vdGFvYmFvL2FydGhhcy9jb3JlL2NvbW1hbmQvQnVpbHRpbkNvbW1hbmRQYWNrLmphdmE=\">BuiltinCommandPack.java<i class=\"fa fa-external-link-alt\"></i></span>：</p>\n<p><img src=\"/images/2020/08/1597663968735.png\" alt=\"1597663968735\" loading=\"lazy\"></p>\n<p>接着将所有的 CommandResolver 都调用 ShellServer 的 registerCommandResolver () 方法注册进 ShellServer，整个命令注册的过程就完成了：</p>\n<p><img src=\"/images/2020/08/1597664133197.png\" alt=\"1597664133197\" loading=\"lazy\"></p>\n<h3 id=\"读取客户端的输入\"><a href=\"#读取客户端的输入\" class=\"headerlink\" title=\"读取客户端的输入\"></a>读取客户端的输入</h3><p>真正接收客户端输入的是 ShellServer 中注册的 TermServer，Arthas 默认注册了两个 TermServer：</p>\n<ul>\n<li>提供 Telnet 客户端的 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvYXJ0aGFzL2Jsb2IvbWFzdGVyL2NvcmUvc3JjL21haW4vamF2YS9jb20vdGFvYmFvL2FydGhhcy9jb3JlL3NoZWxsL3Rlcm0vaW1wbC9UZWxuZXRUZXJtU2VydmVyLmphdmE=\">TelnetTermServer<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li> 提供 WebSocket 客户端的 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvYXJ0aGFzL2Jsb2IvbWFzdGVyL2NvcmUvc3JjL21haW4vamF2YS9jb20vdGFvYmFvL2FydGhhcy9jb3JlL3NoZWxsL3Rlcm0vaW1wbC9IdHRwVGVybVNlcnZlci5qYXZh\">HttpTermServer<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<p>见 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvYXJ0aGFzL2Jsb2IvbWFzdGVyL2NvcmUvc3JjL21haW4vamF2YS9jb20vdGFvYmFvL2FydGhhcy9jb3JlL3NlcnZlci9BcnRoYXNCb290c3RyYXAuamF2YQ==\">ArthasBootstrap<i class=\"fa fa-external-link-alt\"></i></span> 类的 bind () 方法：</p>\n<p><img src=\"/images/2020/08/1597664402161.png\" alt=\"1597664402161\" loading=\"lazy\"></p>\n<p>这两个 TermServer 的实现在读取客户端输入的部分是一样的：</p>\n<p><img src=\"/images/2020/08/1597664489423.png\" alt=\"1597664489423\" loading=\"lazy\"></p>\n<p>客户端的输入到来时，通过 TermServer 来 handle，而这个 TermServer 是哪儿来的呢？是从 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvYXJ0aGFzL2Jsb2IvbWFzdGVyL2NvcmUvc3JjL21haW4vamF2YS9jb20vdGFvYmFvL2FydGhhcy9jb3JlL3NoZWxsL3Rlcm0vaW1wbC9IdHRwVGVybVNlcnZlci5qYXZh\">ShellServerImpl<i class=\"fa fa-external-link-alt\"></i></span> 中传来的 TermServerTermHandler。</p>\n<p>而这个 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvYXJ0aGFzL2Jsb2IvbWFzdGVyL2NvcmUvc3JjL21haW4vamF2YS9jb20vdGFvYmFvL2FydGhhcy9jb3JlL3NoZWxsL2hhbmRsZXJzL3NlcnZlci9UZXJtU2VydmVyVGVybUhhbmRsZXIuamF2YQ==\">TermServerTermHandler<i class=\"fa fa-external-link-alt\"></i></span> 是怎样 handle 的呢？调用 ShellServer 的 handleTerm () 方法。</p>\n<p><img src=\"/images/2020/08/1597665051394.png\" alt=\"1597665051394\" loading=\"lazy\"></p>\n<p>在这里，一个 session 就是一个客户端的连接（这很容易理解），而 ShellImpl 的 readline () 方法，就是读取客户端输入的方法。见：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvYXJ0aGFzL2Jsb2IvbWFzdGVyL2NvcmUvc3JjL21haW4vamF2YS9jb20vdGFvYmFvL2FydGhhcy9jb3JlL3NoZWxsL2ltcGwvU2hlbGxJbXBsLmphdmE=\">ShellImpl<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p><img src=\"/images/2020/08/1597665260376.png\" alt=\"1597665260376\" loading=\"lazy\"></p>\n<h3 id=\"查找对应的命令执行类\"><a href=\"#查找对应的命令执行类\" class=\"headerlink\" title=\"查找对应的命令执行类\"></a>查找对应的命令执行类</h3><p>ShellImpl 的 readline () 方法，最终将客户端的输入转换为 String，交给 ShellLineHandler 的 handle () 方法来处理。</p>\n<p>在 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvYXJ0aGFzL2Jsb2IvbWFzdGVyL2NvcmUvc3JjL21haW4vamF2YS9jb20vdGFvYmFvL2FydGhhcy9jb3JlL3NoZWxsL2hhbmRsZXJzL3NoZWxsL1NoZWxsTGluZUhhbmRsZXIuamF2YQ==\">ShellLineHandler<i class=\"fa fa-external-link-alt\"></i></span> 的 handle () 方法中，首先把 String 类型的输入转换为第三方组件 CLI 中的 CliToken 的 List：</p>\n<p><img src=\"/images/2020/08/1597665436179.png\" alt=\"1597665436179\" loading=\"lazy\"></p>\n<p>在 List<clitoken> 中，first 是输入的命令，而剩余部分则是命令的参数。在拿到输入的命令后，先做一些判断，处理几个内建命令：</clitoken></p>\n<p><img src=\"/images/2020/08/1597665536086.png\" alt=\"1597665536086\" loading=\"lazy\"></p>\n<ul>\n<li>输入的是 exit、logout 或 quit，将会直接关闭客户端。</li>\n<li>输入的是 jobs，将会返回当前正在后台执行的异步任务。</li>\n<li>输入的是 fg，将会将暂停的异步任务拉到前台执行。</li>\n<li>输入的是 bg，将会将暂停的异步任务放到后台执行。</li>\n<li>输入的是 kill，将会强制终止所有<span class=\"exturl\" data-url=\"aHR0cHM6Ly9hbGliYWJhLmdpdGh1Yi5pby9hcnRoYXMvYXN5bmMuaHRtbA==\">异步任务<i class=\"fa fa-external-link-alt\"></i></span>。</li>\n</ul>\n<p>如果输入的不是这些关键词，则开始创建 Job。</p>\n<p>创建 Job 又是一个非常绕的过程，从 ShellLineHandler.createJob () 走到 ShellImpl.createJob () 再走到 JobControllerImpl.createJob ()。</p>\n<p>见：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvYXJ0aGFzL2Jsb2IvbWFzdGVyL2NvcmUvc3JjL21haW4vamF2YS9jb20vdGFvYmFvL2FydGhhcy9jb3JlL3NoZWxsL3N5c3RlbS9pbXBsL0pvYkNvbnRyb2xsZXJJbXBsLmphdmE=\">JobControllerImpl.java<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p><img src=\"/images/2020/08/1597665729558.png\" alt=\"1597665729558\" loading=\"lazy\"></p>\n<p>主要是调用 createProcess () 方法创建 Process，判断是在前台执行还是在后台执行，然后用 Process 生成 Job。</p>\n<p>核心的 createProcess () 方法：</p>\n<p><img src=\"/images/2020/08/1597665851789.png\" alt=\"1597665851789\" loading=\"lazy\"></p>\n<p>然后到了将输入路由到命令执行类的地方了！</p>\n<p>开始看 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvYXJ0aGFzL2Jsb2IvbWFzdGVyL2NvcmUvc3JjL21haW4vamF2YS9jb20vdGFvYmFvL2FydGhhcy9jb3JlL3NoZWxsL3N5c3RlbS9pbXBsL0ludGVybmFsQ29tbWFuZE1hbmFnZXIuamF2YQ==\">InternalCommandManager<i class=\"fa fa-external-link-alt\"></i></span> 的 getCommand () 方法：</p>\n<p><img src=\"/images/2020/08/1597665933730.png\" alt=\"1597665933730\" loading=\"lazy\"></p>\n<p>到这里，根据客户端的输入寻找对应的命令执行类的整个流程终于结束了，接下来就是各个命令执行类自己发挥的时刻了。</p>\n<h3 id=\"help命令的执行过程\"><a href=\"#help命令的执行过程\" class=\"headerlink\" title=\"help命令的执行过程\"></a>help 命令的执行过程</h3><p>下面我以基础命令 help 为例，简要介绍命令执行类是如何执行，如何接收参数，以及如何向客户端返回数据的。</p>\n<p>help 命令对应的命令执行类是 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvYXJ0aGFzL2Jsb2IvbWFzdGVyL2NvcmUvc3JjL21haW4vamF2YS9jb20vdGFvYmFvL2FydGhhcy9jb3JlL2NvbW1hbmQvYmFzaWMxMDAwL0hlbHBDb21tYW5kLmphdmE=\">HelpCommand<i class=\"fa fa-external-link-alt\"></i></span>，其中 process () 方法是命令执行类的核心方法：</p>\n<p><img src=\"/images/2020/08/1597666134279.png\" alt=\"1597666134279\" loading=\"lazy\"></p>\n<p>可以看到，help 命令的 process () 方法非常简单，就是获取所有的命令，生成 String 类型的文本。</p>\n<p>不过这里有一点特殊之处，help 指令可以输入参数。根据参数中传来的命令生成的命令帮助内容。</p>\n<ul>\n<li>如果参数是空，返回 mainHelp () 方法生成的全局帮助内容</li>\n<li>如果参数不为空，则返回 commandHelp () 方法</li>\n</ul>\n<p>那么，help 指令是如何接收参数的呢？奥妙就在下面的这个方法里了：</p>\n<p><img src=\"/images/2020/08/1597666365077.png\" alt=\"1597666365077\" loading=\"lazy\"></p>\n<p>使用 @Argument 注解的方法用来接收参数，在这里就是把输入的内容放到 cmd 这个变量里，然后 findCommand () 方法去判断 cmd 变量的内容是否有命令与之相匹配：</p>\n<p><img src=\"/images/2020/08/1597666394962.png\" alt=\"1597666394962\" loading=\"lazy\"></p>\n<p>另外，输出到客户端的内容并不是简单的文本，而是通过淘宝的 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvdGV4dC11aQ==\">text-ui<i class=\"fa fa-external-link-alt\"></i></span> 包进行了排版。</p>\n<p>见 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvYXJ0aGFzL2Jsb2IvbWFzdGVyL2NvcmUvc3JjL21haW4vamF2YS9jb20vdGFvYmFvL2FydGhhcy9jb3JlL2NvbW1hbmQvdmlldy9IZWxwVmlldy5qYXZh\">HelpView.java<i class=\"fa fa-external-link-alt\"></i></span>：</p>\n<p><img src=\"/images/2020/08/1597666484624.png\" alt=\"1597666484624\" loading=\"lazy\"></p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3M/X19iaXo9TXpVNE9EYzBPVGsyTmc9PSZhbXA7bWlkPTIyNDc0ODM5MDcmYW1wO2lkeD0xJmFtcDtzbj0wNmIwZGU1YjY0OTU1ZGZkMzlmNjA1YjZjMjJlMzMxZSZhbXA7Y2hrc209ZmRkOTRmZTJjYWFlYzZmNGM4ZWZlMzY1M2VmNDNjYTM4NzMyZTBmOGE3Y2VmMDYwOTc4NWRkZDIwM2QxMWQzOGY0NjViZWRmZWM3ZCZhbXA7bXBzaGFyZT0xJmFtcDtzY2VuZT0xJmFtcDtzcmNpZD0wODE1aWNzUWFrblQzVjBUY3FjV2Zkd1MmYW1wO3NoYXJlcl9zaGFyZXRpbWU9MTU5NzQyMTE4OTAyMSZhbXA7c2hhcmVyX3NoYXJlaWQ9NDljNjExMjFmOTIwMDQ5MDJiZWNlYTcwNTcxNmNjYTcmYW1wO2tleT1kZTg3OWQxZDA5ZTJhOGI3Mjg0NmY4MzA4OTA3NThkYWY3Njc3ZDRiODNlOWU1YmZkNzkyMGIwYWU2NDdlNzI0ZmQ5MmIyMjg1MjUwNDlhMjA3NjIzMGViNmMwNWFiNmRmZWUxODAyODY1MmRmZjkxYzkyODllNTNiYzY5NDk2MzZjN2RlYTRhODk1MzMwMzY3ZjZmMmM2NDk2Y2U0NjdmYzQ2ZjBjYjcwZWVkNmQ4YmJhMjYwM2NhMGUxMGVmZDM2ZWQzMmVlN2UzNzU2MDAxM2E4MjZiOTU3NGJmYWMzODJhODU2ODA2YTI4NTUzMTk0YTdhNmYxODYzMWI0MzA1JmFtcDthc2NlbmU9MSZhbXA7dWluPU1UZzBORGsxTlRjd01nPT0mYW1wO2RldmljZXR5cGU9V2luZG93cysxMCt4NjQmYW1wO3ZlcnNpb249NjIwOTA1MjkmYW1wO2xhbmc9emhfQ04mYW1wO2V4cG9ydGtleT1BZDV4ekFOY1ZlTXgyeE9rNkN6ZWo2RT0mYW1wO3Bhc3NfdGlja2V0PXZtcWZ6NW9nUjEvd2dBdmp1eGtqSXE5bHBEa3NyeFV0NURsQk96WHJnRDJpdFJQS0FwT3MvcDhHdXJsbHZiem8=\">参考<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n","categories":["Java","Arthas"],"tags":["Java","Java诊断","Arthas"]},{"title":"博客网站管理员工具","url":"/2020/08/2020-08-18-%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E7%AE%A1%E7%90%86%E5%91%98%E5%B7%A5%E5%85%B7/","content":"<p>网站管理员工具需要对网站域名所有权进行验证，通常是通过上传指定文件、增加 META 或者修改网站 DNS 来验证管理员身份，通过验证后，网站管理员可以查询到自己网站的各类统计信息。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"网站管理员工具\"><a href=\"#网站管理员工具\" class=\"headerlink\" title=\"网站管理员工具\"></a>网站管理员工具</h3><h4 id=\"Google网站管理员工具\"><a href=\"#Google网站管理员工具\" class=\"headerlink\" title=\"Google网站管理员工具\"></a>Google 网站管理员工具</h4><p>设置 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS93ZWJtYXN0ZXJzL3Rvb2xz\">Google 网站站长工具<i class=\"fa fa-external-link-alt\"></i></span>的验证字符串 用于提交站点地图。</p>\n<p>登录到 Google 网站站长工具，然后转到验证方法并选择 <code>HTML Tag</code>，您将获得一些代码：</p>\n<pre class=\"language-none\"><code class=\"language-none\">&lt;meta name=\"google-site-verification\" content=\"XXXXXXXXXXXXXXXXXXXXXXX\"&gt;</code></pre>\n\n<p>复制 <code>XXXXXXXXXXXXXXXXXXXXXXX</code> 的价值 <code>content</code> 的关键。<br>编辑主题配置文件并添加或更改 <code>google_site_verification</code> 部分：</p>\n<pre class=\"language-yaml\" data-language=\"yaml\"><div class=\"caption\"><span>next/_config.yml</span></div><code class=\"language-yaml\"><span class=\"token key atrule\">google_site_verification</span><span class=\"token punctuation\">:</span> XXXXXXXXXXXXXXXXXXXXXXX</code></pre>\n\n<h4 id=\"Bing网站管理员工具\"><a href=\"#Bing网站管理员工具\" class=\"headerlink\" title=\"Bing网站管理员工具\"></a>Bing 网站管理员工具</h4><p>设置 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmluZy5jb20vd2VibWFzdGVyLw==\">Bing 网站管理员工具<i class=\"fa fa-external-link-alt\"></i></span>的验证字符串 用于提交站点地图。</p>\n<p>登录到 Bing 网站管理员工具，然后转到验证方法并选择 <code>HTML Tag</code>，您将获得一些代码：</p>\n<pre class=\"language-none\"><code class=\"language-none\">&lt;meta name=\"msvalidate.01\" content=\"XXXXXXXXXXXXXXXXXXXXXXX\"&gt;</code></pre>\n\n<p>复制 <code>XXXXXXXXXXXXXXXXXXXXXXX</code> 的价值 <code>content</code> 的关键。<br>编辑主题配置文件并添加或更改 <code>bing_site_verification</code> 部分：</p>\n<pre class=\"language-yaml\" data-language=\"yaml\"><div class=\"caption\"><span>next/_config.yml</span></div><code class=\"language-yaml\"><span class=\"token key atrule\">bing_site_verification</span><span class=\"token punctuation\">:</span> XXXXXXXXXXXXXXXXXXXXXXX</code></pre>\n\n<h4 id=\"Yandex网站管理员工具\"><a href=\"#Yandex网站管理员工具\" class=\"headerlink\" title=\"Yandex网站管理员工具\"></a>Yandex 网站管理员工具</h4><p>设置 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93ZWJtYXN0ZXIueWFuZGV4LnJ1Lw==\">Yandex 网站管理员工具<i class=\"fa fa-external-link-alt\"></i></span>的验证字符串 用于提交站点地图。</p>\n<p>登录到 Yandex 网站管理员工具，然后转到验证方法并选择 <code>Meta Tag</code>，您将获得一些代码：</p>\n<pre class=\"language-none\"><code class=\"language-none\">&lt;meta name=\"yandex-verification\" content=\"XXXXXXXXXXXXXXXXXXXXXXX\"&gt;</code></pre>\n\n<p>复制 <code>XXXXXXXXXXXXXXXXXXXXXXX</code> 的价值 <code>content</code> 的关键。<br>编辑主题配置文件并添加或更改 <code>yandex_site_verification</code> 部分：</p>\n<pre class=\"language-yaml\" data-language=\"yaml\"><div class=\"caption\"><span>next/_config.yml</span></div><code class=\"language-yaml\"><span class=\"token key atrule\">yandex_site_verification</span><span class=\"token punctuation\">:</span> XXXXXXXXXXXXXXXXXXXXXXX</code></pre>\n\n<h4 id=\"百度网站管理员工具\"><a href=\"#百度网站管理员工具\" class=\"headerlink\" title=\"百度网站管理员工具\"></a>百度网站管理员工具</h4><p>设置<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aXl1YW4uYmFpZHUuY29tL3NpdGUv\">百度网站管理员工具<i class=\"fa fa-external-link-alt\"></i></span>的验证字符串 用于提交站点地图。</p>\n<p>登录百度网站管理员工具，转到验证方法并选择 <code>HTML Tag</code>，您将获得一些代码：</p>\n<pre class=\"language-none\"><code class=\"language-none\">&lt;meta name=\"baidu-site-verification\" content=\"XXXXXXXXXXXXXXXXXXXXXXX\"&gt;</code></pre>\n\n<p>复制 <code>XXXXXXXXXXXXXXXXXXXXXXX</code> 的价值 <code>content</code> 的关键。<br>编辑主题配置文件并添加或更改 <code>baidu_site_verification</code> 部分：</p>\n<pre class=\"language-yaml\" data-language=\"yaml\"><div class=\"caption\"><span>next/_config.yml</span></div><code class=\"language-yaml\"><span class=\"token key atrule\">baidu_site_verification</span><span class=\"token punctuation\">:</span> XXXXXXXXXXXXXXXXXXXXXXX</code></pre>\n\n<p>NexT 还支持百度推送，以便博客将 URL 自动推送到百度，这对于 SEO 非常有用。您可以通过将值设置 <code>baidu_push</code> 为 <code>true</code>in 来启用它主题配置文件。</p>\n<pre class=\"language-yaml\" data-language=\"yaml\"><div class=\"caption\"><span>next/_config.yml</span></div><code class=\"language-yaml\"><span class=\"token key atrule\">baidu_push</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></code></pre>\n\n<h3 id=\"网站管理员工具优化\"><a href=\"#网站管理员工具优化\" class=\"headerlink\" title=\"网站管理员工具优化\"></a>网站管理员工具优化</h3><h4 id=\"多个-h1-标记\"><a href=\"#多个-h1-标记\" class=\"headerlink\" title=\"多个 h1 标记\"></a>多个 h1 标记</h4><p>通过 Bing 的 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmluZy5jb20vd2VibWFzdGVycy91cmxpbnNwZWN0aW9uP3NpdGVVcmw9aHR0cDovL2p1ZWVlLmdpdGh1Yi5pby8=\">URL 检查<i class=\"fa fa-external-link-alt\"></i></span>，可以发现” 多个 h1 标记 “ 的问题：</p>\n<p><img src=\"/images/2020/08/1597744034857.png\" alt=\"1597744034857\" loading=\"lazy\"></p>\n<p>发现是由于站点标题和博客标题都采用了 h1 标记导致的。</p>\n<p>H1 标签是用来修饰主标题的，如果用多个 H1 标签，就可能会让搜索引擎不知道你这个网站的主要标题内容是什么，然后就可能会淡化标题关键词的排名。</p>\n<p>需要修改 <code>node_modules\\hexo-theme-next\\layout\\_partials\\header\\brand.njk</code> 的 <code>site-title</code> 为 h2：</p>\n<p><img src=\"/images/2020/08/1597744215606.png\" alt=\"1597744215606\" loading=\"lazy\"></p>\n","categories":["Blog"],"tags":["Blog","SEO"]},{"title":"通过 UnxUtils 在 Windows 上使用 Unix 命令","url":"/2020/08/2020-08-21-%E9%80%9A%E8%BF%87UnxUtils%E5%9C%A8Windows%E4%B8%8A%E4%BD%BF%E7%94%A8Unix%E5%91%BD%E4%BB%A4/","content":"<p>UnxUtils 是一个可以支持<strong>在 Windows 下使用 linux 命令的工具</strong>，用习惯了 linux 之后，感觉 Windows 的 dos 命令实在是太难用了，发现了这个工具，非常的小，装了它之后，把路径加入到环境变量中就支持常用的 linux 命令了。</p>\n<a id=\"more\"></a>\n\n<p>介绍：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvVW54VXRpbHM=\">https://en.wikipedia.org/wiki/UnxUtils<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>下载：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zb3VyY2Vmb3JnZS5uZXQvcHJvamVjdHMvdW54dXRpbHMv\">https://sourceforge.net/projects/unxutils/<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>下载完成后，解压 UnxUtils.zip，然后把 UnxUtils 这个目录下的 \\usr\\local\\wbin 加入到环境变量里面就可以了。</p>\n<p><img src=\"/images/2020/08/1598008019072.png\" alt=\"1598008019072\" loading=\"lazy\"></p>\n","categories":["软件"],"tags":["软件"]},{"title":"为博客新增评论系统","url":"/2020/08/2020-08-19-%E4%B8%BA%E5%8D%9A%E5%AE%A2%E6%96%B0%E5%A2%9E%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/","content":"<h3 id=\"开启多个评论系统\"><a href=\"#开启多个评论系统\" class=\"headerlink\" title=\"开启多个评论系统\"></a>开启多个评论系统</h3><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly90aGVtZS1uZXh0LmpzLm9yZy9kb2NzL3RoaXJkLXBhcnR5LXNlcnZpY2VzL2NvbW1lbnRzLmh0bWw=\">配置参考<i class=\"fa fa-external-link-alt\"></i></span>：</p>\n<pre class=\"language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">comments</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">lazyload</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span>\n  <span class=\"token key atrule\">active</span><span class=\"token punctuation\">:</span> gitalk\n  <span class=\"token key atrule\">nav</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">gitalk</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">text</span><span class=\"token punctuation\">:</span> 登录 GitHub 评论\n      <span class=\"token key atrule\">order</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span>\n    <span class=\"token key atrule\">valine</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">text</span><span class=\"token punctuation\">:</span> 不登录进行评论\n      <span class=\"token key atrule\">order</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span></code></pre>\n\n<p>效果如下：</p>\n<p><img src=\"/images/2020/08/1597888806112.png\" alt=\"1597888806112\" loading=\"lazy\"></p>\n<h3 id=\"添加-Valine-评论系统\"><a href=\"#添加-Valine-评论系统\" class=\"headerlink\" title=\"添加 Valine 评论系统\"></a>添加 Valine 评论系统</h3><p>Valine 是基于 Leancloud 的快速，简单和高效的无后端评论系统。</p>\n<h4 id=\"注册\"><a href=\"#注册\" class=\"headerlink\" title=\"注册\"></a>注册</h4><p>创建一个帐户或登录 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWFuY2xvdWQuY24vZGFzaGJvYXJkL2xvZ2luLmh0bWwjL3NpZ25pbg==\">LeanCloud<i class=\"fa fa-external-link-alt\"></i></span>，然后单击左下角以<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWFuY2xvdWQuY24vZGFzaGJvYXJkL2FwcGxpc3QuaHRtbCMvbmV3YXBw\">创建应用程序<i class=\"fa fa-external-link-alt\"></i></span>在<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWFuY2xvdWQuY24vZGFzaGJvYXJkL2FwcGxpc3QuaHRtbCMvYXBwcw==\">仪表板中<i class=\"fa fa-external-link-alt\"></i></span>.</p>\n<p>转到您刚创建的应用程序，<code>Settings → App Keys</code> 在左下角选择，您将看到您的 APP ID 和 APP Key。</p>\n<h4 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h4><p>将值设置 <code>enable</code> 为 <code>true</code>，添加获得的 APP ID（<code>appId</code>）和 APP Key（<code>appKey</code>），然后 <code>valine</code> 在主题配置文件 如下：</p>\n<pre class=\"language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">valine</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span>\n  <span class=\"token key atrule\">appId</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># your leancloud application appid</span>\n  <span class=\"token key atrule\">appKey</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># your leancloud application appkey</span>\n  <span class=\"token key atrule\">placeholder</span><span class=\"token punctuation\">:</span> Just go go <span class=\"token comment\"># comment box placeholder</span>\n  <span class=\"token key atrule\">avatar</span><span class=\"token punctuation\">:</span> mm <span class=\"token comment\"># gravatar style</span>\n  <span class=\"token key atrule\">meta</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>nick<span class=\"token punctuation\">,</span> mail<span class=\"token punctuation\">,</span> link<span class=\"token punctuation\">]</span> <span class=\"token comment\"># Custom comment header</span>\n  <span class=\"token key atrule\">pageSize</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span> <span class=\"token comment\"># pagination size</span>\n  <span class=\"token key atrule\">visitor</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span> <span class=\"token comment\"># leancloud-counter-security is not supported for now. When visitor is set to be true, appid and appkey are recommended to be the same as leancloud_visitors' for counter compatibility. Article reading statistic https://valine.js.org/visitor.html</span>\n  <span class=\"token key atrule\">comment_count</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span> <span class=\"token comment\"># If false, comment count will only be displayed in post page, not in home page</span>\n  <span class=\"token key atrule\">recordIP</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span> <span class=\"token comment\"># Whether to record the commenter IP</span>\n  <span class=\"token key atrule\">serverURLs</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># When the custom domain name is enabled, fill it in here (it will be detected automatically by default, no need to fill in)</span></code></pre>\n\n<h4 id=\"评论效果\"><a href=\"#评论效果\" class=\"headerlink\" title=\"评论效果\"></a>评论效果</h4><p>评论输入框：</p>\n<p><img src=\"/images/2020/08/1597836434746.png\" alt=\"1597836434746\" loading=\"lazy\"></p>\n<p>评论效果：</p>\n<p><img src=\"/images/2020/08/1597888723132.png\" alt=\"1597888723132\" loading=\"lazy\"></p>\n<h3 id=\"添加-Gitalk-评论系统\"><a href=\"#添加-Gitalk-评论系统\" class=\"headerlink\" title=\"添加 Gitalk 评论系统\"></a>添加 Gitalk 评论系统</h3><p>Gitalk 是一个基于 Github issues 的评论系统。使用之前需要确保你指定的 Github 仓库是公开的，并开启了 issues 功能。如果你遇到了问题，请查看 Gitalk 的文档：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2dpdGFsay9naXRhbGslRTMlODAlODI=\">https://github.com/gitalk/gitalk。<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h4 id=\"注册-Gitalk\"><a href=\"#注册-Gitalk\" class=\"headerlink\" title=\"注册 Gitalk\"></a>注册 Gitalk</h4><p>首先，你需要注册一个新的 <strong>GitHub Application</strong> 来授权，点击<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3NldHRpbmdzL2FwcGxpY2F0aW9ucy9uZXc=\">这里<i class=\"fa fa-external-link-alt\"></i></span>注册。这样可以获取所需的 <code>client ID</code> 和 <code>client secret</code>。</p>\n<p><img src=\"/images/2020/08/1597836162033.png\" alt=\"1597836162033\" loading=\"lazy\"></p>\n<p>注册成功后，可以在 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3NldHRpbmdzL2RldmVsb3BlcnM=\">开发者页面<i class=\"fa fa-external-link-alt\"></i></span> 看到如下配置：</p>\n<p><img src=\"/images/2020/08/1597836277711.png\" alt=\"1597836277711\" loading=\"lazy\"></p>\n<h4 id=\"配置-1\"><a href=\"#配置-1\" class=\"headerlink\" title=\"配置\"></a>配置</h4><pre class=\"language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">gitalk</span><span class=\"token punctuation\">:</span>\n  <span class=\"token comment\"># 是否启用</span>\n  <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n  <span class=\"token comment\"># Github 用户名</span>\n  <span class=\"token key atrule\">github_id</span><span class=\"token punctuation\">:</span> jueee\n  <span class=\"token comment\"># Github 仓库名（需要是公开的仓库）</span>\n  <span class=\"token key atrule\">repo</span><span class=\"token punctuation\">:</span> jueee.github.io\n  <span class=\"token comment\"># Github 应用程序客户端 ID</span>\n  <span class=\"token key atrule\">client_id</span><span class=\"token punctuation\">:</span> e61b622bb2d41a9820db\n  <span class=\"token comment\"># Github 应用程序客户端密钥</span>\n  <span class=\"token key atrule\">client_secret</span><span class=\"token punctuation\">:</span> 23dafd8976002c89a46d97d426ea8e5a253dba40\n  <span class=\"token comment\"># GitHub 仓库所有者和合作者，只有这些人可以初始化 Gitalk</span>\n  <span class=\"token key atrule\">admin_user</span><span class=\"token punctuation\">:</span> jueee\n  <span class=\"token comment\"># 类似于 B 站的关灯模式</span>\n  <span class=\"token key atrule\">distraction_free_mode</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n  <span class=\"token comment\"># 如果你想让每一个参观你网站的人看到统一的语言，你可以在这里设置，</span>\n  <span class=\"token comment\"># 可选值：en, zh-CN, es-ES, fr, ru, zh-TW</span>\n  <span class=\"token key atrule\">language</span><span class=\"token punctuation\">:</span> zh<span class=\"token punctuation\">-</span>CN</code></pre>\n\n<p>【注】以上配置的 <code>github_id</code>，<code>client_id</code>，<code>client_secret</code>，<code>distraction_free_mode</code> 等配置，与官方文档不一致，需特别注意！</p>\n<h4 id=\"评论效果-1\"><a href=\"#评论效果-1\" class=\"headerlink\" title=\"评论效果\"></a>评论效果</h4><p>评论输入框：</p>\n<p><img src=\"/images/2020/08/1597888405578.png\" alt=\"1597888405578\" loading=\"lazy\"></p>\n<p>评论效果：</p>\n<p><img src=\"/images/2020/08/1597888454984.png\" alt=\"1597888454984\" loading=\"lazy\"></p>\n<p>GitHub 的 issues：</p>\n<p><img src=\"/images/2020/08/1597888501799.png\" alt=\"1597888501799\" loading=\"lazy\"></p>\n","categories":["Blog"],"tags":["Blog","HTML"]},{"title":"使用 lambda 表达式进行集合类型转换","url":"/2020/08/2020-08-24-%E4%BD%BF%E7%94%A8lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%BF%9B%E8%A1%8C%E9%9B%86%E5%90%88%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/","content":"<h3 id=\"目标类型-List\"><a href=\"#目标类型-List\" class=\"headerlink\" title=\"目标类型 List\"></a>目标类型 List</h3><h4 id=\"转-List\"><a href=\"#转-List\" class=\"headerlink\" title=\"转 List\"></a>转 List</h4><pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> list1 <span class=\"token operator\">=</span> <span class=\"token class-name\">Lists</span><span class=\"token punctuation\">.</span><span class=\"token function\">newArrayList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> list2 <span class=\"token operator\">=</span> list1<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>string <span class=\"token operator\">-&gt;</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"stream().map()处理之后：\"</span> <span class=\"token operator\">+</span> string<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n<a id=\"more\"></a>\n\n<h4 id=\"转-Map\"><a href=\"#转-Map\" class=\"headerlink\" title=\"转 Map\"></a>转 Map</h4><p>分组转换</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SystemTabMenu</span><span class=\"token punctuation\">&gt;</span></span> allList <span class=\"token operator\">=</span> <span class=\"token class-name\">Lists</span><span class=\"token punctuation\">.</span><span class=\"token function\">newArrayList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> map <span class=\"token operator\">=</span> allList<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>\n\t<span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SystemTabMenu</span><span class=\"token operator\">::</span><span class=\"token function\">getParentid</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">SystemTabMenu</span><span class=\"token operator\">::</span><span class=\"token function\">getParentid</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n<p>分组汇总</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">UploadDataStatistics</span><span class=\"token punctuation\">&gt;</span></span> allList <span class=\"token operator\">=</span> <span class=\"token class-name\">Lists</span><span class=\"token punctuation\">.</span><span class=\"token function\">newArrayList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> resultMap <span class=\"token operator\">=</span> allList<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>\n    <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">groupingBy</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UploadDataStatistics</span><span class=\"token operator\">::</span><span class=\"token function\">getDataType</span><span class=\"token punctuation\">,</span>\n                       <span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">summingInt</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UploadDataStatistics</span><span class=\"token operator\">::</span><span class=\"token function\">getSuccessnum</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n<h4 id=\"转-Map-lt-String-List-gt\"><a href=\"#转-Map-lt-String-List-gt\" class=\"headerlink\" title=\"转 Map<String, List>\"></a>转 Map&lt;String, List&gt;</h4><pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SystemTabMenu</span><span class=\"token punctuation\">&gt;</span></span> allList <span class=\"token operator\">=</span> <span class=\"token class-name\">Lists</span><span class=\"token punctuation\">.</span><span class=\"token function\">newArrayList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SystemTabMenu</span><span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> map <span class=\"token operator\">=</span> allList<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>\n\t<span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">groupingBy</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">-&gt;</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">getParentid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n<h4 id=\"过滤出一个元素\"><a href=\"#过滤出一个元素\" class=\"headerlink\" title=\"过滤出一个元素\"></a>过滤出一个元素</h4><pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">&gt;</span></span> users <span class=\"token operator\">=</span> <span class=\"token class-name\">Lists</span><span class=\"token punctuation\">.</span><span class=\"token function\">newArrayList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">User</span> match <span class=\"token operator\">=</span> users<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span> <span class=\"token operator\">-&gt;</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">findAny</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n","categories":["Java","JavaClass"],"tags":["JavaClass","Java"]},{"title":"Arthas 之热更新原理，并实现简易版热更新功能","url":"/2020/08/2020-08-26-Arthas%E4%B9%8B%E7%83%AD%E6%9B%B4%E6%96%B0%E5%8E%9F%E7%90%86%EF%BC%8C%E5%B9%B6%E5%AE%9E%E7%8E%B0%E7%AE%80%E6%98%93%E7%89%88%E7%83%AD%E6%9B%B4%E6%96%B0%E5%8A%9F%E8%83%BD/","content":"<h3 id=\"热更新原理\"><a href=\"#热更新原理\" class=\"headerlink\" title=\"热更新原理\"></a>热更新原理</h3><p>Arthas 热更新功能看起来很神奇，实际上离不开 JDK 一些 API，分别为 instrument API 与 attach API。</p>\n<a id=\"more\"></a>\n\n<h4 id=\"Instrumentation\"><a href=\"#Instrumentation\" class=\"headerlink\" title=\"Instrumentation\"></a>Instrumentation</h4><p>Java Instrumentation 是 JDK5 之后提供接口。使用这组接口，我们可以获取到正在运行 JVM 相关信息，使用这些信息我们构建相关监控程序检测 JVM。另外， 最重要我们可以<strong>替换</strong>和<strong>修改</strong>类的，这样就实现了热更新。</p>\n<p>Instrumentation 存在两种使用方式，一种为 <code>pre-main</code> 方式，这种方式需要在虚拟机参数指定 Instrumentation 程序，然后程序启动之前将会完成修改或替换类。使用方式如下:</p>\n<pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\">java -javaagent:jar Instrumentation_jar -jar xxx.jar</code></pre>\n\n<p>这种方式只能在应用启动之前生效，存在一定的局限性。</p>\n<p>JDK6 针对这种情况作出了改进，增加 <code>agent-main</code> 方式。我们可以在应用启动之后，再运行 <code>Instrumentation</code> 程序。启动之后，只有连接上相应的应用，我们才能做出相应改动，这里我们就需要使用 Java 提供 attach API。</p>\n<h4 id=\"Attach-API\"><a href=\"#Attach-API\" class=\"headerlink\" title=\"Attach API\"></a>Attach API</h4><p>Attach API 位于 tools.jar 包，可以用来连接目标 JVM。Attach API 非常简单，内部只有两个主要的类，<code>VirtualMachine</code> 与 <code>VirtualMachineDescriptor</code>。</p>\n<p><code>VirtualMachine</code> 代表一个 JVM 实例， 使用它提供 <code>attach</code> 方法，我们就可以连接上目标 JVM。</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">VirtualMachine</span> vm <span class=\"token operator\">=</span> <span class=\"token class-name\">VirtualMachine</span><span class=\"token punctuation\">.</span><span class=\"token function\">attach</span><span class=\"token punctuation\">(</span>pid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n<p><code>VirtualMachineDescriptor</code> 则是一个描述虚拟机的容器类，通过该实例我们可以获取到 JVM PID (进程 ID), 该实例主要通过  <code>VirtualMachine#list</code> 方法获取。</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">VirtualMachineDescriptor</span> descriptor <span class=\"token operator\">:</span> <span class=\"token class-name\">VirtualMachine</span><span class=\"token punctuation\">.</span><span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>descriptor<span class=\"token punctuation\">.</span><span class=\"token function\">id</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        \n<span class=\"token punctuation\">}</span></code></pre>\n\n<p>介绍完热更新涉及的相关原理，接下去使用上面 API 实现热更新功能。</p>\n<h3 id=\"实现热更新功能\"><a href=\"#实现热更新功能\" class=\"headerlink\" title=\"实现热更新功能\"></a>实现热更新功能</h3><h4 id=\"实现-agent-main\"><a href=\"#实现-agent-main\" class=\"headerlink\" title=\"实现 agent-main\"></a>实现 agent-main</h4><p>首先需要编写一个类，包含以下两个方法：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> agentmain <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> agentArgs<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Instrumentation</span> inst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>          <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> agentmain <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> agentArgs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>            <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span></code></pre>\n\n<blockquote>\n<p>上面的方法只需要实现一个即可。若两个都实现，  [1] 优先级大于 [2]，将会被优先执行。</p>\n</blockquote>\n<p>接着读取外部传入 class 文件，调用 <code>Instrumentation#redefineClasses</code>，这个方法将会使用新 class 替换当前正在运行的 class，这样我们就完成了类的修改。</p>\n<p><code>com.agent.AgentMain</code> 的代码如下：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>agent</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RandomAccessFile</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>instrument<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ClassDefinition</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>instrument<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Instrumentation</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>instrument<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">UnmodifiableClassException</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>objectweb<span class=\"token punctuation\">.</span>asm<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ClassReader</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AgentMain</span>  <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">/**\n\t * @param agentArgs 外部传入的参数，类似于 main 函数 args\n\t * @param inst\n\t */</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">agentmain</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> agentArgs<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Instrumentation</span> inst<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// 从 agentArgs 获取外部参数</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"start agentmain.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// 这里将会传入 class 文件路径</span>\n\t\t<span class=\"token class-name\">String</span> path <span class=\"token operator\">=</span> agentArgs<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token comment\">// 读取 class 文件字节码</span>\n\t\t\t<span class=\"token class-name\">RandomAccessFile</span> f <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RandomAccessFile</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> <span class=\"token string\">\"r\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">final</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bytes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> f<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\tf<span class=\"token punctuation\">.</span><span class=\"token function\">readFully</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token comment\">// 使用 asm 框架获取类名</span>\n\t\t\t<span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> clazzName <span class=\"token operator\">=</span> <span class=\"token function\">readClassName</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token comment\">// inst.getAllLoadedClasses 方法将会获取所有已加载的 class</span>\n\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span> clazz <span class=\"token operator\">:</span> inst<span class=\"token punctuation\">.</span><span class=\"token function\">getAllLoadedClasses</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token comment\">// 匹配需要替换 class</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>clazz<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>clazzName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t<span class=\"token class-name\">ClassDefinition</span> definition <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassDefinition</span><span class=\"token punctuation\">(</span>clazz<span class=\"token punctuation\">,</span> bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token comment\">// 使用指定的 class 替换当前系统正在使用 class</span>\n\t\t\t\t\tinst<span class=\"token punctuation\">.</span><span class=\"token function\">redefineClasses</span><span class=\"token punctuation\">(</span>definition<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"agentmain error.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">/**\n\t  *  使用 asm 读取类名\n     * @param bytes\n     * @return\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">readClassName</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bytes<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassReader</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClassName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\".\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<p>其中，<code>ClassReader</code> 类需要引入 Jar 包：</p>\n<pre class=\"language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>asm<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>asm<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>3.3.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n\n<h4 id=\"配置-MANIFEST-MF\"><a href=\"#配置-MANIFEST-MF\" class=\"headerlink\" title=\"配置 MANIFEST.MF\"></a>配置 MANIFEST.MF</h4><p>完成代码之后，我们还需要往 jar 包 <code>MANIFEST.MF</code> 写入以下属性。</p>\n<pre class=\"language-none\"><code class=\"language-none\">## 指定 agent-main 全名\nAgent-Class: com.agent.AgentMain\n## 设置权限，默认为 false，没有权限替换 \nclassCan-Redefine-Classes: true</code></pre>\n\n<p>使用 <code>maven-assembly-plugin</code>，将上面的属性写入文件中：</p>\n<pre class=\"language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugin</span><span class=\"token punctuation\">&gt;</span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>maven-assembly-plugin<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>3.1.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>configuration</span><span class=\"token punctuation\">&gt;</span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>finalName</span><span class=\"token punctuation\">&gt;</span></span>hotswap-jdk<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>finalName</span><span class=\"token punctuation\">&gt;</span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>appendAssemblyId</span><span class=\"token punctuation\">&gt;</span></span>false<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>appendAssemblyId</span><span class=\"token punctuation\">&gt;</span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>descriptorRefs</span><span class=\"token punctuation\">&gt;</span></span>\n\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>descriptorRef</span><span class=\"token punctuation\">&gt;</span></span>jar-with-dependencies<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>descriptorRef</span><span class=\"token punctuation\">&gt;</span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>descriptorRefs</span><span class=\"token punctuation\">&gt;</span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>archive</span><span class=\"token punctuation\">&gt;</span></span>\n\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>manifestEntries</span><span class=\"token punctuation\">&gt;</span></span>\n\t\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Agent-Class</span><span class=\"token punctuation\">&gt;</span></span>com.agent.AgentMain<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Agent-Class</span><span class=\"token punctuation\">&gt;</span></span>\n\t\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Can-Redefine-Classes</span><span class=\"token punctuation\">&gt;</span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Can-Redefine-Classes</span><span class=\"token punctuation\">&gt;</span></span>\n\t\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Can-Retransform-Classes</span><span class=\"token punctuation\">&gt;</span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Can-Retransform-Classes</span><span class=\"token punctuation\">&gt;</span></span>\n\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>manifestEntries</span><span class=\"token punctuation\">&gt;</span></span>\n\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>manifest</span><span class=\"token punctuation\">&gt;</span></span>\n\t\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mainClass</span><span class=\"token punctuation\">&gt;</span></span>com.main.JvmAttachMain<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>mainClass</span><span class=\"token punctuation\">&gt;</span></span>\n\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>manifest</span><span class=\"token punctuation\">&gt;</span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>archive</span><span class=\"token punctuation\">&gt;</span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>configuration</span><span class=\"token punctuation\">&gt;</span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>executions</span><span class=\"token punctuation\">&gt;</span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>execution</span><span class=\"token punctuation\">&gt;</span></span>\n\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>id</span><span class=\"token punctuation\">&gt;</span></span>make-assembly<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>id</span><span class=\"token punctuation\">&gt;</span></span>\n\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>phase</span><span class=\"token punctuation\">&gt;</span></span>package<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>phase</span><span class=\"token punctuation\">&gt;</span></span>\n\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>goals</span><span class=\"token punctuation\">&gt;</span></span>\n\t\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>goal</span><span class=\"token punctuation\">&gt;</span></span>single<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>goal</span><span class=\"token punctuation\">&gt;</span></span>\n\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>goals</span><span class=\"token punctuation\">&gt;</span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>execution</span><span class=\"token punctuation\">&gt;</span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>executions</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugin</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n\n<h4 id=\"使用-Attach-API\"><a href=\"#使用-Attach-API\" class=\"headerlink\" title=\"使用 Attach API\"></a>使用 Attach API</h4><p>以上完成热更新主要代码，接着使用 Attach API，连接目标虚拟机，触发热更新的代码。</p>\n<p>在这个启动类，我们最终调用 <code>VirtualMachine#loadAgent</code>，JVM 将会使用上面 AgentMain 方法使用传入 class 文件替换正在运行 class。</p>\n<p><code>com.main.JvmAttachMain</code> 的代码如下：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>main</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">File</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>sun<span class=\"token punctuation\">.</span>tools<span class=\"token punctuation\">.</span>attach<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">VirtualMachine</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">JvmAttachMain</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">String</span> pid <span class=\"token operator\">=</span> <span class=\"token string\">\"41556\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">String</span> classPath <span class=\"token operator\">=</span> <span class=\"token string\">\"E:\\\\RedefineSuccess.class\"</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token comment\">// 获取 Agent jar 路径</span>\n\t\t<span class=\"token class-name\">String</span> jarPath <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user.dir\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">.</span>separator <span class=\"token operator\">+</span> <span class=\"token string\">\"target\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">.</span>separator <span class=\"token operator\">+</span> <span class=\"token string\">\"hotswap-jdk.jar\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"this redefine jar path:\"</span> <span class=\"token operator\">+</span> jarPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token class-name\">VirtualMachine</span> vm <span class=\"token operator\">=</span> <span class=\"token class-name\">VirtualMachine</span><span class=\"token punctuation\">.</span><span class=\"token function\">attach</span><span class=\"token punctuation\">(</span>pid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 待绑定的jvm进程的pid号</span>\n\t\t\t<span class=\"token comment\">// 运行最终 AgentMain 中方法</span>\n\t\t\tvm<span class=\"token punctuation\">.</span><span class=\"token function\">loadAgent</span><span class=\"token punctuation\">(</span>jarPath<span class=\"token punctuation\">,</span>classPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ERROR:\"</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<h4 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h4><ol>\n<li>将 <code>com.agent.AgentMain</code> 打包成 <code>hotswap-jdk.jar</code></li>\n<li>运行测试类 RedefineSuccess.java</li>\n<li> 通过 <code>jps</code> 获取到进程 ID</li>\n<li> 将进程 ID 和反编译生成的 class 文件传入 <code>com.main.JvmAttachMain</code> </li>\n<li>运行 <code>com.main.JvmAttachMain</code> </li>\n</ol>\n<p><img src=\"/images/2020/08/1598497095868.png\" alt=\"1598497095868\" loading=\"lazy\"></p>\n<h3 id=\"相关问题\"><a href=\"#相关问题\" class=\"headerlink\" title=\"相关问题\"></a>相关问题</h3><h4 id=\"编译引入-tools-jar\"><a href=\"#编译引入-tools-jar\" class=\"headerlink\" title=\"编译引入 tools.jar\"></a>编译引入 tools.jar</h4><p>由于 Attach API 位于 tools.jar 中，而在 JDK8 之前 tools.jar 与我们常用 JDK jar 包并不在同一个位置，所以编译与运行过程可能找不到该 jar 包，从而导致报错。</p>\n<p>则需要 Maven 引入：</p>\n<pre class=\"language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>com.sun<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>tools<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>${java.version}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">&gt;</span></span>system<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">&gt;</span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>systemPath</span><span class=\"token punctuation\">&gt;</span></span>${java.home}/../lib/tools.jar<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>systemPath</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n\n<h4 id=\"程序运行中-tools-jar\"><a href=\"#程序运行中-tools-jar\" class=\"headerlink\" title=\"程序运行中 tools.jar\"></a>程序运行中 tools.jar</h4><p>运行程序时抛出 <code>java.lang.NoClassDefFoundError</code>，主要原因还是系统未找到 tools.jar 导致。</p>\n<p><img src=\"/images/2020/08/1598497278943.png\" alt=\"1598497278943\" loading=\"lazy\"></p>\n<p>在运行参数加入 <code>-Xbootclasspath/a:${java_home}/lib/tools.jar</code>，完整运行命令如下：</p>\n<pre class=\"language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">java <span class=\"token operator\">-</span>Xbootclasspath<span class=\"token operator\">/</span>a:$<span class=\"token punctuation\">{</span>java_home<span class=\"token punctuation\">}</span>\\lib\\tools<span class=\"token punctuation\">.</span>jar <span class=\"token operator\">-</span>jar hotswap<span class=\"token operator\">-</span>jdk<span class=\"token punctuation\">.</span>jar 22132 E:\\RedefineSuccess<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span></code></pre>\n\n","categories":["Java","Arthas"],"tags":["Java","Java诊断","Arthas"]},{"title":"Git 的 .gitconfig 文件配置汇总","url":"/2020/08/2020-08-22-Git%20%E7%9A%84%20.gitconfig%20%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE%E6%B1%87%E6%80%BB/","content":"<h3 id=\"http-postBuffer\"><a href=\"#http-postBuffer\" class=\"headerlink\" title=\"http.postBuffer\"></a>http.postBuffer</h3><p>在使用 git 推送项目时候出现 \"<strong>fatal: The remote end hung up unexpectedly</strong> \" 原因是推送的文件太大。</p>\n<pre class=\"language-none\"><code class=\"language-none\">Connection reset by 140.82.113.4\nfatal: The remote end hung up unexpectedly\nfatal: The remote end hung up unexpectedly\n\u001b[41mFATAL\u001b[49m {\n  err: Error: Spawn failed\n      at ChildProcess.&lt;anonymous&gt; (E:\\code\\GitHub\\Jueee\\jueee-blog\\node_modules\\hexo-deployer-git\\node_modules\\hexo-util\\lib\\spawn.js:51:21)\n      at ChildProcess.emit (events.js:315:20)\n      at ChildProcess.cp.emit (E:\\code\\GitHub\\Jueee\\jueee-blog\\node_modules\\cross-spawn\\lib\\enoent.js:34:29)\n      at Process.ChildProcess._handle.onexit (internal/child_process.js:275:12) {\n    code: 128\n  }\n} Something's wrong. Maybe you can find the solution here: %s \u001b[4mhttps://hexo.io/docs/troubleshooting.html\u001b[24m</code></pre>\n\n<p>解决方案</p>\n<p>在克隆 / 创建版本库生成的 .git 目录下面修改生成的 config 文件或者 <code>.gitconfig</code>  文件增加如下：</p>\n<pre class=\"language-none\"><code class=\"language-none\">[http]\npostBuffer = 524288000</code></pre>\n\n<p>即修改提交缓存大小为 500M。</p>\n","categories":["Git"],"tags":["Git"]},{"title":"Java 字节码操纵框架 ASM","url":"/2020/08/2020-08-27-Java%E5%AD%97%E8%8A%82%E7%A0%81%E6%93%8D%E7%BA%B5%E6%A1%86%E6%9E%B6ASM/","content":"<h3 id=\"ASM-介绍\"><a href=\"#ASM-介绍\" class=\"headerlink\" title=\"ASM 介绍\"></a>ASM 介绍</h3><p>ASM 是一个 java 字节码操纵框架，它能被用来动态生成类或者增强既有类的功能。</p>\n<p>ASM 可以直接产生二进制 class 文件，也可以在类被加载入 Java 虚拟机之前动态改变类行为。Java class 被存储在严格格式定义的 .class 文件里，这些类文件拥有足够的元数据来解析类中的所有元素：类名称、方法、属性以及 Java 字节码（指令）。ASM 从类文件中读入信息后，能够改变类行为，分析类信息，甚至能够根据用户要求生成新类。</p>\n<a id=\"more\"></a>\n\n<p>官网：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9hc20ub3cyLmlvLw==\">https://asm.ow2.io/<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>文档：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9hc20ub3cyLmlvL2phdmFkb2Mvb3ZlcnZpZXctc3VtbWFyeS5odG1s\">https://asm.ow2.io/javadoc/overview-summary.html<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>下载：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9tdm5yZXBvc2l0b3J5LmNvbS9hcnRpZmFjdC9vcmcub3cyLmFzbS9hc20=\">https://mvnrepository.com/artifact/org.ow2.asm/asm<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>使用 ASM 框架需要导入 asm 的 jar 包：</p>\n<pre class=\"language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.ow2.asm<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>asm<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>8.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n\n<p>ASM 框架中的核心类有以下几个：</p>\n<ul>\n<li><strong>ClassReader</strong>：该类用来解析编译过的 class 字节码文件。</li>\n<li><strong>ClassWriter</strong>：该类用来重新构建编译后的类，比如说修改类名、属性以及方法，甚至可以生成新的类的字节码文件。</li>\n<li><strong>ClassAdapter</strong>：该类也实现了 ClassVisitor 接口，它将对它的方法调用委托给另一个 ClassVisitor 对象。</li>\n</ul>\n<h3 id=\"字节码处理流程\"><a href=\"#字节码处理流程\" class=\"headerlink\" title=\"字节码处理流程\"></a>字节码处理流程</h3><p>asm 字节码处理流程：</p>\n<p>目标类 class bytes -&gt; ClassReader 解析 -&gt; ClassVisitor 增强修改字节码 -&gt; ClassWriter 生成增强后的 class bytes -&gt; 通过 Instrumentation 解析加载为新的 Class。</p>\n<p>如下图所示：</p>\n<p><img src=\"/images/2020/08/1599459538607.png\" alt=\"1599459538607\" loading=\"lazy\"></p>\n<h3 id=\"ASM动态操作方法\"><a href=\"#ASM动态操作方法\" class=\"headerlink\" title=\"ASM动态操作方法\"></a>ASM 动态操作方法</h3><p>示例代码 <code>com.demo.Foo</code>：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>demo</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test changed method name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">changeMethodContent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test changed method\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<p><code>com.asm.MethodChangeClassAdapter</code>：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>asm</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>objectweb<span class=\"token punctuation\">.</span>asm<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ClassVisitor</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>objectweb<span class=\"token punctuation\">.</span>asm<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MethodVisitor</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>objectweb<span class=\"token punctuation\">.</span>asm<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Opcodes</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MethodChangeClassAdapter</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ClassVisitor</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Opcodes</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">MethodChangeClassAdapter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ClassVisitor</span> cv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Opcodes</span><span class=\"token punctuation\">.</span>ASM4<span class=\"token punctuation\">,</span> cv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">visit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> version<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> access<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> signature<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> superName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> interfaces<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cv <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tcv<span class=\"token punctuation\">.</span><span class=\"token function\">visit</span><span class=\"token punctuation\">(</span>version<span class=\"token punctuation\">,</span> access<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> signature<span class=\"token punctuation\">,</span> superName<span class=\"token punctuation\">,</span> interfaces<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">MethodVisitor</span> <span class=\"token function\">visitMethod</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> access<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> desc<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> signature<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> exceptions<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// 当方法名为execute时，修改方法名为execute1</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cv <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token string\">\"execute\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> cv<span class=\"token punctuation\">.</span><span class=\"token function\">visitMethod</span><span class=\"token punctuation\">(</span>access<span class=\"token punctuation\">,</span> name <span class=\"token operator\">+</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> desc<span class=\"token punctuation\">,</span> signature<span class=\"token punctuation\">,</span> exceptions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token comment\">// 此处的changeMethodContent即为需要修改的方法 ，修改方法內容</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"changeMethodContent\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token comment\">// 先得到原始的方法</span>\n\t\t\t<span class=\"token class-name\">MethodVisitor</span> mv <span class=\"token operator\">=</span> cv<span class=\"token punctuation\">.</span><span class=\"token function\">visitMethod</span><span class=\"token punctuation\">(</span>access<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> desc<span class=\"token punctuation\">,</span> signature<span class=\"token punctuation\">,</span> exceptions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token class-name\">MethodVisitor</span> newMethod <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token comment\">// 访问需要修改的方法</span>\n\t\t\tnewMethod <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AsmMethodVisit</span><span class=\"token punctuation\">(</span>mv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> newMethod<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cv <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> cv<span class=\"token punctuation\">.</span><span class=\"token function\">visitMethod</span><span class=\"token punctuation\">(</span>access<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> desc<span class=\"token punctuation\">,</span> signature<span class=\"token punctuation\">,</span> exceptions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<p><code>com.asm.AsmMethodVisit</code>：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>asm</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>objectweb<span class=\"token punctuation\">.</span>asm<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MethodVisitor</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>objectweb<span class=\"token punctuation\">.</span>asm<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Opcodes</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AsmMethodVisit</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">MethodVisitor</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">AsmMethodVisit</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MethodVisitor</span> mv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Opcodes</span><span class=\"token punctuation\">.</span>ASM4<span class=\"token punctuation\">,</span> mv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">visitMethodInsn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> opcode<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> owner<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> desc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">visitMethodInsn</span><span class=\"token punctuation\">(</span>opcode<span class=\"token punctuation\">,</span> owner<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> desc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">visitCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// 此方法在访问方法的头部时被访问到，仅被访问一次</span>\n\t\t<span class=\"token comment\">// 此处可插入新的指令</span>\n\t\t<span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">visitCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">visitInsn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> opcode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// 此方法可以获取方法中每一条指令的操作类型，被访问多次</span>\n\t\t<span class=\"token comment\">// 如应在方法结尾处添加新指令，则应判断：</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>opcode <span class=\"token operator\">==</span> <span class=\"token class-name\">Opcodes</span><span class=\"token punctuation\">.</span>RETURN<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token comment\">// pushes the 'out' field (of type PrintStream) of the System class</span>\n\t\t\tmv<span class=\"token punctuation\">.</span><span class=\"token function\">visitFieldInsn</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Opcodes</span><span class=\"token punctuation\">.</span>GETSTATIC<span class=\"token punctuation\">,</span> <span class=\"token string\">\"java/lang/System\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"out\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Ljava/io/PrintStream;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token comment\">// pushes the \"Hello World!\" String constant</span>\n\t\t\tmv<span class=\"token punctuation\">.</span><span class=\"token function\">visitLdcInsn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"this is a modify method!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token comment\">// invokes the 'println' method (defined in the PrintStream class)</span>\n\t\t\tmv<span class=\"token punctuation\">.</span><span class=\"token function\">visitMethodInsn</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Opcodes</span><span class=\"token punctuation\">.</span>INVOKEVIRTUAL<span class=\"token punctuation\">,</span> <span class=\"token string\">\"java/io/PrintStream\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"println\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"(Ljava/lang/String;)V\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">visitInsn</span><span class=\"token punctuation\">(</span>opcode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<p>测试类 <code>com.asm.AsmExample</code>：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>asm</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">InvocationTargetException</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Method</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>objectweb<span class=\"token punctuation\">.</span>asm<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ClassReader</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>objectweb<span class=\"token punctuation\">.</span>asm<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ClassVisitor</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>objectweb<span class=\"token punctuation\">.</span>asm<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ClassWriter</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>objectweb<span class=\"token punctuation\">.</span>asm<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MethodVisitor</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>objectweb<span class=\"token punctuation\">.</span>asm<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Opcodes</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Foo</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AsmExample</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ClassLoader</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Opcodes</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">SecurityException</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token class-name\">IllegalAccessException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InvocationTargetException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InstantiationException</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">ClassReader</span> cr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassReader</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Foo</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">ClassWriter</span> cw <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassWriter</span><span class=\"token punctuation\">(</span>cr<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ClassWriter</span><span class=\"token punctuation\">.</span>COMPUTE_MAXS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">ClassVisitor</span> cv <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MethodChangeClassAdapter</span><span class=\"token punctuation\">(</span>cw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tcr<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>cv<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Opcodes</span><span class=\"token punctuation\">.</span>ASM4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\">// 新增加一个方法</span>\n\t\t<span class=\"token class-name\">MethodVisitor</span> mw <span class=\"token operator\">=</span> cw<span class=\"token punctuation\">.</span><span class=\"token function\">visitMethod</span><span class=\"token punctuation\">(</span>ACC_PUBLIC <span class=\"token operator\">+</span> ACC_STATIC<span class=\"token punctuation\">,</span> <span class=\"token string\">\"add\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"([Ljava/lang/String;)V\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tmw<span class=\"token punctuation\">.</span><span class=\"token function\">visitFieldInsn</span><span class=\"token punctuation\">(</span>GETSTATIC<span class=\"token punctuation\">,</span> <span class=\"token string\">\"java/lang/System\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"out\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Ljava/io/PrintStream;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tmw<span class=\"token punctuation\">.</span><span class=\"token function\">visitLdcInsn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"this is add method print!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tmw<span class=\"token punctuation\">.</span><span class=\"token function\">visitMethodInsn</span><span class=\"token punctuation\">(</span>INVOKEVIRTUAL<span class=\"token punctuation\">,</span> <span class=\"token string\">\"java/io/PrintStream\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"println\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"(Ljava/lang/String;)V\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tmw<span class=\"token punctuation\">.</span><span class=\"token function\">visitInsn</span><span class=\"token punctuation\">(</span>RETURN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// this code uses a maximum of two stack elements and two local</span>\n\t\t<span class=\"token comment\">// variables</span>\n\t\tmw<span class=\"token punctuation\">.</span><span class=\"token function\">visitMaxs</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tmw<span class=\"token punctuation\">.</span><span class=\"token function\">visitEnd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> code <span class=\"token operator\">=</span> cw<span class=\"token punctuation\">.</span><span class=\"token function\">toByteArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">AsmExample</span> loader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AsmExample</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">&gt;</span></span> exampleClass <span class=\"token operator\">=</span> loader<span class=\"token punctuation\">.</span><span class=\"token function\">defineClass</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Foo</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> code<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> code<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Method</span> method <span class=\"token operator\">:</span> exampleClass<span class=\"token punctuation\">.</span><span class=\"token function\">getMethods</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"***************************\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\">// uses the dynamically generated class to print 'Helloworld'</span>\n\t\t<span class=\"token comment\">// 調用changeMethodContent，修改方法內容</span>\n\t\texampleClass<span class=\"token punctuation\">.</span><span class=\"token function\">getMethods</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>exampleClass<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"***************************\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// 調用execute,修改方法名</span>\n\t\texampleClass<span class=\"token punctuation\">.</span><span class=\"token function\">getMethods</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>exampleClass<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// gets the bytecode of the Example class, and loads it dynamically</span>\n\n\t\t<span class=\"token class-name\">FileOutputStream</span> fos <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"e:\\\\Example.class\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tfos<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tfos<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre>\n\n<p>输出结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">public static void com.demo.Foo.add(java.lang.String[])\npublic void com.demo.Foo.changeMethodContent()\npublic void com.demo.Foo.execute1()\npublic final void java.lang.Object.wait() throws java.lang.InterruptedException\npublic final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException\npublic final native void java.lang.Object.wait(long) throws java.lang.InterruptedException\npublic boolean java.lang.Object.equals(java.lang.Object)\npublic java.lang.String java.lang.Object.toString()\npublic native int java.lang.Object.hashCode()\npublic final native java.lang.Class java.lang.Object.getClass()\npublic final native void java.lang.Object.notify()\npublic final native void java.lang.Object.notifyAll()\n***************************\ntest changed method\nthis is a modify method!\n***************************\ntest changed method name</code></pre>\n\n<p>通过反编译软件，查看 E 盘生成的 Example.class，结果如下：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>demo</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">execute1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test changed method name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">changeMethodContent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test changed method\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"this is a modify method!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arrstring<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"this is add method print!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n","categories":["Java","JavaJar"],"tags":["Java","JavaJar"]},{"title":"Ceph 分布式存储系统介绍","url":"/2020/08/2020-08-29-Ceph%E5%88%86%E5%B8%83%E5%BC%8F%E5%AD%98%E5%82%A8%E7%B3%BB%E7%BB%9F%E4%BB%8B%E7%BB%8D/","content":"<h3 id=\"相关链接\"><a href=\"#相关链接\" class=\"headerlink\" title=\"相关链接\"></a>相关链接</h3><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2RvY3MuY2VwaC5vcmcuY24v\">Ceph 中文文档<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2NlcGgub3JnLmNuLw==\">Ceph 中文社区<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<a id=\"more\"></a>\n\n<h3 id=\"Ceph-架构\"><a href=\"#Ceph-架构\" class=\"headerlink\" title=\"Ceph 架构\"></a>Ceph 架构</h3><p>Ceph 生态系统可以大致划分为四部分：</p>\n<ul>\n<li>客户端（数据使用者）</li>\n<li>元数据服务器（缓冲及同步分布的元数据）</li>\n<li>对象存储集群（以对象方式存储数据与元数据，实现其它主要职责）</li>\n<li>集群监控（实现监控功能）</li>\n</ul>\n<p>Ceph 生态系统的概念架构：</p>\n<p><img src=\"/images/2020/08/1598611098897.png\" alt=\"1598611098897\" loading=\"lazy\"></p>\n<p>Ceph 生态系统的简化分层视图：</p>\n<p><img src=\"/images/2020/08/1598611214479.png\" alt=\"1598611214479\" loading=\"lazy\"></p>\n<h3 id=\"Ceph-生态系统\"><a href=\"#Ceph-生态系统\" class=\"headerlink\" title=\"Ceph 生态系统\"></a>Ceph 生态系统</h3><p><img src=\"/images/2020/08/1598611164703.png\" alt=\"1598611164703\" loading=\"lazy\"></p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3NjaGluYS5uZXQvdHJhbnNsYXRlL2NlcGg=\">https://www.oschina.net/translate/ceph<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n","categories":["Ceph"],"tags":["Ceph"]},{"title":"Java 的 JIT 知识整理","url":"/2020/08/2020-08-28-Java%E7%9A%84JIT%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/","content":"<h3 id=\"JIT-介绍\"><a href=\"#JIT-介绍\" class=\"headerlink\" title=\"JIT 介绍\"></a>JIT 介绍</h3><p>JIT 编译器（just in time 即时编译器），当虚拟机发现某个方法或代码块运行特别频繁时，就会把这些代码认定为 热点代码（Hot Spot Code），为了提高热点代码的执行效率，在运行时，虚拟机将会把这些代码编译成与本地平台相关的机器码，并进行各层次的优化，完成这项任务的正是 <strong>JIT 编译器</strong>。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"JIT的工作原理\"><a href=\"#JIT的工作原理\" class=\"headerlink\" title=\"JIT的工作原理\"></a>JIT 的工作原理</h3><p><img src=\"/images/2020/08/1598525622168.png\" alt=\"1598525622168\" loading=\"lazy\"></p>\n<h3 id=\"JIT编译\"><a href=\"#JIT编译\" class=\"headerlink\" title=\"JIT编译\"></a>JIT 编译</h3><p>对于 Java 代码，刚开始都是<code>被编译器编译成字节码文件</code>，<code>然后字节码文件会被交由 JVM 解释执行</code>，所以可以说 Java 本身是一种<strong>半编译半解释执行的语言</strong>。</p>\n<p>当 JIT 编译启用时（默认是启用的），JVM 读入<code>.class文件解释后</code>，将其<code>发给JIT编译器</code>。JIT 编译器<code>将字节码编译成本机机器代码</code>。</p>\n<p>通常 <code>Javac将程序源码编译</code>，<code>转换成java字节码</code>，<code>JVM通过解释字节码将其翻译成相应的机器指令</code>，逐条读入，逐条解释翻译。<br> 经过解释运行，其运行速度必定会比可运行的二进制字节码程序慢。为了提高运行速度，引入了 JIT 技术。</p>\n<p>在执行时 JIT 会把翻译过的机器码保存起来，已备下次使用，因此从理论上来说，采用该 JIT 技术能够，能够接近曾经纯编译技术。</p>\n<p>运行过程中会被即时编译器编译的<code>热点代码</code>有两类：<strong>被多次调用的方法</strong>、<strong>被多次调用的循环体</strong>。<br>这两种情况，编译器都是以<strong>整个方法作为编译对象</strong>，这种编译也是虚拟机中标准的编译方式。要知道一段代码或方法是不是热点代码，是不是需要触发即时编译，需要进行 <code>Hot Spot Detection（热点探测）</code>。</p>\n<h3 id=\"热点判定方式\"><a href=\"#热点判定方式\" class=\"headerlink\" title=\"热点判定方式\"></a>热点判定方式</h3><p>目前主要的热点 判定方式有以下两种：</p>\n<ol>\n<li><strong>基于采样的热点探测</strong>：<br> 采用这种方法的虚拟机会周期性地检查各个线程的栈顶，如果发现某些方法经常出现在栈顶，那这段方法代码就是 “热点代码”。这种探测方法的好处是实现简单高效，还可以很容易地获取方法调用关系，缺点是很难精确地确认一个方法的热度，容易因为受到线程阻塞或别的外界因素的影响而扰乱热点探测。</li>\n<li><strong>基于计数器的热点探测</strong>：<br> 采用这种方法的虚拟机会为每个方法，甚至是代码块建立计数器，统计方法的执行次数，如果执行次数超过一定的阀值，就认为它是 “热点方法”。这种统计方法实现复杂一些，需要为每个方法建立并维护计数器，而且不能直接获取到方法的调用关系，但是它的统计结果相对更加精确严谨。</li>\n</ol>\n<p>HotSpot 虚拟机中使用的是第二种: <strong>基于计数器的热点探测方法</strong>，因此它为每个方法准备了两个计数器：<code>方法调用计数器和回边计数器</code>。</p>\n<ul>\n<li><p><strong>方法调用计数器</strong></p>\n<p>方法调用计数器用来统计方法调用的次数，在默认设置下，方法调用计数器统计的并不是方法被调用的绝对次数，而是一个相对的执行频率，即一段时间内方法被调用的次数。</p>\n</li>\n<li><p><strong>回边计数器</strong></p>\n<p>用于统计一个方法中循环体代码执行的次数（准确地说，应该是回边的次数，因为并非所有的循环都是回边），在字节码中遇到控制流向后跳转的指令就称为 “回边”。</p>\n</li>\n</ul>\n<p>方法调用计数器触发即时编译的流程：</p>\n<p><img src=\"/images/2020/08/1598525962562.png\" alt=\"1598525962562\" loading=\"lazy\"></p>\n<h3 id=\"设置热点阈值\"><a href=\"#设置热点阈值\" class=\"headerlink\" title=\"设置热点阈值\"></a>设置热点阈值</h3><p>一段代码需要执行多少次才会触发 JIT 优化呢？通常这个值由 <code>-XX:CompileThreshold</code> 参数进行设置：</p>\n<ol>\n<li><p>使用 client 编译器时，默认为 1500。</p>\n</li>\n<li><p>使用 server 编译器时，默认为 10000。</p>\n</li>\n</ol>\n<h3 id=\"JIT优化\"><a href=\"#JIT优化\" class=\"headerlink\" title=\"JIT优化\"></a>JIT 优化</h3><ol>\n<li><p><strong>开启服务端模式</strong></p>\n<p>开启服务端模式以后就有即时编译器和解释器两种执行引擎，执行效率最高的是即时编译器，所以我们做 JIT 优化的目的是尽量使代码使用即时编译器</p>\n<p>参数设置：<code>-server</code></p>\n</li>\n<li><p><strong>增加内联函数的可能性</strong></p>\n<p>增加函数内联的可能性能减少栈帧的创建，节约内存空间</p>\n<p>参数设置：</p>\n<p>使用 final 修饰函数向编译器建议可以内联，启动参数不宜设置，注意只是建议，具体是否内联看 JVM 决定</p>\n</li>\n<li><p><strong>提高使用即时编译器的可能性</strong></p>\n<p>小方法：写方法时尽量不要写得太大，让 JVM 尽可能使用即时编译器编译代码</p>\n<p>在启动项配置参数 - XX:CompileThreshold=10000，使得一个方法被调用超过 10000 次以后使用即时编译器编译为机器码</p>\n<p><strong>OSR 编译阈值</strong></p>\n<ul>\n<li><strong>调用计数器</strong>，即方法被调用的次数，CompileThreshold，该值是指当方法被调用多少次后，就编译为机器码，client 模式默认为 1500 次，server 模式默认为 1 万次，可以在启动时添加 - XX:CompileThreshold=10000 来设置该值。</li>\n<li><strong>回边计数器</strong>，即方法中循环执行部分代码的执行次数，OnStackReplacePercentage，该值用于 / 参与计算是否触发 OSR 编译的阈值，client 默认为 933，sever 默认为 140，可以通过 - XX:OnStackReplacePercentage=140 来设置。</li>\n</ul>\n<p>client 模式下的计算规则为：</p>\n<pre class=\"language-none\"><code class=\"language-none\">CompileThreshold*OnStackReplacePercentage/100</code></pre>\n\n<p>server 模式下计算规则为：</p>\n<pre class=\"language-none\"><code class=\"language-none\">CompileThreshold *（OnStackReplacePercentage-InterpreterProfilePercentage）/100</code></pre>\n\n<p>InterpreterProfilePercentage，默认为 33。</p>\n</li>\n<li><p><strong>降低线程优先级</strong></p>\n<p>Linux 不能设置，需要 root 权限</p>\n</li>\n<li><p><strong>热度衰减与半衰周期</strong></p>\n</li>\n</ol>\n","categories":["Java"],"tags":["Java"]},{"title":"在 k8s 中使用 rook-ceph","url":"/2020/08/2020-08-30-%E5%9C%A8k8s%E4%B8%AD%E4%BD%BF%E7%94%A8rook-ceph/","content":"<h3 id=\"相关链接\"><a href=\"#相关链接\" class=\"headerlink\" title=\"相关链接\"></a>相关链接</h3><p>rook-ceph 官方指导：</p>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9yb29rLmlvL2RvY3Mvcm9vay92MS4xL2NlcGgtZXhhbXBsZXMuaHRtbA==\">https://rook.io/docs/rook/v1.1/ceph-examples.html<i class=\"fa fa-external-link-alt\"></i></span> </p>\n</blockquote>\n<p>github 项目地址：</p>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3Jvb2svcm9vay90cmVlL21hc3Rlci9jbHVzdGVyL2V4YW1wbGVzL2t1YmVybmV0ZXMvY2VwaA==\">https://github.com/rook/rook/tree/master/cluster/examples/kubernetes/ceph<i class=\"fa fa-external-link-alt\"></i></span> </p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h3 id=\"rook-ceph-tools使用\"><a href=\"#rook-ceph-tools使用\" class=\"headerlink\" title=\"rook-ceph-tools使用\"></a>rook-ceph-tools 使用</h3><ol>\n<li><p>执行 toolbox.yaml，生成 rook-ceph-tools-xxxx pod</p>\n</li>\n<li><p>使用如下命令进入 ceph 的管理中：</p>\n<pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\">$ kubectl -n rook-ceph exec -it $(kubectl -n rook-ceph get pod -l \"app=rook-ceph-tools\" -o jsonpath='{.items[0].metadata.name}') bash</code></pre>\n\n<pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\">$ kubectl exec -it rook-ceph-tools-9c9d7744b-2tpwn bash -n rook-ceph</code></pre>\n</li>\n<li><p>ceph 常用命令</p>\n<pre class=\"language-none\"><code class=\"language-none\">ceph -s 查看集群状态\nceph osd status 查看osd状态\nceph pg stat 查看pg状态\nceph osd pool set pool pg_num 64 设置pg数量\nceph osd pool set pool pgp_num 64 设置pgp数量，在集群规模较小，pg数量过少会导致监控警告，此两条命令需一起使用</code></pre>\n\n</li>\n</ol>\n<h3 id=\"在宿主机使用-ceph-命令行\"><a href=\"#在宿主机使用-ceph-命令行\" class=\"headerlink\" title=\"在宿主机使用 ceph 命令行\"></a>在宿主机使用 ceph 命令行</h3><ol>\n<li>安装 <code>ceph-common</code>：<code>apt-get install ceph-common</code>。</li>\n<li>进入 <code>rook-ceph-tools-9c9d7744b-2tpwn</code> 容器，将 <code>/etc/ceph/ceph.conf</code> 和 <code>/etc/ceph/keyring</code> 拷贝到宿主机的 <code>/etc/ceph/</code> 文件夹下即可。</li>\n</ol>\n<h3 id=\"获取dashboard密码\"><a href=\"#获取dashboard密码\" class=\"headerlink\" title=\"获取dashboard密码\"></a>获取 dashboard 密码</h3><pre class=\"language-none\"><code class=\"language-none\">kubectl -n rook-ceph get secret rook-ceph-dashboard-password -o jsonpath=\"{['data']['password']}\" | base64 --decode &amp;&amp; echo</code></pre>\n\n<h3 id=\"问题处理\"><a href=\"#问题处理\" class=\"headerlink\" title=\"问题处理\"></a>问题处理</h3><pre class=\"language-none\"><code class=\"language-none\">(combined from similar events): MountVolume.SetUp failed for volume \"mysqldata\" : CephFS: mount failed: mount failed: exit status 32</code></pre>\n\n\n\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wa2dzLm9yZy9kb3dubG9hZC9jZXBoLWNvbW1vbg==\">https://pkgs.org/download/ceph-common<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLjUxY3RvLmNvbS9sZWVqaWEvMjUwMTA4MA==\">https://blog.51cto.com/leejia/2501080<i class=\"fa fa-external-link-alt\"></i></span></p>\n","categories":["Ceph","Container","Kubernets"],"tags":["Ceph","k8s"]},{"title":"Ceph 常用命令行汇总","url":"/2020/08/2020-08-31-Ceph%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%B1%87%E6%80%BB/","content":"<h3 id=\"ceph-基础命令\"><a href=\"#ceph-基础命令\" class=\"headerlink\" title=\"ceph 基础命令\"></a>ceph 基础命令</h3><p>查看版本：</p>\n<pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token comment\"># ceph -v</span>\nceph version <span class=\"token number\">15.2</span>.4 <span class=\"token punctuation\">(</span>7447c15c6ff58d7fce91843b705a268a1917325c<span class=\"token punctuation\">)</span> octopus <span class=\"token punctuation\">(</span>stable<span class=\"token punctuation\">)</span></code></pre>\n\n<a id=\"more\"></a>\n\n<p>查看集群状态：</p>\n<pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token comment\"># ceph -s</span>\n  cluster:\n    id:     dacae2ee-013b-413c-83c9-7c1b96ec84f1\n    health: HEALTH_WARN\n            Degraded data redundancy: <span class=\"token number\">32</span> pgs undersized\n\n  services:\n    mon: <span class=\"token number\">2</span> daemons, quorum a,b <span class=\"token punctuation\">(</span>age 6d<span class=\"token punctuation\">)</span>\n    mgr: a<span class=\"token punctuation\">(</span>active, since 2w<span class=\"token punctuation\">)</span>\n    osd: <span class=\"token number\">3</span> osds: <span class=\"token number\">3</span> up <span class=\"token punctuation\">(</span>since 2w<span class=\"token punctuation\">)</span>, <span class=\"token number\">3</span> <span class=\"token keyword\">in</span> <span class=\"token punctuation\">(</span>since 5w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token number\">1</span> remapped pgs\n\n  data:\n    pools:   <span class=\"token number\">2</span> pools, <span class=\"token number\">33</span> pgs\n    objects: <span class=\"token number\">3</span> objects, <span class=\"token number\">0</span> B\n    usage:   <span class=\"token number\">3.1</span> GiB used, <span class=\"token number\">11</span> TiB / <span class=\"token number\">11</span> TiB avail\n    pgs:     <span class=\"token number\">3</span>/9 objects misplaced <span class=\"token punctuation\">(</span><span class=\"token number\">33.333</span>%<span class=\"token punctuation\">)</span>\n             <span class=\"token number\">32</span> active+undersized\n             <span class=\"token number\">1</span>  active+clean+remapped</code></pre>\n\n<p>查看磁盘占用：</p>\n<pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\">$ ceph <span class=\"token function\">df</span>\n--- RAW STORAGE ---\nCLASS  SIZE    AVAIL   USED    RAW USED  %RAW USED\nhdd    <span class=\"token number\">11</span> TiB  <span class=\"token number\">11</span> TiB  <span class=\"token number\">69</span> MiB   <span class=\"token number\">3.1</span> GiB       <span class=\"token number\">0.03</span>\nTOTAL  <span class=\"token number\">11</span> TiB  <span class=\"token number\">11</span> TiB  <span class=\"token number\">69</span> MiB   <span class=\"token number\">3.1</span> GiB       <span class=\"token number\">0.03</span>\n\n--- POOLS ---\nPOOL                   ID  STORED  OBJECTS  USED     %USED  MAX AVAIL\ndevice_health_metrics   <span class=\"token number\">1</span>  <span class=\"token number\">30</span> KiB        <span class=\"token number\">3</span>   <span class=\"token number\">90</span> KiB      <span class=\"token number\">0</span>    <span class=\"token number\">3.5</span> TiB\n<span class=\"token builtin class-name\">test</span>                    <span class=\"token number\">2</span>     <span class=\"token number\">0</span> B        <span class=\"token number\">0</span>      <span class=\"token number\">0</span> B      <span class=\"token number\">0</span>    <span class=\"token number\">3.5</span> TiB\nkcha                    <span class=\"token number\">3</span>   <span class=\"token number\">691</span> B        <span class=\"token number\">4</span>  <span class=\"token number\">256</span> KiB      <span class=\"token number\">0</span>    <span class=\"token number\">5.2</span> TiB</code></pre>\n\n<h3 id=\"ceph-auth-命令\"><a href=\"#ceph-auth-命令\" class=\"headerlink\" title=\"ceph auth 命令\"></a>ceph auth 命令</h3><p>获取 Ceph <code>ceph.client.admin.keyring</code> 并生成 secret key：</p>\n<pre class=\"language-none\"><code class=\"language-none\"># ceph auth get client.admin\nexported keyring for client.admin\n[client.admin]\n        key = AQAKThlfDW+2IxAApUzJ34ftDmNMUaDiV/SB0A==\n        caps mds = \"allow *\"\n        caps mgr = \"allow *\"\n        caps mon = \"allow *\"\n        caps osd = \"allow *\"</code></pre>\n\n<p>k8s secret 认证 key 需要使用 base64 编码：</p>\n<pre class=\"language-none\"><code class=\"language-none\"># echo \"AQAKThlfDW+2IxAApUzJ34ftDmNMUaDiV/SB0A==\" | base64\nQVFBS1RobGZEVysySXhBQXBVekozNGZ0RG1OTVVhRGlWL1NCMEE9PQo=</code></pre>\n\n<p>以上两步可以合并为：</p>\n<pre class=\"language-none\"><code class=\"language-none\"># ceph auth get-key client.admin |base64\nQVFBS1RobGZEVysySXhBQXBVekozNGZ0RG1OTVVhRGlWL1NCMEE9PQ==</code></pre>\n\n<h3 id=\"ceph-osd-命令\"><a href=\"#ceph-osd-命令\" class=\"headerlink\" title=\"ceph osd 命令\"></a>ceph osd 命令</h3><p>OSD 全称 Object Storage Device，也就是负责响应客户端请求返回具体数据的进程。</p>\n<p>查看 osd 状态</p>\n<pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token comment\"># ceph osd status</span>\nID  HOST   USED  AVAIL  WR OPS  WR DATA  RD OPS  RD DATA  STATE\n <span class=\"token number\">0</span>  host1  1045M  3724G      <span class=\"token number\">0</span>        <span class=\"token number\">0</span>       <span class=\"token number\">0</span>        <span class=\"token number\">0</span>   exists,up\n <span class=\"token number\">1</span>  host2  1045M  3724G      <span class=\"token number\">0</span>        <span class=\"token number\">0</span>       <span class=\"token number\">0</span>        <span class=\"token number\">0</span>   exists,up\n <span class=\"token number\">2</span>  host3  1045M  3724G      <span class=\"token number\">0</span>        <span class=\"token number\">0</span>       <span class=\"token number\">0</span>        <span class=\"token number\">0</span>   exists,up</code></pre>\n\n<p>查看 osd 目录树</p>\n<pre class=\"language-none\"><code class=\"language-none\"># ceph osd tree\nID  CLASS  WEIGHT    TYPE NAME                    STATUS  REWEIGHT  PRI-AFF\n-1         10.91460  root default\n-3          7.27640      host host1\n 0    hdd   3.63820          osd.0                    up   1.00000  1.00000\n 1    hdd   3.63820          osd.1                    up   1.00000  1.00000\n-5          3.63820      host host2\n 2    hdd   3.63820          osd.2                    up   1.00000  1.00000</code></pre>\n\n<p>列出存储池</p>\n<pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\">$ ceph osd lspools\n<span class=\"token number\">1</span> device_health_metrics\n<span class=\"token number\">2</span> <span class=\"token builtin class-name\">test</span>\n<span class=\"token number\">3</span> kcha</code></pre>\n\n<h3 id=\"ceph-mon-命令\"><a href=\"#ceph-mon-命令\" class=\"headerlink\" title=\"ceph mon 命令\"></a>ceph mon 命令</h3><p>查看 mon 状态：</p>\n<pre class=\"language-none\"><code class=\"language-none\"># ceph mon stat\ne2: 2 mons at {a=[v2:172.18.32.119:3300/0,v1:172.18.32.119:6789/0],b=[v2:172.18.83.170:3300/0,v1:172.18.83.170:6789/0]}, election epoch 16, leader 0 a, quorum 0,1 a,b</code></pre>\n\n<h3 id=\"ceph-pg-命令\"><a href=\"#ceph-pg-命令\" class=\"headerlink\" title=\"ceph pg 命令\"></a>ceph pg 命令</h3><p>查看 pg 状态：</p>\n<pre class=\"language-none\"><code class=\"language-none\"># ceph pg stat\n33 pgs: 1 active+clean+remapped, 32 active+undersized; 0 B data, 63 MiB used, 11 TiB / 11 TiB avail; 3/9 objects misplaced (33.333%)</code></pre>\n\n<h3 id=\"rados-命令\"><a href=\"#rados-命令\" class=\"headerlink\" title=\"rados 命令\"></a>rados 命令</h3><pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token comment\"># rados df</span>\nPOOL_NAME                USED  OBJECTS  CLONES  COPIES  MISSING_ON_PRIMARY  UNFOUND  DEGRADED  RD_OPS       RD  WR_OPS       WR  USED COMPR  UNDER COMPR\ndevice_health_metrics  <span class=\"token number\">90</span> KiB        <span class=\"token number\">3</span>       <span class=\"token number\">0</span>       <span class=\"token number\">9</span>                   <span class=\"token number\">0</span>        <span class=\"token number\">0</span>         <span class=\"token number\">0</span>     <span class=\"token number\">104</span>  <span class=\"token number\">104</span> KiB     <span class=\"token number\">108</span>  <span class=\"token number\">108</span> KiB         <span class=\"token number\">0</span> B          <span class=\"token number\">0</span> B\n<span class=\"token builtin class-name\">test</span>                      <span class=\"token number\">0</span> B        <span class=\"token number\">0</span>       <span class=\"token number\">0</span>       <span class=\"token number\">0</span>                   <span class=\"token number\">0</span>        <span class=\"token number\">0</span>         <span class=\"token number\">0</span>       <span class=\"token number\">0</span>      <span class=\"token number\">0</span> B       <span class=\"token number\">0</span>      <span class=\"token number\">0</span> B         <span class=\"token number\">0</span> B          <span class=\"token number\">0</span> B\n\ntotal_objects    <span class=\"token number\">3</span>\ntotal_used       <span class=\"token number\">3.1</span> GiB\ntotal_avail      <span class=\"token number\">11</span> TiB\ntotal_space      <span class=\"token number\">11</span> TiB</code></pre>\n\n","categories":["Ceph"],"tags":["Ceph"]},{"title":"Arthas 之查看类加载信息的相关命令","url":"/2020/09/2020-09-01-Arthas%E4%B9%8B%E6%9F%A5%E7%9C%8B%E7%B1%BB%E5%8A%A0%E8%BD%BD%E4%BF%A1%E6%81%AF%E7%9A%84%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/","content":"<p>通过 Arthas 中的 trace/monitor/watch/stack/tt 等命令，可以查看方法内部调用信息，从而定位定位方法调用问题。</p>\n<h3 id=\"sc（已加载的类信息）\"><a href=\"#sc（已加载的类信息）\" class=\"headerlink\" title=\"sc（已加载的类信息）\"></a>sc（已加载的类信息）</h3><h4 id=\"方法介绍\"><a href=\"#方法介绍\" class=\"headerlink\" title=\"方法介绍\"></a>方法介绍</h4><p>“Search-Class” 的简写，这个命令能搜索出所有已经加载到 JVM 中的 Class 信息。</p>\n<p>官方文档：</p>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9hcnRoYXMuYWxpeXVuLmNvbS9kb2Mvc2MuaHRtbA==\">https://arthas.aliyun.com/doc/sc.html<i class=\"fa fa-external-link-alt\"></i></span></p>\n</blockquote>\n<h4 id=\"参数说明\"><a href=\"#参数说明\" class=\"headerlink\" title=\"参数说明\"></a>参数说明</h4><p>使用 <code>sc --help</code> 获取 sc 命令的帮助信息：</p>\n<pre class=\"language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\"><span class=\"token namespace\">[arthas@32344]</span>$ <span class=\"token function\">sc</span> <span class=\"token operator\">-</span>help\n USAGE:\n   <span class=\"token function\">sc</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span>c &lt;value&gt;<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span>d<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span>x &lt;value&gt;<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span>f<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span>h<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span>E<span class=\"token punctuation\">]</span> <span class=\"token keyword\">class</span><span class=\"token operator\">-</span>pattern\n\n SUMMARY:\n   Search all the classes loaded by JVM\n\n EXAMPLES:\n   <span class=\"token function\">sc</span> <span class=\"token operator\">-</span>d org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>commons<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>StringUtils\n   <span class=\"token function\">sc</span> <span class=\"token operator\">-</span>d org<span class=\"token operator\">/</span>apache<span class=\"token operator\">/</span>commons<span class=\"token operator\">/</span>lang<span class=\"token operator\">/</span>StringUtils\n   <span class=\"token function\">sc</span> <span class=\"token operator\">-</span>d <span class=\"token operator\">*</span>StringUtils\n   <span class=\"token function\">sc</span> <span class=\"token operator\">-</span>d <span class=\"token operator\">-</span>f org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>commons<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>StringUtils\n   <span class=\"token function\">sc</span> <span class=\"token operator\">-</span>E org\\\\<span class=\"token punctuation\">.</span>apache\\\\<span class=\"token punctuation\">.</span>commons\\\\<span class=\"token punctuation\">.</span>lang\\\\<span class=\"token punctuation\">.</span>StringUtils\n\n WIKI:\n   https:<span class=\"token operator\">/</span><span class=\"token operator\">/</span>alibaba<span class=\"token punctuation\">.</span>github<span class=\"token punctuation\">.</span>io<span class=\"token operator\">/</span>arthas<span class=\"token operator\">/</span><span class=\"token function\">sc</span>\n\n OPTIONS:\n <span class=\"token operator\">-</span>c<span class=\"token punctuation\">,</span> <span class=\"token operator\">--</span>classloader &lt;value&gt;               The hash code of the special <span class=\"token keyword\">class</span><span class=\"token string\">'s classLoader\n -d, --details                           Display the details of class\n -x, --expand &lt;value&gt;                    Expand level of object (0 by default)\n -f, --field                             Display all the member variables\n -h, --help                              this help\n -E, --regex                             Enable regular expression to match (wildcard matching by default)\n &lt;class-pattern&gt;                         Class name pattern, use either '</span><span class=\"token punctuation\">.</span><span class=\"token string\">' or '</span><span class=\"token operator\">/</span>' as separator</code></pre>\n\n<p>主要参数说明如下：</p>\n<table>\n<thead>\n<tr>\n<th>参数名称</th>\n<th>参数说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><em> class-pattern</em></td>\n<td> 类名表达式匹配</td>\n</tr>\n<tr>\n<td><em> method-pattern</em></td>\n<td> 方法名表达式匹配</td>\n</tr>\n<tr>\n<td> [d]</td>\n<td> 输出当前类的详细信息，包括这个类所加载的原始文件来源、类的声明、加载的 ClassLoader 等详细信息。 如果一个类被多个 ClassLoader 所加载，则会出现多次</td>\n</tr>\n<tr>\n<td> [E]</td>\n<td> 开启正则表达式匹配，默认为通配符匹配</td>\n</tr>\n<tr>\n<td> [f]</td>\n<td> 输出当前类的成员变量信息（需要配合参数 - d 一起使用）</td>\n</tr>\n<tr>\n<td>[x:]</td>\n<td> 指定输出静态变量时属性的遍历深度，默认为 0，即直接使用 <code>toString</code> 输出</td>\n</tr>\n<tr>\n<td><code>[c:]</code></td>\n<td>指定 class 的 ClassLoader 的 hashcode</td>\n</tr>\n<tr>\n<td><code>[classLoaderClass:]</code></td>\n<td>指定执行表达式的 ClassLoader 的 class name</td>\n</tr>\n<tr>\n<td><code>[n:]</code></td>\n<td>具有详细信息的匹配类的最大数量（默认为 100）</td>\n</tr>\n</tbody></table>\n<h4 id=\"查看已加载的类信息\"><a href=\"#查看已加载的类信息\" class=\"headerlink\" title=\"查看已加载的类信息\"></a>查看已加载的类信息</h4><p>模糊搜索：</p>\n<pre class=\"language-none\"><code class=\"language-none\">[arthas@32344]$ sc sample.*\nsample.demo.ServerDemoApplication\nsample.demo.ServerDemoApplication$$EnhancerBySpringCGLIB$$1a055512\nsample.demo.controller.UserController\nsample.demo.service.UserService\nAffect(row-cnt:4) cost in 7 ms.</code></pre>\n\n<p>打印类的详细信息：</p>\n<pre class=\"language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\"><span class=\"token namespace\">[arthas@32344]</span>$ <span class=\"token function\">sc</span> <span class=\"token operator\">-</span>d sample<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>controller<span class=\"token punctuation\">.</span>UserController\n <span class=\"token keyword\">class</span><span class=\"token operator\">-</span>info        sample<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>controller<span class=\"token punctuation\">.</span>UserController\n code<span class=\"token operator\">-</span>source       <span class=\"token operator\">/</span>C:<span class=\"token operator\">/</span>Codes<span class=\"token operator\">/</span>JavaWorkSpace<span class=\"token operator\">/</span>workspace48<span class=\"token operator\">/</span>arthas<span class=\"token operator\">-</span>demo<span class=\"token operator\">/</span>target<span class=\"token operator\">/</span>classes<span class=\"token operator\">/</span>\n name              sample<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>controller<span class=\"token punctuation\">.</span>UserController\n isInterface       false\n isAnnotation      false\n isEnum            false\n isAnonymousClass  false\n isArray           false\n isLocalClass      false\n isMemberClass     false\n isPrimitive       false\n isSynthetic       false\n simple<span class=\"token operator\">-</span>name       UserController\n modifier          public\n annotation        org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>scheduling<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span>EnableScheduling<span class=\"token punctuation\">,</span>org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span>\n                   RestController\n interfaces\n super<span class=\"token operator\">-</span><span class=\"token keyword\">class</span>       <span class=\"token operator\">+</span><span class=\"token operator\">-</span>java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>Object\n <span class=\"token keyword\">class</span><span class=\"token operator\">-</span>loader      <span class=\"token operator\">+</span><span class=\"token operator\">-</span>sun<span class=\"token punctuation\">.</span>misc<span class=\"token punctuation\">.</span>Launcher<span class=\"token variable\">$AppClassLoader</span>@73d16e93\n                     <span class=\"token operator\">+</span><span class=\"token operator\">-</span>sun<span class=\"token punctuation\">.</span>misc<span class=\"token punctuation\">.</span>Launcher<span class=\"token variable\">$ExtClassLoader</span>@2752f6e2\n classLoaderHash   73d16e93\n\nAffect<span class=\"token punctuation\">(</span>row<span class=\"token operator\">-</span>cnt:1<span class=\"token punctuation\">)</span> cost in 19 ms<span class=\"token punctuation\">.</span></code></pre>\n\n<p>打印出类的 Field 信息：</p>\n<pre class=\"language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\"><span class=\"token namespace\">[arthas@32344]</span>$ <span class=\"token function\">sc</span> <span class=\"token operator\">-</span>d <span class=\"token operator\">-</span>f sample<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>controller<span class=\"token punctuation\">.</span>UserController\n <span class=\"token keyword\">class</span><span class=\"token operator\">-</span>info        sample<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>controller<span class=\"token punctuation\">.</span>UserController\n code<span class=\"token operator\">-</span>source       <span class=\"token operator\">/</span>C:<span class=\"token operator\">/</span>Codes<span class=\"token operator\">/</span>JavaWorkSpace<span class=\"token operator\">/</span>workspace48<span class=\"token operator\">/</span>arthas<span class=\"token operator\">-</span>demo<span class=\"token operator\">/</span>target<span class=\"token operator\">/</span>classes<span class=\"token operator\">/</span>\n name              sample<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>controller<span class=\"token punctuation\">.</span>UserController\n isInterface       false\n isAnnotation      false\n isEnum            false\n isAnonymousClass  false\n isArray           false\n isLocalClass      false\n isMemberClass     false\n isPrimitive       false\n isSynthetic       false\n simple<span class=\"token operator\">-</span>name       UserController\n modifier          public\n annotation        org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>scheduling<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span>EnableScheduling<span class=\"token punctuation\">,</span>org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span>\n                   RestController\n interfaces\n super<span class=\"token operator\">-</span><span class=\"token keyword\">class</span>       <span class=\"token operator\">+</span><span class=\"token operator\">-</span>java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>Object\n <span class=\"token keyword\">class</span><span class=\"token operator\">-</span>loader      <span class=\"token operator\">+</span><span class=\"token operator\">-</span>sun<span class=\"token punctuation\">.</span>misc<span class=\"token punctuation\">.</span>Launcher<span class=\"token variable\">$AppClassLoader</span>@73d16e93\n                     <span class=\"token operator\">+</span><span class=\"token operator\">-</span>sun<span class=\"token punctuation\">.</span>misc<span class=\"token punctuation\">.</span>Launcher<span class=\"token variable\">$ExtClassLoader</span>@2752f6e2\n classLoaderHash   73d16e93\n fields            name     log\n                   <span class=\"token function\">type</span>     org<span class=\"token punctuation\">.</span>slf4j<span class=\"token punctuation\">.</span>Logger\n                   modifier final<span class=\"token punctuation\">,</span>private<span class=\"token punctuation\">,</span>static\n                   value    Logger<span class=\"token namespace\">[sample.demo.controller.UserController]</span>\n\n                   name       userService\n                   <span class=\"token function\">type</span>       sample<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>service<span class=\"token punctuation\">.</span>UserService\n                   modifier   private\n                   annotation org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span>Autowired\n\n\nAffect<span class=\"token punctuation\">(</span>row<span class=\"token operator\">-</span>cnt:1<span class=\"token punctuation\">)</span> cost in 6 ms<span class=\"token punctuation\">.</span></code></pre>\n\n<h3 id=\"sm（已加载类的方法信息）\"><a href=\"#sm（已加载类的方法信息）\" class=\"headerlink\" title=\"sm（已加载类的方法信息）\"></a>sm（已加载类的方法信息）</h3><h4 id=\"方法介绍-1\"><a href=\"#方法介绍-1\" class=\"headerlink\" title=\"方法介绍\"></a>方法介绍</h4><p>“Search-Method” 的简写，这个命令能搜索出所有已经加载了 Class 信息的方法信息。</p>\n<p>官方文档：</p>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9hcnRoYXMuYWxpeXVuLmNvbS9kb2Mvc20uaHRtbA==\">https://arthas.aliyun.com/doc/sm.html<i class=\"fa fa-external-link-alt\"></i></span></p>\n</blockquote>\n<h4 id=\"参数说明-1\"><a href=\"#参数说明-1\" class=\"headerlink\" title=\"参数说明\"></a>参数说明</h4><p>使用 <code>sm --help</code> 获取 thread 命令的帮助信息：</p>\n<pre class=\"language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\"><span class=\"token namespace\">[arthas@32344]</span>$ sm <span class=\"token operator\">--</span>help\n USAGE:\n   sm <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span>c &lt;value&gt;<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span>d<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span>h<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span>E<span class=\"token punctuation\">]</span> <span class=\"token keyword\">class</span><span class=\"token operator\">-</span>pattern <span class=\"token namespace\">[method-pattern]</span>\n\n SUMMARY:\n   Search the method of classes loaded by JVM\n\n EXAMPLES:\n   sm java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>String\n   sm <span class=\"token operator\">-</span>d org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>commons<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>StringUtils\n   sm <span class=\"token operator\">-</span>d org<span class=\"token operator\">/</span>apache<span class=\"token operator\">/</span>commons<span class=\"token operator\">/</span>lang<span class=\"token operator\">/</span>StringUtils\n   sm <span class=\"token operator\">*</span>StringUtils <span class=\"token operator\">*</span>\n   sm <span class=\"token operator\">-</span>Ed org\\\\<span class=\"token punctuation\">.</span>apache\\\\<span class=\"token punctuation\">.</span>commons\\\\<span class=\"token punctuation\">.</span>lang\\<span class=\"token punctuation\">.</span>StringUtils <span class=\"token punctuation\">.</span><span class=\"token operator\">*</span>\n\n WIKI:\n   https:<span class=\"token operator\">/</span><span class=\"token operator\">/</span>alibaba<span class=\"token punctuation\">.</span>github<span class=\"token punctuation\">.</span>io<span class=\"token operator\">/</span>arthas<span class=\"token operator\">/</span>sm\n\n OPTIONS:\n <span class=\"token operator\">-</span>c<span class=\"token punctuation\">,</span> <span class=\"token operator\">--</span>classloader &lt;value&gt;               The hash code of the special <span class=\"token keyword\">class</span><span class=\"token string\">'s classLoader\n -d, --details                           Display the details of method\n -h, --help                              this help\n -E, --regex                             Enable regular expression to match (wildcard matching by default)\n &lt;class-pattern&gt;                         Class name pattern, use either '</span><span class=\"token punctuation\">.</span><span class=\"token string\">' or '</span><span class=\"token operator\">/</span>' as separator\n &lt;method<span class=\"token operator\">-</span>pattern&gt;                        Method name pattern</code></pre>\n\n<p>主要参数说明如下：</p>\n<table>\n<thead>\n<tr>\n<th>参数名称</th>\n<th>参数说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><em> class-pattern</em></td>\n<td> 类名表达式匹配</td>\n</tr>\n<tr>\n<td><em> method-pattern</em></td>\n<td> 方法名表达式匹配</td>\n</tr>\n<tr>\n<td> [d]</td>\n<td> 展示每个方法的详细信息</td>\n</tr>\n<tr>\n<td> [E]</td>\n<td> 开启正则表达式匹配，默认为通配符匹配</td>\n</tr>\n<tr>\n<td><code>[c:]</code></td>\n<td>指定 class 的 ClassLoader 的 hashcode</td>\n</tr>\n<tr>\n<td><code>[classLoaderClass:]</code></td>\n<td>指定执行表达式的 ClassLoader 的 class name</td>\n</tr>\n<tr>\n<td><code>[n:]</code></td>\n<td>具有详细信息的匹配类的最大数量（默认为 100）</td>\n</tr>\n</tbody></table>\n<h4 id=\"查看方法信息\"><a href=\"#查看方法信息\" class=\"headerlink\" title=\"查看方法信息\"></a>查看方法信息</h4><p>展示类的所有方法：</p>\n<pre class=\"language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\"><span class=\"token namespace\">[arthas@32344]</span>$ sm  sample<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>controller<span class=\"token punctuation\">.</span>UserController\nsample<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>controller<span class=\"token punctuation\">.</span>UserController &lt;init&gt;<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>V\nsample<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>controller<span class=\"token punctuation\">.</span>UserController getUser<span class=\"token punctuation\">(</span>Ljava<span class=\"token operator\">/</span>lang<span class=\"token operator\">/</span>Integer<span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span>Ljava<span class=\"token operator\">/</span>util<span class=\"token operator\">/</span>HashMap<span class=\"token punctuation\">;</span>\nsample<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>controller<span class=\"token punctuation\">.</span>UserController sample<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>V\nAffect<span class=\"token punctuation\">(</span>row<span class=\"token operator\">-</span>cnt:3<span class=\"token punctuation\">)</span> cost in 33 ms<span class=\"token punctuation\">.</span></code></pre>\n\n<p>展示方法的详细信息：</p>\n<pre class=\"language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\"><span class=\"token namespace\">[arthas@32344]</span>$ sm <span class=\"token operator\">-</span>d sample<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>controller<span class=\"token punctuation\">.</span>UserController getUser\n declaring<span class=\"token operator\">-</span><span class=\"token keyword\">class</span>  sample<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>controller<span class=\"token punctuation\">.</span>UserController\n method<span class=\"token operator\">-</span>name      getUser\n modifier         public\n annotation       org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span>GetMapping\n parameters       java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>Integer\n <span class=\"token keyword\">return</span>           java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>HashMap\n exceptions       java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>Exception\n classLoaderHash  73d16e93\n\nAffect<span class=\"token punctuation\">(</span>row<span class=\"token operator\">-</span>cnt:1<span class=\"token punctuation\">)</span> cost in 4 ms<span class=\"token punctuation\">.</span></code></pre>\n\n","categories":["Java","Arthas"],"tags":["Java","Java诊断","Arthas"]},{"title":"Ceph 块设备 rbd 相关学习","url":"/2020/09/2020-09-01-Ceph%E5%9D%97%E8%AE%BE%E5%A4%87rbd%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/","content":"<h3 id=\"块设备相关文档\"><a href=\"#块设备相关文档\" class=\"headerlink\" title=\"块设备相关文档\"></a>块设备相关文档</h3><p><span class=\"exturl\" data-url=\"aHR0cDovL2RvY3MuY2VwaC5vcmcuY24vcmJkL3JiZC8=\">http://docs.ceph.org.cn/rbd/rbd/<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h3 id=\"rbd-命令\"><a href=\"#rbd-命令\" class=\"headerlink\" title=\"rbd 命令\"></a>rbd 命令</h3><p>创建 rbd</p>\n<pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\">$ rbd create --size <span class=\"token number\">10240</span> kcha/mysqldata</code></pre>\n\n<p>查看 rbd</p>\n<pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\">$ rbd list kcha\nmysqldata</code></pre>\n\n<p>调整块设备映像大小：</p>\n<pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\">$ rbd resize --size <span class=\"token number\">10240</span> kcha/mysqldata\nResizing image: <span class=\"token number\">100</span>% complete<span class=\"token punctuation\">..</span>.done.</code></pre>\n\n<p>查看信息：</p>\n<pre class=\"language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">$ rbd info kcha<span class=\"token operator\">/</span>mysqldata\nrbd image <span class=\"token string\">'mysqldata'</span>:\n        size 10240 MB in 2560 objects\n        order 22 <span class=\"token punctuation\">(</span>4096 kB objects<span class=\"token punctuation\">)</span>\n        block_name_prefix: rbd_data<span class=\"token punctuation\">.</span>b21066b8b4567\n        format: 2\n        features: layering<span class=\"token punctuation\">,</span> exclusive<span class=\"token operator\">-</span>lock<span class=\"token punctuation\">,</span> object<span class=\"token operator\">-</span>map<span class=\"token punctuation\">,</span> fast<span class=\"token operator\">-</span><span class=\"token function\">diff</span><span class=\"token punctuation\">,</span> deep<span class=\"token operator\">-</span>flatten\n        flags:</code></pre>\n\n<p>移除 features</p>\n<pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\">$ rbd feature disable kcha/mysqldata exclusive-lock, object-map, fast-diff, deep-flatten</code></pre>\n\n<h4 id=\"rbd-占用\"><a href=\"#rbd-占用\" class=\"headerlink\" title=\"rbd 占用\"></a>rbd 占用</h4><p>查看 rbd 实际占用：</p>\n<pre class=\"language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">$ rbd <span class=\"token function\">diff</span> kcha<span class=\"token operator\">/</span>mysqldata <span class=\"token punctuation\">|</span> awk <span class=\"token string\">'{ SUM += $2 } END { print SUM/1024/1024 \" MB\" }'</span>\n860<span class=\"token punctuation\">.</span>449 MB\n$ rbd <span class=\"token function\">diff</span> kcha<span class=\"token operator\">/</span>mysqldata <span class=\"token punctuation\">|</span> awk <span class=\"token string\">'{ SUM += $2 } END { print SUM/1024/1024/1024 \" GB\" }'</span>\n0<span class=\"token punctuation\">.</span>840282 GB</code></pre>\n\n<h4 id=\"删除-rbd\"><a href=\"#删除-rbd\" class=\"headerlink\" title=\"删除 rbd\"></a>删除 rbd</h4><p>直接删除：</p>\n<pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\">$ rbd <span class=\"token function\">rm</span> kcha/mysqldata\nRemoving image: <span class=\"token number\">100</span>% complete<span class=\"token punctuation\">..</span>.done.</code></pre>\n\n<p>若 rbd 被占用，则需要先将占用加入黑名单，后再删除。</p>\n<pre class=\"language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\"><span class=\"token comment\"># 加入黑名单</span>\n$ ceph osd blacklist add 10<span class=\"token punctuation\">.</span>105<span class=\"token punctuation\">.</span>136<span class=\"token punctuation\">.</span>63:0<span class=\"token operator\">/</span>1081512968\nblacklisting 10<span class=\"token punctuation\">.</span>105<span class=\"token punctuation\">.</span>136<span class=\"token punctuation\">.</span>63:0<span class=\"token operator\">/</span>1081512968 <span class=\"token keyword\">until</span> 2020<span class=\"token operator\">-</span>09<span class=\"token operator\">-</span>01T10:46:28<span class=\"token punctuation\">.</span>920245<span class=\"token operator\">+</span>0000 <span class=\"token punctuation\">(</span>3600 sec<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 删除</span>\n$ rbd <span class=\"token function\">rm</span> kcha<span class=\"token operator\">/</span>mysqldata\nRemoving image: 100<span class=\"token operator\">%</span> complete<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>done<span class=\"token punctuation\">.</span>\n<span class=\"token comment\"># 查看黑名单</span>\n$ ceph osd blacklist <span class=\"token function\">ls</span>\nlisted 1 entries\n10<span class=\"token punctuation\">.</span>105<span class=\"token punctuation\">.</span>136<span class=\"token punctuation\">.</span>63:0<span class=\"token operator\">/</span>1081512968 2020<span class=\"token operator\">-</span>09<span class=\"token operator\">-</span>01T10:46:28<span class=\"token punctuation\">.</span>920245<span class=\"token operator\">+</span>0000\n<span class=\"token comment\"># 移除黑名单</span>\n$ ceph osd blacklist <span class=\"token function\">rm</span> 10<span class=\"token punctuation\">.</span>105<span class=\"token punctuation\">.</span>136<span class=\"token punctuation\">.</span>63:0<span class=\"token operator\">/</span>1081512968\nun<span class=\"token operator\">-</span>blacklisting 10<span class=\"token punctuation\">.</span>105<span class=\"token punctuation\">.</span>136<span class=\"token punctuation\">.</span>63:0<span class=\"token operator\">/</span>1081512968</code></pre>\n\n<h4 id=\"导入导出\"><a href=\"#导入导出\" class=\"headerlink\" title=\"导入导出\"></a>导入导出</h4><pre class=\"language-none\"><code class=\"language-none\">$ rbd export kcha/mysqldata ~/mysqldata\nExporting image: 100% complete...done.</code></pre>\n\n\n\n<pre class=\"language-none\"><code class=\"language-none\">$ rbd import ~/mysqldata  mantidata/mysqldata --image-format 2\nImporting image: 100% complete...done.</code></pre>\n\n\n\n<h3 id=\"RBD特性解析\"><a href=\"#RBD特性解析\" class=\"headerlink\" title=\"RBD特性解析\"></a>RBD 特性解析</h3><h4 id=\"特性一览表\"><a href=\"#特性一览表\" class=\"headerlink\" title=\"特性一览表\"></a>特性一览表</h4><p>RBD 支持的特性，及具体 BIT 值的计算如下</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>功能</th>\n<th> BIT 码</th>\n</tr>\n</thead>\n<tbody><tr>\n<td> layering</td>\n<td> 支持分层</td>\n<td> 1</td>\n</tr>\n<tr>\n<td>striping</td>\n<td> 支持条带化 v2</td>\n<td>2</td>\n</tr>\n<tr>\n<td>exclusive-lock</td>\n<td> 支持独占锁</td>\n<td> 4</td>\n</tr>\n<tr>\n<td>object-map</td>\n<td> 支持对象映射（依赖 exclusive-lock ）</td>\n<td>8</td>\n</tr>\n<tr>\n<td>fast-diff</td>\n<td> 快速计算差异（依赖 object-map ）</td>\n<td>16</td>\n</tr>\n<tr>\n<td>deep-flatten</td>\n<td> 支持快照扁平化操作</td>\n<td> 32</td>\n</tr>\n<tr>\n<td>journaling</td>\n<td> 支持记录 IO 操作（依赖独占锁）</td>\n<td>64</td>\n</tr>\n</tbody></table>\n<h4 id=\"默认属性值\"><a href=\"#默认属性值\" class=\"headerlink\" title=\"默认属性值\"></a>默认属性值</h4><p>ceph kraken 版本默认属性值</p>\n<pre class=\"language-none\"><code class=\"language-none\"># ceph --show-config|grep rbd|grep featuresrbd_default_features = 61</code></pre>\n\n<p>为啥是 61？我们创建一个默认配置的 rbd 看看</p>\n<pre class=\"language-none\"><code class=\"language-none\"># rbd create test-feature --size 64# rbd info rbd/test-featurerbd image 'test-feature':\tsize 65536 kB in 16 objects\torder 22 (4096 kB objects)\tblock_name_prefix: rbd_data.107d238e1f29\tformat: 2\tfeatures: layering, exclusive-lock, object-map, fast-diff, deep-flatten\tflags:</code></pre>\n\n<p><strong>1+4+8+16+32 = 61</strong></p>\n<p>就是说除了特性：striping 和 journaling 外都开启了。</p>\n<h4 id=\"控制属性\"><a href=\"#控制属性\" class=\"headerlink\" title=\"控制属性\"></a>控制属性</h4><p>有三种方法来开启需要的特性</p>\n<p>1、在创建 image 时，通过 <code>--image-feature</code> 来指定需要开启的特性</p>\n<p>2、对已存在的 image 可以通过如下命令开启和关闭</p>\n<pre class=\"language-none\"><code class=\"language-none\">rbd feature enable &lt;pool-name&gt;/&lt;image-name&gt; &lt;feature-name&gt;rbd feature disable &lt;pool-name&gt;/&lt;image-name&gt; &lt;feature-name&gt;</code></pre>\n\n<p>3、当然，每次通过 enable 和 disable 来不是很便捷，可以通过修改配置文件来解决</p>\n<pre class=\"language-none\"><code class=\"language-none\">vim /etc/ceph/ceph.conf...rbd_default_features = 1...</code></pre>\n\n<p>具体该设为多少可以通过上面 BIT 值查表计算得出。</p>\n","categories":["Ceph"],"tags":["Ceph"]},{"title":"Arthas 之使用 profiler 做复杂链路分析","url":"/2020/09/2020-09-02-Arthas%E4%B9%8B%E4%BD%BF%E7%94%A8profiler%E5%81%9A%E5%A4%8D%E6%9D%82%E9%93%BE%E8%B7%AF%E5%88%86%E6%9E%90/","content":"<h3 id=\"Arthas-的-profiler-命令\"><a href=\"#Arthas-的-profiler-命令\" class=\"headerlink\" title=\"Arthas 的 profiler 命令\"></a>Arthas 的 profiler 命令</h3><h4 id=\"命令说明\"><a href=\"#命令说明\" class=\"headerlink\" title=\"命令说明\"></a>命令说明</h4><p><code>profiler</code> 命令支持生成应用热点的火焰图。本质上是通过不断的采样，然后把收集到的采样结果生成火焰图。</p>\n<blockquote>\n<p>文档：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9hcnRoYXMuYWxpeXVuLmNvbS9kb2MvcHJvZmlsZXIuaHRtbA==\">https://arthas.aliyun.com/doc/profiler.html<i class=\"fa fa-external-link-alt\"></i></span></p>\n</blockquote>\n<p><code>profiler</code> 命令的实现依赖于开源 <code>async-profiler</code>：</p>\n<blockquote>\n<p>GitHub：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2p2bS1wcm9maWxpbmctdG9vbHMvYXN5bmMtcHJvZmlsZXI=\">https://github.com/jvm-profiling-tools/async-profiler<i class=\"fa fa-external-link-alt\"></i></span></p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h4 id=\"参数说明\"><a href=\"#参数说明\" class=\"headerlink\" title=\"参数说明\"></a>参数说明</h4><table>\n<thead>\n<tr>\n<th>参数名称</th>\n<th>参数说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><em> action</em></td>\n<td> 要执行的操作</td>\n</tr>\n<tr>\n<td><em> actionArg</em></td>\n<td> 属性名模式</td>\n</tr>\n<tr>\n<td> [i:]</td>\n<td> 采样间隔（单位：ns）（默认值：10'000'000，即 10 ms）</td>\n</tr>\n<tr>\n<td>[f:]</td>\n<td> 将输出转储到指定路径</td>\n</tr>\n<tr>\n<td> [d:]</td>\n<td> 运行评测指定秒</td>\n</tr>\n<tr>\n<td> [e:]</td>\n<td> 要跟踪哪个事件（cpu, alloc, lock, cache-misses 等），默认是 cpu</td>\n</tr>\n</tbody></table>\n<h4 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h4><p><code>profiler</code> 命令的使用，有以下注意事项：</p>\n<ol>\n<li><p>Windows 系统不支持 profiler 命令，只有  Linux/Mac 支持。</p>\n<blockquote>\n<p>Current OS do not support AsyncProfiler, Only support Linux/Mac.</p>\n</blockquote>\n</li>\n<li><p><code>$ /lib/x86_64-linux-gnu/libc.so.6 --version</code> 版本大于 2.14</p>\n<blockquote>\n<p>/lib/x86_64-linux-gnu/libc.so.6: version `GLIBC_2.14' not found</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"使用-profiler-命令\"><a href=\"#使用-profiler-命令\" class=\"headerlink\" title=\"使用 profiler 命令\"></a>使用 profiler 命令</h3><h4 id=\"启动profiler\"><a href=\"#启动profiler\" class=\"headerlink\" title=\"启动profiler\"></a>启动 profiler</h4><pre class=\"language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">$ profiler <span class=\"token function\">start</span>\nStarted <span class=\"token namespace\">[cpu]</span> profiling</code></pre>\n\n<blockquote>\n<p>默认情况下，生成的是 cpu 的火焰图，即 event 为 <code>cpu</code>。可以用 <code>--event</code> 参数来指定。</p>\n</blockquote>\n<h4 id=\"获取数量\"><a href=\"#获取数量\" class=\"headerlink\" title=\"获取数量\"></a>获取数量</h4><p>获取已采集的 sample 的数量</p>\n<pre class=\"language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">$ profiler getSamples\n23</code></pre>\n\n<h4 id=\"查看状态\"><a href=\"#查看状态\" class=\"headerlink\" title=\"查看状态\"></a>查看状态</h4><pre class=\"language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">$ profiler status\n<span class=\"token namespace\">[cpu]</span> profiling is running <span class=\"token keyword\">for</span> 4 seconds</code></pre>\n\n<p>可以查看当前 profiler 在采样哪种 <code>event</code> 和采样时间。</p>\n<h4 id=\"停止profiler\"><a href=\"#停止profiler\" class=\"headerlink\" title=\"停止profiler\"></a>停止 profiler</h4><p>默认生成 svg 格式结果</p>\n<pre class=\"language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">$ profiler stop\nprofiler output file: <span class=\"token operator\">/</span>tmp<span class=\"token operator\">/</span>demo<span class=\"token operator\">/</span>arthas<span class=\"token operator\">-</span>output<span class=\"token operator\">/</span>20191125<span class=\"token operator\">-</span>135546<span class=\"token punctuation\">.</span>svg\nOK</code></pre>\n\n<p>默认情况下，生成的结果保存到应用的<code>工作目录</code>下的 <code>arthas-output</code> 目录。可以通过 <code>--file</code> 参数来指定输出结果路径。比如：</p>\n<pre class=\"language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">$ profiler stop <span class=\"token operator\">--</span>file <span class=\"token operator\">/</span>tmp<span class=\"token operator\">/</span>output<span class=\"token punctuation\">.</span>svg\nprofiler output file: <span class=\"token operator\">/</span>tmp<span class=\"token operator\">/</span>output<span class=\"token punctuation\">.</span>svg\nOK</code></pre>\n\n<h4 id=\"生成html格式\"><a href=\"#生成html格式\" class=\"headerlink\" title=\"生成html格式\"></a>生成 html 格式</h4><p>默认情况下，结果文件是 <code>svg</code> 格式，如果想生成 <code>html</code> 格式，可以用 <code>--format</code> 参数指定：</p>\n<pre class=\"language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">$ profiler stop <span class=\"token operator\">--</span>format html\nprofiler output file: <span class=\"token operator\">/</span>tmp<span class=\"token operator\">/</span>test<span class=\"token operator\">/</span>arthas<span class=\"token operator\">-</span>output<span class=\"token operator\">/</span>20191125<span class=\"token operator\">-</span>143329<span class=\"token punctuation\">.</span>html\nOK</code></pre>\n\n<p>或者在 <code>--file</code> 参数里用文件名指名格式。比如 <code>--file /tmp/result.html</code> 。</p>\n<h3 id=\"做复杂链路分析\"><a href=\"#做复杂链路分析\" class=\"headerlink\" title=\"做复杂链路分析\"></a>做复杂链路分析</h3><h4 id=\"采样生成jfr文件\"><a href=\"#采样生成jfr文件\" class=\"headerlink\" title=\"采样生成jfr文件\"></a>采样生成 jfr 文件</h4><p>启动 arthas 之后，执行以下采样命令：</p>\n<pre class=\"language-none\"><code class=\"language-none\">profiler start -f /home/admin/yourAppName/target/arthas-output/%t.jfr -d 180</code></pre>\n\n<p>% t 表示当前时间，-d 后面是采样秒数。</p>\n","categories":["Java","Arthas"],"tags":["Java","Java诊断","Arthas"]},{"title":"k8s 静态 PV 集成 ceph 块设备存储","url":"/2020/09/2020-09-02-k8s%E9%9D%99%E6%80%81PV%E9%9B%86%E6%88%90ceph%E5%9D%97%E8%AE%BE%E5%A4%87%E5%AD%98%E5%82%A8/","content":"<h3 id=\"静态-PV-使用步骤\"><a href=\"#静态-PV-使用步骤\" class=\"headerlink\" title=\"静态 PV 使用步骤\"></a>静态 PV 使用步骤</h3><ol>\n<li>创建存储池并启用 RBD 功能。</li>\n<li>创建 Ceph 用户，提供给 k8s 使用。</li>\n<li>在 k8s 上安装 ceph-common 客户端。</li>\n<li>复制 <code>ceph.conf</code> 以及 admin 用户的 keyring 文件到 k8s 节点（master and node）。</li>\n<li>创建 Secret 资源，以 keyring 的 key 为 data。</li>\n<li>静态 PV 使用：<ol>\n<li>创建 PV</li>\n<li> 创建 PVC</li>\n<li> 在 Ceph 存储池里创建对应的 RBDImage</li>\n<li> 创建 POD</li>\n</ol>\n</li>\n</ol>\n<a id=\"more\"></a>\n\n<h3 id=\"安装-ceph-客户端\"><a href=\"#安装-ceph-客户端\" class=\"headerlink\" title=\"安装 ceph 客户端\"></a>安装 ceph 客户端</h3><p>在部署 kubernetes 之前我们就已经有了 Ceph 集群，因此我们可以直接拿来用。但是 kubernetes 的所有节点（尤其是 master 节点）上依然需要安装 ceph 客户端。</p>\n<pre class=\"language-none\"><code class=\"language-none\">apt-get install -y ceph-common</code></pre>\n\n<p>还需要将 ceph 的配置文件 <code>ceph.conf</code> 放在所有节点的 <code>/etc/ceph</code> 目录下。</p>\n<h3 id=\"配置-Secret-资源\"><a href=\"#配置-Secret-资源\" class=\"headerlink\" title=\"配置 Secret 资源\"></a>配置 Secret 资源</h3><p>生成 Ceph secret</p>\n<pre class=\"language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\"><span class=\"token comment\"># ceph auth get-key client.admin |base64</span>\nQVFBS1RobGZEVysySXhBQXBVekozNGZ0RG1OTVVhRGlWL1NCMEE9PQ==</code></pre>\n\n<p>创建 <code>ceph-secret.yaml</code> 文件内容为：</p>\n<pre class=\"language-yml\" data-language=\"yml\"><code class=\"language-yml\">apiVersion: v1\nkind: Secret\nmetadata:\n  name: ceph-secret\ndata:\n  key: QVFBS1RobGZEVysySXhBQXBVekozNGZ0RG1OTVVhRGlWL1NCMEE9PQ==</code></pre>\n\n<h3 id=\"创建块存储\"><a href=\"#创建块存储\" class=\"headerlink\" title=\"创建块存储\"></a>创建块存储</h3><p>创建 pool kcha</p>\n<p>创建 rbd</p>\n<pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\">$ rbd create --size 102400 kcha/mysqldata</code></pre>\n\n<p>移除 features</p>\n<pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\">$ rbd feature disable kcha/mysqldata exclusive-lock, object-map, fast-diff, deep-flatten</code></pre>\n\n<h3 id=\"查看-mon\"><a href=\"#查看-mon\" class=\"headerlink\" title=\"查看 mon\"></a>查看 mon</h3><p>查看 mon 状态：</p>\n<pre class=\"language-none\"><code class=\"language-none\"># ceph mon stat\ne2: 2 mons at {a=[v2:172.18.32.119:3300/0,v1:172.18.32.119:6789/0],b=[v2:172.18.83.170:3300/0,v1:172.18.83.170:6789/0]}, election epoch 16, leader 0 a, quorum 0,1 a,b</code></pre>\n\n<h3 id=\"创建-PV\"><a href=\"#创建-PV\" class=\"headerlink\" title=\"创建 PV\"></a>创建 PV</h3><p>创建 <code>pv-mysql.yaml</code> 文件内容为：</p>\n<pre class=\"language-yml\" data-language=\"yml\"><code class=\"language-yml\">apiVersion: v1\nkind: PersistentVolume\nmetadata:\n  name: mysqldata\n  namespace: manti-infra\nspec:\n  capacity:\n    storage: 10Gi\n  accessModes:\n    - ReadWriteOnce\n  rbd:\n    monitors:\n    - 172.18.32.119:6789\n    - 172.18.83.170:6789\n    pool: kcha\n    image: mysqldata\n    user: admin\n    secretRef:\n      name: ceph-secret\n      namespace: default\n    fsType: ext4\n    readOnly: false\n  persistentVolumeReclaimPolicy: Recycle\n  storageClassName: mysqldata</code></pre>\n\n<h3 id=\"创建-PVC\"><a href=\"#创建-PVC\" class=\"headerlink\" title=\"创建 PVC\"></a>创建 PVC</h3><p>创建 <code>pvc-mysql.yaml</code> 文件内容为：</p>\n<pre class=\"language-yml\" data-language=\"yml\"><code class=\"language-yml\">apiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: mysqldata\n  namespace: manti-infra\nspec:\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 10Gi\n  storageClassName: mysqldata</code></pre>\n\n<h3 id=\"创建-pod\"><a href=\"#创建-pod\" class=\"headerlink\" title=\"创建 pod\"></a>创建 pod</h3><pre class=\"language-yml\" data-language=\"yml\"><code class=\"language-yml\">apiVersion: apps/v1\nkind: Deployment\nmetadata:\n    name: mysql\n    namespace: manti-infra\nspec:\n    replicas: 1\n    selector:\n        matchLabels:\n            app: mysql\n    template:\n        metadata:\n            labels:\n                app: mysql\n        spec:\n            imagePullSecrets:\n              - name: harborsecret\n            containers:\n              - name: mysql\n                image: mysql:v1.0.6\n                imagePullPolicy: IfNotPresent\n                ports:\n                  - containerPort: 3306\n                env:\n                  - name: MYSQL_ROOT_PASSWORD\n                    value: 123456\n                volumeMounts:\n                  - name: mysqldata\n                    subPath: mysql\n                    mountPath: /var/lib/mysql\n            volumes:\n              - name: mysqldata\n                persistentVolumeClaim:\n                    claimName: mysqldata\n            initContainers:\n              - name: increase-fd-ulimit\n                image: busybox\n                command: [\"sh\", \"-c\", \"ulimit -n 65536\"]\n                securityContext:\n                    privileged: true</code></pre>\n\n<h3 id=\"验证服务\"><a href=\"#验证服务\" class=\"headerlink\" title=\"验证服务\"></a>验证服务</h3><pre class=\"language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">$ kg pod <span class=\"token operator\">-</span>o wide\nNAME                     READY   STATUS    RESTARTS   AGE   IP              \nmysql<span class=\"token operator\">-</span>544c557fdb<span class=\"token operator\">-</span>nrp92   1<span class=\"token operator\">/</span>1     Running   0          25m   192<span class=\"token punctuation\">.</span>168<span class=\"token punctuation\">.</span>74<span class=\"token punctuation\">.</span>76   \n$ mysql <span class=\"token operator\">-</span>h192<span class=\"token punctuation\">.</span>168<span class=\"token punctuation\">.</span>74<span class=\"token punctuation\">.</span>76 <span class=\"token operator\">-</span>P3306 <span class=\"token operator\">-</span>uroot <span class=\"token operator\">-</span>p123456</code></pre>\n\n<h3 id=\"问题解决\"><a href=\"#问题解决\" class=\"headerlink\" title=\"问题解决\"></a>问题解决</h3><h4 id=\"rbd-feature-disable\"><a href=\"#rbd-feature-disable\" class=\"headerlink\" title=\"rbd feature disable\"></a>rbd feature disable</h4><pre class=\"language-none\"><code class=\"language-none\">RBD image feature set mismatch. You can disable features unsupported by the kernel with \"rbd feature disable\".\nIn some cases useful info is found in syslog - try \"dmesg | tail\" or so.\nrbd: map failed: (6) No such device or address</code></pre>\n\n<p>移除 features</p>\n<pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\">$ rbd feature disable kcha/mysqldata exclusive-lock, object-map, fast-diff, deep-flatten</code></pre>\n\n<h4 id=\"data-directory-has-files\"><a href=\"#data-directory-has-files\" class=\"headerlink\" title=\"data directory has files\"></a>data directory has files</h4><p>部署后日志报错：</p>\n<pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\">$ k logs mysql-66946b4c48-7dngn\nInitializing database\n2020-09-01T10:34:38.008752-00:00 0 [ERROR] --initialize specified but the data directory has files in it. Aborting.\n2020-09-01T10:34:38.008819-00:00 0 [ERROR] Aborting</code></pre>\n\n<p>参考资料：</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2RvY2tlci1saWJyYXJ5L215c3FsL2lzc3Vlcy8xODY=\">https://github.com/docker-library/mysql/issues/186<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXYubXlzcWwuY29tL2RvYy9yZWZtYW4vNS43L2VuL3NlcnZlci1vcHRpb25zLmh0bWwjb3B0aW9uX215c3FsZF9pZ25vcmUtZGItZGly\">https://dev.mysql.com/doc/refman/5.7/en/server-options.html#option_mysqld_ignore-db-dir<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<p>原因：</p>\n<p>一个新的 ext4 磁盘分区通常不为空。有一个 <code>lost+found</code> 目录，已知 mysql 会阻塞该目录。您可以尝试添加 <code>--ignore-db-dir=lost+found</code> 到，<code>CMD</code> 以确保确定。</p>\n<p>解决方案：</p>\n<ol>\n<li><p>增加启动参数：</p>\n<pre class=\"language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> mysql<span class=\"token punctuation\">-</span>master\n<span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> mysql<span class=\"token punctuation\">:</span><span class=\"token number\">5.7</span>\n<span class=\"token key atrule\">args</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token string\">\"--ignore-db-dir=lost+found\"</span></code></pre>\n</li>\n<li><p>增加子目录</p>\n<pre class=\"language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">volumeMounts</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> mysqldata\n\t<span class=\"token key atrule\">subPath</span><span class=\"token punctuation\">:</span> mysql\n\t<span class=\"token key atrule\">mountPath</span><span class=\"token punctuation\">:</span> /var/lib/mysql</code></pre>\n\n</li>\n</ol>\n<h3 id=\"相关资料\"><a href=\"#相关资料\" class=\"headerlink\" title=\"相关资料\"></a>相关资料</h3><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL3poL2RvY3MvY29uY2VwdHMvc3RvcmFnZS9zdG9yYWdlLWNsYXNzZXMvI2NlcGgtcmJk\">https://kubernetes.io/zh/docs/concepts/storage/storage-classes/#ceph-rbd<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL2RvY3MvY29uY2VwdHMvc3RvcmFnZS9zdG9yYWdlLWNsYXNzZXMv\">https://kubernetes.io/docs/concepts/storage/storage-classes/<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9qaW1teXNvbmcuaW8va3ViZXJuZXRlcy1oYW5kYm9vay9wcmFjdGljZS91c2luZy1jZXBoLWZvci1wZXJzaXN0ZW50LXN0b3JhZ2UuaHRtbA==\">https://jimmysong.io/kubernetes-handbook/practice/using-ceph-for-persistent-storage.html<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n","categories":["Ceph","Container","Kubernets"],"tags":["Ceph","k8s"]},{"title":"k8s 动态扩容 Ceph 持久卷","url":"/2020/09/2020-09-04-k8s%E5%8A%A8%E6%80%81%E6%89%A9%E5%AE%B9Ceph%E6%8C%81%E4%B9%85%E5%8D%B7/","content":"<p>主要是针对 ceph 的 rbd 创建的 pv 进行扩容操作。</p>\n<h3 id=\"StorageClass-配置自动扩容\"><a href=\"#StorageClass-配置自动扩容\" class=\"headerlink\" title=\"StorageClass 配置自动扩容\"></a>StorageClass 配置自动扩容</h3><p>需要配置 storage class，开启允许扩容选项 <code>allowVolumeExpansion</code></p>\n<pre class=\"language-none\"><code class=\"language-none\">apiVersion: storage.k8s.io/v1\nkind: StorageClass\nallowVolumeExpansion: true\nprovisioner: ceph.com/rbd</code></pre>\n\n<p>任何从这一 <code>StorageClass</code> 中创建的 PVC 都能够通过编辑的方式来申请更多空间。Kubernetes 会处理 Storage 字段的变更，据此申请空间，触发卷的扩容。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"对已创建的-PV-进行扩容\"><a href=\"#对已创建的-PV-进行扩容\" class=\"headerlink\" title=\"对已创建的 PV 进行扩容\"></a>对已创建的 PV 进行扩容</h3><ol>\n<li><p><strong>查看 PV 信息</strong></p>\n<pre class=\"language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">$ kubectl describe pv pvc<span class=\"token operator\">-</span>3e1e651c<span class=\"token operator\">-</span>fcce<span class=\"token operator\">-</span>4a31<span class=\"token operator\">-</span>8283<span class=\"token operator\">-</span>8b5d7f4859fc <span class=\"token punctuation\">|</span>grep Image\n    RBDImage:      kubernetes<span class=\"token operator\">-</span>dynamic<span class=\"token operator\">-</span>pvc<span class=\"token operator\">-</span>dbaa94d7<span class=\"token operator\">-</span>ecdd<span class=\"token operator\">-</span>11ea<span class=\"token operator\">-</span>a4f5<span class=\"token operator\">-</span>aedb151bd819</code></pre>\n</li>\n<li><p><strong>查看 rbd 镜像信息</strong></p>\n<pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\">$ rbd info kcha/kubernetes-dynamic-pvc-dbaa94d7-ecdd-11ea-a4f5-aedb151bd819\nrbd image 'kubernetes-dynamic-pvc-dbaa94d7-ecdd-11ea-a4f5-aedb151bd819':\n        size 30 GB in 256000 objects\n        order 22 (4096 kB objects)\n        block_name_prefix: rbd_data.b642e6b8b4567\n        format: 2\n        features: layering\n        flags:</code></pre>\n</li>\n<li><p><strong>修改 rbd 大小</strong></p>\n<pre class=\"language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">$ rbd resize <span class=\"token operator\">--</span>size 1024000 kcha<span class=\"token operator\">/</span>kubernetes<span class=\"token operator\">-</span>dynamic<span class=\"token operator\">-</span>pvc<span class=\"token operator\">-</span>dbaa94d7<span class=\"token operator\">-</span>ecdd<span class=\"token operator\">-</span>11ea<span class=\"token operator\">-</span>a4f5<span class=\"token operator\">-</span>aedb151bd819</code></pre>\n</li>\n<li><p><strong>更新 PV 大小</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">$ kubectl edit pv pvc-3e1e651c-fcce-4a31-8283-8b5d7f4859fc</code></pre>\n<p>修改其中的 <code>storage: 30Gi</code> 大小。然后 <code>kubectl get pv</code> 查看更新。</p>\n</li>\n<li><p><strong>更新 PVC 大小</strong></p>\n<pre class=\"language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">$ kubectl edit pvc esdata<span class=\"token operator\">-</span>es<span class=\"token operator\">-</span>0</code></pre>\n\n<p>修改其中的 <code>storage: 30Gi</code> 大小。然后 <code>kubectl get pvc</code> 查看更新。</p>\n</li>\n<li><p><strong>重启挂载该 PVC 的 Pod。</strong></p>\n</li>\n</ol>\n<h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h3>","categories":["Ceph","Container","Kubernets"],"tags":["Ceph","k8s"]},{"title":"k8s 动态 PV 集成 ceph 块设备存储","url":"/2020/09/2020-09-03-k8s%E5%8A%A8%E6%80%81PV%E9%9B%86%E6%88%90ceph%E5%9D%97%E8%AE%BE%E5%A4%87%E5%AD%98%E5%82%A8/","content":"<h3 id=\"动态-PV-使用步骤\"><a href=\"#动态-PV-使用步骤\" class=\"headerlink\" title=\"动态 PV 使用步骤\"></a>动态 PV 使用步骤</h3><ol>\n<li>创建存储池并启用 RBD 功能。</li>\n<li>创建 Ceph 用户，提供给 k8s 使用。</li>\n<li>在 k8s 上安装 ceph-common 客户端。</li>\n<li>复制 <code>ceph.conf</code> 以及 admin 用户的 keyring 文件到 k8s 节点（master and node）。</li>\n<li>创建 Secret 资源，以 keyring 的 key 为 data。</li>\n<li>动态 PV 使用<ol>\n<li>创建 StorageClass</li>\n<li> 创建 PVC</li>\n<li> 创建 POD</li>\n</ol>\n</li>\n</ol>\n<a id=\"more\"></a>\n\n<h3 id=\"安装-ceph-客户端\"><a href=\"#安装-ceph-客户端\" class=\"headerlink\" title=\"安装 ceph 客户端\"></a>安装 ceph 客户端</h3><p>在部署 kubernetes 之前我们就已经有了 Ceph 集群，因此我们可以直接拿来用。但是 kubernetes 的所有节点（尤其是 master 节点）上依然需要安装 ceph 客户端。</p>\n<pre class=\"language-none\"><code class=\"language-none\">apt-get install -y ceph-common</code></pre>\n\n<p>还需要将 ceph 的配置文件 <code>ceph.conf</code> 放在所有节点的 <code>/etc/ceph</code> 目录下。</p>\n<h3 id=\"配置-Secret-资源\"><a href=\"#配置-Secret-资源\" class=\"headerlink\" title=\"配置 Secret 资源\"></a>配置 Secret 资源</h3><p>生成 Ceph secret</p>\n<pre class=\"language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\"><span class=\"token comment\"># ceph auth get-key client.admin |base64</span>\nQVFBS1RobGZEVysySXhBQXBVekozNGZ0RG1OTVVhRGlWL1NCMEE9PQ==</code></pre>\n\n<p>创建 <code>ceph-secret.yaml</code> 文件内容为：</p>\n<pre class=\"language-yml\" data-language=\"yml\"><code class=\"language-yml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Secret\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> ceph<span class=\"token punctuation\">-</span>secret\n<span class=\"token key atrule\">data</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">key</span><span class=\"token punctuation\">:</span> QVFBS1RobGZEVysySXhBQXBVekozNGZ0RG1OTVVhRGlWL1NCMEE9PQo=</code></pre>\n\n<h3 id=\"创建-pool\"><a href=\"#创建-pool\" class=\"headerlink\" title=\"创建 pool\"></a>创建 pool</h3><p>Ceph 创建 pool </p>\n<h3 id=\"创建-StorageClass\"><a href=\"#创建-StorageClass\" class=\"headerlink\" title=\"创建 StorageClass\"></a>创建 StorageClass</h3><p>创建 <code>storage-class.yaml</code> 文件内容为：</p>\n<pre class=\"language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> storage.k8s.io/v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> StorageClass\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> kchadata\n  <span class=\"token key atrule\">annotations</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">storageclass.beta.kubernetes.io/is-default-class</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"true\"</span>\n<span class=\"token key atrule\">provisioner</span><span class=\"token punctuation\">:</span> ceph.com/rbd\n<span class=\"token key atrule\">parameters</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">monitors</span><span class=\"token punctuation\">:</span> 172.18.32.119<span class=\"token punctuation\">:</span><span class=\"token number\">6789</span><span class=\"token punctuation\">,</span>172.18.83.170<span class=\"token punctuation\">:</span><span class=\"token number\">6789</span>\n  <span class=\"token key atrule\">adminId</span><span class=\"token punctuation\">:</span> admin\n  <span class=\"token key atrule\">adminSecretName</span><span class=\"token punctuation\">:</span> ceph<span class=\"token punctuation\">-</span>secret\n  <span class=\"token key atrule\">adminSecretNamespace</span><span class=\"token punctuation\">:</span> default\n  <span class=\"token key atrule\">pool</span><span class=\"token punctuation\">:</span> kcha\n  <span class=\"token key atrule\">userId</span><span class=\"token punctuation\">:</span> admin\n  <span class=\"token key atrule\">userSecretName</span><span class=\"token punctuation\">:</span> ceph<span class=\"token punctuation\">-</span>secret\n  <span class=\"token key atrule\">userSecretNamespace</span><span class=\"token punctuation\">:</span> default\n  <span class=\"token key atrule\">fsType</span><span class=\"token punctuation\">:</span> ext4\n  <span class=\"token key atrule\">imageFormat</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"2\"</span>\n  <span class=\"token key atrule\">imageFeatures</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"layering\"</span>\n<span class=\"token key atrule\">reclaimPolicy</span><span class=\"token punctuation\">:</span> Retain</code></pre>\n\n<h3 id=\"创建-PVC\"><a href=\"#创建-PVC\" class=\"headerlink\" title=\"创建 PVC\"></a>创建 PVC</h3><p>创建 <code>pvc-zkdata.yaml</code> 文件内容为：</p>\n<pre class=\"language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> PersistentVolumeClaim\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> zkdata<span class=\"token punctuation\">-</span>zk<span class=\"token punctuation\">-</span><span class=\"token number\">0</span>\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">accessModes</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> ReadWriteOnce\n  <span class=\"token key atrule\">resources</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">requests</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">storage</span><span class=\"token punctuation\">:</span> 10Gi\n<span class=\"token punctuation\">---</span>\n<span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> PersistentVolumeClaim\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> zkdata<span class=\"token punctuation\">-</span>zk<span class=\"token punctuation\">-</span><span class=\"token number\">1</span>\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">accessModes</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> ReadWriteOnce\n  <span class=\"token key atrule\">resources</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">requests</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">storage</span><span class=\"token punctuation\">:</span> 10Gi\n<span class=\"token punctuation\">---</span>\n<span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> PersistentVolumeClaim\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> zkdata<span class=\"token punctuation\">-</span>zk<span class=\"token punctuation\">-</span><span class=\"token number\">2</span>\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">accessModes</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> ReadWriteOnce\n  <span class=\"token key atrule\">resources</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">requests</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">storage</span><span class=\"token punctuation\">:</span> 10Gi</code></pre>\n\n<p>查看 PVC 和 PV，可以看到 PVC 是 Bound 状态，而且 PV 已经自动创建：</p>\n<pre class=\"language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">$ kg pvc\nNAME          STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS   AGE\nzkdata<span class=\"token operator\">-</span>zk<span class=\"token operator\">-</span>0   Bound    pvc<span class=\"token operator\">-</span>b5acf208<span class=\"token operator\">-</span>86a1<span class=\"token operator\">-</span>4eb9<span class=\"token operator\">-</span>b5f2<span class=\"token operator\">-</span>5f99a9621ffa   10Gi       RWO            kchadata       9m5s\nzkdata<span class=\"token operator\">-</span>zk<span class=\"token operator\">-</span>1   Bound    pvc<span class=\"token operator\">-</span>9cc38190<span class=\"token operator\">-</span>7cd1<span class=\"token operator\">-</span>43b9<span class=\"token operator\">-</span>948e<span class=\"token operator\">-</span>7addd205bbeb   10Gi       RWO            kchadata       9m5s\nzkdata<span class=\"token operator\">-</span>zk<span class=\"token operator\">-</span>2   Bound    pvc<span class=\"token operator\">-</span>33494a8b<span class=\"token operator\">-</span>a119<span class=\"token operator\">-</span>45a0<span class=\"token operator\">-</span>9741<span class=\"token operator\">-</span>f09aa31008b3   10Gi       RWO            kchadata       9m5s\n\n$ kg pv\nNAME                                       CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                     STORAGECLASS   REASON   AGE\npvc<span class=\"token operator\">-</span>33494a8b<span class=\"token operator\">-</span>a119<span class=\"token operator\">-</span>45a0<span class=\"token operator\">-</span>9741<span class=\"token operator\">-</span>f09aa31008b3   10Gi       RWO            Retain           Bound    manti<span class=\"token operator\">-</span>infra<span class=\"token operator\">/</span>zkdata<span class=\"token operator\">-</span>zk<span class=\"token operator\">-</span>2   kchadata                9m34s\npvc<span class=\"token operator\">-</span>9cc38190<span class=\"token operator\">-</span>7cd1<span class=\"token operator\">-</span>43b9<span class=\"token operator\">-</span>948e<span class=\"token operator\">-</span>7addd205bbeb   10Gi       RWO            Retain           Bound    manti<span class=\"token operator\">-</span>infra<span class=\"token operator\">/</span>zkdata<span class=\"token operator\">-</span>zk<span class=\"token operator\">-</span>1   kchadata                9m34s\npvc<span class=\"token operator\">-</span>b5acf208<span class=\"token operator\">-</span>86a1<span class=\"token operator\">-</span>4eb9<span class=\"token operator\">-</span>b5f2<span class=\"token operator\">-</span>5f99a9621ffa   10Gi       RWO            Retain           Bound    manti<span class=\"token operator\">-</span>infra<span class=\"token operator\">/</span>zkdata<span class=\"token operator\">-</span>zk<span class=\"token operator\">-</span>0   kchadata                9m34s</code></pre>\n\n<h3 id=\"创建POD\"><a href=\"#创建POD\" class=\"headerlink\" title=\"创建POD\"></a>创建 POD</h3><p>省略</p>\n<h3 id=\"问题解决\"><a href=\"#问题解决\" class=\"headerlink\" title=\"问题解决\"></a>问题解决</h3><h4 id=\"Failed-to-provision-volume\"><a href=\"#Failed-to-provision-volume\" class=\"headerlink\" title=\"Failed to provision volume\"></a>Failed to provision volume</h4><pre class=\"language-none\"><code class=\"language-none\">$ k describe pvc zkdata-zk-0\nFailed to provision volume with StorageClass \"kchadata\": failed to create rbd image: executable file not found in $PATH, command output:</code></pre>\n\n<p>需要安装 ceph-common 工具插件来操作 Ceph，上边报错应该就是找不到该插件导致的。</p>\n<p><strong>方案一</strong>：添加 ceph-common 到 hyperkube image 中，构建一个新的安装了 ceph-common 的同名镜像 hyperkube-amd64 替换官方镜像</p>\n<pre class=\"language-dockerfile\" data-language=\"dockerfile\"><code class=\"language-dockerfile\">$ vim Dockerfile\nFROM gcr.io/google_containers/hyperkube-amd64:v1.2.1\n \nRUN curl https://raw.githubusercontent.com/ceph/ceph/master/keys/release.asc | apt-key add - &amp;&amp; \\\n    echo deb http://download.ceph.com/debian-hammer/ jessie main | tee /etc/apt/sources.list.d/ceph.list &amp;&amp; \\\n    apt-get update &amp;&amp; \\\n    DEBIAN_FRONTEND=noninteractive apt-get install -q -y ceph-common &amp;&amp; \\\n    apt-get clean &amp;&amp; rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n \n$ docker build -t custom/hyperkube-amd64:v1.2.1 .    </code></pre>\n\n<p><strong>方案二：</strong>使用 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2t1YmVybmV0ZXMtaW5jdWJhdG9yL2V4dGVybmFsLXN0b3JhZ2U=\">扩展存储卷插件<i class=\"fa fa-external-link-alt\"></i></span> 来帮我们完成这一步。</p>\n<pre class=\"language-none\"><code class=\"language-none\">$ git clone https://github.com/kubernetes-incubator/external-storage.git\n$ tree external-storage/ceph/rbd/deploy/\n├── README.md\n├── non-rbac\n│   └── deployment.yaml\n└── rbac\n    ├── clusterrole.yaml\n    ├── clusterrolebinding.yaml\n    ├── deployment.yaml\n    └── serviceaccount.yaml</code></pre>\n\n<p>这里提供 rbac 和 no-rbac 两种方式，如果搭建 k8s 集群时开启了 rbac 认证的，需要采用 rbac 方式来创建该 deployment。</p>\n<pre class=\"language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">NAMESPACE=default <span class=\"token comment\"># change this if you want to deploy it in another namespace</span>\nsed <span class=\"token operator\">-</span>r <span class=\"token operator\">-</span>i <span class=\"token string\">\"s/namespace: [^ ]+/namespace: <span class=\"token variable\">$NAMESPACE</span>/g\"</span> <span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>rbac<span class=\"token operator\">/</span>clusterrolebinding<span class=\"token punctuation\">.</span>yaml <span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>rbac<span class=\"token operator\">/</span>rolebinding<span class=\"token punctuation\">.</span>yaml\nkubectl <span class=\"token operator\">-</span>n <span class=\"token variable\">$NAMESPACE</span> apply <span class=\"token operator\">-</span>f <span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>rbac</code></pre>\n\n<p>然后修改 <code>storage-class.yaml</code> 文件，将 <code>provisioner: kubernetes.io/rbd</code> 修改为 <code>provisioner: ceph.com/rbd</code>，意思就是不使用 k8s 内部提供的 rbd 存储类型，而是使用我们刚创建的扩展 rbd 存储。</p>\n<p>参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2t1YmVybmV0ZXMva3ViZXJuZXRlcy9pc3N1ZXMvMzg5MjM=\">https://github.com/kubernetes/kubernetes/issues/38923<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h4 id=\"master节点不能部署\"><a href=\"#master节点不能部署\" class=\"headerlink\" title=\"master节点不能部署\"></a>master 节点不能部署</h4><pre class=\"language-none\"><code class=\"language-none\">0/3 nodes are available: 1 node(s) had taint {node-role.kubernetes.io/master: }, that the pod didn't tolerate, 2 node(s) didn't match pod affinity/anti-affinity, 2 node(s) didn't satisfy existing pods anti-affinity rules.</code></pre>\n\n<p>解决：</p>\n<pre class=\"language-none\"><code class=\"language-none\">kubectl taint nodes --all node-role.kubernetes.io/master-</code></pre>\n\n<p>重新加入污点：</p>\n<pre class=\"language-none\"><code class=\"language-none\">kubectl taint nodes master-hostname node-role.kubernetes.io/master=true:NoSchedule</code></pre>\n\n","categories":["Ceph","Container","Kubernets"],"tags":["Ceph","k8s"]},{"title":"使用 Python 遍历备份 docker-compose 文件中的镜像","url":"/2020/09/2020-09-15-%E4%BD%BF%E7%94%A8Python%E9%81%8D%E5%8E%86%E5%A4%87%E4%BB%BDdocker-compose%E6%96%87%E4%BB%B6%E4%B8%AD%E7%9A%84%E9%95%9C%E5%83%8F/","content":"<p>Python 脚本如下：</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> os\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">get_images</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token builtin\">file</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"docker-compose.yml\"</span><span class=\"token punctuation\">)</span> \n    images <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span> line <span class=\"token keyword\">in</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>readlines<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  \n         line <span class=\"token operator\">=</span> line<span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>  \n         <span class=\"token keyword\">if</span> <span class=\"token string\">\"image\"</span> <span class=\"token keyword\">in</span> line<span class=\"token punctuation\">:</span>\n             image <span class=\"token operator\">=</span> line<span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span><span class=\"token string\">\"image:\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n             images<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> images\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">pull_images</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    images <span class=\"token operator\">=</span> get_images<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> image <span class=\"token keyword\">in</span> images<span class=\"token punctuation\">:</span>\n        pull_commond <span class=\"token operator\">=</span> <span class=\"token string\">\"docker pull \"</span> <span class=\"token operator\">+</span> image\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>pull_commond<span class=\"token punctuation\">)</span>\n        os<span class=\"token punctuation\">.</span>system<span class=\"token punctuation\">(</span>pull_commond<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">save_imaegs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    images <span class=\"token operator\">=</span> get_images<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> image <span class=\"token keyword\">in</span> images<span class=\"token punctuation\">:</span>\n        sub_name <span class=\"token operator\">=</span> image<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span><span class=\"token string\">\":\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"_\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\".tar\"</span>\n        <span class=\"token keyword\">if</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>exists<span class=\"token punctuation\">(</span>sub_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>sub_name<span class=\"token punctuation\">,</span><span class=\"token string\">'is exists!'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            save_commond <span class=\"token operator\">=</span> <span class=\"token string\">\"docker save \"</span> <span class=\"token operator\">+</span> image <span class=\"token operator\">+</span> <span class=\"token string\">\" -o \"</span> <span class=\"token operator\">+</span> sub_name\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>save_commond<span class=\"token punctuation\">)</span>\n            os<span class=\"token punctuation\">.</span>system<span class=\"token punctuation\">(</span>save_commond<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">load_images</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    files <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>listdir<span class=\"token punctuation\">(</span><span class=\"token string\">\".\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> <span class=\"token builtin\">file</span> <span class=\"token keyword\">in</span> files<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> <span class=\"token string\">\".tar\"</span> <span class=\"token keyword\">in</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">file</span><span class=\"token punctuation\">)</span>\n            load_commond <span class=\"token operator\">=</span> <span class=\"token string\">\"docker load -i \"</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">file</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>load_commond<span class=\"token punctuation\">)</span>\n            os<span class=\"token punctuation\">.</span>system<span class=\"token punctuation\">(</span>load_commond<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">start_deal</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> num <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n        pull_images<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">elif</span> num <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span>\n        save_imaegs<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">elif</span> num <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">:</span>\n        load_images<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> __name__<span class=\"token operator\">==</span><span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n    start_deal<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    </code></pre>\n\n","categories":["Python","Container","Docker"],"tags":["Python","Docker"]},{"title":"k8s 在 tomcat 多副本时的 session 会话保持","url":"/2020/09/2020-09-05-k8s%E5%9C%A8tomcat%E5%A4%9A%E5%89%AF%E6%9C%AC%E6%97%B6%E7%9A%84session%E4%BC%9A%E8%AF%9D%E4%BF%9D%E6%8C%81/","content":"<h3 id=\"出现问题\"><a href=\"#出现问题\" class=\"headerlink\" title=\"出现问题\"></a>出现问题</h3><p>通过 kubernetes 部署了 tomcat+mysql 服务，设置 tomcat 多副本时发现首页登陆无法跳转的情况，经排查是由于 session 问题引起的。</p>\n<p>kubernetes 上可以多实例（pod）高负载运行，但是如果应用如果没有做 session 同步的话，就会导致 session 不一致。<br>kubernetes 有 session 亲和性的功能（每个 client 每次访问，都会匹配到对应 session 的后端）。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><p>此时，在 service 的配置文件中加入 <code>sessionAffinity: ClientIP</code>，功能是选择与请求来源 ip 更接近的 pod，这样就会固定同一个 session。</p>\n<p>如下图所示：</p>\n<p><img src=\"/images/2020/09/1599216595277.png\" alt=\"1599216595277\" loading=\"lazy\"></p>\n<p>备注：这种方法目前只适用使用 nodeport 暴露服务的情况。</p>\n<p><code>spec.sessionAffinity</code> 字段用于定义要使用的粘性会话的类型，它仅支持使用 “None” 和 “ ClientIP” 两种属性值。</p>\n<p>也可以使用打补丁的方式进行修改 yaml 内的内容，如下：</p>\n<pre class=\"language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\"><span class=\"token comment\"># session保持，同一ip访问同一个pod</span>\nkubectl patch svc myapp <span class=\"token operator\">-</span>p <span class=\"token string\">'{\"spec\":{\"sessionAffinity\":\"ClusterIP\"}}'</span>  \n<span class=\"token comment\"># 取消session </span>\nkubectl patch svc myapp <span class=\"token operator\">-</span>p <span class=\"token string\">'{\"spec\":{\"sessionAffinity\":\"None\"}}'</span>    </code></pre>\n\n<h3 id=\"Session-超时时间\"><a href=\"#Session-超时时间\" class=\"headerlink\" title=\"Session 超时时间\"></a>Session 超时时间</h3><p>Service affinity 的效果仅仅在一段时间内生效，默认值为 10800 秒，超出时长，客户端再次访问会重新调度。</p>\n<p>该机制仅能基于客户端 IP 地址识别客户端身份，它会将经由同一个 NAT 服务器进行原地址转换的所有客户端识别为同一个客户端，由此可知，其调度的效果并不理想。</p>\n<p>Service 资源 通过 <code>.spec.sessionAffinity</code> 和 <code>.spec.sessionAffinityConfig</code> 两个字段配置粘性会话。</p>\n<p>如果您还想指定时间，则需要添加以下内容：</p>\n<pre class=\"language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">sessionAffinityConfig</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">clientIP</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">timeoutSeconds</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span></code></pre>\n\n<h3 id=\"Session-Affinity\"><a href=\"#Session-Affinity\" class=\"headerlink\" title=\"Session Affinity\"></a>Session Affinity</h3><p>会话保持 (Session Affinity), 有时又称粘滞会话 (Sticky Sessions), 是负载均衡领域设计需要着力解决的重要问题之一，也是一个相对比较复杂的问题。</p>\n<p>会话保持是指在负载均衡器上的一种机制，在完成负载均衡任务的同时，还负责一系列相关连的访问请求会分配到一台服务器上｡</p>\n<p>当用户向服务器发起请求，服务器创建一个 session，并把 session id 以 cookie 的形式写回给客户。</p>\n","categories":["Container","Kubernets"],"tags":["k8s"]},{"title":"Linux 进行磁盘自动挂载","url":"/2020/09/2020-09-16-Linux%E8%BF%9B%E8%A1%8C%E7%A3%81%E7%9B%98%E8%87%AA%E5%8A%A8%E6%8C%82%E8%BD%BD/","content":"<p>在给系统新增了磁盘以后，如果重启系统我们会发现找不到存储了；但是使用 fdisk -l 可以看到存储空间，说明存储还在。这是因为关机后，挂载已经自动卸载掉了。我们当然可以手动再次将其挂载，但如果每次重启都需要这样手动操作会很不方便；因此我们可以利用自动挂载，这样系统每次开机的时候就可以自动将磁盘挂载上去了。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"手动挂载磁盘\"><a href=\"#手动挂载磁盘\" class=\"headerlink\" title=\"手动挂载磁盘\"></a>手动挂载磁盘</h3><p>使用 <code>fdisk -l</code> 检查磁盘：</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># fdisk -l</span>\nDisk /dev/sdb: <span class=\"token number\">465.8</span> GiB, <span class=\"token number\">500107862016</span> bytes, <span class=\"token number\">976773168</span> sectors\nUnits: sectors of <span class=\"token number\">1</span> * <span class=\"token number\">512</span> <span class=\"token operator\">=</span> <span class=\"token number\">512</span> bytes\nSector size <span class=\"token punctuation\">(</span>logical/physical<span class=\"token punctuation\">)</span>: <span class=\"token number\">512</span> bytes / <span class=\"token number\">4096</span> bytes\nI/O size <span class=\"token punctuation\">(</span>minimum/optimal<span class=\"token punctuation\">)</span>: <span class=\"token number\">4096</span> bytes / <span class=\"token number\">4096</span> bytes\nDisklabel type: dos\nDisk identifier: 0x944e14cf\n\nDevice     Boot Start       End   Sectors   Size Id Type\n/dev/sdb1        <span class=\"token number\">2048</span> <span class=\"token number\">976773167</span> <span class=\"token number\">976771120</span> <span class=\"token number\">465</span>.8G <span class=\"token number\">83</span> Linux</code></pre>\n\n<p>使用 <code>mount</code> 进行磁盘挂载</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">mount</span> /dev/sdb1 /data1/</code></pre>\n\n<p>将 mount 命令添加进 <code>/etc/rc.d/rc.local</code> 文件是另一种实现开机自动挂载的方式</p>\n<h3 id=\"配置自动挂载\"><a href=\"#配置自动挂载\" class=\"headerlink\" title=\"配置自动挂载\"></a>配置自动挂载</h3><p>修改 /etc/fstab 文件</p>\n<p>用 vim 打开 fstab 文件，可以看到文件格式如下：</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># /etc/fstab: static file system information.</span>\n<span class=\"token comment\">#</span>\n<span class=\"token comment\"># &lt;file sys&gt;    &lt;mount point&gt;   &lt;type&gt;  &lt;options&gt;       &lt;dump&gt;  &lt;pass&gt;</span>\n\n<span class=\"token comment\"># device during installation: /dev/sda1</span>\n<span class=\"token assign-left variable\">UUID</span><span class=\"token operator\">=</span>9ca41ea4-2a2d-413a-8114-502b3dbc2d3e       /       ext4    rw,errors<span class=\"token operator\">=</span>remount-ro    <span class=\"token number\">0</span>       <span class=\"token number\">1</span>\n\n<span class=\"token comment\"># device during installation: /dev/sda8</span>\n<span class=\"token assign-left variable\">UUID</span><span class=\"token operator\">=</span>d9f40848-a9d0-4849-96a0-9d11231b0dec       /home   ext4    rw      <span class=\"token number\">0</span>       <span class=\"token number\">2</span>\n\n<span class=\"token comment\"># device during installation: /dev/sda7</span>\n<span class=\"token assign-left variable\">UUID</span><span class=\"token operator\">=</span>b953aa93-1b30-43d0-938b-0fd9fffc6034       /tmp    ext4    rw      <span class=\"token number\">0</span>       <span class=\"token number\">2</span>\n\n<span class=\"token comment\"># device during installation: /dev/sda5</span>\n<span class=\"token assign-left variable\">UUID</span><span class=\"token operator\">=</span>ad67642a-b2d7-48fb-927c-b83492533c48       /usr    ext4    rw      <span class=\"token number\">0</span>       <span class=\"token number\">2</span>\n\n<span class=\"token comment\"># device during installation: /dev/sda6</span>\n<span class=\"token assign-left variable\">UUID</span><span class=\"token operator\">=</span>e39dbbca-a3c4-4c3c-a51b-ca6c3520d07b       /var    ext4    rw      <span class=\"token number\">0</span>       <span class=\"token number\">2</span></code></pre>\n\n<p>可以很明显的看到文件有 6 列。</p>\n<ul>\n<li>第 1 列是设备名或者卷标</li>\n<li>第 2 列是挂载点（也就是挂载目录）</li>\n<li>第 3 列是所要挂载设备的文件系统或者文件系统类型</li>\n<li>第 4 列是挂载选项，通常使用 defaults 就可以</li>\n<li>第 5 列设置是否使用 dump 备份，置 0 为不备份，置 1，2 为备份，但 2 的备份重要性比 1 小</li>\n<li>第 6 列设置是否开机的时候使用 fsck 检验所挂载的磁盘，置 0 为不检验，置 1，2 为检验，但置 2 盘比置 1 的盘晚检验。</li>\n</ul>\n<p>加入磁盘配置</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">/dev/sdb1       /data1    ext4    rw      <span class=\"token number\">0</span>       <span class=\"token number\">0</span></code></pre>\n\n<p>将上面的命令添加进 fstab 后，为了避免可能的错误，我们可以使用 mount -a 命令来检验编辑的内容是否有错。执行 mount -a 命令后，用 df -h 查看会发现磁盘已经挂载成功，说明输入没有错误。下次重启的时候系统就可以自动进行挂载了。</p>\n<p><strong>注意</strong>：</p>\n<ol>\n<li>根目录必须优先于其他挂载点</li>\n<li>挂载点必须为已经存在的目录</li>\n<li>卸载时必须保证当前磁盘没有发生读写操作</li>\n</ol>\n<h5 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h5>","categories":["Linux"],"tags":["Linux"]},{"title":"修改 k8s 的 nodeport 类型端口范围","url":"/2020/09/2020-09-04-%E4%BF%AE%E6%94%B9k8s%E7%9A%84nodeport%E7%B1%BB%E5%9E%8B%E7%AB%AF%E5%8F%A3%E8%8C%83%E5%9B%B4/","content":"<h3 id=\"出现问题\"><a href=\"#出现问题\" class=\"headerlink\" title=\"出现问题\"></a>出现问题</h3><p>在 Kubernetes (k8s) 创建 service 使用 nodePort 暴露 外部端口 8192 时报错：</p>\n<blockquote>\n<p>The Service \"web-admin\" is invalid: spec.ports[0].nodePort: Invalid value: 8192: provided port is not in the valid range. The range of valid ports is 30000-32767</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><p>编辑 <code>kube-apiserver.yaml</code> 文件</p>\n<pre class=\"language-none\"><code class=\"language-none\">vim /etc/kubernetes/manifests/kube-apiserver.yaml</code></pre>\n\n<p>找到 <code>--service-cluster-ip-range</code> 这一行，在这一行的下一行增加 如下内容</p>\n<pre class=\"language-none\"><code class=\"language-none\">- --service-node-port-range=1-65535</code></pre>\n\n<p>最后修改效果如下：</p>\n<p><img src=\"/images/2020/09/1599200375796.png\" alt=\"1599200375796\" loading=\"lazy\"></p>\n<p>最后 重启 kubelet</p>\n<pre class=\"language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">systemctl daemon<span class=\"token operator\">-</span>reload\nsystemctl restart kubelet</code></pre>","categories":["Container","Kubernets"],"tags":["k8s"]},{"title":"FastDFS 容器化安装实践","url":"/2020/09/2020-09-24-FastDFS%E5%AE%B9%E5%99%A8%E5%8C%96%E5%AE%89%E8%A3%85%E5%AE%9E%E8%B7%B5/","content":"<h3 id=\"FastDFS-容器化安装\"><a href=\"#FastDFS-容器化安装\" class=\"headerlink\" title=\"FastDFS 容器化安装\"></a>FastDFS 容器化安装</h3><h4 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h4><p>新增 .env 文件如下：</p>\n<pre class=\"language-none\"><code class=\"language-none\">HOSTNAME_COMMAND=xxx.xxx.xxx.xxx</code></pre>\n\n<p>其中，<code>xxx.xxx.xxx.xxx </code>为 服务器 IP 地址。</p>\n<h4 id=\"nginx-conf-配置\"><a href=\"#nginx-conf-配置\" class=\"headerlink\" title=\"nginx.conf 配置\"></a>nginx.conf 配置</h4><p><code>nginx.conf</code> 文件增加配置如下：</p>\n<pre class=\"language-none\"><code class=\"language-none\">location /group1/M00 {\n\troot /fastdfs/storage/data;\n\tngx_fastdfs_module;\n}</code></pre>\n\n<h4 id=\"docker-compose\"><a href=\"#docker-compose\" class=\"headerlink\" title=\"docker-compose\"></a>docker-compose</h4><p><code>docker-compose.yml</code> 文件如下：</p>\n<pre class=\"language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'2'</span>\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">fastdfs-tracker</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">hostname</span><span class=\"token punctuation\">:</span> fastdfs<span class=\"token punctuation\">-</span>tracker\n        <span class=\"token key atrule\">container_name</span><span class=\"token punctuation\">:</span> fastdfs<span class=\"token punctuation\">-</span>tracker\n        <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> season/fastdfs<span class=\"token punctuation\">:</span><span class=\"token number\">1.2</span>\n        <span class=\"token key atrule\">network_mode</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"host\"</span>\n        <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span> tracker\n        <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n          <span class=\"token punctuation\">-</span> ./data/tracker_data<span class=\"token punctuation\">:</span>/fastdfs/tracker/data\n    <span class=\"token key atrule\">fastdfs-storage</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">hostname</span><span class=\"token punctuation\">:</span> fastdfs<span class=\"token punctuation\">-</span>storage\n        <span class=\"token key atrule\">container_name</span><span class=\"token punctuation\">:</span> fastdfs<span class=\"token punctuation\">-</span>storage\n        <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> season/fastdfs<span class=\"token punctuation\">:</span><span class=\"token number\">1.2</span>\n        <span class=\"token key atrule\">network_mode</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"host\"</span>\n        <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n          <span class=\"token punctuation\">-</span> ./data/storage_data<span class=\"token punctuation\">:</span>/fastdfs/storage/data\n          <span class=\"token punctuation\">-</span> ./data/store_path<span class=\"token punctuation\">:</span>/fastdfs/store_path\n        <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>\n          <span class=\"token punctuation\">-</span> TRACKER_SERVER=$<span class=\"token punctuation\">{</span>HOSTNAME_COMMAND<span class=\"token punctuation\">}</span><span class=\"token punctuation\">:</span><span class=\"token number\">22122</span>\n        <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span> storage\n        <span class=\"token key atrule\">depends_on</span><span class=\"token punctuation\">:</span>\n          <span class=\"token punctuation\">-</span> fastdfs<span class=\"token punctuation\">-</span>tracker\n    <span class=\"token key atrule\">fastdfs-nginx</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">hostname</span><span class=\"token punctuation\">:</span> fastdfs<span class=\"token punctuation\">-</span>nginx\n        <span class=\"token key atrule\">container_name</span><span class=\"token punctuation\">:</span> fastdfs<span class=\"token punctuation\">-</span>nginx\n        <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> season/fastdfs<span class=\"token punctuation\">:</span><span class=\"token number\">1.2</span>\n        <span class=\"token key atrule\">network_mode</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"host\"</span>\n        <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n          <span class=\"token punctuation\">-</span> ./nginx.conf<span class=\"token punctuation\">:</span>/etc/nginx/conf/nginx.conf\n          <span class=\"token punctuation\">-</span> ./data/store_path<span class=\"token punctuation\">:</span>/fastdfs/store_path\n        <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>\n          <span class=\"token punctuation\">-</span> TRACKER_SERVER=$<span class=\"token punctuation\">{</span>HOSTNAME_COMMAND<span class=\"token punctuation\">}</span><span class=\"token punctuation\">:</span><span class=\"token number\">22122</span>\n        <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span> nginx</code></pre>\n\n<p>需要注意：</p>\n<ul>\n<li>network_mode 必须是 host, 原因是当上传文件时，tracker 会把 storage 的 IP 和端口发给 client，如果是 bridge 模式，则发送的是内网 IP，client 无法访问到。</li>\n<li>image 采用 season/fastdfs:1.2 ，不要用 lastest, 因为 lastest 不包含 nginx 服务，其他 fasdfs 镜像均没有 season 的精简。</li>\n</ul>\n<h3 id=\"测试-FastDFS\"><a href=\"#测试-FastDFS\" class=\"headerlink\" title=\"测试 FastDFS\"></a>测试 FastDFS</h3><p>命令行测试上传</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ fdfs_upload_file /etc/fdfs/client.conf /home/ant/test \ngroup1/M00/00/00/CqD3YF3kwS-ACYbMAAAAHDDhFHI6820520</code></pre>\n\n<p>命令行测试下载：</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ fdfs_download_file /etc/fdfs/client.conf group1/M00/00/00/CqD3YF3kwS-ACYbMAAAAHDDhFHI6820520</code></pre>\n\n<p>http 测试下载：</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">wget</span> http://xxx.xxx.xxx.xxx/group1/M00/00/00/CmmIP19sbZ6ABzkBAAAXTnaiWqo2684096?filename<span class=\"token operator\">=</span>testfile</code></pre>\n\n<h3 id=\"访问-FastDFS\"><a href=\"#访问-FastDFS\" class=\"headerlink\" title=\"访问 FastDFS\"></a>访问 FastDFS</h3><p>其他容器如需按照域名访问 FastDFS，可增加配置：</p>\n<pre class=\"language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">web-admin</span><span class=\"token punctuation\">:</span>\n   <span class=\"token key atrule\">container_name</span><span class=\"token punctuation\">:</span> web<span class=\"token punctuation\">-</span>admin\n   <span class=\"token key atrule\">extra_hosts</span><span class=\"token punctuation\">:</span>\n       <span class=\"token punctuation\">-</span> <span class=\"token string\">\"fastdfs.manti-infra.svc:${HOSTNAME_COMMAND}\"</span></code></pre>\n\n<h3 id=\"问题处理\"><a href=\"#问题处理\" class=\"headerlink\" title=\"问题处理\"></a>问题处理</h3><h4 id=\"问题一\"><a href=\"#问题一\" class=\"headerlink\" title=\"问题一\"></a>问题一</h4><p>报错问题：</p>\n<pre class=\"language-none\"><code class=\"language-none\">[error] 13#0: *1 open() \"/etc/nginx/html/group1/M00/00/00/CmmIP19sbZ6ABzkBAAAXTnaiWqo2684096\" failed (2: No such file or directory)</code></pre>\n\n<p>修复：修改 nginx.conf 中的 location 配置为：</p>\n<pre class=\"language-none\"><code class=\"language-none\">location/group1/M00/ {\n\talias /fastdfs/store_path/data;\n\tngx_fastdfs_module;\n}</code></pre>\n\n<h4 id=\"问题二\"><a href=\"#问题二\" class=\"headerlink\" title=\"问题二\"></a>问题二</h4><p>报错问题：</p>\n<pre class=\"language-none\"><code class=\"language-none\">ERROR - file: ../common/fdfs_global.c, line:52, the format of filename\n\"group1/M00/00/00/wKgAA1cLh12AI0kfAAAADzbdjmQ50_big.html\"is invalid</code></pre>\n\n\n<p>原因：nginx 的 fdfs 的 MOD 里面默认没有开启 url_have_group_name</p>\n<p>修复：开启 mod_fastdfs.conf 文件中的 url_have_group_name 选项，后重启 nginx</p>\n<h4 id=\"问题三\"><a href=\"#问题三\" class=\"headerlink\" title=\"问题三\"></a>问题三</h4><pre class=\"language-none\"><code class=\"language-none\">/usr/src/fastdfs-nginx-module/src/common.c:21:25:致命错误：fdfs_define.h：没有那个文件或目录\n#include \"fdfs_define.h\" \n编译中断。</code></pre>\n\n\n<p>原因：编译安装 nginx 的 fastdfs 插件的头文件没有找到，由于编译 nginx 时候系统会到／usr/local/include，而编译安装 fastdfs-nginx-module 时则默认保存在了 /usr/include 目录。</p>\n<p>修复：ln -s /usr/include/fast* /usr/local/include/</p>\n<h4 id=\"问题四\"><a href=\"#问题四\" class=\"headerlink\" title=\"问题四\"></a>问题四</h4><p>Nginx 启动后 error.log 日志报错</p>\n<pre class=\"language-none\"><code class=\"language-none\">ERROR - file:../storage/trunk_mgr/trunk_shared.c, line: 177, \"No such file ordirectory\" can't be accessed, error info: /data/fastdfs</code></pre>\n\n<p>原因：nginx 的 fdfs 插件没有在 /etc/fdfs 目录中找到 http.conf 和 mime.types。</p>\n<p>修复：复制或者创建对应文件的软连接<br>cp/usr/local/FastDFS/conf/http.conf /etc/fdfs/<br>cp/usr/local/FastDFS/conf/mime.types /etc/fdfs/</p>\n<h4 id=\"问题五\"><a href=\"#问题五\" class=\"headerlink\" title=\"问题五\"></a>问题五</h4><p>页面访问动态缩略图返回 415</p>\n<p>原因：</p>\n<ul>\n<li>首先需要排除文件类型的问题，image_filter 只支持 jpg、git 和 png 三种格式的图片文件，调用其他格式的 图片文件 会返回 415。</li>\n<li>其次要确认设置的 image_filter 缓存是否小于上传的图片大小，如果小于同样会报 415 错误。</li>\n</ul>\n<p>如果排除以上两种可能性，那么出现的问题应该是没有在 Nginx 页面的 DocumentRoot 目录创建 FastDFS 数据存储的软连接。</p>\n<p>修复：执行下列命令创建软连接：</p>\n<pre class=\"language-none\"><code class=\"language-none\"># mkdir -pv/usr/local/nginx/html/group1\n# ln -s /data/fastdfs_store/data/usr/local/nginx/html/group1/M00</code></pre>\n\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20veWxvdmVkL3AvMTI2NDk1NjkuaHRtbA==\">https://www.cnblogs.com/yloved/p/12649569.html<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIuYWxpeXVuLmNvbS9hcnRpY2xlLzU0NTAxNg==\">https://developer.aliyun.com/article/545016<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n","categories":["Linux","软件","Container","Docker"],"tags":["Docker","FastDFS"]},{"title":"在 eclipse 中安装 lombok.jar","url":"/2020/09/2020-09-21-%E5%9C%A8eclipse%E4%B8%AD%E5%AE%89%E8%A3%85lombok.jar/","content":"<h3 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h3><p><strong>下载 lombok.jar（一定要最新版）</strong></p>\n<p>下载地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wcm9qZWN0bG9tYm9rLm9yZy9kb3dubG9hZA==\">https://projectlombok.org/download<i class=\"fa fa-external-link-alt\"></i></span></p>\n<a id=\"more\"></a>\n\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><ol>\n<li><p><strong>复制 lombok.jar 到 eclipse.ini 所在目录</strong></p>\n</li>\n<li><p><strong>安装 lombok.jar</strong>：shift + 右键唤出命令窗口，运行 <strong>java -jar lombok.jar</strong>  或者 直接双击 lombok.jar（后者操作更简单）</p>\n<p><img src=\"/images/2020/09/image-20200921103421844.png\" alt=\"image-20200921103421844\" loading=\"lazy\"></p>\n</li>\n<li><p>选择 eclipse.exe：<br><img src=\"/images/2020/09/image-20200921103504337.png\" alt=\"image-20200921103504337\" loading=\"lazy\"></p>\n</li>\n<li><p>确认 eclipse.exe：<img src=\"/images/2020/09/image-20200921103526313.png\" alt=\"image-20200921103526313\" loading=\"lazy\"></p>\n</li>\n<li><p>快速安装：<br><img src=\"/images/2020/09/image-20200921103543338.png\" alt=\"image-20200921103543338\" loading=\"lazy\"></p>\n</li>\n<li><p>操作完成后发现 eclipse.ini 多了一行配置：<br><img src=\"/images/2020/09/image-20200921103619161.png\" alt=\"image-20200921103619161\" loading=\"lazy\"></p>\n</li>\n</ol>\n<h3 id=\"安装成功后操作\"><a href=\"#安装成功后操作\" class=\"headerlink\" title=\"安装成功后操作\"></a><strong>安装成功后操作</strong></h3><p>重启 eclipse 并刷新项目，之前报错的 set () get () 等方法不再报错。</p>\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a><strong>注意事项</strong></h3><p>lombok.jar 一定要从官网下载最新，否则安装后 get () set () 等方法仍会报错。</p>\n","categories":["软件","IDE"],"tags":["软件","IDE","eclipse"]},{"title":"Neo4j 的安装和基本使用","url":"/2020/10/2020-10-08-Neo4j%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/","content":"<h3 id=\"Neo4j-介绍\"><a href=\"#Neo4j-介绍\" class=\"headerlink\" title=\"Neo4j 介绍\"></a>Neo4j 介绍</h3><p>Neo4j 是一个世界领先的开源图形数据库。 </p>\n<p>图形数据库是以图形结构的形式存储数据的数据库。 它以节点，关系和属性的形式存储应用程序的数据。 正如 RDBMS 以表的 “行，列” 的形式存储数据，GDBMS 以 “图形” 的形式存储数据。</p>\n<p>官网：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9uZW80ai5jb20v\">https://neo4j.com/<i class=\"fa fa-external-link-alt\"></i></span></p>\n<a id=\"more\"></a>\n\n<h3 id=\"Neo4j-安装\"><a href=\"#Neo4j-安装\" class=\"headerlink\" title=\"Neo4j 安装\"></a>Neo4j 安装</h3><p>下载地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9uZW80ai5jb20vZG93bmxvYWQtY2VudGVyLyNyZWxlYXNlcw==\">https://neo4j.com/download-center/#releases<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>安装：</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">wget</span> http://dist.neo4j.org/neo4j-community-3.5.13-unix.tar.gz\n$ <span class=\"token function\">tar</span> -xvf neo4j-community-3.5.13-unix.tar.gz\n$ <span class=\"token function\">mv</span> neo4j-community-3.5.13/ neo4j-3.5.13</code></pre>\n\n<p>启动：</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">~/neo4j-3.5.13/bin$ ./neo4j start</code></pre>\n\n<p>neo4j 支持的参数如下：</p>\n<pre class=\"language-none\"><code class=\"language-none\">$ ./neo4j\nUsage: neo4j { console | start | stop | restart | status | version }</code></pre>\n\n<h3 id=\"Neo4j-配置\"><a href=\"#Neo4j-配置\" class=\"headerlink\" title=\"Neo4j 配置\"></a>Neo4j 配置</h3><p>配置文件位于：<code>neo4j-3.5.13/conf/neo4j.conf</code></p>\n<h4 id=\"远程访问\"><a href=\"#远程访问\" class=\"headerlink\" title=\"远程访问\"></a>远程访问</h4><p>修改 54 行，去掉改行的 #，可以远程通过 ip 访问 neo4j 数据库</p>\n<pre class=\"language-none\"><code class=\"language-none\">dbms.connectors.default_listen_address=0.0.0.0</code></pre>\n\n<h3 id=\"初始化密码\"><a href=\"#初始化密码\" class=\"headerlink\" title=\"初始化密码\"></a>初始化密码</h3><h4 id=\"Web-浏览器修改密码\"><a href=\"#Web-浏览器修改密码\" class=\"headerlink\" title=\"Web 浏览器修改密码\"></a>Web 浏览器修改密码</h4><p>Web 浏览器访问：<span class=\"exturl\" data-url=\"aHR0cDovL2lwOjc0NzQv\">http://IP:7474/<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>连接 URL 为 ：bolt://IP:7687，初始用户名、密码为 neo4j，如下图所示：</p>\n<p><img src=\"/images/2020/10/1595919253202.png\" alt=\"1595919253202\" loading=\"lazy\"></p>\n<p>初始化登录成功后，会要求重置 neo4j 密码，修改并确认新密码。</p>\n<p><img src=\"/images/2020/10/1595919258228.png\" alt=\"1595919258228\" loading=\"lazy\"></p>\n<h4 id=\"命令行更改密码\"><a href=\"#命令行更改密码\" class=\"headerlink\" title=\"命令行更改密码\"></a>命令行更改密码</h4><ol>\n<li>进入 neo4j 安装目录， 并进入 bin 目录；</li>\n<li>运行 <code>./cypher-shell</code> 命令， 输入用户名，密码（初始默认用户名和密码为 neo4j）</li>\n<li>输入命令: <code>CALL dbms.security.changePassword('123456');</code> 输入命令  <code>:exit;</code> 退出</li>\n</ol>\n<p>此时，neo4j 即可连接成功。</p>\n<h3 id=\"命令行\"><a href=\"#命令行\" class=\"headerlink\" title=\"命令行\"></a>命令行</h3><p>节点总数：</p>\n<pre class=\"language-cypher\" data-language=\"cypher\"><code class=\"language-cypher\">neo4j<span class=\"token operator\">&gt;</span> <span class=\"token keyword\">match</span> <span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n<p>关系总数：</p>\n<pre class=\"language-cypher\" data-language=\"cypher\"><code class=\"language-cypher\">neo4j<span class=\"token operator\">&gt;</span> <span class=\"token keyword\">match</span> p<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span><span class=\"token operator\">-&gt;</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n","categories":["Linux","Database","软件","Neo4j"],"tags":["Neo4j"]},{"title":"自动删除 ElasticSearch 索引","url":"/2020/09/2020-09-07-%E8%87%AA%E5%8A%A8%E5%88%A0%E9%99%A4%20ElasticSearch%20%E7%B4%A2%E5%BC%95/","content":"<p>索引文件保留在服务器中，大大减小服务器的性能，占用硬盘空间，<br>因此使用脚本自动删除 elk 中的历史索引以释放空间。</p>\n<h3 id=\"清理索引命令行\"><a href=\"#清理索引命令行\" class=\"headerlink\" title=\"清理索引命令行\"></a>清理索引命令行</h3><p>查看所有的索引文件：</p>\n<blockquote>\n<p>curl -XGET <span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo5MjAwL19jYXQvaW5kaWNlcz92\">http://localhost:9200/_cat/indices?v<i class=\"fa fa-external-link-alt\"></i></span></p>\n</blockquote>\n<p>删除索引文件以释放空间：</p>\n<blockquote>\n<p>curl -XDELETE <span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo5MjAwL2ZpbGViZWF0LTIwMTYuMTIuMjg=\">http://localhost:9200/filebeat-2016.12.28<i class=\"fa fa-external-link-alt\"></i></span></p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h3 id=\"清理索引脚本\"><a href=\"#清理索引脚本\" class=\"headerlink\" title=\"清理索引脚本\"></a>清理索引脚本</h3><p>新增 Shell 脚本：</p>\n<pre class=\"language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\"><span class=\"token comment\">#!/bin/bash</span>\n<span class=\"token comment\"># auto delete 7 day ago elasticsearch index</span>\n\neshost=<span class=\"token string\">'127.0.0.1:9200'</span>\n\ndtime=`date <span class=\"token operator\">-</span>d <span class=\"token string\">\"7 day ago\"</span> <span class=\"token operator\">+</span><span class=\"token operator\">%</span>Y-<span class=\"token operator\">%</span>m-<span class=\"token operator\">%</span>d`\ndtime_stamp=`date <span class=\"token operator\">-</span>d <span class=\"token string\">\"<span class=\"token variable\">$dtime</span>\"</span> <span class=\"token operator\">+</span><span class=\"token operator\">%</span>s`\n\n<span class=\"token function\">echo</span> `date` <span class=\"token string\">'start clean '</span> <span class=\"token variable\">$dtime</span> &gt;&gt; clean<span class=\"token operator\">-</span>log<span class=\"token punctuation\">.</span>log\n\nindexs=`curl <span class=\"token operator\">-</span>s <span class=\"token string\">'http://'</span><span class=\"token variable\">$eshost</span><span class=\"token string\">'/_cat/indices'</span> <span class=\"token punctuation\">|</span> awk <span class=\"token string\">'$3~/^logstash/{print $3}'</span>`\n\n<span class=\"token keyword\">for</span> line in <span class=\"token variable\">$indexs</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">do</span>\n  index=<span class=\"token variable\">$line</span>\n  itime=`<span class=\"token function\">echo</span> <span class=\"token variable\">$line</span> <span class=\"token punctuation\">|</span> awk <span class=\"token operator\">-</span>F <span class=\"token operator\">-</span> <span class=\"token string\">'{print $3}'</span> <span class=\"token punctuation\">|</span> tr <span class=\"token string\">'.'</span> <span class=\"token string\">'-'</span>`\n  itime_stamp=`date <span class=\"token operator\">-</span>d <span class=\"token string\">\"<span class=\"token variable\">$itime</span>\"</span> <span class=\"token operator\">+</span><span class=\"token operator\">%</span>s`\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\">$itime_stamp</span> <span class=\"token operator\">-lt</span> <span class=\"token variable\">$dtime_stamp</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>then\n    <span class=\"token function\">echo</span> <span class=\"token variable\">$index</span> &gt;&gt; clean<span class=\"token operator\">-</span>log<span class=\"token punctuation\">.</span>log\n    curl <span class=\"token operator\">-</span>X DELETE <span class=\"token string\">\"http://<span class=\"token variable\">$eshost</span>/<span class=\"token variable\">$index</span>\"</span> &gt; <span class=\"token operator\">/</span>dev<span class=\"token operator\">/</span>null 2&gt;&amp;1\n  fi\ndone</code></pre>\n\n<p>每天 2 点定时删除 es 中指定日期的数据，配置 crontab：</p>\n<pre class=\"language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">0 2 <span class=\"token operator\">*</span> <span class=\"token operator\">*</span> <span class=\"token operator\">*</span> sh <span class=\"token operator\">/</span>home<span class=\"token operator\">/</span><span class=\"token function\">dir</span><span class=\"token operator\">/</span>auto<span class=\"token operator\">-</span>clean<span class=\"token operator\">-</span>log<span class=\"token punctuation\">.</span>sh &gt;&gt; <span class=\"token operator\">/</span>home<span class=\"token operator\">/</span><span class=\"token function\">dir</span><span class=\"token operator\">/</span>clean<span class=\"token operator\">-</span>log<span class=\"token punctuation\">.</span>log 2&gt;&amp;1</code></pre>\n\n<h3 id=\"容器中获取-es-地址\"><a href=\"#容器中获取-es-地址\" class=\"headerlink\" title=\"容器中获取 es 地址\"></a>容器中获取 es 地址</h3><p>对于 docker 搭建的 es 环境，可以通过如下参数获取 es 的 IP：</p>\n<pre class=\"language-none\"><code class=\"language-none\">esip=`docker inspect -f \"{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}\" elasticsearch.manti-infra.svc`\neshost=\"$esip:9200\"</code></pre>\n\n<p>对于 k8s 搭建的 es 环境，可以通过如下参数获取 es 的 IP：</p>\n<pre class=\"language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">esip=`kubectl describe svc elasticsearch  <span class=\"token operator\">-</span>n manti<span class=\"token operator\">-</span>infra <span class=\"token punctuation\">|</span> grep IP <span class=\"token punctuation\">|</span> awk <span class=\"token string\">'{print $2}'</span>`\neshost=<span class=\"token string\">\"<span class=\"token variable\">$esip</span>:9200\"</span></code></pre>\n\n","categories":["Linux","Shell","Database","ElasticSearch"],"tags":["ElasticSearch","Shell"]},{"title":"Apache 集合工具 commons-collections4 的使用","url":"/2020/10/2020-10-11-Apache%E9%9B%86%E5%90%88%E5%B7%A5%E5%85%B7commons-collections4%E7%9A%84%E4%BD%BF%E7%94%A8/","content":"<h3 id=\"Jar引入\"><a href=\"#Jar引入\" class=\"headerlink\" title=\"Jar引入\"></a>Jar 引入</h3><p>官网：<span class=\"exturl\" data-url=\"aHR0cDovL2NvbW1vbnMuYXBhY2hlLm9yZy9wcm9wZXIvY29tbW9ucy1jb2xsZWN0aW9ucy8=\">http://commons.apache.org/proper/commons-collections/<i class=\"fa fa-external-link-alt\"></i></span></p>\n<pre class=\"language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.apache.commons<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>commons-collections4<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>4.4<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n\n<h3 id=\"Jar介绍\"><a href=\"#Jar介绍\" class=\"headerlink\" title=\"Jar介绍\"></a>Jar 介绍</h3><p>Commons Collections 增强了 Java 集合框架。 它提供了几个功能来简化收集处理。 它提供了许多新的接口，实现和实用程序。 </p>\n<a id=\"more\"></a>\n\n<p>Commons Collections 的主要特点如下 -</p>\n<ul>\n<li><strong>Bag</strong> - <code>Bag</code> 接口简化了每个对象具有多个副本的集合。</li>\n<li><strong>BidiMap</strong>- <code>BidiMap</code> 接口提供双向映射，可用于使用键或键使用的值来查找值。</li>\n<li><strong>MapIterator</strong> - <code>MapIterator</code> 接口为映射提供了简单和易于迭代方法。</li>\n<li><strong>转换装饰器</strong> - 转换装饰器 (<code>Transforming Decorators</code>) 可以在集合添加到集合时改变集合的每个对象。</li>\n<li><strong>复合集合</strong> - 复合集合用于要求统一处理多个集合的情况。</li>\n<li><strong>有序映射</strong> - 有序映射保留元素添加的顺序。</li>\n<li><strong>有序集</strong> - 有序集保留元素添加的顺序。</li>\n<li><strong>参考映射</strong> - 参考映射允许在密切控制下对键 / 值进行垃圾收集。</li>\n<li><strong>比较器实现</strong> - 许多比较器实现都可用。</li>\n<li><strong>迭代器实现</strong> - 许多迭代器实现都可用。</li>\n<li><strong>适配器类</strong> - 适配器类可用于将数组和枚举转换为集合。</li>\n<li><strong>实用程序</strong> - 实用程序可用于测试测试或创建集合的典型集合理论属性，如联合，交集。 支持关闭。</li>\n</ul>\n<h3 id=\"通用集合Bag\"><a href=\"#通用集合Bag\" class=\"headerlink\" title=\"通用集合Bag\"></a>通用集合 Bag</h3><p><code>Bag</code> 接口定义了一个集合，它可以计算一个对象出现在集合中的次数。</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>commons<span class=\"token punctuation\">.</span>collections4<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Bag</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>commons<span class=\"token punctuation\">.</span>collections4<span class=\"token punctuation\">.</span>bag<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HashBag</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BagTester</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token class-name\">Bag</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> bag <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashBag</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      bag<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      bag<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      bag<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"c\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      bag<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"c\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      bag<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"d\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>bag<span class=\"token punctuation\">.</span><span class=\"token function\">getCount</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"d\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 3</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>bag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// [2:a,1:b,2:c,3:d]</span>\n\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>bag<span class=\"token punctuation\">.</span><span class=\"token function\">uniqueSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// [a, b, c, d]</span>\n\n      bag<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"d\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>bag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// [2:a,1:b,2:c,1:d]</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>bag<span class=\"token punctuation\">.</span><span class=\"token function\">getCount</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"d\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 1</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>bag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// [2:a,1:b,2:c,1:d]</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>bag<span class=\"token punctuation\">.</span><span class=\"token function\">uniqueSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// [a, b, c, d]</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<h3 id=\"通用集合BidiMap\"><a href=\"#通用集合BidiMap\" class=\"headerlink\" title=\"通用集合BidiMap\"></a>通用集合 BidiMap</h3><p>BidiMap 接口被添加到支持双向映射。 使用双向映射，可以使用值查找键，并且可以使用键轻松查找值。</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>commons<span class=\"token punctuation\">.</span>collections4<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">BidiMap</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>commons<span class=\"token punctuation\">.</span>collections4<span class=\"token punctuation\">.</span>bidimap<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">TreeBidiMap</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BidiMapTester</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token class-name\">BidiMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> bidi <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeBidiMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      bidi<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"One\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      bidi<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Two\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      bidi<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Three\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>bidi<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"One\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>bidi<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// One</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>bidi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {One=1, Three=3, Two=2}</span>\n\n      bidi<span class=\"token punctuation\">.</span><span class=\"token function\">removeValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>bidi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {Three=3, Two=2}</span>\n      <span class=\"token class-name\">BidiMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> inversedMap <span class=\"token operator\">=</span> bidi<span class=\"token punctuation\">.</span><span class=\"token function\">inverseBidiMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>inversedMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {2=Two, 3=Three}</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<h3 id=\"通用集合MapIterator\"><a href=\"#通用集合MapIterator\" class=\"headerlink\" title=\"通用集合MapIterator\"></a>通用集合 MapIterator</h3><p>JDK Map 接口很难作为迭代在 <code>EntrySet</code> 或 <code>KeySet</code> 对象上迭代。 <code>MapIterator</code> 提供了对 <code>Map</code> 的简单迭代。</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>commons<span class=\"token punctuation\">.</span>collections4<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IterableMap</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>commons<span class=\"token punctuation\">.</span>collections4<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MapIterator</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>commons<span class=\"token punctuation\">.</span>collections4<span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HashedMap</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MapIteratorTester</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token class-name\">IterableMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashedMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"One\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Two\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"3\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Three\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"4\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Four\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"5\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Five\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token class-name\">MapIterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> iterator <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">mapIterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n         <span class=\"token class-name\">Object</span> key <span class=\"token operator\">=</span> iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token class-name\">Object</span> value <span class=\"token operator\">=</span> iterator<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n         <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key: \"</span> <span class=\"token operator\">+</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Value: \"</span> <span class=\"token operator\">+</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n         iterator<span class=\"token punctuation\">.</span><span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">+</span> <span class=\"token string\">\"_\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// {3=Three_, 5=Five_, 2=Two_, 4=Four_, 1=One_}</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<h3 id=\"通用集合OrderedMap\"><a href=\"#通用集合OrderedMap\" class=\"headerlink\" title=\"通用集合OrderedMap\"></a>通用集合 OrderedMap</h3><p><code>OrderedMap</code> 是映射的新接口，用于保留添加元素的顺序。 <code>LinkedMap</code> 和 <code>ListOrderedMap</code> 是两种可用的实现。 此接口支持 <code>Map</code> 的迭代器，并允许在 Map 中向前或向后两个方向进行迭代。</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>commons<span class=\"token punctuation\">.</span>collections4<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">OrderedMap</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>commons<span class=\"token punctuation\">.</span>collections4<span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">LinkedMap</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OrderedMapTester</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">OrderedMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tmap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"One\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tmap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Two\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tmap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Three\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">firstKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// One</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">lastKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Three</span>\n\t\t\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">nextKey</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"One\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Two</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">nextKey</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Two\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Three</span>\n\t\t\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">previousKey</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"One\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// null</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">previousKey</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Two\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// One</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<h3 id=\"集合工具类CollectionUtils\"><a href=\"#集合工具类CollectionUtils\" class=\"headerlink\" title=\"集合工具类CollectionUtils\"></a>集合工具类 CollectionUtils</h3><p>Apache Commons Collections 库的 <code>CollectionUtils</code> 类提供各种实用方法，用于覆盖广泛用例的常见操作。 它有助于避免编写样板代码。 这个库在 jdk 8 之前是非常有用的，但现在 Java 8 的 Stream API 提供了类似的功能。</p>\n<h4 id=\"检查是否为空元素\"><a href=\"#检查是否为空元素\" class=\"headerlink\" title=\"检查是否为空元素\"></a>检查是否为空元素</h4><p>CollectionUtils 的 <code>addIgnoreNull()</code> 方法可用于确保只有非空 (<code>null</code>) 值被添加到集合中。</p>\n<p><strong>返回值</strong>：如果集合已更改，则返回为 <code>True</code>。</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">boolean</span> result1 <span class=\"token operator\">=</span> <span class=\"token class-name\">CollectionUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">addIgnoreNull</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n<span class=\"token keyword\">boolean</span> result2 <span class=\"token operator\">=</span> <span class=\"token class-name\">CollectionUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">addIgnoreNull</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [a]</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n\nlist<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [a, null]</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code></pre>\n\n<h4 id=\"合并两个排序列表\"><a href=\"#合并两个排序列表\" class=\"headerlink\" title=\"合并两个排序列表\"></a>合并两个排序列表</h4><p>CollectionUtils 的 <code>collate()</code> 方法可用于合并两个已排序的列表。</p>\n<p><strong>返回值</strong>：一个新的排序列表，其中包含集合 <code>a</code> 和 <code>b</code> 的元素。</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> sortedList1 <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"C\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"E\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> sortedList2 <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"B\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"D\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"F\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> mergedList <span class=\"token operator\">=</span> <span class=\"token class-name\">CollectionUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">collate</span><span class=\"token punctuation\">(</span>sortedList1<span class=\"token punctuation\">,</span> sortedList2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>mergedList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [A, B, C, D, E, F]</span></code></pre>\n\n<h4 id=\"转换列表\"><a href=\"#转换列表\" class=\"headerlink\" title=\"转换列表\"></a>转换列表</h4><p><code>CollectionUtils</code> 的 <code>collect()</code> 方法可用于将一种类型的对象列表转换为不同类型的对象列表。</p>\n<p><strong>返回值</strong>：转换结果 (新列表)。</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> stringList <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> integerList <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">CollectionUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span>stringList<span class=\"token punctuation\">,</span>\n\t\t<span class=\"token keyword\">new</span> <span class=\"token class-name\">Transformer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token annotation punctuation\">@Override</span>\n\t\t\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Integer</span> <span class=\"token function\">transform</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> input<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>integerList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [1, 2, 3]</span></code></pre>\n\n<h4 id=\"过滤列表\"><a href=\"#过滤列表\" class=\"headerlink\" title=\"过滤列表\"></a>过滤列表</h4><p>CollectionUtils 的 <code>filter()</code> 方法可用于过滤列表以移除不满足由谓词传递提供的条件的对象。</p>\n<p><strong>返回值</strong>：如果通过此调用修改了集合，则返回 <code>true</code>，否则返回 <code>false</code>。</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> integerList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nintegerList<span class=\"token punctuation\">.</span><span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>integerList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [1, 2, 3, 4, 5, 6, 7, 8]</span>\n\n<span class=\"token class-name\">CollectionUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>integerList<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Predicate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">evaluate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> input<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">.</span><span class=\"token function\">intValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>integerList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [2, 4, 6, 8]</span></code></pre>\n\n<h4 id=\"检查非空列表\"><a href=\"#检查非空列表\" class=\"headerlink\" title=\"检查非空列表\"></a>检查非空列表</h4><p>CollectionUtils 的 <code>isNotEmpty()</code> 方法可用于检查列表是否为 null 而不用担心 null 列表。 因此，在检查列表大小之前，不需要将无效检查放在任何地方。</p>\n<p><strong>返回值</strong>：如果非空且非 null，则返回为:true。</p>\n<h4 id=\"检查空的列表\"><a href=\"#检查空的列表\" class=\"headerlink\" title=\"检查空的列表\"></a>检查空的列表</h4><p>CollectionUtils 的 <code>isEmpty()</code> 方法可用于检查列表是否为空。</p>\n<p><strong>返回值</strong>：如果为空或为 <code>null</code>，则返回为 <code>true</code>。</p>\n<h4 id=\"检查子列表\"><a href=\"#检查子列表\" class=\"headerlink\" title=\"检查子列表\"></a>检查子列表</h4><p>CollectionUtils 的 isSubCollection () 方法可用于检查集合是否包含给定集合。</p>\n<p><strong>参数</strong></p>\n<ul>\n<li><code>a</code> - 第一个 (子) 集合不能为空。</li>\n<li><code>b</code> - 第二个 (超集) 集合不能为空。</li>\n</ul>\n<p>当且仅当 <code>a</code> 是 <code>b</code> 的子集合时才为 <code>true</code>。</p>\n<h4 id=\"检查相交\"><a href=\"#检查相交\" class=\"headerlink\" title=\"检查相交\"></a>检查相交</h4><p>CollectionUtils 的 <code>intersection()</code> 方法可用于获取两个集合 (交集) 之间的公共对象部分。</p>\n<p><strong>参数</strong></p>\n<ul>\n<li><code>a</code> - 第一个 (子) 集合不能为 <code>null</code>。</li>\n<li><code>b</code> - 第二个 (超集) 集合不能为 <code>null</code>。</li>\n</ul>\n<p><strong>返回值</strong>：两个集合的交集。</p>\n<h4 id=\"求差集\"><a href=\"#求差集\" class=\"headerlink\" title=\"求差集\"></a>求差集</h4><p>CollectionUtils 的 <code>subtract()</code> 方法可用于通过从其他集合中减去一个集合的对象来获取新集合。</p>\n<p><strong>参数</strong></p>\n<ul>\n<li><code>a</code> - 要从中减去的集合，不能为 <code>null</code>。</li>\n<li><code>b</code> - 要减去的集合，不能为 <code>null</code>。</li>\n</ul>\n<p><strong>返回值</strong>：两个集合的差集 (新集合)。</p>\n<h4 id=\"求联合集\"><a href=\"#求联合集\" class=\"headerlink\" title=\"求联合集\"></a>求联合集</h4><p>CollectionUtils 的 <code>union()</code> 方法可用于获取两个集合的联合。</p>\n<p><strong>参数</strong></p>\n<ul>\n<li><code>a</code> - 第一个集合，不能为 <code>null</code>。</li>\n<li><code>b</code> - 第二个集合，不能为 <code>null</code>。</li>\n</ul>\n<p><strong>返回值</strong>：两个集合的联合。</p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cueWlpYmFpLmNvbS9jb21tb25zX2NvbGxlY3Rpb25z\">https://www.yiibai.com/commons_collections<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n","categories":["Java","Apache","Commons","JavaJar"],"tags":["Apache","Java","JavaJar"]},{"title":"Apache 数据库工具 commons-dbutils 的使用","url":"/2020/10/2020-10-12-Apache%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B7%A5%E5%85%B7commons-dbutils%E7%9A%84%E4%BD%BF%E7%94%A8/","content":"<h3 id=\"Jar引入\"><a href=\"#Jar引入\" class=\"headerlink\" title=\"Jar引入\"></a>Jar 引入</h3><p>官网：<span class=\"exturl\" data-url=\"aHR0cDovL2NvbW1vbnMuYXBhY2hlLm9yZy9wcm9wZXIvY29tbW9ucy1kYnV0aWxzLw==\">http://commons.apache.org/proper/commons-dbutils/<i class=\"fa fa-external-link-alt\"></i></span></p>\n<pre class=\"language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>commons-dbutils<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>commons-dbutils<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>1.7<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>mysql<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>mysql-connector-java<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>8.0.22<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n\n<h3 id=\"Jar介绍\"><a href=\"#Jar介绍\" class=\"headerlink\" title=\"Jar介绍\"></a>Jar 介绍</h3><p>Apache Commons DbUtils 库是一个相当小的一组类，它们被设计用来在没有资源泄漏的情况下简化 JDBC 调用处理，并且具有更简洁的代码。</p>\n<p>由于 JDBC 资源清理非常繁琐且容易出错，因此 DBUtils 类有助于抽取出重复代码，以便开发人员只专注于与数据库相关的操作。</p>\n<a id=\"more\"></a>\n\n<h4 id=\"使用优点\"><a href=\"#使用优点\" class=\"headerlink\" title=\"使用优点\"></a>使用优点</h4><ul>\n<li><strong>无资源泄漏</strong> - DBUtils 类确保不会发生资源泄漏。</li>\n<li><strong>清理和清除代码</strong> - DBUtils 类提供干净清晰的代码来执行数据库操作，而无需编写任何清理或资源泄漏防护代码。</li>\n<li><strong>Bean 映射</strong> - DBUtils 类支持从结果集中自动填充 javabeans。</li>\n</ul>\n<h4 id=\"设计原则\"><a href=\"#设计原则\" class=\"headerlink\" title=\"设计原则\"></a>设计原则</h4><ul>\n<li><strong>小</strong> - DBUtils 库的体积很小，只有较少的类，因此易于理解和使用。</li>\n<li><strong>透明</strong> - DBUtils 库在后台没有做太多工作，它只需查询并执行。</li>\n<li><strong>快速</strong> - DBUtils 库类不会创建许多背景对象，并且在数据库操作执行中速度非常快。</li>\n</ul>\n<h3 id=\"连接测试\"><a href=\"#连接测试\" class=\"headerlink\" title=\"连接测试\"></a>连接测试</h3><h4 id=\"示例代码\"><a href=\"#示例代码\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h4><pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Connection</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DriverManager</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SQLException</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>commons<span class=\"token punctuation\">.</span>dbutils<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DbUtils</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>commons<span class=\"token punctuation\">.</span>dbutils<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">QueryRunner</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>commons<span class=\"token punctuation\">.</span>dbutils<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ResultSetHandler</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>commons<span class=\"token punctuation\">.</span>dbutils<span class=\"token punctuation\">.</span>handlers<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">BeanHandler</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MainApp</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> JDBC_DRIVER <span class=\"token operator\">=</span> <span class=\"token string\">\"com.mysql.jdbc.Driver\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> DB_URL <span class=\"token operator\">=</span> <span class=\"token string\">\"jdbc:mysql://localhost:3306/test?serverTimezone=UTC\"</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> USER <span class=\"token operator\">=</span> <span class=\"token string\">\"user\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> PASS <span class=\"token operator\">=</span> <span class=\"token string\">\"password\"</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">Connection</span> conn <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">QueryRunner</span> queryRunner <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryRunner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tconn <span class=\"token operator\">=</span> <span class=\"token class-name\">DriverManager</span><span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span>DB_URL<span class=\"token punctuation\">,</span> USER<span class=\"token punctuation\">,</span> PASS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">ResultSetHandler</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Employee</span><span class=\"token punctuation\">&gt;</span></span> resultHandler <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BeanHandler</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Employee</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Employee</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token class-name\">Employee</span> emp <span class=\"token operator\">=</span> queryRunner<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">,</span> <span class=\"token string\">\"SELECT * FROM employees WHERE first=?\"</span><span class=\"token punctuation\">,</span> resultHandler<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Sumit\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token comment\">// Display values</span>\n\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ID: \"</span> <span class=\"token operator\">+</span> emp<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\", Age: \"</span> <span class=\"token operator\">+</span> emp<span class=\"token punctuation\">.</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\", First: \"</span> <span class=\"token operator\">+</span> emp<span class=\"token punctuation\">.</span><span class=\"token function\">getFirst</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\", Last: \"</span> <span class=\"token operator\">+</span> emp<span class=\"token punctuation\">.</span><span class=\"token function\">getLast</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token class-name\">DbUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<h4 id=\"异常处理\"><a href=\"#异常处理\" class=\"headerlink\" title=\"异常处理\"></a>异常处理</h4><p><strong>异常一</strong>：连接报错：</p>\n<blockquote>\n<p>Exception in thread \"main\" java.sql.SQLException: The server time zone value '�й���׼ʱ��' is unrecognized or represents more than one time zone. You must configure either the server or JDBC driver (via the 'serverTimezone' configuration property) to use a more specific time zone value if you want to utilize time zone support.</p>\n</blockquote>\n<p><strong>解决</strong>：在连接字符串后面加上 <code>?serverTimezone=UTC</code>，其中 UTC 是统一标准世界时间。如下所示：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> DB_URL <span class=\"token operator\">=</span> <span class=\"token string\">\"jdbc:mysql://localhost:3306/test?serverTimezone=UTC\"</span><span class=\"token punctuation\">;</span></code></pre>\n\n<p><strong>异常二</strong>：若使用驱动 <code>com.mysql.jdbc.Driver</code> ，则虽然程序正常运行，但提示：</p>\n<blockquote>\n<p>Loading class <code>com.mysql.jdbc.Driver'. This is deprecated. The new driver class is </code>com.mysql.cj.jdbc.Driver'. The driver is automatically registered via the SPI and manual loading of the driver class is generally unnecessary.</p>\n</blockquote>\n<p><strong>解决</strong>：解决方案有两种：</p>\n<ol>\n<li><p>切换驱动 <code>com.mysql.jdbc.Driver</code> 为 <code>com.mysql.cj.jdbc.Driver</code>。</p>\n</li>\n<li><p>删除驱动连接。</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> JDBC_DRIVER <span class=\"token operator\">=</span> <span class=\"token string\">\"com.mysql.jdbc.Driver\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">DbUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">loadDriver</span><span class=\"token punctuation\">(</span>JDBC_DRIVER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n<p>此时，通过 SPI 自动注册驱动程序，不需要手动加载驱动程序类。</p>\n</li>\n</ol>\n<h3 id=\"数据操作\"><a href=\"#数据操作\" class=\"headerlink\" title=\"数据操作\"></a>数据操作</h3><h4 id=\"新增数据\"><a href=\"#新增数据\" class=\"headerlink\" title=\"新增数据\"></a>新增数据</h4><pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">String</span> insertQuery <span class=\"token operator\">=</span><span class=\"token string\">\"INSERT INTO employees(id,age,first,last)  VALUES (?,?,?,?)\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> insertedRecords <span class=\"token operator\">=</span> queryRunner<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">,</span> insertQuery<span class=\"token punctuation\">,</span> <span class=\"token number\">104</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Sohan\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Kumar\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n<h4 id=\"读取数据\"><a href=\"#读取数据\" class=\"headerlink\" title=\"读取数据\"></a>读取数据</h4><pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">ResultSetHandler</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Employee</span><span class=\"token punctuation\">&gt;</span></span> resultHandler <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BeanHandler</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Employee</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Employee</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Employee</span> emp <span class=\"token operator\">=</span> queryRunner<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">,</span> <span class=\"token string\">\"SELECT * FROM employees WHERE first=?\"</span><span class=\"token punctuation\">,</span> resultHandler<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Sumit\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n<p>其中，</p>\n<ul>\n<li><em>resultHandler</em>  − <code>ResultSetHandler</code> 对象将结果集映射到 <code>Employee</code> 对象。</li>\n<li><em>queryRunner</em> − <code>QueryRunner</code> 对象在数据库中插入 <code>Employee</code> 对象。</li>\n</ul>\n<h4 id=\"更新数据\"><a href=\"#更新数据\" class=\"headerlink\" title=\"更新数据\"></a>更新数据</h4><pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">String</span> updateQuery <span class=\"token operator\">=</span> <span class=\"token string\">\"UPDATE employees SET age=? WHERE id=?\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> updatedRecords <span class=\"token operator\">=</span> queryRunner<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">,</span> updateQuery<span class=\"token punctuation\">,</span> <span class=\"token number\">33</span><span class=\"token punctuation\">,</span> <span class=\"token number\">104</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n<p>其中，</p>\n<ul>\n<li><em>updateQuery</em> − 更新包含占位符的查询。</li>\n<li><em>queryRunner</em> − QueryRunner 对象更新数据库中的员工对象。</li>\n</ul>\n<h4 id=\"删除数据\"><a href=\"#删除数据\" class=\"headerlink\" title=\"删除数据\"></a>删除数据</h4><pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">String</span> deleteQuery <span class=\"token operator\">=</span> <span class=\"token string\">\"DELETE FROM employees WHERE id=?\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> deletedRecords <span class=\"token operator\">=</span> queryRunner<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">,</span> deleteQuery<span class=\"token punctuation\">,</span> <span class=\"token number\">33</span><span class=\"token punctuation\">,</span><span class=\"token number\">104</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Java</span></code></pre>\n\n<p>其中，</p>\n<ul>\n<li><em>deleteQuery</em> − 删除包含占位符的查询。</li>\n<li><em>queryRunner</em> − <code>QueryRunner</code> 对象删除数据库中的员工对象。</li>\n</ul>\n<h3 id=\"DBUtils-核心类\"><a href=\"#DBUtils-核心类\" class=\"headerlink\" title=\"DBUtils 核心类\"></a>DBUtils 核心类</h3><h4 id=\"QueryRunner\"><a href=\"#QueryRunner\" class=\"headerlink\" title=\"QueryRunner\"></a>QueryRunner</h4><p><code>org.apache.commons.dbutils.QueryRunner</code> 类是 DBUtils 库中的中心类。 </p>\n<p>它执行带有可插入策略的 SQL 查询来处理 <code>ResultSets</code>。 这个类是线程安全的。</p>\n<h4 id=\"AsyncQueryRunner\"><a href=\"#AsyncQueryRunner\" class=\"headerlink\" title=\"AsyncQueryRunner\"></a>AsyncQueryRunner</h4><p><code>org.apache.commons.dbutils.AsyncQueryRunner</code> 类有助于执行具有异步支持的长时间运行的 SQL 查询。 这个类是线程安全的。 </p>\n<p>该类支持与 <code>QueryRunner</code> 相同的方法，但它返回 <code>Callable</code> 对象，在之后可以使用它来检索结果。</p>\n<h4 id=\"ResultSetHandler\"><a href=\"#ResultSetHandler\" class=\"headerlink\" title=\"ResultSetHandler\"></a>ResultSetHandler</h4><p><code>org.apache.commons.dbutils.ResultSetHandler</code> 接口负责将 ResultSets 转换为对象。</p>\n<h4 id=\"BeanHandler\"><a href=\"#BeanHandler\" class=\"headerlink\" title=\"BeanHandler\"></a>BeanHandler</h4><p><code>org.apache.commons.dbutils.BeanHandler</code> 是 <code>ResultSetHandler</code> 接口的实现，负责将第一个 <code>ResultSet</code> 行转换为 <code>JavaBean</code>。 这个类是线程安全的。</p>\n<h4 id=\"BeanListHandler\"><a href=\"#BeanListHandler\" class=\"headerlink\" title=\"BeanListHandler\"></a>BeanListHandler</h4><p><code>org.apache.commons.dbutils.BeanListHandler</code> 是 <code>ResultSetHandler</code> 接口的实现，负责将 <code>ResultSet</code> 行转换为 Java Bean 列表。 这个类是线程安全的。</p>\n<h4 id=\"ArrayListHandler\"><a href=\"#ArrayListHandler\" class=\"headerlink\" title=\"ArrayListHandler\"></a>ArrayListHandler</h4><p><code>org.apache.commons.dbutils.ArrayListHandler</code> 是 <code>ResultSetHandler</code> 接口的实现，负责将 <code>ResultSet</code> 行转换为 <code>object[]</code>。 这个类是线程安全的。</p>\n<h4 id=\"MapListHandler\"><a href=\"#MapListHandler\" class=\"headerlink\" title=\"MapListHandler\"></a>MapListHandler</h4><p><code>org.apache.commons.dbutils.MapListHandler</code> 是 <code>ResultSetHandler</code> 接口的实现，负责将 <code>ResultSet</code> 行转换为 Maps 列表。 这个类是线程安全的。</p>\n<h3 id=\"自定义DBUtils\"><a href=\"#自定义DBUtils\" class=\"headerlink\" title=\"自定义DBUtils\"></a>自定义 DBUtils</h3><h4 id=\"自定义处理程序\"><a href=\"#自定义处理程序\" class=\"headerlink\" title=\"自定义处理程序\"></a>自定义处理程序</h4><p>可以通过实现 <code>ResultSetHandler</code> 接口或扩展任何现有的 <code>ResultSetHandler</code> 实现来创建自己的自定义处理程序。</p>\n<p>在下面的示例中，我们通过扩展 <code>BeanHandler</code> 类创建了自定义处理程序 <code>EmployeeHandler</code>。</p>\n<p>EmployeeHandler.java</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ResultSet</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SQLException</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>commons<span class=\"token punctuation\">.</span>dbutils<span class=\"token punctuation\">.</span>handlers<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">BeanHandler</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">EmployeeHandler</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">BeanHandler</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Employee</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">EmployeeHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Employee</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Employee</span> <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ResultSet</span> rs<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">Employee</span> employee <span class=\"token operator\">=</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">handle</span><span class=\"token punctuation\">(</span>rs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\temployee<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span>employee<span class=\"token punctuation\">.</span><span class=\"token function\">getFirst</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\", \"</span> <span class=\"token operator\">+</span> employee<span class=\"token punctuation\">.</span><span class=\"token function\">getLast</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> employee<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<p>MyHandlerMain.java</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Connection</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DriverManager</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SQLException</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>commons<span class=\"token punctuation\">.</span>dbutils<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DbUtils</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>commons<span class=\"token punctuation\">.</span>dbutils<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">QueryRunner</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyHandlerMain</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> DB_URL <span class=\"token operator\">=</span> <span class=\"token string\">\"jdbc:mysql://localhost:3306/test?serverTimezone=UTC\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> USER <span class=\"token operator\">=</span> <span class=\"token string\">\"user\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> PASS <span class=\"token operator\">=</span> <span class=\"token string\">\"password\"</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">Connection</span> conn <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">QueryRunner</span> queryRunner <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryRunner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tconn <span class=\"token operator\">=</span> <span class=\"token class-name\">DriverManager</span><span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span>DB_URL<span class=\"token punctuation\">,</span> USER<span class=\"token punctuation\">,</span> PASS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">EmployeeHandler</span> employeeHandler <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EmployeeHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token class-name\">Employee</span> emp <span class=\"token operator\">=</span> queryRunner<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">,</span> <span class=\"token string\">\"SELECT * FROM employees WHERE first=?\"</span><span class=\"token punctuation\">,</span> employeeHandler<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Sumit\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ID: \"</span> <span class=\"token operator\">+</span> emp<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\", Age: \"</span> <span class=\"token operator\">+</span> emp<span class=\"token punctuation\">.</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\", Name: \"</span> <span class=\"token operator\">+</span> emp<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token class-name\">DbUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<h4 id=\"自定义行处理器\"><a href=\"#自定义行处理器\" class=\"headerlink\" title=\"自定义行处理器\"></a>自定义行处理器</h4><p>如果数据库表中的列名和等价的 javabean 对象名称不相似，那么我们可以通过使用自定义的 <code>BasicRowProcessor</code> 对象来映射它们。</p>\n<p>EmployeeHandler2.java</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ResultSet</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SQLException</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HashMap</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>commons<span class=\"token punctuation\">.</span>dbutils<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">BasicRowProcessor</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>commons<span class=\"token punctuation\">.</span>dbutils<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">BeanProcessor</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>commons<span class=\"token punctuation\">.</span>dbutils<span class=\"token punctuation\">.</span>handlers<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">BeanHandler</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">EmployeeHandler2</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">BeanHandler</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Employee</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token punctuation\">{</span>\n\n   <span class=\"token keyword\">public</span> <span class=\"token class-name\">EmployeeHandler2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Employee</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BasicRowProcessor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">BeanProcessor</span><span class=\"token punctuation\">(</span><span class=\"token function\">mapColumnsToFields</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n\n   <span class=\"token annotation punctuation\">@Override</span>\n   <span class=\"token keyword\">public</span> <span class=\"token class-name\">Employee</span> <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ResultSet</span> rs<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token class-name\">Employee</span> employee <span class=\"token operator\">=</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">handle</span><span class=\"token punctuation\">(</span>rs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      employee<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span>employee<span class=\"token punctuation\">.</span><span class=\"token function\">getFirst</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span><span class=\"token string\">\", \"</span> <span class=\"token operator\">+</span> employee<span class=\"token punctuation\">.</span><span class=\"token function\">getLast</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> employee<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">mapColumnsToFields</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> columnsToFieldsMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      columnsToFieldsMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ID\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      columnsToFieldsMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"AGE\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"age\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        \n      <span class=\"token keyword\">return</span> columnsToFieldsMap<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<p>MyHandlerMain2.java</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Connection</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DriverManager</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SQLException</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>commons<span class=\"token punctuation\">.</span>dbutils<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DbUtils</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>commons<span class=\"token punctuation\">.</span>dbutils<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">QueryRunner</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyHandlerMain2</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> DB_URL <span class=\"token operator\">=</span> <span class=\"token string\">\"jdbc:mysql://localhost:3306/test?serverTimezone=UTC\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> USER <span class=\"token operator\">=</span> <span class=\"token string\">\"user\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> PASS <span class=\"token operator\">=</span> <span class=\"token string\">\"password\"</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">Connection</span> conn <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">QueryRunner</span> queryRunner <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryRunner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tconn <span class=\"token operator\">=</span> <span class=\"token class-name\">DriverManager</span><span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span>DB_URL<span class=\"token punctuation\">,</span> USER<span class=\"token punctuation\">,</span> PASS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">EmployeeHandler</span> employeeHandler <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EmployeeHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token class-name\">Employee</span> emp <span class=\"token operator\">=</span> queryRunner<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">,</span> <span class=\"token string\">\"SELECT * FROM employees WHERE first=?\"</span><span class=\"token punctuation\">,</span> employeeHandler<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Sumit\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ID: \"</span> <span class=\"token operator\">+</span> emp<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\", Name: \"</span> <span class=\"token operator\">+</span> emp<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token class-name\">DbUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<h4 id=\"使用DataSource\"><a href=\"#使用DataSource\" class=\"headerlink\" title=\"使用DataSource\"></a>使用 DataSource</h4><p> 以下示例将演示如何在 <code>QueryRunner</code> 和数据源的帮助下使用查询读取记录。 </p>\n<p><strong>语法</strong></p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">QueryRunner</span> queryRunner <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryRunner</span><span class=\"token punctuation\">(</span> dataSource <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Employee</span> emp <span class=\"token operator\">=</span> queryRunner<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SELECT * FROM employees WHERE first=?\"</span><span class=\"token punctuation\">,</span> resultHandler<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Sumit\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n<p>其中，</p>\n<ul>\n<li><code>dataSource</code> - 配置了 <code>DataSource</code> 对象。</li>\n<li><code>resultHandler</code> - <code>ResultSetHandler</code> 对象将结果集映射到 <code>Employee</code> 对象。</li>\n<li><code>queryRunner</code> - 用于从数据库读取 <code>Employee</code> 对象的 <code>QueryRunner</code> 对象。</li>\n</ul>\n<p>需要引入 Jar 包：</p>\n<pre class=\"language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>commons-dbutils<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>commons-dbutils<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>1.7<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n\n<p>CustomDataSource.java：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DataSource</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>commons<span class=\"token punctuation\">.</span>dbcp2<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">BasicDataSource</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomDataSource</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> JDBC_DRIVER <span class=\"token operator\">=</span> <span class=\"token string\">\"com.mysql.cj.jdbc.Driver\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> DB_URL <span class=\"token operator\">=</span> <span class=\"token string\">\"jdbc:mysql://localhost:3306/test?serverTimezone=UTC\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> USER <span class=\"token operator\">=</span> <span class=\"token string\">\"user\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> PASS <span class=\"token operator\">=</span> <span class=\"token string\">\"password\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">BasicDataSource</span> basicDataSource<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">static</span> <span class=\"token punctuation\">{</span>\n\t\tbasicDataSource <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BasicDataSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tbasicDataSource<span class=\"token punctuation\">.</span><span class=\"token function\">setDriverClassName</span><span class=\"token punctuation\">(</span>JDBC_DRIVER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tbasicDataSource<span class=\"token punctuation\">.</span><span class=\"token function\">setUsername</span><span class=\"token punctuation\">(</span>USER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tbasicDataSource<span class=\"token punctuation\">.</span><span class=\"token function\">setPassword</span><span class=\"token punctuation\">(</span>PASS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tbasicDataSource<span class=\"token punctuation\">.</span><span class=\"token function\">setUrl</span><span class=\"token punctuation\">(</span>DB_URL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">DataSource</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> basicDataSource<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<p>MyHandlerMain3.java</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SQLException</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>commons<span class=\"token punctuation\">.</span>dbutils<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">QueryRunner</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>commons<span class=\"token punctuation\">.</span>dbutils<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ResultSetHandler</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>commons<span class=\"token punctuation\">.</span>dbutils<span class=\"token punctuation\">.</span>handlers<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">BeanHandler</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyHandlerMain3</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">QueryRunner</span> queryRunner <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryRunner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CustomDataSource</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">ResultSetHandler</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Employee</span><span class=\"token punctuation\">&gt;</span></span> resultHandler <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BeanHandler</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Employee</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Employee</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">Employee</span> emp <span class=\"token operator\">=</span> queryRunner<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SELECT * FROM employees WHERE id=?\"</span><span class=\"token punctuation\">,</span> resultHandler<span class=\"token punctuation\">,</span> <span class=\"token number\">103</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ID: \"</span> <span class=\"token operator\">+</span> emp<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\", Age: \"</span> <span class=\"token operator\">+</span> emp<span class=\"token punctuation\">.</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\", First: \"</span> <span class=\"token operator\">+</span> emp<span class=\"token punctuation\">.</span><span class=\"token function\">getFirst</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\", Last: \"</span> <span class=\"token operator\">+</span> emp<span class=\"token punctuation\">.</span><span class=\"token function\">getLast</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n\n\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cueWlpYmFpLmNvbS9kYnV0aWxz\">https://www.yiibai.com/dbutils<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n","categories":["Java","Apache","Database","Commons","JavaJar","MySQL"],"tags":["Apache","Java","MySQL","JavaJar"]},{"title":"Hexo 博客添加 Live2D 看板娘","url":"/2020/10/2020-10-09-Hexo%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0Live2D%E7%9C%8B%E6%9D%BF%E5%A8%98/","content":"<h3 id=\"资料汇总\"><a href=\"#资料汇总\" class=\"headerlink\" title=\"资料汇总\"></a>资料汇总</h3><ul>\n<li>GitHub：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0VZSE4vaGV4by1oZWxwZXItbGl2ZTJk\">https://github.com/EYHN/hexo-helper-live2d<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li> 配置说明：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sMmR3aWRnZXQuanMub3JnL2RvY3MvY2xhc3Mvc3JjL2luZGV4LmpzfkwyRHdpZGdldC5odG1s\">https://l2dwidget.js.org/docs/class/src/index.js~L2Dwidget.html<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li> 模型仓库：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3hpYXpleXUvbGl2ZTJkLXdpZGdldC1tb2RlbHM=\">https://github.com/xiazeyu/live2d-widget-models<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li> 模型预览：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9odWFqaTgudG9wL3Bvc3QvbGl2ZTJkLXBsdWdpbi0yLjAv\">https://huaji8.top/post/live2d-plugin-2.0/<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<a id=\"more\"></a>\n\n<h3 id=\"安装配置\"><a href=\"#安装配置\" class=\"headerlink\" title=\"安装配置\"></a>安装配置</h3><p>首先，安装 npm 包：</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save hexo-helper-live2d</code></pre>\n\n<p>然后在 hexo 的配置文件<code>_config.yml</code> 中添加如下配置，详细配置可以参考<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0VZSE4vaGV4by1oZWxwZXItbGl2ZTJkL2Jsb2IvbWFzdGVyL1JFQURNRS56aC1DTi5tZA==\">文档<i class=\"fa fa-external-link-alt\"></i></span>：</p>\n<pre class=\"language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">live2d</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n  <span class=\"token key atrule\">scriptFrom</span><span class=\"token punctuation\">:</span> local\n  <span class=\"token key atrule\">pluginRootPath</span><span class=\"token punctuation\">:</span> live2dw/\n  <span class=\"token key atrule\">pluginJsPath</span><span class=\"token punctuation\">:</span> lib/\n  <span class=\"token key atrule\">pluginModelPath</span><span class=\"token punctuation\">:</span> assets/\n  <span class=\"token key atrule\">tagMode</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span>\n  <span class=\"token key atrule\">debug</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span>\n  <span class=\"token key atrule\">model</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">use</span><span class=\"token punctuation\">:</span> live2d<span class=\"token punctuation\">-</span>widget<span class=\"token punctuation\">-</span>model<span class=\"token punctuation\">-</span>wanko\n  <span class=\"token key atrule\">display</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">position</span><span class=\"token punctuation\">:</span> right\n    <span class=\"token key atrule\">width</span><span class=\"token punctuation\">:</span> <span class=\"token number\">150</span>\n    <span class=\"token key atrule\">height</span><span class=\"token punctuation\">:</span> <span class=\"token number\">300</span>\n  <span class=\"token key atrule\">mobile</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">show</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n  <span class=\"token key atrule\">react</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">opacity</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0.7</span></code></pre>\n\n<p>然后下载模型，模型名称可以到<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3hpYXpleXUvbGl2ZTJkLXdpZGdldC1tb2RlbHM=\">这里<i class=\"fa fa-external-link-alt\"></i></span>参考，一些模型的预览可以在<span class=\"exturl\" data-url=\"aHR0cHM6Ly9odWFqaTgudG9wL3Bvc3QvbGl2ZTJkLXBsdWdpbi0yLjAv\">这里<i class=\"fa fa-external-link-alt\"></i></span>。</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> live2d-widget-model-shizuku</code></pre>\n\n<h3 id=\"效果预览\"><a href=\"#效果预览\" class=\"headerlink\" title=\"效果预览\"></a>效果预览</h3><p><img src=\"/images/2020/10/1602240328748.png\" alt=\"1602240328748\" loading=\"lazy\"></p>\n<h3 id=\"配置解释\"><a href=\"#配置解释\" class=\"headerlink\" title=\"配置解释\"></a>配置解释</h3><pre class=\"language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># Live2D</span>\n<span class=\"token comment\">## https://github.com/EYHN/hexo-helper-live2d</span>\n<span class=\"token comment\">## https://l2dwidget.js.org/docs/class/src/index.js~L2Dwidget.html#instance-method-init</span>\n<span class=\"token key atrule\">live2d</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n  <span class=\"token comment\">#enable: false</span>\n  <span class=\"token key atrule\">scriptFrom</span><span class=\"token punctuation\">:</span> local <span class=\"token comment\"># 默认</span>\n  <span class=\"token key atrule\">pluginRootPath</span><span class=\"token punctuation\">:</span> live2dw/ <span class=\"token comment\"># 插件在站点上的根目录(相对路径)</span>\n  <span class=\"token key atrule\">pluginJsPath</span><span class=\"token punctuation\">:</span> lib/ <span class=\"token comment\"># 脚本文件相对与插件根目录路径</span>\n  <span class=\"token key atrule\">pluginModelPath</span><span class=\"token punctuation\">:</span> assets/ <span class=\"token comment\"># 模型文件相对与插件根目录路径</span>\n  <span class=\"token comment\"># scriptFrom: jsdelivr # jsdelivr CDN</span>\n  <span class=\"token comment\"># scriptFrom: unpkg # unpkg CDN</span>\n  <span class=\"token comment\"># scriptFrom: https://cdn.jsdelivr.net/npm/live2d-widget@3.x/lib/L2Dwidget.min.js # 你的自定义 url</span>\n  <span class=\"token key atrule\">tagMode</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span> <span class=\"token comment\"># 标签模式, 是否仅替换 live2d tag标签而非插入到所有页面中</span>\n  <span class=\"token key atrule\">debug</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span> <span class=\"token comment\"># 调试, 是否在控制台输出日志</span>\n  <span class=\"token key atrule\">model</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">use</span><span class=\"token punctuation\">:</span> live2d<span class=\"token punctuation\">-</span>widget<span class=\"token punctuation\">-</span>model<span class=\"token punctuation\">-</span>hibiki\n    <span class=\"token comment\"># use: live2d-widget-model-wanko # npm-module package name</span>\n    <span class=\"token comment\"># use: wanko # 博客根目录/live2d_models/ 下的目录名</span>\n    <span class=\"token comment\"># use: ./wives/wanko # 相对于博客根目录的路径</span>\n    <span class=\"token comment\"># use: https://cdn.jsdelivr.net/npm/live2d-widget-model-wanko@1.0.5/assets/wanko.model.json # 你的自定义 url</span>\n  <span class=\"token key atrule\">display</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">position</span><span class=\"token punctuation\">:</span> right\n    <span class=\"token key atrule\">width</span><span class=\"token punctuation\">:</span> <span class=\"token number\">145</span>\n    <span class=\"token key atrule\">height</span><span class=\"token punctuation\">:</span> <span class=\"token number\">315</span>\n  <span class=\"token key atrule\">mobile</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">show</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span> <span class=\"token comment\"># 是否在移动设备上显示</span>\n    <span class=\"token key atrule\">scale</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0.5</span> <span class=\"token comment\"># 移动设备上的缩放</span>\n  <span class=\"token key atrule\">react</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">opacityDefault</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0.7</span>\n    <span class=\"token key atrule\">opacityOnHover</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0.8</span></code></pre>\n\n<h3 id=\"问题解决\"><a href=\"#问题解决\" class=\"headerlink\" title=\"问题解决\"></a>问题解决</h3><h4 id=\"position-left-不生效\"><a href=\"#position-left-不生效\" class=\"headerlink\" title=\"position: left 不生效\"></a>position: left 不生效</h4><blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0VZSE4vaGV4by1oZWxwZXItbGl2ZTJkL2lzc3Vlcy8xMDA=\">https://github.com/EYHN/hexo-helper-live2d/issues/100<i class=\"fa fa-external-link-alt\"></i></span></p>\n</blockquote>\n","categories":["Blog"],"tags":["Blog"]},{"title":"Python 转化文件编码为 UTF8","url":"/2020/10/2020-10-10-Python%E8%BD%AC%E5%8C%96%E6%96%87%E4%BB%B6%E7%BC%96%E7%A0%81%E4%B8%BAUTF8/","content":"<p>使用编译器若遇到文件编码问题，当文件中有中文时，则会出现乱码，会因为编码问题导致各种错误。</p>\n<p>所以写了个 python 脚本来检测原文件编码并转换为目标编码，以下代码以目标编码为 utf-8 为例：</p>\n<p>需要安装 chardet，详情：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9weXBpLnB5dGhvbi5vcmcvcHlwaS9jaGFyZGV0\">https://pypi.python.org/pypi/chardet<i class=\"fa fa-external-link-alt\"></i></span> </p>\n<a id=\"more\"></a>\n\n<h3 id=\"Python2\"><a href=\"#Python2\" class=\"headerlink\" title=\"Python2\"></a>Python2</h3><pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> codecs\n<span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">import</span> shutil\n<span class=\"token keyword\">import</span> re\n<span class=\"token keyword\">import</span> chardet\n\nconvertdir <span class=\"token operator\">=</span> <span class=\"token string\">\"E:\\\\code\\\\GitCode\\\\test-demo\\\\src\\\\main\\\\java\"</span>\n\nconvertfiletypes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token string\">\".java\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\".h\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\".hpp\"</span>\n  <span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">convert_encoding</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span> target_encoding<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># Backup the origin file.</span>\n    <span class=\"token comment\"># convert file from the source encoding to target encoding</span>\n    content <span class=\"token operator\">=</span> codecs<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span> <span class=\"token string\">'r'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    source_encoding <span class=\"token operator\">=</span> chardet<span class=\"token punctuation\">.</span>detect<span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token string\">'encoding'</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">if</span> source_encoding <span class=\"token operator\">!=</span> <span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span> source_encoding<span class=\"token punctuation\">,</span> filename\n        content <span class=\"token operator\">=</span> content<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span>source_encoding<span class=\"token punctuation\">,</span> <span class=\"token string\">'ignore'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#.encode(source_encoding)</span>\n        codecs<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span> <span class=\"token string\">'w'</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span>target_encoding<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> root<span class=\"token punctuation\">,</span> dirs<span class=\"token punctuation\">,</span> files <span class=\"token keyword\">in</span> os<span class=\"token punctuation\">.</span>walk<span class=\"token punctuation\">(</span>convertdir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> f <span class=\"token keyword\">in</span> files<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">for</span> filetype <span class=\"token keyword\">in</span> convertfiletypes<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">if</span> f<span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>endswith<span class=\"token punctuation\">(</span>filetype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                    filename <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n                        convert_encoding<span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span> <span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">except</span> Exception<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">:</span>\n                        <span class=\"token keyword\">print</span> filename\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n\n<h3 id=\"Python3\"><a href=\"#Python3\" class=\"headerlink\" title=\"Python3\"></a>Python3</h3><pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> codecs\n<span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">import</span> shutil\n<span class=\"token keyword\">import</span> re\n<span class=\"token keyword\">import</span> chardet\n\nconvertdir <span class=\"token operator\">=</span> <span class=\"token string\">\"E:\\\\code\\\\GitCode\\\\test-demo\\\\src\\\\main\\\\java\"</span>\n\nconvertfiletypes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token string\">\".java\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\".h\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\".hpp\"</span>\n  <span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">convert_encoding</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span> target_encoding<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># Backup the origin file.</span>\n    <span class=\"token comment\"># convert file from the source encoding to target encoding</span>\n    content <span class=\"token operator\">=</span> codecs<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span> <span class=\"token string\">'rb'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    source_encoding <span class=\"token operator\">=</span> chardet<span class=\"token punctuation\">.</span>detect<span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token string\">'encoding'</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">if</span> source_encoding <span class=\"token operator\">!=</span> <span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>source_encoding<span class=\"token punctuation\">,</span> filename<span class=\"token punctuation\">)</span>\n        content <span class=\"token operator\">=</span> content<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span>source_encoding<span class=\"token punctuation\">,</span> <span class=\"token string\">'ignore'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#.encode(source_encoding)</span>\n        codecs<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span> <span class=\"token string\">'w'</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span>target_encoding<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> root<span class=\"token punctuation\">,</span> dirs<span class=\"token punctuation\">,</span> files <span class=\"token keyword\">in</span> os<span class=\"token punctuation\">.</span>walk<span class=\"token punctuation\">(</span>convertdir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> f <span class=\"token keyword\">in</span> files<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">for</span> filetype <span class=\"token keyword\">in</span> convertfiletypes<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">if</span> f<span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>endswith<span class=\"token punctuation\">(</span>filetype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                    filename <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n                        convert_encoding<span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span> <span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n                        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>   </code></pre>\n\n<h4 id=\"问题处理\"><a href=\"#问题处理\" class=\"headerlink\" title=\"问题处理\"></a>问题处理</h4><p>若报错：</p>\n<blockquote>\n<p>'gbk' codec can't decode byte 0xae in position 758: illegal multibyte sequence</p>\n</blockquote>\n<p>此种错误，可能是要处理的字符串本身不是 gbk 编码，但是却以 gbk 编码去解码 。比如，字符串本身是 utf-8 的，但是却用 gbk 去解码 utf-8 的字符串，所以结果不用说，则必然出错。</p>\n<p>通过查阅资料，在读取文本的时候加入参数‘b’, 不会提示错误，通过输出读取的数据显示。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">content <span class=\"token operator\">=</span> codecs<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span> <span class=\"token string\">'rb'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n\n","categories":["Python"],"tags":["Python"]},{"title":"Eclipse 安装反编译插件 Decompiler","url":"/2020/10/2020-10-13-Eclipse%E5%AE%89%E8%A3%85%E5%8F%8D%E7%BC%96%E8%AF%91%E6%8F%92%E4%BB%B6Decompiler/","content":"<h3 id=\"Decompiler-插件介绍\"><a href=\"#Decompiler-插件介绍\" class=\"headerlink\" title=\"Decompiler 插件介绍\"></a>Decompiler 插件介绍</h3><p>增强的类反编译器将 JD，Jad，FernFlower，CFR，Procyon 与 Eclipse 无缝集成，并允许 Java 开发人员直接调试类文件而无需源代码。</p>\n<p>插件官网：<span class=\"exturl\" data-url=\"aHR0cDovL21hcmtldHBsYWNlLmVjbGlwc2Uub3JnL2NvbnRlbnQvZW5oYW5jZWQtY2xhc3MtZGVjb21waWxlcg==\">http://marketplace.eclipse.org/content/enhanced-class-decompiler<i class=\"fa fa-external-link-alt\"></i></span></p>\n<a id=\"more\"></a>\n\n<h3 id=\"Decompiler-插件安装\"><a href=\"#Decompiler-插件安装\" class=\"headerlink\" title=\"Decompiler 插件安装\"></a>Decompiler 插件安装</h3><ol>\n<li><p>打开：Help——Eclipse Marketplace</p>\n</li>\n<li><p>搜索 jad、Decompiler 、或者反编译：</p>\n<p><img src=\"/images/2020/10/image-20201021172812160.png\" alt=\"image-20201021172812160\" loading=\"lazy\"></p>\n</li>\n<li><p>点击 Installed，进行安装。</p>\n</li>\n<li><p>安装完成后，重启 Eclipse。插件安装完成。</p>\n<p><img src=\"/images/2020/10/image-20201021173703398.png\" alt=\"image-20201021173703398\" loading=\"lazy\"></p>\n</li>\n</ol>\n<h3 id=\"Decompiler-插件配置\"><a href=\"#Decompiler-插件配置\" class=\"headerlink\" title=\"Decompiler 插件配置\"></a>Decompiler 插件配置</h3><ol>\n<li><p>设置 *.class 文件类型默认打开方式，如图所示：</p>\n<p><img src=\"/images/2020/10/image-20201021173142275.png\" alt=\"image-20201021173142275\" loading=\"lazy\"></p>\n</li>\n<li><p>设置 *.class without source 文件类型打开方式，如图所示</p>\n<p><img src=\"/images/2020/10/image-20201021173203007.png\" alt=\"image-20201021173203007\" loading=\"lazy\"></p>\n</li>\n<li><p>最后，点击 Apply and Close。就可以直接打开.class 文件进行查看了。</p>\n</li>\n<li><p>插件提供了系统菜单，工具栏，当打开了插件提供的类反编译查看器后，会激活菜单和工具栏选项，可以方便的进行首选项配置，切换反编译工具重新反编译，以及导出反编译结果。</p>\n<p>菜单：</p>\n<p><img src=\"/images/2020/10/image-20201021174246707.png\" alt=\"image-20201021174246707\" loading=\"lazy\"></p>\n<p>工具栏选项：</p>\n<p><img src=\"/images/2020/10/image-20201021174505200.png\" alt=\"image-20201021174505200\" loading=\"lazy\"></p>\n</li>\n</ol>\n","categories":["软件","IDE"],"tags":["Java","软件","IDE","Eclipse"]},{"title":"k8s 配置使用 NFS 动态存储","url":"/2020/10/2020-10-14-k8s%E9%85%8D%E7%BD%AE%E4%BD%BF%E7%94%A8NFS%E5%8A%A8%E6%80%81%E5%AD%98%E5%82%A8/","content":"<h3 id=\"部署nfs服务\"><a href=\"#部署nfs服务\" class=\"headerlink\" title=\"部署nfs服务\"></a>部署 nfs 服务</h3><p>1、主机安装 nfs 服务器</p>\n<pre class=\"language-none\"><code class=\"language-none\">sudo apt-get install nfs-kernel-server\nsudo apt-get install nfs-common</code></pre>\n\n<a id=\"more\"></a>\n\n<p>2、主机共享 NFS 文件夹</p>\n<p>编辑  /etc/exports 文件</p>\n<p>sudo vi /etc/exports<br>在文件末尾添加（nfs 共享目录，它可以作为开发板的根文件系统通过 nfs 挂载。）：</p>\n<pre class=\"language-none\"><code class=\"language-none\">/home/vmuser/Share                *(insecure,rw,sync,no_root_squash)</code></pre>\n\n<p>修改完成后，保存。 </p>\n<p>该目录必须存在<br>然后启动或重启 NFS 服务。</p>\n<p>在终端中执行如下命令，可以启动 NFS 服务：</p>\n<pre class=\"language-none\"><code class=\"language-none\">$ sudo /etc/init.d/nfs-kernel-server start</code></pre>\n\n<p>执行如下命令则可以重新启动 NFS 服务：</p>\n<pre class=\"language-none\"><code class=\"language-none\">$ sudo /etc/init.d/nfs-kernel-server restart</code></pre>\n\n<p>3、其他设备挂载 NFS 服务器</p>\n<pre class=\"language-none\"><code class=\"language-none\">$ sudo mount -t nfs 192.168.12.123:/home/vmuser/Share    /mnt/nfsdata -o nolock  </code></pre>\n\n<h4 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h4><ul>\n<li><p>共享 NFS 文件夹权限必须为 777 ，<code>chmod 777 Share</code></p>\n</li>\n<li><p>配置文件 /etc/exports，需要加入 insecure 选项。否则其他机器挂载失败。</p>\n<pre class=\"language-none\"><code class=\"language-none\">mount.nfs: access denied by server while mounting 10.110.10.10:/mnt/dfs/3/k8snfs</code></pre>\n\n\n</li>\n</ul>\n<h3 id=\"新建-PV\"><a href=\"#新建-PV\" class=\"headerlink\" title=\"新建 PV\"></a>新建 PV</h3><pre class=\"language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> PersistentVolume\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n   <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> nfs<span class=\"token punctuation\">-</span>mysqldata\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n   <span class=\"token key atrule\">capacity</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">storage</span><span class=\"token punctuation\">:</span> 50Gi\n   <span class=\"token key atrule\">accessModes</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> ReadWriteOnce\n   <span class=\"token key atrule\">persistentVolumeReclaimPolicy</span><span class=\"token punctuation\">:</span> Retain\n   <span class=\"token key atrule\">storageClassName</span><span class=\"token punctuation\">:</span> mysqldata\n   <span class=\"token key atrule\">nfs</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> /mnt/dfs/3/k8snfs/mysqldata\n      <span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span> hostname1</code></pre>\n\n<h3 id=\"新建-PVC\"><a href=\"#新建-PVC\" class=\"headerlink\" title=\"新建 PVC\"></a>新建 PVC</h3><pre class=\"language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> PersistentVolumeClaim\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> mysqldata\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> manti<span class=\"token punctuation\">-</span>infra\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">accessModes</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> ReadWriteOnce\n  <span class=\"token key atrule\">resources</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">requests</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">storage</span><span class=\"token punctuation\">:</span> 50Gi\n  <span class=\"token key atrule\">storageClassName</span><span class=\"token punctuation\">:</span> mysqldata</code></pre>\n\n<h3 id=\"新建-Deployment\"><a href=\"#新建-Deployment\" class=\"headerlink\" title=\"新建 Deployment\"></a>新建 Deployment</h3><pre class=\"language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> apps/v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Deployment\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> mysql\n    <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> manti<span class=\"token punctuation\">-</span>infra\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">replicas</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span>\n    <span class=\"token key atrule\">selector</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">matchLabels</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> mysql\n    <span class=\"token key atrule\">template</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n                <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> mysql\n        <span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">imagePullSecrets</span><span class=\"token punctuation\">:</span>\n              <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> harborsecret\n            <span class=\"token key atrule\">containers</span><span class=\"token punctuation\">:</span>\n              <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> mysql\n                <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> mysql<span class=\"token punctuation\">:</span>v1.0.7\n                <span class=\"token key atrule\">imagePullPolicy</span><span class=\"token punctuation\">:</span> IfNotPresent\n                <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n                  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">containerPort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3306</span>\n                <span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>\n                  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> MYSQL_ROOT_PASSWORD\n                    <span class=\"token key atrule\">value</span><span class=\"token punctuation\">:</span> Test321\n                <span class=\"token key atrule\">volumeMounts</span><span class=\"token punctuation\">:</span>\n                  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> mysqldata\n                    <span class=\"token key atrule\">subPath</span><span class=\"token punctuation\">:</span> mysql\n                    <span class=\"token key atrule\">mountPath</span><span class=\"token punctuation\">:</span> /var/lib/mysql\n            <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n              <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> mysqldata\n                <span class=\"token key atrule\">persistentVolumeClaim</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token key atrule\">claimName</span><span class=\"token punctuation\">:</span> mysqldata\n            <span class=\"token key atrule\">initContainers</span><span class=\"token punctuation\">:</span>\n              <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> increase<span class=\"token punctuation\">-</span>fd<span class=\"token punctuation\">-</span>ulimit\n                <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> qz<span class=\"token punctuation\">-</span>nis<span class=\"token punctuation\">-</span>harbor.netease.com/ftd<span class=\"token punctuation\">-</span>phishing/busybox\n                <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"sh\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"-c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ulimit -n 65536\"</span><span class=\"token punctuation\">]</span>\n                <span class=\"token key atrule\">securityContext</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token key atrule\">privileged</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></code></pre>\n\n<p>新建 </p>\n<pre class=\"language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Service\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> mysql<span class=\"token punctuation\">-</span>out\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> manti<span class=\"token punctuation\">-</span>infra\n  <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> mysql<span class=\"token punctuation\">-</span>out\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> NodePort\n  <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> mysql<span class=\"token punctuation\">-</span>out\n      <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3306</span>\n      <span class=\"token key atrule\">nodePort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">30102</span>\n      <span class=\"token key atrule\">targetPort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3306</span>\n  <span class=\"token key atrule\">selector</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> mysql\n<span class=\"token punctuation\">---</span>\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Service\n<span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> mysql\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> manti<span class=\"token punctuation\">-</span>infra\n  <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> mysql\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">selector</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> mysql\n  <span class=\"token key atrule\">clusterIP</span><span class=\"token punctuation\">:</span> None\n  <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3306</span>\n      <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> client</code></pre>\n\n","categories":["Linux","软件","Container","Kubernets"],"tags":["k8s","NFS"]},{"title":"Windows 系统下安装 Apache 服务器","url":"/2020/10/2020-10-15-Windows%E7%B3%BB%E7%BB%9F%E4%B8%8B%E5%AE%89%E8%A3%85Apache%E6%9C%8D%E5%8A%A1%E5%99%A8/","content":"<h3 id=\"Apache-amp-Tomcat\"><a href=\"#Apache-amp-Tomcat\" class=\"headerlink\" title=\"Apache &amp; Tomcat\"></a>Apache &amp; Tomcat</h3><p>Apache 与 Tomcat 都是 Apache 开源组织开发的用于处理 HTTP 服务的项目，两者都是免费的，都可以做为独立的 Web 服务器运行。</p>\n<p>Apache 是 Web 服务器而 Tomcat 是 Java 应用服务器。</p>\n<a id=\"more\"></a>\n\n<h4 id=\"Apache\"><a href=\"#Apache\" class=\"headerlink\" title=\"Apache\"></a>Apache</h4><p>Apache：是 C 语言实现的，专门用来提供 HTTP 服务。</p>\n<p>特性：简单、速度快、性能稳定、可配置（代理）</p>\n<ol>\n<li>主要用于解析静态文本，并发性能高，侧重于 HTTP 服务；</li>\n<li>支持静态页（HTML），不支持动态请求如：CGI、Servlet/JSP、PHP、ASP 等；</li>\n<li>具有很强的可扩展性，可以通过插件支持 PHP，还可以单向 Apache 连接 Tomcat 实现连通；</li>\n<li>Apache 是世界使用排名第一的 Web 服务器。</li>\n</ol>\n<h4 id=\"Tomcat\"><a href=\"#Tomcat\" class=\"headerlink\" title=\"Tomcat\"></a>Tomcat</h4><p>Tomcat：是 Java 开发的一个符合 JavaEE 的 Servlet 规范的 JSP 服务器（Servlet 容器），是 Apache 的扩展。</p>\n<p>特性：免费的 Java 应用服务器。</p>\n<ol>\n<li>主要用于解析 JSP/Servlet，侧重于 Servlet 引擎；</li>\n<li>支持静态页，但效率没有 Apache 高；支持 Servlet、JSP 请求；</li>\n<li>Tomcat 本身也内置了一个 HTTP 服务器用于支持静态内容，可以通过 Tomcat 的配置管理工具实现与 Apache 整合。</li>\n</ol>\n<h4 id=\"Apache-Tomcat\"><a href=\"#Apache-Tomcat\" class=\"headerlink\" title=\"Apache + Tomcat\"></a>Apache + Tomcat</h4><p>Apache + Tomcat 两者整合后优点：<br>如果请求是静态网页则由 Apache 处理，并将结果返回；如果是动态请求，Apache 会将解析工作转发给 Tomcat 处理，Tomcat 处理后将结果通过 Apache 返回。这样可以达到分工合作，实现负载远衡，提高系统的性能。</p>\n<h3 id=\"下载Apache服务器\"><a href=\"#下载Apache服务器\" class=\"headerlink\" title=\"下载Apache服务器\"></a>下载 Apache 服务器</h3><p>Apache HTTP Servcer 下载地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9odHRwZC5hcGFjaGUub3JnLw==\">https://httpd.apache.org/<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>Windows 版本下载：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9odHRwZC5hcGFjaGUub3JnL2RvY3MvY3VycmVudC9wbGF0Zm9ybS93aW5kb3dzLmh0bWwjZG93bg==\">https://httpd.apache.org/docs/current/platform/windows.html#down<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h3 id=\"配置Apache服务器\"><a href=\"#配置Apache服务器\" class=\"headerlink\" title=\"配置Apache服务器\"></a>配置 Apache 服务器</h3><p>打开 Apache24\\conf 目录下的 httpd.conf，修改配置信息。</p>\n<h4 id=\"修改-ServerRoot-路径\"><a href=\"#修改-ServerRoot-路径\" class=\"headerlink\" title=\"修改 ServerRoot 路径\"></a>修改 ServerRoot 路径</h4><pre class=\"language-conf\" data-language=\"conf\"><code class=\"language-conf\">Define SRVROOT \"E:\\software\\php\\Apache24\"\nServerRoot \"${SRVROOT}\"</code></pre>\n\n<p>如果不修改会出现如下错误：</p>\n<blockquote>\n<p>httpd.exe: Syntax error on line 39 of E:/software/php/Apache24/conf/httpd.conf: ServerRoot must be a valid directory</p>\n</blockquote>\n<h4 id=\"修改端口号\"><a href=\"#修改端口号\" class=\"headerlink\" title=\"修改端口号\"></a>修改端口号</h4><p>默认的是 80 端口，但是多数情况下，80 端口被占用，所以需要修改 80 端口。如果确定 80 端口未被占用则可以不修改。</p>\n<pre class=\"language-conf\" data-language=\"conf\"><code class=\"language-conf\">Listen 80\nServerName localhost:80</code></pre>\n\n<p>如果不修改可能会提示错误：</p>\n<blockquote>\n<p>(OS 10048) 通常每个套接字地址 (协议 / 网络地址 / 端口) 只允许使用一次。: AH00072: make_sock: could not bind to address [::]:8081</p>\n<p>(OS 10048) 通常每个套接字地址 (协议 / 网络地址 / 端口) 只允许使用一次。 : AH00072: make_sock: could not bind to address 0.0.0.0:8081<br>AH00451: no listening sockets available, shutting down<br>AH00015: Unable to open logs</p>\n</blockquote>\n<h4 id=\"443-端口被占用\"><a href=\"#443-端口被占用\" class=\"headerlink\" title=\"443 端口被占用\"></a>443 端口被占用</h4><p>如果 443 端口被占用，会有如下报错信息：</p>\n<blockquote>\n<p>(OS 10048) 通常每个套接字地址 (协议 / 网络地址 / 端口) 只允许使用一次。  : AH00072: make_sock: could not bind to address [::]:443</p>\n<p>(OS 10048) 通常每个套接字地址 (协议 / 网络地址 / 端口) 只允许使用一次。  : AH00072: make_sock: could not bind to address 0.0.0.0:443 AH00451: no listening sockets available, shutting down</p>\n</blockquote>\n<p>解决 443 端口被占用的问题：</p>\n<p>在 httpd.conf 中，找到加载 ssl_module 的那一行，加 #号注释掉就好了：</p>\n<pre class=\"language-conf\" data-language=\"conf\"><code class=\"language-conf\"># LoadModule ssl_module modules/mod_ssl.so</code></pre>\n\n<h3 id=\"安装Apache服务器\"><a href=\"#安装Apache服务器\" class=\"headerlink\" title=\"安装Apache服务器\"></a>安装 Apache 服务器</h3><h4 id=\"常见的dos操作命令\"><a href=\"#常见的dos操作命令\" class=\"headerlink\" title=\"常见的dos操作命令\"></a>常见的 dos 操作命令</h4><ol>\n<li>把 apache24 安装成系统服务：httpd -k install</li>\n<li> 启动服务 apcache24 服务 ：httpd -k star</li>\n<li> 停止服务 apcache24 服务 ：httpd -k stop</li>\n<li> 重启服务 apcache24 服务 ：httpd -k restart</li>\n<li> 卸载 apcache24 服务 ：httpd -k uninstall</li>\n<li> 测试 apache24 配置语法 ：httpd -t</li>\n<li> 版本信息 ：httpd -V</li>\n<li> 查看 cmd 命令：httpd -h</li>\n</ol>\n<h4 id=\"安装成系统服务\"><a href=\"#安装成系统服务\" class=\"headerlink\" title=\"安装成系统服务\"></a>安装成系统服务</h4><p>以管理员身份运行：<code>.\\httpd.exe  -k install</code></p>\n<p><img src=\"/images/2020/10/1602828782266.png\" alt=\"1602828782266\" loading=\"lazy\"></p>\n<h3 id=\"启动Apache服务器\"><a href=\"#启动Apache服务器\" class=\"headerlink\" title=\"启动Apache服务器\"></a>启动 Apache 服务器</h3><h4 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h4><p>双击 <code>Apache24\\bin\\httpd.exe</code> 即可启动 Apache 服务器。</p>\n<h4 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h4><p>打开系统服务窗口，找到 Apache2.4，选择启动或停止。</p>\n<p><img src=\"/images/2020/10/1602828954797.png\" alt=\"1602828954797\" loading=\"lazy\"></p>\n<h4 id=\"方法三\"><a href=\"#方法三\" class=\"headerlink\" title=\"方法三\"></a>方法三</h4><p>打开 Apache24\\bin 找到 ApacheMonitor.exe 双击打开 Apache24 启停管理器。</p>\n<p><img src=\"/images/2020/10/1602829021497.png\" alt=\"1602829021497\" loading=\"lazy\"></p>\n<h4 id=\"访问页面\"><a href=\"#访问页面\" class=\"headerlink\" title=\"访问页面\"></a>访问页面</h4><p>然后打开浏览器在地址栏输入 <span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdC8=\">http://localhost:80/<i class=\"fa fa-external-link-alt\"></i></span> 就可以访问页面，页面如下：</p>\n<p><img src=\"/images/2020/10/1602828320892.png\" alt=\"1602828320892\" loading=\"lazy\"></p>\n","categories":["Apache","软件","Windows"],"tags":["Apache","软件"]},{"title":"PHP 之通过 PDO 操作 MySQL 数据库","url":"/2020/10/2020-10-18-PHP%E4%B9%8B%E9%80%9A%E8%BF%87PDO%E6%93%8D%E4%BD%9CMySQL%E6%95%B0%E6%8D%AE%E5%BA%93/","content":"<h3 id=\"PDO介绍\"><a href=\"#PDO介绍\" class=\"headerlink\" title=\"PDO介绍\"></a>PDO 介绍</h3><p><strong>PDO (PHP Data Objects)</strong> 提供了 PHP 操作多种数据库的统一的接口。</p>\n<h4 id=\"PDO特点\"><a href=\"#PDO特点\" class=\"headerlink\" title=\"PDO特点\"></a>PDO 特点</h4><ul>\n<li><p><strong>编码的一致性</strong></p>\n<p>由于 PHP 可用的各种数据库扩展是由不同发行者编写的，所以尽管所有的扩展都提供了基本相同的特性，却不 满 足编码的一致性。PDO 消除了这种不一致，提供了可用于各种数据库的单一接口；</p>\n</li>\n<li><p><strong>灵活性</strong></p>\n</li>\n</ul>\n<p>  因为 PDO 在运行时加载必须的数据库驱动程序，所以不需要在每次使用不同数据库时重新配置和重新编译 PHP。例如，如果数据库需要从 SQL 切换到 MySQL，只需要加载 PDO_MYSQL 驱动程序就可以了。</p>\n<ul>\n<li><strong>面向对象特性</strong></li>\n</ul>\n<p>  PDO 利用 PHP5 的面向对象特性，可以获得更强大、更高效的数据库通信。</p>\n<ul>\n<li><strong>高性能</strong></li>\n</ul>\n<p>  PDO 是用 C 编写的，编译为 PHP，与用 PHP 编写的其他解决方案相比，虽然其他都相同，但提供了更高的性能。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"PDO安装\"><a href=\"#PDO安装\" class=\"headerlink\" title=\"PDO安装\"></a>PDO 安装</h3><p>For 安装详细信息，请查看： <span class=\"exturl\" data-url=\"aHR0cDovL3BocC5uZXQvbWFudWFsL2VuL3Bkby5pbnN0YWxsYXRpb24ucGhw\">http://php.net/manual/en/pdo.installation.php<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>可以通过 phpinfo () 查看是否安装成功：</p>\n<p><img src=\"/images/2020/10/1603077433392.png\" alt=\"1603077433392\" loading=\"lazy\"></p>\n<h3 id=\"连接-MySQL\"><a href=\"#连接-MySQL\" class=\"headerlink\" title=\"连接 MySQL\"></a>连接 MySQL</h3><pre class=\"language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token variable\">$servername</span> <span class=\"token operator\">=</span> <span class=\"token double-quoted-string string\">\"localhost\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$username</span> <span class=\"token operator\">=</span> <span class=\"token double-quoted-string string\">\"username\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$password</span> <span class=\"token operator\">=</span> <span class=\"token double-quoted-string string\">\"password\"</span><span class=\"token punctuation\">;</span>\n \n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$conn</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PDO</span><span class=\"token punctuation\">(</span><span class=\"token double-quoted-string string\">\"mysql:host=<span class=\"token interpolation\"><span class=\"token variable\">$servername</span></span>;\"</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$username</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$password</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">echo</span> <span class=\"token double-quoted-string string\">\"连接成功\"</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>PDOException <span class=\"token variable\">$e</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">echo</span> <span class=\"token variable\">$e</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token delimiter important\">?&gt;</span></span></code></pre>\n\n<h3 id=\"关闭连接\"><a href=\"#关闭连接\" class=\"headerlink\" title=\"关闭连接\"></a>关闭连接</h3><p>连接在脚本执行完后会自动关闭。你也可以使用以下代码来关闭连接：</p>\n<pre class=\"language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token variable\">$conn</span> <span class=\"token operator\">=</span> <span class=\"token constant\">null</span><span class=\"token punctuation\">;</span></code></pre>\n\n<h3 id=\"创建数据库\"><a href=\"#创建数据库\" class=\"headerlink\" title=\"创建数据库\"></a>创建数据库</h3><pre class=\"language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token variable\">$servername</span> <span class=\"token operator\">=</span> <span class=\"token double-quoted-string string\">\"localhost\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$username</span> <span class=\"token operator\">=</span> <span class=\"token double-quoted-string string\">\"username\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$password</span> <span class=\"token operator\">=</span> <span class=\"token double-quoted-string string\">\"password\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$conn</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PDO</span><span class=\"token punctuation\">(</span><span class=\"token double-quoted-string string\">\"mysql:host=<span class=\"token interpolation\"><span class=\"token variable\">$servername</span></span>\"</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$username</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$password</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 设置 PDO 错误模式为异常</span>\n    <span class=\"token variable\">$conn</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token constant\">PDO</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">ATTR_ERRMODE</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">PDO</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">ERRMODE_EXCEPTION</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$sql</span> <span class=\"token operator\">=</span> <span class=\"token double-quoted-string string\">\"CREATE DATABASE myDBPDO\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 使用 exec() ，因为没有结果返回</span>\n    <span class=\"token variable\">$conn</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$sql</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">echo</span> <span class=\"token double-quoted-string string\">\"数据库创建成功&lt;br&gt;\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>PDOException <span class=\"token variable\">$e</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">echo</span> <span class=\"token variable\">$sql</span> <span class=\"token punctuation\">.</span> <span class=\"token double-quoted-string string\">\"&lt;br&gt;\"</span> <span class=\"token punctuation\">.</span> <span class=\"token variable\">$e</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token variable\">$conn</span> <span class=\"token operator\">=</span> <span class=\"token constant\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token delimiter important\">?&gt;</span></span></code></pre>\n\n<h3 id=\"创建-MySQL-表\"><a href=\"#创建-MySQL-表\" class=\"headerlink\" title=\"创建 MySQL 表\"></a>创建 MySQL 表</h3><pre class=\"language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token variable\">$servername</span> <span class=\"token operator\">=</span> <span class=\"token double-quoted-string string\">\"localhost\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$username</span> <span class=\"token operator\">=</span> <span class=\"token double-quoted-string string\">\"username\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$password</span> <span class=\"token operator\">=</span> <span class=\"token double-quoted-string string\">\"password\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$dbname</span> <span class=\"token operator\">=</span> <span class=\"token double-quoted-string string\">\"myDBPDO\"</span><span class=\"token punctuation\">;</span>\n \n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$conn</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PDO</span><span class=\"token punctuation\">(</span><span class=\"token double-quoted-string string\">\"mysql:host=<span class=\"token interpolation\"><span class=\"token variable\">$servername</span></span>;dbname=<span class=\"token interpolation\"><span class=\"token variable\">$dbname</span></span>\"</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$username</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$password</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 设置 PDO 错误模式，用于抛出异常</span>\n    <span class=\"token variable\">$conn</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token constant\">PDO</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">ATTR_ERRMODE</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">PDO</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">ERRMODE_EXCEPTION</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n    <span class=\"token comment\">// 使用 sql 创建数据表</span>\n    <span class=\"token variable\">$sql</span> <span class=\"token operator\">=</span> <span class=\"token double-quoted-string string\">\"CREATE TABLE MyGuests (\n    id INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY, \n    firstname VARCHAR(30) NOT NULL,\n    lastname VARCHAR(30) NOT NULL,\n    email VARCHAR(50),\n    reg_date TIMESTAMP\n    )\"</span><span class=\"token punctuation\">;</span>\n \n    <span class=\"token comment\">// 使用 exec() ，没有结果返回 </span>\n    <span class=\"token variable\">$conn</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$sql</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">echo</span> <span class=\"token double-quoted-string string\">\"数据表 MyGuests 创建成功\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>PDOException <span class=\"token variable\">$e</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">echo</span> <span class=\"token variable\">$sql</span> <span class=\"token punctuation\">.</span> <span class=\"token double-quoted-string string\">\"&lt;br&gt;\"</span> <span class=\"token punctuation\">.</span> <span class=\"token variable\">$e</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n \n<span class=\"token variable\">$conn</span> <span class=\"token operator\">=</span> <span class=\"token constant\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token delimiter important\">?&gt;</span></span></code></pre>\n\n<h3 id=\"插入数据\"><a href=\"#插入数据\" class=\"headerlink\" title=\"插入数据\"></a>插入数据</h3><pre class=\"language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token variable\">$servername</span> <span class=\"token operator\">=</span> <span class=\"token double-quoted-string string\">\"localhost\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$username</span> <span class=\"token operator\">=</span> <span class=\"token double-quoted-string string\">\"username\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$password</span> <span class=\"token operator\">=</span> <span class=\"token double-quoted-string string\">\"password\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$dbname</span> <span class=\"token operator\">=</span> <span class=\"token double-quoted-string string\">\"myDBPDO\"</span><span class=\"token punctuation\">;</span>\n \n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$conn</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PDO</span><span class=\"token punctuation\">(</span><span class=\"token double-quoted-string string\">\"mysql:host=<span class=\"token interpolation\"><span class=\"token variable\">$servername</span></span>;dbname=<span class=\"token interpolation\"><span class=\"token variable\">$dbname</span></span>\"</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$username</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$password</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 设置 PDO 错误模式，用于抛出异常</span>\n    <span class=\"token variable\">$conn</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token constant\">PDO</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">ATTR_ERRMODE</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">PDO</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">ERRMODE_EXCEPTION</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$sql</span> <span class=\"token operator\">=</span> <span class=\"token double-quoted-string string\">\"INSERT INTO MyGuests (firstname, lastname, email)\n    VALUES ('John', 'Doe', 'john@example.com')\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 使用 exec() ，没有结果返回 </span>\n    <span class=\"token variable\">$conn</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$sql</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">echo</span> <span class=\"token double-quoted-string string\">\"新记录插入成功\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>PDOException <span class=\"token variable\">$e</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">echo</span> <span class=\"token variable\">$sql</span> <span class=\"token punctuation\">.</span> <span class=\"token double-quoted-string string\">\"&lt;br&gt;\"</span> <span class=\"token punctuation\">.</span> <span class=\"token variable\">$e</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n \n<span class=\"token variable\">$conn</span> <span class=\"token operator\">=</span> <span class=\"token constant\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token delimiter important\">?&gt;</span></span></code></pre>\n\n<h3 id=\"插入多条数据\"><a href=\"#插入多条数据\" class=\"headerlink\" title=\"插入多条数据\"></a>插入多条数据</h3><pre class=\"language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token variable\">$servername</span> <span class=\"token operator\">=</span> <span class=\"token double-quoted-string string\">\"localhost\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$username</span> <span class=\"token operator\">=</span> <span class=\"token double-quoted-string string\">\"username\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$password</span> <span class=\"token operator\">=</span> <span class=\"token double-quoted-string string\">\"password\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$dbname</span> <span class=\"token operator\">=</span> <span class=\"token double-quoted-string string\">\"myDBPDO\"</span><span class=\"token punctuation\">;</span>\n \n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$conn</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PDO</span><span class=\"token punctuation\">(</span><span class=\"token double-quoted-string string\">\"mysql:host=<span class=\"token interpolation\"><span class=\"token variable\">$servername</span></span>;dbname=<span class=\"token interpolation\"><span class=\"token variable\">$dbname</span></span>\"</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$username</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$password</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// set the PDO error mode to exception</span>\n    <span class=\"token variable\">$conn</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token constant\">PDO</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">ATTR_ERRMODE</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">PDO</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">ERRMODE_EXCEPTION</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n    <span class=\"token comment\">// 开始事务</span>\n    <span class=\"token variable\">$conn</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">beginTransaction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// SQL 语句</span>\n    <span class=\"token variable\">$conn</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token double-quoted-string string\">\"INSERT INTO MyGuests (firstname, lastname, email) \n    VALUES ('John', 'Doe', 'john@example.com')\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$conn</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token double-quoted-string string\">\"INSERT INTO MyGuests (firstname, lastname, email) \n    VALUES ('Mary', 'Moe', 'mary@example.com')\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$conn</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token double-quoted-string string\">\"INSERT INTO MyGuests (firstname, lastname, email) \n    VALUES ('Julie', 'Dooley', 'julie@example.com')\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n    <span class=\"token comment\">// 提交事务</span>\n    <span class=\"token variable\">$conn</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">echo</span> <span class=\"token double-quoted-string string\">\"新记录插入成功\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>PDOException <span class=\"token variable\">$e</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 如果执行失败回滚</span>\n    <span class=\"token variable\">$conn</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">rollback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">echo</span> <span class=\"token variable\">$sql</span> <span class=\"token punctuation\">.</span> <span class=\"token double-quoted-string string\">\"&lt;br&gt;\"</span> <span class=\"token punctuation\">.</span> <span class=\"token variable\">$e</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n \n<span class=\"token variable\">$conn</span> <span class=\"token operator\">=</span> <span class=\"token constant\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token delimiter important\">?&gt;</span></span></code></pre>\n\n<h3 id=\"使用预处理语句\"><a href=\"#使用预处理语句\" class=\"headerlink\" title=\"使用预处理语句\"></a>使用预处理语句</h3><pre class=\"language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token variable\">$servername</span> <span class=\"token operator\">=</span> <span class=\"token double-quoted-string string\">\"localhost\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$username</span> <span class=\"token operator\">=</span> <span class=\"token double-quoted-string string\">\"username\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$password</span> <span class=\"token operator\">=</span> <span class=\"token double-quoted-string string\">\"password\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$dbname</span> <span class=\"token operator\">=</span> <span class=\"token double-quoted-string string\">\"myDBPDO\"</span><span class=\"token punctuation\">;</span>\n \n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$conn</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PDO</span><span class=\"token punctuation\">(</span><span class=\"token double-quoted-string string\">\"mysql:host=<span class=\"token interpolation\"><span class=\"token variable\">$servername</span></span>;dbname=<span class=\"token interpolation\"><span class=\"token variable\">$dbname</span></span>\"</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$username</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$password</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 设置 PDO 错误模式为异常</span>\n    <span class=\"token variable\">$conn</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token constant\">PDO</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">ATTR_ERRMODE</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">PDO</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">ERRMODE_EXCEPTION</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n    <span class=\"token comment\">// 预处理 SQL 并绑定参数</span>\n    <span class=\"token variable\">$stmt</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$conn</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">prepare</span><span class=\"token punctuation\">(</span><span class=\"token double-quoted-string string\">\"INSERT INTO MyGuests (firstname, lastname, email) \n    VALUES (:firstname, :lastname, :email)\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$stmt</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">bindParam</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">':firstname'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$firstname</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$stmt</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">bindParam</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">':lastname'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$lastname</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$stmt</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">bindParam</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">':email'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$email</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n    <span class=\"token comment\">// 插入行</span>\n    <span class=\"token variable\">$firstname</span> <span class=\"token operator\">=</span> <span class=\"token double-quoted-string string\">\"John\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$lastname</span> <span class=\"token operator\">=</span> <span class=\"token double-quoted-string string\">\"Doe\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$email</span> <span class=\"token operator\">=</span> <span class=\"token double-quoted-string string\">\"john@example.com\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$stmt</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n    <span class=\"token comment\">// 插入其他行</span>\n    <span class=\"token variable\">$firstname</span> <span class=\"token operator\">=</span> <span class=\"token double-quoted-string string\">\"Mary\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$lastname</span> <span class=\"token operator\">=</span> <span class=\"token double-quoted-string string\">\"Moe\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$email</span> <span class=\"token operator\">=</span> <span class=\"token double-quoted-string string\">\"mary@example.com\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$stmt</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n    <span class=\"token comment\">// 插入其他行</span>\n    <span class=\"token variable\">$firstname</span> <span class=\"token operator\">=</span> <span class=\"token double-quoted-string string\">\"Julie\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$lastname</span> <span class=\"token operator\">=</span> <span class=\"token double-quoted-string string\">\"Dooley\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$email</span> <span class=\"token operator\">=</span> <span class=\"token double-quoted-string string\">\"julie@example.com\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$stmt</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n    <span class=\"token keyword\">echo</span> <span class=\"token double-quoted-string string\">\"新记录插入成功\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>PDOException <span class=\"token variable\">$e</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">echo</span> <span class=\"token double-quoted-string string\">\"Error: \"</span> <span class=\"token punctuation\">.</span> <span class=\"token variable\">$e</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token variable\">$conn</span> <span class=\"token operator\">=</span> <span class=\"token constant\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token delimiter important\">?&gt;</span></span></code></pre>\n\n<h3 id=\"查询读取数据\"><a href=\"#查询读取数据\" class=\"headerlink\" title=\"查询读取数据\"></a>查询读取数据</h3><pre class=\"language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token keyword\">echo</span> <span class=\"token double-quoted-string string\">\"&lt;table style='border: solid 1px black;'&gt;\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">echo</span> <span class=\"token double-quoted-string string\">\"&lt;tr&gt;&lt;th&gt;Id&lt;/th&gt;&lt;th&gt;Firstname&lt;/th&gt;&lt;th&gt;Lastname&lt;/th&gt;&lt;/tr&gt;\"</span><span class=\"token punctuation\">;</span>\n \n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TableRows</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">RecursiveIteratorIterator</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$it</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n        <span class=\"token keyword\">parent</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$it</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">LEAVES_ONLY</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">}</span>\n \n    <span class=\"token keyword\">function</span> <span class=\"token function\">current</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token double-quoted-string string\">\"&lt;td style='width:150px;border:1px solid black;'&gt;\"</span> <span class=\"token punctuation\">.</span> <span class=\"token keyword\">parent</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">current</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span> <span class=\"token double-quoted-string string\">\"&lt;/td&gt;\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n \n    <span class=\"token keyword\">function</span> <span class=\"token function\">beginChildren</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n        <span class=\"token keyword\">echo</span> <span class=\"token double-quoted-string string\">\"&lt;tr&gt;\"</span><span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">}</span> \n \n    <span class=\"token keyword\">function</span> <span class=\"token function\">endChildren</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n        <span class=\"token keyword\">echo</span> <span class=\"token double-quoted-string string\">\"&lt;/tr&gt;\"</span> <span class=\"token punctuation\">.</span> <span class=\"token double-quoted-string string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> \n<span class=\"token punctuation\">}</span> \n \n<span class=\"token variable\">$servername</span> <span class=\"token operator\">=</span> <span class=\"token double-quoted-string string\">\"localhost\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$username</span> <span class=\"token operator\">=</span> <span class=\"token double-quoted-string string\">\"username\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$password</span> <span class=\"token operator\">=</span> <span class=\"token double-quoted-string string\">\"password\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$dbname</span> <span class=\"token operator\">=</span> <span class=\"token double-quoted-string string\">\"myDBPDO\"</span><span class=\"token punctuation\">;</span>\n \n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$conn</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PDO</span><span class=\"token punctuation\">(</span><span class=\"token double-quoted-string string\">\"mysql:host=<span class=\"token interpolation\"><span class=\"token variable\">$servername</span></span>;dbname=<span class=\"token interpolation\"><span class=\"token variable\">$dbname</span></span>\"</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$username</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$password</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$conn</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token constant\">PDO</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">ATTR_ERRMODE</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">PDO</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">ERRMODE_EXCEPTION</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$stmt</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$conn</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">prepare</span><span class=\"token punctuation\">(</span><span class=\"token double-quoted-string string\">\"SELECT id, firstname, lastname FROM MyGuests\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token variable\">$stmt</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n    <span class=\"token comment\">// 设置结果集为关联数组</span>\n    <span class=\"token variable\">$result</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$stmt</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">setFetchMode</span><span class=\"token punctuation\">(</span><span class=\"token constant\">PDO</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">FETCH_ASSOC</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token keyword\">foreach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">TableRows</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">RecursiveArrayIterator</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$stmt</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">fetchAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$k</span><span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span><span class=\"token variable\">$v</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n        <span class=\"token keyword\">echo</span> <span class=\"token variable\">$v</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>PDOException <span class=\"token variable\">$e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">echo</span> <span class=\"token double-quoted-string string\">\"Error: \"</span> <span class=\"token punctuation\">.</span> <span class=\"token variable\">$e</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token variable\">$conn</span> <span class=\"token operator\">=</span> <span class=\"token constant\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">echo</span> <span class=\"token double-quoted-string string\">\"&lt;/table&gt;\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token delimiter important\">?&gt;</span></span></code></pre>\n\n<p>结果如下：</p>\n<p><img src=\"/images/2020/10/1603079266750.png\" alt=\"1603079266750\" loading=\"lazy\"></p>\n","categories":["Database","MySQL","PHP"],"tags":["MySQL","PHP"]},{"title":"Windows 录屏软件 Bandicam","url":"/2020/10/2020-10-21-Windows%E5%BD%95%E5%B1%8F%E8%BD%AF%E4%BB%B6Bandicam/","content":"<h3 id=\"软件介绍\"><a href=\"#软件介绍\" class=\"headerlink\" title=\"软件介绍\"></a>软件介绍</h3><p><strong>Bandicam</strong> 是一款非常给力的视频录制工具，它的优势在于录制视频对电脑配置要求低，且不会出现声音画面不同步的录制结果，录制后的视频视频质量清晰而且占用空间非常少，并且支持录制分辨率高达 2560×1600 高画质视频。提供多种视频录制模式，是游戏录制，屏幕录像教程，摄像头录制的好工具。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"软件下载\"><a href=\"#软件下载\" class=\"headerlink\" title=\"软件下载\"></a>软件下载</h3><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmFuZGljYW0uY24v\">https://www.bandicam.cn/<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h3 id=\"软件功能\"><a href=\"#软件功能\" class=\"headerlink\" title=\"软件功能\"></a>软件功能</h3><p><img src=\"/images/2020/10/image-20201021160918498.png\" alt=\"image-20201021160918498\" loading=\"lazy\"></p>\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><ol>\n<li>未注册的 Bandicam 只能录 10 分钟的视频。</li>\n<li>用未注册的 Bandicam 录出来的视频有水印。</li>\n</ol>\n<p><img src=\"/images/2020/10/image-20201021160946795.png\" alt=\"image-20201021160946795\" loading=\"lazy\"></p>\n","categories":["软件","Windows"],"tags":["软件","Windows"]},{"title":"PHP 之 Smarty 模板引擎使用汇总","url":"/2020/10/2020-10-20-PHP%E4%B9%8BSmarty%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E4%BD%BF%E7%94%A8%E6%B1%87%E6%80%BB/","content":"<h3 id=\"Smarty-介绍\"><a href=\"#Smarty-介绍\" class=\"headerlink\" title=\"Smarty 介绍\"></a>Smarty 介绍</h3><p>Smarty 是 PHP 的一个引擎模板，可以更好的进行逻辑与显示的分离，即我们常说的 MVC，这个引擎的作用就是将 C 分离出来。</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuc21hcnR5Lm5ldC8=\">官网<i class=\"fa fa-external-link-alt\"></i></span>：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuc21hcnR5Lm5ldC8=\">https://www.smarty.net/<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuc21hcnR5Lm5ldC9kb2NzL3poX0NOLw==\">中文手册<i class=\"fa fa-external-link-alt\"></i></span>：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuc21hcnR5Lm5ldC9kb2NzL3poX0NOLw==\">https://www.smarty.net/docs/zh_CN/<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3NtYXJ0eS1waHAvc21hcnR5Lw==\">GitHub<i class=\"fa fa-external-link-alt\"></i></span>：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3NtYXJ0eS1waHAvc21hcnR5Lw==\">https://github.com/smarty-php/smarty/<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3NtYXJ0eS1waHAvc21hcnR5L3JlbGVhc2Vz\">下载<i class=\"fa fa-external-link-alt\"></i></span>：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3NtYXJ0eS1waHAvc21hcnR5L3JlbGVhc2Vz\">https://github.com/smarty-php/smarty/releases<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<a id=\"more\"></a>\n\n<h3 id=\"Smarty-安装\"><a href=\"#Smarty-安装\" class=\"headerlink\" title=\"Smarty 安装\"></a>Smarty 安装</h3><p>在网上下载 Smarty 包直接将其解压，我们需要的仅仅是里面的 libs 文件夹。</p>\n<p>Libs 文件里面都是库文件，我们不应该修改里面的任何内容。</p>\n<p>解压完毕后就直接将 libs 文件夹放入到我们需要使用的网站根目录。</p>\n<p><img src=\"/images/2020/10/1603086382391.png\" alt=\"image-20201019173920839\" loading=\"lazy\"></p>\n<h3 id=\"Smarty-配置\"><a href=\"#Smarty-配置\" class=\"headerlink\" title=\"Smarty 配置\"></a>Smarty 配置</h3><p>首先打开 Smarty.class.php 文件看看里面的一些代码：</p>\n<pre class=\"language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token keyword\">protected</span> <span class=\"token variable\">$template_dir</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'./templates/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">protected</span> <span class=\"token variable\">$config_dir</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'./configs/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">protected</span> <span class=\"token variable\">$compile_dir</span> <span class=\"token operator\">=</span> <span class=\"token single-quoted-string string\">'./templates_c/'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">protected</span> <span class=\"token variable\">$cache_dir</span> <span class=\"token operator\">=</span> <span class=\"token single-quoted-string string\">'./cache/'</span><span class=\"token punctuation\">;</span></code></pre>\n\n<p>Smarty 的构造器：</p>\n<ul>\n<li>templates：默认存放模板文件夹</li>\n<li> templates_c：默认存放混编文件的文件夹</li>\n<li> cache：存放缓存</li>\n<li> configs：存放配置文件</li>\n</ul>\n<p>默认左右边界符：</p>\n<pre class=\"language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token keyword\">public</span> <span class=\"token variable\">$left_delimiter</span> <span class=\"token operator\">=</span> <span class=\"token double-quoted-string string\">\"{\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token variable\">$right_delimiter</span> <span class=\"token operator\">=</span> <span class=\"token double-quoted-string string\">\"}\"</span><span class=\"token punctuation\">;</span></code></pre>\n\n<h3 id=\"Smarty-简单使用\"><a href=\"#Smarty-简单使用\" class=\"headerlink\" title=\"Smarty 简单使用\"></a>Smarty 简单使用</h3><p>从上文了解到 Smarty 需要一些文件夹用来分别存放不同类别的文件。有 templates、templates_c、cache、configs 等文件夹。这是默认文件夹名称，你可以根据你的喜好对它们进行更改。</p>\n<p>下面是我建立的文件夹：</p>\n<p><img src=\"/images/2020/10/1603087940434.png\" alt=\"1603087940434\" loading=\"lazy\"></p>\n<p>简单实例：</p>\n<ol>\n<li><p>先在 templates 文件夹下准备自己需要的模板文件。test1.html</p>\n<pre class=\"language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>utf-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">&gt;</span></span>smarty test1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n我的名字叫{$name}\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n</li>\n<li><p>在根目录下建立访问的逻辑文件。test1.php</p>\n<pre class=\"language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token keyword\">require</span> <span class=\"token single-quoted-string string\">'./libs/Smarty.class.php'</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$smarty</span><span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Smarty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$name</span><span class=\"token operator\">=</span><span class=\"token single-quoted-string string\">'小决'</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$smarty</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span> <span class=\"token single-quoted-string string\">'name'</span> <span class=\"token punctuation\">,</span> <span class=\"token variable\">$name</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$smarty</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'./test1.html'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span></code></pre>\n</li>\n<li><p>访问 test1.php 结果为：</p>\n<p><img src=\"/images/2020/10/1603088135288.png\" alt=\"1603088135288\" loading=\"lazy\"></p>\n</li>\n<li><p>当访问完后将会在 templates_c 中生成一个相应的混编文件。</p>\n</li>\n</ol>\n<h3 id=\"Smarty-常用语法\"><a href=\"#Smarty-常用语法\" class=\"headerlink\" title=\"Smarty 常用语法\"></a>Smarty 常用语法</h3><h4 id=\"普通变量的声明与使用\"><a href=\"#普通变量的声明与使用\" class=\"headerlink\" title=\"普通变量的声明与使用\"></a>普通变量的声明与使用</h4><p>一共有两种声明变量的方法。</p>\n<ol>\n<li>即 $smarty-&gt;assign ('name',' 值 ');</li>\n<li> 第二种：在模板文件中声明（html 中），即 {assignvar='name'value=' 值 '}</li>\n</ol>\n<p>使用：{$name}</p>\n<p>注意：也可以定义与使用数组。假若上面定义的 name 为一个一维数组，使用时即：{$name [2]}、{$name ['aa']}={$name.aa} 等等使用方式。</p>\n<h4 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h4><pre class=\"language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token punctuation\">{</span><span class=\"token operator\">*</span>这里面是注释内容<span class=\"token operator\">*</span><span class=\"token punctuation\">}</span></code></pre>\n\n<p>Smarty 的注释是不会在最终页面输出显示的，即：若在 html 里则效果像 <code>&lt;!--注释--&gt;</code> 一样，不过也有一定的区别，Smarty 的注释在浏览器里查看源代码也是不显示的，而 html 的注释是显示的。</p>\n<p>代码：</p>\n<pre class=\"language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token comment\">&lt;!--HTML注释--&gt;</span>\n{* 这里面是注释内容 *}\n我的名字叫{$name}\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n\n<p>结果：</p>\n<p><img src=\"/images/2020/10/1603088825916.png\" alt=\"1603088825916\" loading=\"lazy\"></p>\n<h4 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h4><p>Smarty 对数组的使用：数组 [下标]、数组。下标</p>\n<h4 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a>对象</h4><p>对象的声明和变量一样，通过 assign 来声明使用采用 -&gt; 来调用对象的属性。</p>\n<ol>\n<li><p>test2.php</p>\n<pre class=\"language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token keyword\">require</span> <span class=\"token single-quoted-string string\">'./libs/Smarty.class.php'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token variable\">$name</span><span class=\"token operator\">=</span><span class=\"token double-quoted-string string\">\"小决\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token variable\">$sex</span><span class=\"token operator\">=</span><span class=\"token double-quoted-string string\">\"男\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token variable\">$age</span><span class=\"token operator\">=</span><span class=\"token single-quoted-string string\">'18'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token variable\">$smarty</span><span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Smarty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$test</span><span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$smarty</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span> <span class=\"token single-quoted-string string\">'test'</span> <span class=\"token punctuation\">,</span> <span class=\"token variable\">$test</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$smarty</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'./test2.html'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span></code></pre>\n</li>\n<li><p>test2.html</p>\n<pre class=\"language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>utf-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">&gt;</span></span>smarty test2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n名字：{$test-&gt;name}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>br</span><span class=\"token punctuation\">&gt;</span></span>\n性别：{$test-&gt;sex}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>br</span><span class=\"token punctuation\">&gt;</span></span>\n年龄：{$test-&gt;age}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>br</span><span class=\"token punctuation\">&gt;</span></span>\n{$smarty.now}\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>hr</span><span class=\"token punctuation\">/&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n</li>\n<li><p>结果：</p>\n<p><img src=\"/images/2020/10/1603089300156.png\" alt=\"1603089300156\" loading=\"lazy\"></p>\n</li>\n</ol>\n<h4 id=\"保留变量\"><a href=\"#保留变量\" class=\"headerlink\" title=\"保留变量\"></a>保留变量</h4><p>Smarty 中有一个特殊的变量（就是 smarty）可以通过这个变量很容易就可以访问到一些环境变量。就像 PHP 中的超全局变量一样神奇。</p>\n<p><strong>注意</strong>：在使用这个保留变量的时候：smarty 是对于大小写敏感的，我们需要的是小写的 smarty。</p>\n<p>例子：</p>\n<ol>\n<li><p>使用 smarty 访问 PHP 中的超全局数组变量：</p>\n<ul>\n<li>获取 <code>$_GET{$smarty.get.name}</code> 获取 get 中的 name 值</li>\n<li>获取 <code>$_POST{$smarty.post.name}</code> 获取 post 中的 name 值</li>\n<li>获取 <code>$_COOKIE{$smarty.cooke.name}</code> 获取 cookie 中的 name 值</li>\n</ul>\n<p>同理，还可以获取 <code>$_SERVER</code>,<code>$_ENV</code> 和 <code>$_SESSION</code> 等等。</p>\n<p>注意：虽然 Smarty 提供了较方便直接访问 PHP 超全局变量的方法，但必须谨慎使用。直接访问超全局变量会弄乱应用程序底层代码和模板语法。</p>\n<p>最佳的实践是从 PHP 将需要的变量对模板进行赋值再使用。</p>\n</li>\n<li><p>获取当前时间戳 <code>{$smarty.now}</code> 其原理就是调用了 <code>timr()</code> 函数</p>\n</li>\n<li><p>直接访问 PHP 常量 <code>{$smarty.const.常量名}</code>，即：<code>{$smarty.const.AGE}</code></p>\n<p>PHP 定义常量 smarty 直接调用常量结果</p>\n</li>\n<li><p>其他</p>\n<ul>\n<li>获取配置变量：{$smarty.config}</li>\n<li> 返回当前模板名称：{$smarty.template}</li>\n<li> 返回当前模板对象：{$smarty.template_object}</li>\n<li> 返回当前目录名称：{$smarty.current_dir}</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h4><p>在之前根据需求建立的 Configs 文件夹下，建立 Smarty.conf 配置文件（命名任意，木有明确规定），配置文件可以让设计者将全局的模板变量以文件的方式管理起来。</p>\n<p>首先我们先来定义一些配置变量来对它进行简单的了解：</p>\n<ol>\n<li><p>定义如下所示 的 <code>Smarty.conf</code> 文件：</p>\n<pre class=\"language-conf\" data-language=\"conf\"><code class=\"language-conf\">title='标题'\nbodyColor='#eee'</code></pre>\n</li>\n<li><p>引入配置文件：{config_loadfile='Smarty.conf'}</p>\n</li>\n<li><p>引用配置变量：、{$smarty.config. 配置变量}</p>\n<pre class=\"language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n{config_load  file='Smarty.conf'}\n配置变量1：{#title#}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>br</span><span class=\"token punctuation\">&gt;</span></span>\n配置变量2：{$smarty.config.bodyColor}\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n</li>\n<li><p>查看：</p>\n<p><img src=\"/images/2020/10/image-20201020095437334.png\" alt=\"image-20201020095437334\" loading=\"lazy\"></p>\n</li>\n</ol>\n<h4 id=\"段落变量\"><a href=\"#段落变量\" class=\"headerlink\" title=\"段落变量\"></a>段落变量</h4><p>在 Smarty 配置文件中大体分为两种变量，一种为全局变量，另一种为段落变量。</p>\n<ul>\n<li>全局全局变量故名思议就是就是每次载入这个配置文件的时候这些变量都会被加载</li>\n<li>段落变量则有选择的进行加载。</li>\n</ul>\n<p>段落变量的定义语法：[段落名字]</p>\n<p>段落名字：这里可以是任意字符但不包括 <code>[</code> 和 <code>]</code>。</p>\n<p>调用段落变量：在引入配置文件后面加上这段代码 <code>section='段落名字'</code>。</p>\n<pre class=\"language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token punctuation\">{</span>config_load file<span class=\"token operator\">=</span><span class=\"token single-quoted-string string\">'Smarty.conf'</span> section<span class=\"token operator\">=</span><span class=\"token single-quoted-string string\">'firstStyle'</span><span class=\"token punctuation\">}</span></code></pre>\n\n<p><strong>注意</strong>：section 只能使用一次，若有多个 section 引入多个段落变量则最后一个会覆盖前面的所有 section 引入的段落变量，即只有最后一个引入的段落变量有用其他作废。</p>\n<p>特别说明：</p>\n<ol>\n<li>若全局变量与被加载的段落变量有相同的变量名，则段落名的值将覆盖全局变量的值。</li>\n<li>若某个段落变量里含有相同的变量名，则最后一个的变量的值将会覆盖前面的值。</li>\n<li>在整个 smarty.conf 文件中，点（.）拥有相对较高的权限的。点的作用是将一个变量或者整个段落隐藏，不能被使用。（我的理解就是相当于被注释掉不能被使用）</li>\n</ol>\n<p>简单应用：</p>\n<ol>\n<li><p>配置文件：<code>test5.conf</code></p>\n<pre class=\"language-conf\" data-language=\"conf\"><code class=\"language-conf\">#段落变量\n#第一种颜色风格\n[firstStyle]\ncolor='#00f'\nwidth='300px'\nheight='300px'\ncontent='第一种风格'\n\n#第二种颜色风格\n[secondStyle]\ncolor='#0f0'\nwidth='500px'\nheight='500px'\ncontent='第二种风格'</code></pre>\n</li>\n<li><p>php 文件：<code>test5.php</code></p>\n<pre class=\"language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token keyword\">require</span> <span class=\"token single-quoted-string string\">'./libs/Smarty.class.php'</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$smarty</span><span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Smarty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$smarty</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'./test5.html'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span></code></pre>\n</li>\n<li><p>模板文件：<code>test5.html</code></p>\n<pre class=\"language-html\" data-language=\"html\"><code class=\"language-html\">{config_load file='Smarty.conf' section='firstStyle'}\n<span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>utf-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">&gt;</span></span>smarty test1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/css<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token style\"><span class=\"token language-css\">\n<span class=\"token selector\">#aa</span><span class=\"token punctuation\">{</span> <span class=\"token selector\">width:</span> <span class=\"token punctuation\">{</span>#width#<span class=\"token punctuation\">}</span><span class=\"token selector\">;height:</span> <span class=\"token punctuation\">{</span>#height#<span class=\"token punctuation\">}</span><span class=\"token selector\">;background:</span> <span class=\"token punctuation\">{</span>#color#<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>aa<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">&gt;</span></span>\n\n这是一个div<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">/&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">/&gt;</span></span>\n{#content#}\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n</li>\n<li><p>效果：</p>\n<p><img src=\"/images/2020/10/image-20201020102811027.png\" alt=\"image-20201020102811027\" loading=\"lazy\"></p>\n</li>\n<li><p>特别说明：</p>\n<p>若 <code>#aa{width: 200px;height: 200px;background: red;}</code>。</p>\n<p>则报错：</p>\n<blockquote>\n<p><strong>Fatal error</strong>: Uncaught --&gt; Smarty Compiler: Syntax error in template \"file:E:\\software\\php\\php-page\\Smarty\\templates\\test5.html\" on line 8 \"#aa{width: ;height: ;background: ;}\" - Unexpected \": \", expected one of: \"}\" &lt;-- thrown in <strong>E:\\software\\php\\php-page\\Smarty\\libs\\sysplugins\\smarty_internal_templatecompilerbase.php</strong> on line <strong>8</strong></p>\n</blockquote>\n<p>这是由于使用了 smarty 模板，所以在 html 的所有 {} 将会被 smarty 解析。</p>\n<p>解决办法：</p>\n<ol>\n<li><p>更换定界符</p>\n</li>\n<li><p>在 <code>{</code> 前面加一个空格：<code>#aa{ width: </code></p>\n</li>\n<li><p>使用 {literal}{/literal}  literal: 原样的，原义的</p>\n<pre class=\"language-html\" data-language=\"html\"><code class=\"language-html\">{literal}#aa{width{/literal}: {#width#};height: {#height#};background: {#color#};}</code></pre>\n\n<p><strong>{literal} 标签会影响变量的解析！</strong></p>\n</li>\n</ol>\n</li>\n</ol>\n<h4 id=\"模板布局\"><a href=\"#模板布局\" class=\"headerlink\" title=\"模板布局\"></a>模板布局</h4><p>即是模板的继承问题。使用的关键字主要有 block、extends</p>\n<ol>\n<li><p>先在站点建立一个 layout 文件夹（主要用来存放父模板文件），在文件夹下建立一个模板文件 template.html</p>\n<pre class=\"language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>utf-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">&gt;</span></span>这个是模板文件<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">&gt;</span></span>这个是模板文件输出的<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>hr</span><span class=\"token punctuation\">/&gt;</span></span>\n子输出一：{block name='first'}{/block}\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>hr</span><span class=\"token punctuation\">/&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>hr</span><span class=\"token punctuation\">/&gt;</span></span>\n子输出二：{block name='second'}{/block}\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>hr</span><span class=\"token punctuation\">/&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">&gt;</span></span>这个是模板文件输出的<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n</li>\n<li><p>再建立模板文件 test.html，此模板需要继承上面的父模板</p>\n<pre class=\"language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token punctuation\">{</span><span class=\"token keyword\">extends</span> <span class=\"token class-name\">file</span><span class=\"token operator\">=</span><span class=\"token single-quoted-string string\">'layout/template.html'</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span>block name<span class=\"token operator\">=</span><span class=\"token single-quoted-string string\">'first'</span><span class=\"token punctuation\">}</span>\n\t这里是test中的first\n<span class=\"token punctuation\">{</span><span class=\"token operator\">/</span>block<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span>block name<span class=\"token operator\">=</span><span class=\"token single-quoted-string string\">'second'</span><span class=\"token punctuation\">}</span>\n\t这里是test中的second\n<span class=\"token punctuation\">{</span><span class=\"token operator\">/</span>block<span class=\"token punctuation\">}</span></code></pre>\n</li>\n<li><p>php 逻辑文件调用 smarty</p>\n<pre class=\"language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token keyword\">require</span> <span class=\"token single-quoted-string string\">'./libs/Smarty.class.php'</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$smarty</span><span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Smarty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$smarty</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'./test6.html'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span></code></pre>\n</li>\n<li><p>访问结果</p>\n<p><img src=\"/images/2020/10/image-20201020103849371.png\" alt=\"image-20201020103849371\" loading=\"lazy\"></p>\n</li>\n</ol>\n<p>若含较多的公共部分，则采用布局文件；含公共部分较少，则采用包含文件 {include file=' 文件路径 '}</p>\n","categories":["PHP"],"tags":["PHP","Smarty"]},{"title":"Windows 系统下 PHP 环境搭建","url":"/2020/10/2020-10-16-Windows%E7%B3%BB%E7%BB%9F%E4%B8%8BPHP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/","content":"<h3 id=\"下载-PHP\"><a href=\"#下载-PHP\" class=\"headerlink\" title=\"下载 PHP\"></a>下载 PHP</h3><p>下载地址：<span class=\"exturl\" data-url=\"aHR0cDovL3BocC5uZXQvZG93bmxvYWRzLnBocA==\">http://php.net/downloads.php<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>Windows 下载：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93aW5kb3dzLnBocC5uZXQvZG93bmxvYWQv\">https://windows.php.net/download/<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>版本选择：</p>\n<ul>\n<li>如果是与 Apache 搭配，建议选择 Thread Safe 版本（有 php7apache2_4.dll）。</li>\n<li>如果是与 CGI 或者 FAST-CGI 搭配，建议选择 Non Thread Safe 版本。</li>\n</ul>\n<a id=\"more\"></a>\n\n<h3 id=\"安装Apache-服务器\"><a href=\"#安装Apache-服务器\" class=\"headerlink\" title=\"安装Apache 服务器\"></a>安装 Apache 服务器</h3><p>PHP 环境搭建的前提是 Apache HTTP Server （Apache 服务器）已经安装部署成功，并可以正常访问到服务器的主页面。</p>\n<p>Apache HTTP Server 的安装部署可以点击 “ <a href=\"https://jueee.github.io/2020/10/2020-10-15-Windows%E7%B3%BB%E7%BB%9F%E4%B8%8B%E5%AE%89%E8%A3%85Apache%E6%9C%8D%E5%8A%A1%E5%99%A8\">Windows 系统下安装 Apache 服务器</a>” 查看具体操作。</p>\n<h3 id=\"配置-PHP\"><a href=\"#配置-PHP\" class=\"headerlink\" title=\"配置 PHP\"></a>配置 PHP</h3><p>将 PHP 的根目录下的 php.ini-development 或者 php.ini-production 复制一份并改名为 php.ini，作为 PHP 的配置文件。</p>\n<h4 id=\"修改扩展文件的路径\"><a href=\"#修改扩展文件的路径\" class=\"headerlink\" title=\"修改扩展文件的路径\"></a>修改扩展文件的路径</h4><pre class=\"language-ini\" data-language=\"ini\"><code class=\"language-ini\"><span class=\"token comment\">; extension_dir = \"ext\" </span></code></pre>\n\n<p>取消注释，或者改为： </p>\n<pre class=\"language-ini\" data-language=\"ini\"><code class=\"language-ini\"><span class=\"token constant\">extension_dir</span> <span class=\"token attr-value\"><span class=\"token punctuation\">=</span> \"${phphome}\\ext\"</span></code></pre>\n\n<p>注意：如果是与 Apache 搭配，建议将扩展文件路径改为绝对路径，因为有可能加载不了。</p>\n<h4 id=\"设置默认的时区\"><a href=\"#设置默认的时区\" class=\"headerlink\" title=\"设置默认的时区\"></a>设置默认的时区</h4><pre class=\"language-ini\" data-language=\"ini\"><code class=\"language-ini\"><span class=\"token selector\">[Date]</span>\n<span class=\"token comment\">; https://www.php.net/manual/zh/timezones.php 选择时区列表网址</span>\n<span class=\"token constant\">date.timezone</span> <span class=\"token attr-value\"><span class=\"token punctuation\">=</span> Asia/Shanghai</span></code></pre>\n\n<h4 id=\"设置-ssl\"><a href=\"#设置-ssl\" class=\"headerlink\" title=\"设置 ssl\"></a>设置 ssl</h4><pre class=\"language-ini\" data-language=\"ini\"><code class=\"language-ini\"><span class=\"token selector\">[openssl]</span>\n<span class=\"token constant\">openssl.cafile</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span> cacert.pem</span></code></pre>\n\n<h3 id=\"修改-Apache服务器\"><a href=\"#修改-Apache服务器\" class=\"headerlink\" title=\"修改 Apache服务器\"></a>修改 Apache 服务器</h3><p>修改 Apache24\\conf\\ 目录下的 httpd.conf 配置 Apache ，让 Apache 和 PHP 协同工作。</p>\n<h4 id=\"DocumentRoot-设置\"><a href=\"#DocumentRoot-设置\" class=\"headerlink\" title=\"DocumentRoot 设置\"></a>DocumentRoot 设置</h4><p>修改前：默认的是 Apache24 下的 htdocs 目录：</p>\n<p><img src=\"/images/2020/10/1602831496444.png\" alt=\"1602831496444\" loading=\"lazy\"></p>\n<p>修改后：指定到自定义的路径，但是要记住这个路径。</p>\n<pre class=\"language-none\"><code class=\"language-none\">DocumentRoot \"E:/software/php/php-page\"\n&lt;Directory \"E:/software/php/php-page\"&gt;</code></pre>\n\n<h4 id=\"默认索引\"><a href=\"#默认索引\" class=\"headerlink\" title=\"默认索引\"></a>默认索引</h4><p>修改默认的索引，以支持 PHP 。</p>\n<p>修改前：</p>\n<pre class=\"language-conf\" data-language=\"conf\"><code class=\"language-conf\">&lt;IfModule dir_module&gt;\n    DirectoryIndex index.html\n&lt;/IfModule&gt;</code></pre>\n\n<p>修改后：</p>\n<pre class=\"language-conf\" data-language=\"conf\"><code class=\"language-conf\">&lt;IfModule dir_module&gt;\n    DirectoryIndex index.html  index.php index.htm\n&lt;/IfModule&gt;</code></pre>\n\n<h4 id=\"开启-rewrite-功能\"><a href=\"#开启-rewrite-功能\" class=\"headerlink\" title=\"开启 rewrite 功能\"></a>开启 rewrite 功能</h4><p>将下面这行代码前面的 # 去掉：</p>\n<pre class=\"language-conf\" data-language=\"conf\"><code class=\"language-conf\">LoadModule rewrite_module modules/mod_rewrite.so</code></pre>\n\n<h4 id=\"加载-PHP-模块\"><a href=\"#加载-PHP-模块\" class=\"headerlink\" title=\"加载 PHP 模块\"></a>加载 PHP 模块</h4><p>如果是 PHP 7，则相应的更改，示例如下（<strong>注意绝对路径</strong>）：</p>\n<pre class=\"language-none\"><code class=\"language-none\">#php7\nLoadModule php7_module E:/software/php/php-7.4.11/php7apache2_4.dll\n&lt;IfModule php7_module&gt; \n    PHPIniDir \"D:/soft/php-7.x.x/\" \n    AddType application/x-httpd-php .php\n    AddType application/x-httpd-php-source .phps\n&lt;/IfModule&gt;</code></pre>\n\n<h4 id=\"dll-复制\"><a href=\"#dll-复制\" class=\"headerlink\" title=\"dll 复制\"></a>dll 复制</h4><p>如果安装的 PHP x64 位版本，Apache 也需要是 x64 位版本的。</p>\n<p>然后还要将 php 目录下的 libeay32.dll、ssleay32.dll、libssh2.dll 以及 ext 目录下的 php_curl.dll 等四个文件，都复制放到 System32 目录下。否则 curl 扩展无法使用。</p>\n<p>参考链接：<span class=\"exturl\" data-url=\"aHR0cDovL215Lm9zY2hpbmEubmV0L2xzZm9wL2Jsb2cvNDk2MTgx\">http://my.oschina.net/lsfop/blog/496181<i class=\"fa fa-external-link-alt\"></i></span> 。</p>\n<h3 id=\"启动运行测试\"><a href=\"#启动运行测试\" class=\"headerlink\" title=\"启动运行测试\"></a>启动运行测试</h3><p>在 <code>E:\\software\\php\\php-page</code> 目录下，创建 index.php 文件，文本内容如下：</p>\n<pre class=\"language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token keyword\">echo</span> <span class=\"token function\">phpinfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token delimiter important\">?&gt;</span></span></code></pre>\n\n<p>打开浏览地址栏输入： localhost:80/index.php 或者 127.0.0.1:80/index.php , 就可以打开 PHP 页面。</p>\n<p><img src=\"/images/2020/10/1602831917955.png\" alt=\"1602831917955\" loading=\"lazy\"></p>\n","categories":["软件","Windows","PHP"],"tags":["软件","PHP"]},{"title":"启用 Windows10 下的 Linux 子系统","url":"/2020/10/2020-10-23-%E5%90%AF%E7%94%A8Windows10%E4%B8%8B%E7%9A%84Linux%E5%AD%90%E7%B3%BB%E7%BB%9F/","content":"<h3 id=\"WSL-介绍\"><a href=\"#WSL-介绍\" class=\"headerlink\" title=\"WSL 介绍\"></a>WSL 介绍</h3><p>Windows Subsystem for Linux（简称 WSL）是一个在 Windows 10 上能够运行原生 Linux 二进制可执行文件（ELF 格式）的兼容层。</p>\n<p>官网：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vemgtY24vd2luZG93cy93c2wv\">https://docs.microsoft.com/zh-cn/windows/wsl/<i class=\"fa fa-external-link-alt\"></i></span></p>\n<a id=\"more\"></a>\n\n<h3 id=\"启用-WSL\"><a href=\"#启用-WSL\" class=\"headerlink\" title=\"启用 WSL\"></a>启用 WSL</h3><p>需要先启用 “适用于 Linux 的 Windows 子系统” 可选功能，然后才能在 Windows 上安装 Linux 分发。</p>\n<p>以管理员身份打开 PowerShell 并运行：</p>\n<pre class=\"language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">dism<span class=\"token punctuation\">.</span>exe <span class=\"token operator\">/</span>online <span class=\"token operator\">/</span><span class=\"token function\">enable-feature</span> <span class=\"token operator\">/</span>featurename:Microsoft<span class=\"token operator\">-</span>Windows<span class=\"token operator\">-</span>Subsystem<span class=\"token operator\">-</span>Linux <span class=\"token operator\">/</span>all <span class=\"token operator\">/</span>norestart</code></pre>\n\n<p>如下图所示：</p>\n<p><img src=\"/images/2020/10/image-20201022164416572.png\" alt=\"image-20201022164416572\" loading=\"lazy\"></p>\n<p>然后，<strong>重新启动计算机</strong>。</p>\n<h3 id=\"安装-Linux\"><a href=\"#安装-Linux\" class=\"headerlink\" title=\"安装 Linux\"></a>安装 Linux</h3><p>打开 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ha2EubXMvd3Nsc3RvcmU=\">Microsoft Store<i class=\"fa fa-external-link-alt\"></i></span>，并选择你偏好的 Linux 分发版。</p>\n<p>单击以下链接会打开每个分发版的 Microsoft Store 页面：</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubWljcm9zb2Z0LmNvbS9zdG9yZS9hcHBzLzlwam4zODhocDhjOQ==\">Ubuntu 16.04 LTS<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubWljcm9zb2Z0LmNvbS9zdG9yZS9hcHBzLzlOOVROR1ZOREwzUQ==\">Ubuntu 18.04 LTS<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubWljcm9zb2Z0LmNvbS9zdG9yZS9hcHBzLzluNnN2d3Mzcng3MQ==\">Ubuntu 20.04 LTS<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubWljcm9zb2Z0LmNvbS9zdG9yZS9hcHBzLzlOSkZaSzAwRkdLVg==\">openSUSE Leap 15.1<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubWljcm9zb2Z0LmNvbS9zdG9yZS9hcHBzLzlNWjNEMVRSUDhUMQ==\">SUSE Linux Enterprise Server 12 SP5<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubWljcm9zb2Z0LmNvbS9zdG9yZS9hcHBzLzlQTjQ5OFZQTUYzWg==\">SUSE Linux Enterprise Server 15 SP1<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubWljcm9zb2Z0LmNvbS9zdG9yZS9hcHBzLzlQS1IzNFROQ1YwNw==\">Kali Linux<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubWljcm9zb2Z0LmNvbS9zdG9yZS9hcHBzLzlNU1ZLUUM3OFBLNg==\">Debian GNU/Linux<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubWljcm9zb2Z0LmNvbS9zdG9yZS9hcHBzLzluNmdkbTRrMmhuYw==\">Fedora Remix for WSL<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubWljcm9zb2Z0LmNvbS9zdG9yZS9hcHBzLzlOVjFHVjFQWFo2UA==\">Pengwin<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubWljcm9zb2Z0LmNvbS9zdG9yZS9hcHBzLzlOOExQMFg5M1ZDUA==\">Pengwin Enterprise<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubWljcm9zb2Z0LmNvbS9zdG9yZS9hcHBzLzlwODA0Y3JmMDM5NQ==\">Alpine WSL<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<p>在分发版的页面中，选择 “获取”。</p>\n<h3 id=\"设置新分发\"><a href=\"#设置新分发\" class=\"headerlink\" title=\"设置新分发\"></a>设置新分发</h3><p>首次启动新安装的 Linux 分发版时，将打开一个控制台窗口，系统会要求你等待一分钟或两分钟，以便文件解压缩并存储到电脑上。 </p>\n<p>未来的所有启动时间应不到一秒。</p>\n<p>然后，需要<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vemgtY24vd2luZG93cy93c2wvdXNlci1zdXBwb3J0\">为新的 Linux 分发版创建用户帐户和密码<i class=\"fa fa-external-link-alt\"></i></span>。</p>\n<p><img src=\"/images/2020/10/image-20201022171700195.png\" alt=\"image-20201022171700195\" loading=\"lazy\"></p>\n<ul>\n<li>此<strong>用户名</strong>和<strong>密码</strong>特定于安装的每个单独的 Linux 分发版，与 Windows 用户名无关。</li>\n<li>创建<strong>用户名</strong>和<strong>密码</strong>后，该帐户将是分发版的默认用户，并将在启动时自动登录。</li>\n<li>此帐户将被视为 Linux 管理员，能够运行 <code>sudo</code> (Super User Do) 管理命令。</li>\n<li>在适用于 Linux 的 Windows 子系统上运行的每个 Linux 分发版都有其自身的 Linux 用户帐户和密码。 每当添加分发版、重新安装或重置时，都必须配置一个 Linux 用户帐户。</li>\n</ul>\n<h3 id=\"查看版本信息\"><a href=\"#查看版本信息\" class=\"headerlink\" title=\"查看版本信息\"></a>查看版本信息</h3><p>Debian 查看版本当前操作系统发行版信息：</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">cat</span> /etc/os-release\n<span class=\"token assign-left variable\">PRETTY_NAME</span><span class=\"token operator\">=</span><span class=\"token string\">\"Debian GNU/Linux 10 (buster)\"</span>\n<span class=\"token assign-left variable\">NAME</span><span class=\"token operator\">=</span><span class=\"token string\">\"Debian GNU/Linux\"</span>\n<span class=\"token assign-left variable\">VERSION_ID</span><span class=\"token operator\">=</span><span class=\"token string\">\"10\"</span>\n<span class=\"token assign-left variable\">VERSION</span><span class=\"token operator\">=</span><span class=\"token string\">\"10 (buster)\"</span>\n<span class=\"token assign-left variable\">VERSION_CODENAME</span><span class=\"token operator\">=</span>buster\n<span class=\"token assign-left variable\">ID</span><span class=\"token operator\">=</span>debian\n<span class=\"token assign-left variable\">HOME_URL</span><span class=\"token operator\">=</span><span class=\"token string\">\"https://www.debian.org/\"</span>\n<span class=\"token assign-left variable\">SUPPORT_URL</span><span class=\"token operator\">=</span><span class=\"token string\">\"https://www.debian.org/support\"</span>\n<span class=\"token assign-left variable\">BUG_REPORT_URL</span><span class=\"token operator\">=</span><span class=\"token string\">\"https://bugs.debian.org/\"</span></code></pre>\n\n<p>Debian 查看当前操作系统版本信息</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">cat</span> /proc/version\nLinux version <span class=\"token number\">4.4</span>.0-19041-Microsoft <span class=\"token punctuation\">(</span>Microsoft@Microsoft.com<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>gcc version <span class=\"token number\">5.4</span>.0 <span class=\"token punctuation\">(</span>GCC<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token comment\">#1-Microsoft Fri Dec 06 14:06:00 PST 2019</span></code></pre>\n\n<p>Debian 查看版本当前操作系统内核信息</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">uname</span> -r\n<span class=\"token number\">4.4</span>.0-19041-Microsoft</code></pre>\n\n<h3 id=\"卸载-WSL\"><a href=\"#卸载-WSL\" class=\"headerlink\" title=\"卸载 WSL\"></a>卸载 WSL</h3><h4 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h4><p>在 powershell 中输入下面的代码</p>\n<pre class=\"language-none\"><code class=\"language-none\">wslconfig /l  #显示出你安装的列表。\nwslconfig /u debian #debian为上述列表中的名字   注销子系统</code></pre>\n\n<h4 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h4><p>打开开始菜单，右键卸载掉。</p>\n<p><img src=\"/images/2020/10/image-20201023142313438.png\" alt=\"image-20201023142313438\" loading=\"lazy\"></p>\n<h3 id=\"更新和升级包\"><a href=\"#更新和升级包\" class=\"headerlink\" title=\"更新和升级包\"></a>更新和升级包</h3><p>大多数分发版随附了一个空的的包目录或最简单的包目录。</p>\n<p>强烈建议定期更新包目录并使用分发版的首选包管理器升级已安装的包。 </p>\n<p>对于 Debian/Ubuntu，请使用 apt，修改 <code>/etc/apt/sources.list</code>：</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">deb http://mirrors.163.com/debian/ buster main contrib non-free\n<span class=\"token comment\"># deb-src http://mirrors.163.com/debian/ buster main contrib non-free</span>\ndeb http://mirrors.163.com/debian/ buster-updates main contrib non-free\n<span class=\"token comment\"># deb-src http://mirrors.163.com/debian/ buster-updates main contrib non-free</span>\ndeb http://mirrors.163.com/debian/ buster-backports main contrib non-free\n<span class=\"token comment\"># deb-src http://mirrors.163.com/debian/ buster-backports main contrib non-free</span>\ndeb http://mirrors.163.com/debian-security buster/updates main contrib non-free\n<span class=\"token comment\"># deb-src http://mirrors.163.com/debian-security buster/updates main contrib non-free</span></code></pre>\n\n<p>更新</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> update <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> upgrade</code></pre>\n\n<h3 id=\"开启-ssh-连接\"><a href=\"#开启-ssh-连接\" class=\"headerlink\" title=\"开启 ssh 连接\"></a>开启 ssh 连接</h3><ol>\n<li><p>卸载 ssh server</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> remove openssh-server</code></pre>\n</li>\n<li><p>安装 ssh server</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> openssh-server</code></pre>\n</li>\n<li><p>按需修改 ssh server 配置 </p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">vim</span> /etc/ssh/sshd_config</code></pre>\n\n<p>可能需要修改以下几项：</p>\n<pre class=\"language-none\"><code class=\"language-none\">Port 2222  #默认的是22，但是windows有自己的ssh服务，也是监听的22端口，所以这里要改一下\nUsePrivilegeSeparation no\nPasswordAuthentication yes\nAllowUsers youusername # 这里改成你登陆WSL用的</code></pre>\n</li>\n<li><p>启动 ssh server</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">service</span> <span class=\"token function\">ssh</span> --full-restart</code></pre>\n\n</li>\n</ol>\n<p>现在就可以用 xshell 等软件登陆 Debian on windows 了，IP 是 127.0.0.1。</p>\n<p>但是要注意，cmd 的窗口还不能关掉。关掉后 sshd 服务也会关掉，连接就断开了。</p>\n<h3 id=\"问题解决\"><a href=\"#问题解决\" class=\"headerlink\" title=\"问题解决\"></a>问题解决</h3><p>如果提示下面报错，很可能是进行设置后，没有重启电脑。</p>\n<p><img src=\"/images/2020/10/image-20201022170346394.png\" alt=\"image-20201022170346394\" loading=\"lazy\"></p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vemgtY24vd2luZG93cy93c2wvaW5zdGFsbC13aW4xMA==\">https://docs.microsoft.com/zh-cn/windows/wsl/install-win10<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n","categories":["Linux","软件","Windows"],"tags":["Linux","软件","Windows"]},{"title":"Neo4j 之 Cypher 相关 SQL 汇总","url":"/2020/10/2020-10-24-Neo4j%E4%B9%8BCypher%E7%9B%B8%E5%85%B3SQL%E6%B1%87%E6%80%BB/","content":"<h3 id=\"Cypher-语句\"><a href=\"#Cypher-语句\" class=\"headerlink\" title=\"Cypher 语句\"></a>Cypher 语句</h3><p>Cypher 是图形数据库 Neo4j 的声明式查询语言。</p>\n<p>Cypher 语句规则和具备的能力：</p>\n<ul>\n<li>Cypher 通过模式匹配图数据库中的节点和关系，来提取信息或者修改数据。</li>\n<li>Cypher 语句中允许使用变量，用来表示命名、绑定元素和参数。</li>\n<li>Cypher 语句可以对节点、关系、标签和属性进行创建、更新和删除操作。</li>\n<li>Cypher 语句可以管理索引和约束。</li>\n</ul>\n<a id=\"more\"></a>\n\n<h3 id=\"Cypher-汇总\"><a href=\"#Cypher-汇总\" class=\"headerlink\" title=\"Cypher 汇总\"></a>Cypher 汇总</h3><p>节点总数</p>\n<pre class=\"language-cypher\" data-language=\"cypher\"><code class=\"language-cypher\"><span class=\"token keyword\">match</span> <span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n<p>关系总数</p>\n<pre class=\"language-cypher\" data-language=\"cypher\"><code class=\"language-cypher\"><span class=\"token keyword\">match</span> p<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span><span class=\"token operator\">-&gt;</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n<h3 id=\"Cypher-查询\"><a href=\"#Cypher-查询\" class=\"headerlink\" title=\"Cypher 查询\"></a>Cypher 查询</h3><h4 id=\"随机查询\"><a href=\"#随机查询\" class=\"headerlink\" title=\"随机查询\"></a>随机查询</h4><pre class=\"language-cypher\" data-language=\"cypher\"><code class=\"language-cypher\"><span class=\"token keyword\">match</span> p<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">:</span><span class=\"token class-name\">MAIL</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span><span class=\"token operator\">-&gt;</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> p <span class=\"token keyword\">limit</span> <span class=\"token number\">20</span></code></pre>\n\n<h4 id=\"条件查询\"><a href=\"#条件查询\" class=\"headerlink\" title=\"条件查询\"></a>条件查询</h4><p>根据开始节点，筛选来往关系：</p>\n<pre class=\"language-cypher\" data-language=\"cypher\"><code class=\"language-cypher\"><span class=\"token keyword\">MATCH</span> p<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">:</span><span class=\"token class-name\">Mail</span><span class=\"token punctuation\">{</span>mail<span class=\"token operator\">:</span><span class=\"token string\">'test@163.com'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token punctuation\">[</span>send<span class=\"token operator\">:</span><span class=\"token relationship property\">Send</span><span class=\"token operator\">*</span><span class=\"token number\">1</span><span class=\"token operator\">..</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-&gt;</span><span class=\"token punctuation\">(</span>m<span class=\"token operator\">:</span><span class=\"token class-name\">Mail</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">RETURN</span> p<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">MATCH</span> p<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">:</span><span class=\"token class-name\">Mail</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token punctuation\">[</span>send<span class=\"token operator\">:</span><span class=\"token relationship property\">Send</span><span class=\"token operator\">*</span><span class=\"token number\">1</span><span class=\"token operator\">..</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-&gt;</span><span class=\"token punctuation\">(</span>m<span class=\"token operator\">:</span><span class=\"token class-name\">Mail</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">where</span> n<span class=\"token punctuation\">.</span>mail<span class=\"token operator\">=</span><span class=\"token string\">'test@126.com'</span> <span class=\"token keyword\">RETURN</span> p<span class=\"token punctuation\">;</span></code></pre>\n\n<h4 id=\"来往次数查询\"><a href=\"#来往次数查询\" class=\"headerlink\" title=\"来往次数查询\"></a>来往次数查询</h4><p>根据来往次数，筛选来往关系：</p>\n<pre class=\"language-cypher\" data-language=\"cypher\"><code class=\"language-cypher\"><span class=\"token keyword\">MATCH</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span><span class=\"token class-name\">MAIL</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token punctuation\">[</span>r<span class=\"token operator\">:</span><span class=\"token relationship property\">SEND</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-&gt;</span><span class=\"token punctuation\">(</span>b<span class=\"token operator\">:</span><span class=\"token class-name\">MAIL</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">WITH</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> <span class=\"token function\">TAIL</span> <span class=\"token punctuation\">(</span><span class=\"token function\">COLLECT</span> <span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> rr <span class=\"token keyword\">WHERE</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span>rr<span class=\"token punctuation\">)</span><span class=\"token operator\">&gt;</span><span class=\"token number\">3</span> <span class=\"token keyword\">RETURN</span> a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>rr<span class=\"token punctuation\">;</span></code></pre>\n\n<h4 id=\"多层级查询\"><a href=\"#多层级查询\" class=\"headerlink\" title=\"多层级查询\"></a>多层级查询</h4><p>根据条件，关联 3 级：</p>\n<pre class=\"language-cypher\" data-language=\"cypher\"><code class=\"language-cypher\"><span class=\"token keyword\">MATCH</span> p<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token class-name\">MAIL</span><span class=\"token punctuation\">{</span>mail<span class=\"token operator\">:</span><span class=\"token string\">'test@163.com'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token punctuation\">[</span>rels<span class=\"token operator\">*</span><span class=\"token number\">1</span><span class=\"token operator\">..</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> p <span class=\"token keyword\">limit</span> <span class=\"token number\">100</span></code></pre>\n\n<h4 id=\"来往关系\"><a href=\"#来往关系\" class=\"headerlink\" title=\"来往关系\"></a>来往关系</h4><pre class=\"language-cypher\" data-language=\"cypher\"><code class=\"language-cypher\"><span class=\"token keyword\">MATCH</span> <span class=\"token punctuation\">(</span>p1<span class=\"token operator\">:</span><span class=\"token class-name\">MAIL</span><span class=\"token punctuation\">{</span>mail<span class=\"token operator\">:</span><span class=\"token string\">'test1@163.com'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>p2<span class=\"token operator\">:</span><span class=\"token class-name\">MAIL</span><span class=\"token punctuation\">{</span>mail<span class=\"token operator\">:</span><span class=\"token string\">'test2@163.com'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      p<span class=\"token operator\">=</span><span class=\"token function\">shortestpath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token punctuation\">[</span>rels<span class=\"token operator\">*</span><span class=\"token operator\">..</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token punctuation\">(</span>p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  \n<span class=\"token keyword\">where</span> <span class=\"token keyword\">all</span><span class=\"token punctuation\">(</span>t <span class=\"token keyword\">IN</span> rels <span class=\"token keyword\">where</span> t<span class=\"token punctuation\">.</span>date<span class=\"token operator\">&gt;=</span><span class=\"token string\">'2020-10-17 00:00:00'</span> <span class=\"token keyword\">and</span> t<span class=\"token punctuation\">.</span>date <span class=\"token operator\">&lt;=</span><span class=\"token string\">'2020-10-17 23:59:59'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> p </code></pre>\n\n<h4 id=\"过滤路径\"><a href=\"#过滤路径\" class=\"headerlink\" title=\"过滤路径\"></a>过滤路径</h4><p>普通过滤：</p>\n<pre class=\"language-cypher\" data-language=\"cypher\"><code class=\"language-cypher\"><span class=\"token keyword\">match</span> p<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">:</span><span class=\"token class-name\">MAIL</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span><span class=\"token operator\">-&gt;</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span> \n<span class=\"token keyword\">where</span> t<span class=\"token punctuation\">.</span>date<span class=\"token operator\">&gt;=</span><span class=\"token string\">'2020-10-23 00:00:00'</span> <span class=\"token keyword\">and</span> t<span class=\"token punctuation\">.</span>date <span class=\"token operator\">&lt;=</span><span class=\"token string\">'2020-10-23 23:59:59'</span>\n<span class=\"token keyword\">return</span> p <span class=\"token keyword\">limit</span> <span class=\"token number\">20</span></code></pre>\n\n<p>根据条件，关联 3 级并过滤路径：</p>\n<pre class=\"language-cypher\" data-language=\"cypher\"><code class=\"language-cypher\"><span class=\"token keyword\">MATCH</span> p<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token class-name\">MAIL</span><span class=\"token punctuation\">{</span>mail<span class=\"token operator\">:</span><span class=\"token string\">'test@163.com'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token punctuation\">[</span>rels<span class=\"token operator\">*</span><span class=\"token number\">1</span><span class=\"token operator\">..</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> \n<span class=\"token keyword\">where</span> <span class=\"token keyword\">all</span><span class=\"token punctuation\">(</span>t <span class=\"token keyword\">IN</span> rels <span class=\"token keyword\">where</span> t<span class=\"token punctuation\">.</span>date<span class=\"token operator\">&gt;=</span><span class=\"token string\">'2020-10-23'</span> <span class=\"token keyword\">and</span> t<span class=\"token punctuation\">.</span>date <span class=\"token operator\">&lt;=</span><span class=\"token string\">'2020-10-24'</span><span class=\"token punctuation\">)</span> \n<span class=\"token keyword\">return</span> p <span class=\"token keyword\">limit</span> <span class=\"token number\">100</span></code></pre>\n\n<div class=\"note warning\"><p><strong>需采用 where all (t IN rels where ...) 的方式，否则会报错：</strong> </p>\n<p><code>Type mismatch: expected Any, Map, Node, Relationship, Point, Duration, Date, Time, LocalTime, LocalDateTime or DateTime but was List&lt;Relationship&gt;</code></p>\n</div>\n\n<h3 id=\"Cypher-增删\"><a href=\"#Cypher-增删\" class=\"headerlink\" title=\"Cypher 增删\"></a>Cypher 增删</h3><h4 id=\"添加-更新属性\"><a href=\"#添加-更新属性\" class=\"headerlink\" title=\"添加/更新属性\"></a>添加 / 更新属性</h4><p>重新设置所有节点属性：</p>\n<pre class=\"language-cypher\" data-language=\"cypher\"><code class=\"language-cypher\"><span class=\"token keyword\">MERGE</span> <span class=\"token punctuation\">(</span>n<span class=\"token operator\">:</span><span class=\"token class-name\">Node</span> <span class=\"token punctuation\">{</span>name<span class=\"token operator\">:</span> <span class=\"token string\">'John'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">SET</span> n <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>name<span class=\"token operator\">:</span> <span class=\"token string\">'John'</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> <span class=\"token number\">34</span><span class=\"token punctuation\">,</span> coat<span class=\"token operator\">:</span> <span class=\"token string\">'Yellow'</span><span class=\"token punctuation\">,</span> hair<span class=\"token operator\">:</span> <span class=\"token string\">'Brown'</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">RETURN</span> n</code></pre>\n\n<p>修改替换属性 <strong>age</strong> 和 <strong>coat</strong>：</p>\n<pre class=\"language-cypher\" data-language=\"cypher\"><code class=\"language-cypher\"><span class=\"token keyword\">MERGE</span> <span class=\"token punctuation\">(</span>n<span class=\"token operator\">:</span><span class=\"token class-name\">Node</span> <span class=\"token punctuation\">{</span>name<span class=\"token operator\">:</span> <span class=\"token string\">'John'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">SET</span> n<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">34</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">.</span>coat <span class=\"token operator\">=</span> <span class=\"token string\">'Yellow'</span>\n<span class=\"token keyword\">RETURN</span> n </code></pre>\n\n<p>只是增加属性：</p>\n<pre class=\"language-cypher\" data-language=\"cypher\"><code class=\"language-cypher\"><span class=\"token keyword\">MERGE</span> <span class=\"token punctuation\">(</span>n<span class=\"token operator\">:</span><span class=\"token class-name\">Node</span> <span class=\"token punctuation\">{</span>name<span class=\"token operator\">:</span> <span class=\"token string\">'John'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> \n<span class=\"token keyword\">SET</span> n <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>age<span class=\"token operator\">:</span> <span class=\"token number\">34</span><span class=\"token punctuation\">,</span> coat<span class=\"token operator\">:</span> <span class=\"token string\">'Yellow'</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">RETURN</span> n </code></pre>\n\n<h3 id=\"Cypher-删除\"><a href=\"#Cypher-删除\" class=\"headerlink\" title=\"Cypher 删除\"></a>Cypher 删除</h3><h4 id=\"删除所有\"><a href=\"#删除所有\" class=\"headerlink\" title=\"删除所有\"></a>删除所有</h4><p>删除所有节点或关系的标签或属性：</p>\n<pre class=\"language-cypher\" data-language=\"cypher\"><code class=\"language-cypher\"><span class=\"token keyword\">MATCH</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token punctuation\">[</span>rel<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token keyword\">DELETE</span> a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>rel<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">MATCH</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token class-name\">Mail_test</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token punctuation\">[</span>rel<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token punctuation\">(</span>b<span class=\"token operator\">:</span><span class=\"token class-name\">Mail_test</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DELETE</span> a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>rel<span class=\"token punctuation\">;</span></code></pre>\n\n<p>删除所有节点：</p>\n<pre class=\"language-cypher\" data-language=\"cypher\"><code class=\"language-cypher\"><span class=\"token keyword\">MATCH</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token keyword\">DELETE</span> e<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">MATCH</span> <span class=\"token punctuation\">(</span>e<span class=\"token operator\">:</span> <span class=\"token class-name\">Mail_test</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DELETE</span> e<span class=\"token punctuation\">;</span></code></pre>\n\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC8yYmI5OGM4MWQ4ZWU=\">https://www.jianshu.com/p/2bb98c81d8ee<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n","categories":["Database","Neo4j"],"tags":["Neo4j"]},{"title":"作业调度框架 Quartz 的基本使用","url":"/2020/10/2020-10-27-%E4%BD%9C%E4%B8%9A%E8%B0%83%E5%BA%A6%E6%A1%86%E6%9E%B6Quartz%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/","content":"<h3 id=\"Quartz-介绍\"><a href=\"#Quartz-介绍\" class=\"headerlink\" title=\"Quartz 介绍\"></a>Quartz 介绍</h3><p>Quartz 是一个开源的作业调度框架，可以让计划的程序任务一个预定义的日期和时间运行。</p>\n<p>Quartz 可以用来创建简单或复杂的日程安排执行几十，几百，甚至是十万的作业数。</p>\n<p>Quartz 官网：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5xdWFydHotc2NoZWR1bGVyLm9yZy8=\">http://www.quartz-scheduler.org/<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>GitHub：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3F1YXJ0ei1zY2hlZHVsZXI=\">https://github.com/quartz-scheduler<i class=\"fa fa-external-link-alt\"></i></span></p>\n<a id=\"more\"></a>\n\n<h4 id=\"Quartz-功能\"><a href=\"#Quartz-功能\" class=\"headerlink\" title=\"Quartz 功能\"></a>Quartz 功能</h4><p>如果应用程序需要在给定时间执行任务，或者如果系统有连续维护作业，那么 Quartz 是理想的解决方案。</p>\n<p>使用 Quartz 作业调度应用的示例：</p>\n<ul>\n<li><strong>驱动处理工作流程</strong>：作为一个新的订单被初始化放置，调度作业到在正好两个小时内，它将检查订单的状态，如果订单确认消息尚未收到命令触发警告通知，以及改变订单的状态为 “等待的干预”。</li>\n<li><strong>系统维护</strong>：调度工作给数据库的内容，每个工作日（节假日除外平日）在 11:30 PM 转储到一个 XML 文件中。</li>\n<li><strong>在应用程序内提供提醒服务</strong>。</li>\n</ul>\n<h4 id=\"运行环境\"><a href=\"#运行环境\" class=\"headerlink\" title=\"运行环境\"></a>运行环境</h4><ul>\n<li>Quartz 可以运行嵌入在另一个独立式应用程序</li>\n<li> Quartz 可以在应用程序服务器 (或 servlet 容器) 内被实例化，并且参与 XA 事务</li>\n<li> Quartz 可以作为一个独立的程序运行 (其自己的 Java 虚拟机内)，可以通过 RMI 使用</li>\n<li> Quartz 可以被实例化，作为独立的项目集群 (负载平衡和故障转移功能)，用于作业的执行</li>\n</ul>\n<h4 id=\"作业调度\"><a href=\"#作业调度\" class=\"headerlink\" title=\"作业调度\"></a>作业调度</h4><p>作业被安排在一个给定的触发时运行。触发器可以使用以下指令的接近任何组合来创建：</p>\n<ul>\n<li>在一天中的某个时间（到毫秒）</li>\n<li>在一周的某几天</li>\n<li>在每月的某一天</li>\n<li>在一年中的某些日期</li>\n<li>不在注册的日历中列出的特定日期（如商业节假日除外）</li>\n<li>重复特定次数</li>\n<li>重复进行，直到一个特定的时间 / 日期</li>\n<li>无限重复</li>\n<li>重复的延迟时间间隔</li>\n</ul>\n<p>作业是由其创建者赋予的名字，也可以组织成命名组。触发器也可以给予名称和放置在组中，以方便地将它们调度内组织。</p>\n<p>作业可以被添加到所述调度器一次，而是具有多个触发器注册。</p>\n<p>在企业 Java 环境中，作业可以执行自己的工作作为分布式（XA）事务的一部分。</p>\n<h4 id=\"作业执行\"><a href=\"#作业执行\" class=\"headerlink\" title=\"作业执行\"></a>作业执行</h4><ul>\n<li>作业可以实现简单的作业接口，为作业执行工作的任何 Java 类。</li>\n<li>Job 类的实例可以通过 Quartz 被实例化，或者通过应用程序框架。</li>\n<li>当触发时，调度通知实现 JobListener 和 TriggerListener 接口零个或多个 Java 对象（监听器可以是简单的 Java 对象，或 EJB，JMS 或发布者等）。这些监听器在作业已经执行之后通知。</li>\n<li>由于作业完成后返回 JobCompletionCode，它通知的成功或失败的调度。JobCompletionCode 还可以指示的基础上，成功的话就采取行动调度 / 失败的代码 - 如立即重新执行作业。</li>\n</ul>\n<h4 id=\"作业持久性\"><a href=\"#作业持久性\" class=\"headerlink\" title=\"作业持久性\"></a>作业持久性</h4><ul>\n<li>Quartz 的设计包括可被实现以提供的作业存储各种机制一个作业存储接口</li>\n<li>通过使用包含的 JDBCJobStore，所有的作业和触发器配置为 “非挥发性” 都存储在通过 JDBC 关系数据库。</li>\n<li>通过使用包含的 RAMJobStore，所有的作业和触发器存储在 RAM，因此不计划执行仍然存在 - 但这是无需使用外部数据库的优势。</li>\n</ul>\n<h4 id=\"事务\"><a href=\"#事务\" class=\"headerlink\" title=\"事务\"></a>事务</h4><ul>\n<li>可以参与 JTA 事务，通过使用 JobStoreCMT（JDBCJobStore 的子类）。</li>\n<li>Quartz 可以管理 JTA 事务（开始并提交它们）周围作业的执行，从而使作业执行的工作自动将 JTA 事务中发生。</li>\n</ul>\n<h4 id=\"集群\"><a href=\"#集群\" class=\"headerlink\" title=\"集群\"></a>集群</h4><ul>\n<li>故障切换</li>\n<li>负载均衡</li>\n<li> Quartz 的内置的群集功能，通过 JDBCJobStore（如上所述）依靠数据库持久</li>\n<li> Terracotta 扩展 Quartz 提供集群功能，而不需要一个支持数据库</li>\n</ul>\n<h4 id=\"监听器和插件\"><a href=\"#监听器和插件\" class=\"headerlink\" title=\"监听器和插件\"></a>监听器和插件</h4><ul>\n<li>应用程序可以捕捉事件的调度监控或通过实现一个或多个监听器接口控制工作 / 触发行为。</li>\n<li>插件机制，可以用来添加功能，Quartz 让作业执行过程中或工作负载和触发定义的历史不受限在一个文件中。</li>\n<li>附带了一些 “工厂建有” 插件和监听器。</li>\n</ul>\n<h4 id=\"Quartz-引入\"><a href=\"#Quartz-引入\" class=\"headerlink\" title=\"Quartz 引入\"></a>Quartz 引入</h4><pre class=\"language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token comment\">&lt;!-- https://mvnrepository.com/artifact/org.quartz-scheduler/quartz --&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.quartz-scheduler<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>quartz<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>2.3.2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n\n<h3 id=\"Quartz-简单示例\"><a href=\"#Quartz-简单示例\" class=\"headerlink\" title=\"Quartz 简单示例\"></a>Quartz 简单示例</h3><h4 id=\"Quartz-作业\"><a href=\"#Quartz-作业\" class=\"headerlink\" title=\"Quartz 作业\"></a>Quartz 作业</h4><pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloJob</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Job</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JobExecutionContext</span> context<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">JobExecutionException</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello Quartz!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<h4 id=\"Quartz-触发器\"><a href=\"#Quartz-触发器\" class=\"headerlink\" title=\"Quartz 触发器\"></a>Quartz 触发器</h4><p>定义 Quartz 触发器，运行在上面的 Quartz 作业。</p>\n<p>Quartz 有两种类型的触发器在 Quartz2：</p>\n<ul>\n<li><p><strong>SimpleTrigger</strong> – 允许设置开始时间，结束时间，重复间隔。</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Trigger</span> trigger <span class=\"token operator\">=</span> <span class=\"token class-name\">TriggerBuilder</span><span class=\"token punctuation\">.</span><span class=\"token function\">newTrigger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">withIdentity</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dummyTriggerName\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"group1\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">withSchedule</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SimpleScheduleBuilder</span><span class=\"token punctuation\">.</span><span class=\"token function\">simpleSchedule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n               <span class=\"token punctuation\">.</span><span class=\"token function\">withIntervalInSeconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">repeatForever</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n</li>\n<li><p><strong>CronTrigger</strong> – 允许 UNIX cron 表达式来指定日期和时间来运行作业。</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Trigger</span> trigger <span class=\"token operator\">=</span> <span class=\"token class-name\">TriggerBuilder</span><span class=\"token punctuation\">.</span><span class=\"token function\">newTrigger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">withIdentity</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dummyTriggerName\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"group1\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token function\">withSchedule</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CronScheduleBuilder</span><span class=\"token punctuation\">.</span><span class=\"token function\">cronSchedule</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0/5 * * * * ?\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n</li>\n</ul>\n<h4 id=\"Scheduler\"><a href=\"#Scheduler\" class=\"headerlink\" title=\"Scheduler\"></a>Scheduler</h4><p>调度类链接 “工作” 和 “触发器” 到一起，并执行它。</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Scheduler</span> scheduler <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StdSchedulerFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getScheduler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nscheduler<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nscheduler<span class=\"token punctuation\">.</span><span class=\"token function\">scheduleJob</span><span class=\"token punctuation\">(</span>job<span class=\"token punctuation\">,</span> trigger<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n<h4 id=\"完整示例\"><a href=\"#完整示例\" class=\"headerlink\" title=\"完整示例\"></a>完整示例</h4><pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">JobDetail</span> job <span class=\"token operator\">=</span> <span class=\"token class-name\">JobBuilder</span><span class=\"token punctuation\">.</span><span class=\"token function\">newJob</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HelloJob</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">withIdentity</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dummyJobName\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"group1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Trigger</span> trigger <span class=\"token operator\">=</span> <span class=\"token class-name\">TriggerBuilder</span><span class=\"token punctuation\">.</span><span class=\"token function\">newTrigger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">withIdentity</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dummyTriggerName\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"group1\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token function\">withSchedule</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CronScheduleBuilder</span><span class=\"token punctuation\">.</span><span class=\"token function\">cronSchedule</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0/5 * * * * ?\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Scheduler</span> scheduler <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StdSchedulerFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getScheduler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nscheduler<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nscheduler<span class=\"token punctuation\">.</span><span class=\"token function\">scheduleJob</span><span class=\"token punctuation\">(</span>job<span class=\"token punctuation\">,</span> trigger<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n<h3 id=\"Quartz-作业监听\"><a href=\"#Quartz-作业监听\" class=\"headerlink\" title=\"Quartz 作业监听\"></a>Quartz 作业监听</h3><h4 id=\"JobListener\"><a href=\"#JobListener\" class=\"headerlink\" title=\"JobListener\"></a>JobListener</h4><p>创建一个 JobListener，只是实现了 JobListener 接口，并覆盖所有的接口的方法。</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloJobListener</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">JobListener</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">}</span></code></pre>\n\n<h4 id=\"加入监听\"><a href=\"#加入监听\" class=\"headerlink\" title=\"加入监听\"></a>加入监听</h4><pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Scheduler</span> scheduler <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StdSchedulerFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getScheduler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nscheduler<span class=\"token punctuation\">.</span><span class=\"token function\">getListenerManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t     <span class=\"token punctuation\">.</span><span class=\"token function\">addJobListener</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">HelloJobListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">KeyMatcher</span><span class=\"token punctuation\">.</span><span class=\"token function\">keyEquals</span><span class=\"token punctuation\">(</span>jobKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n<h3 id=\"Quartz-执行多作业\"><a href=\"#Quartz-执行多作业\" class=\"headerlink\" title=\"Quartz 执行多作业\"></a>Quartz 执行多作业</h3><p>在 Quartz 调度框架中，每个作业将被连接到一个唯一的触发，并且由调度器运行它。</p>\n<p>P.S：在 Quartz 中，一个触发器触发多个作业是不可以的。 </p>\n<p>使用 QuartzAPI 声明上述 3 个作业，分配它们到特定触发器并调度它。</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">JobKey</span> jobKeyA <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JobKey</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jobA\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"group1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">JobDetail</span> jobA <span class=\"token operator\">=</span> <span class=\"token class-name\">JobBuilder</span><span class=\"token punctuation\">.</span><span class=\"token function\">newJob</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JobA</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">withIdentity</span><span class=\"token punctuation\">(</span>jobKeyA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">JobKey</span> jobKeyB <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JobKey</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jobB\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"group1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">JobDetail</span> jobB <span class=\"token operator\">=</span> <span class=\"token class-name\">JobBuilder</span><span class=\"token punctuation\">.</span><span class=\"token function\">newJob</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JobB</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">withIdentity</span><span class=\"token punctuation\">(</span>jobKeyB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">JobKey</span> jobKeyC <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JobKey</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jobC\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"group1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">JobDetail</span> jobC <span class=\"token operator\">=</span> <span class=\"token class-name\">JobBuilder</span><span class=\"token punctuation\">.</span><span class=\"token function\">newJob</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JobC</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">withIdentity</span><span class=\"token punctuation\">(</span>jobKeyC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Trigger</span> trigger1 <span class=\"token operator\">=</span> <span class=\"token class-name\">TriggerBuilder</span><span class=\"token punctuation\">.</span><span class=\"token function\">newTrigger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">withIdentity</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dummyTriggerName1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"group1\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token function\">withSchedule</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CronScheduleBuilder</span><span class=\"token punctuation\">.</span><span class=\"token function\">cronSchedule</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0/5 * * * * ?\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Trigger</span> trigger2 <span class=\"token operator\">=</span> <span class=\"token class-name\">TriggerBuilder</span><span class=\"token punctuation\">.</span><span class=\"token function\">newTrigger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">withIdentity</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dummyTriggerName2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"group1\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token function\">withSchedule</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CronScheduleBuilder</span><span class=\"token punctuation\">.</span><span class=\"token function\">cronSchedule</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0/5 * * * * ?\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Trigger</span> trigger3 <span class=\"token operator\">=</span> <span class=\"token class-name\">TriggerBuilder</span><span class=\"token punctuation\">.</span><span class=\"token function\">newTrigger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">withIdentity</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dummyTriggerName3\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"group1\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token function\">withSchedule</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CronScheduleBuilder</span><span class=\"token punctuation\">.</span><span class=\"token function\">cronSchedule</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0/5 * * * * ?\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Scheduler</span> scheduler <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StdSchedulerFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getScheduler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nscheduler<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nscheduler<span class=\"token punctuation\">.</span><span class=\"token function\">scheduleJob</span><span class=\"token punctuation\">(</span>jobA<span class=\"token punctuation\">,</span> trigger1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nscheduler<span class=\"token punctuation\">.</span><span class=\"token function\">scheduleJob</span><span class=\"token punctuation\">(</span>jobB<span class=\"token punctuation\">,</span> trigger2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nscheduler<span class=\"token punctuation\">.</span><span class=\"token function\">scheduleJob</span><span class=\"token punctuation\">(</span>jobC<span class=\"token punctuation\">,</span> trigger3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n<h3 id=\"列出调度器所有作业\"><a href=\"#列出调度器所有作业\" class=\"headerlink\" title=\"列出调度器所有作业\"></a>列出调度器所有作业</h3><pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Scheduler</span> scheduler <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StdSchedulerFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getScheduler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> groupName <span class=\"token operator\">:</span> scheduler<span class=\"token punctuation\">.</span><span class=\"token function\">getJobGroupNames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">JobKey</span> jobKey <span class=\"token operator\">:</span> scheduler<span class=\"token punctuation\">.</span><span class=\"token function\">getJobKeys</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">GroupMatcher</span><span class=\"token punctuation\">.</span><span class=\"token function\">jobGroupEquals</span><span class=\"token punctuation\">(</span>groupName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">String</span> jobName <span class=\"token operator\">=</span> jobKey<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">String</span> jobGroup <span class=\"token operator\">=</span> jobKey<span class=\"token punctuation\">.</span><span class=\"token function\">getGroup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Trigger</span><span class=\"token punctuation\">&gt;</span></span> triggers <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Trigger</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">)</span> scheduler<span class=\"token punctuation\">.</span><span class=\"token function\">getTriggersOfJob</span><span class=\"token punctuation\">(</span>jobKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">Date</span> nextFireTime <span class=\"token operator\">=</span> triggers<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getNextFireTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[jobName] : \"</span> <span class=\"token operator\">+</span> jobName <span class=\"token operator\">+</span> <span class=\"token string\">\" [groupName] : \"</span> <span class=\"token operator\">+</span> jobGroup <span class=\"token operator\">+</span> <span class=\"token string\">\" - \"</span> <span class=\"token operator\">+</span> nextFireTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cueWlpYmFpLmNvbS9xdWFydHo=\">https://www.yiibai.com/quartz<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n","categories":["Java","JavaJar"],"tags":["Java","JavaJar"]},{"title":"XML 操作类库 XStream 的基本使用","url":"/2020/10/2020-10-29-XML%E6%93%8D%E4%BD%9C%E7%B1%BB%E5%BA%93XStream%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/","content":"<h3 id=\"XStream-介绍\"><a href=\"#XStream-介绍\" class=\"headerlink\" title=\"XStream 介绍\"></a>XStream 介绍</h3><p>XStream 是一个简单的基于 Java 库，Java 对象序列化到 XML，反之亦然 (即：可以轻易的将 Java 对象和 xml 文档相互转换)。</p>\n<ul>\n<li>官网说明：<span class=\"exturl\" data-url=\"aHR0cDovL3gtc3RyZWFtLmdpdGh1Yi5pby8=\">http://x-stream.github.io/<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>GitHub：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3gtc3RyZWFtL3hzdHJlYW0=\">https://github.com/x-stream/xstream<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>JavaDoc：<span class=\"exturl\" data-url=\"aHR0cDovL3gtc3RyZWFtLmdpdGh1Yi5pby9qYXZhZG9jL2luZGV4Lmh0bWw=\">http://x-stream.github.io/javadoc/index.html<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<a id=\"more\"></a>\n\n<h4 id=\"XStream-特点\"><a href=\"#XStream-特点\" class=\"headerlink\" title=\"XStream 特点\"></a>XStream 特点</h4><ul>\n<li><strong>使用方便</strong> - XStream 的 API 提供了一个高层次外观，以简化常用的用例。</li>\n<li><strong>无需创建映射</strong> - XStream 的 API 提供了默认的映射大部分对象序列化。</li>\n<li><strong>性能</strong> - XStream 快速和低内存占用，适合于大对象图或系统。</li>\n<li><strong>干净的 XML</strong> - XStream 创建一个干净和紧凑 XML 结果，这很容易阅读。</li>\n<li><strong>不需要修改对象</strong> - XStream 可序列化的内部字段，如私有和最终字段，支持非公有制和内部类。默认构造函数不是强制性的要求。</li>\n<li><strong>完整对象图支持</strong> - XStream 允许保持在对象模型中遇到的重复引用，并支持循环引用。</li>\n<li><strong>可自定义的转换策略</strong> - 定制策略可以允许特定类型的定制被表示为 XML 的注册。</li>\n<li><strong>安全框架</strong> - XStream 提供了一个公平控制有关解组的类型，以防止操纵输入安全问题。</li>\n<li><strong>错误消息</strong> - 出现异常是由于格式不正确的 XML 时，XStream 抛出一个统一的例外，提供了详细的诊断，以解决这个问题。</li>\n<li><strong>另一种输出格式</strong> - XStream 支持其它的输出格式，如 JSON。</li>\n</ul>\n<h4 id=\"XStream-引入\"><a href=\"#XStream-引入\" class=\"headerlink\" title=\"XStream 引入\"></a>XStream 引入</h4><pre class=\"language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token comment\">&lt;!-- https://mvnrepository.com/artifact/com.thoughtworks.xstream/xstream --&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>com.thoughtworks.xstream<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>xstream<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>1.4.13<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n\n<h3 id=\"XStream-基本使用\"><a href=\"#XStream-基本使用\" class=\"headerlink\" title=\"XStream 基本使用\"></a>XStream 基本使用</h3><h4 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h4><ol>\n<li><p><strong>创建 XStream 对象</strong>：通过它传递一个 StaxDriver 创建 XStream 对象。</p>\n<p>StaxDriver 使用 SAX 解析器 (可从 Java6)，一个快速的 XML 解析器。</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">XStream</span> xstream <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XStream</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">StaxDriver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n</li>\n<li><p><strong>序列化对象到 XML</strong>：使用 toXML () 方法来获取对象的 XML 字符串表示。</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">String</span> xml <span class=\"token operator\">=</span> xstream<span class=\"token punctuation\">.</span><span class=\"token function\">toXML</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n</li>\n<li><p><strong>反序列化 XML 获得对象</strong>：使用 fromXML () 方法来从 XML 对象。</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Student</span> student1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">)</span>xstream<span class=\"token punctuation\">.</span><span class=\"token function\">fromXML</span><span class=\"token punctuation\">(</span>xml<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n</li>\n</ol>\n<h4 id=\"对象-到-XML-的转换\"><a href=\"#对象-到-XML-的转换\" class=\"headerlink\" title=\"对象 到 XML 的转换\"></a>对象 到 XML 的转换</h4><pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">XStream</span> xstream1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XStream</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">StaxDriver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> xml <span class=\"token operator\">=</span> xstream1<span class=\"token punctuation\">.</span><span class=\"token function\">toXML</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>xml<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">formatXml</span><span class=\"token punctuation\">(</span>xml<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n<h4 id=\"XML-到-对象-的转换\"><a href=\"#XML-到-对象-的转换\" class=\"headerlink\" title=\"XML 到 对象 的转换\"></a>XML 到 对象 的转换</h4><pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">XStream</span> xstream2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Student</span> student1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">)</span> xstream2<span class=\"token punctuation\">.</span><span class=\"token function\">fromXML</span><span class=\"token punctuation\">(</span>xml<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>student1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n<p>此时，能够正常打印，但会提示异常：</p>\n<blockquote>\n<p>Security framework of XStream not explicitly initialized, using predefined black list on your own risk.</p>\n</blockquote>\n<p>解决方案有两种：</p>\n<ol>\n<li><p>限制为所需的最小权限：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">XStream</span> xstream2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">XStream</span><span class=\"token punctuation\">.</span><span class=\"token function\">setupDefaultSecurity</span><span class=\"token punctuation\">(</span>xstream2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> classes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nxstream2<span class=\"token punctuation\">.</span><span class=\"token function\">allowTypes</span><span class=\"token punctuation\">(</span>classes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Student</span> student1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">)</span> xstream2<span class=\"token punctuation\">.</span><span class=\"token function\">fromXML</span><span class=\"token punctuation\">(</span>xml<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>student1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n</li>\n<li><p>消除所有限制：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">XStream</span> xstream3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nxstream3<span class=\"token punctuation\">.</span><span class=\"token function\">addPermission</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AnyTypePermission</span><span class=\"token punctuation\">.</span>ANY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Student</span> student2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">)</span> xstream3<span class=\"token punctuation\">.</span><span class=\"token function\">fromXML</span><span class=\"token punctuation\">(</span>xml<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>student2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n</li>\n</ol>\n<p>参考资料：<span class=\"exturl\" data-url=\"aHR0cDovL3gtc3RyZWFtLmdpdGh1Yi5pby9zZWN1cml0eS5odG1s\">http://x-stream.github.io/security.html<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h4 id=\"格式化-XML-字符串\"><a href=\"#格式化-XML-字符串\" class=\"headerlink\" title=\"格式化 XML 字符串\"></a>格式化 XML 字符串</h4><pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">formatXml</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> xml<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">Transformer</span> serializer <span class=\"token operator\">=</span> <span class=\"token class-name\">SAXTransformerFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">newTransformer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tserializer<span class=\"token punctuation\">.</span><span class=\"token function\">setOutputProperty</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">OutputKeys</span><span class=\"token punctuation\">.</span>INDENT<span class=\"token punctuation\">,</span> <span class=\"token string\">\"yes\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tserializer<span class=\"token punctuation\">.</span><span class=\"token function\">setOutputProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{http://xml.apache.org/xslt}indent-amount\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">Source</span> xmlSource <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SAXSource</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">InputSource</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ByteArrayInputStream</span><span class=\"token punctuation\">(</span>xml<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">StreamResult</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StreamResult</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ByteArrayOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tserializer<span class=\"token punctuation\">.</span><span class=\"token function\">transform</span><span class=\"token punctuation\">(</span>xmlSource<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ByteArrayOutputStream</span><span class=\"token punctuation\">)</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">getOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toByteArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> xml<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<h3 id=\"XStream-混叠\"><a href=\"#XStream-混叠\" class=\"headerlink\" title=\"XStream 混叠\"></a>XStream 混叠</h3><p>混叠是一种技术来定制生成 XML 或者使用 XStream 特定的格式化 XML。</p>\n<h4 id=\"类混叠\"><a href=\"#类混叠\" class=\"headerlink\" title=\"类混叠\"></a>类混叠</h4><p>类混叠是用来创建一个类的 XML 完全限定名称的别名。</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\">xstream<span class=\"token punctuation\">.</span><span class=\"token function\">alias</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"student\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nxstream<span class=\"token punctuation\">.</span><span class=\"token function\">alias</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"note\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Note</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n<h4 id=\"字段混叠\"><a href=\"#字段混叠\" class=\"headerlink\" title=\"字段混叠\"></a>字段混叠</h4><p>字段混叠用于创建以 XML 字段的别名。</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\">xstream<span class=\"token punctuation\">.</span><span class=\"token function\">aliasField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"studentName\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n<h4 id=\"隐式集合混叠\"><a href=\"#隐式集合混叠\" class=\"headerlink\" title=\"隐式集合混叠\"></a>隐式集合混叠</h4><p>隐式集合混叠时使用的集合是表示在 XML 无需显示根。</p>\n<p>例如，我们需要一个接一个，但不是在根节点来显示每一个节点。</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\">xstream<span class=\"token punctuation\">.</span><span class=\"token function\">addImplicitCollection</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"notes\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n<h4 id=\"属性混叠\"><a href=\"#属性混叠\" class=\"headerlink\" title=\"属性混叠\"></a>属性混叠</h4><p>属性混叠用于创建一个成员变量作为 XML 属性序列化。</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\">xstream<span class=\"token punctuation\">.</span><span class=\"token function\">useAttributeFor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"studentName\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n<h4 id=\"包混叠\"><a href=\"#包混叠\" class=\"headerlink\" title=\"包混叠\"></a>包混叠</h4><p>包装混叠用于创建一个类 XML 的完全限定名称的别名到一个新的限定名称。</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\">xstream<span class=\"token punctuation\">.</span><span class=\"token function\">aliasPackage</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"my.company.xstream\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"demo.xstream\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n<h3 id=\"XStream-注解\"><a href=\"#XStream-注解\" class=\"headerlink\" title=\"XStream 注解\"></a>XStream 注解</h3><pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@XStreamAlias</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"student\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 类混叠</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token annotation punctuation\">@XStreamAlias</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 字段混叠</span>\n\t<span class=\"token annotation punctuation\">@XStreamAsAttribute</span> <span class=\"token comment\">// 属性混叠</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> studentName<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token annotation punctuation\">@XStreamImplicit</span> <span class=\"token comment\">// 隐式集合混叠</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Note</span><span class=\"token punctuation\">&gt;</span></span> notes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Note</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@XStreamOmitField</span> <span class=\"token comment\">// 忽略不属于 XML 的字段</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> type<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<h3 id=\"XStream-对象流\"><a href=\"#XStream-对象流\" class=\"headerlink\" title=\"XStream 对象流\"></a>XStream 对象流</h3><p>XStream 提供 java.io.ObjectInputStream 和 java.io.ObjectOutputStream 替代实现，使对象流可以被序列化或 XML 序列化。</p>\n<h4 id=\"输出文件-Output\"><a href=\"#输出文件-Output\" class=\"headerlink\" title=\"输出文件 Output\"></a>输出文件 Output</h4><pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">ObjectOutputStream</span> objectOutputStream <span class=\"token operator\">=</span> xstream<span class=\"token punctuation\">.</span><span class=\"token function\">createObjectOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nobjectOutputStream<span class=\"token punctuation\">.</span><span class=\"token function\">writeObject</span><span class=\"token punctuation\">(</span>student1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nobjectOutputStream<span class=\"token punctuation\">.</span><span class=\"token function\">writeObject</span><span class=\"token punctuation\">(</span>student2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nobjectOutputStream<span class=\"token punctuation\">.</span><span class=\"token function\">writeObject</span><span class=\"token punctuation\">(</span>student3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nobjectOutputStream<span class=\"token punctuation\">.</span><span class=\"token function\">writeObject</span><span class=\"token punctuation\">(</span>student4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nobjectOutputStream<span class=\"token punctuation\">.</span><span class=\"token function\">writeObject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nobjectOutputStream<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n<h4 id=\"读取文件-Input\"><a href=\"#读取文件-Input\" class=\"headerlink\" title=\"读取文件 Input\"></a>读取文件 Input</h4><pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">ObjectInputStream</span> objectInputStream <span class=\"token operator\">=</span> xstream<span class=\"token punctuation\">.</span><span class=\"token function\">createObjectInputStream</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Student</span> student5 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">)</span> objectInputStream<span class=\"token punctuation\">.</span><span class=\"token function\">readObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Student</span> student6 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">)</span> objectInputStream<span class=\"token punctuation\">.</span><span class=\"token function\">readObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Student</span> student7 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">)</span> objectInputStream<span class=\"token punctuation\">.</span><span class=\"token function\">readObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Student</span> student8 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">)</span> objectInputStream<span class=\"token punctuation\">.</span><span class=\"token function\">readObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> text <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> objectInputStream<span class=\"token punctuation\">.</span><span class=\"token function\">readObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n<h3 id=\"XStream-自定义转换器\"><a href=\"#XStream-自定义转换器\" class=\"headerlink\" title=\"XStream 自定义转换器\"></a>XStream 自定义转换器</h3><p>XStream 允许从无到有写入转换器，这样开发人员可以编写一个完全新的实现，如何对象序列化到 XML，反之亦然。 转换器接口提供了三种方法。</p>\n<ul>\n<li><strong>canConvert</strong> - 检查支持的对象类型的序列化。</li>\n<li><strong>marshal</strong> - 序列化对象到 XML。</li>\n<li><strong>unmarshal</strong> - 从 XML 对象反序列化</li>\n</ul>\n<h4 id=\"实现转换器接口\"><a href=\"#实现转换器接口\" class=\"headerlink\" title=\"实现转换器接口\"></a>实现转换器接口</h4><pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">StudentConverter</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Converter</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// 序列化对象到XML</span>\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">marshal</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> value<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HierarchicalStreamWriter</span> writer<span class=\"token punctuation\">,</span> <span class=\"token class-name\">MarshallingContext</span> context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">Student</span> student <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">)</span> value<span class=\"token punctuation\">;</span>\n\t\twriter<span class=\"token punctuation\">.</span><span class=\"token function\">startNode</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\twriter<span class=\"token punctuation\">.</span><span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getFirstName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\",\"</span> <span class=\"token operator\">+</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLastName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\twriter<span class=\"token punctuation\">.</span><span class=\"token function\">endNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">// 从XML对象反序列化</span>\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">unmarshal</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HierarchicalStreamReader</span> reader<span class=\"token punctuation\">,</span> <span class=\"token class-name\">UnmarshallingContext</span> context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\treader<span class=\"token punctuation\">.</span><span class=\"token function\">moveDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nameparts <span class=\"token operator\">=</span> reader<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">Student</span> student <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span>nameparts<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nameparts<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\treader<span class=\"token punctuation\">.</span><span class=\"token function\">moveUp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> student<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">// 检查支持的对象类型的序列化</span>\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">canConvert</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span> object<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> object<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span> </code></pre>\n\n<h4 id=\"注册转换器\"><a href=\"#注册转换器\" class=\"headerlink\" title=\"注册转换器\"></a>注册转换器</h4><pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\">xstream<span class=\"token punctuation\">.</span><span class=\"token function\">registerConverter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">StudentConverter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n<h3 id=\"XStream-编写JSON\"><a href=\"#XStream-编写JSON\" class=\"headerlink\" title=\"XStream 编写JSON\"></a>XStream 编写 JSON</h3><p>XStream 支持 JSON 通过初始化 XStream 对象适当的驱动程序。 </p>\n<p>XStream 目前支持 JettisonMappedXmlDriver 和 JsonHierarchicalStreamDriver。</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">XStream</span> xstream <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XStream</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">JsonHierarchicalStreamDriver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">HierarchicalStreamWriter</span> <span class=\"token function\">createWriter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Writer</span> writer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JsonWriter</span><span class=\"token punctuation\">(</span>writer<span class=\"token punctuation\">,</span> <span class=\"token class-name\">JsonWriter</span><span class=\"token punctuation\">.</span>DROP_ROOT_MODE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nxstream<span class=\"token punctuation\">.</span><span class=\"token function\">setMode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">XStream</span><span class=\"token punctuation\">.</span>NO_REFERENCES<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Student</span> student <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Mahesh\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>xstream<span class=\"token punctuation\">.</span><span class=\"token function\">toXML</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cueWlpYmFpLmNvbS94c3RyZWFt\">https://www.yiibai.com/xstream<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n","categories":["Java","JavaJar"],"tags":["Java","JavaJar","XML"]},{"title":"HTML 解析器 JSoup 的基本使用","url":"/2020/10/2020-10-28-HTML%E8%A7%A3%E6%9E%90%E5%99%A8JSoup%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/","content":"<h3 id=\"JSoup介绍\"><a href=\"#JSoup介绍\" class=\"headerlink\" title=\"JSoup介绍\"></a>JSoup 介绍</h3><p>JSoup 是一个用于处理 HTML 的 Java 库，它提供了一个非常方便类似于使用 DOM，CSS 和 jquery 的方法的 API 来提取和操作数据。</p>\n<ul>\n<li>官网：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9qc291cC5vcmcv\">https://jsoup.org/<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>GitHub：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2poeS9qc291cC8=\">https://github.com/jhy/jsoup/<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<a id=\"more\"></a>\n\n<h4 id=\"JSoup-功能\"><a href=\"#JSoup-功能\" class=\"headerlink\" title=\"JSoup 功能\"></a>JSoup 功能</h4><p>jsoup 实现 WHATWG HTML5 规范，并将 HTML 解析为与现代浏览器相同的 DOM。</p>\n<ul>\n<li>从 URL，文件或字符串中提取并解析 HTML。</li>\n<li>查找和提取数据，使用 DOM 遍历或 CSS 选择器。</li>\n<li>操纵 HTML 元素，属性和文本。</li>\n<li>根据安全的白名单清理用户提交的内容，以防止 XSS 攻击。</li>\n<li>输出整洁的 HTML。</li>\n</ul>\n<h4 id=\"JSoup-引入\"><a href=\"#JSoup-引入\" class=\"headerlink\" title=\"JSoup 引入\"></a>JSoup 引入</h4><pre class=\"language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token comment\">&lt;!-- https://mvnrepository.com/artifact/org.jsoup/jsoup --&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.jsoup<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>jsoup<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>1.13.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n\n<h3 id=\"JSoup-主要类\"><a href=\"#JSoup-主要类\" class=\"headerlink\" title=\"JSoup 主要类\"></a>JSoup 主要类</h3><p>大多数情况下，下面给出 <code>3</code> 个类是我们需要重点了解的。</p>\n<h4 id=\"Jsoup类\"><a href=\"#Jsoup类\" class=\"headerlink\" title=\"Jsoup类\"></a>Jsoup 类</h4><p>Jsoup 类是任何 Jsoup 程序的入口点，并将提供从各种来源加载和解析 HTML 文档的方法。</p>\n<p>Jsoup 类的一些重要方法如下：</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>static Connection connect(String url)</code></td>\n<td>创建并返回 URL 的连接。</td>\n</tr>\n<tr>\n<td><code>static Document parse(File in, String charsetName)</code></td>\n<td>将指定的字符集文件解析成文档。</td>\n</tr>\n<tr>\n<td><code>static Document parse(String html)</code></td>\n<td>将给定的 html 代码解析成文档。</td>\n</tr>\n<tr>\n<td><code>static String clean(String bodyHtml, Whitelist whitelist)</code></td>\n<td>从输入 HTML 返回安全的 HTML，通过解析输入 HTML 并通过允许的标签和属性的白名单进行过滤。</td>\n</tr>\n</tbody></table>\n<p>Jsoup 类的其他重要方法可以参见 - <span class=\"exturl\" data-url=\"aHR0cHM6Ly9qc291cC5vcmcvYXBpZG9jcy9vcmcvanNvdXAvSnNvdXAuaHRtbA==\">https://jsoup.org/apidocs/org/jsoup/Jsoup.html<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h4 id=\"Document类\"><a href=\"#Document类\" class=\"headerlink\" title=\"Document类\"></a>Document 类</h4><p>该类表示通过 Jsoup 库加载 HTML 文档。可以使用此类执行适用于整个 HTML 文档的操作。</p>\n<p>Element 类的重要方法可以参见 - <span class=\"exturl\" data-url=\"aHR0cDovL2pzb3VwLm9yZy9hcGlkb2NzL29yZy9qc291cC9ub2Rlcy9Eb2N1bWVudC5odG1s\">http://jsoup.org/apidocs/org/jsoup/nodes/Document.html<i class=\"fa fa-external-link-alt\"></i></span> 。</p>\n<h4 id=\"Element类\"><a href=\"#Element类\" class=\"headerlink\" title=\"Element类\"></a>Element 类</h4><p>HTML 元素是由标签名称，属性和子节点组成。 使用 Element 类，您可以提取数据，遍历节点和操作 HTML。</p>\n<p>Element 类的重要方法可参见 - <span class=\"exturl\" data-url=\"aHR0cDovL2pzb3VwLm9yZy9hcGlkb2NzL29yZy9qc291cC9ub2Rlcy9FbGVtZW50Lmh0bWw=\">http://jsoup.org/apidocs/org/jsoup/nodes/Element.html<i class=\"fa fa-external-link-alt\"></i></span> 。</p>\n<h3 id=\"JSoup-应用实例\"><a href=\"#JSoup-应用实例\" class=\"headerlink\" title=\"JSoup 应用实例\"></a>JSoup 应用实例</h3><h4 id=\"加载文档\"><a href=\"#加载文档\" class=\"headerlink\" title=\"加载文档\"></a>加载文档</h4><ul>\n<li><p><strong>从 URL 加载文档</strong>：使用 <code>Jsoup.connect()</code> 方法</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Document</span> doc1 <span class=\"token operator\">=</span> <span class=\"token class-name\">Jsoup</span><span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://www.baidu.com/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </code></pre>\n</li>\n<li><p><strong>从文件加载文档</strong>：使用 <code>Jsoup.parse()</code> 方法</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Document</span> doc2 <span class=\"token operator\">=</span> <span class=\"token class-name\">Jsoup</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D:/test/jsontest.html\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n</li>\n<li><p><strong>从 String 加载文档</strong>：使用 <code>Jsoup.parse()</code> 方法</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">String</span> html <span class=\"token operator\">=</span> <span class=\"token string\">\"&lt;html&gt;&lt;head&gt;&lt;title&gt;First parse&lt;/title&gt;&lt;/head&gt;\"</span>\n                    <span class=\"token operator\">+</span> <span class=\"token string\">\"&lt;body&gt;&lt;p&gt;Parsed HTML into a doc.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Document</span> doc3 <span class=\"token operator\">=</span> <span class=\"token class-name\">Jsoup</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>html<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n</li>\n</ul>\n<h4 id=\"获取元素\"><a href=\"#获取元素\" class=\"headerlink\" title=\"获取元素\"></a>获取元素</h4><p>以 百度首页为例：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Document</span> document <span class=\"token operator\">=</span> <span class=\"token class-name\">Jsoup</span><span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://www.baidu.com/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n<ul>\n<li><p>获取标题</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">title</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n</li>\n<li><p>获取页面的 Fav 图标</p>\n<p>假设 <code>favicon</code> 图像将是 HTML 文档的 <code>&lt;head&gt;</code> 部分中的第一个图像，可以使用下面的代码：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">String</span> favImage <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Element</span> element <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">head</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"link[href~=.*\\\\.(ico|png)]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">first</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>element <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    element <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">head</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"meta[itemprop=image]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">first</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>element <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        favImage <span class=\"token operator\">=</span> element<span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"content\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    favImage <span class=\"token operator\">=</span> element<span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"href\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> \n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>favImage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// /favicon.ico</span></code></pre>\n</li>\n<li><p>获取页面中的所有链接</p>\n<p>Element 类提供了 attr () 和 text () 方法来返回链接的链接和对应的文本。</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Elements</span> links <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a[href]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Element</span> link <span class=\"token operator\">:</span> links<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>link<span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" - \"</span> <span class=\"token operator\">+</span> link<span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"href\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<p>结果如下：</p>\n<p><img src=\"/images/2020/10/image-20201029193548876.png\" alt=\"image-20201029193548876\" loading=\"lazy\"></p>\n</li>\n<li><p>获取页面中的所有图像</p>\n<p>调用 <code>select()</code> 方法传递 <code>\"img[src~=(?i)\\\\.(png|jpe?g|gif)]\"</code>&nbsp;正则表达式作为参数，以便它可以打印 <code>png</code>，<code>jpeg</code> 或 <code>gif</code> 类型的图像。</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Elements</span> images <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"img[src~=(?i)\\\\.(png|jpe?g|gif)]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Element</span> image <span class=\"token operator\">:</span> images<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"alt\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" - \"</span> <span class=\"token operator\">+</span> image<span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"src\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<p>结果如下：</p>\n<p><img src=\"/images/2020/10/image-20201029193832082.png\" alt=\"image-20201029193832082\" loading=\"lazy\"></p>\n</li>\n<li><p>获取 URL 的元信息</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">String</span> description <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"meta[name=description]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"content\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>description<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 全球最大的中文搜索引擎、致力于让网民更便捷地获取信息，找到所求。百度超过千亿的中文网页数据库，可以瞬间找到相关的搜索结果。</span></code></pre>\n</li>\n<li><p>在 HTML 页面中获取表单属性</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Element</span> formElement <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"form\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Elements</span> inputElements <span class=\"token operator\">=</span> formElement<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByTag</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"input\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Element</span> inputElement <span class=\"token operator\">:</span> inputElements<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token class-name\">String</span> key <span class=\"token operator\">=</span> inputElement<span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">String</span> value <span class=\"token operator\">=</span> inputElement<span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"value\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Param name: \"</span> <span class=\"token operator\">+</span> key <span class=\"token operator\">+</span> <span class=\"token string\">\", Param value: \"</span> <span class=\"token operator\">+</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<p>结果如下：</p>\n<p><img src=\"/images/2020/10/image-20201029194221980.png\" alt=\"image-20201029194221980\" loading=\"lazy\"></p>\n</li>\n</ul>\n<h4 id=\"更新元素\"><a href=\"#更新元素\" class=\"headerlink\" title=\"更新元素\"></a>更新元素</h4><p>只要您使用上述方法找到您想要的元素；可以使用 Jsoup API 来更新这些元素的属性或 innerHTML。 </p>\n<p>例如，想更新文档中存在的 “<code>rel = nofollow</code>” 的所有链接。</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Document</span> document <span class=\"token operator\">=</span> <span class=\"token class-name\">Jsoup</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D:/test/jsontest.html\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Elements</span> links <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a[href]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \nlinks<span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"rel\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"nofollow\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n<h4 id=\"消除不信任的HTML\"><a href=\"#消除不信任的HTML\" class=\"headerlink\" title=\"消除不信任的HTML\"></a>消除不信任的 HTML</h4><p>假设在应用程序中，想显示用户提交的 HTML 片段。 例如 用户可以在评论框中放入 HTML 内容。 这可能会导致非常严重的问题，如果您允许直接显示此 HTML。 用户可以在其中放入一些恶意脚本，并将用户重定向到另一个脏网站。</p>\n<p>为了清理这个 HTML，Jsoup 提供 <code>Jsoup.clean()</code> 方法。 此方法期望 HTML 格式的字符串，并将返回清洁的 HTML。 要执行此任务，Jsoup 使用白名单过滤器。 jsoup 白名单过滤器通过解析输入 HTML (在安全的沙盒环境中) 工作，然后遍历解析树，只允许将已知安全的标签和属性 (和值) 通过清理后输出。</p>\n<p>它不使用正则表达式，这对于此任务是不合适的。</p>\n<p>清洁器不仅用于避免 XSS，还限制了用户可以提供的元素的范围：您可以使用文本，强元素，但不能构造 <code>div</code> 或表元素。</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">String</span> dirtyHTML <span class=\"token operator\">=</span> <span class=\"token string\">\"&lt;p&gt;&lt;a href='https://www.baidu.com/' onclick='sendCookiesToMe()'&gt;Link&lt;/a&gt;&lt;/p&gt;\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> cleanHTML <span class=\"token operator\">=</span> <span class=\"token class-name\">Jsoup</span><span class=\"token punctuation\">.</span><span class=\"token function\">clean</span><span class=\"token punctuation\">(</span>dirtyHTML<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Whitelist</span><span class=\"token punctuation\">.</span><span class=\"token function\">basic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>cleanHTML<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n<p>执行后输出结果如下：</p>\n<pre class=\"language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://www.baidu.com/<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>nofollow<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Link<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n\n","categories":["HTML","Java","JavaJar"],"tags":["HTML","Java","JavaJar"]},{"title":"SpringBoot 集成 Druid","url":"/2020/10/2020-10-30-SpringBoot%E9%9B%86%E6%88%90Druid/","content":"<p>Springboot 集成 Druid 有两种方案：</p>\n<ul>\n<li>在 POM 中直接配置 druid-spring-boot-starter，不用写任何代码。</li>\n<li>配置 druid，写几行代码，可以加入。</li>\n</ul>\n<a id=\"more\"></a>\n\n<h3 id=\"使用druid-spring-boot-starter\"><a href=\"#使用druid-spring-boot-starter\" class=\"headerlink\" title=\"使用druid-spring-boot-starter\"></a>使用 druid-spring-boot-starter</h3><p>Druid Spring Boot Starter 用于帮助你在 Spring Boot 项目中轻松集成 Druid 数据库连接池和监控。</p>\n<ul>\n<li>GitHub：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvZHJ1aWQvdHJlZS9tYXN0ZXIvZHJ1aWQtc3ByaW5nLWJvb3Qtc3RhcnRlcg==\">https://github.com/alibaba/druid/tree/master/druid-spring-boot-starter<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<h4 id=\"引入-Jar\"><a href=\"#引入-Jar\" class=\"headerlink\" title=\"引入 Jar\"></a>引入 Jar</h4><pre class=\"language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>com.alibaba<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>druid-spring-boot-starter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>1.2.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n\n<h4 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h4><p>配置文件 application.properties。</p>\n<p>基础配置：</p>\n<pre class=\"language-properties\" data-language=\"properties\"><code class=\"language-properties\"><span class=\"token attr-name\">spring.datasource.driverClassName</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">com.mysql.cj.jdbc.Driver</span>\n<span class=\"token attr-name\">spring.datasource.url</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">jdbc:mysql://localhost:3306/test?serverTimezone=UTC</span>\n<span class=\"token attr-name\">spring.datasource.username</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">xxx</span>\n<span class=\"token attr-name\">spring.datasource.password</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">xxx</span></code></pre>\n\n<p>信息配置：</p>\n<pre class=\"language-properties\" data-language=\"properties\"><code class=\"language-properties\"><span class=\"token attr-name\">spring.datasource.url</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">jdbc:mysql://localhost:3306/test?serverTimezone=UTC</span>\n<span class=\"token attr-name\">spring.datasource.username</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">xxx</span>\n<span class=\"token attr-name\">spring.datasource.password</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">xxx</span>\n<span class=\"token attr-name\">spring.datasource.driverClassName</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">com.mysql.cj.jdbc.Driver</span>\n\n<span class=\"token comment\">#config druid</span>\n<span class=\"token comment\">#连接池的设置</span>\n<span class=\"token comment\">#初始化时建立物理连接的个数</span>\n<span class=\"token attr-name\">spring.datasource.druid.initial-size</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">5</span>\n<span class=\"token comment\">#最小连接池数量</span>\n<span class=\"token attr-name\">spring.datasource.druid.min-idle</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">5</span>\n<span class=\"token comment\">#最大连接池数量 maxIdle已经不再使用</span>\n<span class=\"token attr-name\">spring.datasource.druid.max-active</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">20</span>\n<span class=\"token comment\">#获取连接时最大等待时间，单位毫秒</span>\n<span class=\"token attr-name\">spring.datasource.druid.max-wait</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">60000</span>\n<span class=\"token comment\">#申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。</span>\n<span class=\"token attr-name\">spring.datasource.druid.test-while-idle</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">true</span>\n<span class=\"token comment\">#既作为检测的间隔时间又作为testWhileIdel执行的依据</span>\n<span class=\"token attr-name\">spring.datasource.druid.time-between-eviction-runs-millis</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">60000</span>\n<span class=\"token comment\">#销毁线程时检测当前连接的最后活动时间和当前时间差大于该值时，关闭当前连接</span>\n<span class=\"token attr-name\">spring.datasource.druid.min-evictable-idle-time-millis</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">30000</span>\n<span class=\"token comment\">#用来检测连接是否有效的sql 必须是一个查询语句</span>\n<span class=\"token comment\">#mysql中为 select 'x'</span>\n<span class=\"token comment\">#oracle中为 select 1 from dual</span>\n<span class=\"token attr-name\">spring.datasource.druid.validation-query</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">select 'x'</span>\n<span class=\"token comment\">#申请连接时会执行validationQuery检测连接是否有效,开启会降低性能,默认为true</span>\n<span class=\"token attr-name\">spring.datasource.druid.test-on-borrow</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">false</span>\n<span class=\"token comment\">#归还连接时会执行validationQuery检测连接是否有效,开启会降低性能,默认为true</span>\n<span class=\"token attr-name\">spring.datasource.druid.test-on-return</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">false</span>\n<span class=\"token comment\">#当数据库抛出不可恢复的异常时,抛弃该连接</span>\n<span class=\"token comment\">#spring.datasource.druid.exception-sorter=true</span>\n<span class=\"token comment\">#是否缓存preparedStatement,mysql5.5+建议开启</span>\n<span class=\"token comment\">#spring.datasource.druid.pool-prepared-statements=true</span>\n<span class=\"token comment\">#当值大于0时poolPreparedStatements会自动修改为true</span>\n<span class=\"token attr-name\">spring.datasource.druid.max-pool-prepared-statement-per-connection-size</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">20</span>\n<span class=\"token comment\">#配置扩展插件</span>\n<span class=\"token attr-name\">spring.datasource.druid.filters</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">stat,wall</span>\n<span class=\"token comment\">#通过connectProperties属性来打开mergeSql功能；慢SQL记录</span>\n<span class=\"token attr-name\">spring.datasource.druid.connection-properties</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</span>\n<span class=\"token comment\">#合并多个DruidDataSource的监控数据</span>\n<span class=\"token attr-name\">spring.datasource.druid.use-global-data-source-stat</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">true</span>\n\n<span class=\"token comment\"># 加入如下配置，实现验证登录</span>\n<span class=\"token comment\">## Druid WebStatFilter配置，说明请参考Druid Wiki，配置_配置WebStatFilter</span>\n<span class=\"token attr-name\">spring.datasource.druid.web-stat-filter.enabled</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">true</span>\n<span class=\"token attr-name\">spring.datasource.druid.web-stat-filter.url-pattern</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">/*</span>\n<span class=\"token attr-name\">spring.datasource.druid.web-stat-filter.exclusions</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">*.gif,*.png,*.jpg,*.html,*.js,*.css,*.ico,/druid/*</span>\n<span class=\"token comment\"># Druid StatViewServlet配置，说明请参考Druid Wiki，配置_StatViewServlet配置</span>\n<span class=\"token attr-name\">spring.datasource.druid.stat-view-servlet.enabled</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">true</span>\n<span class=\"token attr-name\">spring.datasource.druid.stat-view-servlet.url-pattern</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">/druid/*</span>\n<span class=\"token attr-name\">spring.datasource.druid.stat-view-servlet.reset-enable</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">true</span>\n<span class=\"token comment\">#设置访问druid监控页的账号和密码,默认没有</span>\n<span class=\"token attr-name\">spring.datasource.druid.stat-view-servlet.login-username</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">admin</span>\n<span class=\"token attr-name\">spring.datasource.druid.stat-view-servlet.login-password</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">admin</span>\n<span class=\"token attr-name\">spring.datasource.druid.stat-view-servlet.allow</span><span class=\"token punctuation\">=</span>\n<span class=\"token attr-name\">spring.datasource.druid.stat-view-servlet.deny</span><span class=\"token punctuation\">=</span></code></pre>\n\n<h4 id=\"访问-druid\"><a href=\"#访问-druid\" class=\"headerlink\" title=\"访问 druid\"></a>访问 druid</h4><p>输入：<span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo4MDgwL2RydWlkLw==\">http://localhost:8080/druid/<i class=\"fa fa-external-link-alt\"></i></span>，查看 Druid 监控面板。</p>\n<p><img src=\"/images/2020/10/image-20201030161817190.png\" alt=\"image-20201030161817190\" loading=\"lazy\"></p>\n<h3 id=\"配置druid\"><a href=\"#配置druid\" class=\"headerlink\" title=\"配置druid\"></a>配置 druid</h3><h4 id=\"引入-Jar-1\"><a href=\"#引入-Jar-1\" class=\"headerlink\" title=\"引入 Jar\"></a>引入 Jar</h4><pre class=\"language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>com.alibaba<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>druid<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>1.2.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n\n<h4 id=\"配置文件-1\"><a href=\"#配置文件-1\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h4><p>配置文件 application.properties：</p>\n<pre class=\"language-properties\" data-language=\"properties\"><code class=\"language-properties\"><span class=\"token attr-name\">spring.datasource.url</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">jdbc:mysql://localhost:3306/test?serverTimezone=UTC</span>\n<span class=\"token attr-name\">spring.datasource.username</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">xxx</span>\n<span class=\"token attr-name\">spring.datasource.password</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">xxx</span>\n<span class=\"token attr-name\">spring.datasource.driverClassName</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">com.mysql.cj.jdbc.Driver</span></code></pre>\n\n<h4 id=\"配置-druid\"><a href=\"#配置-druid\" class=\"headerlink\" title=\"配置 druid\"></a>配置 druid</h4><p>配置 druid 使其配置的参数生效。</p>\n<p>新建一个类：DruidConfig，注意包的引入：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>druid<span class=\"token punctuation\">.</span>pool<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DruidDataSource</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>druid<span class=\"token punctuation\">.</span>support<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">StatViewServlet</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>druid<span class=\"token punctuation\">.</span>support<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">WebStatFilter</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>properties<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ConfigurationProperties</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FilterRegistrationBean</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ServletRegistrationBean</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Bean</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Configuration</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DataSource</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HashMap</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DruidConfig</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token annotation punctuation\">@ConfigurationProperties</span><span class=\"token punctuation\">(</span>prefix <span class=\"token operator\">=</span> <span class=\"token string\">\"spring.datasource\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">DataSource</span> <span class=\"token function\">getDataSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DruidDataSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 配置Druid监控</span>\n    <span class=\"token comment\">// 配置一个管理后台的Servlet</span>\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ServletRegistrationBean</span> <span class=\"token function\">statViewServlet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">ServletRegistrationBean</span> bean <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ServletRegistrationBean</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">StatViewServlet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/druid/*\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> initParams<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        initParams<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"loginUsername\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        initParams<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"loginPassword\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        initParams<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"allow\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 默认就是允许所有访问</span>\n       <span class=\"token comment\">// initParams.put(\"deny\",\"127.0.0.1\"); // 拒绝哪个网址访问，优先级大于allow</span>\n        bean<span class=\"token punctuation\">.</span><span class=\"token function\">setInitParameters</span><span class=\"token punctuation\">(</span>initParams<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> bean<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//2、配置一个web监控的filter</span>\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">FilterRegistrationBean</span> <span class=\"token function\">webStatFilter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">FilterRegistrationBean</span> bean <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FilterRegistrationBean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        bean<span class=\"token punctuation\">.</span><span class=\"token function\">setFilter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">WebStatFilter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> initParams <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 配置不拦截哪些请求</span>\n        initParams<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"exclusions\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"*.js,*.css,/druid/*\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        bean<span class=\"token punctuation\">.</span><span class=\"token function\">setInitParameters</span><span class=\"token punctuation\">(</span>initParams<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 配置拦截所有请求</span>\n        bean<span class=\"token punctuation\">.</span><span class=\"token function\">setUrlPatterns</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/*\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span>  bean<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<h4 id=\"访问-druid-1\"><a href=\"#访问-druid-1\" class=\"headerlink\" title=\"访问 druid\"></a>访问 druid</h4><p>输入：<span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo4MDgwL2RydWlkLw==\">http://localhost:8080/druid/<i class=\"fa fa-external-link-alt\"></i></span>，观察 Druid 监控面板。</p>\n<p><img src=\"/images/2020/10/image-20201030161817190.png\" alt=\"image-20201030161817190\" loading=\"lazy\"></p>\n","categories":["Java","JavaJar","SpringBoot"],"tags":["Java","JavaJar","Alibaba","druid"]},{"title":"Windows 环境搭建 Vue 开发环境","url":"/2020/10/2020-10-31-Windows%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BAVue%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/","content":"<h3 id=\"关于-Vue\"><a href=\"#关于-Vue\" class=\"headerlink\" title=\"关于 Vue\"></a>关于 Vue</h3><p>VueJS 是一个开源的渐进式 JavaScript 框架，用于开发交互式 Web 界面。</p>\n<p>它是用于简化 Web 开发的着名框架之一，VueJS 专注于视图层。它可以很容易地集成到大型项目前端开发没有任何问题。</p>\n<ul>\n<li>Vue 中文网：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbi52dWVqcy5vcmcv\">https://cn.vuejs.org/<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<a id=\"more\"></a>\n\n<h3 id=\"安装node-js\"><a href=\"#安装node-js\" class=\"headerlink\" title=\"安装node.js\"></a>安装 node.js</h3><h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><p>下载地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ub2RlanMub3JnL2VuL2Rvd25sb2FkLw==\">https://nodejs.org/en/download/<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>安装完成：</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> -v\n<span class=\"token number\">6.14</span>.6</code></pre>\n\n<h4 id=\"设置路径\"><a href=\"#设置路径\" class=\"headerlink\" title=\"设置路径\"></a>设置路径</h4><p><strong>设置 nodejs prefix（全局）和 cache（缓存）路径</strong></p>\n<ol>\n<li><p>在 nodejs 安装路径下，新建 node_global 和 node_cache 两个文件夹</p>\n<p><img src=\"/images/2020/10/1604114210487.png\" alt=\"1604114210487\" loading=\"lazy\"></p>\n</li>\n<li><p>设置缓存文件夹</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> config <span class=\"token builtin class-name\">set</span> cache <span class=\"token string\">\"D:<span class=\"token entity\" title=\"\\v\">\\v</span>ueProject<span class=\"token entity\" title=\"\\n\">\\n</span>odejs<span class=\"token entity\" title=\"\\n\">\\n</span>ode_cache\"</span></code></pre>\n\n<p>设置全局模块存放路径</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> config <span class=\"token builtin class-name\">set</span> prefix <span class=\"token string\">\"D:<span class=\"token entity\" title=\"\\v\">\\v</span>ueProject<span class=\"token entity\" title=\"\\n\">\\n</span>odejs<span class=\"token entity\" title=\"\\n\">\\n</span>ode_global\"</span></code></pre>\n\n</li>\n</ol>\n<p>设置成功后，之后用命令 npm install XXX -g 安装以后模块就在 D:\\vueProject\\nodejs\\node_global 里</p>\n<h4 id=\"安装镜像\"><a href=\"#安装镜像\" class=\"headerlink\" title=\"安装镜像\"></a>安装镜像</h4><p>基于 Node.js 安装 cnpm（淘宝镜像）</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> -g cnpm --registry<span class=\"token operator\">=</span>https://registry.npm.taobao.org</code></pre>\n\n<p> 安装完成：</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ cnpm -v\ncnpm@6.1.1 <span class=\"token punctuation\">(</span>C:<span class=\"token punctuation\">\\</span>Users<span class=\"token punctuation\">\\</span>hello<span class=\"token punctuation\">\\</span>AppData<span class=\"token punctuation\">\\</span>Roaming<span class=\"token punctuation\">\\</span>npm<span class=\"token punctuation\">\\</span>node_modules<span class=\"token punctuation\">\\</span>cnpm<span class=\"token punctuation\">\\</span>lib<span class=\"token punctuation\">\\</span>parse_argv.js<span class=\"token punctuation\">)</span>\nnpm@6.14.8 <span class=\"token punctuation\">(</span>C:<span class=\"token punctuation\">\\</span>Users<span class=\"token punctuation\">\\</span>hello<span class=\"token punctuation\">\\</span>AppData<span class=\"token punctuation\">\\</span>Roaming<span class=\"token punctuation\">\\</span>npm<span class=\"token punctuation\">\\</span>node_modules<span class=\"token punctuation\">\\</span>cnpm<span class=\"token punctuation\">\\</span>node_modules<span class=\"token punctuation\">\\</span>npm<span class=\"token punctuation\">\\</span>lib<span class=\"token punctuation\">\\</span>npm.js<span class=\"token punctuation\">)</span>\nnode@12.18.3 <span class=\"token punctuation\">(</span>C:<span class=\"token punctuation\">\\</span>Program Files<span class=\"token punctuation\">\\</span>nodejs<span class=\"token punctuation\">\\</span>node.exe<span class=\"token punctuation\">)</span>\nnpminstall@3.28.0 <span class=\"token punctuation\">(</span>C:<span class=\"token punctuation\">\\</span>Users<span class=\"token punctuation\">\\</span>hello<span class=\"token punctuation\">\\</span>AppData<span class=\"token punctuation\">\\</span>Roaming<span class=\"token punctuation\">\\</span>npm<span class=\"token punctuation\">\\</span>node_modules<span class=\"token punctuation\">\\</span>cnpm<span class=\"token punctuation\">\\</span>node_modules<span class=\"token punctuation\">\\</span>npminstall<span class=\"token punctuation\">\\</span>lib<span class=\"token punctuation\">\\</span>index.js<span class=\"token punctuation\">)</span>\n<span class=\"token assign-left variable\">prefix</span><span class=\"token operator\">=</span>C:<span class=\"token punctuation\">\\</span>Users<span class=\"token punctuation\">\\</span>hello<span class=\"token punctuation\">\\</span>AppData<span class=\"token punctuation\">\\</span>Roaming<span class=\"token punctuation\">\\</span>npm\nwin32 x64 <span class=\"token number\">10.0</span>.18363\n<span class=\"token assign-left variable\">registry</span><span class=\"token operator\">=</span>https://r.npm.taobao.org</code></pre>\n\n<h4 id=\"设置环境变量\"><a href=\"#设置环境变量\" class=\"headerlink\" title=\"设置环境变量\"></a>设置环境变量</h4><p>设置环境变量可以使得住任意目录下都可以使用 cnpm、vue 等命令，而不需要输入全路径。</p>\n<ol>\n<li><p>鼠标右键 \"此电脑\"，选择 “属性” 菜单，在弹出的 “系统” 对话框中左侧选择 “高级系统设置”，弹出 “系统属性” 对话框。</p>\n</li>\n<li><p>修改系统变量 PATH</p>\n<p><strong>增加</strong>：D:\\vueProject\\nodejs\\node_global</p>\n<p><strong>默认</strong>：C:\\Users\\hello\\AppData\\Roaming\\npm</p>\n</li>\n<li><p>新增系统变量 NODE_PATH，为 nodejs 安装目录下的 node_modules 文件夹。</p>\n<p>增加：C:\\Program Files\\nodejs\\node_modules\\</p>\n</li>\n</ol>\n<h3 id=\"安装-vue\"><a href=\"#安装-vue\" class=\"headerlink\" title=\"安装 vue\"></a>安装 vue</h3><p>安装 vue</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">cnpm <span class=\"token function\">install</span> vue -g</code></pre>\n\n<p>安装 vue 命令行工具</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">cnpm <span class=\"token function\">install</span> vue-cli -g</code></pre>\n\n<p>验证安装：</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ vue -V\n<span class=\"token number\">2.9</span>.6</code></pre>\n\n<h3 id=\"创建新项目\"><a href=\"#创建新项目\" class=\"headerlink\" title=\"创建新项目\"></a>创建新项目</h3><h4 id=\"根据模版创建新项目\"><a href=\"#根据模版创建新项目\" class=\"headerlink\" title=\"根据模版创建新项目\"></a>根据模版创建新项目</h4><p>在当前目录下输入 “vue init webpack-simple 项目名称（使用英文）”。</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">vue init webpack-simple mytest</code></pre>\n\n<p><img src=\"/images/2020/10/1604115030876.png\" alt=\"1604115030876\" loading=\"lazy\"></p>\n<p>初始化完成后的项目目录结构如下：</p>\n<p><img src=\"/images/2020/10/1604115059665.png\" alt=\"1604115059665\" loading=\"lazy\"></p>\n<h4 id=\"安装工程依赖模块\"><a href=\"#安装工程依赖模块\" class=\"headerlink\" title=\"安装工程依赖模块\"></a>安装工程依赖模块</h4><p>定位到 mytest 的工程目录下，安装该工程依赖的模块。</p>\n<p>这些模块将被安装在：mytest\\node_module 目录下，node_module 文件夹会被新建，而且根据 package.json 的配置下载该项目的 modules</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">cd</span> mytest\n$ cnpm <span class=\"token function\">install</span></code></pre>\n\n<h4 id=\"运行项目\"><a href=\"#运行项目\" class=\"headerlink\" title=\"运行项目\"></a>运行项目</h4><p>测试一下该项目是否能够正常工作，这种方式是用 nodejs 来启动。</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ cnpm run dev</code></pre>\n\n<p>如下所示：</p>\n<p><img src=\"/images/2020/10/1604115322707.png\" alt=\"1604115322707\" loading=\"lazy\"></p>\n<p>此时，访问 <span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo4MDgwLw==\">http://localhost:8080/<i class=\"fa fa-external-link-alt\"></i></span> ，项目正常运行。</p>\n<p><img src=\"/images/2020/10/1604115281655.png\" alt=\"1604115281655\" loading=\"lazy\"></p>\n<h3 id=\"项目导入-idea\"><a href=\"#项目导入-idea\" class=\"headerlink\" title=\"项目导入 idea\"></a>项目导入 idea</h3><h4 id=\"idea-导入项目\"><a href=\"#idea-导入项目\" class=\"headerlink\" title=\"idea 导入项目\"></a>idea 导入项目</h4><p>NodeJS 插件需要 IntelliJ IDEA Ultimate，因为它依赖于仅在商业版中提供的 JavaScript 插件。</p>\n<h5 id=\"官网下载Vue-js插件\"><a href=\"#官网下载Vue-js插件\" class=\"headerlink\" title=\"官网下载Vue.js插件\"></a>官网下载 Vue.js 插件</h5><p>下载链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wbHVnaW5zLmpldGJyYWlucy5jb20vcGx1Z2luLzk0NDItdnVlLWpzL3ZlcnNpb25z\">Vue.js - Plugins<i class=\"fa fa-external-link-alt\"></i></span></p>\n<ol>\n<li><p> 下载合适版本的插件。</p>\n</li>\n<li><p>安装插件 settings -&gt; plugins -&gt; install plugin from disk，然后选择下载的插件。</p>\n<p><img src=\"/images/2020/10/1604120026356.png\" alt=\"1604120026356\" loading=\"lazy\"></p>\n</li>\n<li><p>重启 IDEA</p>\n</li>\n<li><p>导入项目。</p>\n</li>\n</ol>\n<p><img src=\"/images/2020/10/1604116285451.png\" alt=\"1604116285451\" loading=\"lazy\"></p>\n<h4 id=\"vscode-导入项目\"><a href=\"#vscode-导入项目\" class=\"headerlink\" title=\"vscode 导入项目\"></a>vscode 导入项目</h4><ol>\n<li><p>先安装 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9tYXJrZXRwbGFjZS52aXN1YWxzdHVkaW8uY29tL2l0ZW1zP2l0ZW1OYW1lPW9jdHJlZi52ZXR1cg==\">vetur 插件<i class=\"fa fa-external-link-alt\"></i></span>。</p>\n<p><img src=\"/images/2020/10/1604157179067.png\" alt=\"1604157179067\" loading=\"lazy\"></p>\n</li>\n<li><p>导入项目</p>\n</li>\n<li><p>启动项目，终端运行 <code>npm run dev</code></p>\n<p><img src=\"/images/2020/10/1604229209982.png\" alt=\"1604229209982\" loading=\"lazy\"></p>\n</li>\n</ol>\n","categories":["软件","Windows","Vue"],"tags":["软件","Windows","Vue"]},{"title":"MySQL 运维工具 percona-toolkit 的使用","url":"/2020/10/2020-10-31-MySQL%E8%BF%90%E7%BB%B4%E5%B7%A5%E5%85%B7percona-toolkit%E7%9A%84%E4%BD%BF%E7%94%A8/","content":"<p>percona-toolkit 是一组高级命令行工具的集合，可以查看当前服务的摘要信息，磁盘检测，分析慢查询日志，查找重复索引，实现表同步等等。</p>\n<p>官网：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucGVyY29uYS5jb20vc29mdHdhcmUvZGF0YWJhc2UtdG9vbHMvcGVyY29uYS10b29sa2l0\">https://www.percona.com/software/database-tools/percona-toolkit<i class=\"fa fa-external-link-alt\"></i></span></p>\n<a id=\"more\"></a>\n\n<h3 id=\"安装-percona-toolkit\"><a href=\"#安装-percona-toolkit\" class=\"headerlink\" title=\"安装 percona-toolkit\"></a>安装 percona-toolkit</h3><h4 id=\"仓库安装\"><a href=\"#仓库安装\" class=\"headerlink\" title=\"仓库安装\"></a>仓库安装</h4><ul>\n<li><p>Debian</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">apt-cache</span> search percona-toolkit\npercona-toolkit - Advanced MySQL and system command-line tools\n$ <span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> percona-toolkit</code></pre>\n\n</li>\n</ul>\n<h4 id=\"下载安装\"><a href=\"#下载安装\" class=\"headerlink\" title=\"下载安装\"></a>下载安装</h4><p>访问 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucGVyY29uYS5jb20vZG93bmxvYWRzL3BlcmNvbmEtdG9vbGtpdC9MQVRFU1Qv\">下载地址<i class=\"fa fa-external-link-alt\"></i></span>，根据系统版本选择对应的版本进行下载。</p>\n<ul>\n<li><p>Debian</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> dpkg -i percona-toolkit_3.2.1-1.buster_amd64.deb</code></pre>\n\n</li>\n</ul>\n<h3 id=\"pt-query-digest\"><a href=\"#pt-query-digest\" class=\"headerlink\" title=\"pt-query-digest\"></a>pt-query-digest</h3><p>pt-query-digest 主要用来分析 mysql 的慢日志，并格式化输出以便于查看和分析。</p>\n<h4 id=\"报告分析\"><a href=\"#报告分析\" class=\"headerlink\" title=\"报告分析\"></a>报告分析</h4><ul>\n<li><strong>总体统计结果</strong><ul>\n<li> Overall：总共有多少条查询 </li>\n<li>Time range：查询执行的时间范围 </li>\n<li>unique：唯一查询数量，即对查询条件进行参数化以后，总共有多少个不同的查询 </li>\n<li>total：总计 </li>\n<li>min：最小 </li>\n<li>max：最大 </li>\n<li>avg：平均 95%：把所有值从小到大排列，位置位于 95% 的那个数，这个数一般最具有参考价值 </li>\n<li>median：中位数，把所有值从小到大排列，位置位于中间那个数</li>\n</ul>\n</li>\n<li><strong>查询分组统计结果</strong><ul>\n<li> Rank：所有语句的排名，默认按查询时间降序排列，通过 --order-by 指定 </li>\n<li>Query ID：语句的 ID，（去掉多余空格和文本字符，计算 hash 值） </li>\n<li>Response：总的响应时间 </li>\n<li>time：该查询在本次分析中总的时间占比 </li>\n<li>calls：执行次数，即本次分析总共有多少条这种类型的查询语句 </li>\n<li>R/Call：平均每次执行的响应时间 </li>\n<li>V/M：响应时间 Variance-to-mean 的比率 </li>\n<li>Item：查询对象</li>\n</ul>\n</li>\n<li><strong>每一种查询的详细统计结果</strong><ul>\n<li> ID：查询的 ID 号，和上图的 Query ID 对应 </li>\n<li>Databases：数据库名 </li>\n<li>Users：各个用户执行的次数（占比） </li>\n<li>Query_time distribution ：查询时间分布，长短体现区间占比。</li>\n<li>Tables：查询中涉及到的表 </li>\n<li>Explain：SQL 语句。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"使用示例\"><a href=\"#使用示例\" class=\"headerlink\" title=\"使用示例\"></a>使用示例</h4><ul>\n<li><p>直接分析慢查询文件：</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ pt-query-digest mysql-bin.288298.log <span class=\"token operator\">&gt;</span> report1.log</code></pre>\n</li>\n<li><p>解析 MySQL 的 Binlog 日志：</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ mysqlbinlog mysql-bin88.0001 <span class=\"token operator\">&gt;</span> mysql-bin88.0001.sql\n$ pt-query-digest mysql-bin.288298.log <span class=\"token operator\">&gt;</span> report1.log</code></pre>\n\n\n</li>\n</ul>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vamF2YXN0YWNrL3AvMTI2MDYxMDYuaHRtbA==\">https://www.cnblogs.com/javastack/p/12606106.html<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n","categories":["Database","MySQL"],"tags":["MySQL"]},{"title":"Spring Boot+Vue 前后端分离开发实例","url":"/2020/11/2020-11-01-Spring%20Boot+Vue%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E5%BC%80%E5%8F%91%E5%AE%9E%E4%BE%8B/","content":"<h3 id=\"项目说明\"><a href=\"#项目说明\" class=\"headerlink\" title=\"项目说明\"></a>项目说明</h3><p>本项目基于 SpringBoot 和 Vue，搭建一个前后端分离项目的 demo。</p>\n<p>主要效果是通过前后端分离，将 MySQL 数据库中的数据，展示显示在页面上。</p>\n<p>基础依赖：</p>\n<ul>\n<li>数据库存储：MySQL</li>\n<li> 前端项目：Vue</li>\n<li> 后端项目：springboot</li>\n</ul>\n<a id=\"more\"></a>\n\n<h3 id=\"创建-SpringBoot-后端项目\"><a href=\"#创建-SpringBoot-后端项目\" class=\"headerlink\" title=\"创建 SpringBoot 后端项目\"></a>创建 SpringBoot 后端项目</h3><p>使用 idea 的 Spring Assistant 插件 创建项目：</p>\n<ul>\n<li>Developer Tools：Lombok</li>\n<li>Web：Spring Web</li>\n<li>SQL：Spring Data JPA、MySQL Driver</li>\n</ul>\n<h3 id=\"创建-vue-前端项目\"><a href=\"#创建-vue-前端项目\" class=\"headerlink\" title=\"创建 vue 前端项目\"></a>创建 vue 前端项目</h3><p>创建项目</p>\n<pre class=\"language-none\"><code class=\"language-none\">vue init webpack-simple booktest</code></pre>\n\n<p>运行项目</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> booktest\ncnpm <span class=\"token function\">install</span> vue -g\ncnpm run dev</code></pre>\n\n<h3 id=\"编写-SpringBoot-后端接口\"><a href=\"#编写-SpringBoot-后端接口\" class=\"headerlink\" title=\"编写 SpringBoot 后端接口\"></a>编写 SpringBoot 后端接口</h3><h4 id=\"代码文件\"><a href=\"#代码文件\" class=\"headerlink\" title=\"代码文件\"></a>代码文件</h4><p>配置文件</p>\n<pre class=\"language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">datasource</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> jdbc<span class=\"token punctuation\">:</span>mysql<span class=\"token punctuation\">:</span>//localhost<span class=\"token punctuation\">:</span>3306/vuedb<span class=\"token punctuation\">?</span>useUnicode=true<span class=\"token important\">&amp;characterEncoding=UTF-8&amp;serverTimezone=Asia/Shanghai</span>\n    <span class=\"token key atrule\">username</span><span class=\"token punctuation\">:</span> root\n    <span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> jue\n    <span class=\"token key atrule\">driver-class-name</span><span class=\"token punctuation\">:</span> com.mysql.cj.jdbc.Driver\n  <span class=\"token key atrule\">jpa</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">show-sql</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span> <span class=\"token comment\"># 日志打印 SQL</span>\n    <span class=\"token key atrule\">properties</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">hibernate</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">format_sql</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span> <span class=\"token comment\"># 格式化日志 SQL</span>\n<span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8181</span></code></pre>\n\n<p>Bean</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Entity</span>\n<span class=\"token annotation punctuation\">@Data</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Book</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Id</span>\n    <span class=\"token annotation punctuation\">@GeneratedValue</span><span class=\"token punctuation\">(</span>strategy <span class=\"token operator\">=</span> <span class=\"token class-name\">GenerationType</span><span class=\"token punctuation\">.</span>IDENTITY<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> author<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<p>DAO</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">BookDAO</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">JpaRepository</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Book</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span></code></pre>\n\n<p>Controller</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@RestController</span>\n<span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/book\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BookController</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">BookDAO</span> bookRepository<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/books\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Book</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> bookRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<h4 id=\"测试类\"><a href=\"#测试类\" class=\"headerlink\" title=\"测试类\"></a>测试类</h4><pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@SpringBootTest</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BookControllerTest</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">BookDAO</span> repository<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">books</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Book</span><span class=\"token punctuation\">&gt;</span></span> bookList <span class=\"token operator\">=</span> repository<span class=\"token punctuation\">.</span><span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>bookList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<p>执行打印结果：</p>\n<blockquote>\n<p>[Book (id=1, name = 解忧杂货店，author = 东野圭吾), Book (id=2, name = 追风筝的人，author = 卡勒德・胡赛尼)]</p>\n</blockquote>\n<h4 id=\"接口验证\"><a href=\"#接口验证\" class=\"headerlink\" title=\"接口验证\"></a>接口验证</h4><p>访问接口：<span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo4MTgxL2Jvb2svYm9va3M=\">http://localhost:8181/book/books<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p><img src=\"/images/2020/11/image-20201102103119200.png\" alt=\"image-20201102103119200\" loading=\"lazy\"></p>\n<h3 id=\"编写-vue-前端项目\"><a href=\"#编写-vue-前端项目\" class=\"headerlink\" title=\"编写 vue 前端项目\"></a>编写 vue 前端项目</h3><h4 id=\"代码文件-1\"><a href=\"#代码文件-1\" class=\"headerlink\" title=\"代码文件\"></a>代码文件</h4><p>修改 App.vue：</p>\n<pre class=\"language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div id=\"app\"&gt;\n    &lt;table&gt;\n      &lt;tr&gt;\n        &lt;td&gt;编号&lt;/td&gt;\n        &lt;td&gt;书名&lt;/td&gt;\n        &lt;td&gt;作者&lt;/td&gt;\n      &lt;/tr&gt;\n      &lt;tr v-for=\"item in books\"&gt;\n        &lt;td&gt;{{item.id}}&lt;/td&gt;\n        &lt;td&gt;{{item.name}}&lt;/td&gt;\n        &lt;td&gt;{{item.author}}&lt;/td&gt;\n      &lt;/tr&gt;\n    &lt;/table&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  name: 'app',\n  data () {\n    return {\n      books: [\n        {\n          id:1,\n          name:\"test1\",\n          author:\"author1\"\n        },\n        {\n          id:2,\n          name:\"test2\",\n          author:\"author2\"\n        },\n        {\n          id:3,\n          name:\"test3\",\n          author:\"author3\"\n        }\n      ]\n    }\n  }\n}\n&lt;/script&gt;</code></pre>\n\n<h4 id=\"访问验证\"><a href=\"#访问验证\" class=\"headerlink\" title=\"访问验证\"></a>访问验证</h4><p>访问地址：<span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo4MDgwLw==\">http://localhost:8080/<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>结果如下：</p>\n<p><img src=\"/images/2020/11/image-20201102104348239.png\" alt=\"image-20201102104348239\" loading=\"lazy\"></p>\n<h3 id=\"前后端数据同步\"><a href=\"#前后端数据同步\" class=\"headerlink\" title=\"前后端数据同步\"></a>前后端数据同步</h3><h4 id=\"添加-axios\"><a href=\"#添加-axios\" class=\"headerlink\" title=\"添加 axios\"></a>添加 axios</h4><p>安装 axios</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> axios --save</code></pre>\n\n<p>在 main.js 配置</p>\n<pre class=\"language-none\"><code class=\"language-none\">import axios from 'axios'\nVue.prototype.$axios = axios</code></pre>\n\n<h4 id=\"修改-App-vue\"><a href=\"#修改-App-vue\" class=\"headerlink\" title=\"修改  App.vue\"></a>修改  App.vue</h4><pre class=\"language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;script&gt;\nexport default {\n  name: 'app',\n  data () {\n    return ...\n  },\n  created(){\n    this.$axios.get('http://localhost:8181/book/books').then(function(resp){\n      console.log(resp)\n    })\n  }\n}\n&lt;/script&gt;</code></pre>\n\n<p>此时访问：<span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo4MDgwLw==\">http://localhost:8080/<i class=\"fa fa-external-link-alt\"></i></span>，前端报错：</p>\n<blockquote>\n<p>Access to XMLHttpRequest at '<span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo4MTgxL2Jvb2svYm9va3Mn\">http://localhost:8181/book/books'<i class=\"fa fa-external-link-alt\"></i></span> from origin '<span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo4MDgwJw==\">http://localhost:8080'<i class=\"fa fa-external-link-alt\"></i></span> has been blocked by CORS policy: No 'Access-Control-Allow-Origin' header is present on the requested resource.</p>\n</blockquote>\n<p>这是由于 <strong>跨域问题</strong></p>\n<p>什么是跨域？<br>当一个请求 url 的协议、域名、端口三者之间任意一个与当前页面 url 不同即为跨域！</p>\n<h4 id=\"解决跨域问题\"><a href=\"#解决跨域问题\" class=\"headerlink\" title=\"解决跨域问题\"></a>解决跨域问题</h4><p>后端新增 Java 类并重新启动：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Configuration</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">CorsRegistry</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">WebMvcConfigurer</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CrosConfig</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">WebMvcConfigurer</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addCorsMappings</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CorsRegistry</span> registry<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        registry<span class=\"token punctuation\">.</span><span class=\"token function\">addMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/**\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">allowedOrigins</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">allowedMethods</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"HEAD\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"POST\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"PUT\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"DELETE\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"OPTIONS\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">allowCredentials</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">maxAge</span><span class=\"token punctuation\">(</span><span class=\"token number\">3600</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">allowedHeaders</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<p>此时，跨域问题解决。</p>\n<p>再次访问：<span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo4MDgwLw==\">http://localhost:8080/<i class=\"fa fa-external-link-alt\"></i></span>，前端打印如下所示：</p>\n<p><img src=\"/images/2020/11/image-20201102110008781.png\" alt=\"image-20201102110008781\" loading=\"lazy\"></p>\n<h4 id=\"展示后端数据\"><a href=\"#展示后端数据\" class=\"headerlink\" title=\"展示后端数据\"></a>展示后端数据</h4><p>再次修改  App.vue</p>\n<pre class=\"language-vue\" data-language=\"vue\"><code class=\"language-vue\">created(){\n  var _this = this\n  this.$axios.get('http://localhost:8181/book/books/').then(function(resp){\n    _this.books=resp.data\n  })\n}</code></pre>\n\n<p>再次访问：<span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo4MDgwLw==\">http://localhost:8080/<i class=\"fa fa-external-link-alt\"></i></span>，显示如下：</p>\n<p><img src=\"/images/2020/11/image-20201102111045453.png\" alt=\"image-20201102111045453\" loading=\"lazy\"></p>\n","categories":["Java","SpringBoot","Vue","Node.js"],"tags":["Java","Vue","SpringBoot"]},{"title":"跨平台桌面应用开发工具 Electron 使用入门","url":"/2020/11/2020-11-02-%E8%B7%A8%E5%B9%B3%E5%8F%B0%E6%A1%8C%E9%9D%A2%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7Electron%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8/","content":"<h3 id=\"Electron介绍\"><a href=\"#Electron介绍\" class=\"headerlink\" title=\"Electron介绍\"></a>Electron 介绍</h3><p>Electron 提供了丰富的本地（操作系统）的 API，使你能够使用纯 JavaScript 来创建桌面应用程序。</p>\n<p>与其它各种的 Node.js 运行时不同的是 Electron 专注于桌面应用程序而不是 Web 服务器。</p>\n<ul>\n<li>Electron 官网：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZWxlY3Ryb25qcy5vcmcv\">https://www.electronjs.org/<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>GitHub：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2VsZWN0cm9uL2VsZWN0cm9u\">https://github.com/electron/electron<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li> 中文文档：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudzNjc2Nob29sLmNuL2VsZWN0cm9ubWFudWFsLw==\">https://www.w3cschool.cn/electronmanual/<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<a id=\"more\"></a>\n\n<h3 id=\"Electron-安装\"><a href=\"#Electron-安装\" class=\"headerlink\" title=\"Electron 安装\"></a>Electron 安装</h3><h4 id=\"安装-Node-js\"><a href=\"#安装-Node-js\" class=\"headerlink\" title=\"安装 Node.js\"></a>安装 Node.js</h4><p>安装 Electron 首先要确保安装 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ub2RlanMub3JnL2VuL2Rvd25sb2FkLw==\">Node.js<i class=\"fa fa-external-link-alt\"></i></span>。</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ node -v\nv12.18.3\n$ <span class=\"token function\">npm</span> -v\n<span class=\"token number\">6.14</span>.6</code></pre>\n\n<h4 id=\"安装-Electron\"><a href=\"#安装-Electron\" class=\"headerlink\" title=\"安装 Electron\"></a>安装 Electron</h4><p>创建文件夹，并安装：</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> my-electron-app <span class=\"token operator\">&amp;&amp;</span> <span class=\"token builtin class-name\">cd</span> my-electron-app\n<span class=\"token function\">npm</span> init -y\n<span class=\"token function\">npm</span> i --save-dev electron</code></pre>\n\n<h3 id=\"创建应用程序\"><a href=\"#创建应用程序\" class=\"headerlink\" title=\"创建应用程序\"></a>创建应用程序</h3><p>一个 Electron 应用的目录结构如下：</p>\n<pre class=\"language-none\"><code class=\"language-none\">your-app/\n├── package.json\n├── main.js\n└── index.html</code></pre>\n\n<h4 id=\"main-js\"><a href=\"#main-js\" class=\"headerlink\" title=\"main.js\"></a>main.js</h4><p>主脚本指定 <code>main.js</code> 将运行 Main 进程的 Electron 应用程序（在本例中为文件）的入口点。</p>\n<p>通常，在 Main 进程中运行的脚本控制应用程序的生命周期，显示图形用户界面及其元素，执行本机操作系统交互并在网页内创建 Renderer 进程。</p>\n<pre class=\"language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> app<span class=\"token punctuation\">,</span> BrowserWindow <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'electron'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">createWindow</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> win <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BrowserWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    width<span class=\"token operator\">:</span> <span class=\"token number\">800</span><span class=\"token punctuation\">,</span>\n    height<span class=\"token operator\">:</span> <span class=\"token number\">600</span><span class=\"token punctuation\">,</span>\n    webPreferences<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      nodeIntegration<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  win<span class=\"token punctuation\">.</span><span class=\"token function\">loadFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'index.html'</span><span class=\"token punctuation\">)</span>\n  win<span class=\"token punctuation\">.</span>webContents<span class=\"token punctuation\">.</span><span class=\"token function\">openDevTools</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">whenReady</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>createWindow<span class=\"token punctuation\">)</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'window-all-closed'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>platform <span class=\"token operator\">!==</span> <span class=\"token string\">'darwin'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    app<span class=\"token punctuation\">.</span><span class=\"token function\">quit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'activate'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>BrowserWindow<span class=\"token punctuation\">.</span><span class=\"token function\">getAllWindows</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">createWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n\n<ul>\n<li>第 1 行：首先，导入包的 <code>app</code> 和 <code>BrowserWindow</code> 模块，<code>electron</code> 以便能够管理应用程序的生命周期事件，以及创建和控制浏览器窗口。</li>\n<li>第 3 行：此后，您定义一个函数，该函数创建一个启用了节点集成的<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZWxlY3Ryb25qcy5vcmcvZG9jcy9hcGkvYnJvd3Nlci13aW5kb3cjbmV3LWJyb3dzZXJ3aW5kb3dvcHRpb25z\">新浏览器窗口<i class=\"fa fa-external-link-alt\"></i></span>，将 <code>index.html</code> 文件加载到该窗口中（第 12 行，我们将在后面讨论文件）并打开 Developer Tools（第 13 行）。</li>\n<li>第 16 行：<code>createWindow</code> 在<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZWxlY3Ryb25qcy5vcmcvZG9jcy9hcGkvYXBwI2FwcHdoZW5yZWFkeQ==\">初始化<i class=\"fa fa-external-link-alt\"></i></span> Electron 应用程序后，通过调用函数来创建新的浏览器窗口。</li>\n<li>第 18 行：您添加了一个新的侦听器，当它不再有打开的窗口时，它会尝试退出该应用程序。由于操作系统的<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zdXBwb3J0LmFwcGxlLmNvbS9lbi1jYS9ndWlkZS9tYWMtaGVscC9tY2hscDI0NjkvbWFj\">窗口管理行为，<i class=\"fa fa-external-link-alt\"></i></span>该侦听器在 macOS 上是禁止操作的。</li>\n<li>第 24 行：您添加了一个新的侦听器，该侦听器仅在应用程序被激活后没有可见窗口时才创建新的浏览器窗口。例如，在第一次启动应用程序后，或重新启动已经运行的应用程序。</li>\n</ul>\n<h4 id=\"index-html\"><a href=\"#index-html\" class=\"headerlink\" title=\"index.html\"></a>index.html</h4><p>初始化应用程序后，这就是您要显示的网页。该网页代表渲染器过程。您可以创建多个浏览器窗口，其中每个窗口使用其自己的独立渲染器。可以选择通过 <code>nodeIntegration</code> 首选项为每个窗口授予对 Node.js API 的完全访问权限。</p>\n<p>该 <code>index.html</code> 页面如下所示：</p>\n<pre class=\"language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">&gt;</span></span>Hello World!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">http-equiv</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Content-Security-Policy<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>script-src <span class=\"token punctuation\">'</span>self<span class=\"token punctuation\">'</span> <span class=\"token punctuation\">'</span>unsafe-inline<span class=\"token punctuation\">'</span>;<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span>Hello World!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span>\n    We are using node <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"><span class=\"token language-javascript\">document<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>versions<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">)</span></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>,\n    Chrome <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"><span class=\"token language-javascript\">document<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>versions<span class=\"token punctuation\">.</span>chrome<span class=\"token punctuation\">)</span></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>,\n    and Electron <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"><span class=\"token language-javascript\">document<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>versions<span class=\"token punctuation\">.</span>electron<span class=\"token punctuation\">)</span></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>.\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n\n<h4 id=\"package-json\"><a href=\"#package-json\" class=\"headerlink\" title=\"package.json\"></a>package.json</h4><p>Electron 应用程序使用 <code>package.json</code> 文件作为主要入口点（与任何其他 Node.js 应用程序一样）。</p>\n<p>应用程序的主要脚本是 <code>main.js</code>，因此请相应地修改 <code>package.json</code> 文件：</p>\n<pre class=\"language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"electrontest\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"main\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"main.js\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"electron .\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  ...\n<span class=\"token punctuation\">}</span></code></pre>\n\n<h4 id=\"运行应用程序\"><a href=\"#运行应用程序\" class=\"headerlink\" title=\"运行应用程序\"></a>运行应用程序</h4><pre class=\"language-none\"><code class=\"language-none\">npm start</code></pre>\n\n<p>效果如下：</p>\n<p><img src=\"/images/2020/11/image-20201102144240472.png\" alt=\"image-20201102144240472\" loading=\"lazy\"></p>\n<h3 id=\"打包应用程序\"><a href=\"#打包应用程序\" class=\"headerlink\" title=\"打包应用程序\"></a>打包应用程序</h3><h4 id=\"安装打包软件\"><a href=\"#安装打包软件\" class=\"headerlink\" title=\"安装打包软件\"></a>安装打包软件</h4><p><strong>全局安装</strong>打包神器</p>\n<pre class=\"language-none\"><code class=\"language-none\">cnpm install electron-packager -g</code></pre>\n\n<h4 id=\"打包应用程序-1\"><a href=\"#打包应用程序-1\" class=\"headerlink\" title=\"打包应用程序\"></a>打包应用程序</h4><p>在项目文件夹下面，也就是根目录下面打开 DOS 执行打包命令：</p>\n<pre class=\"language-none\"><code class=\"language-none\">electron-packager . HelloWorld --platform=win32 --arch=x64 --icon=computer.ico --out=./out --asar --app-version=0.0.1 --overwrite --ignore=node_modules --electron-version 5.0.0</code></pre>\n\n<p>各个参数介绍：</p>\n<ul>\n<li>HelloWorld ：你将要生成的 exe 文件的名称</li>\n<li> --platform=win32：确定了你要构建哪个平台的应用，可取的值有 darwin, linux, mas, win32</li>\n<li>--arch=x64：决定了使用 x86 还是 x64 还是两个架构都用</li>\n<li> --icon=computer.ico：自定义设置应用图标</li>\n<li> --out=./out：指定打包文件输出的文件夹位置，当前指定的为项目目录下的 out 文件夹</li>\n<li> --asar：该参数可以不加，如果加上，打包之后应用的源码会以.asar 格式存在，否则会以文件夹形式存在</li>\n<li> --app-version=0.0.1：生成应用的版本号</li>\n<li> --overwrite：覆盖原有的 build, 让新生成的包覆盖原来的包</li>\n<li> --ignore=node_modules：如果加上该参数，项目里 node_modules 模块不会被打包进去</li>\n<li> --electron-version 5.0.0：指定当前要构建的 electron 的版本，需要和当前的版本一致，具体可以在 package.json 文件中查看，可以不加该参数，如果不一致，会自动下载</li>\n</ul>\n<h4 id=\"package-json设置打包\"><a href=\"#package-json设置打包\" class=\"headerlink\" title=\"package.json设置打包\"></a>package.json 设置打包</h4><p>建议将打包的命令设置在 <code>package.json</code> 的<code>script</code>中，设置如下:</p>\n<pre class=\"language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"package\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"electron-packager . HelloWorld --platform=win32 --arch=x64 --icon=computer.ico --out=./out --asar --app-version=0.0.1 --overwrite --ignore=node_modules\"</span>  \n<span class=\"token punctuation\">}</span></code></pre>\n\n<p>然后在项目文件夹 DOS 窗口下执行命令：</p>\n<pre class=\"language-none\"><code class=\"language-none\">npm run package</code></pre>\n\n<p>打包效果如下图所示：</p>\n<p><img src=\"/images/2020/11/image-20201102145110935.png\" alt=\"image-20201102145110935\" loading=\"lazy\"></p>\n<p>双击 <code>electrontest.exe</code> 即可运行。</p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZWxlY3Ryb25qcy5vcmcvZG9jcy90dXRvcmlhbC9xdWljay1zdGFydA==\">https://www.electronjs.org/docs/tutorial/quick-start<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n","categories":["软件","Windows"],"tags":["软件","Windows","Electron"]},{"title":"NodeJS 版本管理工具 nvm 使用","url":"/2020/11/2020-11-02-NodeJS%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7nvm%E4%BD%BF%E7%94%A8/","content":"<h3 id=\"nvm-介绍\"><a href=\"#nvm-介绍\" class=\"headerlink\" title=\"nvm 介绍\"></a>nvm 介绍</h3><p><code>nvm</code> 是一个 node 的版本管理工具，通俗来讲就是多个项目开发的时候，可能不是用的同一个版本的 <code>NodeJS</code> 开发的，这个时候我们进行二次开发调试的时候，就需要使用不同 <code>NodeJS</code> 的版本来进行测试，为了方便版本之间的切换，就需要使用的 <code>nvm</code> 来操作。</p>\n<ul>\n<li>GitHub：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2NvcmV5YnV0bGVyL252bS13aW5kb3dz\">https://github.com/coreybutler/nvm-windows<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<a id=\"more\"></a>\n\n<h3 id=\"nvm-安装\"><a href=\"#nvm-安装\" class=\"headerlink\" title=\"nvm 安装\"></a>nvm 安装</h3><p>GitHub 下载地址: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2NvcmV5YnV0bGVyL252bS13aW5kb3dzL3JlbGVhc2Vz\">https://github.com/coreybutler/nvm-windows/releases<i class=\"fa fa-external-link-alt\"></i></span></p>\n<ul>\n<li>nvm-noinstall.zip： 这个是绿色免安装版本，但是使用之前需要配置</li>\n<li> nvm-setup.zip：这是一个安装包，下载之后点击安装，无需配置就可以使用，方便。</li>\n<li>Source code (zip)：zip 压缩的源码</li>\n<li> Sourc code (tar.gz)：tar.gz 的源码，一般用于 Linux 系统 </li>\n</ul>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ nvm version\n<span class=\"token number\">1.1</span>.7</code></pre>\n\n<h3 id=\"nvm-镜像修改\"><a href=\"#nvm-镜像修改\" class=\"headerlink\" title=\"nvm 镜像修改\"></a>nvm 镜像修改</h3><p>将 npm 镜像改为淘宝的镜像 <strong>(此步骤可选，非必要)</strong> 将镜像改为国内是为了，提高 npm 的下载速度，网速高有 vpn 者请忽略！</p>\n<ol>\n<li><p>找到安装目录下 <code>settings.txt</code> 文件并打开</p>\n</li>\n<li><p>新建行，加入以下代码 (切记：是新加 2 行，不要删除之前内容)</p>\n<pre class=\"language-ruby\" data-language=\"ruby\"><code class=\"language-ruby\">node_mirror<span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>npm<span class=\"token punctuation\">.</span>taobao<span class=\"token punctuation\">.</span>org<span class=\"token operator\">/</span>mirrors<span class=\"token regex\">/node/</span> \nnpm_mirror<span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>npm<span class=\"token punctuation\">.</span>taobao<span class=\"token punctuation\">.</span>org<span class=\"token operator\">/</span>mirrors<span class=\"token regex\">/npm/</span></code></pre>\n\n</li>\n</ol>\n<h3 id=\"nvm-使用\"><a href=\"#nvm-使用\" class=\"headerlink\" title=\"nvm 使用\"></a>nvm 使用</h3><ul>\n<li><p><code>nvm version</code> 可以简写为 nvm v：查看 <code>NVM</code> 版本</p>\n</li>\n<li><p><code>nvm list</code>：查看已经安装 <code>NodeJS</code> 版本</p>\n</li>\n<li><p><code>nvm list available</code>：显示可下载版本</p>\n</li>\n<li><p><code>nvm install 版本号</code>：安装指定的版本</p>\n<p>示例: <code>nvm install 11.15.0</code></p>\n<p>安装最新版：<code>nvm install latest</code></p>\n</li>\n<li><p><code>nvm use [version] [arch]</code> [arch] 可以指定 32/64 位：切换到指定版本</p>\n<p>示例: <code>nvm use 11.15.0</code></p>\n</li>\n<li><p><code>nvm uninstall &lt;version&gt;</code>：卸载指定版本</p>\n<p>示例: <code>nvm uninstall 11.15.0</code></p>\n</li>\n<li><p><code>nvm root [path]</code> ：设置各版本安装目录，如果未设置，将使用当前目录。</p>\n</li>\n<li><p><code>nvm on</code>： 启用 node.js 版本管理。</p>\n</li>\n<li><p><code>nvm off</code>： 禁用 node.js 版本管理 (不卸载任何东西)</p>\n</li>\n</ul>\n<h3 id=\"解决示例\"><a href=\"#解决示例\" class=\"headerlink\" title=\"解决示例\"></a>解决示例</h3><p>element UI 命令 et -I 出现 primordials is not defined</p>\n<blockquote>\n<p>ReferenceError: primordials is not defined</p>\n</blockquote>\n<p>这个问题的主要原因是 node 的版本过高<br>需要使用 11.15.0 以下版本</p>\n<p>问题的解决方案</p>\n<ul>\n<li>nvm 切换 node 版本</li>\n<li>卸载 node 重新安装 11.15.0</li>\n</ul>\n<p>此时，可以通过 nvm 来解决。</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ nvm <span class=\"token function\">install</span> <span class=\"token number\">11.15</span>.0\n$ nvm use <span class=\"token number\">11.15</span>.0\n$ node -v\nv11.15.0\n$ npx et -i</code></pre>\n\n\n\n","categories":["软件","Windows","Node.js"],"tags":["软件","Node.js"]},{"title":"PHP 之通过 MySQLi 操作 MySQL 数据库","url":"/2020/10/2020-10-17-PHP%E4%B9%8B%E9%80%9A%E8%BF%87MySQLi%E6%93%8D%E4%BD%9CMySQL%E6%95%B0%E6%8D%AE%E5%BA%93/","content":"<h3 id=\"MySQLi-介绍\"><a href=\"#MySQLi-介绍\" class=\"headerlink\" title=\"MySQLi 介绍\"></a>MySQLi 介绍</h3><p>MySQLi 扩展使得用户可以利用 MySQL 4.1 及其更高版本的新功能，与 mysql 扩展相比，MySQLi 扩展在以下方面有了明显的提高。</p>\n<ul>\n<li><p><strong>兼容性与维护性</strong>：</p>\n<p>MySQLi 扩展可以很容易地使用 MySQL 的新功能，所以 MySQLi 拥有与 MySQL 更高的兼容性。即使 MySQL 的新版本又出现了更多功能，MySQLi 扩展也可以很容易的支持。</p>\n</li>\n<li><p><strong>面向对象</strong>：</p>\n<p>MySQLi 扩展已封装到一个类中，从而可使用面向对象的方式编程。即使对面向对象不了解，MySQLi 扩展也提供了面向过程的编程方式来供用户选择。</p>\n</li>\n<li><p><strong>速度和安全性</strong>：</p>\n<p>MySQLi 扩展执行的速度要比之前版本的 mysql 扩展快了很多。MySQLi 扩展支持 MySQL 新版本的密码杂凑（Password Hashes）和验证程序，更加提高了应用程序的安全性。</p>\n</li>\n<li><p><strong>预准备语句</strong>：</p>\n<p>预准备语句可提高重复使用的语句的性能，MySQLi 扩展提供了对预准备语句的支持。</p>\n</li>\n<li><p><strong>调试功能</strong>：</p>\n<p>MySQLi 扩展进一步改进了调试功能，提高了开发效率。</p>\n</li>\n</ul>\n<a id=\"more\"></a>\n\n<h3 id=\"MySQLi-安装\"><a href=\"#MySQLi-安装\" class=\"headerlink\" title=\"MySQLi 安装\"></a>MySQLi 安装</h3><p>Linux 和 Windows: 在 php7 mysql 包安装时 MySQLi 扩展多数情况下是自动安装的。</p>\n<p>安装详细信息，请查看： <span class=\"exturl\" data-url=\"aHR0cDovL3BocC5uZXQvbWFudWFsL2VuL215c3FsaS5pbnN0YWxsYXRpb24ucGhw\">http://php.net/manual/en/mysqli.installation.php<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>可以通过 phpinfo () 查看是否安装成功：</p>\n<p><img src=\"/images/2020/10/1603075261487.png\" alt=\"1603075261487\" loading=\"lazy\"></p>\n<h3 id=\"连接-MySQL\"><a href=\"#连接-MySQL\" class=\"headerlink\" title=\"连接 MySQL\"></a>连接 MySQL</h3><pre class=\"language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token variable\">$servername</span> <span class=\"token operator\">=</span> <span class=\"token double-quoted-string string\">\"localhost\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$username</span> <span class=\"token operator\">=</span> <span class=\"token double-quoted-string string\">\"user\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$password</span> <span class=\"token operator\">=</span> <span class=\"token double-quoted-string string\">\"password\"</span><span class=\"token punctuation\">;</span>\n \n<span class=\"token comment\">// 创建连接</span>\n<span class=\"token variable\">$conn</span> <span class=\"token operator\">=</span> <span class=\"token function\">mysqli_connect</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$servername</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$username</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$password</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n<span class=\"token comment\">// 检测连接</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token variable\">$conn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token double-quoted-string string\">\"Connection failed: \"</span> <span class=\"token punctuation\">.</span> <span class=\"token function\">mysqli_connect_error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">echo</span> <span class=\"token double-quoted-string string\">\"连接成功\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token delimiter important\">?&gt;</span></span></code></pre>\n\n<h3 id=\"关闭连接\"><a href=\"#关闭连接\" class=\"headerlink\" title=\"关闭连接\"></a>关闭连接</h3><p>连接在脚本执行完后会自动关闭。你也可以使用以下代码来关闭连接：</p>\n<pre class=\"language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token function\">mysqli_close</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$conn</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n<h3 id=\"创建数据库\"><a href=\"#创建数据库\" class=\"headerlink\" title=\"创建数据库\"></a>创建数据库</h3><pre class=\"language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token variable\">$servername</span> <span class=\"token operator\">=</span> <span class=\"token double-quoted-string string\">\"localhost\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$username</span> <span class=\"token operator\">=</span> <span class=\"token double-quoted-string string\">\"username\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$password</span> <span class=\"token operator\">=</span> <span class=\"token double-quoted-string string\">\"password\"</span><span class=\"token punctuation\">;</span>\n \n<span class=\"token comment\">// 创建连接</span>\n<span class=\"token variable\">$conn</span> <span class=\"token operator\">=</span> <span class=\"token function\">mysqli_connect</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$servername</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$username</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$password</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 检测连接</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token variable\">$conn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token double-quoted-string string\">\"连接失败: \"</span> <span class=\"token punctuation\">.</span> <span class=\"token function\">mysqli_connect_error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n \n<span class=\"token comment\">// 创建数据库</span>\n<span class=\"token variable\">$sql</span> <span class=\"token operator\">=</span> <span class=\"token double-quoted-string string\">\"CREATE DATABASE myDB\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">mysqli_query</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$conn</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$sql</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">echo</span> <span class=\"token double-quoted-string string\">\"数据库创建成功\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">echo</span> <span class=\"token double-quoted-string string\">\"Error creating database: \"</span> <span class=\"token punctuation\">.</span> <span class=\"token function\">mysqli_error</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$conn</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n \n<span class=\"token function\">mysqli_close</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$conn</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token delimiter important\">?&gt;</span></span></code></pre>\n\n<h3 id=\"创建-MySQL-表\"><a href=\"#创建-MySQL-表\" class=\"headerlink\" title=\"创建 MySQL 表\"></a>创建 MySQL 表</h3><pre class=\"language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token variable\">$servername</span> <span class=\"token operator\">=</span> <span class=\"token double-quoted-string string\">\"localhost\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$username</span> <span class=\"token operator\">=</span> <span class=\"token double-quoted-string string\">\"username\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$password</span> <span class=\"token operator\">=</span> <span class=\"token double-quoted-string string\">\"password\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$dbname</span> <span class=\"token operator\">=</span> <span class=\"token double-quoted-string string\">\"myDB\"</span><span class=\"token punctuation\">;</span>\n \n<span class=\"token comment\">// 创建连接</span>\n<span class=\"token variable\">$conn</span> <span class=\"token operator\">=</span> <span class=\"token function\">mysqli_connect</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$servername</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$username</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$password</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$dbname</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 检测连接</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token variable\">$conn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token double-quoted-string string\">\"连接失败: \"</span> <span class=\"token punctuation\">.</span> <span class=\"token function\">mysqli_connect_error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n \n<span class=\"token comment\">// 使用 sql 创建数据表</span>\n<span class=\"token variable\">$sql</span> <span class=\"token operator\">=</span> <span class=\"token double-quoted-string string\">\"CREATE TABLE MyGuests (\nid INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY, \nfirstname VARCHAR(30) NOT NULL,\nlastname VARCHAR(30) NOT NULL,\nemail VARCHAR(50),\nreg_date TIMESTAMP\n)\"</span><span class=\"token punctuation\">;</span>\n \n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">mysqli_query</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$conn</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$sql</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">echo</span> <span class=\"token double-quoted-string string\">\"数据表 MyGuests 创建成功\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">echo</span> <span class=\"token double-quoted-string string\">\"创建数据表错误: \"</span> <span class=\"token punctuation\">.</span> <span class=\"token function\">mysqli_error</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$conn</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n \n<span class=\"token function\">mysqli_close</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$conn</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token delimiter important\">?&gt;</span></span></code></pre>\n\n<h3 id=\"插入数据\"><a href=\"#插入数据\" class=\"headerlink\" title=\"插入数据\"></a>插入数据</h3><pre class=\"language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token variable\">$servername</span> <span class=\"token operator\">=</span> <span class=\"token double-quoted-string string\">\"localhost\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$username</span> <span class=\"token operator\">=</span> <span class=\"token double-quoted-string string\">\"username\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$password</span> <span class=\"token operator\">=</span> <span class=\"token double-quoted-string string\">\"password\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$dbname</span> <span class=\"token operator\">=</span> <span class=\"token double-quoted-string string\">\"myDB\"</span><span class=\"token punctuation\">;</span>\n \n<span class=\"token comment\">// 创建连接</span>\n<span class=\"token variable\">$conn</span> <span class=\"token operator\">=</span> <span class=\"token function\">mysqli_connect</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$servername</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$username</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$password</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$dbname</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 检测连接</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token variable\">$conn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token double-quoted-string string\">\"Connection failed: \"</span> <span class=\"token punctuation\">.</span> <span class=\"token function\">mysqli_connect_error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n \n<span class=\"token variable\">$sql</span> <span class=\"token operator\">=</span> <span class=\"token double-quoted-string string\">\"INSERT INTO MyGuests (firstname, lastname, email)\nVALUES ('John', 'Doe', 'john@example.com')\"</span><span class=\"token punctuation\">;</span>\n \n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">mysqli_query</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$conn</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$sql</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">echo</span> <span class=\"token double-quoted-string string\">\"新记录插入成功\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">echo</span> <span class=\"token double-quoted-string string\">\"Error: \"</span> <span class=\"token punctuation\">.</span> <span class=\"token variable\">$sql</span> <span class=\"token punctuation\">.</span> <span class=\"token double-quoted-string string\">\"&lt;br&gt;\"</span> <span class=\"token punctuation\">.</span> <span class=\"token function\">mysqli_error</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$conn</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n \n<span class=\"token function\">mysqli_close</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$conn</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token delimiter important\">?&gt;</span></span></code></pre>\n\n<p><code>mysqli_multi_query()</code> 函数可用来执行多条 SQL 语句。</p>\n<h3 id=\"使用预处理语句\"><a href=\"#使用预处理语句\" class=\"headerlink\" title=\"使用预处理语句\"></a>使用预处理语句</h3><pre class=\"language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token variable\">$servername</span> <span class=\"token operator\">=</span> <span class=\"token double-quoted-string string\">\"localhost\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$username</span> <span class=\"token operator\">=</span> <span class=\"token double-quoted-string string\">\"username\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$password</span> <span class=\"token operator\">=</span> <span class=\"token double-quoted-string string\">\"password\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$dbname</span> <span class=\"token operator\">=</span> <span class=\"token double-quoted-string string\">\"myDB\"</span><span class=\"token punctuation\">;</span>\n \n<span class=\"token comment\">// 创建连接</span>\n<span class=\"token variable\">$conn</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">mysqli</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$servername</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$username</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$password</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$dbname</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 检测连接</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$conn</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">connect_error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token double-quoted-string string\">\"连接失败: \"</span> <span class=\"token punctuation\">.</span> <span class=\"token variable\">$conn</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">connect_error</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$sql</span> <span class=\"token operator\">=</span> <span class=\"token double-quoted-string string\">\"INSERT INTO MyGuests(firstname, lastname, email)  VALUES(?, ?, ?)\"</span><span class=\"token punctuation\">;</span>\n \n    <span class=\"token comment\">// 为 mysqli_stmt_prepare() 初始化 statement 对象</span>\n    <span class=\"token variable\">$stmt</span> <span class=\"token operator\">=</span> <span class=\"token function\">mysqli_stmt_init</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$conn</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n    <span class=\"token comment\">//预处理语句</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">mysqli_stmt_prepare</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$stmt</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$sql</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 绑定参数</span>\n        <span class=\"token function\">mysqli_stmt_bind_param</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$stmt</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'sss'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$firstname</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$lastname</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$email</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n        <span class=\"token comment\">// 设置参数并执行</span>\n        <span class=\"token variable\">$firstname</span> <span class=\"token operator\">=</span> <span class=\"token single-quoted-string string\">'John'</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$lastname</span> <span class=\"token operator\">=</span> <span class=\"token single-quoted-string string\">'Doe'</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$email</span> <span class=\"token operator\">=</span> <span class=\"token single-quoted-string string\">'john@example.com'</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">mysqli_stmt_execute</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$stmt</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n        <span class=\"token variable\">$firstname</span> <span class=\"token operator\">=</span> <span class=\"token single-quoted-string string\">'Mary'</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$lastname</span> <span class=\"token operator\">=</span> <span class=\"token single-quoted-string string\">'Moe'</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$email</span> <span class=\"token operator\">=</span> <span class=\"token single-quoted-string string\">'mary@example.com'</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">mysqli_stmt_execute</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$stmt</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n        <span class=\"token variable\">$firstname</span> <span class=\"token operator\">=</span> <span class=\"token single-quoted-string string\">'Julie'</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$lastname</span> <span class=\"token operator\">=</span> <span class=\"token single-quoted-string string\">'Dooley'</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$email</span> <span class=\"token operator\">=</span> <span class=\"token single-quoted-string string\">'julie@example.com'</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">mysqli_stmt_execute</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$stmt</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token delimiter important\">?&gt;</span></span></code></pre>\n\n<p>注意参数的绑定。让我们看下 mysqli_stmt_bind_param () 中的代码：</p>\n<pre class=\"language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token function\">mysqli_stmt_bind_param</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$stmt</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'sss'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$firstname</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$lastname</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$email</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n<p>该函数绑定参数查询并将参数传递给数据库。第二个参数是 \"sss\" 。以下列表展示了参数的类型。 s 字符告诉 mysql 参数是字符串。</p>\n<p>可以是以下四种参数:</p>\n<ul>\n<li>i - 整数</li>\n<li> d - 双精度浮点数</li>\n<li> s - 字符串</li>\n<li> b - 布尔值</li>\n</ul>\n<p>每个参数必须指定类型，来保证数据的安全性。</p>\n<p>通过类型的判断可以减少 SQL 注入漏洞带来的风险。</p>\n<h3 id=\"查询读取数据\"><a href=\"#查询读取数据\" class=\"headerlink\" title=\"查询读取数据\"></a>查询读取数据</h3><pre class=\"language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token variable\">$servername</span> <span class=\"token operator\">=</span> <span class=\"token double-quoted-string string\">\"localhost\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$username</span> <span class=\"token operator\">=</span> <span class=\"token double-quoted-string string\">\"user\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$password</span> <span class=\"token operator\">=</span> <span class=\"token double-quoted-string string\">\"password\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$dbname</span> <span class=\"token operator\">=</span> <span class=\"token double-quoted-string string\">\"myDB\"</span><span class=\"token punctuation\">;</span>\n \n<span class=\"token comment\">// 创建连接</span>\n<span class=\"token variable\">$conn</span> <span class=\"token operator\">=</span> <span class=\"token function\">mysqli_connect</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$servername</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$username</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$password</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$dbname</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Check connection</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token variable\">$conn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token double-quoted-string string\">\"连接失败: \"</span> <span class=\"token punctuation\">.</span> <span class=\"token function\">mysqli_connect_error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n \n<span class=\"token variable\">$sql</span> <span class=\"token operator\">=</span> <span class=\"token double-quoted-string string\">\"SELECT id, firstname, lastname FROM MyGuests\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$result</span> <span class=\"token operator\">=</span> <span class=\"token function\">mysqli_query</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$conn</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$sql</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">mysqli_num_rows</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$result</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 输出数据</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$row</span> <span class=\"token operator\">=</span> <span class=\"token function\">mysqli_fetch_assoc</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$result</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">echo</span> <span class=\"token double-quoted-string string\">\"id: \"</span> <span class=\"token punctuation\">.</span> <span class=\"token variable\">$row</span><span class=\"token punctuation\">[</span><span class=\"token double-quoted-string string\">\"id\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span> <span class=\"token double-quoted-string string\">\" - Name: \"</span> <span class=\"token punctuation\">.</span> <span class=\"token variable\">$row</span><span class=\"token punctuation\">[</span><span class=\"token double-quoted-string string\">\"firstname\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span> <span class=\"token double-quoted-string string\">\" \"</span> <span class=\"token punctuation\">.</span> <span class=\"token variable\">$row</span><span class=\"token punctuation\">[</span><span class=\"token double-quoted-string string\">\"lastname\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span> <span class=\"token double-quoted-string string\">\"&lt;br&gt;\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">echo</span> <span class=\"token double-quoted-string string\">\"0 结果\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n \n<span class=\"token function\">mysqli_close</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$conn</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token delimiter important\">?&gt;</span></span></code></pre>\n\n","categories":["Database","MySQL","PHP"],"tags":["MySQL","PHP"]},{"title":"github 连接报 “ssh connect to host github.com port 22 Connection timed out” 错误","url":"/2020/10/2020-10-19-github%E8%BF%9E%E6%8E%A5%E6%8A%A5ssh%20connect%20to%20host%20github.com%20port%2022%20Connection%20timed%20out%E9%94%99%E8%AF%AF/","content":"<p>Git 在提交 代码时，报错：</p>\n<pre class=\"language-none\"><code class=\"language-none\">ssh: connect to host github.com port 22: Connection timed out\nfatal: Could not read from remote repository.</code></pre>\n\n<a id=\"more\"></a>\n\n<p>在连接 github 时，执行”ssh -T <span class=\"exturl\" data-url=\"bWFpbHRvOmdpdEBnaXRodWIuY29t\">git@github.com<i class=\"fa fa-external-link-alt\"></i></span>” 命令时，出现：</p>\n<pre class=\"language-none\"><code class=\"language-none\">$ ssh -T git@github.com\nssh: connect to host github.com port 22: Connection timed out</code></pre>\n\n<p>在存放公钥私钥 (id_rsa 和 id_rsa.pub) 的同级文件夹中，新建 config 文本，内容如下：</p>\n<pre class=\"language-none\"><code class=\"language-none\">Host github.com\nUser hellojue@foxmail.com\nHostname ssh.github.com\nPreferredAuthentications publickey\nIdentityFile ~/.ssh/id_rsa\nPort 443</code></pre>\n\n<p>其中 User 为登录 github 的账号名称。</p>\n<p>再次执行”ssh -T <span class=\"exturl\" data-url=\"bWFpbHRvOmdpdEBnaXRodWIuY29t\">git@github.com<i class=\"fa fa-external-link-alt\"></i></span>” 时，这时验证就可以通过。</p>\n<pre class=\"language-none\"><code class=\"language-none\">$ ssh -T git@github.com\nHi Jueee! You've successfully authenticated, but GitHub does not provide shell access.</code></pre>\n\n","categories":["Git"],"tags":["Git","GitHub"]},{"title":"基于 Vue 组件库 Element 搭建管理系统","url":"/2020/11/2020-11-03-%E5%9F%BA%E4%BA%8EVue%E7%BB%84%E4%BB%B6%E5%BA%93Element%E6%90%AD%E5%BB%BA%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/","content":"<h3 id=\"Element-介绍\"><a href=\"#Element-介绍\" class=\"headerlink\" title=\"Element 介绍\"></a>Element 介绍</h3><p>Element，一套为开发者、设计师和产品经理准备的基于 Vue 2.0 的桌面端组件库。</p>\n<p>Element 提供了配套设计资源，帮助你的网站快速成型。</p>\n<p>是由饿了么公司前端团队开源的。</p>\n<ul>\n<li>官网：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbGVtZW50LmVsZW1lLmNuLw==\">https://element.eleme.cn/<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>GitHub：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0VsZW1lRkUvZWxlbWVudC8=\">https://github.com/ElemeFE/element/<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<a id=\"more\"></a>\n\n<h3 id=\"安装-Element\"><a href=\"#安装-Element\" class=\"headerlink\" title=\"安装 Element\"></a>安装 Element</h3><pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i element-ui -S</code></pre>\n\n<h3 id=\"引入-Element\"><a href=\"#引入-Element\" class=\"headerlink\" title=\"引入 Element\"></a>引入 Element</h3><p>在 main.js 中写入以下内容：</p>\n<pre class=\"language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> Vue <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> ElementUI <span class=\"token keyword\">from</span> <span class=\"token string\">'element-ui'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">'element-ui/lib/theme-chalk/index.css'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> App <span class=\"token keyword\">from</span> <span class=\"token string\">'./App.vue'</span><span class=\"token punctuation\">;</span>\n\nVue<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>ElementUI<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  el<span class=\"token operator\">:</span> <span class=\"token string\">'#app'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">render</span><span class=\"token operator\">:</span> <span class=\"token parameter\">h</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span>App<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n<p>若报错：</p>\n<p><img src=\"/images/2020/11/image-20201102153341973.png\" alt=\"image-20201102153341973\" loading=\"lazy\"></p>\n<p>原因：缺少匹配规则</p>\n<p>解决办法：在 webpack.config.js 文件中的 module 中增加如下 json</p>\n<pre class=\"language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n   test<span class=\"token operator\">:</span> /\\.(eot|svg|ttf|woff|woff2)(\\?\\S*)?$/<span class=\"token punctuation\">,</span>\n   loader<span class=\"token operator\">:</span> 'file-loader'\n<span class=\"token punctuation\">}</span></code></pre>\n\n<p>如下图所示：</p>\n<p><img src=\"/images/2020/11/image-20201102153601127.png\" alt=\"image-20201102153601127\" loading=\"lazy\"></p>\n<h3 id=\"Element-警告处理\"><a href=\"#Element-警告处理\" class=\"headerlink\" title=\"Element 警告处理\"></a>Element 警告处理</h3><h4 id=\"explicit-keys\"><a href=\"#explicit-keys\" class=\"headerlink\" title=\"explicit keys\"></a>explicit keys</h4><p>Element for 循环报如下异常：</p>\n<blockquote>\n<p>component lists rendered with v-for should have explicit keys</p>\n</blockquote>\n<p>处理方案：加上 <code>:key=\"index\"</code></p>\n<p>v-for 列表渲染时，组件或元素中还要添加一个 :key=\"xxx\"，这里可以看一下 item 有没有唯一标识 id，如果有，可以设置为 :key=\"item.id\"</p>\n<p>如果没有唯一标识，可以考虑 v-for=\"(item, idx) in items\"，然后设置 :key=\"idx\"</p>\n<h3 id=\"增删改查示例\"><a href=\"#增删改查示例\" class=\"headerlink\" title=\"增删改查示例\"></a>增删改查示例</h3><pre class=\"language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-form</span> <span class=\"token attr-name\">size</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mini<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">:inline</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">:model</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>queryMap<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>demo-form-inline<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-form-item</span> <span class=\"token attr-name\">label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>图书名<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-input</span> <span class=\"token attr-name\">clearable</span> <span class=\"token attr-name\">@clear</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>search<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">v-model</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>queryMap.name<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">placeholder</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>图书名<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-input</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-form-item</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-form-item</span> <span class=\"token attr-name\">label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>作者<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-input</span> <span class=\"token attr-name\">clearable</span> <span class=\"token attr-name\">@clear</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>search<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">v-model</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>queryMap.author<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">placeholder</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>作者<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-input</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-form-item</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-form-item</span><span class=\"token punctuation\">&gt;</span></span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-button</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>primary<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">icon</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>el-icon-search<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>search<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>查询<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-button</span><span class=\"token punctuation\">&gt;</span></span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-button</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>success<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">icon</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>el-icon-circle-plus-outline<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>openAdd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>添加<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-button</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-form-item</span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-form</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-table</span>\n                <span class=\"token attr-name\">:data</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tableData<span class=\"token punctuation\">\"</span></span>\n                <span class=\"token attr-name\">border</span><span class=\"token style-attr language-css\"><span class=\"token attr-name\">\n                <span class=\"token attr-name\">style</span></span><span class=\"token punctuation\">=\"</span><span class=\"token attr-value\"><span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 70%</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-table-column</span> \n                    <span class=\"token attr-name\">fixed</span>\n                    <span class=\"token attr-name\">prop</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>id<span class=\"token punctuation\">\"</span></span>\n                    <span class=\"token attr-name\">label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>编号<span class=\"token punctuation\">\"</span></span>\n                    <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>150<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-table-column</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-table-column</span>\n                    <span class=\"token attr-name\">prop</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>name<span class=\"token punctuation\">\"</span></span>\n                    <span class=\"token attr-name\">label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>图书名<span class=\"token punctuation\">\"</span></span>\n                    <span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-table-column</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-table-column</span>\n                    <span class=\"token attr-name\">prop</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>author<span class=\"token punctuation\">\"</span></span>\n                    <span class=\"token attr-name\">label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>作者<span class=\"token punctuation\">\"</span></span>\n                    <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>120<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-table-column</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-table-column</span>\n                    <span class=\"token attr-name\">fixed</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>right<span class=\"token punctuation\">\"</span></span>\n                    <span class=\"token attr-name\">label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>操作<span class=\"token punctuation\">\"</span></span>\n                    <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>100<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span> <span class=\"token attr-name\">slot-scope</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>scope<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-button</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>edit(scope.row)<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">size</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>small<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>修改<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-button</span><span class=\"token punctuation\">&gt;</span></span>\n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-button</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>deleteBook(scope.row)<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">size</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>small<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>删除<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-button</span><span class=\"token punctuation\">&gt;</span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-table-column</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-table</span><span class=\"token punctuation\">&gt;</span></span>\n\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-pagination</span>\n                <span class=\"token attr-name\">background</span>\n                <span class=\"token attr-name\">layout</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>prev, pager, next<span class=\"token punctuation\">\"</span></span>\n                <span class=\"token attr-name\">:page-size</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>pageSize<span class=\"token punctuation\">\"</span></span>\n                <span class=\"token attr-name\">:total</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>total<span class=\"token punctuation\">\"</span></span>\n                <span class=\"token attr-name\">@current-change</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>page<span class=\"token punctuation\">\"</span></span>\n                <span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-pagination</span><span class=\"token punctuation\">&gt;</span></span>\n\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-dialog</span>\n        <span class=\"token attr-name\">title</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>添加物资去处<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\">:visible.sync</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>addDialogVisible<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>30%<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\">@close</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>closeAddDialog<span class=\"token punctuation\">\"</span></span>\n      <span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">&gt;</span></span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-form</span>\n            <span class=\"token attr-name\">:model</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>addRuleForm<span class=\"token punctuation\">\"</span></span>\n            <span class=\"token attr-name\">:rules</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>addRules<span class=\"token punctuation\">\"</span></span>\n            <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>addRuleFormRef<span class=\"token punctuation\">\"</span></span>\n            <span class=\"token attr-name\">label-width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>100px<span class=\"token punctuation\">\"</span></span>\n            <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>demo-ruleForm<span class=\"token punctuation\">\"</span></span>\n          <span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-form-item</span> <span class=\"token attr-name\">label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>图书名称<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">prop</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>name<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-input</span> <span class=\"token attr-name\">v-model</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>addRuleForm.name<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-input</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-form-item</span><span class=\"token punctuation\">&gt;</span></span>\n\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-form-item</span> <span class=\"token attr-name\">label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>作者<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">prop</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>author<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-input</span> <span class=\"token attr-name\">v-model</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>addRuleForm.author<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-input</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-form-item</span><span class=\"token punctuation\">&gt;</span></span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-form</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">slot</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>footer<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dialog-footer<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-button</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>addDialogVisible = false<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>取 消<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-button</span><span class=\"token punctuation\">&gt;</span></span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-button</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>primary<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>add<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>确 定<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-button</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-dialog</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"><span class=\"token language-javascript\">\n    <span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n        methods<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">deleteBook</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">row</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">const</span> _this <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$axios<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token string\">'book/deleteById/'</span><span class=\"token operator\">+</span>row<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resp</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                    _this<span class=\"token punctuation\">.</span><span class=\"token function\">$alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'《'</span><span class=\"token operator\">+</span>row<span class=\"token punctuation\">.</span>name<span class=\"token operator\">+</span><span class=\"token string\">'》删除成功！'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'消息'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n                        confirmButtonText<span class=\"token operator\">:</span> <span class=\"token string\">'确定'</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token function-variable function\">callback</span><span class=\"token operator\">:</span> <span class=\"token parameter\">action</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n                            window<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span><span class=\"token function\">reload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">}</span>\n                    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token function\">edit</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">row</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$router<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n                    path<span class=\"token operator\">:</span> <span class=\"token string\">'/update'</span><span class=\"token punctuation\">,</span>\n                    query<span class=\"token operator\">:</span><span class=\"token punctuation\">{</span>\n                        id<span class=\"token operator\">:</span>row<span class=\"token punctuation\">.</span>id\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token function\">page</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">currentPage</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>queryMap<span class=\"token punctuation\">.</span>pageNum <span class=\"token operator\">=</span> currentPage<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getConsumerList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token comment\">//搜索</span>\n            <span class=\"token function\">search</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n              <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>queryMap<span class=\"token punctuation\">.</span>pageNum <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n              <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getConsumerList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token keyword\">async</span> <span class=\"token function\">getConsumerList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n              <span class=\"token keyword\">const</span> _this <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span>\n              <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'book/findAll/'</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>_this<span class=\"token punctuation\">.</span>queryMap<span class=\"token punctuation\">.</span>pageNum<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">'/6'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n                  params<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>queryMap\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resp</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>resp<span class=\"token punctuation\">)</span>\n                  _this<span class=\"token punctuation\">.</span>tableData <span class=\"token operator\">=</span> resp<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>content\n                  _this<span class=\"token punctuation\">.</span>pageSize <span class=\"token operator\">=</span> resp<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>size\n                  _this<span class=\"token punctuation\">.</span>total <span class=\"token operator\">=</span> resp<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>totalElements\n              <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token function\">openAdd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n              <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>addDialogVisible <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token comment\">//关闭弹出框</span>\n            <span class=\"token function\">closeAddDialog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n              <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$refs<span class=\"token punctuation\">.</span>addRuleFormRef<span class=\"token punctuation\">.</span><span class=\"token function\">clearValidate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n              <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>addRuleForm <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token comment\">//添加</span>\n            <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n              <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$refs<span class=\"token punctuation\">.</span>addRuleFormRef<span class=\"token punctuation\">.</span><span class=\"token function\">validate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token parameter\">valid</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>valid<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>addRuleForm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                  <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                  <span class=\"token keyword\">const</span> _this <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span>\n                  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$axios<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'book/save'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>addRuleForm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resp</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>resp<span class=\"token punctuation\">.</span>data <span class=\"token operator\">==</span> <span class=\"token string\">'success'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                          _this<span class=\"token punctuation\">.</span>addDialogVisible <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                          _this<span class=\"token punctuation\">.</span>$message<span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"添加成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                          _this<span class=\"token punctuation\">.</span>addRuleForm <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n                          _this<span class=\"token punctuation\">.</span><span class=\"token function\">getConsumerList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$message<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"添加失败:\"</span> <span class=\"token operator\">+</span> res<span class=\"token punctuation\">.</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                      <span class=\"token punctuation\">}</span>\n                  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>                \n                <span class=\"token punctuation\">}</span>\n              <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n        <span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n                addDialogVisible<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//添加弹框是否显示</span>\n                queryMap<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> pageNum<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> pageSize<span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//查询对象</span>\n                pageSize<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n                total<span class=\"token operator\">:</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span>\n                tableData<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n                    id<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n                    name<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n                    author<span class=\"token operator\">:</span> <span class=\"token string\">''</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                addRuleForm<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                    name<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n                    author<span class=\"token operator\">:</span> <span class=\"token string\">''</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                addRules<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                    name<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n                        <span class=\"token punctuation\">{</span> required<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> message<span class=\"token operator\">:</span> <span class=\"token string\">'图书名称不能为空'</span><span class=\"token punctuation\">,</span> trigger<span class=\"token operator\">:</span> <span class=\"token string\">'blur'</span> <span class=\"token punctuation\">}</span>\n                    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                    author<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>\n                        <span class=\"token punctuation\">{</span> required<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> message<span class=\"token operator\">:</span> <span class=\"token string\">'作者不能为空'</span><span class=\"token punctuation\">,</span> trigger<span class=\"token operator\">:</span> <span class=\"token string\">'blur'</span> <span class=\"token punctuation\">}</span>\n                    <span class=\"token punctuation\">]</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n        <span class=\"token function\">created</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getConsumerList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n\n<p>效果如下：</p>\n<p><img src=\"/images/2020/11/image-20201104161014813.png\" alt=\"image-20201104161014813\" loading=\"lazy\"></p>\n","categories":["Vue"],"tags":["Vue","Element"]},{"title":"Element UI 表单设计及代码生成器 form-generator","url":"/2020/11/2020-11-04-ElementUI%E8%A1%A8%E5%8D%95%E8%AE%BE%E8%AE%A1%E5%8F%8A%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8form-generator/","content":"<h3 id=\"form-generator\"><a href=\"#form-generator\" class=\"headerlink\" title=\"form-generator\"></a>form-generator</h3><p>Element UI 表单设计及代码生成器，可将生成的代码直接运行在基于 Element 的 vue 项目中；也可导出 JSON 表单，使用配套的解析器将 JSON 解析成真实的表单。</p>\n<p><strong>源码：</strong></p>\n<ul>\n<li>GitHub：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0pha0h1YW5nL2Zvcm0tZ2VuZXJhdG9y\">https://github.com/JakHuang/form-generator<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>Gitee：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vbXJoai9mb3JtLWdlbmVyYXRvcg==\">https://gitee.com/mrhj/form-generator<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<p><strong>在线地址</strong>：</p>\n<ul>\n<li>国内预览地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcmhqLmdpdGVlLmlvL2Zvcm0tZ2VuZXJhdG9yLyMv\">https://mrhj.gitee.io/form-generator/#/<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>vscode 插件：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0pha0h1YW5nL2Zvcm0tZ2VuZXJhdG9yLXBsdWdpbg==\">https://github.com/JakHuang/form-generator-plugin<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<a id=\"more\"></a>\n\n<h3 id=\"form-generator-plugin\"><a href=\"#form-generator-plugin\" class=\"headerlink\" title=\"form-generator-plugin\"></a>form-generator-plugin</h3><ul>\n<li>GitHub：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0pha0h1YW5nL2Zvcm0tZ2VuZXJhdG9yLXBsdWdpbg==\">https://github.com/JakHuang/form-generator-plugin<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<h4 id=\"安装插件\"><a href=\"#安装插件\" class=\"headerlink\" title=\"安装插件\"></a>安装插件</h4><p>使用 vscode 搜索插件 <code>Form Generator Plugin</code>，并点击 install 进行安装。</p>\n<p><img src=\"/images/2020/11/image-20201103100725339.png\" alt=\"image-20201103100725339\" loading=\"lazy\"></p>\n<h4 id=\"使用插件\"><a href=\"#使用插件\" class=\"headerlink\" title=\"使用插件\"></a>使用插件</h4><p>选择 vue 文件，邮件选择 “打开表单设计器”。</p>\n<p><img src=\"/images/2020/11/image-20201103100909195.png\" alt=\"image-20201103100909195\" loading=\"lazy\"></p>\n<p>拖动控件进行布局：</p>\n<p><img src=\"/images/2020/11/image-20201103193921825.png\" alt=\"image-20201103193921825\" loading=\"lazy\"></p>\n<p>导出或者复制代码，如下所示：</p>\n<pre class=\"language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div&gt;\n    &lt;el-form ref=\"elForm\" :model=\"formData\" :rules=\"rules\" size=\"medium\" label-width=\"100px\"&gt;\n      &lt;el-form-item label=\"单行文本\" prop=\"field101\"&gt;\n        &lt;el-input v-model=\"formData.field101\" placeholder=\"请输入单行文本\" clearable :style=\"{width: '100%'}\"&gt;\n        &lt;/el-input&gt;\n      &lt;/el-form-item&gt;\n      &lt;el-form-item label=\"时间范围\" prop=\"field104\"&gt;\n        &lt;el-time-picker v-model=\"formData.field104\" is-range format=\"HH:mm:ss\" value-format=\"HH:mm:ss\"\n          :style=\"{width: '100%'}\" start-placeholder=\"开始时间\" end-placeholder=\"结束时间\" range-separator=\"至\"\n          clearable&gt;&lt;/el-time-picker&gt;\n      &lt;/el-form-item&gt;\n      &lt;el-form-item label=\"多选框组\" prop=\"field103\"&gt;\n        &lt;el-checkbox-group v-model=\"formData.field103\" size=\"medium\"&gt;\n          &lt;el-checkbox v-for=\"(item, index) in field103Options\" :key=\"index\" :label=\"item.value\"\n            :disabled=\"item.disabled\"&gt;{{item.label}}&lt;/el-checkbox&gt;\n        &lt;/el-checkbox-group&gt;\n      &lt;/el-form-item&gt;\n      &lt;el-form-item label=\"评分\" prop=\"field105\"&gt;\n        &lt;el-rate v-model=\"formData.field105\"&gt;&lt;/el-rate&gt;\n      &lt;/el-form-item&gt;\n      &lt;el-form-item label=\"上传\" prop=\"field106\" required&gt;\n        &lt;el-upload ref=\"field106\" :file-list=\"field106fileList\" :action=\"field106Action\"\n          :before-upload=\"field106BeforeUpload\"&gt;\n          &lt;el-button size=\"small\" type=\"primary\" icon=\"el-icon-upload\"&gt;点击上传&lt;/el-button&gt;\n        &lt;/el-upload&gt;\n      &lt;/el-form-item&gt;\n      &lt;el-form-item size=\"large\"&gt;\n        &lt;el-button type=\"primary\" @click=\"submitForm\"&gt;提交&lt;/el-button&gt;\n        &lt;el-button @click=\"resetForm\"&gt;重置&lt;/el-button&gt;\n      &lt;/el-form-item&gt;\n    &lt;/el-form&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n&lt;script&gt;\nexport default {\n  components: {},\n  props: [],\n  data() {\n    return {\n      formData: {\n        field101: undefined,\n        field104: null,\n        field103: [],\n        field105: 0,\n        field106: null,\n      },\n      rules: {\n        field101: [{\n          required: true,\n          message: '请输入单行文本',\n          trigger: 'blur'\n        }],\n        field104: [{\n          required: true,\n          message: '时间范围不能为空',\n          trigger: 'change'\n        }],\n        field103: [{\n          required: true,\n          type: 'array',\n          message: '请至少选择一个field103',\n          trigger: 'change'\n        }],\n        field105: [{\n          required: true,\n          message: '评分不能为空',\n          trigger: 'change'\n        }],\n      },\n      field106Action: 'https://jsonplaceholder.typicode.com/posts/',\n      field106fileList: [],\n      field103Options: [{\n        \"label\": \"选项一\",\n        \"value\": 1\n      }, {\n        \"label\": \"选项二\",\n        \"value\": 2\n      }, {\n        \"label\": \"选项三\",\n        \"value\": \"\"\n      }, {\n        \"label\": \"选项四\",\n        \"value\": \"\"\n      }, {\n        \"label\": \"选项五\",\n        \"value\": \"\"\n      }],\n    }\n  },\n  computed: {},\n  watch: {},\n  created() {},\n  mounted() {},\n  methods: {\n    submitForm() {\n      this.$refs['elForm'].validate(valid =&gt; {\n        if (!valid) return\n        // TODO 提交表单\n      })\n    },\n    resetForm() {\n      this.$refs['elForm'].resetFields()\n    },\n    field106BeforeUpload(file) {\n      let isRightSize = file.size / 1024 / 1024 &lt; 2\n      if (!isRightSize) {\n        this.$message.error('文件大小超过 2MB')\n      }\n      return isRightSize\n    },\n  }\n}\n\n&lt;/script&gt;\n&lt;style&gt;\n.el-rate {\n  display: inline-block;\n  vertical-align: text-top;\n}\n\n.el-upload__tip {\n  line-height: 1.2;\n}\n\n&lt;/style&gt;\n</code></pre>\n\n","categories":["Vue"],"tags":["Vue","Element"]},{"title":"跨域认证解决方案 JWT 介绍","url":"/2020/11/2020-11-06-%E8%B7%A8%E5%9F%9F%E8%AE%A4%E8%AF%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88JWT%E4%BB%8B%E7%BB%8D/","content":"<h3 id=\"JWT-简介\"><a href=\"#JWT-简介\" class=\"headerlink\" title=\"JWT 简介\"></a>JWT 简介</h3><p>JSON Web Token（JWT）是目前最流行的跨域身份验证解决方案。是基于 Json 的一个公开规范，这个规范允许我们使用 JWT 在用户和服务器之间传递安全可靠的信息。</p>\n<p>JWT 的两大使用场景是：认证和数据交换。使用起来就是，由服务端根据规范生成一个令牌（token），并且发放给客户端。此时客户端请求服务端的时候就可以携带者令牌，以令牌来证明自己的身份信息。</p>\n<p><strong>作用</strong>：类似 session 保持登录状态 的办法，通过 token 来代表用户身份。</p>\n<ul>\n<li>官网：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9qd3QuaW8v\">https://jwt.io/<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<a id=\"more\"></a>\n\n<h3 id=\"跨域认证的问题\"><a href=\"#跨域认证的问题\" class=\"headerlink\" title=\"跨域认证的问题\"></a>跨域认证的问题</h3><p>互联网服务离不开用户认证。一般流程是下面这样。</p>\n<blockquote>\n<p>1、用户向服务器发送用户名和密码。</p>\n<p>2、服务器验证通过后，在当前对话（session）里面保存相关数据，比如用户角色、登录时间等等。</p>\n<p>3、服务器向用户返回一个 session_id，写入用户的 Cookie。</p>\n<p>4、用户随后的每一次请求，都会通过 Cookie，将 session_id 传回服务器。</p>\n<p>5、服务器收到 session_id，找到前期保存的数据，由此得知用户的身份。</p>\n</blockquote>\n<p>这种模式的问题在于，扩展性（scaling）不好。单机当然没有问题，如果是服务器集群，或者是跨域的服务导向架构，就要求 session 数据共享，每台服务器都能够读取 session。</p>\n<p>举例来说，A 网站和 B 网站是同一家公司的关联服务。现在要求，用户只要在其中一个网站登录，再访问另一个网站就会自动登录，请问怎么实现？</p>\n<ul>\n<li>一种解决方案是 session 数据持久化，写入数据库或别的持久层。各种服务收到请求后，都向持久层请求数据。这种方案的优点是架构清晰，缺点是工程量比较大。另外，持久层万一挂了，就会单点失败。</li>\n<li>另一种方案是服务器索性不保存 session 数据了，所有数据都保存在客户端，每次请求都发回服务器。JWT 就是这种方案的一个代表。</li>\n</ul>\n<h3 id=\"JWT-的原理\"><a href=\"#JWT-的原理\" class=\"headerlink\" title=\"JWT 的原理\"></a>JWT 的原理</h3><p>JWT 的原理是，服务器认证以后，生成一个 JSON 对象，发回给用户，就像下面这样。</p>\n<pre class=\"language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"姓名\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"角色\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"管理员\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"到期时间\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2018年7月1日0点0分\"</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<p>以后，用户与服务端通信的时候，都要发回这个 JSON 对象。服务器完全只靠这个对象认定用户身份。</p>\n<p>为了防止用户篡改数据，服务器在生成这个对象的时候，会加上签名（详见后文）。</p>\n<p>这样服务器就不保存任何 session 数据了，也就是说，服务器变成无状态了，从而比较容易实现扩展。</p>\n<h3 id=\"JWT-的数据结构\"><a href=\"#JWT-的数据结构\" class=\"headerlink\" title=\"JWT 的数据结构\"></a>JWT 的数据结构</h3><p>JSON Web Token 由三部分组成，它们之间用圆点 (.) 连接。这三部分分别是：</p>\n<ul>\n<li>Header：JWT 头</li>\n<li> Payload：有效载荷</li>\n<li> Signature：签名</li>\n</ul>\n<p>因此，一个典型的 JWT 看起来是这个样子的：</p>\n<blockquote>\n<p>xxxxx.yyyyy.zzzzz</p>\n</blockquote>\n<h4 id=\"Header\"><a href=\"#Header\" class=\"headerlink\" title=\"Header\"></a>Header</h4><p>Header 部分是一个 JSON 对象，描述 JWT 的元数据，通常是下面的样子。</p>\n<pre class=\"language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"alg\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"HS256\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"typ\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"JWT\"</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<p>上面代码中，<code>alg</code> 属性表示签名的算法（algorithm），默认是 HMAC SHA256（写成 HS256）；<code>typ</code> 属性表示这个令牌（token）的类型（type），JWT 令牌统一写为 <code>JWT</code>。</p>\n<p>最后，将上面的 JSON 对象使用 Base64URL 算法转成字符串。</p>\n<h4 id=\"Payload\"><a href=\"#Payload\" class=\"headerlink\" title=\"Payload\"></a>Payload</h4><p>Payload 部分也是一个 JSON 对象，用来存放实际需要传递的数据。</p>\n<p>JWT 规定了 7 个官方字段，供选用。</p>\n<ul>\n<li>iss (issuer)：签发人</li>\n<li> exp (expiration time)：过期时间</li>\n<li> sub (subject)：主题</li>\n<li> aud (audience)：受众</li>\n<li> nbf (Not Before)：生效时间</li>\n<li> iat (Issued At)：签发时间</li>\n<li> jti (JWT ID)：编号</li>\n</ul>\n<p>除了官方字段，你还可以在这个部分定义私有字段，下面就是一个例子。</p>\n<pre class=\"language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"sub\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1234567890\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"John Doe\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"admin\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<p>注意，JWT 默认是不加密的，任何人都可以读到，所以不要把秘密信息放在这个部分。</p>\n<p>这个 JSON 对象也要使用 Base64URL 算法转成字符串。</p>\n<h4 id=\"Signature\"><a href=\"#Signature\" class=\"headerlink\" title=\"Signature\"></a>Signature</h4><p>Signature 部分是对前两部分的签名，防止数据篡改。</p>\n<p>首先，需要指定一个密钥（secret）。这个密钥只有服务器才知道，不能泄露给用户。然后，使用 Header 里面指定的签名算法（默认是 HMAC SHA256），按照下面的公式产生签名。</p>\n<pre class=\"language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token constant\">HMACSHA256</span><span class=\"token punctuation\">(</span>\n  <span class=\"token function\">base64UrlEncode</span><span class=\"token punctuation\">(</span>header<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\".\"</span> <span class=\"token operator\">+</span>\n  <span class=\"token function\">base64UrlEncode</span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  secret<span class=\"token punctuation\">)</span></code></pre>\n\n<p>算出签名以后，把 Header、Payload、Signature 三个部分拼成一个字符串，每个部分之间用 \"点\"（<code>.</code>）分隔，就可以返回给用户。</p>\n<h4 id=\"Base64URL\"><a href=\"#Base64URL\" class=\"headerlink\" title=\"Base64URL\"></a>Base64URL</h4><p>Header 和 Payload 串型化的算法是 Base64URL。这个算法跟 Base64 算法基本类似，但有一些小的不同。</p>\n<p>JWT 作为一个令牌（token），有些场合可能会放到 URL（比如 api.example.com/?token=xxx）。</p>\n<p>Base64 有三个字符 <code>+</code>、<code>/</code> 和 <code>=</code>，在 URL 里面有特殊含义，所以要被替换掉：<code>=</code> 被省略、<code>+</code> 替换成 <code>-</code>，<code>/</code> 替换成<code>_</code> 。这就是 Base64URL 算法。</p>\n<h3 id=\"JWT-的使用方式\"><a href=\"#JWT-的使用方式\" class=\"headerlink\" title=\"JWT 的使用方式\"></a>JWT 的使用方式</h3><p>客户端收到服务器返回的 JWT，可以储存在 Cookie 里面，也可以储存在 localStorage。</p>\n<p>此后，客户端每次与服务器通信，都要带上这个 JWT。你可以把它放在 Cookie 里面自动发送，但是这样不能跨域，所以更好的做法是放在 HTTP 请求的头信息 <code>Authorization</code> 字段里面。</p>\n<blockquote>\n<pre class=\"language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">Authorization<span class=\"token operator\">:</span> Bearer <span class=\"token operator\">&lt;</span>token<span class=\"token operator\">&gt;</span></code></pre>\n</blockquote>\n<p>另一种做法是，跨域的时候，JWT 就放在 POST 请求的数据体里面。</p>\n<h3 id=\"JWT-的几个特点\"><a href=\"#JWT-的几个特点\" class=\"headerlink\" title=\"JWT 的几个特点\"></a>JWT 的几个特点</h3><ol>\n<li>JWT 默认是不加密，但也是可以加密的。生成原始 Token 以后，可以用密钥再加密一次。</li>\n<li>JWT 不加密的情况下，不能将秘密数据写入 JWT。</li>\n<li>JWT 不仅可以用于认证，也可以用于交换信息。有效使用 JWT，可以降低服务器查询数据库的次数。</li>\n<li>JWT 的最大缺点是，由于服务器不保存 session 状态，因此无法在使用过程中废止某个 token，或者更改 token 的权限。也就是说，一旦 JWT 签发了，在到期之前就会始终有效，除非服务器部署额外的逻辑。</li>\n<li>JWT 本身包含了认证信息，一旦泄露，任何人都可以获得该令牌的所有权限。为了减少盗用，JWT 的有效期应该设置得比较短。对于一些比较重要的权限，使用时应该再次对用户进行认证。</li>\n<li>为了减少盗用，JWT 不应该使用 HTTP 协议明码传输，要使用 HTTPS 协议传输。</li>\n</ol>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9qd3QuaW8vaW50cm9kdWN0aW9uLw==\">Introduction to JSON Web Tokens<i class=\"fa fa-external-link-alt\"></i></span>， by Auth0</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tZWRpdW0uY29tL0Bicnlhbm1hbnVlbGUvc2Vzc2lvbmxlc3MtYXV0aGVudGljYXRpb24td2l0aGUtand0cy13aXRoLW5vZGUtZXhwcmVzcy1wYXNzcG9ydC1qcy02OWIwNTllNGIyMmM=\">Sessionless Authentication using JWTs (with Node + Express + Passport JS)<i class=\"fa fa-external-link-alt\"></i></span>, by Bryan Manuele</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2R3eWwvbGVhcm4tanNvbi13ZWItdG9rZW5zL2Jsb2IvbWFzdGVyL1JFQURNRS5tZA==\">Learn how to use JSON Web Tokens<i class=\"fa fa-external-link-alt\"></i></span>, by dwyl</li>\n</ul>\n","categories":["Node.js"],"tags":["Json","JWT"]},{"title":"Vue 拼图验证（vue-puzzle-vcode）","url":"/2020/11/2020-11-05-Vue%E6%8B%BC%E5%9B%BE%E9%AA%8C%E8%AF%81%EF%BC%88vue-puzzle-vcode%EF%BC%89/","content":"<h3 id=\"插件介绍\"><a href=\"#插件介绍\" class=\"headerlink\" title=\"插件介绍\"></a>插件介绍</h3><p>Vue 纯前端的拼图人机验证、右滑拼图验证。</p>\n<ul>\n<li>插件网站：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvdnVlLXB1enpsZS12Y29kZQ==\">https://www.npmjs.com/package/vue-puzzle-vcode<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>Demo：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pc2x1by5jb20vd29yay92dWUtcHV6emxlLXZjb2RlLyMv\">https://isluo.com/work/vue-puzzle-vcode/#/<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<a id=\"more\"></a>\n\n<h3 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h3><pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> vue-puzzle-vcode --save</code></pre>\n\n<h3 id=\"使用依赖\"><a href=\"#使用依赖\" class=\"headerlink\" title=\"使用依赖\"></a>使用依赖</h3><pre class=\"language-html\" data-language=\"html\"><code class=\"language-html\">import Vcode from \"vue-puzzle-vcode\";\n \n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Vcode</span> <span class=\"token attr-name\">:show</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>isShow<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">@success</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>success<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">@close</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>close<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span></code></pre>\n\n<h3 id=\"简单例子\"><a href=\"#简单例子\" class=\"headerlink\" title=\"简单例子\"></a>简单例子</h3><pre class=\"language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Vcode</span> <span class=\"token attr-name\">:show</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>isShow<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">@success</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>success<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">@close</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>close<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>登录<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">&gt;</span></span>\n \n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"><span class=\"token language-javascript\">\n<span class=\"token keyword\">import</span> Vcode <span class=\"token keyword\">from</span> <span class=\"token string\">\"vue-puzzle-vcode\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      isShow<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 验证码模态框是否出现</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  components<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    Vcode<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  methods<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">submit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>isShow <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 用户通过了验证</span>\n    <span class=\"token function\">success</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">msg</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>isShow <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 通过验证后，需要手动隐藏模态框</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 用户点击遮罩层，应该关闭模态框</span>\n    <span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>isShow <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n\n<h3 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h3><table>\n<thead>\n<tr>\n<th align=\"left\">字段</th>\n<th align=\"left\">类型</th>\n<th align=\"left\">默认值</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"> show</td>\n<td align=\"left\">Boolean</td>\n<td align=\"left\">false</td>\n<td align=\"left\"> 是否显示验证码弹框</td>\n</tr>\n<tr>\n<td align=\"left\"> canvasWidth</td>\n<td align=\"left\">Number</td>\n<td align=\"left\">310</td>\n<td align=\"left\"> 主图区域的宽度，单位 px</td>\n</tr>\n<tr>\n<td align=\"left\">canvasHeight</td>\n<td align=\"left\">Number</td>\n<td align=\"left\">160</td>\n<td align=\"left\"> 主图区域的高度，单位 px</td>\n</tr>\n<tr>\n<td align=\"left\">puzzleScale</td>\n<td align=\"left\">Number</td>\n<td align=\"left\">1</td>\n<td align=\"left\"> 拼图块 (小的拼图) 的大小比例，0.2 ～ 2 ，数字越大，拼图越大</td>\n</tr>\n<tr>\n<td align=\"left\"> sliderSize</td>\n<td align=\"left\">Number</td>\n<td align=\"left\">50</td>\n<td align=\"left\"> 左下角用户拖动的那个滑块的尺寸，单位 px</td>\n</tr>\n<tr>\n<td align=\"left\">range</td>\n<td align=\"left\">Number</td>\n<td align=\"left\">10</td>\n<td align=\"left\"> 判断成功的误差范围，单位 px, 滑动的距离和拼图的距离小于等于此值时，会判定重合</td>\n</tr>\n<tr>\n<td align=\"left\"> imgs</td>\n<td align=\"left\">Array</td>\n<td align=\"left\">null</td>\n<td align=\"left\"> 自定义图片，见下方例子</td>\n</tr>\n<tr>\n<td align=\"left\"> successText</td>\n<td align=\"left\">String</td>\n<td align=\"left\">\"验证通过！\"</td>\n<td align=\"left\"> 验证成功时的提示文字</td>\n</tr>\n<tr>\n<td align=\"left\"> failText</td>\n<td align=\"left\">String</td>\n<td align=\"left\">\"验证失败，请重试\"</td>\n<td align=\"left\"> 验证失败时的提示文字</td>\n</tr>\n<tr>\n<td align=\"left\"> sliderText</td>\n<td align=\"left\">String</td>\n<td align=\"left\">\"拖动滑块完成拼图\"</td>\n<td align=\"left\"> 下方滑动条里的文字</td>\n</tr>\n</tbody></table>\n<h3 id=\"事件\"><a href=\"#事件\" class=\"headerlink\" title=\"事件\"></a>事件</h3><table>\n<thead>\n<tr>\n<th align=\"left\">事件名</th>\n<th align=\"left\">返回值</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"> success</td>\n<td align=\"left\"> 偏差值</td>\n<td align=\"left\">验证通过时会触发，返回值是用户移动的距离跟目标距离的偏差值 px</td>\n</tr>\n<tr>\n<td align=\"left\">fail</td>\n<td align=\"left\"> 偏差值</td>\n<td align=\"left\">验证失败时会触发，返回值同上</td>\n</tr>\n<tr>\n<td align=\"left\"> close</td>\n<td align=\"left\">null</td>\n<td align=\"left\"> 用户点击遮罩层的回调</td>\n</tr>\n</tbody></table>\n<h3 id=\"自定义图片\"><a href=\"#自定义图片\" class=\"headerlink\" title=\"自定义图片\"></a>自定义图片</h3><pre class=\"language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Vcode</span> <span class=\"token attr-name\">:imgs</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>[Img1, Img2]<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">&gt;</span></span>\n \n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"><span class=\"token language-javascript\">\n<span class=\"token keyword\">import</span> Img1 <span class=\"token keyword\">from</span> <span class=\"token string\">\"~/assets/img1.png\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> Img2 <span class=\"token keyword\">from</span> <span class=\"token string\">\"~/assets/img2.png\"</span><span class=\"token punctuation\">;</span>\n \n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      Img1<span class=\"token punctuation\">,</span>\n      Img2<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n\n<ul>\n<li>也可以是网络图片完整 URL 路径，但注意图片跨域问题，因为 canvas api 无法调用跨 域的图片</li>\n</ul>\n<h3 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h3><ul>\n<li>当不传递 imgs 字段或图片加载出错时，会自动生成随机图片</li>\n<li>模态框的显示和隐藏完全由父级控制，所以用户通过验证后，需要手动隐藏模态框</li>\n</ul>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvdnVlLXB1enpsZS12Y29kZQ==\">https://www.npmjs.com/package/vue-puzzle-vcode<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n","categories":["Vue"],"tags":["Vue"]},{"title":"Spring Data Jpa 实现分页查询","url":"/2020/11/2020-11-04-SpringDataJpa%E5%AE%9E%E7%8E%B0%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2/","content":"<h3 id=\"Spring-Data-Jpa\"><a href=\"#Spring-Data-Jpa\" class=\"headerlink\" title=\"Spring Data Jpa\"></a>Spring Data Jpa</h3><h4 id=\"引入-Jar\"><a href=\"#引入-Jar\" class=\"headerlink\" title=\"引入 Jar\"></a>引入 Jar</h4><pre class=\"language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>spring-boot-starter-data-jpa<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n\n<a id=\"more\"></a>\n\n<h4 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h4><p>SpringBoot 配置文件 <code>application.yml</code>：</p>\n<pre class=\"language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">datasource</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> jdbc<span class=\"token punctuation\">:</span>mysql<span class=\"token punctuation\">:</span>//localhost<span class=\"token punctuation\">:</span>3306/vuedb<span class=\"token punctuation\">?</span>useUnicode=true<span class=\"token important\">&amp;characterEncoding=UTF-8&amp;serverTimezone=Asia/Shanghai</span>\n    <span class=\"token key atrule\">username</span><span class=\"token punctuation\">:</span> root\n    <span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> jue\n    <span class=\"token key atrule\">driver-class-name</span><span class=\"token punctuation\">:</span> com.mysql.cj.jdbc.Driver\n  <span class=\"token key atrule\">jpa</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">show-sql</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span> <span class=\"token comment\"># 日志打印 SQL</span>\n    <span class=\"token key atrule\">properties</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">hibernate</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">format_sql</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span> <span class=\"token comment\"># 格式化日志 SQL</span></code></pre>\n\n<h3 id=\"方法一：本地SQL查询\"><a href=\"#方法一：本地SQL查询\" class=\"headerlink\" title=\"方法一：本地SQL查询\"></a>方法一：本地 SQL 查询</h3><p>本地 sql 查询，注意表名啥的都用数据库中的名称，适用于特定数据库的查询。</p>\n<p>缺点：无法识别参数为空的情况。</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">BookDAO</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">JpaRepository</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Book</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Query</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"SELECT * FROM Book WHERE name like %:name% and author like %:author%\"</span><span class=\"token punctuation\">,</span>\n            countQuery <span class=\"token operator\">=</span> <span class=\"token string\">\"SELECT count(*) FROM Book WHERE name like %:name% and author like %:author%\"</span><span class=\"token punctuation\">,</span>\n            nativeQuery <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n    <span class=\"token class-name\">Page</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Book</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">findAll1</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Param</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@Param</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"author\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> author<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Pageable</span> pageable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Autowired</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">BookDAO</span> bookRepository<span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/findAll/{page}/{size}\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">Page</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Book</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"page\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Integer</span> page<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@PathVariable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"size\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Integer</span> size<span class=\"token punctuation\">,</span><span class=\"token class-name\">Book</span> book<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token class-name\">Pageable</span>  request <span class=\"token operator\">=</span> <span class=\"token class-name\">PageRequest</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">,</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> bookRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findAll1</span><span class=\"token punctuation\">(</span>book<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>book<span class=\"token punctuation\">.</span><span class=\"token function\">getAuthor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<h3 id=\"方法二：分页接口\"><a href=\"#方法二：分页接口\" class=\"headerlink\" title=\"方法二：分页接口\"></a>方法二：分页接口</h3><p>jpa 已经实现的分页接口，适用于简单的分页查询。</p>\n<p>缺点，无法增加查询条件。</p>\n<p>接口说明：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">PagingAndSortingRepository</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> ID <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Serializable</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token keyword\">extends</span> <span class=\"token class-name\">CrudRepository</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> ID<span class=\"token punctuation\">&gt;</span></span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token class-name\">Iterable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Sort</span> sort<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token class-name\">Page</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Pageable</span> pageable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">Accessing</span> the second page of <span class=\"token class-name\">User</span> by a page size of <span class=\"token number\">20</span> you could simply <span class=\"token keyword\">do</span> something like <span class=\"token keyword\">this</span><span class=\"token operator\">:</span>\n\n<span class=\"token class-name\">PagingAndSortingRepository</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">&gt;</span></span> repository <span class=\"token operator\">=</span> <span class=\"token comment\">// … get access to a bean</span>\n<span class=\"token class-name\">Page</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">&gt;</span></span> users <span class=\"token operator\">=</span> repository<span class=\"token punctuation\">.</span><span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">PageRequest</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n<p>示例如下：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Autowired</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">BookDAO</span> bookRepository<span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/findAll/{page}/{size}\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">Page</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Book</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"page\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Integer</span> page<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@PathVariable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"size\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Integer</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token class-name\">Pageable</span>  request <span class=\"token operator\">=</span> <span class=\"token class-name\">PageRequest</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">,</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> bookRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<h3 id=\"方法三：动态sql查询\"><a href=\"#方法三：动态sql查询\" class=\"headerlink\" title=\"方法三：动态sql查询\"></a>方法三：动态 sql 查询</h3><p>扩充 findAll，适用于动态 sql 查询</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">BookDAO</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">JpaRepository</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Book</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Page</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Book</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Specification</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Book</span><span class=\"token punctuation\">&gt;</span></span> spec<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Pageable</span> pageable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Autowired</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">BookDAO</span> bookRepository<span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/findAll/{page}/{size}\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">Page</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Book</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"page\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Integer</span> page<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@PathVariable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"size\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Integer</span> size<span class=\"token punctuation\">,</span><span class=\"token class-name\">Book</span> book<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token class-name\">Specification</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Book</span><span class=\"token punctuation\">&gt;</span></span> specification <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Specification</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Book</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token annotation punctuation\">@Override</span>\n\t\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Predicate</span> <span class=\"token function\">toPredicate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Root</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Book</span><span class=\"token punctuation\">&gt;</span></span> root<span class=\"token punctuation\">,</span> <span class=\"token class-name\">CriteriaQuery</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">&gt;</span></span> query<span class=\"token punctuation\">,</span> <span class=\"token class-name\">CriteriaBuilder</span> cb<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Predicate</span><span class=\"token punctuation\">&gt;</span></span> predicates <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//所有的断言</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNotBlank</span><span class=\"token punctuation\">(</span>book<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token comment\">//添加断言</span>\n\t\t\t\t<span class=\"token class-name\">Predicate</span> likeNickName <span class=\"token operator\">=</span> cb<span class=\"token punctuation\">.</span><span class=\"token function\">like</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">as</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"%\"</span><span class=\"token operator\">+</span>book<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\"%\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\tpredicates<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>likeNickName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNotBlank</span><span class=\"token punctuation\">(</span>book<span class=\"token punctuation\">.</span><span class=\"token function\">getAuthor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token comment\">//添加断言</span>\n\t\t\t\t<span class=\"token class-name\">Predicate</span> likeNickName <span class=\"token operator\">=</span> cb<span class=\"token punctuation\">.</span><span class=\"token function\">like</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"author\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">as</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"%\"</span><span class=\"token operator\">+</span>book<span class=\"token punctuation\">.</span><span class=\"token function\">getAuthor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\"%\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\tpredicates<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>likeNickName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">return</span> cb<span class=\"token punctuation\">.</span><span class=\"token function\">and</span><span class=\"token punctuation\">(</span>predicates<span class=\"token punctuation\">.</span><span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Predicate</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">Pageable</span>  request <span class=\"token operator\">=</span> <span class=\"token class-name\">PageRequest</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">,</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> bookRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span>specification<span class=\"token punctuation\">,</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<h3 id=\"方法四：动态sql查询\"><a href=\"#方法四：动态sql查询\" class=\"headerlink\" title=\"方法四：动态sql查询\"></a>方法四：动态 sql 查询</h3><p>使用 entityManager，适用于动态 sql 查询</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@PersistenceContext</span>\n<span class=\"token class-name\">EntityManager</span> entityManager<span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/findAll/{page}/{size}\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">Page</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Book</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"page\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Integer</span> page<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@PathVariable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"size\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Integer</span> size<span class=\"token punctuation\">,</span><span class=\"token class-name\">Book</span> book<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">&gt;</span></span> params <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">StringBuilder</span> whereSql <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNotBlank</span><span class=\"token punctuation\">(</span>book<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\twhereSql<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" and name like :name \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tparams<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"%\"</span><span class=\"token operator\">+</span>book<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\"%\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNotBlank</span><span class=\"token punctuation\">(</span>book<span class=\"token punctuation\">.</span><span class=\"token function\">getAuthor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\twhereSql<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" and author like :author \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tparams<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"author\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"%\"</span><span class=\"token operator\">+</span>book<span class=\"token punctuation\">.</span><span class=\"token function\">getAuthor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\"%\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token class-name\">StringBuilder</span> countSelectSql <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcountSelectSql<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"select count(*) from Book where 1=1 \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">String</span> countSql <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>countSelectSql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>whereSql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">Query</span> countQuery <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>entityManager<span class=\"token punctuation\">.</span><span class=\"token function\">createQuery</span><span class=\"token punctuation\">(</span>countSql<span class=\"token punctuation\">,</span><span class=\"token class-name\">Long</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setParameters</span><span class=\"token punctuation\">(</span>countQuery<span class=\"token punctuation\">,</span>params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">Long</span> count <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span><span class=\"token punctuation\">)</span> countQuery<span class=\"token punctuation\">.</span><span class=\"token function\">getSingleResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n\t<span class=\"token class-name\">StringBuilder</span> selectSql <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tselectSql<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"from Book where 1=1 \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">String</span> querySql <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>selectSql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>whereSql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">Query</span> query <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>entityManager<span class=\"token punctuation\">.</span><span class=\"token function\">createQuery</span><span class=\"token punctuation\">(</span>querySql<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Book</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setParameters</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">,</span>params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">PageRequest</span> pageParam <span class=\"token operator\">=</span> <span class=\"token class-name\">PageRequest</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tquery<span class=\"token punctuation\">.</span><span class=\"token function\">setFirstResult</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>pageParam<span class=\"token punctuation\">.</span><span class=\"token function\">getOffset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tquery<span class=\"token punctuation\">.</span><span class=\"token function\">setMaxResults</span><span class=\"token punctuation\">(</span>pageParam<span class=\"token punctuation\">.</span><span class=\"token function\">getPageSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Book</span><span class=\"token punctuation\">&gt;</span></span> incomeDailyList <span class=\"token operator\">=</span> query<span class=\"token punctuation\">.</span><span class=\"token function\">getResultList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">Pageable</span> pageable <span class=\"token operator\">=</span> <span class=\"token class-name\">PageRequest</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">Page</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Book</span><span class=\"token punctuation\">&gt;</span></span> incomeDailyPage <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PageImpl</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Book</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span>incomeDailyList<span class=\"token punctuation\">,</span> pageable<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> incomeDailyPage<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setParameters</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Query</span> query<span class=\"token punctuation\">,</span><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">&gt;</span></span> params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">&gt;</span></span> entry<span class=\"token operator\">:</span>params<span class=\"token punctuation\">.</span><span class=\"token function\">entrySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tquery<span class=\"token punctuation\">.</span><span class=\"token function\">setParameter</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>entry<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n","categories":["Java","JavaJar"],"tags":["Java","JavaJar"]},{"title":"Java 的 JWT 实现库 java-jwt 介绍","url":"/2020/11/2020-11-07-Java%E7%9A%84JWT%E5%AE%9E%E7%8E%B0%E5%BA%93java-jwt%E4%BB%8B%E7%BB%8D/","content":"<h3 id=\"java-jwt-介绍\"><a href=\"#java-jwt-介绍\" class=\"headerlink\" title=\"java-jwt 介绍\"></a>java-jwt 介绍</h3><p>auth0 的 java-jwt 是一个 JSON WEB TOKEN（JWT）的一个实现。</p>\n<p>GitHub：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2F1dGgwL2phdmEtand0\">https://github.com/auth0/java-jwt<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h4 id=\"依赖引入\"><a href=\"#依赖引入\" class=\"headerlink\" title=\"依赖引入\"></a>依赖引入</h4><pre class=\"language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token comment\">&lt;!-- https://mvnrepository.com/artifact/com.auth0/java-jwt --&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>com.auth0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>java-jwt<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>3.11.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n\n<a id=\"more\"></a>\n\n<h3 id=\"已实现的算法\"><a href=\"#已实现的算法\" class=\"headerlink\" title=\"已实现的算法\"></a>已实现的算法</h3><p>该库使用以下算法实现 JWT 验证和签名:</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">JWS</th>\n<th align=\"left\"> 算法</th>\n<th align=\"left\">介绍</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"> HS256</td>\n<td align=\"left\">HMAC256</td>\n<td align=\"left\">HMAC with SHA-256</td>\n</tr>\n<tr>\n<td align=\"left\">HS384</td>\n<td align=\"left\">HMAC384</td>\n<td align=\"left\">HMAC with SHA-384</td>\n</tr>\n<tr>\n<td align=\"left\">HS512</td>\n<td align=\"left\">HMAC512</td>\n<td align=\"left\">HMAC with SHA-512</td>\n</tr>\n<tr>\n<td align=\"left\">RS256</td>\n<td align=\"left\">RSA256</td>\n<td align=\"left\">RSASSA-PKCS1-v1_5 with SHA-256</td>\n</tr>\n<tr>\n<td align=\"left\">RS384</td>\n<td align=\"left\">RSA384</td>\n<td align=\"left\">RSASSA-PKCS1-v1_5 with SHA-384</td>\n</tr>\n<tr>\n<td align=\"left\">RS512</td>\n<td align=\"left\">RSA512</td>\n<td align=\"left\">RSASSA-PKCS1-v1_5 with SHA-512</td>\n</tr>\n<tr>\n<td align=\"left\">ES256</td>\n<td align=\"left\">ECDSA256</td>\n<td align=\"left\">ECDSA with curve P-256 and SHA-256</td>\n</tr>\n<tr>\n<td align=\"left\">ES384</td>\n<td align=\"left\">ECDSA384</td>\n<td align=\"left\">ECDSA with curve P-384 and SHA-384</td>\n</tr>\n<tr>\n<td align=\"left\">ES512</td>\n<td align=\"left\">ECDSA512</td>\n<td align=\"left\">ECDSA with curve P-521 and SHA-512</td>\n</tr>\n</tbody></table>\n<h3 id=\"JWT-基本使用\"><a href=\"#JWT-基本使用\" class=\"headerlink\" title=\"JWT 基本使用\"></a>JWT 基本使用</h3><h4 id=\"产生加密Token\"><a href=\"#产生加密Token\" class=\"headerlink\" title=\"产生加密Token\"></a>产生加密 Token</h4><pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">String</span> token <span class=\"token operator\">=</span> JWT<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">withExpiresAt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 设置过期时间</span>\n\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">withAudience</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"root\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 设置接受方信息，一般时登录用户</span>\n\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">sign</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Algorithm</span><span class=\"token punctuation\">.</span><span class=\"token function\">HMAC256</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"123456\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 使用HMAC算法，123456作为密钥加密</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJyb290IiwiZXhwIjoxNjA0NjMyMTY0fQ.5JbpimPPzTnXSVX9LL6eekH7tkFc6ApRkhIUnTGt0BY</span></code></pre>\n\n<h4 id=\"解密Token获取负载信息\"><a href=\"#解密Token获取负载信息\" class=\"headerlink\" title=\"解密Token获取负载信息\"></a>解密 Token 获取负载信息</h4><pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">DecodedJWT</span> jwt1 <span class=\"token operator\">=</span> JWT<span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> userId <span class=\"token operator\">=</span> jwt1<span class=\"token punctuation\">.</span><span class=\"token function\">getAudience</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>userId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// root</span></code></pre>\n\n<h4 id=\"验证Token是否有效\"><a href=\"#验证Token是否有效\" class=\"headerlink\" title=\"验证Token是否有效\"></a>验证 Token 是否有效</h4><pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Algorithm</span> algorithm <span class=\"token operator\">=</span> <span class=\"token class-name\">Algorithm</span><span class=\"token punctuation\">.</span><span class=\"token function\">HMAC256</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"123456\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">JWTVerifier</span> jwtVerifier <span class=\"token operator\">=</span> JWT<span class=\"token punctuation\">.</span><span class=\"token function\">require</span><span class=\"token punctuation\">(</span>algorithm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">withIssuer</span><span class=\"token punctuation\">(</span>userId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">DecodedJWT</span> jwt2 <span class=\"token operator\">=</span> jwtVerifier<span class=\"token punctuation\">.</span><span class=\"token function\">verify</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>jwt2<span class=\"token punctuation\">.</span><span class=\"token function\">getAudience</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// root</span></code></pre>\n\n","categories":["Java","JavaJar"],"tags":["Java","JavaJar","JWT"]},{"title":"RESTful 风格的 Web 服务框架 Swagger","url":"/2020/11/2020-11-11-RESTful%E9%A3%8E%E6%A0%BC%E7%9A%84Web%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6Swagger/","content":"<h3 id=\"Swagger-介绍\"><a href=\"#Swagger-介绍\" class=\"headerlink\" title=\"Swagger 介绍\"></a>Swagger 介绍</h3><p>Swagger 是一个规范和完整的框架，用于生成、描述、调用和可视化 RESTful 风格的 Web 服务。</p>\n<p>总体目标是使客户端和文件系统作为服务器以同样的速度来更新。文件的方法、参数和模型紧密集成到服务器端的代码，允许 API 来始终保持同步。</p>\n<ul>\n<li>官网：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zd2FnZ2VyLmlvLw==\">https://swagger.io/<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>GitHub：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3N3YWdnZXItYXBp\">https://github.com/swagger-api<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<a id=\"more\"></a>\n\n<h4 id=\"Swagger-依赖\"><a href=\"#Swagger-依赖\" class=\"headerlink\" title=\"Swagger 依赖\"></a>Swagger 依赖</h4><pre class=\"language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>io.springfox<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>springfox-swagger2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>2.6.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>io.springfox<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>springfox-swagger-ui<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>2.6.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n\n<h3 id=\"Swagger-UI\"><a href=\"#Swagger-UI\" class=\"headerlink\" title=\"Swagger UI\"></a>Swagger UI</h3><p>添加依赖 <code>springfox-swagger-ui</code> 之后，该文档将在此处自动提供：</p>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo4MDgwL3N3YWdnZXItdWkuaHRtbA==\">http://localhost:8080/swagger-ui.html<i class=\"fa fa-external-link-alt\"></i></span></p>\n</blockquote>\n<p>Swagger 布局分为四部分：</p>\n<ol>\n<li><strong>API 分组</strong>：如果没有配置分组默认是 default。通过 Swagger 实例 Docket 的 <code>groupName()</code> 方法即可配置分组。</li>\n<li><strong>基本描述</strong>：可以通过 Swagger 实例 Docket 的 <code>apiInfo()</code> 方法中的 ApiInfo 实例参数配置文档信息。</li>\n<li><strong>请求接口列表</strong>：在组范围内，只要被 Swagger2 扫描匹配到的请求都会在这里出现。</li>\n<li><strong>实体列表</strong>：只要实体在请求接口的返回值上（即使是泛型），都能映射到实体项中！</li>\n</ol>\n<blockquote>\n<p>实体列表部分注意：并不是因为 @ApiModel 注解让实体显示在 Models 列表里，而是只要出现在接口方法的返回值上的实体都会显示在这里，而 @ApiModel 和 @ApiModelProperty 这两个注解只是为实体添加注释的。前者为类添加注释，后者为类属性添加注释。</p>\n</blockquote>\n<h3 id=\"swagger2-注解\"><a href=\"#swagger2-注解\" class=\"headerlink\" title=\"swagger2 注解\"></a>swagger2 注解</h3><h4 id=\"注解整体说明\"><a href=\"#注解整体说明\" class=\"headerlink\" title=\"注解整体说明\"></a>注解整体说明</h4><p><strong>用于 controller 类上：</strong></p>\n<table>\n<thead>\n<tr>\n<th>注解</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td> @Api</td>\n<td> 对请求类的说明</td>\n</tr>\n</tbody></table>\n<p><strong>用于方法上面（说明参数的含义）：</strong></p>\n<table>\n<thead>\n<tr>\n<th>注解</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td> @ApiOperation</td>\n<td> 方法的说明</td>\n</tr>\n<tr>\n<td> @ApiImplicitParams、@ApiImplicitParam</td>\n<td> 方法的参数的说明；@ApiImplicitParams 用于指定单个参数的说明</td>\n</tr>\n</tbody></table>\n<p><strong>用于方法上面（返回参数或对象的说明）：</strong></p>\n<table>\n<thead>\n<tr>\n<th>注解</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td> @ApiResponses、@ApiResponse</td>\n<td> 方法返回值的说明 ；@ApiResponses 用于指定单个参数的说明</td>\n</tr>\n</tbody></table>\n<p><strong>对象类：</strong></p>\n<table>\n<thead>\n<tr>\n<th>注解</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td> @ApiModel</td>\n<td> 用在 JavaBean 类上，说明 JavaBean 的 用途</td>\n</tr>\n<tr>\n<td> @ApiModelProperty</td>\n<td> 用在 JavaBean 类的属性上面，说明此属性的的含议</td>\n</tr>\n</tbody></table>\n<h4 id=\"Api\"><a href=\"#Api\" class=\"headerlink\" title=\"@Api\"></a>@Api</h4><p>@Api：请求类的说明</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Api</span>：放在 请求的类上，与 <span class=\"token annotation punctuation\">@Controller</span> 并列，说明类的作用，如用户模块，订单类等。\n\ttags<span class=\"token operator\">=</span><span class=\"token string\">\"说明该类的作用\"</span>\n\tvalue<span class=\"token operator\">=</span><span class=\"token string\">\"该参数没什么意义，所以不需要配置\"</span></code></pre>\n\n<p><code>@Api</code> 其它属性配置：</p>\n<table>\n<thead>\n<tr>\n<th>属性名称</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td> value</td>\n<td>url 的路径值</td>\n</tr>\n<tr>\n<td> tags</td>\n<td> 如果设置这个值、value 的值会被覆盖</td>\n</tr>\n<tr>\n<td> description</td>\n<td> 对 api 资源的描述</td>\n</tr>\n<tr>\n<td> basePath</td>\n<td> 基本路径</td>\n</tr>\n<tr>\n<td> position</td>\n<td> 如果配置多个 Api 想改变显示的顺序位置</td>\n</tr>\n<tr>\n<td> produces</td>\n<td> 如，“application/json, application/xml”</td>\n</tr>\n<tr>\n<td>consumes</td>\n<td> 如，“application/json, application/xml”</td>\n</tr>\n<tr>\n<td>protocols</td>\n<td> 协议类型，如: http, https, ws, wss.</td>\n</tr>\n<tr>\n<td>authorizations</td>\n<td> 高级特性认证时配置</td>\n</tr>\n<tr>\n<td> hidden</td>\n<td> 配置为 true ，将在文档中隐藏</td>\n</tr>\n</tbody></table>\n<h4 id=\"ApiOperation\"><a href=\"#ApiOperation\" class=\"headerlink\" title=\"@ApiOperation\"></a>@ApiOperation</h4><p>@ApiOperation：方法的说明</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@ApiOperation</span>：<span class=\"token string\">\"用在请求的方法上，说明方法的作用\"</span>\n\tvalue<span class=\"token operator\">=</span><span class=\"token string\">\"说明方法的作用\"</span>\n\tnotes<span class=\"token operator\">=</span><span class=\"token string\">\"方法的备注说明\"</span></code></pre>\n\n<p>@ApiImplicitParams、@ApiImplicitParam：方法参数的说明</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@ApiImplicitParams</span>：用在请求的方法上，包含一组参数说明\n\t<span class=\"token annotation punctuation\">@ApiImplicitParam</span>：对单个参数的说明\t    \n\t    name：参数名\n\t    value：参数的说明、描述\n\t    required：参数是否必须必填\n\t    paramType：参数放在哪个地方\n\t        · query <span class=\"token operator\">--</span><span class=\"token operator\">&gt;</span> 请求参数的获取：<span class=\"token annotation punctuation\">@RequestParam</span>\n\t        · header <span class=\"token operator\">--</span><span class=\"token operator\">&gt;</span> 请求参数的获取：<span class=\"token annotation punctuation\">@RequestHeader</span>\t      \n\t        · path（用于restful接口）<span class=\"token operator\">--</span><span class=\"token operator\">&gt;</span> 请求参数的获取：<span class=\"token annotation punctuation\">@PathVariable</span>\n\t        · body（请求体）<span class=\"token operator\">--</span><span class=\"token operator\">&gt;</span>  <span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">User</span> user\n\t        · form（普通表单提交）\t   \n\t    dataType：参数类型，默认<span class=\"token class-name\">String</span>，其它值dataType<span class=\"token operator\">=</span><span class=\"token string\">\"Integer\"</span>\t   \n\t    defaultValue：参数的默认值</code></pre>\n\n<h4 id=\"ApiResponses\"><a href=\"#ApiResponses\" class=\"headerlink\" title=\"@ApiResponses\"></a>@ApiResponses</h4><p>@ApiResponses、@ApiResponse：方法返回值的状态码说明</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@ApiResponses</span>：方法返回对象的说明\n\t<span class=\"token annotation punctuation\">@ApiResponse</span>：每个参数的说明\n\t    code：数字，例如<span class=\"token number\">400</span>\n\t    message：信息，例如<span class=\"token string\">\"请求参数没填好\"</span>\n\t    response：抛出异常的类</code></pre>\n\n<h4 id=\"ApiModel\"><a href=\"#ApiModel\" class=\"headerlink\" title=\"@ApiModel\"></a>@ApiModel</h4><p>@ApiModel：用于 JavaBean 上面，表示对 JavaBean 的功能描述</p>\n<p><code>@ApiModel</code> 的用途有 2 个：</p>\n<ol>\n<li>当请求数据描述，即 <code>@RequestBody</code> 时， 用于封装请求（包括数据的各种校验）数据；</li>\n<li>当响应值是对象时，即 <code>@ResponseBody</code> 时，用于返回值对象的描述。</li>\n</ol>\n<h4 id=\"ApiModelProperty\"><a href=\"#ApiModelProperty\" class=\"headerlink\" title=\"@ApiModelProperty\"></a>@ApiModelProperty</h4><p>@ApiModelProperty：用在 JavaBean 类的属性上面，说明属性的含义</p>\n<h3 id=\"Swagger-示例\"><a href=\"#Swagger-示例\" class=\"headerlink\" title=\"Swagger 示例\"></a>Swagger 示例</h3><h4 id=\"API基本信息配置类\"><a href=\"#API基本信息配置类\" class=\"headerlink\" title=\"API基本信息配置类\"></a>API 基本信息配置类</h4><p>要想使用 Swagger，必须编写一个配置类来配置 Swagger，这里的配置类如下：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token annotation punctuation\">@EnableSwagger2</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SwaggerConfig</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Docket</span> <span class=\"token function\">docket</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 构造函数传入初始化规范，这是swagger2规范</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Docket</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DocumentationType</span><span class=\"token punctuation\">.</span>SWAGGER_2<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">apiInfo</span><span class=\"token punctuation\">(</span><span class=\"token function\">apiInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//apiInfo： 添加api详情信息，参数为ApiInfo类型的参数</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">groupName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"System\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 配置分组</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">enable</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 配置是否启用Swagger，如果是false，在浏览器将无法访问，默认是true</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">apis</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RequestHandlerSelectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">basePackage</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.system.controller\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//apis： 添加过滤条件,</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">paths</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PathSelectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">any</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//paths： 这里是控制哪些路径的api会被显示出来</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">pathMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ApiInfo</span> <span class=\"token function\">apiInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Contact</span> contact<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Contact</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xiaojue\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"http://localhost:8181\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"hellojue@foxmail.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ApiInfoBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">contact</span><span class=\"token punctuation\">(</span>contact<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">title</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"API文档\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">description</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"系统API文档\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">termsOfServiceUrl</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">version</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1.0\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<p>效果如下：</p>\n<p><img src=\"/images/2020/11/image-20201111113952683.png\" alt=\"image-20201111113952683\" loading=\"lazy\"></p>\n<h5 id=\"配置API分组\"><a href=\"#配置API分组\" class=\"headerlink\" title=\"配置API分组\"></a>配置 API 分组</h5><p>通过 Swagger 实例 Docket 的 <code>groupName()</code> 方法即可配置分组，如果没有配置分组默认是 default，代码如下：</p>\n<pre class=\"language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">@Bean\n<span class=\"token keyword\">public</span> Docket <span class=\"token function\">docket2</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">Environment environment</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Docket</span><span class=\"token punctuation\">(</span>DocumentationType<span class=\"token punctuation\">.</span><span class=\"token constant\">SWAGGER_2</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">apiInfo</span><span class=\"token punctuation\">(</span><span class=\"token function\">apiInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 配置基本API信息</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">groupName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 配置分组</span>\n       <span class=\"token comment\">// 省略配置....</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<h5 id=\"配置多个分组\"><a href=\"#配置多个分组\" class=\"headerlink\" title=\"配置多个分组\"></a>配置多个分组</h5><p>很简单，配置多个分组只需要配置多个 docket 即可，代码如下：</p>\n<pre class=\"language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">@Bean\n<span class=\"token keyword\">public</span> Docket <span class=\"token function\">docket1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Docket</span><span class=\"token punctuation\">(</span>DocumentationType<span class=\"token punctuation\">.</span><span class=\"token constant\">SWAGGER_2</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">groupName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"组一\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token comment\">// 省略配置....</span>\n<span class=\"token punctuation\">}</span>\n@Bean\n<span class=\"token keyword\">public</span> Docket <span class=\"token function\">docket2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Docket</span><span class=\"token punctuation\">(</span>DocumentationType<span class=\"token punctuation\">.</span><span class=\"token constant\">SWAGGER_2</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">.</span><span class=\"token function\">groupName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"组二\"</span><span class=\"token punctuation\">)</span>\n     <span class=\"token comment\">// 省略配置....</span>\n<span class=\"token punctuation\">}</span>\n@Bean\n<span class=\"token keyword\">public</span> Docket <span class=\"token function\">docket3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Docket</span><span class=\"token punctuation\">(</span>DocumentationType<span class=\"token punctuation\">.</span><span class=\"token constant\">SWAGGER_2</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">.</span><span class=\"token function\">groupName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"组三\"</span><span class=\"token punctuation\">)</span>\n     <span class=\"token comment\">// 省略配置....</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<h4 id=\"接口注解\"><a href=\"#接口注解\" class=\"headerlink\" title=\"接口注解\"></a>接口注解</h4><pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Api</span><span class=\"token punctuation\">(</span>tags <span class=\"token operator\">=</span> <span class=\"token string\">\"菜单权限接口\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/menu\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@RestController</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MenuController</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">MenuService</span> menuService<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token annotation punctuation\">@ApiOperation</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"新增菜单\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token annotation punctuation\">@PostMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/add\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ResponseBean</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token annotation punctuation\">@Validated</span> <span class=\"token class-name\">MenuVO</span> menuVO<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Menu</span> node <span class=\"token operator\">=</span> menuService<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>menuVO<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">&gt;</span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"menuName\"</span><span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">.</span><span class=\"token function\">getMenuName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"children\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"icon\"</span><span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">.</span><span class=\"token function\">getIcon</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">ResponseBean</span><span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<p>效果如下：</p>\n<p><img src=\"/images/2020/11/image-20201111141157829.png\" alt=\"image-20201111141157829\" loading=\"lazy\"></p>\n<p><img src=\"/images/2020/11/image-20201111113642972.png\" alt=\"image-20201111113642972\" loading=\"lazy\"></p>\n<h4 id=\"模型类注解\"><a href=\"#模型类注解\" class=\"headerlink\" title=\"模型类注解\"></a>模型类注解</h4><pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@ApiModel</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"菜单实体类\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Data</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MenuVO</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@ApiModelProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"编号\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@ApiModelProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"父级id\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> parentId<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@ApiModelProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"菜单名称\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> menuName<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<p>效果如下：</p>\n<p><img src=\"/images/2020/11/image-20201111140618878.png\" alt=\"image-20201111140618878\" loading=\"lazy\"></p>\n","categories":["Java","JavaJar"],"tags":["Java","JavaJar","RESTful"]},{"title":"Kafka 常用命令之 kafka-topics.sh","url":"/2020/11/2020-11-05-Kafka%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E4%B9%8Bkafka-topics.sh/","content":"<p>kafka-topics.sh 脚本主要负责 topic 相关的操作。它的具体实现是通过 kafka-run-class 来调用 <code>TopicCommand</code> 类，并根据参数执行指定的功能。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"场景再现\"><a href=\"#场景再现\" class=\"headerlink\" title=\"场景再现\"></a>场景再现</h3><p>若程序报错：</p>\n<blockquote>\n<p> [Producer clientId=producer-1] Error while fetching metadata with correlation id 312 : {logger-channel=UNKNOWN_TOPIC_OR_PARTITION}</p>\n</blockquote>\n<p>可能原因：</p>\n<p>topic 不存在，切自动创建失败</p>\n<p>需要设置：</p>\n<pre class=\"language-properties\" data-language=\"properties\"><code class=\"language-properties\"><span class=\"token attr-name\">auto.create.topics.enable</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">true</span></code></pre>\n\n<p>如果不方便修改配置，则需要手动创建 topic。</p>\n<h3 id=\"查看-topic\"><a href=\"#查看-topic\" class=\"headerlink\" title=\"查看 topic\"></a>查看 topic</h3><pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">bin/kafka-topics.sh --list --zookeeper <span class=\"token number\">127.0</span>.0.1:2181/spacemanti</code></pre>\n\n<h3 id=\"创建-topic\"><a href=\"#创建-topic\" class=\"headerlink\" title=\"创建 topic\"></a>创建 topic</h3><pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">bin/kafka-topics.sh --create --zookeeper <span class=\"token number\">127.0</span>.0.1:2181/spacemanti --config max.message.bytes<span class=\"token operator\">=</span><span class=\"token number\">128000000</span> --config flush.messages<span class=\"token operator\">=</span><span class=\"token number\">1</span> --replication-factor <span class=\"token number\">1</span> --partitions <span class=\"token number\">1</span> --topic logger-channel</code></pre>\n\n<h3 id=\"查看-topic-1\"><a href=\"#查看-topic-1\" class=\"headerlink\" title=\"查看 topic\"></a>查看 topic</h3><pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">bin/kafka-topics.sh --describe --zookeeper <span class=\"token number\">127.0</span>.0.1:2181/spacemanti  --topic manti-logger-channel                    Topic:manti-logger-channel      PartitionCount:1        ReplicationFactor:1     Configs:max.message.bytes<span class=\"token operator\">=</span><span class=\"token number\">128000000</span>,flush.messages<span class=\"token operator\">=</span><span class=\"token number\">1</span>\n        Topic: manti-logger-channel     Partition: <span class=\"token number\">0</span>    Leader: <span class=\"token number\">2</span>       Replicas: <span class=\"token number\">2</span>     Isr: <span class=\"token number\">2</span></code></pre>\n\n<ul>\n<li><p><strong>PartitionCount</strong>：partition 个数。</p>\n</li>\n<li><p><strong>ReplicationFactor</strong>：副本个数。</p>\n</li>\n<li><p><strong>Partition</strong>：partition 编号，从 0 开始递增。</p>\n</li>\n<li><p><strong>Leader</strong>：当前 partition 起作用的 breaker.id。</p>\n</li>\n<li><p><strong>Replicas</strong>: 当前副本数据所在的 breaker.id，是一个列表，排在最前面的其作用。</p>\n</li>\n<li><p><strong>Isr</strong>：当前 kakfa 集群中可用的 breaker.id 列表。</p>\n</li>\n</ul>\n<h3 id=\"删除-topic\"><a href=\"#删除-topic\" class=\"headerlink\" title=\"删除 topic\"></a>删除 topic</h3><pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">bin/kafka-topics.sh --describe --zookeeper <span class=\"token number\">127.0</span>.0.1:2181/spacemanti  --topic logger-channel</code></pre>\n\n<ul>\n<li>若 delete.topic.enable=true：直接彻底删除该 Topic。</li>\n<li>若 delete.topic.enable=false：如果当前 Topic 没有使用过即没有传输过信息：可以彻底删除。<br> 如果当前 Topic 有使用过即有过传输过信息：并没有真正删除 Topic 只是把这个 Topic 标记为删除 (marked for deletion)，重启 Kafka Server 后删除。</li>\n</ul>\n<p> <strong>注</strong>：delete.topic.enable=true 配置信息位于配置文件 config/server.properties 中 (较新的版本中无显式配置，默认为 true)。</p>\n<h3 id=\"修改-Topic\"><a href=\"#修改-Topic\" class=\"headerlink\" title=\"修改 Topic\"></a>修改 Topic</h3><ul>\n<li><p><strong>增加分区数</strong></p>\n<pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\">bin/kafka-topics.sh --alter --bootstrap-server node1:9092,node2:9092,node3:9092 --topic topicName --partitions <span class=\"token number\">3</span>\n<span class=\"token number\">1</span></code></pre>\n\n<p>修改分区数时，仅能增加分区个数。若是用其减少 partition 个数，则会报如下错误信息：</p>\n<pre class=\"language-none\"><code class=\"language-none\">  org.apache.kafka.common.errors.InvalidPartitionsException: The number of partitions for a topic can only be increased. Topic hadoop currently has 3 partitions, 2 would not be an increase.\n1</code></pre>\n\n<p>不能用来修改副本个数。(请使用 kafka-reassign-partitions.sh 脚本增加副本数)</p>\n</li>\n<li><p><strong>增加配置</strong></p>\n<pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\">bin/kafka-topics.sh --alter --bootstrap-server node1:9092,node2:9092,node3:9092 --topic topicName --config flush.messages<span class=\"token operator\">=</span><span class=\"token number\">1</span>\n<span class=\"token number\">1</span></code></pre>\n</li>\n<li><p><strong>删除配置</strong></p>\n<pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\">bin/kafka-topics.sh --alter --bootstrap-server node1:9092,node2:9092,node3:9092 --topic topicName --delete-config flush.messages</code></pre>\n\n</li>\n</ul>\n<h3 id=\"配置属性\"><a href=\"#配置属性\" class=\"headerlink\" title=\"配置属性\"></a>配置属性</h3><p>当如下所示的属性配置到 Topic 上时，将会覆盖 server.properties 上对应的属性。</p>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>值类型</th>\n<th>默认值</th>\n<th>有效值</th>\n<th>服务器默认属性</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td> cleanup.policy</td>\n<td>list</td>\n<td>delete</td>\n<td>delete compact</td>\n<td>log.cleanup.policy</td>\n<td> 过期或达到上限日志的清理策略。 delete：删除 compact：压缩</td>\n</tr>\n<tr>\n<td> compression.type</td>\n<td>string</td>\n<td>producer</td>\n<td>uncompressed snappy lz4 gzip producer</td>\n<td>compression.type</td>\n<td> 指定给该 topic 最终的压缩类型</td>\n</tr>\n<tr>\n<td> delete.retention.ms</td>\n<td>long</td>\n<td>86400000</td>\n<td>[0,…]</td>\n<td>log.cleaner.delete.retention.ms</td>\n<td> 压缩的日志保留的最长时间，也是客户端消费消息的最长时间。 与 log.retention.minutes 的区别在于：一个控制未压缩的数据，一个控制压缩后的数据。</td>\n</tr>\n<tr>\n<td>file.delete.delay.ms</td>\n<td>long</td>\n<td>60000</td>\n<td>[0,…]</td>\n<td>log.segment.delete.delay.ms</td>\n<td> 从文件系统中删除前所等待的时间</td>\n</tr>\n<tr>\n<td> flush.messages</td>\n<td>long</td>\n<td>9223372036854775807</td>\n<td>[0,…]</td>\n<td>log.flush.interval.messages</td>\n<td> 在消息刷到磁盘之前，日志分区收集的消息数</td>\n</tr>\n<tr>\n<td> flush.ms</td>\n<td>long</td>\n<td>9223372036854775807</td>\n<td>[0,…]</td>\n<td>log.flush.interval.ms</td>\n<td> 消息在刷到磁盘之前，保存在内存中的最长时间，单位是 ms</td>\n</tr>\n<tr>\n<td>index.interval.bytes</td>\n<td>int</td>\n<td>4096</td>\n<td>[0,…]</td>\n<td>log.index.interval.bytes</td>\n<td> 执行 fetch 操作后，扫描最近的 offset 运行空间的大小。 设置越大，代表扫描速度越快，但是也更耗内存。 （一般情况下不需要设置此参数）</td>\n</tr>\n<tr>\n<td>message.max.bytes</td>\n<td>int</td>\n<td>1000012</td>\n<td>[0,…]</td>\n<td>message.max.bytes</td>\n<td>log 中能够容纳消息的最大字节数</td>\n</tr>\n<tr>\n<td> min.cleanable.dirty.ratio</td>\n<td>double</td>\n<td>0.5</td>\n<td>[0,…,1]</td>\n<td>log.cleaner.min.cleanable.ratio</td>\n<td> 日志清理的频率控制，占该 log 的百分比。 越大意味着更高效的清理，同时会存在空间浪费问题</td>\n</tr>\n<tr>\n<td> retention.bytes</td>\n<td>long</td>\n<td>-1</td>\n<td></td>\n<td>log.retention.bytes</td>\n<td>topic 每个分区的最大文件大小。 一个 topic 的大小限制 = 分区数 * log.retention.bytes。 -1 表示没有大小限制。</td>\n</tr>\n<tr>\n<td>retention.ms</td>\n<td>int</td>\n<td>604800000</td>\n<td>[-1,…]</td>\n<td>log.retention.minutes</td>\n<td> 日志文件保留的分钟数。 数据存储的最大时间超过这个时间会根据 log.cleanup.policy 设置的策略处理数据</td>\n</tr>\n<tr>\n<td> segment.bytes</td>\n<td>int</td>\n<td>1073741824</td>\n<td>[14,…]</td>\n<td>log.segment.bytes</td>\n<td> 每个 segment 的大小 (默认为 1G)</td>\n</tr>\n<tr>\n<td>segment.index.bytes</td>\n<td>int</td>\n<td>10485760</td>\n<td>[0,…]</td>\n<td>log.index.size.max.bytes</td>\n<td> 对于 segment 日志的索引文件大小限制 (默认为 10M)</td>\n</tr>\n</tbody></table>\n","categories":["Apache","Kafka"],"tags":["Apache","Kafka"]},{"title":"Java 安全框架 Apache Shiro 介绍","url":"/2020/11/2020-11-08-Java%E5%AE%89%E5%85%A8%E6%A1%86%E6%9E%B6ApacheShiro%E4%BB%8B%E7%BB%8D/","content":"<h3 id=\"Apache-Shiro-介绍\"><a href=\"#Apache-Shiro-介绍\" class=\"headerlink\" title=\"Apache Shiro 介绍\"></a>Apache Shiro 介绍</h3><p>Apache Shiro 是一个强大灵活的开源安全框架。</p>\n<p>Apache Shiro 可以帮助我们完成：认证、授权、加密、会话管理、与 Web 集成、缓存等。</p>\n<ul>\n<li>官网：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaGlyby5hcGFjaGUub3JnLw==\">https://shiro.apache.org/<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>GitHub：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FwYWNoZS9zaGlybw==\">https://github.com/apache/shiro<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<a id=\"more\"></a>\n\n<h4 id=\"Jar-引入\"><a href=\"#Jar-引入\" class=\"headerlink\" title=\"Jar 引入\"></a>Jar 引入</h4><pre class=\"language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token comment\">&lt;!-- https://mvnrepository.com/artifact/org.apache.shiro/shiro-spring --&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.apache.shiro<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>shiro-spring<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>1.7.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n\n<h4 id=\"基本功能点\"><a href=\"#基本功能点\" class=\"headerlink\" title=\"基本功能点\"></a>基本功能点</h4><p><img src=\"/images/2020/11/image-20201106155220875.png\" alt=\"image-20201106155220875\" loading=\"lazy\"></p>\n<ul>\n<li><strong>Authentication</strong>：身份认证 / 登录，验证用户是不是拥有相应的身份；</li>\n<li><strong>Authorization</strong>：授权，即权限验证，验证某个已认证的用户是否拥有某个权限；即判断用户是否能做事情，常见的如：验证某个用户是否拥有某个角色。或者细粒度的验证某个用户对某个资源是否具有某个权限；</li>\n<li><strong>Session</strong> <strong>Management</strong>：会话管理，即用户登录后就是一次会话，在没有退出之前，它的所有信息都在会话中；会话可以是普通 JavaSE 环境的，也可以是如 Web 环境的；</li>\n<li><strong>Cryptography</strong>：加密，保护数据的安全性，如密码加密存储到数据库，而不是明文存储；</li>\n<li><strong>Web Support</strong>：Web 支持，可以非常容易的集成到 Web 环境；</li>\n<li><strong>Caching</strong>：缓存，比如用户登录后，其用户信息、拥有的角色 / 权限不必每次去查，这样可以提高效率；</li>\n<li><strong>Concurrency</strong>：shiro 支持多线程应用的并发验证，即如在一个线程中开启另一个线程，能把权限自动传播过去；</li>\n<li><strong>Testing</strong>：提供测试支持；</li>\n<li><strong>Run As</strong>：允许一个用户假装为另一个用户（如果他们允许）的身份进行访问；</li>\n<li><strong>Remember Me</strong>：记住我，这个是非常常见的功能，即一次登录后，下次再来的话不用登录了。</li>\n</ul>\n<p><strong>记住一点，Shiro 不会去维护用户、维护权限；这些需要我们自己去设计 / 提供；然后通过相应的接口注入给 Shiro 即可。</strong></p>\n<h3 id=\"Apache-Shiro-使用\"><a href=\"#Apache-Shiro-使用\" class=\"headerlink\" title=\"Apache Shiro 使用\"></a>Apache Shiro 使用</h3><h4 id=\"身份验证\"><a href=\"#身份验证\" class=\"headerlink\" title=\"身份验证\"></a>身份验证</h4><p><strong>身份验证</strong>，即在应用中谁能证明他就是他本人。一般提供如他们的身份 ID 一些标识信息来表明他就是他本人，如提供身份证，用户名 / 密码来证明。</p>\n<p>在 shiro 中，用户需要提供 <code>principals</code> （身份）和 <code>credentials</code>（证明）给 shiro，从而应用能验证用户身份：</p>\n<p><strong>principals</strong>：身份，即主体的标识属性，可以是任何东西，如用户名、邮箱等，唯一即可。一个主体可以有多个 <code>principals</code>，但只有一个 <code>Primary principals</code>，一般是用户名 / 密码 / 手机号。</p>\n<p><strong>credentials</strong>：证明 / 凭证，即只有主体知道的安全值，如密码 / 数字证书等。</p>\n<ol>\n<li><p>首先准备一些用户身份 / 凭据（shiro.ini）</p>\n<pre class=\"language-ini\" data-language=\"ini\"><code class=\"language-ini\"><span class=\"token selector\">[users]</span>\n<span class=\"token constant\">zhang</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span>123</span>\n<span class=\"token constant\">wang</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span>123</span></code></pre>\n\n<p>此处使用 ini 配置文件，通过 [users] 指定了两个主体：zhang/123、wang/123。</p>\n</li>\n<li><p>示例：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//1、获取SecurityManager工厂，此处使用Ini配置文件初始化SecurityManager  </span>\n<span class=\"token class-name\">Factory</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SecurityManager</span><span class=\"token punctuation\">&gt;</span></span> factory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IniSecurityManagerFactory</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"classpath:shiro.ini\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//2、得到SecurityManager实例 并绑定给SecurityUtils</span>\n<span class=\"token class-name\">SecurityManager</span> securityManager <span class=\"token operator\">=</span> factory<span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">SecurityUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">setSecurityManager</span><span class=\"token punctuation\">(</span>securityManager<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//3、得到Subject及创建用户名/密码身份验证Token（即用户身份/凭证）</span>\n<span class=\"token class-name\">Subject</span> subject <span class=\"token operator\">=</span> <span class=\"token class-name\">SecurityUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSubject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">UsernamePasswordToken</span> token <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UsernamePasswordToken</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"zhang\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"123\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//4、登录，即身份验证</span>\n    subject<span class=\"token punctuation\">.</span><span class=\"token function\">login</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//5、身份验证失败</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>subject<span class=\"token punctuation\">.</span><span class=\"token function\">isAuthenticated</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//6、退出</span>\nsubject<span class=\"token punctuation\">.</span><span class=\"token function\">logout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n</li>\n</ol>\n<h4 id=\"授权\"><a href=\"#授权\" class=\"headerlink\" title=\"授权\"></a>授权</h4><p><strong>基于角色的访问控制（隐式角色）</strong></p>\n<p>在 ini 配置文件配置用户拥有的角色（shiro-role.ini）</p>\n<pre class=\"language-ini\" data-language=\"ini\"><code class=\"language-ini\"><span class=\"token selector\">[users]</span>\n<span class=\"token constant\">zhang</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span>123,role1,role2</span>\n<span class=\"token constant\">wang</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span>123,role1</span></code></pre>\n\n<p>规则即：“用户名 = 密码，角色 1，角色 2”，如果需要在应用中判断用户是否有相应角色，就需要在相应的 Realm 中返回角色信息。</p>\n<p><strong>基于资源的访问控制（显示角色）</strong></p>\n<p>在 ini 配置文件配置用户拥有的角色及角色 - 权限关系</p>\n<pre class=\"language-ini\" data-language=\"ini\"><code class=\"language-ini\"><span class=\"token selector\">[users]</span>\n<span class=\"token constant\">zhang</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span>123,role1,role2</span>\n<span class=\"token constant\">wang</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span>123,role1</span>\n<span class=\"token selector\">[roles]</span>\n<span class=\"token constant\">role1</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span>user:create,user:update</span>\n<span class=\"token constant\">role2</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span>user:create,user:delete</span></code></pre>\n\n<p>规则：“用户名 = 密码，角色 1，角色 2”“角色 = 权限 1，权限 2”，即首先根据用户名找到角色，然后根据角色再找到权限</p>\n","categories":["Java","Apache","JavaJar","Shiro"],"tags":["Apache","Java","JavaJar"]},{"title":"在 Vue 中格式化表格中的时间","url":"/2020/11/2020-11-13-%E5%9C%A8Vue%E4%B8%AD%E6%A0%BC%E5%BC%8F%E5%8C%96%E8%A1%A8%E6%A0%BC%E4%B8%AD%E7%9A%84%E6%97%B6%E9%97%B4/","content":"<h3 id=\"Vue-基础表格\"><a href=\"#Vue-基础表格\" class=\"headerlink\" title=\"Vue 基础表格\"></a>Vue 基础表格</h3><pre class=\"language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-table</span> <span class=\"token attr-name\">:data</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tableData<span class=\"token punctuation\">\"</span></span><span class=\"token style-attr language-css\"><span class=\"token attr-name\"> <span class=\"token attr-name\">style</span></span><span class=\"token punctuation\">=\"</span><span class=\"token attr-value\"><span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-table-column</span> <span class=\"token attr-name\">prop</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>date<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>日期<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>180<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-table-column</span><span class=\"token punctuation\">&gt;</span></span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-table-column</span> <span class=\"token attr-name\">prop</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>name<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>姓名<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>180<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-table-column</span><span class=\"token punctuation\">&gt;</span></span>  \n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-table</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n\n<a id=\"more\"></a>\n\n<h3 id=\"定义过滤器\"><a href=\"#定义过滤器\" class=\"headerlink\" title=\"定义过滤器\"></a>定义过滤器</h3><h4 id=\"过滤器文件\"><a href=\"#过滤器文件\" class=\"headerlink\" title=\"过滤器文件\"></a>过滤器文件</h4><pre class=\"language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token comment\">// filters/index.js</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">formatDate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">date<span class=\"token punctuation\">,</span> fmt</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    date <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span>fmt<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"undefined\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        fmt <span class=\"token operator\">=</span> <span class=\"token string\">\"yyyy-MM-dd HH:mm:ss\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token regex\">/(y+)/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>fmt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        fmt <span class=\"token operator\">=</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>RegExp<span class=\"token punctuation\">.</span>$<span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">.</span><span class=\"token function\">getFullYear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span> <span class=\"token operator\">-</span> RegExp<span class=\"token punctuation\">.</span>$<span class=\"token number\">1.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">let</span> o <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">'M+'</span><span class=\"token operator\">:</span> date<span class=\"token punctuation\">.</span><span class=\"token function\">getMonth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'d+'</span><span class=\"token operator\">:</span> date<span class=\"token punctuation\">.</span><span class=\"token function\">getDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'H+'</span><span class=\"token operator\">:</span> date<span class=\"token punctuation\">.</span><span class=\"token function\">getHours</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'m+'</span><span class=\"token operator\">:</span> date<span class=\"token punctuation\">.</span><span class=\"token function\">getMinutes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'s+'</span><span class=\"token operator\">:</span> date<span class=\"token punctuation\">.</span><span class=\"token function\">getSeconds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> k <span class=\"token keyword\">in</span> o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>k<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>fmt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">let</span> str <span class=\"token operator\">=</span> o<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">''</span>\n            fmt <span class=\"token operator\">=</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>RegExp<span class=\"token punctuation\">.</span>$<span class=\"token number\">1</span><span class=\"token punctuation\">,</span> RegExp<span class=\"token punctuation\">.</span>$<span class=\"token number\">1.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">1</span> <span class=\"token operator\">?</span> str <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'00'</span> <span class=\"token operator\">+</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> fmt\n<span class=\"token punctuation\">}</span></code></pre>\n\n<h4 id=\"全局注册\"><a href=\"#全局注册\" class=\"headerlink\" title=\"全局注册\"></a>全局注册</h4><p>在 main.js 中全局注册所有自定义的过滤器</p>\n<pre class=\"language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> filters <span class=\"token keyword\">from</span> <span class=\"token string\">'./filters'</span>\n\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>filters<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  Vue<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> filters<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n\n<h3 id=\"使用过滤器的写法\"><a href=\"#使用过滤器的写法\" class=\"headerlink\" title=\"使用过滤器的写法\"></a>使用过滤器的写法</h3><p>默认格式</p>\n<pre class=\"language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-table</span> <span class=\"token attr-name\">:data</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tableData<span class=\"token punctuation\">\"</span></span><span class=\"token style-attr language-css\"><span class=\"token attr-name\"> <span class=\"token attr-name\">style</span></span><span class=\"token punctuation\">=\"</span><span class=\"token attr-value\"><span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-table-column</span> <span class=\"token attr-name\">label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>日期<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>180<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span> <span class=\"token attr-name\">slot-scope</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>scope<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">&gt;</span></span>{{ scope.row.date | formatDate() }}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">&gt;</span></span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-table-column</span><span class=\"token punctuation\">&gt;</span></span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-table-column</span> <span class=\"token attr-name\">prop</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>name<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>姓名<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>180<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-table-column</span><span class=\"token punctuation\">&gt;</span></span>  \n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-table</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n\n<p>把时间转换成 时：分: 秒 格式</p>\n<pre class=\"language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-table</span> <span class=\"token attr-name\">:data</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tableData<span class=\"token punctuation\">\"</span></span><span class=\"token style-attr language-css\"><span class=\"token attr-name\"> <span class=\"token attr-name\">style</span></span><span class=\"token punctuation\">=\"</span><span class=\"token attr-value\"><span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-table-column</span> <span class=\"token attr-name\">label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>日期<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>180<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span> <span class=\"token attr-name\">slot-scope</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>scope<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">&gt;</span></span>{{ scope.row.date | formatDate('HH:mm:ss') }}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">&gt;</span></span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-table-column</span><span class=\"token punctuation\">&gt;</span></span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-table-column</span> <span class=\"token attr-name\">prop</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>name<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>姓名<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>180<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-table-column</span><span class=\"token punctuation\">&gt;</span></span>  \n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-table</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n\n","categories":["Vue"],"tags":["Vue"]},{"title":"RESTful 架构的介绍和使用","url":"/2020/11/2020-11-10-RESTful%E6%9E%B6%E6%9E%84%E7%9A%84%E4%BB%8B%E7%BB%8D%E5%92%8C%E4%BD%BF%E7%94%A8/","content":"<h3 id=\"REST\"><a href=\"#REST\" class=\"headerlink\" title=\"REST\"></a>REST</h3><p>REST（Representational State Transfer）表象化状态转变（表述性状态转变），在 2000 年被提出，基于 HTTP、URI、XML、JSON 等标准和协议，支持轻量级、跨平台、跨语言的架构设计。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"RESTful-介绍\"><a href=\"#RESTful-介绍\" class=\"headerlink\" title=\"RESTful 介绍\"></a>RESTful 介绍</h3><h4 id=\"主要特点\"><a href=\"#主要特点\" class=\"headerlink\" title=\"主要特点\"></a>主要特点</h4><ul>\n<li>每一个 URI 代表 1 种资源；</li>\n<li>客户端使用 GET、POST、PUT、DELETE 4 个表示操作方式的动词对服务端资源进行操作<ul>\n<li> GET 用来获取资源</li>\n<li> POST 用来新建资源（也可以用于更新资源）</li>\n<li>PUT 用来更新资源</li>\n<li> DELETE 用来删除资源</li>\n</ul>\n</li>\n<li>通过操作资源的表现形式来操作资源</li>\n<li>资源的表现形式是 XML 或者 HTML</li>\n<li> 客户端与服务端之间的交互在请求之间是无状态的，从客户端到服务端的每个请求都必须包含理解请求所必需的信息。</li>\n</ul>\n<p>符合上述 REST 原则的架构方式称为 RESTful。</p>\n<div class=\"note info\"><p> <strong>无状态性</strong></p>\n<p>使得客户端和服务器端不必保存对方的详细信息，服务器只需要处理当前的请求，不需了解请求的历史。可以更容易的释放资源，让服务器利用 Pool（连接池）技术来提高稳定性和性能。</p>\n</div>\n\n<h4 id=\"资源操作\"><a href=\"#资源操作\" class=\"headerlink\" title=\"资源操作\"></a>资源操作</h4><table>\n<thead>\n<tr>\n<th><strong>http 方法</strong></th>\n<th><strong>资源操作</strong></th>\n<th><strong>幂等</strong></th>\n<th><strong>安全</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td> GET</td>\n<td>SELECT</td>\n<td> 是</td>\n<td>是</td>\n</tr>\n<tr>\n<td> POST</td>\n<td>INSERT</td>\n<td> 否</td>\n<td>否</td>\n</tr>\n<tr>\n<td> PUT</td>\n<td>UPDATE</td>\n<td> 是</td>\n<td>否</td>\n</tr>\n<tr>\n<td> DELETE</td>\n<td>DELETE</td>\n<td> 是</td>\n<td>否</td>\n</tr>\n</tbody></table>\n<p><strong>幂等性</strong>：对同一 REST 接口的多次访问，得到的资源状态是相同的。</p>\n<p><strong>安全性</strong>：对该 REST 接口访问，不会使服务器端资源的状态发生改变。</p>\n<h3 id=\"RESTful-API-设计指南\"><a href=\"#RESTful-API-设计指南\" class=\"headerlink\" title=\"RESTful API 设计指南\"></a>RESTful API 设计指南</h3><h4 id=\"路径（Endpoint）\"><a href=\"#路径（Endpoint）\" class=\"headerlink\" title=\"路径（Endpoint）\"></a>路径（Endpoint）</h4><p>路径又称 \"终点\"（endpoint），表示 API 的具体网址。</p>\n<p>在 RESTful 架构中，每个网址代表一种资源（resource），所以网址中不能有动词，只能有名词，而且所用的名词往往与数据库的表格名对应。</p>\n<p>一般来说，数据库中的表都是同种记录的 \"集合\"（collection），所以 API 中的名词也应该使用复数。</p>\n<h4 id=\"HTTP动词\"><a href=\"#HTTP动词\" class=\"headerlink\" title=\"HTTP动词\"></a>HTTP 动词</h4><p>对于资源的具体操作类型，由 HTTP 动词表示。</p>\n<p>常用的 HTTP 动词有下面五个（括号里是对应的 SQL 命令）。</p>\n<ul>\n<li>GET（SELECT）：从服务器取出资源（一项或多项）。</li>\n<li>POST（CREATE）：在服务器新建一个资源。</li>\n<li>PUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）。</li>\n<li>PATCH（UPDATE）：在服务器更新资源（客户端提供改变的属性）。</li>\n<li>DELETE（DELETE）：从服务器删除资源。</li>\n</ul>\n<p>还有两个不常用的 HTTP 动词。</p>\n<ul>\n<li>HEAD：获取资源的元数据。</li>\n<li>OPTIONS：获取信息，关于资源的哪些属性是客户端可以改变的。</li>\n</ul>\n<h4 id=\"过滤信息（Filtering）\"><a href=\"#过滤信息（Filtering）\" class=\"headerlink\" title=\"过滤信息（Filtering）\"></a>过滤信息（Filtering）</h4><p>如果记录数量很多，服务器不可能都将它们返回给用户。API 应该提供参数，过滤返回结果。</p>\n<p>下面是一些常见的参数。</p>\n<blockquote>\n<ul>\n<li>?limit=10：指定返回记录的数量</li>\n<li> ?offset=10：指定返回记录的开始位置。</li>\n<li>?page=2&amp;per_page=100：指定第几页，以及每页的记录数。</li>\n<li>?sortby=name&amp;order=asc：指定返回结果按照哪个属性排序，以及排序顺序。</li>\n<li>?animal_type_id=1：指定筛选条件</li>\n</ul>\n</blockquote>\n<h4 id=\"状态码（Status-Codes）\"><a href=\"#状态码（Status-Codes）\" class=\"headerlink\" title=\"状态码（Status Codes）\"></a>状态码（Status Codes）</h4><p>服务器向用户返回的状态码和提示信息，常见的有以下一些（方括号中是该状态码对应的 HTTP 动词）。</p>\n<blockquote>\n<ul>\n<li>200 OK - [GET]：服务器成功返回用户请求的数据，该操作是幂等的（Idempotent）。</li>\n<li>201 CREATED - [POST/PUT/PATCH]：用户新建或修改数据成功。</li>\n<li>202 Accepted - [*]：表示一个请求已经进入后台排队（异步任务）</li>\n<li>204 NO CONTENT - [DELETE]：用户删除数据成功。</li>\n<li>400 INVALID REQUEST - [POST/PUT/PATCH]：用户发出的请求有错误，服务器没有进行新建或修改数据的操作，该操作是幂等的。</li>\n<li>401 Unauthorized - [*]：表示用户没有权限（令牌、用户名、密码错误）。</li>\n<li>403 Forbidden - [*] 表示用户得到授权（与 401 错误相对），但是访问是被禁止的。</li>\n<li>404 NOT FOUND - [*]：用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是幂等的。</li>\n<li>406 Not Acceptable - [GET]：用户请求的格式不可得（比如用户请求 JSON 格式，但是只有 XML 格式）。</li>\n<li>410 Gone -[GET]：用户请求的资源被永久删除，且不会再得到的。</li>\n<li>422 Unprocesable entity - [POST/PUT/PATCH] 当创建一个对象时，发生一个验证错误。</li>\n<li>500 INTERNAL SERVER ERROR - [*]：服务器发生错误，用户将无法判断发出的请求是否成功。</li>\n</ul>\n</blockquote>\n<p>状态码的完全列表参见 <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy53My5vcmcvUHJvdG9jb2xzL3JmYzI2MTYvcmZjMjYxNi1zZWMxMC5odG1s\">这里<i class=\"fa fa-external-link-alt\"></i></span>。</p>\n<h4 id=\"错误处理（Error-handling）\"><a href=\"#错误处理（Error-handling）\" class=\"headerlink\" title=\"错误处理（Error handling）\"></a>错误处理（Error handling）</h4><p>如果状态码是 4xx，就应该向用户返回出错信息。一般来说，返回的信息中将 error 作为键名，出错信息作为键值即可。</p>\n<pre class=\"language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n    error<span class=\"token operator\">:</span> <span class=\"token string\">\"Invalid API key\"</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<h4 id=\"返回结果\"><a href=\"#返回结果\" class=\"headerlink\" title=\"返回结果\"></a>返回结果</h4><p>针对不同操作，服务器向用户返回的结果应该符合以下规范。</p>\n<ul>\n<li>GET /collection：返回资源对象的列表（数组）</li>\n<li>GET /collection/resource：返回单个资源对象</li>\n<li> POST /collection：返回新生成的资源对象</li>\n<li> PUT /collection/resource：返回完整的资源对象</li>\n<li> PATCH /collection/resource：返回完整的资源对象</li>\n<li> DELETE /collection/resource：返回一个空文档</li>\n</ul>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3Jlc3RmdWwucDJocC5jb20v\">http://restful.p2hp.com/<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5ydWFueWlmZW5nLmNvbS9ibG9nLzIwMTQvMDUvcmVzdGZ1bF9hcGkuaHRtbA==\">http://www.ruanyifeng.com/blog/2014/05/restful_api.html<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n","categories":["Java"],"tags":["RESTful"]},{"title":"vue-admin-template 开启顶部导航","url":"/2020/11/2020-11-12-vue-admin-template%E5%BC%80%E5%90%AF%E9%A1%B6%E9%83%A8%E5%AF%BC%E8%88%AA/","content":"<p>vue-admin-template 默认没有开启 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9wYW5qaWFjaGVuLmdpdGVlLmlvL3Z1ZS1lbGVtZW50LWFkbWluLXNpdGUvemgvZ3VpZGUvZXNzZW50aWFscy90YWdzLXZpZXcuaHRtbA==\">顶部导航<i class=\"fa fa-external-link-alt\"></i></span>，可通过如下步骤进行开启。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"开启步骤\"><a href=\"#开启步骤\" class=\"headerlink\" title=\"开启步骤\"></a>开启步骤</h3><ol>\n<li><p>复制 vue-element-admin 必要组件，到 template 对应的目录下。</p>\n<p><code>@/layout/components/TagsView</code> 文件夹</p>\n<p><code>@/store/modules/tagsView.js</code> 文件</p>\n</li>\n<li><p>添加标签<br>@/layout/components/AppMain.vue 添加：</p>\n<pre class=\"language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">&gt;</span></span>\n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>section</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>app-main<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>transition</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>fade-transform<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">mode</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>out-in<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n     <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>keep-alive</span> <span class=\"token attr-name\">:include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>cachedViews<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>   <span class=\"token comment\">&lt;!-- 新增  --&gt;</span>\n       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>router-view</span> <span class=\"token attr-name\">:key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>key<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n     <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>keep-alive</span><span class=\"token punctuation\">&gt;</span></span>           <span class=\"token comment\">&lt;!-- 新增 --&gt;</span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>transition</span><span class=\"token punctuation\">&gt;</span></span>\n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>section</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n</li>\n<li><p>修改 @store/index.js</p>\n<pre class=\"language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> Vue <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span>\n<span class=\"token keyword\">import</span> Vuex <span class=\"token keyword\">from</span> <span class=\"token string\">'vuex'</span>\n<span class=\"token keyword\">import</span> getters <span class=\"token keyword\">from</span> <span class=\"token string\">'./getters'</span>\n<span class=\"token keyword\">import</span> app <span class=\"token keyword\">from</span> <span class=\"token string\">'./modules/app'</span>\n<span class=\"token keyword\">import</span> settings <span class=\"token keyword\">from</span> <span class=\"token string\">'./modules/settings'</span>\n<span class=\"token keyword\">import</span> user <span class=\"token keyword\">from</span> <span class=\"token string\">'./modules/user'</span>\n<span class=\"token keyword\">import</span> tagsView <span class=\"token keyword\">from</span> <span class=\"token string\">'./modules/tagsView'</span>  <span class=\"token comment\">//新增</span>\n\nVue<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>Vuex<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vuex<span class=\"token punctuation\">.</span>Store</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  modules<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    app<span class=\"token punctuation\">,</span>\n    settings<span class=\"token punctuation\">,</span>\n    user<span class=\"token punctuation\">,</span>\n    tagsView  <span class=\"token comment\">//新增</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  getters\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> store</code></pre>\n</li>\n<li><p>修改 /src/store/getters.js</p>\n<pre class=\"language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> getters <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">sidebar</span><span class=\"token operator\">:</span> <span class=\"token parameter\">state</span> <span class=\"token operator\">=&gt;</span> state<span class=\"token punctuation\">.</span>app<span class=\"token punctuation\">.</span>sidebar<span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">device</span><span class=\"token operator\">:</span> <span class=\"token parameter\">state</span> <span class=\"token operator\">=&gt;</span> state<span class=\"token punctuation\">.</span>app<span class=\"token punctuation\">.</span>device<span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">token</span><span class=\"token operator\">:</span> <span class=\"token parameter\">state</span> <span class=\"token operator\">=&gt;</span> state<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>token<span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">avatar</span><span class=\"token operator\">:</span> <span class=\"token parameter\">state</span> <span class=\"token operator\">=&gt;</span> state<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>avatar<span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">name</span><span class=\"token operator\">:</span> <span class=\"token parameter\">state</span> <span class=\"token operator\">=&gt;</span> state<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">visitedViews</span><span class=\"token operator\">:</span> <span class=\"token parameter\">state</span> <span class=\"token operator\">=&gt;</span> state<span class=\"token punctuation\">.</span>tagsView<span class=\"token punctuation\">.</span>visitedViews<span class=\"token punctuation\">,</span>  <span class=\"token comment\">//新增</span>\n  <span class=\"token function-variable function\">cachedViews</span><span class=\"token operator\">:</span> <span class=\"token parameter\">state</span> <span class=\"token operator\">=&gt;</span> state<span class=\"token punctuation\">.</span>tagsView<span class=\"token punctuation\">.</span>cachedViews  <span class=\"token comment\">//新增</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> getters</code></pre>\n</li>\n<li><p>修改 /src/layout/components/index.js</p>\n<pre class=\"language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">as</span> Navbar <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./Navbar'</span>\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">as</span> Sidebar <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./Sidebar'</span>\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">as</span> AppMain <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./AppMain'</span>\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">as</span> TagsView <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./TagsView/index.vue'</span>   <span class=\"token comment\">//新增</span></code></pre>\n</li>\n<li><p>修改 /src/store/modules/setting.js</p>\n<pre class=\"language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> showSettings<span class=\"token punctuation\">,</span> tagsView<span class=\"token punctuation\">,</span> fixedHeader<span class=\"token punctuation\">,</span> sidebarLogo <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> defaultSettings   <span class=\"token comment\">//新增tagsView</span>\n\n<span class=\"token keyword\">const</span> state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  tagsView<span class=\"token operator\">:</span> tagsView<span class=\"token punctuation\">,</span>   <span class=\"token comment\">//新增</span>\n  showSettings<span class=\"token operator\">:</span> showSettings<span class=\"token punctuation\">,</span>\n  fixedHeader<span class=\"token operator\">:</span> fixedHeader<span class=\"token punctuation\">,</span>\n  sidebarLogo<span class=\"token operator\">:</span> sidebarLogo\n<span class=\"token punctuation\">}</span></code></pre>\n</li>\n<li><p>修改 /src/layout/index.vue</p>\n<pre class=\"language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">:class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>classObj<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>app-wrapper<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">v-if</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>device===<span class=\"token punctuation\">'</span>mobile<span class=\"token punctuation\">'</span>&amp;&amp;sidebar.opened<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>drawer-bg<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>handleClickOutside<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>sidebar</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sidebar-container<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>main-container<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">:class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>{<span class=\"token punctuation\">'</span>fixed-header<span class=\"token punctuation\">'</span>:fixedHeader}<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>navbar</span> <span class=\"token punctuation\">/&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tags-view</span> <span class=\"token attr-name\">v-if</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>needTagsView<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/&gt;</span></span>   <span class=\"token comment\">&lt;!-- 新增 --&gt;</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>app-main</span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"><span class=\"token language-javascript\">\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Navbar<span class=\"token punctuation\">,</span> Sidebar<span class=\"token punctuation\">,</span> AppMain <span class=\"token punctuation\">,</span> TagsView<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./components'</span>   <span class=\"token comment\">//新增 TagsView</span>\n<span class=\"token keyword\">import</span> ResizeMixin <span class=\"token keyword\">from</span> <span class=\"token string\">'./mixin/ResizeHandler'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'Layout'</span><span class=\"token punctuation\">,</span>\n  components<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    Navbar<span class=\"token punctuation\">,</span>\n    Sidebar<span class=\"token punctuation\">,</span>\n    AppMain<span class=\"token punctuation\">,</span>\n    TagsView   <span class=\"token comment\">//新增</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  mixins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>ResizeMixin<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  computed<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">sidebar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$store<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>app<span class=\"token punctuation\">.</span>sidebar\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">device</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$store<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>app<span class=\"token punctuation\">.</span>device\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">fixedHeader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$store<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>settings<span class=\"token punctuation\">.</span>fixedHeader\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">needTagsView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>   <span class=\"token comment\">//新增</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$store<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>settings<span class=\"token punctuation\">.</span>tagsView   <span class=\"token comment\">//新增</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">classObj</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        hideSidebar<span class=\"token operator\">:</span> <span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sidebar<span class=\"token punctuation\">.</span>opened<span class=\"token punctuation\">,</span>\n        openSidebar<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sidebar<span class=\"token punctuation\">.</span>opened<span class=\"token punctuation\">,</span>\n        withoutAnimation<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sidebar<span class=\"token punctuation\">.</span>withoutAnimation<span class=\"token punctuation\">,</span>\n        mobile<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>device <span class=\"token operator\">===</span> <span class=\"token string\">'mobile'</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  methods<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">handleClickOutside</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$store<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'app/closeSideBar'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> withoutAnimation<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n</li>\n<li><p>修改 /src/setting.js</p>\n<pre class=\"language-js\" data-language=\"js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\n  title<span class=\"token operator\">:</span> <span class=\"token string\">'Vue Admin Template'</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">/**\n   * @type {boolean} true | false\n   * @description Whether fix the header\n   */</span>\n  fixedHeader<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">/**\n   * @type {boolean} true | false\n   * @description Whether show the logo in sidebar\n   */</span>\n  sidebarLogo<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">/**\n   * @type {boolean} true | false\n   * @description Whether need tagsView\n   */</span>\n  tagsView<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>   <span class=\"token comment\">//新增</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n\n</li>\n</ol>\n<p>此时，配置完成。效果如下：</p>\n<p><img src=\"/images/2020/11/image-20201111152609312.png\" alt=\"image-20201111152609312\" loading=\"lazy\">   </p>\n<h3 id=\"控制台报错\"><a href=\"#控制台报错\" class=\"headerlink\" title=\"控制台报错\"></a>控制台报错</h3><p>按照如下操作后，控制台报错如下：</p>\n<p><img src=\"/images/2020/11/image-20201111152702537.png\" alt=\"image-20201111152702537\" loading=\"lazy\"></p>\n<p>这是因为拷贝的 TagsView 组件默认开启了权限<br>/src/layout/components/TagsView/index.js</p>\n<p>修改如下，即可解决报错。</p>\n<p>   <img src=\"/images/2020/11/image-20201111152858682.png\" alt=\"image-20201111152858682\" loading=\"lazy\"></p>\n<h3 id=\"Affix-固钉\"><a href=\"#Affix-固钉\" class=\"headerlink\" title=\"Affix 固钉\"></a>Affix 固钉</h3><p>当在声明路由上 添加了 Affix 属性，则当前 <code>tag</code> 会被固定在 <code>tags-view</code> 中（不可被删除）。</p>\n<p>修改文件：@src\\router\\index.js</p>\n<p><img src=\"/images/2020/11/image-20201111153454783.png\" alt=\"image-20201111153454783\" loading=\"lazy\"></p>\n<p>效果如下：</p>\n<p><img src=\"/images/2020/11/image-20201111153535548.png\" alt=\"image-20201111153535548\" loading=\"lazy\">   </p>\n","categories":["Vue"],"tags":["Vue","Element"]},{"title":"基于 Vue+ElementUI 的后台集成方案 vue-element-admin","url":"/2020/11/2020-11-09-%E5%9F%BA%E4%BA%8EVue+ElementUI%E7%9A%84%E5%90%8E%E5%8F%B0%E9%9B%86%E6%88%90%E6%96%B9%E6%A1%88vue-element-admin/","content":"<h3 id=\"vue-element-admin\"><a href=\"#vue-element-admin\" class=\"headerlink\" title=\"vue-element-admin\"></a>vue-element-admin</h3><p>vue-element-admin 是一个后台前端解决方案，它基于 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3Z1ZQ==\">vue<i class=\"fa fa-external-link-alt\"></i></span> 和 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0VsZW1lRkUvZWxlbWVudA==\">element-ui<i class=\"fa fa-external-link-alt\"></i></span> 实现。</p>\n<p>它使用了最新的前端技术栈，内置了 i18n 国际化解决方案，动态路由，权限验证，提炼了典型的业务模型，提供了丰富的功能组件，它可以帮助你快速搭建企业级中后台产品原型。</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL1BhbkppYUNoZW4vdnVlLWVsZW1lbnQtYWRtaW4=\">GitHub<i class=\"fa fa-external-link-alt\"></i></span>，<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wYW5qaWFjaGVuLmdpdGh1Yi5pby92dWUtZWxlbWVudC1hZG1pbi8=\">在线预览<i class=\"fa fa-external-link-alt\"></i></span>，<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL1BhbkppYUNoZW4vdnVlLWVsZW1lbnQtYWRtaW4vd2lraQ==\">Wiki<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vcGFuamlhY2hlbi92dWUtZWxlbWVudC1hZG1pbg==\">Gitee<i class=\"fa fa-external-link-alt\"></i></span>，<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wYW5qaWFjaGVuLmdpdGVlLmlvL3Z1ZS1lbGVtZW50LWFkbWluLw==\">在线预览<i class=\"fa fa-external-link-alt\"></i></span>，<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wYW5qaWFjaGVuLmdpdGVlLmlvL3Z1ZS1lbGVtZW50LWFkbWluLXNpdGUvemgvZ3VpZGUv\">使用文档<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3NjaGluYS5uZXQvcC92dWUtZWxlbWVudC1hZG1pbg==\">OSChina<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<a id=\"more\"></a>\n\n<p>vue-element-admin 的定位是后台集成方案，不适合当基础模板来开发。</p>\n<h4 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h4><pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">├── build                      // 构建相关  \n├── config                     // 配置相关\n├── src                        // 源代码\n│   ├── api                    // 所有请求\n│   ├── assets                 // 主题 字体等静态资源\n│   ├── components             // 全局公用组件\n│   ├── directive              // 全局指令\n│   ├── filtres                // 全局 filter\n│   ├── icons                  // 项目所有 svg icons\n│   ├── lang                   // 国际化 language\n│   ├── mock                   // 项目mock 模拟数据\n│   ├── router                 // 路由\n│   ├── store                  // 全局 store管理\n│   ├── styles                 // 全局样式\n│   ├── utils                  // 全局公用方法\n│   ├── vendor                 // 公用vendor\n│   ├── views                   // view\n│   ├── App.vue                // 入口页面\n│   ├── main.js                // 入口 加载组件 初始化等\n│   └── permission.js          // 权限管理\n├── static                     // 第三方不打包资源\n│   └── Tinymce                // 富文本\n├── .babelrc                   // babel-loader 配置\n├── eslintrc.js                // eslint 配置项\n├── .gitignore                 // <span class=\"token function\">git</span> 忽略项\n├── favicon.ico                // favicon图标\n├── index.html                 // html模板\n└── package.json               // package.json</code></pre>\n\n<h4 id=\"关联项目\"><a href=\"#关联项目\" class=\"headerlink\" title=\"关联项目\"></a>关联项目</h4><ul>\n<li>基础模板： <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vcGFuamlhY2hlbi92dWUtYWRtaW4tdGVtcGxhdGU=\">vueAdmin-template<i class=\"fa fa-external-link-alt\"></i></span> </li>\n<li> 桌面终端： <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL1BhbkppYUNoZW4vZWxlY3Ryb24tdnVlLWFkbWlu\">electron-vue-admin<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<h3 id=\"vue-admin-template\"><a href=\"#vue-admin-template\" class=\"headerlink\" title=\"vue-admin-template\"></a>vue-admin-template</h3><ul>\n<li>GitHub：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL1BhbkppYUNoZW4vdnVlLWFkbWluLXRlbXBsYXRl\">https://github.com/PanJiaChen/vue-admin-template<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li> 演示地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wYW5qaWFjaGVuLmdpdGh1Yi5pby92dWUtYWRtaW4tdGVtcGxhdGU=\">https://panjiachen.github.io/vue-admin-template<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<p><strong>vueAdmin-template</strong> 主要是基于 vue-cli webpack 模板为基础开发的，引入了如下 dependencies:</p>\n<ul>\n<li>element-ui 饿了么出品的 vue2.0 pc UI 框架</li>\n<li> axios 一个现在主流并且很好用的请求库 支持 Promise</li>\n<li>js-cookie 一个轻量的 JavaScript 库来处理 cookie</li>\n<li>normalize.css 格式化 css</li>\n<li>nprogress 轻量的全局进度条控制</li>\n<li> vuex 官方状态管理</li>\n<li> vue-router 官方路由</li>\n</ul>\n","categories":["Vue"],"tags":["Vue","Element"]},{"title":"MyBatis 分页插件 PageHelper","url":"/2020/11/2020-11-18-MyBatis%E5%88%86%E9%A1%B5%E6%8F%92%E4%BB%B6PageHelper/","content":"<h3 id=\"PageHelper-介绍\"><a href=\"#PageHelper-介绍\" class=\"headerlink\" title=\"PageHelper 介绍\"></a>PageHelper 介绍</h3><p>PageHelper 是 Github 上开源的 MyBatis 分页插件，使用起来非常的简单，方便，并且支持任何复杂的单表、多表分页。</p>\n<ul>\n<li>官网：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wYWdlaGVscGVyLmdpdGh1Yi5pby8=\">https://pagehelper.github.io/<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li> 文档：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wYWdlaGVscGVyLmdpdGh1Yi5pby9kb2NzL2hvd3RvdXNlLw==\">https://pagehelper.github.io/docs/howtouse/<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<a id=\"more\"></a>\n\n<h4 id=\"普通-maven\"><a href=\"#普通-maven\" class=\"headerlink\" title=\"普通 maven\"></a>普通 maven</h4><ul>\n<li>GitHub：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3BhZ2VoZWxwZXIvTXliYXRpcy1QYWdlSGVscGVy\">https://github.com/pagehelper/Mybatis-PageHelper<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>Gitee：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vZnJlZS9NeWJhdGlzX1BhZ2VIZWxwZXI=\">https://gitee.com/free/Mybatis_PageHelper<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<p>引入 PageHelper </p>\n<pre class=\"language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token comment\">&lt;!-- https://mvnrepository.com/artifact/com.github.pagehelper/pagehelper --&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>com.github.pagehelper<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>pagehelper<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>5.2.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n\n<h4 id=\"Springboot\"><a href=\"#Springboot\" class=\"headerlink\" title=\"Springboot\"></a>Springboot</h4><ul>\n<li>GitHub：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3BhZ2VoZWxwZXIvcGFnZWhlbHBlci1zcHJpbmctYm9vdA==\">https://github.com/pagehelper/pagehelper-spring-boot<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<p>引入 PageHelper </p>\n<pre class=\"language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>com.github.pagehelper<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>pagehelper-spring-boot-starter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>1.3.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n\n<h3 id=\"类说明\"><a href=\"#类说明\" class=\"headerlink\" title=\"类说明\"></a>类说明</h3><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3BhZ2VoZWxwZXIvTXliYXRpcy1QYWdlSGVscGVyL2Jsb2IvbWFzdGVyL3NyYy9tYWluL2phdmEvY29tL2dpdGh1Yi9wYWdlaGVscGVyL1BhZ2VJbmZvLmphdmE=\">com.github.pagehelper.PageInfo<i class=\"fa fa-external-link-alt\"></i></span> 类的常用属性：</p>\n<ul>\n<li>pageNum：当前为第几页</li>\n<li> pageSize：每页的数据行数</li>\n<li> startRow：当前页数据从第几条开始</li>\n<li> endRow：当前页数据从第几条结束</li>\n<li> pages：总页数</li>\n<li> prePage：上一页页数</li>\n<li> nextPage：下一页页数</li>\n<li> isFirstPage：是否第一页</li>\n<li> isLastPage：是否最后一页</li>\n<li> hasPreviousPage：是否有上一页</li>\n<li> hasNextPage：是否有下一页</li>\n<li> navigatePages：导航页码数</li>\n<li> navigatepageNums：所有页码的数组</li>\n<li> navigateFirstPage：导航条上的第一页</li>\n<li> navigateLastPage：导航条上的最后一页</li>\n</ul>\n<p>示例如下：</p>\n<p><img src=\"/images/2020/11/image-20201118172445823.png\" alt=\"image-20201118172445823\" loading=\"lazy\"></p>\n<h3 id=\"调用方式\"><a href=\"#调用方式\" class=\"headerlink\" title=\"调用方式\"></a>调用方式</h3><pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//第一种，RowBounds方式的调用</span>\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Country</span><span class=\"token punctuation\">&gt;</span></span> list <span class=\"token operator\">=</span> sqlSession<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x.y.selectIf\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RowBounds</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//第二种，Mapper接口方式的调用，推荐这种使用方式。</span>\n<span class=\"token class-name\">PageHelper</span><span class=\"token punctuation\">.</span><span class=\"token function\">startPage</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Country</span><span class=\"token punctuation\">&gt;</span></span> list <span class=\"token operator\">=</span> countryMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectIf</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//第三种，Mapper接口方式的调用，推荐这种使用方式。</span>\n<span class=\"token class-name\">PageHelper</span><span class=\"token punctuation\">.</span><span class=\"token function\">offsetPage</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Country</span><span class=\"token punctuation\">&gt;</span></span> list <span class=\"token operator\">=</span> countryMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectIf</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//第四种，参数方法调用</span>\n<span class=\"token comment\">//存在以下 Mapper 接口方法，你不需要在 xml 处理后两个参数</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">CountryMapper</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Country</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">selectByPageNumSize</span><span class=\"token punctuation\">(</span>\n            <span class=\"token annotation punctuation\">@Param</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">User</span> user<span class=\"token punctuation\">,</span>\n            <span class=\"token annotation punctuation\">@Param</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pageNum\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">int</span> pageNum<span class=\"token punctuation\">,</span>\n            <span class=\"token annotation punctuation\">@Param</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pageSize\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">int</span> pageSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//配置supportMethodsArguments=true</span>\n<span class=\"token comment\">//在代码中直接调用：</span>\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Country</span><span class=\"token punctuation\">&gt;</span></span> list <span class=\"token operator\">=</span> countryMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectByPageNumSize</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//第五种，参数对象</span>\n<span class=\"token comment\">//如果 pageNum 和 pageSize 存在于 User 对象中，只要参数有值，也会被分页</span>\n<span class=\"token comment\">//有如下 User 对象</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//其他fields</span>\n    <span class=\"token comment\">//下面两个参数名和 params 配置的名字一致</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> pageNum<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> pageSize<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//存在以下 Mapper 接口方法，你不需要在 xml 处理后两个参数</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">CountryMapper</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Country</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">selectByPageNumSize</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//当 user 中的 pageNum!= null &amp;&amp; pageSize!= null 时，会自动分页</span>\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Country</span><span class=\"token punctuation\">&gt;</span></span> list <span class=\"token operator\">=</span> countryMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectByPageNumSize</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//第六种，ISelect 接口方式</span>\n<span class=\"token comment\">//jdk6,7用法，创建接口</span>\n<span class=\"token class-name\">Page</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Country</span><span class=\"token punctuation\">&gt;</span></span> page <span class=\"token operator\">=</span> <span class=\"token class-name\">PageHelper</span><span class=\"token punctuation\">.</span><span class=\"token function\">startPage</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">doSelectPage</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ISelect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doSelect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        countryMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectGroupBy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//jdk8 lambda用法</span>\n<span class=\"token class-name\">Page</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Country</span><span class=\"token punctuation\">&gt;</span></span> page <span class=\"token operator\">=</span> <span class=\"token class-name\">PageHelper</span><span class=\"token punctuation\">.</span><span class=\"token function\">startPage</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">doSelectPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-&gt;</span> countryMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectGroupBy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//也可以直接返回PageInfo，注意doSelectPageInfo方法和doSelectPage</span>\npageInfo <span class=\"token operator\">=</span> <span class=\"token class-name\">PageHelper</span><span class=\"token punctuation\">.</span><span class=\"token function\">startPage</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">doSelectPageInfo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ISelect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doSelect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        countryMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectGroupBy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//对应的lambda用法</span>\npageInfo <span class=\"token operator\">=</span> <span class=\"token class-name\">PageHelper</span><span class=\"token punctuation\">.</span><span class=\"token function\">startPage</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">doSelectPageInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-&gt;</span> countryMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectGroupBy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//count查询，返回一个查询语句的count数</span>\n<span class=\"token keyword\">long</span> total <span class=\"token operator\">=</span> <span class=\"token class-name\">PageHelper</span><span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ISelect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doSelect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        countryMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectLike</span><span class=\"token punctuation\">(</span>country<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//lambda</span>\ntotal <span class=\"token operator\">=</span> <span class=\"token class-name\">PageHelper</span><span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-&gt;</span>countryMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectLike</span><span class=\"token punctuation\">(</span>country<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n<h3 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h3><p>简单分页</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 获取第pageNum页，pageSize条内容</span>\n<span class=\"token class-name\">PageHelper</span><span class=\"token punctuation\">.</span><span class=\"token function\">startPage</span><span class=\"token punctuation\">(</span>pageNum<span class=\"token punctuation\">,</span>pageSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 条件查询相关</span>\n<span class=\"token class-name\">Example</span> o <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Example</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Example</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Criteria</span> criteria <span class=\"token operator\">=</span> o<span class=\"token punctuation\">.</span><span class=\"token function\">createCriteria</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\no<span class=\"token punctuation\">.</span><span class=\"token function\">setOrderByClause</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id desc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNoneBlank</span><span class=\"token punctuation\">(</span>userVO<span class=\"token punctuation\">.</span><span class=\"token function\">getUsername</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    criteria<span class=\"token punctuation\">.</span><span class=\"token function\">andLike</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"%\"</span><span class=\"token operator\">+</span>userVO<span class=\"token punctuation\">.</span><span class=\"token function\">getUsername</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\"%\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 紧跟着的第一个select方法会被分页</span>\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">&gt;</span></span> userList <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectAll</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//分页时，实际返回的结果list类型是Page&lt;E&gt;</span>\n<span class=\"token class-name\">PageInfo</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">&gt;</span></span> info<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">PageInfo</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span>userList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n<div class=\"note info\"><p> <strong>重要提示</strong></p>\n<p>只有紧跟在 <code>PageHelper.startPage</code> 方法后的 <strong>第一个</strong> Mybatis 的 <strong>查询（Select）</strong>方法会被分页。</p>\n</div>","categories":["Java","JavaJar"],"tags":["Java","JavaJar","MyBatis"]},{"title":"安装 debian 无法启动的解决办法","url":"/2020/11/2020-11-19-%E5%AE%89%E8%A3%85debian%E6%97%A0%E6%B3%95%E5%90%AF%E5%8A%A8%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/","content":"<p>安装了几次 debian，一直无法启动。一直闪烁光标。后来发现是默认的问题。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"Debian-安装\"><a href=\"#Debian-安装\" class=\"headerlink\" title=\"Debian 安装\"></a>Debian 安装</h3><p>关键在于最后的 GRUB 的选择。如下图：</p>\n<p><img src=\"/images/2020/11/image-20201124185648813.png\" alt=\"image-20201124185648813\" loading=\"lazy\"></p>\n<p><img src=\"/images/2020/11/image-20201124185711361.png\" alt=\"image-20201124185711361\" loading=\"lazy\"></p>\n<h3 id=\"Debian-发行版本\"><a href=\"#Debian-发行版本\" class=\"headerlink\" title=\"Debian 发行版本\"></a>Debian 发行版本</h3><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZGViaWFuLm9yZy9yZWxlYXNlcy8=\">https://www.debian.org/releases/<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<h3 id=\"Debian-官网下载\"><a href=\"#Debian-官网下载\" class=\"headerlink\" title=\"Debian 官网下载\"></a>Debian 官网下载</h3><ul>\n<li>Debian 5（lenny）：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZGViaWFuLm9yZy9yZWxlYXNlcy9sZW5ueS9kZWJpYW4taW5zdGFsbGVyLw==\">https://www.debian.org/releases/lenny/debian-installer/<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>Debian 6（squeeze）：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZGViaWFuLm9yZy9yZWxlYXNlcy9zcXVlZXplL2RlYmlhbi1pbnN0YWxsZXIv\">https://www.debian.org/releases/squeeze/debian-installer/<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>Debian 7（wheezy）：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZGViaWFuLm9yZy9yZWxlYXNlcy93aGVlenkvZGViaWFuLWluc3RhbGxlci8=\">https://www.debian.org/releases/wheezy/debian-installer/<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>Debian 8（jessie）：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZGViaWFuLm9yZy9yZWxlYXNlcy9qZXNzaWUvZGViaWFuLWluc3RhbGxlci8=\">https://www.debian.org/releases/jessie/debian-installer/<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>Debian 9（stretch）：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZGViaWFuLm9yZy9yZWxlYXNlcy9zdHJldGNoL2RlYmlhbi1pbnN0YWxsZXIv\">https://www.debian.org/releases/stretch/debian-installer/<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>Debian 10（buster）：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZGViaWFuLm9yZy9yZWxlYXNlcy9idXN0ZXIvZGViaWFuLWluc3RhbGxlci8=\">https://www.debian.org/releases/buster/debian-installer/<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n","categories":["Linux","Debian"],"tags":["Linux"]},{"title":"Docker 使用 Supervisor 来管理进程","url":"/2020/11/2020-11-23-Docker%E4%BD%BF%E7%94%A8Supervisor%E6%9D%A5%E7%AE%A1%E7%90%86%E8%BF%9B%E7%A8%8B/","content":"<p><strong>Docker</strong> 容器在启动的时候开启单个进程。但我们经常需要在一个机器上开启多个服务，这可以有很多方法，最简单的就是把多个启动命令放到一个启动脚本里面，启动的时候直接启动这个脚本，另外就是安装进程管理工具。</p>\n<p>本小节将使用进程管理工具 supervisor 来管理容器中的多个进程。使用 Supervisor 可以更好的控制、管理、重启我们希望运行的进程。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"配置方法\"><a href=\"#配置方法\" class=\"headerlink\" title=\"配置方法\"></a>配置方法</h3><h4 id=\"Dockerfile-配置\"><a href=\"#Dockerfile-配置\" class=\"headerlink\" title=\"Dockerfile 配置\"></a>Dockerfile 配置</h4><p>执行 apt 安装时注意加入 <code>-y --no-install-recommends</code>，并且在安装完成后执行 <code>rm -rf /var/lib/apt/lists/* &amp;&amp; apt-get clean</code> 命令，可以有效减小镜像的体积。</p>\n<pre class=\"language-dockerfile\" data-language=\"dockerfile\"><code class=\"language-dockerfile\">COPY sources.list /etc/apt/\nRUN apt-get update &amp;&amp; \\\n    apt-get install -y --no-install-recommends \\\n    cron supervisor &amp;&amp; \\\n    rm -rf /var/lib/apt/lists/* &amp;&amp; \\\n    apt-get clean\n\nCOPY run-cron /etc/cron.d/run-cron\nRUN chmod 0644 /etc/cron.d/run-cron\nRUN crontab /etc/cron.d/run-cron\n\nCOPY supervisord.conf /etc/supervisor/conf.d/supervisord.conf\nCMD [\"/usr/bin/supervisord\"]</code></pre>\n\n<p>其中，run-cron 文件内容如下：</p>\n<pre class=\"language-none\"><code class=\"language-none\">PATH=\"/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"\n* * * * * echo `date` &gt;&gt; /tmp/crontab-date\n* * * * * /java-app-dir/healthCheck.sh\n</code></pre>\n\n<p>这样安装完 cron 服务后，crontab 服务并不会自启动，还需要 <code>/etc/init.d/cron start</code> 的启动命令。</p>\n<pre class=\"language-none\"><code class=\"language-none\"># 保存环境变量，开启crontab服务\nenv &gt;&gt; /etc/default/locale\n/etc/init.d/cron start</code></pre>\n\n<p><code>/etc/init.d/cron start</code> 用于启动 crontab 服务，但这样启动的 crontab 服务中配置的定时命令是没有 Dockerfile 中设置的环境变量的。</p>\n<p>因此还需要在这之前执行 <code>env &gt;&gt; /etc/default/locale</code>，这样有 Dockerfile 中通过 <code>ENV</code> 设置的环境变量在 crontab 中就可以正常读取了。</p>\n<h4 id=\"supervisor配置\"><a href=\"#supervisor配置\" class=\"headerlink\" title=\"supervisor配置\"></a>supervisor 配置</h4><p>supervisor 配置文件内容</p>\n<pre class=\"language-ini\" data-language=\"ini\"><code class=\"language-ini\"><span class=\"token selector\">[supervisord]</span>\n<span class=\"token constant\">nodaemon</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span>true</span>\n<span class=\"token selector\">[program:cron]</span>\n<span class=\"token constant\">command</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span>/etc/init.d/cron start</span>\n<span class=\"token selector\">[program:javaapp]</span>\n<span class=\"token constant\">command</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span>/bin/bash -c \"/java-app-dir/appCtrl.sh start &amp;&amp; tail -f /dev/null\"</span></code></pre>\n\n<p>配置文件包含目录和进程：</p>\n<ul>\n<li>第一段 supervsord 配置软件本身，使用 nodaemon 参数来运行。</li>\n<li>第二段包含要控制的 2 个服务。每一段包含一个服务的目录和启动这个服务的命令。</li>\n</ul>\n<h3 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h3><p>创建镜像。</p>\n<pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\">$ <span class=\"token function\">sudo</span> docker build -t test/supervisord <span class=\"token builtin class-name\">.</span></code></pre>\n\n<p>启动 supervisor 容器。</p>\n<pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\">$ <span class=\"token function\">sudo</span> docker run -t -i test/supervisords\n<span class=\"token number\">2020</span>-11-23 <span class=\"token number\">13</span>:48:53,271 INFO Included extra <span class=\"token function\">file</span> <span class=\"token string\">\"/etc/supervisor/conf.d/supervisord.conf\"</span> during parsing\n<span class=\"token number\">2020</span>-11-23 <span class=\"token number\">13</span>:48:53,282 INFO RPC interface <span class=\"token string\">'supervisor'</span> initialized\n<span class=\"token number\">2020</span>-11-23 <span class=\"token number\">13</span>:48:53,282 CRIT Server <span class=\"token string\">'unix_http_server'</span> running without any HTTP authentication checking\n<span class=\"token number\">2020</span>-11-23 <span class=\"token number\">13</span>:48:53,282 INFO supervisord started with pid <span class=\"token number\">1</span>\n<span class=\"token number\">2020</span>-11-23 <span class=\"token number\">13</span>:48:54,284 INFO spawned: <span class=\"token string\">'cron'</span> with pid <span class=\"token number\">8</span>\n<span class=\"token number\">2020</span>-11-23 <span class=\"token number\">13</span>:48:54,286 INFO spawned: <span class=\"token string\">'javaapp'</span> with pid <span class=\"token number\">9</span></code></pre>\n\n","categories":["Container","Docker"],"tags":["Docker","Supervisor"]},{"title":"Debian 下配置网络的方法","url":"/2020/11/2020-11-20-Debian%E4%B8%8B%E9%85%8D%E7%BD%AE%E7%BD%91%E7%BB%9C%E7%9A%84%E6%96%B9%E6%B3%95/","content":"<h3 id=\"网络配置\"><a href=\"#网络配置\" class=\"headerlink\" title=\"网络配置\"></a>网络配置</h3><h4 id=\"配置网卡\"><a href=\"#配置网卡\" class=\"headerlink\" title=\"配置网卡\"></a>配置网卡</h4><p>修改 /etc/network/interfaces 添加如下</p>\n<pre class=\"language-none\"><code class=\"language-none\"># #号后面是备注，不要添加哦！\n \nauto eth0 #开机自动激活\niface eth0 inte static #静态IP\naddress 192.168.0.56 #本机IP\nnetmask 255.255.255.0 #子网掩码\ngateway 192.168.0.254 #路由网关\n \n#因为我是通过路由上网的，所以配置为静态IP和网关</code></pre>\n\n<p>如果是用 DHCP 自动获取，请在配置文件里添加如下：</p>\n<pre class=\"language-none\"><code class=\"language-none\">iface eth0 inet dhcp</code></pre>\n\n<h4 id=\"设置DNS\"><a href=\"#设置DNS\" class=\"headerlink\" title=\"设置DNS\"></a>设置 DNS</h4><pre class=\"language-none\"><code class=\"language-none\">echo \"nameserver 202.96.128.86\" &gt;&gt; /etc/resolv.conf\n#请设置为你当地的DNS</code></pre>\n\n<p>到这里配置好以后，重启一下网络。</p>\n<h4 id=\"重启网络\"><a href=\"#重启网络\" class=\"headerlink\" title=\"重启网络\"></a>重启网络</h4><pre class=\"language-none\"><code class=\"language-none\">/etc/init.d/networking restart</code></pre>\n\n<h3 id=\"网卡配置\"><a href=\"#网卡配置\" class=\"headerlink\" title=\"网卡配置\"></a>网卡配置</h3><p><strong>ifup 命令</strong> 用于激活指定的网络接口。</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 启动网卡eth1</span>\n<span class=\"token function\">ifup</span> eth1</code></pre>\n\n<p><strong>ifdown 命令</strong> 用于禁用指定的网络接口。</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 停止网卡eth1</span>\n<span class=\"token function\">ifdown</span> eth1</code></pre>\n\n<h3 id=\"问题处理\"><a href=\"#问题处理\" class=\"headerlink\" title=\"问题处理\"></a>问题处理</h3><p>问题描述：</p>\n<p>配置完 /etc/networking/interfaces 后，使用 /etc/init.d/networking restart 出现启动失败，根据提示输入 systemctl status networking.service 发现不认识 /etc/networking/interfaces 中配置的虚拟网卡 (或者是因为虚拟机的重新移动导致的设备不匹配问题等)</p>\n<p>解决方法：</p>\n<p>首先可以查看 etc/udev/rules.d/70-persistent-net.rules 是否存在，如果存在，则删除 rm etc/udev/rules.d/70-persistent-net.rules，重启即可</p>\n<p>如果 etc/udev/rules.d/70-persistent-net.rules 不存在，则 ifconfig -a 查看全部网卡，修改 /etc/networking/interfaces 中的网卡名和 ifconfig -a 命令显示的网卡名匹配，重启网络即可。</p>\n","categories":["Linux","Debian"],"tags":["Linux"]},{"title":"Shell 中 kill 掉指定名称的进程","url":"/2020/11/2020-11-24-Shell%E4%B8%ADkill%E6%8E%89%E6%8C%87%E5%AE%9A%E5%90%8D%E7%A7%B0%E7%9A%84%E8%BF%9B%E7%A8%8B/","content":"<p>在 Linux 开发中我们时常会遇到对于之前进程 kill 掉，然后再运行当前进程或程序的情况，此时我们是不知道需要 kill 的进程号的，那么就需要通过一个 shell 命令组合来实现这个需求。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"实现方法\"><a href=\"#实现方法\" class=\"headerlink\" title=\"实现方法\"></a>实现方法</h3><p>如下命令可以实现：</p>\n<pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token function\">ps</span> a <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> -w nameprocess <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> -v <span class=\"token function\">grep</span><span class=\"token operator\">|</span> <span class=\"token function\">cut</span> -c <span class=\"token number\">1</span>-5 <span class=\"token operator\">|</span> <span class=\"token function\">xargs</span> <span class=\"token function\">kill</span> -9</code></pre>\n\n<p>说明：</p>\n<ul>\n<li>管道符 “|” 用来隔开两个命令，管道符左边命令的输出会作为管道符右边命令的输入。 </li>\n<li>“ps a” 是查看所有进程的命令。这时检索出的进程将作为下一条命令 “grep“的输入，注意要结束其它程序时，请将上面命令中的 nameprocess 替换成其它程序名，-w 'nameprocess' 强制 PATTERN 仅完全匹配字词。</li>\n<li>“grep -v grep” 是在列出的进程中去除含有关键字 “grep” 的进程。</li>\n<li>“cut -c 1-5” 是截取输入行的第 1 个字符到第 5 个字符，而这正好是进程号 PID，或者根据自己实际的情况可以调整字符的截取位置。</li>\n<li>“xargs kill -9” 中的 xargs 命令是用来把前面命令的输出结果（PID）作为 “kill -9” 命令的参数，并执行该命令。</li>\n<li>“kill -9” 会强行杀掉指定进程，这样就成功清除了同名进程。</li>\n</ul>\n<h3 id=\"其他方法\"><a href=\"#其他方法\" class=\"headerlink\" title=\"其他方法\"></a>其他方法</h3><pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token function\">ps</span> axu<span class=\"token operator\">|</span><span class=\"token function\">grep</span> nameprocess <span class=\"token operator\">|</span> <span class=\"token function\">awk</span> <span class=\"token string\">'{print \"kill -9 \"}'</span></code></pre>\n\n","categories":["Linux","Shell"],"tags":["Linux","Shell"]},{"title":"RAID 管理工具 MegaCli 的安装使用","url":"/2020/11/2020-11-26-RAID%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7MegaCli%E7%9A%84%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/","content":"<h3 id=\"MegaCli-介绍\"><a href=\"#MegaCli-介绍\" class=\"headerlink\" title=\"MegaCli 介绍\"></a>MegaCli 介绍</h3><p>MegaCli 是一款管理维护硬件 RAID 软件，可以通过它来了解当前 raid 卡的所有信息，包括 raid 卡的型号，raid 的阵列类型，raid 上各磁盘状态，等等。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"MegaCli-安装\"><a href=\"#MegaCli-安装\" class=\"headerlink\" title=\"MegaCli 安装\"></a>MegaCli 安装</h3><h4 id=\"下载安装\"><a href=\"#下载安装\" class=\"headerlink\" title=\"下载安装\"></a>下载安装</h4><p>方案一</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> alien\n<span class=\"token function\">wget</span> --user<span class=\"token operator\">=</span>hetzner --password<span class=\"token operator\">=</span>download http://download.hetzner.de/tools/LSI/tools/MegaCLI/8.07.14_MegaCLI.zip\n<span class=\"token function\">unzip</span> <span class=\"token number\">8.07</span>.14_MegaCLI.zip -d megacli\n<span class=\"token builtin class-name\">cd</span> megacli/Linux\n<span class=\"token function\">sudo</span> alien MegaCli-8.07.14-1.noarch.rpm\n<span class=\"token function\">sudo</span> dpkg -i megacli_8.07.14-2_all.deb\n<span class=\"token function\">ln</span> -s /opt/MegaRAID/MegaCli/MegaCli64 /usr/bin/megacli</code></pre>\n\n<p>方案二</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">apt-get</span> -y <span class=\"token function\">install</span>  rpm2cpio libsysfs2 libsysfs-dev <span class=\"token function\">unzip</span>\n<span class=\"token function\">unzip</span> <span class=\"token number\">8.00</span>.48_Linux_MegaCLI.zip\n<span class=\"token function\">unzip</span> MegaCliLin.zip\nrpm2cpio Lib_Utils-1.00-09.noarch.rpm <span class=\"token operator\">|</span> cpio -idmv\nrpm2cpio MegaCli-8.00.48-1.i386.rpm <span class=\"token operator\">|</span> cpio -idmv\n<span class=\"token function\">ln</span> -s opt/MegaRAID/MegaCli/MegaCli64 /usr/bin/megacli64\n<span class=\"token function\">ln</span> -s opt/MegaRAID/MegaCli/MegaCli /usr/bin/megacli</code></pre>\n\n<h4 id=\"验证安装\"><a href=\"#验证安装\" class=\"headerlink\" title=\"验证安装\"></a>验证安装</h4><pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">$  megacli -v\n      MegaCLI SAS RAID Management Tool  Ver <span class=\"token number\">8.07</span>.14 Dec <span class=\"token number\">16</span>, <span class=\"token number\">2013</span>\n    <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span>Copyright <span class=\"token number\">2013</span>, LSI Corporation, All Rights Reserved.\nExit Code: 0x00</code></pre>\n\n<h4 id=\"安装异常\"><a href=\"#安装异常\" class=\"headerlink\" title=\"安装异常\"></a>安装异常</h4><p>问题：</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ megacli\nmegacli: error <span class=\"token keyword\">while</span> loading shared libraries: libncurses.so.5: cannot <span class=\"token function\">open</span> shared object file: No such <span class=\"token function\">file</span> or directory</code></pre>\n\n<p>解决</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> libncurses5</code></pre>\n\n<h3 id=\"命令汇总\"><a href=\"#命令汇总\" class=\"headerlink\" title=\"命令汇总\"></a>命令汇总</h3><ul>\n<li><p>查看 raid 卡日志</p>\n<p>megacli -FwTermLog -Dsply -aALL</p>\n</li>\n<li><p>显示适配器个数</p>\n<p>megacli -adpCount</p>\n</li>\n<li><p>显示适配器时间</p>\n<p>megacli -AdpGetTime –aALL</p>\n</li>\n<li><p>显示所有适配器信息</p>\n<p>megacli -AdpAllInfo -aAll</p>\n</li>\n<li><p>显示所有逻辑磁盘组信息</p>\n<p>megacli -LDInfo -LALL -aAll</p>\n</li>\n<li><p>查 raid 卡信息 (生产商、电池信息及所支持的 raid 级别)</p>\n<p>megacli -AdpAllInfo -aALL |grep -E \"Product Name|BBU|Memory Size|RAID Level Supported\"</p>\n</li>\n<li><p>查看虚拟化 (vd) 和物理盘 (pd) 的信息，比如查看物理硬盘数，是否有硬盘 offline 或者 degraded</p>\n<p>megacli -AdpAllInfo -aALL |grep -E \"Device Present\" -A9</p>\n</li>\n<li><p>查看硬盘是否 online</p>\n<p>megacli -PDList -aALL |grep \"Firmware state\"</p>\n</li>\n<li><p>查看硬盘是否存在物理错误 (error 不为 0，可能会有硬盘故障即将发生)</p>\n<p>megacli -PDList -aALL |grep -i error</p>\n</li>\n<li><p>查看电池信息 (电池类型、电池状态、充电状态、温度等)</p>\n<p>megacli -AdpBbuCmd -aAll</p>\n</li>\n<li><p>raid 卡个数</p>\n<p>megacli –adpCount</p>\n</li>\n<li><p>检测磁盘 ID 注意，该 ID 值用于标注磁盘</p>\n<p>megacli -PDlist -aALL | grep \"ID\" | uniq</p>\n</li>\n<li><p>显示所有逻辑磁盘组信息 (做了几组 raid，raid cache 的默认和当前策略，做好 raid 后的虚拟盘容量)</p>\n<p>megacli -LDInfo -LALL -aAll</p>\n</li>\n<li><p>显示所有物理盘 (物理磁盘个数、大小、是否存在 error)</p>\n<p>megacli -PDList -aAll</p>\n</li>\n<li><p>显示所有物理盘物理错误</p>\n<p>megacli -PDList -aAll |grep -i error</p>\n</li>\n<li><p>查看充电状态</p>\n<p>megacli -AdpBbuCmd -GetBbuStatus -aALL |grep 'Charger Status'</p>\n</li>\n<li><p>显示 BBU 状态信息，比如电池是否，如果 issohgood 为 Yes 为正常，No 为异常</p>\n</li>\n</ul>\n<p>  megacli -AdpBbuCmd -GetBbuStatus -aALL|grep -i issohgood</p>\n<ul>\n<li><p>显示 BBU 状态信息</p>\n<p>megacli -AdpBbuCmd -GetBbuStatus -aALL</p>\n</li>\n<li><p>显示 BBU 容量信息</p>\n<p>megacli -AdpBbuCmd -GetBbuCapacityInfo -aALL</p>\n</li>\n<li><p>显示 BBU 设计参数</p>\n<p>megacli -AdpBbuCmd -GetBbuDesignInfo -aALL</p>\n</li>\n<li><p>显示当前 BBU 属性</p>\n<p>megacli -AdpBbuCmd -GetBbuProperties -aALL</p>\n</li>\n<li><p>显示 Raid 卡型号，cache 大小、Raid 设置，cache 策略、Disk 相关信息</p>\n<p>megacli -cfgdsply -aALL |egrep \"PDs|VDs|Product Name|Memory|BBU:\"</p>\n</li>\n<li><p>查看磁盘缓存策略 (查看 vd 的)</p>\n<p>megacli -LDGetProp -Cache -LALL -aALL</p>\n</li>\n<li><p>查看磁盘缓存策略 (查看 pd 的)</p>\n<p>megacli -LDGetProp -DskCache -LALL -aALL</p>\n</li>\n<li><p>查看物理磁盘重建进度</p>\n<p>megacli -PDRbld -ShowProg -PhysDrv [1:5] -a0</p>\n</li>\n<li><p>以动态可视化文字界面显示</p>\n<p>megacli -PDRbld -ProgDsply -PhysDrv [1:5] -a0</p>\n</li>\n<li><p>关闭缓存</p>\n<p>megacli -LDSetProp -DisDskCache -L0 -a0</p>\n</li>\n<li><p>显示 Rebuid 进度</p>\n<p>megacli -PDRbld -ShowProg -physdrv[20:2] -aALL</p>\n</li>\n<li><p>查看 E S</p>\n<p>megacli -PDList -aAll -NoLog | grep -Ei \"(enclosure|slot)\"</p>\n</li>\n<li><p>查看所有硬盘的状态</p>\n<p>megacli -PDList -aAll -NoLog</p>\n</li>\n<li><p>查看所有 Virtual Disk 的状态</p>\n<p>megacli -LdPdInfo -aAll -NoLog</p>\n</li>\n<li><p>在线做 Raid</p>\n<p>megacli -CfgLdAdd -r0[0:11] WB NORA Direct CachedBadBBU -strpsz64 -a0 -NoLog</p>\n<p>megacli -CfgLdAdd -r5 [12:2,12:3,12:4,12:5,12:6,12:7] WB Direct -a0</p>\n</li>\n<li><p>点亮指定硬盘 (定位)</p>\n<p>megacli -PdLocate -start -physdrv[252:2] -a0</p>\n</li>\n<li><p>清除 Foreign 状态</p>\n<p>megacli -CfgForeign -Clear -a0</p>\n</li>\n<li><p>查看 RAID 阵列中掉线的盘</p>\n<p>megacli -pdgetmissing -a0</p>\n</li>\n<li><p>替换坏掉的模块</p>\n<p>megacli -pdreplacemissing -physdrv[12:10] -Array5 -row0 -a0</p>\n</li>\n<li><p>手动开启 rebuid</p>\n<p>megacli -pdrbld -start -physdrv[12:10] -a0</p>\n</li>\n<li><p>查看 Megacli 的 log</p>\n<p>megacli -FwTermLog dsply -a0 &gt; adp2.log</p>\n</li>\n<li><p>设置 HotSpare</p>\n<p>megacli -pdhsp -set [-Dedicated [-Array2]] [-EnclAffinity] [-nonRevertible] -PhysDrv[4:11] -a0</p>\n<p>megacli -pdhsp -set [-EnclAffinity] [-nonRevertible] -PhysDrv[32：1}] -a0</p>\n</li>\n<li><p>关闭 Rebuild</p>\n<p>megacli -AdpAutoRbld -Dsbl -a0</p>\n</li>\n<li><p>设置 rebuild 的速率</p>\n<p>megacli -AdpSetProp RebuildRate -30 -a0</p>\n</li>\n<li><p>创建一个 raid5 阵列，由物理盘 2,3 4 构成，该阵列的热备盘是物理盘 5</p>\n<p>megacli-CfgLdA d -r5 [1:2,1:3,1:4] WB Direct -Hsp[1:5] -a0</p>\n</li>\n<li><p>创建阵列，不指定热备</p>\n<p>megacli-CfgLdA d -r5 [1:2,1:3,1:4] WB Direct -a0</p>\n</li>\n<li><p>删除阵列</p>\n<p>megacli-CfgLdDel -L1 -a0</p>\n</li>\n<li><p>在线添加磁盘</p>\n<p>megacli-LDRecon -Star - 5 Ad -PhysDrv[1:4] -L1 -a0</p>\n</li>\n<li><p>阵列创建完后，会有一个初始化同步块的过程，可以看 其进度。</p>\n<p>megacli-LDInit -ShowProg -LA L -aAL</p>\n</li>\n<li><p>以动态可视化文字界面显示</p>\n<p>megacli-LDInit -ProgDsply -LA L -aAL</p>\n</li>\n<li><p>查看阵列后台初始化进度</p>\n<p>megacli-LDBI -ShowProg -LA L -aAL</p>\n</li>\n<li><p>或者以动态可视化文字界面显示</p>\n<p>megacli-LDBI -ProgDsply -LA L -aAL</p>\n</li>\n<li><p>指定第 5 块盘作为全局热备</p>\n<p>megacli-PDHSP -Set [-EnclAf in ty] [-no Rev rtible] -PhysDrv[1:5] -a0</p>\n</li>\n<li><p>指定为某个阵列的专用热备</p>\n<p>megacli-PDHSP -Set [-Dedicated [-Ar ay1] [-EnclAf in ty] [-no Rev rtible] -PhysDrv[1:5] -a0</p>\n</li>\n<li><p>删除全局热备</p>\n<p>megacli-PDHSP -Rmv -PhysDrv[1:5] -a0</p>\n</li>\n<li><p>将某块物理盘下线 / 上线</p>\n<p>megacli -PDOffline -PhysDrv [1:4] -a0</p>\n<p>megacli -PDOnline -PhysDrv [1:4] -a0</p>\n</li>\n<li><p>查看物理磁盘重建进度</p>\n<p>megacli-PDRbld -ShowProg -PhysDrv [1:5] -a0</p>\n</li>\n<li><p>或者以动态可视化文字界面显示</p>\n<p>megacli -PDRbld -ProgDsply -PhysDrv [1:5] -a0</p>\n</li>\n<li><p>查看做 raid 的情况</p>\n<p>megacli -LDInfo -Lal -aAL | grep -E \"RAID Lev l|Strip Size|NumberOf Drives|Span Depth|^Size\"</p>\n</li>\n<li><p>取 Enclosure Device ID</p>\n<p>uiqnum=<code> megacli -PDlist -aAL | grep \"ID\" | uniq |awk -F: '{print $2}' | awk '{print $1}'</code></p>\n</li>\n<li><p>取 Slot Number</p>\n<p>disknum=<code>megacli -PDList -aAL | grep -E \"DISK GROUP|Slot Number|postion:|Firmware sta e:\" | grep Slot | awk -F[: ] '{print $NF}'</code></p>\n</li>\n<li><p>算出总数</p>\n<p>diskto al=<code>megacli -PDList -aAL | grep -E \"DISK GROUP|Slot Number|postion:|Firmware sta e:\" | grep Slot | awk -F[: ] '{print $NF}' | wc -l</code><br>ar ay=($disknum)</p>\n</li>\n<li><p>查看当前 raid 缓存状态，raid 缓存状态设置为 wb 的话要注意电池放电事宜，设置电池放电模式为自动学习模式</p>\n<p>megacli   -ldgetprop  -dskcache -lall  -aall</p>\n</li>\n<li><p>raid 电池设置相关</p>\n<ul>\n<li><p>查看电池状态信息 (Display BBU Status Information)</p>\n<p>megacli -AdpBbuCmd -GetBbuStatus -aN|-a0,1,2|-aALL</p>\n<p>megacli -AdpBbuCmd -GetBbuStatus -aALL</p>\n</li>\n<li><p>查看电池容量（Display BBU Capacity Information）</p>\n<p>megacli -AdpBbuCmd -GetBbuCapacityInfo -aN|-a0,1,2|-aALL</p>\n<p>megacli -AdpBbuCmd -GetBbuCapacityInfo –aALL</p>\n</li>\n<li><p>查看电池设计参数 (Display BBU Design Parameters)</p>\n<p>megacli -AdpBbuCmd -GetBbuDesignInfo -aN|-a0,1,2|-aALL</p>\n<p>megacli -AdpBbuCmd -GetBbuDesignInfo –aALL</p>\n</li>\n<li><p>查看电池属性（Display Current BBU Properties）</p>\n<p>megacli -AdpBbuCmd -GetBbuProperties -aN|-a0,1,2|-aALL</p>\n<p>megacli -AdpBbuCmd -GetBbuProperties –aALL</p>\n</li>\n<li><p>设置电池为学习模式为循环模式（Start BBU Learning Cycle）</p>\n<p>megacli -AdpBbuCmd -BbuLearn -aN|-a0,1,2|-aALL</p>\n</li>\n</ul>\n</li>\n<li><p>查询 raid 级别，磁盘数量，容量，条带大小。</p>\n<p>megacli -cfgdsply -aALL |grep Policy</p>\n</li>\n<li><p>查询控制器 cache 策略</p>\n<p>megacli -LDSetProp WB -L0 -a0</p>\n</li>\n<li><p>设置 write back 功能</p>\n<p>megacli -LDSetProp CachedBadBBU -L0 -a0</p>\n</li>\n<li><p>设置即使电池坏了还是保持 WB 功能</p>\n<p>megacli -AdpBbuCmd -BbuLearn a0</p>\n</li>\n<li><p>手动充电</p>\n<p>megacli -FwTermLog -Dsply -aALL</p>\n</li>\n<li><p>显示适配器个数： </p>\n<p>megacli -adpCount</p>\n</li>\n<li><p>显示所有适配器信息： </p>\n<p>megacli -AdpAllInfo -aAll</p>\n</li>\n<li><p>显示所有逻辑磁盘组信息： </p>\n<p>megacli -LDInfo -LALL -aAll</p>\n</li>\n<li><p>显示所有的物理信息： </p>\n<p>megacli -PDList -aAll<br>Media</p>\n</li>\n<li><p>查看充电状态： </p>\n<p>megacli -AdpBbuCmd -GetBbuStatus -aALL</p>\n</li>\n<li><p>显示 BBU (后备电池) 状态信息： </p>\n<p>megacli -AdpBbuCmd -GetBbuStatus -aALL</p>\n</li>\n<li><p>显示 BBU 容量信息： </p>\n<p>megacli -AdpBbuCmd -GetBbuCapacityInfo -aALL</p>\n</li>\n<li><p>显示 BBU 设计参数： </p>\n<p>megacli -AdpBbuCmd -GetBbuDesignInfo -aALL</p>\n</li>\n<li><p>显示当前 BBU 属性： </p>\n<p>megacli -AdpBbuCmd -GetBbuProperties -aALL</p>\n</li>\n<li><p>显示 Raid 卡型号，Raid 设置，Disk 相关信息： </p>\n<p>megacli -cfgdsply -aALL</p>\n</li>\n<li><p>查看 Cache 策略设置： </p>\n<p>megacli -cfgdsply -aALL |grep -i Policy</p>\n</li>\n<li><p>查看充电进度百分比： </p>\n<p>megacli -AdpBbuCmd -GetBbuStatus -aALL</p>\n</li>\n</ul>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9pZGMud2FueXVuc2h1anUuY29tL2N5bS82NDYuaHRtbA==\">https://idc.wanyunshuju.com/cym/646.html<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vZnhrcmF1cy81OTVhYjgyZTA3Y2Q2ZjhlMDU3ZDMxYmMwYmM1ZTc3OQ==\">https://gist.github.com/fxkraus/595ab82e07cd6f8e057d31bc0bc5e779<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpbnFpZGlhbl94aWFvL2FydGljbGUvZGV0YWlscy84MDk0MDMwNg==\">https://blog.csdn.net/xinqidian_xiao/article/details/80940306<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n","categories":["Linux","软件"],"tags":["Linux","软件","RAID"]},{"title":"ElasticSearch 集成 Spring 之 ElasticsearchTemplate 示例","url":"/2020/11/2020-11-27-ElasticSearch%E9%9B%86%E6%88%90Spring%E4%B9%8BElasticsearchTemplate%E7%A4%BA%E4%BE%8B/","content":"<h3 id=\"ElasticsearchTemplate\"><a href=\"#ElasticsearchTemplate\" class=\"headerlink\" title=\"ElasticsearchTemplate\"></a>ElasticsearchTemplate</h3><p>ElasticsearchTemplate 是 Spring 对 ElasticSearch 的 Java api 进行的封装，提供了大量的相关的类来完成各种各样的查询。</p>\n<h4 id=\"引入依赖\"><a href=\"#引入依赖\" class=\"headerlink\" title=\"引入依赖\"></a>引入依赖</h4><pre class=\"language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token comment\">&lt;!-- https://mvnrepository.com/artifact/org.springframework.data/spring-data-elasticsearch --&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.springframework.data<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>spring-data-elasticsearch<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>3.2.1.RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n\n<a id=\"more\"></a>\n\n<h3 id=\"使用示例\"><a href=\"#使用示例\" class=\"headerlink\" title=\"使用示例\"></a>使用示例</h3><p><strong>索引是否存在</strong></p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\">elasticsearchTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">indexExists</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Test</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p><strong>创建索引并初始化 Mapping</strong></p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">boolean</span> createResult <span class=\"token operator\">=</span> elasticsearchTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">createIndex</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Test</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlogger<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[createResult]\"</span><span class=\"token operator\">+</span>createResult<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nelasticsearchTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">putMapping</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Test</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nelasticsearchTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">refresh</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Test</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n<p><strong>分页查询并计算总数量</strong></p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 特别注意：es的分页从0页开始</span>\n<span class=\"token class-name\">SearchQuery</span> searchQuery <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NativeSearchQueryBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">withQuery</span><span class=\"token punctuation\">(</span>bool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">withPageable</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">PageRequest</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">,</span> perPage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Page</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Account</span><span class=\"token punctuation\">&gt;</span></span> list <span class=\"token operator\">=</span> elasticsearchTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">queryForPage</span><span class=\"token punctuation\">(</span>searchQuery<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Account</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nelasticsearchTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">queryForPage</span><span class=\"token punctuation\">(</span>searchQuery<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Account</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SearchResultMapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token class-name\">T</span> <span class=\"token function\">mapSearchHit</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SearchHit</span> searchHit<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">&gt;</span></span> type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token class-name\">AggregatedPage</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">mapResults</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SearchResponse</span> response<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">&gt;</span></span> clazz<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Pageable</span> pageable<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tpaginator<span class=\"token punctuation\">.</span><span class=\"token function\">setItems</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">getHits</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTotalHits</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n","categories":["Java","JavaClass","Database","ElasticSearch"],"tags":["JavaClass","Java","ElasticSearch"]},{"title":"Java 获取 Kafka 指定 topic 的消息总量","url":"/2020/11/2020-11-29-Java%E8%8E%B7%E5%8F%96Kafka%E6%8C%87%E5%AE%9Atopic%E7%9A%84%E6%B6%88%E6%81%AF%E6%80%BB%E9%87%8F/","content":"<h3 id=\"Kafka-Consumer-API\"><a href=\"#Kafka-Consumer-API\" class=\"headerlink\" title=\"Kafka Consumer API\"></a>Kafka Consumer API</h3><p>Kafka 提供了两套 API 给 Consumer</p>\n<ul>\n<li>The high-level Consumer API</li>\n<li>The SimpleConsumer API </li>\n</ul>\n<p>第一种高度抽象的 Consumer API，它使用起来简单、方便，但是对于某些特殊的需求我们可能要用到第二种更底层的 API。</p>\n<a id=\"more\"></a>\n\n<h4 id=\"SimpleConsumer优势\"><a href=\"#SimpleConsumer优势\" class=\"headerlink\" title=\"SimpleConsumer优势\"></a>SimpleConsumer 优势</h4><p>那么第二种 <code>The SimpleConsumer API </code> 能够帮助我们做哪些事情？</p>\n<ul>\n<li>一个消息读取多次</li>\n<li>在一个处理过程中只消费 Partition 其中的一部分消息</li>\n<li>添加事务管理机制以保证消息被处理且仅被处理一次</li>\n</ul>\n<h4 id=\"SimpleConsumer弊端\"><a href=\"#SimpleConsumer弊端\" class=\"headerlink\" title=\"SimpleConsumer弊端\"></a>SimpleConsumer 弊端</h4><p>使用 SimpleConsumer 有哪些弊端呢？</p>\n<ul>\n<li>必须在程序中跟踪 offset 值</li>\n<li>必须找出指定 Topic Partition 中的 lead broker</li>\n<li> 必须处理 broker 的变动</li>\n</ul>\n<h4 id=\"SimpleConsumer步骤\"><a href=\"#SimpleConsumer步骤\" class=\"headerlink\" title=\"SimpleConsumer步骤\"></a>SimpleConsumer 步骤</h4><p>使用 SimpleConsumer 的步骤</p>\n<ol>\n<li>从所有活跃的 broker 中找出哪个是指定 Topic Partition 中的 leader broker</li>\n<li> 找出指定 Topic Partition 中的所有备份 broker</li>\n<li> 构造请求</li>\n<li>发送请求查询数据</li>\n<li>处理 leader broker 变更</li>\n</ol>\n<h3 id=\"命令行获取topic信息总量\"><a href=\"#命令行获取topic信息总量\" class=\"headerlink\" title=\"命令行获取topic信息总量\"></a>命令行获取 topic 信息总量</h3><pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ bin/kafka-run-class.sh kafka.tools.GetOffsetShell --broker-list XXX1:9092 --topic topicName1 --time -1\ntopicName1:2:73454\ntopicName1:5:73006\ntopicName1:4:73511\ntopicName1:1:73493\ntopicName1:3:73019\ntopicName1:0:72983\n\n$ bin/kafka-run-class.sh kafka.tools.GetOffsetShell --broker-list XXX1:9092 --topic topicName1 --time -2\ntopicName1:2:0\ntopicName1:5:0\ntopicName1:4:0\ntopicName1:1:0\ntopicName1:3:0\ntopicName1:0:0</code></pre>\n\n<p><strong>--time -1</strong> 表示要获取指定 topic 所有分区当前的最大位移，**--time -2** 表示获取当前最早位移。</p>\n<p>两个命令的输出结果相减便可得到所有分区当前的消息总数。</p>\n<blockquote>\n<p>分区当前的消息总数 = [--time-1] - [--time-2]</p>\n</blockquote>\n<p>相减是因为随着 kafka 的运行，topic 中有的消息可能会被删除，因此 <strong>--time -1</strong> 的结果其实表示的是历史上该 topic 生产的最大消息数，如果用户要统计当前的消息总数就必须减去 <strong>--time -2</strong> 的结果。</p>\n<p>本例中没有任何消息被删除，故 <strong>--time -2</strong> 的结果全是 0，表示最早位移都是 0，消息总数等于历史上发送的消息总数。</p>\n<h3 id=\"Java获取topic消息总量\"><a href=\"#Java获取topic消息总量\" class=\"headerlink\" title=\"Java获取topic消息总量\"></a>Java 获取 topic 消息总量</h3><h4 id=\"high-level-Consumer\"><a href=\"#high-level-Consumer\" class=\"headerlink\" title=\"high-level Consumer\"></a>high-level Consumer</h4><p>The high-level Consumer API  获取 Kafka 指定 topic 的消息总量：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Collections</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Optional</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Properties</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>stream<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span>clients<span class=\"token punctuation\">.</span>consumer<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">KafkaConsumer</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span>common<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">TopicPartition</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>slf4j<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Logger</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>slf4j<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">LoggerFactory</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">KafkaOffsetTools</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Logger</span> logger <span class=\"token operator\">=</span> <span class=\"token class-name\">LoggerFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLogger</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">KafkaOffsetTools</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> KAFKA_BOOTSTRAP_SERVERS <span class=\"token operator\">=</span> <span class=\"token string\">\"XXX1:9092,XXX2:9092,XXX3:9092\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> TOPIC_LIST <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"topicName1\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"topicName2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> topic<span class=\"token operator\">:</span> TOPIC_LIST<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">long</span> totolNum <span class=\"token operator\">=</span> <span class=\"token function\">totalMessageCount</span><span class=\"token punctuation\">(</span>topic<span class=\"token punctuation\">,</span> KAFKA_BOOTSTRAP_SERVERS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>topic<span class=\"token operator\">+</span><span class=\"token string\">\":\"</span><span class=\"token operator\">+</span>totolNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">long</span> <span class=\"token function\">totalMessageCount</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> topic<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> brokerList<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Properties</span> props <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Properties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        props<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bootstrap.servers\"</span><span class=\"token punctuation\">,</span> brokerList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        props<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"group.id\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"test-group\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        props<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"enable.auto.commit\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"false\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        props<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key.deserializer\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"org.apache.kafka.common.serialization.StringDeserializer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        props<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"value.deserializer\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"org.apache.kafka.common.serialization.StringDeserializer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">KafkaConsumer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> consumer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">KafkaConsumer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TopicPartition</span><span class=\"token punctuation\">&gt;</span></span> tps <span class=\"token operator\">=</span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofNullable</span><span class=\"token punctuation\">(</span>consumer<span class=\"token punctuation\">.</span><span class=\"token function\">partitionsFor</span><span class=\"token punctuation\">(</span>topic<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">orElse</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">emptyList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>info <span class=\"token operator\">-&gt;</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TopicPartition</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">.</span><span class=\"token function\">topic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> info<span class=\"token punctuation\">.</span><span class=\"token function\">partition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TopicPartition</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">&gt;</span></span> beginOffsets <span class=\"token operator\">=</span> consumer<span class=\"token punctuation\">.</span><span class=\"token function\">beginningOffsets</span><span class=\"token punctuation\">(</span>tps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TopicPartition</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">&gt;</span></span> endOffsets <span class=\"token operator\">=</span> consumer<span class=\"token punctuation\">.</span><span class=\"token function\">endOffsets</span><span class=\"token punctuation\">(</span>tps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n            <span class=\"token keyword\">return</span> tps<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">mapToLong</span><span class=\"token punctuation\">(</span>tp <span class=\"token operator\">-&gt;</span> endOffsets<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>tp<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> beginOffsets<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>tp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<p>输出结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">topicName1:5301171\ntopicName2:439466</code></pre>\n\n<h4 id=\"SimpleConsumer\"><a href=\"#SimpleConsumer\" class=\"headerlink\" title=\"SimpleConsumer\"></a>SimpleConsumer</h4><p>The SimpleConsumer API  获取 Kafka 指定 topic 的消息总量：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Collections</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Date</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HashMap</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Entry</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">TreeMap</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>slf4j<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Logger</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>slf4j<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">LoggerFactory</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">kafka<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PartitionOffsetRequestInfo</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">kafka<span class=\"token punctuation\">.</span>common<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">TopicAndPartition</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">kafka<span class=\"token punctuation\">.</span>javaapi<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">OffsetRequest</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">kafka<span class=\"token punctuation\">.</span>javaapi<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">OffsetResponse</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">kafka<span class=\"token punctuation\">.</span>javaapi<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PartitionMetadata</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">kafka<span class=\"token punctuation\">.</span>javaapi<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">TopicMetadata</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">kafka<span class=\"token punctuation\">.</span>javaapi<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">TopicMetadataRequest</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">kafka<span class=\"token punctuation\">.</span>javaapi<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">TopicMetadataResponse</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">kafka<span class=\"token punctuation\">.</span>javaapi<span class=\"token punctuation\">.</span>consumer<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SimpleConsumer</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">KafkaOffsetTools</span> <span class=\"token punctuation\">{</span>\n    \n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Logger</span> logger <span class=\"token operator\">=</span> <span class=\"token class-name\">LoggerFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLogger</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">KafkaOffsetTools</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> KAFKA_BOOTSTRAP_SERVERS <span class=\"token operator\">=</span> <span class=\"token string\">\"XXX1:9092,XXX2:9092,XXX3:9092\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> TOPIC_LIST <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"topicName1\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"topicName2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> kafkaHosts <span class=\"token operator\">=</span> KAFKA_BOOTSTRAP_SERVERS<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> seeds <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span>kafkaHosts<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">KafkaOffsetTools</span> kot <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">KafkaOffsetTools</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> topicNumMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> topicName <span class=\"token operator\">:</span> TOPIC_LIST<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token class-name\">TreeMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">PartitionMetadata</span><span class=\"token punctuation\">&gt;</span></span> metadatas <span class=\"token operator\">=</span> kot<span class=\"token punctuation\">.</span><span class=\"token function\">findLeader</span><span class=\"token punctuation\">(</span>seeds<span class=\"token punctuation\">,</span> topicName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">int</span> logSize <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">PartitionMetadata</span><span class=\"token punctuation\">&gt;</span></span> entry <span class=\"token operator\">:</span> metadatas<span class=\"token punctuation\">.</span><span class=\"token function\">entrySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">int</span> partition <span class=\"token operator\">=</span> entry<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token class-name\">String</span> leadBroker <span class=\"token operator\">=</span> entry<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">leader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">host</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token class-name\">String</span> clientName <span class=\"token operator\">=</span> <span class=\"token string\">\"Client_\"</span> <span class=\"token operator\">+</span> topicName <span class=\"token operator\">+</span> <span class=\"token string\">\"_\"</span> <span class=\"token operator\">+</span> partition<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token class-name\">SimpleConsumer</span> consumer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleConsumer</span><span class=\"token punctuation\">(</span>leadBroker<span class=\"token punctuation\">,</span> entry<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">leader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">port</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">64</span> <span class=\"token operator\">*</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">,</span> clientName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">long</span> readOffset <span class=\"token operator\">=</span> <span class=\"token function\">getLastOffset</span><span class=\"token punctuation\">(</span>consumer<span class=\"token punctuation\">,</span> topicName<span class=\"token punctuation\">,</span> partition<span class=\"token punctuation\">,</span> kafka<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span><span class=\"token class-name\">OffsetRequest</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">LatestTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> clientName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\tlogSize <span class=\"token operator\">+=</span> readOffset<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>consumer <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\tconsumer<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\ttopicNumMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>topicName<span class=\"token punctuation\">,</span> logSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>topicNumMap<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">TreeMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">PartitionMetadata</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">findLeader</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> a_seedBrokers<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> a_topic<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">TreeMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">PartitionMetadata</span><span class=\"token punctuation\">&gt;</span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">PartitionMetadata</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> seed <span class=\"token operator\">:</span> a_seedBrokers<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token class-name\">SimpleConsumer</span> consumer <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> hostAndPort <span class=\"token operator\">=</span> seed<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\":\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\tconsumer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleConsumer</span><span class=\"token punctuation\">(</span>hostAndPort<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>hostAndPort<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">64</span> <span class=\"token operator\">*</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"leaderLookup\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> topics <span class=\"token operator\">=</span> <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">singletonList</span><span class=\"token punctuation\">(</span>a_topic<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token class-name\">TopicMetadataRequest</span> req <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TopicMetadataRequest</span><span class=\"token punctuation\">(</span>topics<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token class-name\">TopicMetadataResponse</span> resp <span class=\"token operator\">=</span> consumer<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t\t<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TopicMetadata</span><span class=\"token punctuation\">&gt;</span></span> metaData <span class=\"token operator\">=</span> resp<span class=\"token punctuation\">.</span><span class=\"token function\">topicsMetadata</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">TopicMetadata</span> item <span class=\"token operator\">:</span> metaData<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">PartitionMetadata</span> part <span class=\"token operator\">:</span> item<span class=\"token punctuation\">.</span><span class=\"token function\">partitionsMetadata</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t\tmap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>part<span class=\"token punctuation\">.</span><span class=\"token function\">partitionId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> part<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\tlogger<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Broker [\"</span> <span class=\"token operator\">+</span> seed <span class=\"token operator\">+</span> <span class=\"token string\">\"] to find Leader for [\"</span> <span class=\"token operator\">+</span> a_topic <span class=\"token operator\">+</span> <span class=\"token string\">\"] Reason: \"</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>consumer <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\tconsumer<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">return</span> map<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">long</span> <span class=\"token function\">getLastOffset</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SimpleConsumer</span> consumer<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> topic<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> partition<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> whichTime<span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token class-name\">String</span> clientName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">TopicAndPartition</span> topicAndPartition <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TopicAndPartition</span><span class=\"token punctuation\">(</span>topic<span class=\"token punctuation\">,</span> partition<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TopicAndPartition</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">PartitionOffsetRequestInfo</span><span class=\"token punctuation\">&gt;</span></span> requestInfo <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TopicAndPartition</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">PartitionOffsetRequestInfo</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\trequestInfo<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>topicAndPartition<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PartitionOffsetRequestInfo</span><span class=\"token punctuation\">(</span>whichTime<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">OffsetRequest</span> request <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> kafka<span class=\"token punctuation\">.</span>javaapi<span class=\"token punctuation\">.</span><span class=\"token class-name\">OffsetRequest</span><span class=\"token punctuation\">(</span>requestInfo<span class=\"token punctuation\">,</span> kafka<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span><span class=\"token class-name\">OffsetRequest</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">CurrentVersion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> clientName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">OffsetResponse</span> response <span class=\"token operator\">=</span> consumer<span class=\"token punctuation\">.</span><span class=\"token function\">getOffsetsBefore</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">hasError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tlogger<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error fetching data Offset Data the Broker. Reason: \"</span> <span class=\"token operator\">+</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">errorCode</span><span class=\"token punctuation\">(</span>topic<span class=\"token punctuation\">,</span> partition<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">long</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> offsets <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">offsets</span><span class=\"token punctuation\">(</span>topic<span class=\"token punctuation\">,</span> partition<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> offsets<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<p>输出结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">{topicName1=5301171, topicName2=439466}</code></pre>\n\n","categories":["Java","Apache","JavaClass","Kafka"],"tags":["JavaClass","Java","Kafka"]},{"title":"Vue 可拖拽组件 vue-grid-layout 使用入门","url":"/2020/12/2020-12-01-Vue%E5%8F%AF%E6%8B%96%E6%8B%BD%E7%BB%84%E4%BB%B6vue-grid-layout%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8/","content":"<h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><ul>\n<li>官网：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9qYmF5c29sdXRpb25zLmdpdGh1Yi5pby92dWUtZ3JpZC1sYXlvdXQv\">https://jbaysolutions.github.io/vue-grid-layout/<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>GitHub：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2piYXlzb2x1dGlvbnMvdnVlLWdyaWQtbGF5b3V0\">https://github.com/jbaysolutions/vue-grid-layout<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>npmjs：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvdnVlLWdyaWQtbGF5b3V0\">https://www.npmjs.com/package/vue-grid-layout<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<a id=\"more\"></a>\n\n<h3 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h3><ul>\n<li>可拖拽</li>\n<li>可调整大小</li>\n<li>静态部件（不可拖拽、调整大小）</li>\n<li>拖拽和调整大小时进行边界检查</li>\n<li>增减部件时避免重建栅格</li>\n<li>可序列化和还原的布局</li>\n<li>自动化 RTL 支持</li>\n<li>响应式</li>\n</ul>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> vue-grid-layout --save</code></pre>\n\n<h3 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h3><h4 id=\"GridLayout\"><a href=\"#GridLayout\" class=\"headerlink\" title=\"GridLayout\"></a>GridLayout</h4><ul>\n<li><p><strong>layout</strong></p>\n<p>数据源。值必须为 <code>Array</code>，其数据项为 <code>Object</code>。 每条数据项必须有 <code>i</code>, <code>x</code>, <code>y</code>, <code>w</code> 和 <code>h</code> 属性。 请参考下面的 <code>GridItem</code>。</p>\n</li>\n<li><p><strong>responsiveLayouts</strong></p>\n<p>如果 <code>responsive</code> 设置为 <code>true</code>，该配置将作为栅格中每个断点的初始布局。键值是断点名称，每项的值都是类似 <code>layout</code> 属性定义的数据结构，值必须为 <code>Array</code>，其数据项为 <code>Object</code>。例如： <code>{lg: [layout items], md: [layout items]}</code>。需要注意的是，在创建栅格布局后设置该属性无效。</p>\n</li>\n<li><p><strong>colNum</strong></p>\n<p>定义栅格系统的列数，其值需为自然数。</p>\n</li>\n<li><p><strong>rowHeight</strong></p>\n<p>每行的高度，单位像素。</p>\n</li>\n<li><p><strong>maxRows</strong></p>\n<p>定义最大行数。</p>\n</li>\n<li><p><strong>margin</strong></p>\n<p>定义栅格中的元素边距。</p>\n<p>值必须是包含两个 <code>Number</code> 的数组，数组中第一个元素表示水平边距，第二个表示垂直边距，单位为像素。</p>\n</li>\n<li><p><strong>isDraggable</strong></p>\n<p>标识栅格中的元素是否可拖拽。</p>\n</li>\n<li><p><strong>isResizable</strong></p>\n<p>标识栅格中的元素是否可调整大小。</p>\n</li>\n<li><p><strong>isMirrored</strong></p>\n<p>标识栅格中的元素是否可镜像反转。</p>\n</li>\n<li><p><strong>autoSize</strong></p>\n<p>标识容器是否自动调整大小。</p>\n</li>\n<li><p><strong>verticalCompact</strong></p>\n<p>标识布局是否垂直压缩。</p>\n</li>\n<li><p><strong>useCssTransforms</strong></p>\n<p>标识是否使用 CSS 属性 <code>transition-property: transform;</code>。</p>\n</li>\n<li><p><strong>responsive</strong></p>\n<p>标识布局是否为响应式。</p>\n</li>\n<li><p><strong>breakpoints</strong></p>\n<p>为响应式布局设置断点。</p>\n</li>\n<li><p><strong>cols</strong></p>\n<p>设置每个断点对应的列数。</p>\n</li>\n<li><p><strong>useStyleCursor</strong></p>\n<p>标识是否使用动态鼠标指针样式。当拖动出现卡顿时，将此值设为 <code>false</code> 也许可以缓解布局问题。</p>\n</li>\n</ul>\n<h4 id=\"GridItem\"><a href=\"#GridItem\" class=\"headerlink\" title=\"GridItem\"></a>GridItem</h4><ul>\n<li><p><strong>i</strong>：栅格中元素的 ID。</p>\n</li>\n<li><p><strong>x</strong>：标识栅格元素位于第几列，需为自然数。</p>\n</li>\n<li><p><strong>y</strong>：标识栅格元素位于第几行，需为自然数。</p>\n</li>\n<li><p><strong>w</strong>：标识栅格元素的初始宽度，值为 <code>colWidth</code> 的倍数。</p>\n</li>\n<li><p><strong>h</strong>：标识栅格元素的初始高度，值为 <code>rowHeight</code> 的倍数。</p>\n</li>\n<li><p><strong>minW</strong>：栅格元素的最小宽度，值为 <code>colWidth</code> 的倍数。如果 <code>w</code> 小于 <code>minW</code>，则 <code>minW</code> 的值会被 <code>w</code> 覆盖。</p>\n</li>\n<li><p><strong>minH</strong>：栅格元素的最小高度，值为 <code>rowHeight</code> 的倍数。如果 <code>h</code> 小于 <code>minH</code>，则 <code>minH</code> 的值会被 <code>h</code> 覆盖。</p>\n</li>\n<li><p><strong>maxW</strong>：栅格元素的最大宽度，值为 <code>colWidth</code> 的倍数。如果 <code>w</code> 大于 <code>maxW</code>，则 <code>maxW</code> 的值会被 <code>w</code> 覆盖。</p>\n</li>\n<li><p><strong>maxH</strong>：栅格元素的最大高度，值为 <code>rowHeight</code> 的倍数。如果 <code>h</code> 大于 <code>maxH</code>，则 <code>maxH</code> 的值会被 <code>h</code> 覆盖。</p>\n</li>\n<li><p><strong>isDraggable</strong>：标识栅格元素是否可拖拽。如果值为 <code>null</code> 则取决于父容器。</p>\n</li>\n<li><p><strong>isResizable</strong>：标识栅格元素是否可调整大小。如果值为 <code>null</code> 则取决于父容器。</p>\n</li>\n<li><p><strong>static</strong>：标识栅格元素是否为静态的（无法拖拽、调整大小或被其他元素移动）。</p>\n</li>\n<li><p><strong>dragIgnoreFrom</strong>：标识栅格元素中哪些子元素无法触发拖拽事件，值为 <code>css-like</code> 选择器。</p>\n<p>请参考 <span class=\"exturl\" data-url=\"aHR0cDovL2ludGVyYWN0anMuaW8vZG9jcy8jaWdub3JhYmxlLXNlbGVjdG9ycw==\">interact.js docs<i class=\"fa fa-external-link-alt\"></i></span> 中的 <code>ignoreFrom</code>。</p>\n</li>\n<li><p><strong>dragAllowFrom</strong>：标识栅格元素中哪些子元素可以触发拖拽事件，值为 <code>css-like</code> 选择器。如果值为 <code>null</code> 则表示所有子元素（<code>dragIgnoreFrom</code> 的除外）。</p>\n<p>请参考 <span class=\"exturl\" data-url=\"aHR0cDovL2ludGVyYWN0anMuaW8vZG9jcy8jaWdub3JhYmxlLXNlbGVjdG9ycw==\">interact.js docs<i class=\"fa fa-external-link-alt\"></i></span> 中的 <code>allowFrom</code>。</p>\n</li>\n<li><p><strong>resizeIgnoreFrom</strong>：标识栅格元素中哪些子元素无法触发调整大小的事件，值为 <code>css-like</code> 选择器。</p>\n<p>请参考 <span class=\"exturl\" data-url=\"aHR0cDovL2ludGVyYWN0anMuaW8vZG9jcy8jaWdub3JhYmxlLXNlbGVjdG9ycw==\">interact.js docs<i class=\"fa fa-external-link-alt\"></i></span> 中的 <code>ignoreFrom</code>。</p>\n</li>\n</ul>\n<h3 id=\"基础使用\"><a href=\"#基础使用\" class=\"headerlink\" title=\"基础使用\"></a>基础使用</h3><ol>\n<li><p>引入</p>\n<pre class=\"language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> VueGridLayout <span class=\"token keyword\">from</span> <span class=\"token string\">'vue-grid-layout'</span><span class=\"token punctuation\">;</span></code></pre>\n</li>\n<li><p>加入到 Vue 组件</p>\n<pre class=\"language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  components<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      GridLayout<span class=\"token operator\">:</span> VueGridLayout<span class=\"token punctuation\">.</span>GridLayout<span class=\"token punctuation\">,</span>\n      GridItem<span class=\"token operator\">:</span> VueGridLayout<span class=\"token punctuation\">.</span>GridItem\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      layoutData<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  methods<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>layoutData <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token punctuation\">{</span><span class=\"token string\">\"x\"</span><span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"y\"</span><span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"w\"</span><span class=\"token operator\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"h\"</span><span class=\"token operator\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"i\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">{</span><span class=\"token string\">\"x\"</span><span class=\"token operator\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"y\"</span><span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"w\"</span><span class=\"token operator\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"h\"</span><span class=\"token operator\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"i\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">{</span><span class=\"token string\">\"x\"</span><span class=\"token operator\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"y\"</span><span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"w\"</span><span class=\"token operator\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"h\"</span><span class=\"token operator\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"i\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">{</span><span class=\"token string\">\"x\"</span><span class=\"token operator\">:</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"y\"</span><span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"w\"</span><span class=\"token operator\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"h\"</span><span class=\"token operator\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"i\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"3\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">{</span><span class=\"token string\">\"x\"</span><span class=\"token operator\">:</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"y\"</span><span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"w\"</span><span class=\"token operator\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"h\"</span><span class=\"token operator\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"i\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"4\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">{</span><span class=\"token string\">\"x\"</span><span class=\"token operator\">:</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"y\"</span><span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"w\"</span><span class=\"token operator\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"h\"</span><span class=\"token operator\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"i\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"5\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">{</span><span class=\"token string\">\"x\"</span><span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"y\"</span><span class=\"token operator\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"w\"</span><span class=\"token operator\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"h\"</span><span class=\"token operator\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"i\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"6\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">{</span><span class=\"token string\">\"x\"</span><span class=\"token operator\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"y\"</span><span class=\"token operator\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"w\"</span><span class=\"token operator\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"h\"</span><span class=\"token operator\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"i\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"7\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">{</span><span class=\"token string\">\"x\"</span><span class=\"token operator\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"y\"</span><span class=\"token operator\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"w\"</span><span class=\"token operator\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"h\"</span><span class=\"token operator\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"i\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"8\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">{</span><span class=\"token string\">\"x\"</span><span class=\"token operator\">:</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"y\"</span><span class=\"token operator\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"w\"</span><span class=\"token operator\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"h\"</span><span class=\"token operator\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"i\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"9\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">{</span><span class=\"token string\">\"x\"</span><span class=\"token operator\">:</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"y\"</span><span class=\"token operator\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"w\"</span><span class=\"token operator\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"h\"</span><span class=\"token operator\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"i\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"10\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">{</span><span class=\"token string\">\"x\"</span><span class=\"token operator\">:</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"y\"</span><span class=\"token operator\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"w\"</span><span class=\"token operator\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"h\"</span><span class=\"token operator\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"i\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"11\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">{</span><span class=\"token string\">\"x\"</span><span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"y\"</span><span class=\"token operator\">:</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"w\"</span><span class=\"token operator\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"h\"</span><span class=\"token operator\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"i\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"12\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">{</span><span class=\"token string\">\"x\"</span><span class=\"token operator\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"y\"</span><span class=\"token operator\">:</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"w\"</span><span class=\"token operator\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"h\"</span><span class=\"token operator\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"i\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"13\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">{</span><span class=\"token string\">\"x\"</span><span class=\"token operator\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"y\"</span><span class=\"token operator\">:</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"w\"</span><span class=\"token operator\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"h\"</span><span class=\"token operator\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"i\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"14\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">{</span><span class=\"token string\">\"x\"</span><span class=\"token operator\">:</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"y\"</span><span class=\"token operator\">:</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"w\"</span><span class=\"token operator\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"h\"</span><span class=\"token operator\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"i\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"15\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">{</span><span class=\"token string\">\"x\"</span><span class=\"token operator\">:</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"y\"</span><span class=\"token operator\">:</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"w\"</span><span class=\"token operator\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"h\"</span><span class=\"token operator\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"i\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"16\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">{</span><span class=\"token string\">\"x\"</span><span class=\"token operator\">:</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"y\"</span><span class=\"token operator\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"w\"</span><span class=\"token operator\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"h\"</span><span class=\"token operator\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"i\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"17\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">{</span><span class=\"token string\">\"x\"</span><span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"y\"</span><span class=\"token operator\">:</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"w\"</span><span class=\"token operator\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"h\"</span><span class=\"token operator\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"i\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"18\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">{</span><span class=\"token string\">\"x\"</span><span class=\"token operator\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"y\"</span><span class=\"token operator\">:</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"w\"</span><span class=\"token operator\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"h\"</span><span class=\"token operator\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"i\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"19\"</span><span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">created</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n</li>\n<li><p>加入网格</p>\n<pre class=\"language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dashboard-container<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>grid-layout</span>\n            <span class=\"token attr-name\">:layout</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>layoutData<span class=\"token punctuation\">\"</span></span>\n            <span class=\"token attr-name\">:col-num</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>12<span class=\"token punctuation\">\"</span></span>\n            <span class=\"token attr-name\">:row-height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>30<span class=\"token punctuation\">\"</span></span>\n            <span class=\"token attr-name\">:is-draggable</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span>\n            <span class=\"token attr-name\">:is-resizable</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span>\n            <span class=\"token attr-name\">:is-mirrored</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span>\n            <span class=\"token attr-name\">:vertical-compact</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span>\n            <span class=\"token attr-name\">:margin</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>[10, 10]<span class=\"token punctuation\">\"</span></span>\n            <span class=\"token attr-name\">:use-css-transforms</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>grid-item</span> <span class=\"token attr-name\">v-for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item in layoutData<span class=\"token punctuation\">\"</span></span>\n                   <span class=\"token attr-name\">:x</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item.x<span class=\"token punctuation\">\"</span></span>\n                   <span class=\"token attr-name\">:y</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item.y<span class=\"token punctuation\">\"</span></span>\n                   <span class=\"token attr-name\">:w</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item.w<span class=\"token punctuation\">\"</span></span>\n                   <span class=\"token attr-name\">:h</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item.h<span class=\"token punctuation\">\"</span></span>\n                   <span class=\"token attr-name\">:i</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item.i<span class=\"token punctuation\">\"</span></span>\n                   <span class=\"token attr-name\">:key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item.i<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n            {{item.i}}\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>grid-item</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>grid-layout</span><span class=\"token punctuation\">&gt;</span></span>  \n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n</li>\n<li><p>加上点背景颜色</p>\n<pre class=\"language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">.vue-grid-item</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> aquamarine<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n</li>\n<li><p>预览效果</p>\n<p><img src=\"/images/2020/12/image-20201201164548293.png\" alt=\"image-20201201164548293\" loading=\"lazy\"></p>\n</li>\n</ol>\n<h3 id=\"添加右键事件\"><a href=\"#添加右键事件\" class=\"headerlink\" title=\"添加右键事件\"></a>添加右键事件</h3><p>在基础使用的基础上，增加如下配置：</p>\n<ol>\n<li><p>增加按钮</p>\n<pre class=\"language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dashboard-container<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n      \n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>contextmenu<span class=\"token punctuation\">'</span></span> <span class=\"token attr-name\">v-show</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>menuConfig.visible<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">:</span><span class=\"token style-attr language-css\"><span class=\"token attr-name\"><span class=\"token attr-name\">style</span></span><span class=\"token punctuation\">=\"</span><span class=\"token attr-value\"><span class=\"token punctuation\">{</span><span class=\"token property\">left</span><span class=\"token punctuation\">:</span>menuConfig.left+<span class=\"token string\">'px'</span><span class=\"token punctuation\">,</span><span class=\"token property\">top</span><span class=\"token punctuation\">:</span>menuConfig.top+<span class=\"token string\">'px'</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>test(1)<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>test(2)<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>test(3)<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>3<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n      \n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>grid-layout</span>\n            <span class=\"token attr-name\">:layout</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>layoutData<span class=\"token punctuation\">\"</span></span>\n            <span class=\"token attr-name\">:col-num</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>6<span class=\"token punctuation\">\"</span></span>\n            <span class=\"token attr-name\">:row-height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>30<span class=\"token punctuation\">\"</span></span>\n            <span class=\"token attr-name\">:is-draggable</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span>\n            <span class=\"token attr-name\">:is-resizable</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span>\n            <span class=\"token attr-name\">:is-mirrored</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span>\n            <span class=\"token attr-name\">:vertical-compact</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span>\n            <span class=\"token attr-name\">:margin</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>[10, 10]<span class=\"token punctuation\">\"</span></span>\n            <span class=\"token attr-name\">:use-css-transforms</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token punctuation\">&gt;</span></span>\n\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>grid-item</span> <span class=\"token attr-name\">v-for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item in layoutData<span class=\"token punctuation\">\"</span></span>\n                   <span class=\"token attr-name\">:x</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item.x<span class=\"token punctuation\">\"</span></span>\n                   <span class=\"token attr-name\">:y</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item.y<span class=\"token punctuation\">\"</span></span>\n                   <span class=\"token attr-name\">:w</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item.w<span class=\"token punctuation\">\"</span></span>\n                   <span class=\"token attr-name\">:h</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item.h<span class=\"token punctuation\">\"</span></span>\n                   <span class=\"token attr-name\">:i</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item.i<span class=\"token punctuation\">\"</span></span>\n                   <span class=\"token attr-name\">:key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item.i<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>layout-Box<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">@contextmenu.prevent</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>openMenu(item, $event)<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n            {{ item.i }}\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>grid-item</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>grid-layout</span><span class=\"token punctuation\">&gt;</span></span>  \n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n</li>\n<li><p>增加 Data 相关配置</p>\n<pre class=\"language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    menuConfig<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> visible<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> left<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> top<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\nmethods<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 右键打开菜单</span>\n  <span class=\"token function\">openMenu</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">tag<span class=\"token punctuation\">,</span> e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>menuConfig<span class=\"token punctuation\">.</span>visible <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>menuConfig<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>clientX\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>menuConfig<span class=\"token punctuation\">.</span>top <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>clientY\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 关闭菜单</span>\n  <span class=\"token function\">closeMenu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>menuConfig<span class=\"token punctuation\">.</span>visible <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 测试方法</span>\n  <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">i</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\nwatch<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string\">'menuConfig.visible'</span><span class=\"token operator\">:</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val<span class=\"token punctuation\">,</span>oldval</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>menuConfig<span class=\"token punctuation\">.</span>visible<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>closeMenu<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">removeEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>closeMenu<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n</li>\n<li><p>CSS</p>\n<pre class=\"language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">.layout-Box</span><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.contextmenu</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> #fff<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">z-index</span><span class=\"token punctuation\">:</span> 100<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">list-style-type</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 5px 0<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span> 4px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 12px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">font-weight</span><span class=\"token punctuation\">:</span> 400<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #333<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">box-shadow</span><span class=\"token punctuation\">:</span> 2px 2px 3px 0 <span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span>0<span class=\"token punctuation\">,</span> 0<span class=\"token punctuation\">,</span> 0<span class=\"token punctuation\">,</span> .3<span class=\"token punctuation\">)</span><span class=\"token selector\">;\n  li</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 7px 16px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">cursor</span><span class=\"token punctuation\">:</span> pointer<span class=\"token selector\">;\n    &amp;:hover</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> #eee<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n</li>\n<li><p>预览效果：</p>\n<p><img src=\"/images/2020/12/image-20201201184914907.png\" alt=\"image-20201201184914907\" loading=\"lazy\"></p>\n</li>\n</ol>\n","categories":["Vue"],"tags":["Vue"]},{"title":"Potplayer 画质增强教程","url":"/2020/12/2020-12-02-Potplayer%E7%94%BB%E8%B4%A8%E5%A2%9E%E5%BC%BA%E6%95%99%E7%A8%8B/","content":"<h3 id=\"madVR-介绍\"><a href=\"#madVR-介绍\" class=\"headerlink\" title=\"madVR 介绍\"></a>madVR 介绍</h3><ul>\n<li><strong>madVR</strong> 是一款超强的视频插件，其配合高清播放软件，可以做到目前 <strong>PC</strong> 上播放高清视频的最强画质。</li>\n<li><strong>madVR</strong> 这款视频渲染器比市面上大多数播放器自带的渲染器有着更精确的颜色处理，更高质量的图像缩放缩放、以及更低的颜色错误率。这就使得它所渲染出来的视频在颜色上更趋于真实，在画质细节上也要强于其他渲染器。</li>\n<li><strong>madVR</strong> 支持各类显卡，包括 <strong>NVIDIA</strong> 和 <strong>AMD</strong> 的独显以及英特尔的核芯显卡。不过用户在使用 <strong>madVR</strong> 渲染视频时，会占用大量的 <strong>GPU</strong> 资源和 <strong>CPU</strong> 资源。</li>\n</ul>\n<a id=\"more\"></a>\n\n<h3 id=\"PotPlayer\"><a href=\"#PotPlayer\" class=\"headerlink\" title=\"PotPlayer\"></a>PotPlayer</h3><p>下载：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kYXVtcG90cGxheWVyLmNvbS9kb3dubG9hZC8=\">https://daumpotplayer.com/download/<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h3 id=\"安装插件\"><a href=\"#安装插件\" class=\"headerlink\" title=\"安装插件\"></a>安装插件</h3><h4 id=\"视频解码器：LAVFilters\"><a href=\"#视频解码器：LAVFilters\" class=\"headerlink\" title=\"视频解码器：LAVFilters\"></a>视频解码器：LAVFilters</h4><p>下载地址如下：</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">https://github.com/Nevcairiel/LAVFilters/releases</code></pre>\n\n<p>安装：</p>\n<p><img src=\"/images/2020/12/1606913349452.png\" alt=\"1606913349452\" loading=\"lazy\"></p>\n<p>安装 LAV Video（x64）</p>\n<p><img src=\"/images/2020/12/1606913401256.png\" alt=\"1606913401256\" loading=\"lazy\"></p>\n<h4 id=\"视频渲染器：madVR\"><a href=\"#视频渲染器：madVR\" class=\"headerlink\" title=\"视频渲染器：madVR\"></a>视频渲染器：madVR</h4><p><strong>下载地址</strong>：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5tYWR2ci5jb20v\">http://www.madVR.com/<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p><strong>下载软件</strong>：</p>\n<p><img src=\"/images/2020/12/1606914039961.png\" alt=\"1606914039961\" loading=\"lazy\"></p>\n<p><strong>安装软件</strong></p>\n<p>右键点击 install.bat，以管理员身份运行</p>\n<p><img src=\"/images/2020/12/1606914072646.png\" alt=\"1606914072646\" loading=\"lazy\"></p>\n<p>安装成功显示：</p>\n<p><img src=\"/images/2020/12/1606913478055.png\" alt=\"1606913478055\" loading=\"lazy\"></p>\n<h3 id=\"配置插件\"><a href=\"#配置插件\" class=\"headerlink\" title=\"配置插件\"></a>配置插件</h3><p>按 F5 进入滤镜，激活条件改为<strong>不使用</strong>，<strong>取消勾选</strong>使内置视频编解码器 / 图像处理那行，然后应用、确定。</p>\n<p><img src=\"/images/2020/12/1606914217121.png\" alt=\"1606914217121\" loading=\"lazy\"></p>\n<p>进入滤镜子选项：全局滤镜优先权</p>\n<ol>\n<li><p>添加系统滤镜，增加系统滤镜，增加 LAV 和 madVR</p>\n<p><img src=\"/images/2020/12/1606914266875.png\" alt=\"1606914266875\" loading=\"lazy\"></p>\n</li>\n<li><p>优先顺序改为强制使用</p>\n<p><img src=\"/images/2020/12/1606914328106.png\" alt=\"1606914328106\" loading=\"lazy\"></p>\n</li>\n<li><p>应用、确定</p>\n</li>\n</ol>\n<h3 id=\"验证插件\"><a href=\"#验证插件\" class=\"headerlink\" title=\"验证插件\"></a>验证插件</h3><p>重启软件，并播放视频，按下 Tab 键。</p>\n<p>此时，视频解码器是 LAV，视频渲染器是 madVR。</p>\n<p><img src=\"/images/2020/12/1606914490789.png\" alt=\"1606914490789\" loading=\"lazy\"></p>\n","categories":["软件","Windows"],"tags":["软件","Windows","视频","Potplayer"]},{"title":"Vue 可拖拽组件 vue-grid-layout 嵌套页面","url":"/2020/12/2020-12-08-Vue%E5%8F%AF%E6%8B%96%E6%8B%BD%E7%BB%84%E4%BB%B6vue-grid-layout%E5%B5%8C%E5%A5%97%E9%A1%B5%E9%9D%A2/","content":"<h3 id=\"嵌套页面方式\"><a href=\"#嵌套页面方式\" class=\"headerlink\" title=\"嵌套页面方式\"></a>嵌套页面方式</h3><ul>\n<li>普通嵌套</li>\n<li> ifream 嵌套</li>\n</ul>\n<a id=\"more\"></a>\n\n<h3 id=\"普通嵌套\"><a href=\"#普通嵌套\" class=\"headerlink\" title=\"普通嵌套\"></a>普通嵌套</h3><ol>\n<li><p>vue-grid-layout 设置：</p>\n<pre class=\"language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>grid-layout</span>\n            <span class=\"token attr-name\">:layout</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>layoutData<span class=\"token punctuation\">\"</span></span>\n            <span class=\"token attr-name\">:col-num</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>6<span class=\"token punctuation\">\"</span></span>\n            <span class=\"token attr-name\">:row-height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>30<span class=\"token punctuation\">\"</span></span>\n            <span class=\"token attr-name\">:is-draggable</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span>\n            <span class=\"token attr-name\">:is-resizable</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span>\n            <span class=\"token attr-name\">:is-mirrored</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span>\n            <span class=\"token attr-name\">:vertical-compact</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span>\n            <span class=\"token attr-name\">:auto-size</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span>\n            <span class=\"token attr-name\">:margin</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>[10, 10]<span class=\"token punctuation\">\"</span></span>\n            <span class=\"token attr-name\">:use-css-transforms</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span>\n            <span class=\"token punctuation\">&gt;</span></span>\n   \n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>grid-item</span> <span class=\"token attr-name\">v-for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item in layoutData<span class=\"token punctuation\">\"</span></span>\n              <span class=\"token attr-name\">:x</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item.x<span class=\"token punctuation\">\"</span></span>\n              <span class=\"token attr-name\">:y</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item.y<span class=\"token punctuation\">\"</span></span>\n              <span class=\"token attr-name\">:w</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item.w<span class=\"token punctuation\">\"</span></span>\n              <span class=\"token attr-name\">:h</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item.h<span class=\"token punctuation\">\"</span></span>\n              <span class=\"token attr-name\">:i</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item.i<span class=\"token punctuation\">\"</span></span>\n              <span class=\"token attr-name\">:key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item.i<span class=\"token punctuation\">\"</span></span>\n              <span class=\"token attr-name\">@resize</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>resizeEvent<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">v-if</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item.i == 0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>indexGrid0</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>indexGrid0</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">v-if</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item.i == 1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>indexGrid1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>indexGrid1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">v-if</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item.i == 2<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>indexGrid2</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>indexGrid2</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">v-if</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item.i == 3<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>indexGrid3</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>indexGrid3</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">v-if</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item.i == 4<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>indexGrid4</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>indexGrid4</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">v-if</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item.i == 5<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>indexGrid5</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>indexGrid5</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>grid-item</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n</li>\n<li><p>引入页面</p>\n<pre class=\"language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> VueGridLayout <span class=\"token keyword\">from</span> <span class=\"token string\">'vue-grid-layout'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> indexGrid0 <span class=\"token keyword\">from</span> <span class=\"token string\">'@/views/dashboard/index-grid0'</span>\n<span class=\"token keyword\">import</span> indexGrid1 <span class=\"token keyword\">from</span> <span class=\"token string\">'@/views/dashboard/index-grid1'</span>\n<span class=\"token keyword\">import</span> indexGrid2 <span class=\"token keyword\">from</span> <span class=\"token string\">'@/views/dashboard/index-grid2'</span>\n<span class=\"token keyword\">import</span> indexGrid3 <span class=\"token keyword\">from</span> <span class=\"token string\">'@/views/dashboard/index-grid3'</span>\n<span class=\"token keyword\">import</span> indexGrid4 <span class=\"token keyword\">from</span> <span class=\"token string\">'@/views/dashboard/index-grid4'</span>\n<span class=\"token keyword\">import</span> indexGrid5 <span class=\"token keyword\">from</span> <span class=\"token string\">'@/views/dashboard/index-grid5'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  components<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      GridLayout<span class=\"token operator\">:</span> VueGridLayout<span class=\"token punctuation\">.</span>GridLayout<span class=\"token punctuation\">,</span>\n      GridItem<span class=\"token operator\">:</span> VueGridLayout<span class=\"token punctuation\">.</span>GridItem<span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'indexGrid0'</span><span class=\"token operator\">:</span> indexGrid0<span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'indexGrid1'</span><span class=\"token operator\">:</span> indexGrid1<span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'indexGrid2'</span><span class=\"token operator\">:</span> indexGrid2<span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'indexGrid3'</span><span class=\"token operator\">:</span> indexGrid3<span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'indexGrid4'</span><span class=\"token operator\">:</span> indexGrid4<span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'indexGrid5'</span><span class=\"token operator\">:</span> indexGrid5\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre>\n</li>\n<li><p>页面示例</p>\n<pre class=\"language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">&gt;</span></span>\n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span>11111<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span>\n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"><span class=\"token language-javascript\">\n   <span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span> <span class=\"token attr-name\">scoped</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token style\"><span class=\"token language-css\">\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n\n</li>\n</ol>\n<h3 id=\"ifream-嵌套\"><a href=\"#ifream-嵌套\" class=\"headerlink\" title=\"ifream 嵌套\"></a>ifream 嵌套</h3><ol>\n<li><p>vue-grid-layout 设置：</p>\n<pre class=\"language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>grid-layout</span>\n             <span class=\"token attr-name\">:layout</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>layoutData<span class=\"token punctuation\">\"</span></span>\n             <span class=\"token attr-name\">:col-num</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>6<span class=\"token punctuation\">\"</span></span>\n             <span class=\"token attr-name\">:row-height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>30<span class=\"token punctuation\">\"</span></span>\n             <span class=\"token attr-name\">:is-draggable</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span>\n             <span class=\"token attr-name\">:is-resizable</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span>\n             <span class=\"token attr-name\">:is-mirrored</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span>\n             <span class=\"token attr-name\">:vertical-compact</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span>\n             <span class=\"token attr-name\">:auto-size</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span>\n             <span class=\"token attr-name\">:margin</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>[10, 10]<span class=\"token punctuation\">\"</span></span>\n             <span class=\"token attr-name\">:use-css-transforms</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span>\n             <span class=\"token punctuation\">&gt;</span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>grid-item</span> <span class=\"token attr-name\">v-for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item in layoutData<span class=\"token punctuation\">\"</span></span>\n               <span class=\"token attr-name\">:x</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item.x<span class=\"token punctuation\">\"</span></span>\n               <span class=\"token attr-name\">:y</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item.y<span class=\"token punctuation\">\"</span></span>\n               <span class=\"token attr-name\">:w</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item.w<span class=\"token punctuation\">\"</span></span>\n               <span class=\"token attr-name\">:h</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item.h<span class=\"token punctuation\">\"</span></span>\n               <span class=\"token attr-name\">:i</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item.i<span class=\"token punctuation\">\"</span></span>\n               <span class=\"token attr-name\">:key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item.i<span class=\"token punctuation\">\"</span></span>\n               <span class=\"token attr-name\">@resize</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>resizeEvent<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>iframe</span> <span class=\"token attr-name\">v-if</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item.i == 0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>./indexGrid0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>100%<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>100%<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">frameborder</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">scrolling</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>auto<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>iframe</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>iframe</span> <span class=\"token attr-name\">v-if</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item.i == 1<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>./indexGrid1<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>100%<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>100%<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">frameborder</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">scrolling</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>auto<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>iframe</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>iframe</span> <span class=\"token attr-name\">v-if</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item.i == 2<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>./indexGrid2<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>100%<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>100%<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">frameborder</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">scrolling</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>auto<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>iframe</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>iframe</span> <span class=\"token attr-name\">v-if</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item.i == 3<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>./indexGrid3<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>100%<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>100%<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">frameborder</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">scrolling</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>auto<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>iframe</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>iframe</span> <span class=\"token attr-name\">v-if</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item.i == 4<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>./indexGrid4<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>100%<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>100%<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">frameborder</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">scrolling</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>auto<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>iframe</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>iframe</span> <span class=\"token attr-name\">v-if</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item.i == 5<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://www.baidu.com/<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>100%<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>100%<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">frameborder</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">scrolling</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>auto<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>iframe</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>grid-item</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>grid-layout</span><span class=\"token punctuation\">&gt;</span></span>  </code></pre>\n\n<p>或者：</p>\n<pre class=\"language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>grid-item</span> <span class=\"token attr-name\">v-for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item in layoutData<span class=\"token punctuation\">\"</span></span>\n                   <span class=\"token attr-name\">:x</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item.x<span class=\"token punctuation\">\"</span></span>\n                   <span class=\"token attr-name\">:y</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item.y<span class=\"token punctuation\">\"</span></span>\n                   <span class=\"token attr-name\">:w</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item.w<span class=\"token punctuation\">\"</span></span>\n                   <span class=\"token attr-name\">:h</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item.h<span class=\"token punctuation\">\"</span></span>\n                   <span class=\"token attr-name\">:i</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item.i<span class=\"token punctuation\">\"</span></span>\n                   <span class=\"token attr-name\">:key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item.i<span class=\"token punctuation\">\"</span></span>\n                   <span class=\"token attr-name\">@resize</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>resizeEvent<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>widget-title<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>{{ item.title }}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">&gt;</span></span> \n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>iframe</span> <span class=\"token attr-name\">:src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item.src<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>100%<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>100%<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">frameborder</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">scrolling</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>auto<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>iframe</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>grid-item</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"><span class=\"token language-javascript\">\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  methods<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>layoutData <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token punctuation\">{</span><span class=\"token string\">\"x\"</span><span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"y\"</span><span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"w\"</span><span class=\"token operator\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"h\"</span><span class=\"token operator\">:</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"i\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"title\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"System Information\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"src\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"./indexGrid0\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">{</span><span class=\"token string\">\"x\"</span><span class=\"token operator\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"y\"</span><span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"w\"</span><span class=\"token operator\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"h\"</span><span class=\"token operator\">:</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"i\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"title\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"System Resources\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"src\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"./indexGrid1\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">{</span><span class=\"token string\">\"x\"</span><span class=\"token operator\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"y\"</span><span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"w\"</span><span class=\"token operator\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"h\"</span><span class=\"token operator\">:</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"i\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"title\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"Scanning Statistics\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"src\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"./indexGrid2\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">{</span><span class=\"token string\">\"x\"</span><span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"y\"</span><span class=\"token operator\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"w\"</span><span class=\"token operator\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"h\"</span><span class=\"token operator\">:</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"i\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"3\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"title\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"Threats Distribution - Last 24 Hours\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"src\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"./indexGrid3\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">{</span><span class=\"token string\">\"x\"</span><span class=\"token operator\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"y\"</span><span class=\"token operator\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"w\"</span><span class=\"token operator\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"h\"</span><span class=\"token operator\">:</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"i\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"4\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"title\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"Pending Job Statistics\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"src\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"./indexGrid4\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">{</span><span class=\"token string\">\"x\"</span><span class=\"token operator\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"y\"</span><span class=\"token operator\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"w\"</span><span class=\"token operator\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"h\"</span><span class=\"token operator\">:</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"i\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"5\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"title\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"Baidu\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"src\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"https://www.baidu.com/\"</span><span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">created</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n</li>\n<li><p>路由配置 <code>src\\router\\index.js</code>：</p>\n<pre class=\"language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> constantRouterMap <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    path<span class=\"token operator\">:</span> <span class=\"token string\">'/indexGrid0'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">component</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@/views/dashboard/index-grid0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    hidden<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    path<span class=\"token operator\">:</span> <span class=\"token string\">'/indexGrid1'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">component</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@/views/dashboard/index-grid1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    hidden<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    path<span class=\"token operator\">:</span> <span class=\"token string\">'/indexGrid2'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">component</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@/views/dashboard/index-grid2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    hidden<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    path<span class=\"token operator\">:</span> <span class=\"token string\">'/indexGrid3'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">component</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@/views/dashboard/index-grid3'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    hidden<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    path<span class=\"token operator\">:</span> <span class=\"token string\">'/indexGrid4'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">component</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@/views/dashboard/index-grid4'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    hidden<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    path<span class=\"token operator\">:</span> <span class=\"token string\">'/indexGrid5'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">component</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@/views/dashboard/index-grid5'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    hidden<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span></code></pre>\n</li>\n<li><p>页面效果：</p>\n<p><img src=\"/images/2020/12/image-20201208155342443.png\" alt=\"image-20201208155342443\" loading=\"lazy\"></p>\n</li>\n</ol>\n<h4 id=\"iframe-按钮刷新\"><a href=\"#iframe-按钮刷新\" class=\"headerlink\" title=\"iframe 按钮刷新\"></a>iframe 按钮刷新</h4><p>增加刷新按钮：</p>\n<pre class=\"language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>grid-item</span> <span class=\"token attr-name\">v-for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item in layoutData<span class=\"token punctuation\">\"</span></span>\n                   <span class=\"token attr-name\">:x</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item.x<span class=\"token punctuation\">\"</span></span>\n                   <span class=\"token attr-name\">:y</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item.y<span class=\"token punctuation\">\"</span></span>\n                   <span class=\"token attr-name\">:w</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item.w<span class=\"token punctuation\">\"</span></span>\n                   <span class=\"token attr-name\">:h</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item.h<span class=\"token punctuation\">\"</span></span>\n                   <span class=\"token attr-name\">:i</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item.i<span class=\"token punctuation\">\"</span></span>\n                   <span class=\"token attr-name\">:key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item.i<span class=\"token punctuation\">\"</span></span>\n                   <span class=\"token attr-name\">@resize</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>resizeEvent<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>refresh-button<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>refreshPage(item.i)<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>i</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>el-icon-refresh<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>iframe</span> <span class=\"token attr-name\">:src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item.src<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">:id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>`iframe${(item.i)}`<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>100%<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>100%<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">frameborder</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">scrolling</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>auto<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>iframe</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>grid-item</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n\n<p>对应 JS 方法：</p>\n<pre class=\"language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token function\">refreshPage</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">pageNum</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> _iframe <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'iframe'</span><span class=\"token operator\">+</span>pageNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    _iframe<span class=\"token punctuation\">.</span>contentWindow<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span><span class=\"token function\">reload</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<div class=\"note info\"><p>Vue 的标签属性 label 中字符串拼接变量：</p>\n<pre class=\"language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-form-item</span> <span class=\"token attr-name\">:label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>`参数${(index + 1)}类型`<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">v-for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>(item, index,) in props.row.params<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">v-text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-form-item</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n</div>","categories":["Vue"],"tags":["Vue"]},{"title":"ElasticSearch 集成 Spring 之 RestHighLevelClient 示例","url":"/2020/12/2020-12-06-ElasticSearch%E9%9B%86%E6%88%90Spring%E4%B9%8BRestHighLevelClient%E7%A4%BA%E4%BE%8B/","content":"<h3 id=\"RestHighLevelClient\"><a href=\"#RestHighLevelClient\" class=\"headerlink\" title=\"RestHighLevelClient\"></a>RestHighLevelClient</h3><p>RestHighLevelClient 是官方指定的连接 API。</p>\n<p>另外一个是 TransportClient，但是 TransportClient 这个是已经废弃不用的，所以会在 ES8.0 之后完全移除，也就是说 8.0 之后就无法使用了。</p>\n<p>引入依赖：</p>\n<pre class=\"language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.elasticsearch.client<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>elasticsearch-rest-client<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>${elasticsearch.version}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.elasticsearch.client<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>elasticsearch-rest-high-level-client<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>${elasticsearch.version}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n\n<a id=\"more\"></a>\n\n<h3 id=\"配置连接\"><a href=\"#配置连接\" class=\"headerlink\" title=\"配置连接\"></a>配置连接</h3><p>配置文件 <code>application.properties</code>：</p>\n<pre class=\"language-properties\" data-language=\"properties\"><code class=\"language-properties\"><span class=\"token attr-name\">spring.data.elasticsearch.host</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">192.168.10.31:192.168.10.32:192.168.10.33:192.168.10.34</span>\n<span class=\"token attr-name\">spring.data.elasticsearch.port</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">9200</span>\n<span class=\"token attr-name\">spring.data.elasticsearch.username</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">elastic</span>\n<span class=\"token attr-name\">spring.data.elasticsearch.password</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">123456</span></code></pre>\n\n<p>配置 Java 类：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpHost</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span>auth<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AuthScope</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span>auth<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">UsernamePasswordCredentials</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">CredentialsProvider</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span>impl<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">BasicCredentialsProvider</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>elasticsearch<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RestClient</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>elasticsearch<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RestHighLevelClient</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>slf4j<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Logger</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>slf4j<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">LoggerFactory</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DisposableBean</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FactoryBean</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">InitializingBean</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Value</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Configuration</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ElasticsearchConfiguration</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">FactoryBean</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">RestHighLevelClient</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InitializingBean</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">DisposableBean</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Logger</span> LOGGER <span class=\"token operator\">=</span> <span class=\"token class-name\">LoggerFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLogger</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ElasticsearchConfiguration</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"${spring.data.elasticsearch.host}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> host<span class=\"token punctuation\">;</span>\n    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"${spring.data.elasticsearch.port}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> port<span class=\"token punctuation\">;</span>\n    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"${spring.data.elasticsearch.username}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> username<span class=\"token punctuation\">;</span>\n    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"${spring.data.elasticsearch.password}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> password<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">RestHighLevelClient</span> restHighLevelClient<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            LOGGER<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Closing elasticSearch client\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>restHighLevelClient <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                restHighLevelClient<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            LOGGER<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error closing ElasticSearch client: \"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">RestHighLevelClient</span> <span class=\"token function\">getObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> restHighLevelClient<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">RestHighLevelClient</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">getObjectType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">RestHighLevelClient</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isSingleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">afterPropertiesSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">buildClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">buildClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">final</span> <span class=\"token class-name\">CredentialsProvider</span> credentialsProvider <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BasicCredentialsProvider</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        credentialsProvider<span class=\"token punctuation\">.</span><span class=\"token function\">setCredentials</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AuthScope</span><span class=\"token punctuation\">.</span>ANY<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UsernamePasswordCredentials</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">HttpHost</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> hostArray <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HttpHost</span><span class=\"token punctuation\">[</span>host<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\":\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> httpHost <span class=\"token operator\">:</span> host<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\":\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            hostArray<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HttpHost</span><span class=\"token punctuation\">(</span>httpHost<span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            index<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        restHighLevelClient <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RestHighLevelClient</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RestClient</span><span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span>hostArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setHttpClientConfigCallback</span><span class=\"token punctuation\">(</span>\n                httpClientBuilder <span class=\"token operator\">-&gt;</span> httpClientBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">setDefaultCredentialsProvider</span><span class=\"token punctuation\">(</span>credentialsProvider<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        LOGGER<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"elasticSearch client buildClient...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<p>引入 RestHighLevelClient</p>\n   <pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Autowired</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">RestHighLevelClient</span> restHighLevelClient<span class=\"token punctuation\">;</span></code></pre>\n\n<h3 id=\"索引相关\"><a href=\"#索引相关\" class=\"headerlink\" title=\"索引相关\"></a>索引相关</h3><h4 id=\"判断索引是否存在\"><a href=\"#判断索引是否存在\" class=\"headerlink\" title=\"判断索引是否存在\"></a>判断索引是否存在</h4><pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">GetIndexRequest</span> request <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GetIndexRequest</span><span class=\"token punctuation\">(</span>indexName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">boolean</span> exists <span class=\"token operator\">=</span> restHighLevelClient<span class=\"token punctuation\">.</span><span class=\"token function\">indices</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">RequestOptions</span><span class=\"token punctuation\">.</span>DEFAULT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n<h4 id=\"列出所有索引\"><a href=\"#列出所有索引\" class=\"headerlink\" title=\"列出所有索引\"></a>列出所有索引</h4><pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">GetAliasesRequest</span> request <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GetAliasesRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">GetAliasesResponse</span> getAliasesResponse <span class=\"token operator\">=</span>  restHighLevelClient<span class=\"token punctuation\">.</span><span class=\"token function\">indices</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAlias</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span><span class=\"token class-name\">RequestOptions</span><span class=\"token punctuation\">.</span>DEFAULT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">AliasMetaData</span><span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> map <span class=\"token operator\">=</span> getAliasesResponse<span class=\"token punctuation\">.</span><span class=\"token function\">getAliases</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> indices <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">keySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n<h4 id=\"创建索引\"><a href=\"#创建索引\" class=\"headerlink\" title=\"创建索引\"></a>创建索引</h4><pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">CreateIndexRequest</span> request <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CreateIndexRequest</span><span class=\"token punctuation\">(</span>indexName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nrequest<span class=\"token punctuation\">.</span><span class=\"token function\">settings</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Settings</span><span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                 <span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"index.number_of_replicas\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 有1个备份</span>\n                 <span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"index.number_of_shards\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 有5个碎片</span>\n<span class=\"token class-name\">XContentBuilder</span> mappingBuilder <span class=\"token operator\">=</span> <span class=\"token class-name\">JsonXContent</span><span class=\"token punctuation\">.</span><span class=\"token function\">contentBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">startObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">startObject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"properties\"</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">startObject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"title\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">field</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"type\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"text\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">field</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"index\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"true\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">endObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">startObject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"content\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">field</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"type\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"text\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">field</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"index\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"true\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">endObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">endObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">endObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nrequest<span class=\"token punctuation\">.</span><span class=\"token function\">mapping</span><span class=\"token punctuation\">(</span>mappingBuilder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">CreateIndexResponse</span> response <span class=\"token operator\">=</span> restHighLevelClient<span class=\"token punctuation\">.</span><span class=\"token function\">indices</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">RequestOptions</span><span class=\"token punctuation\">.</span>DEFAULT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">isAcknowledged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n<p>查看索引 Mapping：</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">curl</span> http://127.0.0.1:9200/wyqtest/_mapping?pretty\n<span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"wyqtest\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"mappings\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">\"properties\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"content\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token string\">\"type\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"text\"</span>\n        <span class=\"token punctuation\">}</span>,\n        <span class=\"token string\">\"title\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token string\">\"type\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"text\"</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<h4 id=\"删除索引\"><a href=\"#删除索引\" class=\"headerlink\" title=\"删除索引\"></a>删除索引</h4><pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">DeleteIndexRequest</span> request <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DeleteIndexRequest</span><span class=\"token punctuation\">(</span>indexName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nrequest<span class=\"token punctuation\">.</span><span class=\"token function\">indicesOptions</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IndicesOptions</span><span class=\"token punctuation\">.</span>LENIENT_EXPAND_OPEN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">AcknowledgedResponse</span> response <span class=\"token operator\">=</span> restHighLevelClient<span class=\"token punctuation\">.</span><span class=\"token function\">indices</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">RequestOptions</span><span class=\"token punctuation\">.</span>DEFAULT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlog<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"result: {}\"</span><span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">isAcknowledged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n<h3 id=\"查询示例\"><a href=\"#查询示例\" class=\"headerlink\" title=\"查询示例\"></a>查询示例</h3><h4 id=\"聚合汇总\"><a href=\"#聚合汇总\" class=\"headerlink\" title=\"聚合汇总\"></a>聚合汇总</h4><ol>\n<li><p>构建 BoolQueryBuilder</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">BoolQueryBuilder</span> bool <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BoolQueryBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nbool<span class=\"token punctuation\">.</span><span class=\"token function\">must</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">QueryBuilders</span><span class=\"token punctuation\">.</span><span class=\"token function\">rangeQuery</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"@timestamp\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nbool<span class=\"token punctuation\">.</span><span class=\"token function\">must</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">QueryBuilders</span><span class=\"token punctuation\">.</span><span class=\"token function\">rangeQuery</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"@timestamp\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">to</span><span class=\"token punctuation\">(</span>end<span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n</li>\n<li><p>设置分组 TermsAggregationBuilder</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">TermsAggregationBuilder</span> aggregationBuilderGroupBy <span class=\"token operator\">=</span> <span class=\"token class-name\">AggregationBuilders</span><span class=\"token punctuation\">.</span><span class=\"token function\">terms</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"agg_count\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">field</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"module.keyword\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n</li>\n<li><p>分组查询</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">SearchSourceBuilder</span> sourceBuilder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SearchSourceBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">trackTotalHits</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span>bool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">aggregation</span><span class=\"token punctuation\">(</span>aggregationBuilderGroupBy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">SearchRequest</span> searchRequest <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SearchRequest</span><span class=\"token punctuation\">(</span>esIndexName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">source</span><span class=\"token punctuation\">(</span>sourceBuilder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">SearchResponse</span> response <span class=\"token operator\">=</span> restHighLevelClient<span class=\"token punctuation\">.</span><span class=\"token function\">search</span><span class=\"token punctuation\">(</span>searchRequest<span class=\"token punctuation\">,</span> <span class=\"token class-name\">RequestOptions</span><span class=\"token punctuation\">.</span>DEFAULT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Aggregations</span> aggregations <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">getAggregations</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n</li>\n<li><p>获取查询结果</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Aggregation</span> sourceType <span class=\"token operator\">=</span> aggregations<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"agg_count\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Terms</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Bucket</span> bucket <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Terms</span><span class=\"token punctuation\">)</span> sourceType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBuckets</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    logger<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[LogIndex]\"</span><span class=\"token operator\">+</span>bucket<span class=\"token punctuation\">.</span><span class=\"token function\">getKeyAsString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\"[Count]\"</span><span class=\"token operator\">+</span>bucket<span class=\"token punctuation\">.</span><span class=\"token function\">getDocCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n</li>\n<li><p>执行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">[LogIndex]nlp-model[Count]101520\n[LogIndex]web-admin[Count]1106</code></pre>\n\n</li>\n</ol>\n<h4 id=\"分页查询\"><a href=\"#分页查询\" class=\"headerlink\" title=\"分页查询\"></a>分页查询</h4><ol>\n<li><p>构建 BoolQueryBuilder</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">BoolQueryBuilder</span> bool <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BoolQueryBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nbool<span class=\"token punctuation\">.</span><span class=\"token function\">must</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">QueryBuilders</span><span class=\"token punctuation\">.</span><span class=\"token function\">matchQuery</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"module\"</span><span class=\"token punctuation\">,</span> dto<span class=\"token punctuation\">.</span><span class=\"token function\">getModule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">minimumShouldMatch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"100%\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nbool<span class=\"token punctuation\">.</span><span class=\"token function\">must</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">QueryBuilders</span><span class=\"token punctuation\">.</span><span class=\"token function\">termQuery</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"level\"</span><span class=\"token punctuation\">,</span> dto<span class=\"token punctuation\">.</span><span class=\"token function\">getLevel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n</li>\n<li><p>设置查询 SearchSourceBuilder</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">SearchSourceBuilder</span> sourceBuilder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SearchSourceBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">trackTotalHits</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 设置查询条件BoolQueryBuilder</span>\nsourceBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span>bool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 设置分组，需注意 es 的分页是从 0 开始的</span>\nsourceBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsourceBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span>perPage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 设置排序</span>\nsourceBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"@timestamp\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">SortOrder</span><span class=\"token punctuation\">.</span>DESC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n</li>\n<li><p>进行查询</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">SearchRequest</span> searchRequest <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SearchRequest</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsearchRequest<span class=\"token punctuation\">.</span><span class=\"token function\">source</span><span class=\"token punctuation\">(</span>sourceBuilder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">SearchResponse</span> response <span class=\"token operator\">=</span> restHighLevelClient<span class=\"token punctuation\">.</span><span class=\"token function\">search</span><span class=\"token punctuation\">(</span>searchRequest<span class=\"token punctuation\">,</span> <span class=\"token class-name\">RequestOptions</span><span class=\"token punctuation\">.</span>DEFAULT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n</li>\n<li><p>获取查询结果</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 获取结果集</span>\n<span class=\"token class-name\">SearchHits</span> hits <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">getHits</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 获取总条数</span>\npaginator<span class=\"token punctuation\">.</span><span class=\"token function\">setItems</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>hits<span class=\"token punctuation\">.</span><span class=\"token function\">getTotalHits</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 转换结果集</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SearchHit</span> hit <span class=\"token operator\">:</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">getHits</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getHits</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">PhishingLogDto</span> mailServer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PhishingLogDto</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    mailServer<span class=\"token punctuation\">.</span><span class=\"token function\">jsonToDto</span><span class=\"token punctuation\">(</span>mailServer<span class=\"token punctuation\">,</span> <span class=\"token class-name\">JSONObject</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseObject</span><span class=\"token punctuation\">(</span>hit<span class=\"token punctuation\">.</span><span class=\"token function\">getSourceAsString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>mailServer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n\n\n\n\n</li>\n</ol>\n","categories":["Java","JavaClass","Database","ElasticSearch"],"tags":["JavaClass","Java","ElasticSearch","Spring"]},{"title":"Java 获取 Kafka 的 topic 列表","url":"/2020/11/2020-11-30-Java%E8%8E%B7%E5%8F%96Kafka%E7%9A%84topic%E5%88%97%E8%A1%A8/","content":"<h3 id=\"命令行获取\"><a href=\"#命令行获取\" class=\"headerlink\" title=\"命令行获取\"></a>命令行获取</h3><p>根据 zookeeper 地址获取 topic：</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ bin/kafka-topics.sh --list --zookeeper <span class=\"token number\">127.0</span>.0.1:2181</code></pre>\n\n<a id=\"more\"></a>\n\n<h3 id=\"引入依赖获取\"><a href=\"#引入依赖获取\" class=\"headerlink\" title=\"引入依赖获取\"></a>引入依赖获取</h3><h4 id=\"根据-kafka-地址\"><a href=\"#根据-kafka-地址\" class=\"headerlink\" title=\"根据 kafka 地址\"></a>根据 kafka 地址</h4><p>引入依赖</p>\n<pre class=\"language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.apache.kafka<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>kafka-clients<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>${kafka.version}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n\n<p>根据 kafka 地址获取 topic 的 Java 方法</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Properties</span> pro <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Properties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\npro<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bootstrap.servers\"</span><span class=\"token punctuation\">,</span> KAFKA_BOOTSTRAP_SERVERS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">ListTopicsResult</span> result <span class=\"token operator\">=</span> <span class=\"token class-name\">KafkaAdminClient</span><span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>pro<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">listTopics</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">KafkaFuture</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Set</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> set <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">names</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> topicSet <span class=\"token operator\">=</span> set<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n<h4 id=\"根据-zookeeper-地址\"><a href=\"#根据-zookeeper-地址\" class=\"headerlink\" title=\"根据 zookeeper 地址\"></a>根据 zookeeper 地址</h4><p>引入依赖</p>\n<pre class=\"language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.apache.kafka<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>kafka_2.12<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>${kafka.version}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n\n<p>根据 zookeeper 地址获取 topic 的 Java 方法</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">ZkUtils</span> zkUtils <span class=\"token operator\">=</span> <span class=\"token class-name\">ZkUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>KAFKA_ZOOKEEPER_SERVERS<span class=\"token punctuation\">,</span> <span class=\"token number\">30000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30000</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">JaasUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isZkSecurityEnabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Seq</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> topicSeq <span class=\"token operator\">=</span> zkUtils<span class=\"token punctuation\">.</span><span class=\"token function\">getAllTopics</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> allTopicList <span class=\"token operator\">=</span> <span class=\"token class-name\">JavaConversions</span><span class=\"token punctuation\">.</span><span class=\"token function\">seqAsJavaList</span><span class=\"token punctuation\">(</span>topicSeq<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n","categories":["Java","Apache","JavaClass","Kafka"],"tags":["JavaClass","Java","Kafka"]},{"title":"Excel 文件导入导出工具 ExcelKit","url":"/2020/11/2020-11-25-Excel%E6%96%87%E4%BB%B6%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA%E5%B7%A5%E5%85%B7ExcelKit/","content":"<h3 id=\"ExcelKit-介绍\"><a href=\"#ExcelKit-介绍\" class=\"headerlink\" title=\"ExcelKit 介绍\"></a>ExcelKit 介绍</h3><p>ExcelKit 是简单、好用且轻量级的海量 Excel 文件导入导出解决方案。</p>\n<ul>\n<li>GitHub：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3dlbnpld29vL0V4Y2VsS2l0\">https://github.com/wenzewoo/ExcelKit<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>Gitee：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vd3V3ZW56ZS9FeGNlbEtpdC8=\">https://gitee.com/wuwenze/ExcelKit/<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<a id=\"more\"></a>\n\n<h4 id=\"ExcelKit-引入\"><a href=\"#ExcelKit-引入\" class=\"headerlink\" title=\"ExcelKit 引入\"></a>ExcelKit 引入</h4><pre class=\"language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>com.wuwenze<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>ExcelKit<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>2.0.72<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n\n<h3 id=\"ExcelKit-示例\"><a href=\"#ExcelKit-示例\" class=\"headerlink\" title=\"ExcelKit 示例\"></a>ExcelKit 示例</h3><h4 id=\"ExcelMapping\"><a href=\"#ExcelMapping\" class=\"headerlink\" title=\"ExcelMapping\"></a>ExcelMapping</h4><p>ExcelMapping (配置 Excel 与实体之间的映射关系)</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Data</span>\n<span class=\"token annotation punctuation\">@Excel</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Table</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"tb_user\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Id</span>\n    <span class=\"token annotation punctuation\">@ExcelField</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"编号\"</span><span class=\"token punctuation\">,</span> width <span class=\"token operator\">=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@ExcelField</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"用户名\"</span><span class=\"token punctuation\">,</span> width <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> username<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@ExcelField</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"昵称\"</span><span class=\"token punctuation\">,</span> width <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> nickname<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@ExcelField</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"邮箱\"</span><span class=\"token punctuation\">,</span> width <span class=\"token operator\">=</span> <span class=\"token number\">150</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> email<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@ExcelField</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"电话号码\"</span><span class=\"token punctuation\">,</span> width <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> phoneNumber<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> status<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@ExcelField</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"创建时间\"</span><span class=\"token punctuation\">,</span> dateFormat <span class=\"token operator\">=</span> <span class=\"token string\">\"yyyy年MM月dd日 HH:mm:ss\"</span><span class=\"token punctuation\">,</span> width <span class=\"token operator\">=</span> <span class=\"token number\">180</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Date</span> createTime<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@ExcelField</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"修改时间\"</span><span class=\"token punctuation\">,</span> dateFormat <span class=\"token operator\">=</span> <span class=\"token string\">\"yyyy年MM月dd日 HH:mm:ss\"</span><span class=\"token punctuation\">,</span>width <span class=\"token operator\">=</span> <span class=\"token number\">180</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Date</span> modifiedTime<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@ExcelField</span><span class=\"token punctuation\">(</span><span class=\"token comment\">//</span>\n            value <span class=\"token operator\">=</span> <span class=\"token string\">\"性别\"</span><span class=\"token punctuation\">,</span>\n            readConverterExp <span class=\"token operator\">=</span> <span class=\"token string\">\"男=1,女=0\"</span><span class=\"token punctuation\">,</span>\n            writeConverterExp <span class=\"token operator\">=</span> <span class=\"token string\">\"1=男,0=女\"</span>\n            <span class=\"token punctuation\">,</span>width <span class=\"token operator\">=</span> <span class=\"token number\">50</span>\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> sex<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@ExcelField</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"密码盐值\"</span><span class=\"token punctuation\">,</span> width <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> salt<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@ExcelField</span><span class=\"token punctuation\">(</span><span class=\"token comment\">//</span>\n            value <span class=\"token operator\">=</span> <span class=\"token string\">\"用户类型\"</span><span class=\"token punctuation\">,</span>\n            readConverterExp <span class=\"token operator\">=</span> <span class=\"token string\">\"超级管理员=0,普通用户=1\"</span><span class=\"token punctuation\">,</span>\n            writeConverterExp <span class=\"token operator\">=</span> <span class=\"token string\">\"0=超级管理员,1=普通用户\"</span>\n            <span class=\"token punctuation\">,</span>width <span class=\"token operator\">=</span> <span class=\"token number\">80</span>\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> type<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@ExcelField</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"用户密码\"</span><span class=\"token punctuation\">,</span> width <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> password<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@ExcelField</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"出生日期\"</span><span class=\"token punctuation\">,</span> dateFormat <span class=\"token operator\">=</span> <span class=\"token string\">\"yyyy/MM/dd\"</span><span class=\"token punctuation\">,</span>width <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Date</span> birth<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> departmentId<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@ExcelField</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"头像url\"</span><span class=\"token punctuation\">,</span> width <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> avatar<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> is_corp<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<h4 id=\"下载-Controller\"><a href=\"#下载-Controller\" class=\"headerlink\" title=\"下载 Controller\"></a>下载 Controller</h4><p>使用 ExcelKit 提供的 API 构建导入模板，会根据配置生成批注，下拉框等</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@RestController</span>\n<span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/user\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserController</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserService</span> userService<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token annotation punctuation\">@PostMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/excel\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">export</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">&gt;</span></span> users <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>userService<span class=\"token punctuation\">.</span><span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ExcelKit</span><span class=\"token punctuation\">.</span>$<span class=\"token class-name\">Export</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">downXlsx</span><span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<h4 id=\"下载-HEML\"><a href=\"#下载-HEML\" class=\"headerlink\" title=\"下载 HEML\"></a>下载 HEML</h4><pre class=\"language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-button</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>downExcel<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">icon</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>el-icon-download<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>导出<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-button</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n\n<h4 id=\"下载-Script\"><a href=\"#下载-Script\" class=\"headerlink\" title=\"下载 Script\"></a>下载 Script</h4><pre class=\"language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">downExcel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> $<span class=\"token keyword\">this</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> axios\n    <span class=\"token punctuation\">.</span><span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        url<span class=\"token operator\">:</span> <span class=\"token string\">\"/user/excel\"</span><span class=\"token punctuation\">,</span>\n        method<span class=\"token operator\">:</span> <span class=\"token string\">\"post\"</span><span class=\"token punctuation\">,</span>\n        responseType<span class=\"token operator\">:</span> <span class=\"token string\">\"blob\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">[</span><span class=\"token string\">\"content-type\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"application/json\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> $<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$message<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>\n                <span class=\"token string\">\"Subject does not have permission [user:export]\"</span>\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> url <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span><span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span><span class=\"token function\">createObjectURL</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将二进制文件转化为可访问的url</span>\n        <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        a<span class=\"token punctuation\">.</span>href <span class=\"token operator\">=</span> url<span class=\"token punctuation\">;</span>\n        a<span class=\"token punctuation\">.</span>download <span class=\"token operator\">=</span> <span class=\"token string\">\"用户列表.xls\"</span><span class=\"token punctuation\">;</span>\n        a<span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        window<span class=\"token punctuation\">.</span><span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span><span class=\"token function\">revokeObjectURL</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<h4 id=\"下载效果\"><a href=\"#下载效果\" class=\"headerlink\" title=\"下载效果\"></a>下载效果</h4><p>下载文件：</p>\n<p><img src=\"/images/2020/11/image-20201124114137155.png\" alt=\"image-20201124114137155\" loading=\"lazy\"></p>\n<p>打开效果：</p>\n<p><img src=\"/images/2020/11/image-20201124114254144.png\" alt=\"image-20201124114254144\" loading=\"lazy\"></p>\n","categories":["Java","JavaJar"],"tags":["Java","JavaJar","Excel"]},{"title":"Zookeeper 简要介绍及单机版安装","url":"/2020/12/2020-12-10-Zookeeper%E7%AE%80%E8%A6%81%E4%BB%8B%E7%BB%8D%E5%8F%8A%E5%8D%95%E6%9C%BA%E7%89%88%E5%AE%89%E8%A3%85/","content":"<h3 id=\"Zookeeper-介绍\"><a href=\"#Zookeeper-介绍\" class=\"headerlink\" title=\"Zookeeper 介绍\"></a>Zookeeper 介绍</h3><p>ZooKeeper 是 Hadoop 的正式子项目，它是一个针对大型分布式系统的可靠协调系统，提供的功能包括：配置维护、名字服务、分布式同步、组服务等。</p>\n<p>ZooKeeper 的目标就是封装好复杂易出错的关键服务，将简单易用的接口和性能高效、功能稳定的系统提供给用户。</p>\n<ul>\n<li>官网：<span class=\"exturl\" data-url=\"aHR0cHM6Ly96b29rZWVwZXIuYXBhY2hlLm9yZy9pbmRleC5odG1s\">https://zookeeper.apache.org/index.html<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li> 下载：<span class=\"exturl\" data-url=\"aHR0cHM6Ly96b29rZWVwZXIuYXBhY2hlLm9yZy9yZWxlYXNlcy5odG1s\">https://zookeeper.apache.org/releases.html<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>GitHub：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FwYWNoZS96b29rZWVwZXI=\">https://github.com/apache/zookeeper<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<a id=\"more\"></a>\n\n<h3 id=\"Zookeeper-单机版安装\"><a href=\"#Zookeeper-单机版安装\" class=\"headerlink\" title=\"Zookeeper 单机版安装\"></a>Zookeeper 单机版安装</h3><ol>\n<li><p>下载</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">wget</span> http://mirror.bit.edu.cn/apache/zookeeper/zookeeper-3.4.14/zookeeper-3.4.14.tar.gz </code></pre>\n</li>\n<li><p>解压</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">tar</span> -xvf zookeeper-3.4.14.tar.gz</code></pre>\n</li>\n<li><p>修改配置文件 <code>zookeeper-3.4.14/conf/zoo.cfg </code></p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\">tickTime</span><span class=\"token operator\">=</span><span class=\"token number\">2000</span>\n<span class=\"token assign-left variable\">dataDir</span><span class=\"token operator\">=</span>/home/dir/zookeeper-3.4.14/zklog\n<span class=\"token assign-left variable\">clientPort</span><span class=\"token operator\">=</span><span class=\"token number\">2181</span>\n<span class=\"token assign-left variable\">initLimit</span><span class=\"token operator\">=</span><span class=\"token number\">30</span>\n<span class=\"token assign-left variable\">syncLimit</span><span class=\"token operator\">=</span><span class=\"token number\">15</span>\n<span class=\"token assign-left variable\">maxClientCnxns</span><span class=\"token operator\">=</span><span class=\"token number\">1000</span></code></pre>\n</li>\n<li><p>启动服务端</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">~/zookeeper-3.4.14/bin$ ./zkServer.sh start</code></pre>\n</li>\n<li><p>客户端连接</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">~/zookeeper-3.4.14/bin$ ./zkCli.sh</code></pre>\n\n<p>客户端远程连接</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">~/zookeeper-3.4.14/bin$ ./zkCli.sh -server <span class=\"token number\">192.168</span>.0.1:2181</code></pre>\n\n</li>\n</ol>\n<h3 id=\"服务端常用命令\"><a href=\"#服务端常用命令\" class=\"headerlink\" title=\"服务端常用命令\"></a>服务端常用命令</h3><ul>\n<li>启动 ZK 服务: sh bin/zkServer.sh start</li>\n<li> 查看 ZK 服务状态: sh bin/zkServer.sh status</li>\n<li> 停止 ZK 服务: sh bin/zkServer.sh stop</li>\n<li> 重启 ZK 服务: sh bin/zkServer.sh restart</li>\n</ul>\n<h3 id=\"客户端常用命令\"><a href=\"#客户端常用命令\" class=\"headerlink\" title=\"客户端常用命令\"></a>客户端常用命令</h3><p>使用 zkCli.sh -server <strong>ip:port</strong> 连接到 ZooKeeper 服务，连接成功后，系统会输 出 ZooKeeper 的相关环境以及配置信息。 </p>\n<p>命令行工具的一些简单操作如下:</p>\n<ul>\n<li><p>显示根目录下、文件：ls/ 使用 ls 命令来查看当前 ZooKeeper 中所包含的内容</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">ls</span> /dubbo/com.alibaba.dubbo.monitor.MonitorService\n<span class=\"token punctuation\">[</span>consumers, routers, providers, configurators<span class=\"token punctuation\">]</span></code></pre>\n</li>\n<li><p>显示根目录下、文件：ls2 / 查看当前节点数据并能看到更新次数等数据</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ ls2 /dubbo/com.alibaba.dubbo.monitor.MonitorService\n<span class=\"token punctuation\">[</span>consumers, routers, providers, configurators<span class=\"token punctuation\">]</span>\ncZxid <span class=\"token operator\">=</span> 0x27f017fae11\nctime <span class=\"token operator\">=</span> Wed Dec <span class=\"token number\">16</span> <span class=\"token number\">14</span>:03:48 CST <span class=\"token number\">2020</span>\nmZxid <span class=\"token operator\">=</span> 0x27f017fae11\nmtime <span class=\"token operator\">=</span> Wed Dec <span class=\"token number\">16</span> <span class=\"token number\">14</span>:03:48 CST <span class=\"token number\">2020</span>\npZxid <span class=\"token operator\">=</span> 0x27f017fae23\ncversion <span class=\"token operator\">=</span> <span class=\"token number\">4</span>\ndataVersion <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\naclVersion <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\nephemeralOwner <span class=\"token operator\">=</span> 0x0\ndataLength <span class=\"token operator\">=</span> <span class=\"token number\">12</span>\nnumChildren <span class=\"token operator\">=</span> <span class=\"token number\">4</span></code></pre>\n</li>\n<li><p>创建文件，并设置初始内容: create /zk “test” 创建一个新的 znode 节点 “ zk ” 以及与它关联的字符串 [-e] [-s] 【-e 零时节点】 【-s 顺序节点】</p>\n</li>\n<li><p>获取文件内容：get /zk 确认 znode 是否包含我们所创建的字符串 [watch【] watch 监听】</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ get /dubbo/com.alibaba.dubbo.monitor.MonitorService/consumers\n<span class=\"token number\">10.110</span>.20.22\ncZxid <span class=\"token operator\">=</span> 0x27f017fae1c\nctime <span class=\"token operator\">=</span> Wed Dec <span class=\"token number\">16</span> <span class=\"token number\">14</span>:03:48 CST <span class=\"token number\">2020</span>\nmZxid <span class=\"token operator\">=</span> 0x27f017fae1c\nmtime <span class=\"token operator\">=</span> Wed Dec <span class=\"token number\">16</span> <span class=\"token number\">14</span>:03:48 CST <span class=\"token number\">2020</span>\npZxid <span class=\"token operator\">=</span> 0x27f017fae1c\ncversion <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\ndataVersion <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\naclVersion <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\nephemeralOwner <span class=\"token operator\">=</span> 0x0\ndataLength <span class=\"token operator\">=</span> <span class=\"token number\">12</span>\nnumChildren <span class=\"token operator\">=</span> <span class=\"token number\">0</span></code></pre>\n\n<ul>\n<li>cZxid：节点创建时的 zxid</li>\n<li>ctime：节点创建时间</li>\n<li> mZxid：节点最近一次更新时的 zxid</li>\n<li>mtime：节点最近一次更新的时间</li>\n<li> cversion：子节点数据更新次数</li>\n<li> dataVersion：本节点数据更新次数</li>\n<li> aclVersion：节点 ACL (授权信息) 的更新次数</li>\n<li> ephemeralOwner：如果该节点为临时节点，ephemeralOwner 值表示与该节点绑定的 session id. 如果该节点不是临时节点，ephemeralOwner 值为 0</li>\n<li>dataLength：节点数据长度，本例中为 hello world 的长度</li>\n<li> numChildren：子节点个数</li>\n</ul>\n</li>\n<li><p>修改文件内容：set /zk “zkbak” 对 zk 所关联的字符串进行设置</p>\n</li>\n<li><p>删除文件：delete/zk 将刚才创建的 znode 删除，如果存在子节点删除失败</p>\n</li>\n<li><p>递归删除：rmr /zk 将刚才创建的 znode 删除，子节点同时删除</p>\n</li>\n<li><p>退出客户端：quit</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ quit\nQuitting<span class=\"token punctuation\">..</span>.\n<span class=\"token number\">2020</span>-12-16 <span class=\"token number\">19</span>:14:08,550 <span class=\"token punctuation\">[</span>myid:<span class=\"token punctuation\">]</span> - INFO  <span class=\"token punctuation\">[</span>main:ZooKeeper@684<span class=\"token punctuation\">]</span> - Session: 0x3766a4749cc00e8 closed\n<span class=\"token number\">2020</span>-12-16 <span class=\"token number\">19</span>:14:08,550 <span class=\"token punctuation\">[</span>myid:<span class=\"token punctuation\">]</span> - INFO  <span class=\"token punctuation\">[</span>main-EventThread:ClientCnxn<span class=\"token variable\">$EventThread</span>@512<span class=\"token punctuation\">]</span> - EventThread shut down</code></pre>\n</li>\n<li><p>帮助命令：help</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">help</span>\nZooKeeper -server host:port cmd args\n        connect host:port\n        get path <span class=\"token punctuation\">[</span>watch<span class=\"token punctuation\">]</span>\n        <span class=\"token function\">ls</span> path <span class=\"token punctuation\">[</span>watch<span class=\"token punctuation\">]</span>\n        <span class=\"token builtin class-name\">set</span> path data <span class=\"token punctuation\">[</span>version<span class=\"token punctuation\">]</span>\n        rmr path\n        delquota <span class=\"token punctuation\">[</span>-n<span class=\"token operator\">|</span>-b<span class=\"token punctuation\">]</span> path\n        quit\n        printwatches on<span class=\"token operator\">|</span>off\n        create <span class=\"token punctuation\">[</span>-s<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>-e<span class=\"token punctuation\">]</span> path data acl\n        <span class=\"token function\">stat</span> path <span class=\"token punctuation\">[</span>watch<span class=\"token punctuation\">]</span>\n        close\n        ls2 path <span class=\"token punctuation\">[</span>watch<span class=\"token punctuation\">]</span>\n        <span class=\"token function\">history</span>\n        listquota path\n        setAcl path acl\n        getAcl path\n        <span class=\"token function\">sync</span> path\n        redo cmdno\n        addauth scheme auth\n        delete path <span class=\"token punctuation\">[</span>version<span class=\"token punctuation\">]</span>\n        setquota -n<span class=\"token operator\">|</span>-b val path</code></pre>\n\n\n\n\n\n</li>\n</ul>\n","categories":["Apache","Zookeeper"],"tags":["Apache","Zookeeper"]},{"title":"Linux 安装使用 iostat 命令","url":"/2020/12/2020-12-16-Linux%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8iostat%E5%91%BD%E4%BB%A4/","content":"<h3 id=\"iostat-介绍\"><a href=\"#iostat-介绍\" class=\"headerlink\" title=\"iostat 介绍\"></a>iostat 介绍</h3><p><strong>iostat 命令</strong> 被用于监视系统输入输出设备和 CPU 的使用情况。</p>\n<p>它的特点是汇报磁盘活动统计情况，同时也会汇报出 CPU 使用情况。</p>\n<p>同 vmstat 一样，iostat 也有一个弱点，就是它不能对某个进程进行深入分析，仅对系统的整体情况进行分析。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"安装-iostat\"><a href=\"#安装-iostat\" class=\"headerlink\" title=\"安装 iostat\"></a>安装 iostat</h3><p>centos 安装：</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">yum <span class=\"token function\">install</span> sysstat</code></pre>\n\n<p>Debian 安装：</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> sysstat</code></pre>\n\n<p>包下载：</p>\n<ul>\n<li>Debian 8：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wYWNrYWdlcy5kZWJpYW4ub3JnL2plc3NpZS9zeXNzdGF0\">https://packages.debian.org/jessie/sysstat<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>Debian 9：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wYWNrYWdlcy5kZWJpYW4ub3JnL3N0cmV0Y2gvc3lzc3RhdA==\">https://packages.debian.org/stretch/sysstat<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>Debian 10：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wYWNrYWdlcy5kZWJpYW4ub3JnL2J1c3Rlci9zeXNzdGF0\">https://packages.debian.org/buster/sysstat<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<h3 id=\"使用-iostat\"><a href=\"#使用-iostat\" class=\"headerlink\" title=\"使用 iostat\"></a>使用 iostat</h3><p>选项</p>\n<ul>\n<li>-c：仅显示 CPU 使用情况；</li>\n<li>-d：仅显示设备利用率；</li>\n<li>-k：显示状态以千字节每秒为单位，而不使用块每秒；</li>\n<li>-m：显示状态以兆字节每秒为单位；</li>\n<li>-p：仅显示块设备和所有被使用的其他分区的状态；</li>\n<li>-t：显示每个报告产生时的时间；</li>\n<li>-V：显示版号并退出；</li>\n<li>-x：显示扩展状态。</li>\n</ul>\n<p>参数：</p>\n<ul>\n<li>间隔时间：每次报告的间隔时间（秒）；</li>\n<li>次数：显示报告的次数。</li>\n</ul>\n<h3 id=\"使用示例\"><a href=\"#使用示例\" class=\"headerlink\" title=\"使用示例\"></a>使用示例</h3><h4 id=\"d-参数\"><a href=\"#d-参数\" class=\"headerlink\" title=\"-d 参数\"></a>-d 参数</h4><p>参数 -d 表示，显示设备（磁盘）使用状态。</p>\n<pre class=\"language-none\"><code class=\"language-none\">$ iostat -d 10\nLinux 4.9.0-8-amd64 (mant)      2020年12月16日  _x86_64_        (4 CPU)\n\nDevice:            tps    kB_read/s    kB_wrtn/s    kB_read    kB_wrtn\nsda               1.55        16.98        28.18    8690027   14417430\nsdb              10.62        21.86       192.73   11187053   98614636</code></pre>\n\n<p>输出信息的含义：</p>\n<ul>\n<li>tps：该设备每秒的传输次数。\"一次传输\" 意思是 \"一次 I/O 请求\"。多个逻辑请求可能会被合并为 \"一次 I/O 请求\"。\"一次传输\" 请求的大小是未知的。</li>\n<li>kB_read/s：每秒从设备读取的数据量；</li>\n<li>kB_wrtn/s：每秒向设备写入的数据量；</li>\n<li>kB_read：读取的总数据量；</li>\n<li>kB_wrtn：写入的总数量数据量。</li>\n</ul>\n<p>这些单位都为 Kilobytes。</p>\n<h4 id=\"c-参数\"><a href=\"#c-参数\" class=\"headerlink\" title=\"-c 参数\"></a>-c 参数</h4><p>-c 参数显示 CPU 使用情况：</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ iostat -c\nLinux <span class=\"token number\">4.9</span>.0-8-amd64 <span class=\"token punctuation\">(</span>mant<span class=\"token punctuation\">)</span>      <span class=\"token number\">2020</span>年12月16日  _x86_64_        <span class=\"token punctuation\">(</span><span class=\"token number\">4</span> CPU<span class=\"token punctuation\">)</span>\n\navg-cpu:  %user   %nice %system %iowait  %steal   %idle\n          <span class=\"token number\">58.94</span>    <span class=\"token number\">0.00</span>    <span class=\"token number\">2.70</span>    <span class=\"token number\">1.26</span>    <span class=\"token number\">0.00</span>   <span class=\"token number\">37.10</span></code></pre>\n\n<p>输出信息的含义：</p>\n<ul>\n<li>% user：CPU 处在用户模式下的时间百分比。</li>\n<li>% nice：CPU 处在带 NICE 值的用户模式下的时间百分比。</li>\n<li>% system：CPU 处在系统模式下的时间百分比。</li>\n<li>% iowait：CPU 等待输入输出完成时间的百分比。</li>\n<li>% steal：管理程序维护另一个虚拟处理器时，虚拟 CPU 的无意识等待时间百分比。</li>\n<li>% idle：CPU 空闲时间百分比。</li>\n</ul>\n<p><strong>备注：</strong>如果 % iowait 的值过高，表示硬盘存在 I/O 瓶颈，% idle 值高，表示 CPU 较空闲，如果 % idle 值高但系统响应慢时，有可能是 CPU 等待分配内存，此时应加大内存容量。% idle 值如果持续低于 10，那么系统的 CPU 处理能力相对较低，表明系统中最需要解决的资源是 CPU。</p>\n<h4 id=\"x-参数\"><a href=\"#x-参数\" class=\"headerlink\" title=\"-x 参数\"></a>-x 参数</h4><p>每隔三秒查看一次完整信息：</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ iostat -x <span class=\"token number\">3</span>\nLinux <span class=\"token number\">4.9</span>.0-8-amd64 <span class=\"token punctuation\">(</span>mant<span class=\"token punctuation\">)</span>      <span class=\"token number\">2020</span>年12月16日  _x86_64_        <span class=\"token punctuation\">(</span><span class=\"token number\">4</span> CPU<span class=\"token punctuation\">)</span>\n\navg-cpu:  %user   %nice %system %iowait  %steal   %idle\n          <span class=\"token number\">58.88</span>    <span class=\"token number\">0.00</span>    <span class=\"token number\">2.71</span>    <span class=\"token number\">1.26</span>    <span class=\"token number\">0.00</span>   <span class=\"token number\">37.16</span>\n\nDevice:         rrqm/s   wrqm/s     r/s     w/s    rkB/s    wkB/s avgrq-sz avgqu-sz   await r_await w_await  svctm  %util\nsda               <span class=\"token number\">1.48</span>     <span class=\"token number\">5.77</span>    <span class=\"token number\">1.07</span>    <span class=\"token number\">0.47</span>    <span class=\"token number\">17.03</span>    <span class=\"token number\">28.25</span>    <span class=\"token number\">58.50</span>     <span class=\"token number\">0.00</span>    <span class=\"token number\">1.86</span>    <span class=\"token number\">0.99</span>    <span class=\"token number\">3.83</span>   <span class=\"token number\">0.92</span>   <span class=\"token number\">0.14</span>\nsdb               <span class=\"token number\">0.08</span>    <span class=\"token number\">15.77</span>    <span class=\"token number\">0.68</span>    <span class=\"token number\">9.95</span>    <span class=\"token number\">21.93</span>   <span class=\"token number\">193.02</span>    <span class=\"token number\">40.43</span>     <span class=\"token number\">0.27</span>   <span class=\"token number\">25.60</span>   <span class=\"token number\">36.17</span>   <span class=\"token number\">24.88</span>   <span class=\"token number\">6.47</span>   <span class=\"token number\">6.88</span></code></pre>\n\n<p>输出信息的含义：</p>\n<ul>\n<li>rrqm/s：每秒这个设备相关的读取请求有多少被 Merge 了（当系统调用需要读取数据的时候，VFS 将请求发到各个 FS，如果 FS 发现不同的读取请求读取的是相同 Block 的数据，FS 会将这个请求合并 Merge）；</li>\n<li>wrqm/s：每秒这个设备相关的写入请求有多少被 Merge 了。</li>\n<li>r/s：每秒读取的扇区数；</li>\n<li>w/s：每秒写入的扇区数。</li>\n<li>rKB/s：每秒发送到设备的读取请求数。</li>\n<li>wKB/s：每秒向设备发出的写请求数。</li>\n<li>avgrq-sz 平均请求扇区的大小</li>\n<li> avgqu-sz 是平均请求队列的长度。毫无疑问，队列长度越短越好。    </li>\n<li>await：  每一个 IO 请求的处理的平均时间（单位是微秒毫秒）。这里可以理解为 IO 的响应时间，一般地系统 IO 响应时间应该低于 5ms，如果大于 10ms 就比较大了。这个时间包括了队列时间和服务时间，也就是说，一般情况下，await 大于 svctm，它们的差值越小，则说明队列时间越短，反之差值越大，队列时间越长，说明系统出了问题。</li>\n<li>svctm    表示平均每次设备 I/O 操作的服务时间（以毫秒为单位）。如果 svctm 的值与 await 很接近，表示几乎没有 I/O 等待，磁盘性能很好，如果 await 的值远高于 svctm 的值，则表示 I/O 队列等待太长，         系统上运行的应用程序将变慢。</li>\n<li>% util： 在统计时间内所有处理 IO 时间，除以总共统计时间。例如，如果统计间隔 1 秒，该设备有 0.8 秒在处理 IO，而 0.2 秒闲置，那么该设备的 % util = 0.8/1 = 80%，所以该参数暗示了设备的繁忙程度。一般地，如果该参数是 100% 表示设备已经接近满负荷运行了（当然如果是多磁盘，即使 % util 是 100%，因为磁盘的并发能力，所以磁盘使用未必就到了瓶颈）。</li>\n</ul>\n","categories":["Linux","软件"],"tags":["Linux","软件","iostat"]},{"title":"MySQL 性能优化命令 Explain 的使用","url":"/2020/12/2020-12-14-MySQL%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%91%BD%E4%BB%A4Explain%E7%9A%84%E4%BD%BF%E7%94%A8/","content":"<p>MySQL 提供了一个 Explain 命令，它可以对 <code>SELECT</code> 语句进行分析，并输出 <code>SELECT</code> 执行的详细信息，以供开发人员针对性优化.</p>\n<p>EXPLAIN 命令用法十分简单，在 SELECT 语句前加上 Explain 就可以了，例如:</p>\n<pre class=\"language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">EXPLAIN SELECT * from user_info WHERE id &lt; 300;</code></pre>\n\n<a id=\"more\"></a>\n\n<h3 id=\"输出格式\"><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h3><p>EXPLAIN 命令的输出内容大致如下:</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">mysql<span class=\"token operator\">&gt;</span> explain <span class=\"token keyword\">select</span> * from user_info where <span class=\"token function\">id</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">\\</span>G\n*************************** <span class=\"token number\">1</span>. row ***************************\n           id: <span class=\"token number\">1</span>\n  select_type: SIMPLE\n        table: user_info\n         type: const\npossible_keys: PRIMARY\n          key: PRIMARY\n      key_len: <span class=\"token number\">8</span>\n          ref: const\n         rows: <span class=\"token number\">1</span>\n        Extra:\n<span class=\"token number\">1</span> row <span class=\"token keyword\">in</span> <span class=\"token builtin class-name\">set</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.00</span> sec<span class=\"token punctuation\">)</span></code></pre>\n\n<h3 id=\"字段含义\"><a href=\"#字段含义\" class=\"headerlink\" title=\"字段含义\"></a>字段含义</h3><p>各列的含义如下:</p>\n<ul>\n<li>id: SELECT 查询的标识符。每个 SELECT 都会自动分配一个唯一的标识符.</li>\n<li>select_type: SELECT 查询的类型.</li>\n<li>table: 查询的是哪个表</li>\n<li> partitions: 匹配的分区</li>\n<li> type: join 类型</li>\n<li> possible_keys: 此次查询中可能选用的索引</li>\n<li> key: 此次查询中确切使用到的索引.</li>\n<li>ref: 哪个字段或常数与 key 一起被使用</li>\n<li> rows: 显示此查询一共扫描了多少行。这个是一个估计值.</li>\n<li>filtered: 表示此查询条件所过滤的数据的百分比</li>\n<li> extra: 额外的信息</li>\n</ul>\n<h4 id=\"select-type\"><a href=\"#select-type\" class=\"headerlink\" title=\"select_type\"></a>select_type</h4><p><code>select_type</code> 表示了查询的类型，它的常用取值有:</p>\n<ul>\n<li>SIMPLE, 表示此查询不包含 UNION 查询或子查询</li>\n<li> PRIMARY, 表示此查询是最外层的查询</li>\n<li> UNION, 表示此查询是 UNION 的第二或随后的查询</li>\n<li> DEPENDENT UNION, UNION 中的第二个或后面的查询语句，取决于外面的查询</li>\n<li> UNION RESULT, UNION 的结果</li>\n<li> SUBQUERY, 子查询中的第一个 SELECT</li>\n<li>DEPENDENT SUBQUERY: 子查询中的第一个 SELECT, 取决于外面的查询。即子查询依赖于外层查询的结果.</li>\n</ul>\n<p>如果我们使用了 UNION 查询，那么 EXPLAIN 输出 的结果类似如下：</p>\n<pre class=\"language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">mysql&gt; EXPLAIN (SELECT * FROM user_info  WHERE id IN (1, 2, 3)) UNION (SELECT * FROM user_info WHERE id IN (3, 4, 5));\n+----+--------------+------------+-------+---------------+---------+---------+------+------+-------------+\n| id | select_type  | table      | type  | possible_keys | key     | key_len | ref  | rows | Extra       |\n+----+--------------+------------+-------+---------------+---------+---------+------+------+-------------+\n|  1 | PRIMARY      | user_info  | range | PRIMARY       | PRIMARY | 8       | NULL |    3 | Using where |\n|  2 | UNION        | user_info  | range | PRIMARY       | PRIMARY | 8       | NULL |    3 | Using where |\n| NULL | UNION RESULT | &lt;union1,2&gt; | ALL   | NULL          | NULL    | NULL    | NULL | NULL |             |\n+----+--------------+------------+-------+---------------+---------+---------+------+------+-------------+\n3 rows in set (0.01 sec)</code></pre>\n\n<h4 id=\"table\"><a href=\"#table\" class=\"headerlink\" title=\"table\"></a>table</h4><p>表示查询涉及的表或衍生表</p>\n<h4 id=\"type\"><a href=\"#type\" class=\"headerlink\" title=\"type\"></a>type</h4><p><code>type</code> 字段比较重要，它提供了判断查询是否高效的重要依据依据。通过 <code>type</code> 字段，我们判断此次查询是 <code>全表扫描</code> 还是 <code>索引扫描</code> 等。</p>\n<h5 id=\"常用类型\"><a href=\"#常用类型\" class=\"headerlink\" title=\"常用类型\"></a>常用类型</h5><p>type 常用的取值有:</p>\n<ul>\n<li><code>system</code>: 表中只有一条数据。这个类型是特殊的 <code>const</code> 类型.</li>\n<li><code>const</code>: 针对主键或唯一索引的等值查询扫描，最多只返回一行数据. const 查询速度非常快，因为它仅仅读取一次即可.</li>\n<li><code>eq_ref</code>: 此类型通常出现在多表的 join 查询，表示对于前表的每一个结果，都只能匹配到后表的一行结果。并且查询的比较操作通常是 <code>=</code>, 查询效率较高. </li>\n<li><code>ref</code>: 此类型通常出现在多表的 join 查询，针对于非唯一或非主键索引，或者是使用了 <code>最左前缀</code> 规则索引的查询.</li>\n<li><code>range</code>: 表示使用索引范围查询，通过索引字段范围获取表中部分数据记录。这个类型通常出现在 =, &lt;&gt;,&gt;, &gt;=, &lt;, &lt;=, IS NULL, &lt;=&gt;, BETWEEN, IN () 操作中.<br>当 <code>type</code> 是 <code>range</code> 时，那么 EXPLAIN 输出的 <code>ref</code> 字段为 NULL, 并且 <code>key_len</code> 字段是此次查询中使用到的索引的最长的那个.</li>\n<li><code>index</code>: 表示全索引扫描 (full index scan), 和 ALL 类型类似，只不过 ALL 类型是全表扫描，而 index 类型则仅仅扫描所有的索引，而不扫描数据.<br><code>index</code> 类型通常出现在：所要查询的数据直接在索引树中就可以获取到，而不需要扫描数据。当是这种情况时，Extra 字段 会显示 <code>Using index</code>.</li>\n<li>ALL: 表示全表扫描，这个类型的查询是性能最差的查询之一。通常来说，我们的查询不应该出现 ALL 类型的查询，因为这样的查询在数据量大的情况下，对数据库的性能是巨大的灾难。如一个查询是 ALL 类型查询，那么一般来说可以对相应的字段添加索引来避免.</li>\n</ul>\n<h5 id=\"性能比较\"><a href=\"#性能比较\" class=\"headerlink\" title=\"性能比较\"></a>性能比较</h5><p>通常来说，不同的 type 类型的性能关系如下:</p>\n<p><code>ALL &lt; index &lt; range ~ index_merge &lt; ref &lt; eq_ref &lt; const &lt; system</code></p>\n<ul>\n<li><code>ALL</code> 类型因为是全表扫描，因此在相同的查询条件下，它是速度最慢的.</li>\n<li><code>index</code> 类型的查询虽然不是全表扫描，但是它扫描了所有的索引，因此比 ALL 类型的稍快.</li>\n<li> 后面的几种类型都是利用了索引来查询数据，因此可以过滤部分或大部分数据，因此查询效率就比较高了.</li>\n</ul>\n<h4 id=\"possible-keys\"><a href=\"#possible-keys\" class=\"headerlink\" title=\"possible_keys\"></a>possible_keys</h4><p><code>possible_keys</code> 表示 MySQL 在查询时，能够使用到的索引。注意，即使有些索引在 <code>possible_keys</code> 中出现，但是并不表示此索引会真正地被 MySQL 使用到. MySQL 在查询时具体使用了哪些索引，由 <code>key</code> 字段决定.</p>\n<h4 id=\"key\"><a href=\"#key\" class=\"headerlink\" title=\"key\"></a>key</h4><p>此字段是 MySQL 在当前查询时所真正使用到的索引.</p>\n<h4 id=\"key-len\"><a href=\"#key-len\" class=\"headerlink\" title=\"key_len\"></a>key_len</h4><p>表示查询优化器使用了索引的字节数。这个字段可以评估组合索引是否完全被使用，或只有最左部分字段被使用到.<br>key_len 的计算规则如下:</p>\n<ul>\n<li>字符串<ul>\n<li> char (n): n 字节长度</li>\n<li> varchar (n): 如果是 utf8 编码，则是 3 <em>n + 2 字节；如果是 utf8mb4 编码，则是 4</em> n + 2 字节.</li>\n</ul>\n</li>\n<li> 数值类型:<ul>\n<li>TINYINT: 1 字节</li>\n<li> SMALLINT: 2 字节</li>\n<li> MEDIUMINT: 3 字节</li>\n<li> INT: 4 字节</li>\n<li> BIGINT: 8 字节</li>\n</ul>\n</li>\n<li>时间类型<ul>\n<li> DATE: 3 字节</li>\n<li> TIMESTAMP: 4 字节</li>\n<li> DATETIME: 8 字节</li>\n</ul>\n</li>\n<li>字段属性: NULL 属性 占用一个字节。如果一个字段是 NOT NULL 的，则没有此属性.</li>\n</ul>\n<h4 id=\"rows\"><a href=\"#rows\" class=\"headerlink\" title=\"rows\"></a>rows</h4><p>rows 也是一个重要的字段. MySQL 查询优化器根据统计信息，估算 SQL 要查找到结果集需要扫描读取的数据行数.<br>这个值非常直观显示 SQL 的效率好坏，原则上 rows 越少越好.</p>\n<h4 id=\"Extra\"><a href=\"#Extra\" class=\"headerlink\" title=\"Extra\"></a>Extra</h4><p>EXplain 中的很多额外的信息会在 Extra 字段显示，常见的有以下几种内容:</p>\n<ul>\n<li><p>Using filesort</p>\n<p>当 Extra 中有 <code>Using filesort</code> 时，表示 MySQL 需额外的排序操作，不能通过索引顺序达到排序效果。一般有 <code>Using filesort</code>, 都建议优化去掉，因为这样的查询 CPU 资源消耗大.</p>\n</li>\n<li><p>Using index</p>\n<p>\"覆盖索引扫描\", 表示查询在索引树中就可查找所需数据，不用扫描表数据文件，往往说明性能不错</p>\n</li>\n<li><p>Using temporary</p>\n<p>查询有使用临时表，一般出现于排序，分组和多表 join 的情况，查询效率不高，建议优化.</p>\n</li>\n</ul>\n","categories":["Database","MySQL"],"tags":["MySQL"]},{"title":"Zookeeper 客户端错误：Packet len* is out of range!","url":"/2020/12/2020-12-17-Zookeeper%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%94%99%E8%AF%AF%EF%BC%9APacket-len-is-out-of-range!/","content":"<h3 id=\"出现问题\"><a href=\"#出现问题\" class=\"headerlink\" title=\"出现问题\"></a>出现问题</h3><p>zookeeper 客户端出现异常：</p>\n<pre class=\"language-none\"><code class=\"language-none\">2020-12-16 14:47:52,219 [main-SendThread(127.0.0.1:2181)] WARN  org.apache.zookeeper.ClientCnxn$SendThread (ClientCnxn.java:1161) - Session 0x1766a4799830001 for server localhost/127.0.0.1:2181, unexpected error, closing socket connection and attempting reconnect\njava.io.IOException: Packet len5605464 is out of range!\n        at org.apache.zookeeper.ClientCnxn$SendThread.readLength(ClientCnxn.java:710)\n        at org.apache.zookeeper.ClientCnxn$SendThread.doIO(ClientCnxn.java:869)\n        at org.apache.zookeeper.ClientCnxn$SendThread.run(ClientCnxn.java:1130)</code></pre>\n\n<a id=\"more\"></a>\n\n<h3 id=\"分析问题\"><a href=\"#分析问题\" class=\"headerlink\" title=\"分析问题\"></a>分析问题</h3><p>根据错误提示，<code>java.io.IOException: Packet len8854970 is out of range!</code>，out of range 就是超过了某个限制，查看源码。</p>\n<p>根据相应的关键词，找到报错的类：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FwYWNoZS96b29rZWVwZXIvYmxvYi9tYXN0ZXIvem9va2VlcGVyLXNlcnZlci9zcmMvbWFpbi9qYXZhL29yZy9hcGFjaGUvem9va2VlcGVyL0NsaWVudENueG5Tb2NrZXQuamF2YQ==\">ClientCnxnSocket.java<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>对应方法如下：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> packetLen <span class=\"token operator\">=</span> <span class=\"token class-name\">ZKClientConfig</span><span class=\"token punctuation\">.</span>CLIENT_MAX_PACKET_LENGTH_DEFAULT<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">initProperties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        packetLen <span class=\"token operator\">=</span> clientConfig<span class=\"token punctuation\">.</span><span class=\"token function\">getInt</span><span class=\"token punctuation\">(</span>\n            <span class=\"token class-name\">ZKConfig</span><span class=\"token punctuation\">.</span>JUTE_MAXBUFFER<span class=\"token punctuation\">,</span>\n            <span class=\"token class-name\">ZKClientConfig</span><span class=\"token punctuation\">.</span>CLIENT_MAX_PACKET_LENGTH_DEFAULT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        LOG<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{} value is {} Bytes\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ZKConfig</span><span class=\"token punctuation\">.</span>JUTE_MAXBUFFER<span class=\"token punctuation\">,</span> packetLen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">NumberFormatException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">String</span> msg <span class=\"token operator\">=</span> <span class=\"token class-name\">MessageFormat</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span>\n            <span class=\"token string\">\"Configured value {0} for property {1} can not be parsed to int\"</span><span class=\"token punctuation\">,</span>\n            clientConfig<span class=\"token punctuation\">.</span><span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ZKConfig</span><span class=\"token punctuation\">.</span>JUTE_MAXBUFFER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token class-name\">ZKConfig</span><span class=\"token punctuation\">.</span>JUTE_MAXBUFFER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        LOG<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">readLength</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> incomingBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">getInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>len <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> len <span class=\"token operator\">&gt;=</span> packetLen<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Packet len \"</span> <span class=\"token operator\">+</span> len <span class=\"token operator\">+</span> <span class=\"token string\">\" is out of range!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    incomingBuffer <span class=\"token operator\">=</span> <span class=\"token class-name\">ByteBuffer</span><span class=\"token punctuation\">.</span><span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span>len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<p>其中，<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FwYWNoZS96b29rZWVwZXIvYmxvYi9tYXN0ZXIvem9va2VlcGVyLXNlcnZlci9zcmMvbWFpbi9qYXZhL29yZy9hcGFjaGUvem9va2VlcGVyL2NvbW1vbi9aS0NvbmZpZy5qYXZhI0w0NQ==\">ZKConfig.JUTE_MAXBUFFER<i class=\"fa fa-external-link-alt\"></i></span> 的定义如下</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> JUTE_MAXBUFFER <span class=\"token operator\">=</span> <span class=\"token string\">\"jute.maxbuffer\"</span><span class=\"token punctuation\">;</span></code></pre>\n\n<p>默认值 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FwYWNoZS96b29rZWVwZXIvYmxvYi9tYXN0ZXIvem9va2VlcGVyLXNlcnZlci9zcmMvbWFpbi9qYXZhL29yZy9hcGFjaGUvem9va2VlcGVyL2NsaWVudC9aS0NsaWVudENvbmZpZy5qYXZhI0w2MA==\">ZKClientConfig.CLIENT_MAX_PACKET_LENGTH_DEFAULT<i class=\"fa fa-external-link-alt\"></i></span> 为：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> CLIENT_MAX_PACKET_LENGTH_DEFAULT <span class=\"token operator\">=</span> <span class=\"token number\">0xfffff</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 1 MB */</span></code></pre>\n\n<p>从代码就能够很容易的看出，这个错误是因为 <code>len</code> 小于 0 或大于 <code>packetLen</code>，根据代码逻辑，<code>len</code> 不小于 0，那就是大于 <code>packetLen</code>。</p>\n<p>而 <code>packetLen</code> 的值是 <code>jute.maxbuffer</code> 系统变量定义或默认的 4096 * 1024（4M）。</p>\n<p>16 进制的 <code>0xfffff</code> 为 10 进制的 <code>1048575</code>，即 1M。</p>\n<p>源码的大体逻辑就是，创建与 zookeeper 连接之后，要对某个节点进行读写操作，为了提高吞吐量，先判断下该节点数据量大小是否超过设置的 <code>jute.maxbuffer</code>，如果是，就抛出异常。</p>\n<h3 id=\"解决问题\"><a href=\"#解决问题\" class=\"headerlink\" title=\"解决问题\"></a>解决问题</h3><p>根据上面的纠错，答案就很明显了。只有两种方案：</p>\n<ul>\n<li>把待操作节点的大小减下来，小于默认的 4M</li>\n<li> 把默认的 <code>jute.maxbuffer</code> 大小提高</li>\n</ul>\n<p>对于第一种方式，需要根据自身具体情况具体操作。这里没有什么有效建议。</p>\n<p>对于第二种方式，server 和 client 根据情况进行修改，解决方案如下：</p>\n<h4 id=\"服务端\"><a href=\"#服务端\" class=\"headerlink\" title=\"服务端\"></a>服务端</h4><p>zkServer 修改配置文件，增加内存配置 <code>jute.maxbuffer</code>，重启 zk 使配置生效。</p>\n<pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token function\">vim</span> zoo.cfg\njute.maxbuffer<span class=\"token operator\">=</span>0x400000 <span class=\"token comment\">#增加此配置到 4M 内存</span></code></pre>\n\n<h4 id=\"客户端\"><a href=\"#客户端\" class=\"headerlink\" title=\"客户端\"></a>客户端</h4><p>client 端启动的时候增加参数</p>\n<pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token assign-left variable\">JAVA_OPTS</span><span class=\"token operator\">=</span><span class=\"token string\">\" -Djute.maxbuffer=0x400000 \"</span></code></pre>","categories":["Apache","Zookeeper"],"tags":["Apache","Zookeeper"]},{"title":"使用 RSA 在 Web 前端加密传输至后台解密","url":"/2020/12/2020-12-18-%E4%BD%BF%E7%94%A8RSA%E5%9C%A8Web%E5%89%8D%E7%AB%AF%E5%8A%A0%E5%AF%86%E4%BC%A0%E8%BE%93%E8%87%B3%E5%90%8E%E5%8F%B0%E8%A7%A3%E5%AF%86/","content":"<p>在自定义登录过程中，用户名和密码通常是作为 form 表单中的 input 控件进行输入，然后明文传输到服务端进行校验登录的。</p>\n<p>此时，可能会出现密码明文传输问题。如下图示例所示：</p>\n<p><img src=\"/images/2020/12/image-20201217163137695.png\" alt=\"image-20201217163137695\" loading=\"lazy\"></p>\n<p>通常跟服务器的交互中，为保障数据传输的安全性，避免被人抓包篡改数据，除了 https 的应用，还需要对传输数据进行加解密。</p>\n<p>本文介绍一种 <strong>RSA 加密 web 前端用户名密码加密传输至后台并解密</strong> 的方法。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"公共类RSAUtils\"><a href=\"#公共类RSAUtils\" class=\"headerlink\" title=\"公共类RSAUtils\"></a>公共类 RSAUtils</h3><p>可能需要引入 Jar 包：</p>\n<pre class=\"language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.bouncycastle<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>bcprov-jdk15on<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>1.67<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n\n<p>编写加解密公共方法类 RSAUtils</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>commons<span class=\"token punctuation\">.</span>codec<span class=\"token punctuation\">.</span>binary<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Base64</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>crypto<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Cipher</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>security<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>security<span class=\"token punctuation\">.</span>interfaces<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RSAPublicKey</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RSAUtils</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">KeyPair</span> keyPair <span class=\"token operator\">=</span> <span class=\"token function\">initKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">KeyPair</span> <span class=\"token function\">initKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token class-name\">Provider</span> provider <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> org<span class=\"token punctuation\">.</span>bouncycastle<span class=\"token punctuation\">.</span>jce<span class=\"token punctuation\">.</span>provider<span class=\"token punctuation\">.</span><span class=\"token class-name\">BouncyCastleProvider</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token class-name\">Security</span><span class=\"token punctuation\">.</span><span class=\"token function\">addProvider</span><span class=\"token punctuation\">(</span>provider<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token class-name\">SecureRandom</span> random <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SecureRandom</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token class-name\">KeyPairGenerator</span> generator <span class=\"token operator\">=</span> <span class=\"token class-name\">KeyPairGenerator</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"RSA\"</span><span class=\"token punctuation\">,</span> provider<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tgenerator<span class=\"token punctuation\">.</span><span class=\"token function\">initialize</span><span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">,</span> random<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> generator<span class=\"token punctuation\">.</span><span class=\"token function\">generateKeyPair</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">generateBase64PublicKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">PublicKey</span> publicKey <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">RSAPublicKey</span><span class=\"token punctuation\">)</span> keyPair<span class=\"token punctuation\">.</span><span class=\"token function\">getPublic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Base64</span><span class=\"token punctuation\">.</span><span class=\"token function\">encodeBase64</span><span class=\"token punctuation\">(</span>publicKey<span class=\"token punctuation\">.</span><span class=\"token function\">getEncoded</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">decryptBase64</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> string<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token function\">decrypt</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Base64</span><span class=\"token punctuation\">.</span><span class=\"token function\">decodeBase64</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">decrypt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> byteArray<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token class-name\">Provider</span> provider <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> org<span class=\"token punctuation\">.</span>bouncycastle<span class=\"token punctuation\">.</span>jce<span class=\"token punctuation\">.</span>provider<span class=\"token punctuation\">.</span><span class=\"token class-name\">BouncyCastleProvider</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token class-name\">Security</span><span class=\"token punctuation\">.</span><span class=\"token function\">addProvider</span><span class=\"token punctuation\">(</span>provider<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token class-name\">Cipher</span> cipher <span class=\"token operator\">=</span> <span class=\"token class-name\">Cipher</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"RSA/ECB/PKCS1Padding\"</span><span class=\"token punctuation\">,</span> provider<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token class-name\">PrivateKey</span> privateKey <span class=\"token operator\">=</span> keyPair<span class=\"token punctuation\">.</span><span class=\"token function\">getPrivate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tcipher<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Cipher</span><span class=\"token punctuation\">.</span>DECRYPT_MODE<span class=\"token punctuation\">,</span> privateKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> plainText <span class=\"token operator\">=</span> cipher<span class=\"token punctuation\">.</span><span class=\"token function\">doFinal</span><span class=\"token punctuation\">(</span>byteArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> plainText<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<h3 id=\"后台生成公钥方法\"><a href=\"#后台生成公钥方法\" class=\"headerlink\" title=\"后台生成公钥方法\"></a>后台生成公钥方法</h3><pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"getPublicKey\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@ResponseBody</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getPublicKey</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">String</span> publicKey <span class=\"token operator\">=</span> <span class=\"token class-name\">RSAUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">generateBase64PublicKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> publicKey<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<h3 id=\"前端获取公钥\"><a href=\"#前端获取公钥\" class=\"headerlink\" title=\"前端获取公钥\"></a>前端获取公钥</h3><p>前端在向后台发起登录请求之前，先请求后台获取公钥的方法</p>\n<pre class=\"language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> publicKey<span class=\"token punctuation\">;</span>\n$<span class=\"token punctuation\">.</span><span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    url<span class=\"token operator\">:</span> <span class=\"token string\">\"getPublicKey\"</span><span class=\"token punctuation\">,</span>\n    type<span class=\"token operator\">:</span> <span class=\"token string\">\"get\"</span><span class=\"token punctuation\">,</span>\n    async<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    dataType<span class=\"token operator\">:</span> <span class=\"token string\">\"text\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">success</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            publicKey <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n<h3 id=\"前端引入加密依赖\"><a href=\"#前端引入加密依赖\" class=\"headerlink\" title=\"前端引入加密依赖\"></a>前端引入加密依赖</h3><p>前端引入 jsencrypt.min.js 文件：</p>\n<pre class=\"language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/js/jsencrypt.min.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n\n<p>npm 引入：</p>\n<pre class=\"language-js\" data-language=\"js\"><code class=\"language-js\">npm i jsencrypt</code></pre>\n\n<p>npm 使用：</p>\n<pre class=\"language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> JsEncrypt <span class=\"token keyword\">from</span> <span class=\"token string\">'jsencrypt'</span>\n\n<span class=\"token keyword\">let</span> encrypt <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JsEncrypt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nencrypt<span class=\"token punctuation\">.</span><span class=\"token function\">setPublicKey</span><span class=\"token punctuation\">(</span>publicKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nusername <span class=\"token operator\">=</span> encrypt<span class=\"token punctuation\">.</span><span class=\"token function\">encrypt</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n<ul>\n<li>官网：<span class=\"exturl\" data-url=\"aHR0cDovL3RyYXZpc3RpZHdlbGwuY29tL2pzZW5jcnlwdC8=\">http://travistidwell.com/jsencrypt/<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>GitHub：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3RyYXZpc3QvanNlbmNyeXB0\">https://github.com/travist/jsencrypt<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>npm：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvanNlbmNyeXB0\">https://www.npmjs.com/package/jsencrypt<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<h3 id=\"前端加密\"><a href=\"#前端加密\" class=\"headerlink\" title=\"前端加密\"></a>前端加密</h3><p>通过公钥对用户名和密码加密</p>\n<pre class=\"language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> encrypt <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JSEncrypt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nencrypt<span class=\"token punctuation\">.</span><span class=\"token function\">setPublicKey</span><span class=\"token punctuation\">(</span>publicKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> loginaccount <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#loginaccount'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">val</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> loginpassword <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#loginpassword'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">val</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nloginaccount <span class=\"token operator\">=</span> encrypt<span class=\"token punctuation\">.</span><span class=\"token function\">encrypt</span><span class=\"token punctuation\">(</span>loginaccount<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nloginpassword <span class=\"token operator\">=</span> encrypt<span class=\"token punctuation\">.</span><span class=\"token function\">encrypt</span><span class=\"token punctuation\">(</span>loginpassword<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n<h3 id=\"加密请求后台\"><a href=\"#加密请求后台\" class=\"headerlink\" title=\"加密请求后台\"></a>加密请求后台</h3><h4 id=\"方法一：ajax-请求\"><a href=\"#方法一：ajax-请求\" class=\"headerlink\" title=\"方法一：ajax 请求\"></a>方法一：ajax 请求</h4><p>通过 ajax 用加密后的用户名密码请求后台</p>\n<pre class=\"language-js\" data-language=\"js\"><code class=\"language-js\">$<span class=\"token punctuation\">.</span><span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\ttype<span class=\"token operator\">:</span> <span class=\"token string\">\"POST\"</span><span class=\"token punctuation\">,</span>\n\turl<span class=\"token operator\">:</span> <span class=\"token string\">\"xxxxxx\"</span><span class=\"token punctuation\">,</span>\n\tdata<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token string\">\"username\"</span><span class=\"token operator\">:</span>username<span class=\"token punctuation\">,</span>\n\t\t<span class=\"token string\">\"password\"</span><span class=\"token operator\">:</span>password<span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\tdataType<span class=\"token operator\">:</span> <span class=\"token string\">\"json\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token function-variable function\">success</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>code <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token comment\">//登录成功</span>\n\t\t\tparent<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>href <span class=\"token operator\">=</span> <span class=\"token string\">'index.html'</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\tvm<span class=\"token punctuation\">.</span>error <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t\tvm<span class=\"token punctuation\">.</span>errorMsg <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>msg<span class=\"token punctuation\">;</span>\n\t\t\tvm<span class=\"token punctuation\">.</span><span class=\"token function\">refreshCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n<h4 id=\"方法二：form-表单\"><a href=\"#方法二：form-表单\" class=\"headerlink\" title=\"方法二：form 表单\"></a>方法二：form 表单</h4><p>使用 form 表单请求后台</p>\n<pre class=\"language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>post<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">action</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>login<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>loginForm<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">onsubmit</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>return checkLoginTask()<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>hidden<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>account<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>account<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>hidden<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onclick</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$(<span class=\"token punctuation\">'</span>#loginForm<span class=\"token punctuation\">'</span>).submit()<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>登录<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n\n<p>其中 checkLoginTask 方法如下：</p>\n<pre class=\"language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">checkLoginTask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">var</span> publicKey<span class=\"token punctuation\">;</span>\n\t$<span class=\"token punctuation\">.</span><span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        url<span class=\"token operator\">:</span> <span class=\"token string\">\"getPublicKey\"</span><span class=\"token punctuation\">,</span>\n        type<span class=\"token operator\">:</span> <span class=\"token string\">\"get\"</span><span class=\"token punctuation\">,</span>\n        async<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n        dataType<span class=\"token operator\">:</span> <span class=\"token string\">\"text\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function-variable function\">success</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                publicKey <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>publicKey <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    \t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">var</span> encrypt <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JSEncrypt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    encrypt<span class=\"token punctuation\">.</span><span class=\"token function\">setPublicKey</span><span class=\"token punctuation\">(</span>publicKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">var</span> loginaccount <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#loginaccount'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">val</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">var</span> loginpassword <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#loginpassword'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">val</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tloginaccount <span class=\"token operator\">=</span> encrypt<span class=\"token punctuation\">.</span><span class=\"token function\">encrypt</span><span class=\"token punctuation\">(</span>loginaccount<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tloginpassword <span class=\"token operator\">=</span> encrypt<span class=\"token punctuation\">.</span><span class=\"token function\">encrypt</span><span class=\"token punctuation\">(</span>loginpassword<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#account'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">val</span><span class=\"token punctuation\">(</span>loginaccount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#password'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">val</span><span class=\"token punctuation\">(</span>loginpassword<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<h4 id=\"方法三：axios-请求\"><a href=\"#方法三：axios-请求\" class=\"headerlink\" title=\"方法三：axios 请求\"></a>方法三：axios 请求</h4><pre class=\"language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> data<span class=\"token operator\">:</span> publicKey <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$http<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/user/key\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> username <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>loginForm<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> password <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>loginForm<span class=\"token punctuation\">.</span>password<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> encrypt <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JsEncrypt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nencrypt<span class=\"token punctuation\">.</span><span class=\"token function\">setPublicKey</span><span class=\"token punctuation\">(</span>publicKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nusername <span class=\"token operator\">=</span> encrypt<span class=\"token punctuation\">.</span><span class=\"token function\">encrypt</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\npassword <span class=\"token operator\">=</span> encrypt<span class=\"token punctuation\">.</span><span class=\"token function\">encrypt</span><span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//发起登入请求</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> data<span class=\"token operator\">:</span> res <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$http<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"user/login?username=\"</span><span class=\"token operator\">+</span><span class=\"token function\">encodeURIComponent</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\"&amp;password=\"</span><span class=\"token operator\">+</span><span class=\"token function\">encodeURIComponent</span><span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n<h3 id=\"后端解密\"><a href=\"#后端解密\" class=\"headerlink\" title=\"后端解密\"></a>后端解密</h3><pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">String</span> account <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getParameter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"account\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> password <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getParameter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"password\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNotBlank</span><span class=\"token punctuation\">(</span>account<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    account <span class=\"token operator\">=</span> <span class=\"token class-name\">RSAUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">decryptBase64</span><span class=\"token punctuation\">(</span>account<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNotBlank</span><span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    password <span class=\"token operator\">=</span> <span class=\"token class-name\">RSAUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">decryptBase64</span><span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<h3 id=\"最终效果\"><a href=\"#最终效果\" class=\"headerlink\" title=\"最终效果\"></a>最终效果</h3><p><img src=\"/images/2020/12/image-20201217164715019.png\" alt=\"image-20201217164715019\" loading=\"lazy\"></p>\n<p>从而可以避免出现密码明文传输问题。</p>\n<h3 id=\"测试代码\"><a href=\"#测试代码\" class=\"headerlink\" title=\"测试代码\"></a>测试代码</h3><pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">String</span> key <span class=\"token operator\">=</span> <span class=\"token class-name\">HttpClient4</span><span class=\"token punctuation\">.</span><span class=\"token function\">doGet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://127.0.0.1:8181/user/key\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlog<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">&gt;</span></span> paramMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">try</span><span class=\"token punctuation\">{</span>\n    paramMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">RSAUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">encryptByPublicKey</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span><span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    paramMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"password\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">RSAUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">encryptByPublicKey</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span><span class=\"token string\">\"123456\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> result <span class=\"token operator\">=</span> <span class=\"token class-name\">HttpClient4</span><span class=\"token punctuation\">.</span><span class=\"token function\">doPost</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://127.0.0.1:8181/user/login\"</span><span class=\"token punctuation\">,</span> paramMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">JsonObject</span> jsonObject <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JsonParser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAsJsonObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>jsonObject<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"code\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAsInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span>jsonObject<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAsString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<p>其中：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * 公钥加密\n * @param publicKeyText 公钥\n * @param text 待加密的文本\n * @return /\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">encryptByPublicKey</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> publicKeyText<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> text<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token class-name\">X509EncodedKeySpec</span> x509EncodedKeySpec2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">X509EncodedKeySpec</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Base64</span><span class=\"token punctuation\">.</span><span class=\"token function\">decodeBase64</span><span class=\"token punctuation\">(</span>publicKeyText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">KeyFactory</span> keyFactory <span class=\"token operator\">=</span> <span class=\"token class-name\">KeyFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"RSA\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">PublicKey</span> publicKey <span class=\"token operator\">=</span> keyFactory<span class=\"token punctuation\">.</span><span class=\"token function\">generatePublic</span><span class=\"token punctuation\">(</span>x509EncodedKeySpec2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">Cipher</span> cipher <span class=\"token operator\">=</span> <span class=\"token class-name\">Cipher</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"RSA\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcipher<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Cipher</span><span class=\"token punctuation\">.</span>ENCRYPT_MODE<span class=\"token punctuation\">,</span> publicKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> result <span class=\"token operator\">=</span> cipher<span class=\"token punctuation\">.</span><span class=\"token function\">doFinal</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token class-name\">Base64</span><span class=\"token punctuation\">.</span><span class=\"token function\">encodeBase64String</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * 私钥解密\n * @param privateKeyText\n * @param text\n * @return\n * @throws Exception\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">decryptByPrivateKey</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> privateKeyText<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> text<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token class-name\">PKCS8EncodedKeySpec</span> pkcs8EncodedKeySpec5 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PKCS8EncodedKeySpec</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Base64</span><span class=\"token punctuation\">.</span><span class=\"token function\">decodeBase64</span><span class=\"token punctuation\">(</span>privateKeyText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">KeyFactory</span> keyFactory <span class=\"token operator\">=</span> <span class=\"token class-name\">KeyFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"RSA\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">PrivateKey</span> privateKey <span class=\"token operator\">=</span> keyFactory<span class=\"token punctuation\">.</span><span class=\"token function\">generatePrivate</span><span class=\"token punctuation\">(</span>pkcs8EncodedKeySpec5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">Cipher</span> cipher <span class=\"token operator\">=</span> <span class=\"token class-name\">Cipher</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"RSA\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcipher<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Cipher</span><span class=\"token punctuation\">.</span>DECRYPT_MODE<span class=\"token punctuation\">,</span> privateKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> result <span class=\"token operator\">=</span> cipher<span class=\"token punctuation\">.</span><span class=\"token function\">doFinal</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Base64</span><span class=\"token punctuation\">.</span><span class=\"token function\">decodeBase64</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n","categories":["Java","JavaClass"],"tags":["JavaClass","Java","RSA"]},{"title":"SpringBoot 集成 Zookeeper","url":"/2020/12/2020-12-19-SpringBoot%E9%9B%86%E6%88%90Zookeeper/","content":"<h3 id=\"引入依赖\"><a href=\"#引入依赖\" class=\"headerlink\" title=\"引入依赖\"></a>引入依赖</h3><p>pom.xml 引入 Zookeeper 依赖</p>\n<pre class=\"language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.apache.zookeeper<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>zookeeper<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>3.4.14<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n\n<a id=\"more\"></a>\n\n<h3 id=\"添加配置\"><a href=\"#添加配置\" class=\"headerlink\" title=\"添加配置\"></a>添加配置</h3><p>在 <code>application.properties</code> 文件中添加 zookeeper 配置：</p>\n<pre class=\"language-properties\" data-language=\"properties\"><code class=\"language-properties\"><span class=\"token attr-name\">zookeeper.address</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">127.0.0.1:2181</span>\n<span class=\"token attr-name\">zookeeper.timeout</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">4000</span></code></pre>\n\n<h3 id=\"连接配置类\"><a href=\"#连接配置类\" class=\"headerlink\" title=\"连接配置类\"></a>连接配置类</h3><p>新建 ZookeeperConfig 连接配置类</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span>extern<span class=\"token punctuation\">.</span>slf4j<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Slf4j</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>zookeeper<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">WatchedEvent</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>zookeeper<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Watcher</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>zookeeper<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ZooKeeper</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Value</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Bean</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Configuration</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">CountDownLatch</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ZookeeperConfig</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"${zookeeper.address}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> connectString<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"${zookeeper.timeout}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> timeout<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Bean</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"zkClient\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ZooKeeper</span> <span class=\"token function\">zkClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">ZooKeeper</span> zooKeeper<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">final</span> <span class=\"token class-name\">CountDownLatch</span> countDownLatch <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CountDownLatch</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 连接成功后，会回调watcher监听，此连接操作是异步的，执行完new语句后，直接调用后续代码</span>\n            <span class=\"token comment\">// 可指定多台服务地址 127.0.0.1:2181,127.0.0.1:2182,127.0.0.1:2183</span>\n            zooKeeper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ZooKeeper</span><span class=\"token punctuation\">(</span>connectString<span class=\"token punctuation\">,</span> timeout<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Watcher</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token annotation punctuation\">@Override</span>\n                <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">process</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">WatchedEvent</span> event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Event</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">KeeperState</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">SyncConnected</span><span class=\"token operator\">==</span>event<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                        <span class=\"token comment\">//如果收到了服务端的响应事件,连接成功</span>\n                        countDownLatch<span class=\"token punctuation\">.</span><span class=\"token function\">countDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            countDownLatch<span class=\"token punctuation\">.</span><span class=\"token function\">await</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"【初始化ZooKeeper连接状态....】={}\"</span><span class=\"token punctuation\">,</span>zooKeeper<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// CONNECTED</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"初始化ZooKeeper连接异常....】={}\"</span><span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span>  zooKeeper<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<h3 id=\"封装工具类\"><a href=\"#封装工具类\" class=\"headerlink\" title=\"封装工具类\"></a>封装工具类</h3><h4 id=\"获取子节点\"><a href=\"#获取子节点\" class=\"headerlink\" title=\"获取子节点\"></a>获取子节点</h4><p>获取当前节点的子节点 (不包含孙子节点)</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">getChildren</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> path<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">KeeperException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InterruptedException</span><span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> list <span class=\"token operator\">=</span> zkClient<span class=\"token punctuation\">.</span><span class=\"token function\">getChildren</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> list<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<h4 id=\"创建节点\"><a href=\"#创建节点\" class=\"headerlink\" title=\"创建节点\"></a>创建节点</h4><p>创建持久化节点</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">createNode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> path<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        zkClient<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ZooDefs</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Ids</span><span class=\"token punctuation\">.</span>OPEN_ACL_UNSAFE<span class=\"token punctuation\">,</span> <span class=\"token class-name\">CreateMode</span><span class=\"token punctuation\">.</span>PERSISTENT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"【创建持久化节点异常】{},{},{}\"</span><span class=\"token punctuation\">,</span>path<span class=\"token punctuation\">,</span>data<span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<h4 id=\"修改节点\"><a href=\"#修改节点\" class=\"headerlink\" title=\"修改节点\"></a>修改节点</h4><p>修改持久化节点</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">updateNode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> path<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//zk的数据版本是从0开始计数的。如果客户端传入的是-1，则表示zk服务器需要基于最新的数据进行更新。</span>\n        <span class=\"token comment\">//如果对zk的数据节点的更新操作没有原子性要求则可以使用-1.</span>\n        <span class=\"token comment\">//version参数指定要更新的数据的版本, 如果version和真实的版本不同, 更新操作将失败. 指定version为-1则忽略版本检查</span>\n        zkClient<span class=\"token punctuation\">.</span><span class=\"token function\">setData</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"【修改持久化节点异常】{},{},{}\"</span><span class=\"token punctuation\">,</span>path<span class=\"token punctuation\">,</span>data<span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<h4 id=\"获取节点值\"><a href=\"#获取节点值\" class=\"headerlink\" title=\"获取节点值\"></a>获取节点值</h4><p>获取指定节点的值</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span>  <span class=\"token class-name\">String</span> <span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> path<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Watcher</span> watcher<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Stat</span> stat<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Stat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bytes<span class=\"token operator\">=</span>zkClient<span class=\"token punctuation\">.</span><span class=\"token function\">getData</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span>watcher<span class=\"token punctuation\">,</span>stat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span>  <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span>  <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<h4 id=\"判断节点是否存在\"><a href=\"#判断节点是否存在\" class=\"headerlink\" title=\"判断节点是否存在\"></a>判断节点是否存在</h4><p>判断指定节点是否存在</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// @param needWatch  指定是否复用zookeeper中默认的Watcher</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">Stat</span> <span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> path<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> needWatch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> zkClient<span class=\"token punctuation\">.</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span>needWatch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"【断指定节点是否存在异常】{},{}\"</span><span class=\"token punctuation\">,</span>path<span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 检测结点是否存在 并设置监听事件（三种监听类型： 创建，删除，更新）</span>\n<span class=\"token comment\">// @param watcher  传入指定的监听类</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">Stat</span> <span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> path<span class=\"token punctuation\">,</span><span class=\"token class-name\">Watcher</span> watcher <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> zkClient<span class=\"token punctuation\">.</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span>watcher<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"【断指定节点是否存在异常】{},{}\"</span><span class=\"token punctuation\">,</span>path<span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<p>返回的 Stat 节点示例如下：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\">log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[isExists]\"</span><span class=\"token operator\">+</span>isExists<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [isExists]262,262,1608169108777,1608169108777,0,0,0,0,8,0,262</span></code></pre>\n\n<p>这几个数字对应的类型分别如下：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">ByteArrayOutputStream</span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ByteArrayOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">CsvOutputArchive</span> a_ <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CsvOutputArchive</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        a_<span class=\"token punctuation\">.</span><span class=\"token function\">startRecord</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        a_<span class=\"token punctuation\">.</span><span class=\"token function\">writeLong</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>czxid<span class=\"token punctuation\">,</span> <span class=\"token string\">\"czxid\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Zookeeper为节点分配的Id</span>\n        a_<span class=\"token punctuation\">.</span><span class=\"token function\">writeLong</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mzxid<span class=\"token punctuation\">,</span> <span class=\"token string\">\"mzxid\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 修改后的id</span>\n        a_<span class=\"token punctuation\">.</span><span class=\"token function\">writeLong</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ctime<span class=\"token punctuation\">,</span> <span class=\"token string\">\"ctime\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 节点创建时间</span>\n        a_<span class=\"token punctuation\">.</span><span class=\"token function\">writeLong</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mtime<span class=\"token punctuation\">,</span> <span class=\"token string\">\"mtime\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 修改时间</span>\n        a_<span class=\"token punctuation\">.</span><span class=\"token function\">writeInt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>version<span class=\"token punctuation\">,</span> <span class=\"token string\">\"version\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 节点的更新次数</span>\n        a_<span class=\"token punctuation\">.</span><span class=\"token function\">writeInt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>cversion<span class=\"token punctuation\">,</span> <span class=\"token string\">\"cversion\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 子节点的更新次数</span>\n        a_<span class=\"token punctuation\">.</span><span class=\"token function\">writeInt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>aversion<span class=\"token punctuation\">,</span> <span class=\"token string\">\"aversion\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 节点ACL(授权信息)的更新次数</span>\n        a_<span class=\"token punctuation\">.</span><span class=\"token function\">writeLong</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ephemeralOwner<span class=\"token punctuation\">,</span> <span class=\"token string\">\"ephemeralOwner\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 如果该节点为临时节点,ephemeralOwner值表示与该节点绑定的session id. 如果该节点不是临时节点,ephemeralOwner值为0</span>\n        a_<span class=\"token punctuation\">.</span><span class=\"token function\">writeInt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dataLength<span class=\"token punctuation\">,</span> <span class=\"token string\">\"dataLength\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 数据长度</span>\n        a_<span class=\"token punctuation\">.</span><span class=\"token function\">writeInt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>numChildren<span class=\"token punctuation\">,</span> <span class=\"token string\">\"numChildren\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 子节点个数</span>\n        a_<span class=\"token punctuation\">.</span><span class=\"token function\">writeLong</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pzxid<span class=\"token punctuation\">,</span> <span class=\"token string\">\"pzxid\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        a_<span class=\"token punctuation\">.</span><span class=\"token function\">endRecord</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">toByteArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> var3<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        var3<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"ERROR\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<p>与 get 或 stat 命令行的返回结果一致：</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ get /test\ntestdata\ncZxid <span class=\"token operator\">=</span> 0x106\nctime <span class=\"token operator\">=</span> Thu Dec <span class=\"token number\">17</span> 09:38:28 CST <span class=\"token number\">2020</span>\nmZxid <span class=\"token operator\">=</span> 0x106\nmtime <span class=\"token operator\">=</span> Thu Dec <span class=\"token number\">17</span> 09:38:28 CST <span class=\"token number\">2020</span>\npZxid <span class=\"token operator\">=</span> 0x106\ncversion <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\ndataVersion <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\naclVersion <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\nephemeralOwner <span class=\"token operator\">=</span> 0x0\ndataLength <span class=\"token operator\">=</span> <span class=\"token number\">8</span>\nnumChildren <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n$ <span class=\"token function\">stat</span> /test\ncZxid <span class=\"token operator\">=</span> 0x106\nctime <span class=\"token operator\">=</span> Thu Dec <span class=\"token number\">17</span> 09:38:28 CST <span class=\"token number\">2020</span>\nmZxid <span class=\"token operator\">=</span> 0x106\nmtime <span class=\"token operator\">=</span> Thu Dec <span class=\"token number\">17</span> 09:38:28 CST <span class=\"token number\">2020</span>\npZxid <span class=\"token operator\">=</span> 0x106\ncversion <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\ndataVersion <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\naclVersion <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\nephemeralOwner <span class=\"token operator\">=</span> 0x0\ndataLength <span class=\"token operator\">=</span> <span class=\"token number\">8</span>\nnumChildren <span class=\"token operator\">=</span> <span class=\"token number\">0</span></code></pre>\n\n<h4 id=\"删除节点\"><a href=\"#删除节点\" class=\"headerlink\" title=\"删除节点\"></a>删除节点</h4><p>删除持久化节点</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">deleteNode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//version参数指定要更新的数据的版本, 如果version和真实的版本不同, 更新操作将失败. 指定version为-1则忽略版本检查</span>\n        zkClient<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"【删除持久化节点异常】{},{}\"</span><span class=\"token punctuation\">,</span>path<span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<h3 id=\"自定义监听\"><a href=\"#自定义监听\" class=\"headerlink\" title=\"自定义监听\"></a>自定义监听</h3><pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span>extern<span class=\"token punctuation\">.</span>slf4j<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Slf4j</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>zookeeper<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">WatchedEvent</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>zookeeper<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Watcher</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ZookeeperWatcher</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Watcher</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">process</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">WatchedEvent</span> event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"【Watcher监听事件】={}\"</span><span class=\"token punctuation\">,</span>event<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"【监听路径为】={}\"</span><span class=\"token punctuation\">,</span>event<span class=\"token punctuation\">.</span><span class=\"token function\">getPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"【监听的类型为】={}\"</span><span class=\"token punctuation\">,</span>event<span class=\"token punctuation\">.</span><span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//  三种监听类型： 创建，删除，更新</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<p>删除节点时，打印结果为：</p>\n<pre class=\"language-none\"><code class=\"language-none\">【监听的类型为】=NodeDeleted\n【Watcher监听事件】=SyncConnected\n【监听路径为】=/test\n【监听的类型为】=NodeDeleted</code></pre>\n\n<p>event.getState () 的 返回类型见 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FwYWNoZS96b29rZWVwZXIvYmxvYi9tYXN0ZXIvem9va2VlcGVyLXNlcnZlci9zcmMvbWFpbi9qYXZhL29yZy9hcGFjaGUvem9va2VlcGVyL1dhdGNoZXIuamF2YQ==\">Watcher.KeeperState<i class=\"fa fa-external-link-alt\"></i></span> 子类。</p>\n<p>event.getType () 的 返回类型见 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FwYWNoZS96b29rZWVwZXIvYmxvYi9tYXN0ZXIvem9va2VlcGVyLXNlcnZlci9zcmMvbWFpbi9qYXZhL29yZy9hcGFjaGUvem9va2VlcGVyL1dhdGNoZXIuamF2YQ==\">Watcher.EventType<i class=\"fa fa-external-link-alt\"></i></span>&nbsp;子类。</p>\n","categories":["Java","Apache","JavaJar","SpringBoot","Zookeeper"],"tags":["Apache","SpringBoot","Zookeeper"]},{"title":"Docker 容器日志管理最佳实践","url":"/2020/09/2020-09-22-Docker%E5%AE%B9%E5%99%A8%E6%97%A5%E5%BF%97%E7%AE%A1%E7%90%86%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/","content":"<p>Docker 日志分为两类：</p>\n<ul>\n<li>Docker 引擎日志 (也就是 dockerd 运行时的日志)，</li>\n<li>容器的日志，容器内的服务产生的日志。</li>\n</ul>\n<a id=\"more\"></a>\n\n<h3 id=\"Docker-引擎日志\"><a href=\"#Docker-引擎日志\" class=\"headerlink\" title=\"Docker 引擎日志\"></a>Docker 引擎日志</h3><p>Docker 引擎日志一般是交给了 Upstart (Ubuntu 14.04) 或者 systemd (CentOS 7, Ubuntu 16.04)。前者一般位于 /var/log/upstart/docker.log 下，后者我们一般 通过 <code>journalctl -u docker </code>来进行查看。</p>\n<table>\n<thead>\n<tr>\n<th>系统</th>\n<th>日志位置</th>\n</tr>\n</thead>\n<tbody><tr>\n<td> Ubuntu(14.04)</td>\n<td><code>/var/log/upstart/docker.log</code></td>\n</tr>\n<tr>\n<td>Ubuntu(16.04)</td>\n<td><code>journalctl -u docker.service</code></td>\n</tr>\n<tr>\n<td>CentOS 7/RHEL 7/Fedora</td>\n<td><code>journalctl -u docker.service</code></td>\n</tr>\n<tr>\n<td>CoreOS</td>\n<td><code>journalctl -u docker.service</code></td>\n</tr>\n<tr>\n<td>OpenSuSE</td>\n<td><code>journalctl -u docker.service</code></td>\n</tr>\n<tr>\n<td>OSX</td>\n<td><code>~/Library/Containers/com.docker.docker/Data/com.docker.driver.amd64-linux/log/d‌ocker.log</code></td>\n</tr>\n<tr>\n<td>Debian GNU/Linux 7</td>\n<td><code>/var/log/daemon.log</code></td>\n</tr>\n<tr>\n<td>Debian GNU/Linux 8</td>\n<td><code>journalctl -u docker.service</code></td>\n</tr>\n<tr>\n<td>Boot2Docker</td>\n<td><code>/var/log/docker.log</code></td>\n</tr>\n</tbody></table>\n<p>以上内容来自：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmxhYjk5Lm9yZy9wb3N0L2RvY2tlci0yMDE2LTA3LTE0LWZhcS5odG1s\">https://blog.lab99.org/post/docker-2016-07-14-faq.html<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h3 id=\"容器日志\"><a href=\"#容器日志\" class=\"headerlink\" title=\"容器日志\"></a>容器日志</h3><h4 id=\"Docker-日志命令\"><a href=\"#Docker-日志命令\" class=\"headerlink\" title=\"Docker 日志命令\"></a>Docker 日志命令</h4><p><code>docker logs CONTAINER</code> 显示当前运行的容器的日志信息， UNIX 和 Linux 的命令有三种 输入输出，分别是 STDIN (标准输入)、STDOUT (标准输出)、STDERR (标准错误输出)，docker logs 显示的内容包含 STOUT 和 STDERR。在生产环境，如果我们的应用输出到我们的日志文件里，所以我们在使用 docker logs 一般收集不到太多重要的日志信息。</p>\n<blockquote>\n<ul>\n<li>nginx 官方镜像，使用了一种方式，让日志输出到 STDOUT，也就是 创建一个符号链接 <code>/var/log/nginx/access.log</code> 到 <code>/dev/stdout</code>。</li>\n<li>httpd 使用的是 让其输出到指定文件 ，正常日志输出到 <code>/proc/self/fd/1</code> (STDOUT) ，错误日志输出到 <code>/proc/self/fd/2</code> (STDERR)。</li>\n<li>当日志量比较大的时候，我们使用 docker logs 来查看日志，会对 docker daemon 造成比较大的压力，容器导致容器创建慢等一系列问题。</li>\n<li><strong>只有使用了 local 、json-file、journald 的日志驱动的容器才可以使用 docker logs 捕获日志，使用其他日志驱动无法使用 docker logs</strong></li>\n</ul>\n</blockquote>\n<h4 id=\"Docker-日志驱动\"><a href=\"#Docker-日志驱动\" class=\"headerlink\" title=\"Docker 日志驱动\"></a>Docker 日志驱动</h4><p>Docker 提供了两种模式用于将消息从容器到日志驱动。</p>\n<ul>\n<li>(默认) 拒绝，阻塞从容器到容器驱动</li>\n<li>非阻塞传递，日志将储存在容器的缓冲区。</li>\n</ul>\n<blockquote>\n<p>当缓冲区满，旧的日志将被丢弃。</p>\n</blockquote>\n<p>在 mode 日志选项控制使用 <code>blocking(默认)</code> 或者 <code>non-blocking</code>, 当设置为 <code>non-blocking</code> 需要设置 <code>max-buffer-size</code> 参数 (默认为 1MB)。</p>\n<p>支持的驱动</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>none</code></td>\n<td>运行的容器没有日志，<code>docker logs</code> 也不返回任何输出。</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.docker.com/config/containers/logging/local/\"><code>local</code></a></td>\n<td>日志以自定义格式存储，旨在实现最小开销。</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.docker.com/config/containers/logging/json-file/\"><code>json-file</code></a></td>\n<td>日志格式为 JSON。Docker 的默认日志记录驱动程序。</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.docker.com/config/containers/logging/syslog/\"><code>syslog</code></a></td>\n<td>将日志消息写入 <code>syslog</code>。该 <code>syslog</code> 守护程序必须在主机上运行。</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.docker.com/config/containers/logging/journald/\"><code>journald</code></a></td>\n<td>将日志消息写入 <code>journald</code>。该 <code>journald</code> 守护程序必须在主机上运行。</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.docker.com/config/containers/logging/gelf/\"><code>gelf</code></a></td>\n<td>将日志消息写入 Graylog 扩展日志格式（GELF）端点，例如 Graylog 或 Logstash。</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.docker.com/config/containers/logging/fluentd/\"><code>fluentd</code></a></td>\n<td>将日志消息写入 <code>fluentd</code>（转发输入）。该 <code>fluentd</code> 守护程序必须在主机上运行。</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.docker.com/config/containers/logging/awslogs/\"><code>awslogs</code></a></td>\n<td>将日志消息写入 Amazon CloudWatch Logs。</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.docker.com/config/containers/logging/splunk/\"><code>splunk</code></a></td>\n<td>使用 HTTP 事件收集器将日志消息写入 <code>splunk</code>。</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.docker.com/config/containers/logging/etwlogs/\"><code>etwlogs</code></a></td>\n<td>将日志消息写为 Windows 事件跟踪（ETW）事件。仅适用于 Windows 平台。</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.docker.com/config/containers/logging/gcplogs/\"><code>gcplogs</code></a></td>\n<td>将日志消息写入 Google Cloud Platform（GCP）Logging。</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.docker.com/config/containers/logging/logentries/\"><code>logentries</code></a></td>\n<td>将日志消息写入 Rapid7 Logentries。</td>\n</tr>\n</tbody></table>\n<p>使用 Docker-CE 版本，<code>docker logs </code>命令 仅仅适用于以下驱动程序 (前面 docker logs 详解也提及到了)</p>\n<ul>\n<li>local</li>\n<li>json-file</li>\n<li>journald</li>\n</ul>\n<p><img src=\"/images/2020/09/1600768133957.png\" alt=\"1600768133957\" loading=\"lazy\"></p>\n<p><strong>Docker 日志驱动常用命令</strong></p>\n<p>查看系统当前设置的日志驱动</p>\n<pre class=\"language-none\"><code class=\"language-none\">docker  info |grep  \"Logging Driver\"  / docker info --format '{{.LoggingDriver}}'</code></pre>\n\n<p>查看单个容器的设置的日志驱动</p>\n<pre class=\"language-none\"><code class=\"language-none\">docker inspect  -f '{{.HostConfig.LogConfig.Type}}'   容器id</code></pre>\n\n<p><strong>Docker 日志驱动全局配置更改</strong></p>\n<p>修改日志驱动，在配置文件 <code>/etc/docker/daemon.json</code>（注意该文件内容是 JSON 格式的）进行配置即可。</p>\n<p>示例：</p>\n<pre class=\"language-none\"><code class=\"language-none\">{\n  \"log-driver\": \"syslog\"\n}</code></pre>\n\n<p>以上更改是针对所有的容器的日志驱动的。我们也可以单独为单一容器设置日志驱动。</p>\n<p><strong>Docker 单一容器日志驱动配置</strong></p>\n<p>在 运行容器的时候指定 日志驱动 <code>--log-driver</code>。</p>\n<pre class=\"language-none\"><code class=\"language-none\">docker  run  -itd --log-driver none alpine ash # 这里指定的日志驱动为 none </code></pre>\n\n<h3 id=\"日志驱动\"><a href=\"#日志驱动\" class=\"headerlink\" title=\"日志驱动\"></a>日志驱动</h3><h4 id=\"local\"><a href=\"#local\" class=\"headerlink\" title=\"local\"></a>local</h4><p><code>local</code> 日志驱动 记录从容器的 <code>STOUT/STDERR</code> 的输出，并写到宿主机的磁盘。</p>\n<p>默认情况下，local 日志驱动为每个容器保留 100MB 的日志信息，并启用自动压缩来保存。(经过测试，保留 100MB 的日志是指没有经过压缩的日志)</p>\n<p>local 日志驱动的储存位置 <code>/var/lib/docker/containers/容器id/local-logs/</code> 以 <code>container.log</code> 命名。</p>\n<p><strong>local 驱动支持的选项</strong></p>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>描述</th>\n<th>示例值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>max-size</code></td>\n<td>切割之前日志的最大大小。可取值为 (k,m,g)， 默认为 20m。</td>\n<td><code>--log-opt max-size=10m</code></td>\n</tr>\n<tr>\n<td><code>max-file</code></td>\n<td>可以存在的最大日志文件数。如果超过最大值，则会删除最旧的文件。** 仅在 max-size 设置时有效。默认为 5。</td>\n<td><code>--log-opt max-file=3</code></td>\n</tr>\n<tr>\n<td><code>compress</code></td>\n<td>对应切割日志文件是否启用压缩。默认情况下启用。</td>\n<td><code>--log-opt compress=false</code></td>\n</tr>\n</tbody></table>\n<p><strong>全局日志驱动设置为 —local</strong></p>\n<p>在配置文件 <code>/etc/docker/daemon.json</code>（注意该文件内容是 JSON 格式的）进行配置即可。</p>\n<pre class=\"language-none\"><code class=\"language-none\">{\n  \"log-driver\": \"local\",\n  \"log-opts\": {\n    \"max-size\": \"10m\"\n  }\n}</code></pre>\n\n<p>重启 docker 即可生效。</p>\n<p><strong>单个容器日志驱动设置为 —local</strong></p>\n<p>运行容器并设定为 <code>local</code> 驱动。</p>\n<pre class=\"language-none\"><code class=\"language-none\">#  运行一个容器 ，并设定日志驱动为 local ，并运行命令 ping www.baidu.com\n[root@localhost docker]# docker run  -itd  --log-driver  local  alpine  ping www.baidu.com \n3795b6483534961c1d5223359ad1106433ce2bf25e18b981a47a2d79ad7a3156\n#  查看运行的容器的 日志驱动是否是 local\n[root@localhost docker]# docker inspect  -f '{{.HostConfig.LogConfig.Type}}'   3795b6483534961c\nlocal\n# 查看日志\n[root@localhost local-logs]# tail -f  /var/lib/docker/containers/3795b6483534961c1d5223359ad1106433ce2bf25e18b981a47a2d79ad7a3156/local-logs/container.log \nNNdoutםѰ͕̈:64 bytes from 14.215.177.38: seq=816 ttl=55 time=5.320 ms\nNNdoutهµ͕̈͡:64 bytes from 14.215.177.38: seq=817 ttl=55 time=4.950 ms</code></pre>\n\n<blockquote>\n<p>注意事项： 经过测试，当我们产生了 100 MB 大小的日志时 会有 四个压缩文件和一个 <code>container.log</code>：</p>\n<pre class=\"language-none\"><code class=\"language-none\">[root@localhost local-logs]# ls -l\ntotal 32544\n-rw-r-----. 1 root root 18339944 May 16 09:41 container.log\n-rw-r-----. 1 root root  3698660 May 16 09:41 container.log.1.gz\n-rw-r-----. 1 root root  3726315 May 16 09:41 container.log.2.gz\n-rw-r-----. 1 root root  3805668 May 16 09:41 container.log.3.gz\n-rw-r-----. 1 root root  3744104 May 16 09:41 container.log.4.gz</code></pre>\n\n<p>那么当超过了 100MB 的日志文件，日志文件会继续写入到 <code>container.log</code>，但是会将 <code>container.log</code> 日志中老的日志删除，追加新的，也就是 当写满 100MB 日志后 ，再产生一条新日志，会删除 <code>container.log</code> 中的一条老日志，保存 100MB 的大小。<strong>这个 对我们是会有一些影响的，</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">当我运行系统时 第一天由于bug产生了 100MB 日志，那么之前的日志就已经有 80MB 日志变成的压缩包，所以我在后续的运行中，只能获取最近的 20MB日志。</code></pre>\n</blockquote>\n<h4 id=\"json-file（默认）\"><a href=\"#json-file（默认）\" class=\"headerlink\" title=\"json-file（默认）\"></a>json-file（默认）</h4><p><strong>所有容器默认的日志驱动 json-file</strong>。</p>\n<p><code>json-file</code> 日志驱动 记录从容器的 <code>STOUT/STDERR</code> 的输出 ，用 JSON 的格式写到文件中，日志中不仅包含着 输出日志，还有时间戳和 输出格式。下面是一个 <code>ping www.baidu.com</code> 对应的 JSON 日志</p>\n<pre class=\"language-none\"><code class=\"language-none\">{\"log\":\"64 bytes from 14.215.177.39: seq=34 ttl=55 time=7.067 ms\\r\\n\",\"stream\":\"stdout\",\"time\":\"2019-05-16T14:14:15.030612567Z\"}</code></pre>\n\n<p>json-file 日志的路径位于 <code>/var/lib/docker/containers/container_id/container_id-json.log</code>。</p>\n<p><code>json-file</code> 的 日志驱动支持以下选项：</p>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>描述</th>\n<th>示例值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>max-size</code></td>\n<td>切割之前日志的最大大小。可取值单位为 (k,m,g)， 默认为 - 1（表示无限制）。</td>\n<td><code>--log-opt max-size=10m</code></td>\n</tr>\n<tr>\n<td><code>max-file</code></td>\n<td>可以存在的最大日志文件数。如果切割日志会创建超过阈值的文件数，则会删除最旧的文件。<strong>仅在 max-size 设置时有效。</strong>正整数。默认为 1。</td>\n<td><code>--log-opt max-file=3</code></td>\n</tr>\n<tr>\n<td><code>labels</code></td>\n<td>适用于启动 Docker 守护程序时。此守护程序接受的以逗号分隔的与日志记录相关的标签列表。</td>\n<td><code>--log-opt labels=production_status,geo</code></td>\n</tr>\n<tr>\n<td><code>env</code></td>\n<td>适用于启动 Docker 守护程序时。此守护程序接受的以逗号分隔的与日志记录相关的环境变量列表。</td>\n<td><code>--log-opt env=os,customer</code></td>\n</tr>\n<tr>\n<td><code>env-regex</code></td>\n<td>类似于并兼容 <code>env</code>。用于匹配与日志记录相关的环境变量的正则表达式。</td>\n<td>`--log-opt env-regex=^(os</td>\n</tr>\n<tr>\n<td><code>compress</code></td>\n<td>切割的日志是否进行压缩。默认是 <code>disabled</code>。</td>\n<td><code>--log-opt compress=true</code></td>\n</tr>\n</tbody></table>\n<p><strong>json-file 的日志驱动示例</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\"># 设置 日志驱动为 json-file ，我们也可以不设置，因为默认就是 json-file\ndocker run  -itd  --name  test-log-json  --log-driver json-file   alpine  ping www.baidu.com\n199608b2e2c52136d2a17e539e9ef7fbacf97f1293678aded421dadbdb006a5e\n\n# 查看日志,日志名称就是 容器名称-json.log\ntail -f /var/lib/docker/containers/199608b2e2c52136d2a17e539e9ef7fbacf97f1293678aded421dadbdb006a5e/199608b2e2c52136d2a17e539e9ef7fbacf97f1293678aded421dadbdb006a5e-json.log\n\n{\"log\":\"64 bytes from 14.215.177.39: seq=13 ttl=55 time=15.023 ms\\r\\n\",\"stream\":\"stdout\",\"time\":\"2019-05-16T14:13:54.003118877Z\"}\n{\"log\":\"64 bytes from 14.215.177.39: seq=14 ttl=55 time=9.640 ms\\r\\n\",\"stream\":\"stdout\",\"time\":\"2019-05-16T14:13:54.999011017Z\"}\n{\"log\":\"64 bytes from 14.215.177.39: seq=15 ttl=55 time=8.938 ms\\r\\n\",\"stream\":\"stdout\",\"time\":\"2019-05-16T14:13:55.998612636Z\"}\n{\"log\":\"64 bytes from 14.215.177.39: seq=16 ttl=55 time=18.086 ms\\r\\n\",\"stream\":\"stdout\",\"time\":\"2019-05-16T14:13:57.011235913Z\"}\n{\"log\":\"64 bytes from 14.215.177.39: seq=17 ttl=55 time=12.615 ms\\r\\n\",\"stream\":\"stdout\",\"time\":\"2019-05-16T14:13:58.007104112Z\"}\n{\"log\":\"64 bytes from 14.215.177.39: seq=18 ttl=55 time=11.001 ms\\r\\n\",\"stream\":\"stdout\",\"time\":\"2019-05-16T14:13:59.007559413Z\"}</code></pre>\n\n<h4 id=\"syslog\"><a href=\"#syslog\" class=\"headerlink\" title=\"syslog\"></a>syslog</h4><p>syslog 日志驱动将日志路由到 syslog 服务器，syslog 以原始的字符串作为 日志消息元数据，接收方可以提取以下的消息：</p>\n<ul>\n<li>level 日志等级 ，如 <code>debug</code>，<code>warning</code>，<code>error</code>，<code>info</code>。</li>\n<li>timestamp 时间戳</li>\n<li> hostname 事件发生的主机</li>\n<li> facillty 系统模块</li>\n<li>进程名称和进程 ID</li>\n</ul>\n<p><strong>syslog 日志驱动全局配置</strong></p>\n<p>编辑 <code>/etc/docker/daemon.json</code> 文件</p>\n<pre class=\"language-none\"><code class=\"language-none\">{\n  \"log-driver\": \"syslog\",\n  \"log-opts\": {\n    \"syslog-address\": \"udp://1.2.3.4:1111\"\n  }\n}</code></pre>\n\n<p>重启 docker 即可生效。</p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Description</th>\n<th>Example value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>syslog-address</code></td>\n<td>指定 syslog 服务所在的服务器和使用的协议和端口。 格式：`[tcp</td>\n<td>udp</td>\n</tr>\n<tr>\n<td><code>syslog-facility</code></td>\n<td>使用的 <code>syslog</code> 的设备， 具体设备名称见 <span class=\"exturl\" data-url=\"aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzU0MjQjc2VjdGlvbi02LjIuMQ==\">syslog documentation<i class=\"fa fa-external-link-alt\"></i></span>.</td>\n<td><code>--log-opt syslog-facility=daemon</code></td>\n</tr>\n<tr>\n<td><code>syslog-tls-ca-cert</code></td>\n<td>如果使用的是 <code>tcp+tls</code> 的地址，指定 CA 证书的地址，如果没有使用，则不设置该选项。</td>\n<td><code>--log-opt syslog-tls-ca-cert=/etc/ca-certificates/custom/ca.pem</code></td>\n</tr>\n<tr>\n<td><code>syslog-tls-cert</code></td>\n<td>如果使用的是 <code>tcp+tls</code> 的地址，指定 TLS 证书的地址，如果没有使用，则不设置该选项。</td>\n<td><code>--log-opt syslog-tls-cert=/etc/ca-certificates/custom/cert.pem</code></td>\n</tr>\n<tr>\n<td><code>syslog-tls-key</code></td>\n<td>如果使用的是 <code>tcp+tls</code> 的地址，指定 TLS 证书 key 的地址，如果没有使用，则不设置该选项。**</td>\n<td><code>--log-opt syslog-tls-key=/etc/ca-certificates/custom/key.pem</code></td>\n</tr>\n<tr>\n<td><code>syslog-tls-skip-verify</code></td>\n<td>如果设置为 true ，会跳过 TLS 验证，默认为 false</td>\n<td><code>--log-opt syslog-tls-skip-verify=true</code></td>\n</tr>\n<tr>\n<td><code>tag</code></td>\n<td>将应用程序的名称附加到 <code>syslog</code> 消息中，默认情况下使用容器 ID 的前 12 位去 标记这个日志信息。</td>\n<td><code>--log-opt tag=mailer</code></td>\n</tr>\n<tr>\n<td><code>syslog-format</code></td>\n<td><code>syslog</code> 使用的消息格式 如果未指定则使用本地 UNIX syslog 格式，rfc5424micro 格式具有微妙时间戳。</td>\n<td><code>--log-opt syslog-format=rfc5424micro</code></td>\n</tr>\n<tr>\n<td><code>labels</code></td>\n<td>启动 docker 时，配置与日志相关的标签，以逗号分割</td>\n<td><code>--log-opt labels=production_status,geo</code></td>\n</tr>\n<tr>\n<td><code>env</code></td>\n<td>启动 docker 时，指定环境变量用于日志中，以逗号分隔</td>\n<td><code>--log-opt env=os,customer</code></td>\n</tr>\n<tr>\n<td><code>env-regex</code></td>\n<td>类似并兼容 <code>env</code>，</td>\n<td>`--log-opt env-regex=^(os</td>\n</tr>\n</tbody></table>\n<p>** 单个容器日志驱动设置为 —syslog **</p>\n<p><code>Linux</code> 系统中 我们用的系统日志模块时 <code>rsyslog</code> ，它是基于 <code>syslog</code> 的标准实现。我们要使用 syslog 驱动需要使用 系统自带的 <code>rsyslog</code> 服务。</p>\n<pre class=\"language-none\"><code class=\"language-none\"># 查看当前 rsyslog 版本和基本信息\n[root@localhost harbor]# rsyslogd  -v\nrsyslogd 8.24.0, compiled with:\n\tPLATFORM:\t\t\t\tx86_64-redhat-linux-gnu\n\tPLATFORM (lsb_release -d):\t\t\n\tFEATURE_REGEXP:\t\t\t\tYes\n\tGSSAPI Kerberos 5 support:\t\tYes\n\tFEATURE_DEBUG (debug build, slow code):\tNo\n\t32bit Atomic operations supported:\tYes\n\t64bit Atomic operations supported:\tYes\n\tmemory allocator:\t\t\tsystem default\n\tRuntime Instrumentation (slow code):\tNo\n\tuuid support:\t\t\t\tYes\n\tNumber of Bits in RainerScript integers: 64\n\nSee http://www.rsyslog.com for more information.</code></pre>\n\n<p>配置 syslog , 在配置文件 <code>/etc/rsyslog.conf</code> 大约 14-20 行，我们可以看到两个配置，一个 udp，一个 tcp ，都是监听 514 端口，提供 syslog 的接收。选择 tcp 就将 tcp 的两个配置的前面 # 号注释即可。</p>\n<pre class=\"language-none\"><code class=\"language-none\"># Provides UDP syslog reception\n#$ModLoad imudp\n#$UDPServerRun 514\n\n# Provides TCP syslog reception\n#$ModLoad imtcp  \n#$InputTCPServerRun 514</code></pre>\n\n<p>然后重启 rsyslog，我们可以看到 514 端口在监听。</p>\n<pre class=\"language-none\"><code class=\"language-none\">systemctl restart  rsyslog\n[root@localhost harbor]# netstat -ntul |grep 514\ntcp        0      0 0.0.0.0:514             0.0.0.0:*               LISTEN     \ntcp6       0      0 :::514                  :::*                    LISTEN  </code></pre>\n\n<p>启动一个以 <code>syslog</code> 为驱动的容器。</p>\n<pre class=\"language-none\"><code class=\"language-none\">docker  run -d -it  -p 87:80 --log-driver syslog --log-opt syslog-address=tcp://127.0.0.1:514  --name nginx-syslog   nginx</code></pre>\n\n<p>访问并查看日志</p>\n<pre class=\"language-none\"><code class=\"language-none\"># 访问nginx\ncurl 127.0.0.1:87\n# 查看访问日志\ntail -f  /var/log/messages\nMay 17 15:56:48 localhost fe18924aefde[6141]: 172.17.0.1 - - [17/May/2019:07:56:48 +0000] \"GET / HTTP/1.1\" 200 612 \"-\" \"curl/7.29.0\" \"-\"#015\nMay 17 15:58:16 localhost fe18924aefde[6141]: 172.17.0.1 - - [17/May/2019:07:58:16 +0000] \"GET / HTTP/1.1\" 200 612 \"-\" \"curl/7.29.0\" \"-\"#015</code></pre>\n\n<h4 id=\"Journald\"><a href=\"#Journald\" class=\"headerlink\" title=\"Journald\"></a>Journald</h4><p><code>journald</code> 日志驱动程序将容器的日志发送到 <code>systemd journal</code>, 可以使用 <code>journal API</code> 或者使用 <code>docker logs</code> 来查日志。</p>\n<p>除了日志本身以外， <code>journald</code> 日志驱动还会在日志加上下面的数据与消息一起储存。</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>CONTAINER_ID</code></td>\n<td>容器 ID, 为 12 个字符</td>\n</tr>\n<tr>\n<td><code>CONTAINER_ID_FULL</code></td>\n<td>完整的容器 ID，为 64 个字符</td>\n</tr>\n<tr>\n<td><code>CONTAINER_NAME</code></td>\n<td>启动时容器的名称，如果容器后面更改了名称，日志中的名称不会更改。</td>\n</tr>\n<tr>\n<td><code>CONTAINER_TAG</code>, <code>SYSLOG_IDENTIFIER</code></td>\n<td>容器的 tag.</td>\n</tr>\n<tr>\n<td><code>CONTAINER_PARTIAL_MESSAGE</code></td>\n<td>当日志比较长的时候使用标记来表示 (显示日志的大小)</td>\n</tr>\n</tbody></table>\n<p>选项</p>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>是否必须</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>tag</code></td>\n<td>可选的</td>\n<td>指定要在日志中设置 <code>CONTAINER_TAG</code> 和 <code>SYSLOG_IDENTIFIER</code> 值的模板。</td>\n</tr>\n<tr>\n<td><code>labels</code></td>\n<td>可选的</td>\n<td>以逗号分隔的标签列表，如果为容器指定了这些标签，则应包含在消息中。</td>\n</tr>\n<tr>\n<td><code>env</code></td>\n<td>可选的</td>\n<td>如果为容器指定了这些变量，则以逗号分隔的环境变量键列表（应包含在消息中）。</td>\n</tr>\n<tr>\n<td><code>env-regex</code></td>\n<td>可选的</td>\n<td>与 env 类似并兼容。用于匹配与日志记录相关的环境变量的正则表达式 。</td>\n</tr>\n</tbody></table>\n<p><strong>journald 日志驱动全局配置</strong></p>\n<p>编辑 <code>/etc/docker/daemon.json</code> 文件</p>\n<pre class=\"language-none\"><code class=\"language-none\">{\n  \"log-driver\": \"journald\"\n}</code></pre>\n\n<p><strong>单个容器日志驱动设置为 —journald</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">docker  run  -d -it --log-driver=journald \\\n    --log-opt labels=location \\\n    --log-opt env=TEST \\\n    --env \"TEST=false\" \\\n    --label location=china \\\n    --name  nginx-journald\\\n    -p 80:80\\\n    nginx</code></pre>\n\n<p>查看日志 <code>journalctl</code></p>\n<pre class=\"language-none\"><code class=\"language-none\"># 只查询指定容器的相关消息\n journalctl CONTAINER_NAME=webserver\n# -b 指定从上次启动以来的所有消息\n journalctl -b CONTAINER_NAME=webserver\n# -o 指定日志消息格式，-o json 表示以json 格式返回日志消息\n journalctl -o json CONTAINER_NAME=webserver\n# -f 一直捕获日志输出\n journalctl -f CONTAINER_NAME=webserver</code></pre>\n\n<blockquote>\n<p>如果我们的容器在启动的时候加了 -t 参数，启用了 TTY 的话，那么我查看日志是会像下面一样</p>\n<pre class=\"language-none\"><code class=\"language-none\">May 17 17:19:26 localhost.localdomain 2a338e4631fe[6141]: [104B blob data]\nMay 17 17:19:32 localhost.localdomain 2a338e4631fe[6141]: [104B blob data]</code></pre>\n\n<p>显示 <code>[104B blob data]</code> 而不是完整日志原因是因为有 <code>\\r</code> 的存在，如果我们要完整显示，需要加上参数 <code>--all</code> 。</p>\n</blockquote>\n<h3 id=\"生产环境中储存容器日志\"><a href=\"#生产环境中储存容器日志\" class=\"headerlink\" title=\"生产环境中储存容器日志\"></a>生产环境中储存容器日志</h3><p>我们在上面看到了 Docker 官方提供了 很多日志驱动，但是上面的这些驱动都是针对的 标准输出的日志驱动。</p>\n<h4 id=\"容器日志分类\"><a href=\"#容器日志分类\" class=\"headerlink\" title=\"容器日志分类\"></a>容器日志分类</h4><p>容器的日志实际是有两大类的：</p>\n<ul>\n<li><strong>标准输出的</strong> ，也就是 STDOUT 、STDERR , <strong>这类日志我们可以通过 Docker 官方的日志驱动进行收集。</strong></li>\n</ul>\n<p>示例：Nginx 日志，Nginx 日志有 <code>access.log</code> 和 <code>error.log</code> ，我们在 Docker Hub 上可以看到 Nginx 的 dockerfile 对于这两个日志的处理是：</p>\n<pre class=\"language-none\"><code class=\"language-none\">RUN ln -sf /dev/stdout /var/log/nginx/access.log \\\n\t&amp;&amp; ln -sf /dev/stderr /var/log/nginx/error.log</code></pre>\n\n<p>都软连接到 <code>/dev/stdout</code> 和 <code>/dev/stderr</code> ，也就是标准输出，所以这类 容器是可以使用 Docker 官方的日志驱动。</p>\n<ul>\n<li><p><strong>文本日志</strong>，存在在于容器内部，并没有重定向到 容器的标准输出的日志。</p>\n<p>示例： Tomcat 日志，Tomcat 有 catalina、localhost、manager、admin、host-manager，我们可以在 Docker Hub 看到 Tomcat 的 dockerfile 只有对于 catalina 进行处理，其它日志将储存在容器里。</p>\n<pre class=\"language-none\"><code class=\"language-none\">CMD [\"catalina.sh\", \"run\"]</code></pre>\n\n<p>我们运行了一个 Tomcat 容器 ，然后进行访问后，并登陆到容器内部，我们可以看到产生了文本日志：</p>\n<pre class=\"language-none\"><code class=\"language-none\">root@25ba00fdab97:/usr/local/tomcat/logs# ls -l\ntotal 16\n-rw-r-----. 1 root root 6822 May 17 14:36 catalina.2019-05-17.log\n-rw-r-----. 1 root root    0 May 17 14:36 host-manager.2019-05-17.log\n-rw-r-----. 1 root root  459 May 17 14:36 localhost.2019-05-17.log\n-rw-r-----. 1 root root 1017 May 17 14:37 localhost_access_log.2019-05-17.txt\n-rw-r-----. 1 root root    0 May 17 14:36 manager.2019-05-17.log</code></pre>\n\n<p>这类容器我们下面有专门的方案来应对。</p>\n</li>\n</ul>\n<h4 id=\"标准输出的存储\"><a href=\"#标准输出的存储\" class=\"headerlink\" title=\"标准输出的存储\"></a>标准输出的存储</h4><p>当是完全是标准输出的类型的容器，我们可以选择 json-file 、syslog、local 等 Docker 支持的日志驱动。</p>\n<h4 id=\"文本日志的存储\"><a href=\"#文本日志的存储\" class=\"headerlink\" title=\"文本日志的存储\"></a>文本日志的存储</h4><p>当有文件文本日志的类型容器</p>\n<h5 id=\"挂载目录-bind\"><a href=\"#挂载目录-bind\" class=\"headerlink\" title=\"挂载目录 bind\"></a>挂载目录 bind</h5><p>创建一个目录，将目录挂载到 容器中产生日志的目录。</p>\n<pre class=\"language-none\"><code class=\"language-none\">--mount  type=bind,src=/opt/logs/,dst=/usr/local/tomcat/logs/ </code></pre>\n\n<p>示例：</p>\n<pre class=\"language-none\"><code class=\"language-none\"># 创建挂载目录/opt/logs\n[root@fy-local-2 /]# mkdir  /opt/logs\n# 创建容器tomcat-bind 并将 /opt/logs 挂载至 /usr/local/tomcat/logs/\n[root@fy-local-2 /]# docker  run -d  --name  tomcat-bind  -P  --mount  type=bind,src=/opt/logs/,dst=/usr/local/tomcat/logs/   tomcat \n[root@fy-local-2 /]# ls -l /opt/logs/\ntotal 12\n-rw-r----- 1 root root 6820 May 22 17:31 catalina.2019-05-22.log\n-rw-r----- 1 root root    0 May 22 17:31 host-manager.2019-05-22.log\n-rw-r----- 1 root root  459 May 22 17:31 localhost.2019-05-22.log\n-rw-r----- 1 root root    0 May 22 17:31 localhost_access_log.2019-05-22.txt\n-rw-r----- 1 root root    0 May 22 17:31 manager.2019-05-22.log</code></pre>\n\n<h5 id=\"使用数据卷-volume\"><a href=\"#使用数据卷-volume\" class=\"headerlink\" title=\"使用数据卷 volume\"></a>使用数据卷 volume</h5><p>创建数据卷，创建容器时绑定数据卷，</p>\n<pre class=\"language-none\"><code class=\"language-none\">--mount  type=volume  src=volume_name  dst=/usr/local/tomcat/logs/ </code></pre>\n\n<p>示例：</p>\n<pre class=\"language-none\"><code class=\"language-none\"># 创建tomcat应用数据卷名称为 tomcat\n[root@fy-local-2 /]# docker volume  create  tomcat\n# 创建容器tomcat-volume 并指定数据卷为 tomcat，绑定至 /usr/local/tomcat/logs/\n[root@fy-local-2 /]# docker  run -d  --name  tomcat-volume   -P  --mount  type=volume,src=tomcat,dst=/usr/local/tomcat/logs/   tomcat\n# 查看数据卷里面的内容\n[root@fy-local-2 /]# ls -l /var/lib/docker/volumes/tomcat/_data/\ntotal 12\n-rw-r----- 1 root root 6820 May 22 17:33 catalina.2019-05-22.log\n-rw-r----- 1 root root    0 May 22 17:33 host-manager.2019-05-22.log\n-rw-r----- 1 root root  459 May 22 17:33 localhost.2019-05-22.log\n-rw-r----- 1 root root    0 May 22 17:33 localhost_access_log.2019-05-22.txt\n-rw-r----- 1 root root    0 May 22 17:33 manager.2019-05-22.log</code></pre>\n\n<h5 id=\"计算容器-rootfs-挂载点\"><a href=\"#计算容器-rootfs-挂载点\" class=\"headerlink\" title=\"计算容器 rootfs 挂载点\"></a>计算容器 rootfs 挂载点</h5><p>此方案的文字内容摘抄于 <span class=\"exturl\" data-url=\"aHR0cHM6Ly95cS5hbGl5dW4uY29tL2FydGljbGVzLzY3MjA1NA==\">https://yq.aliyun.com/articles/672054<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>使用挂载宿主机目录的方式采集日志对应用会有一定的侵入性，因为它要求容器启动的时候包含挂载命令。如果采集过程能对用户透明那就太棒了。事实上，可以通过计算容器 rootfs 挂载点来达到这种目的。</p>\n<p>和容器 rootfs 挂载点密不可分的一个概念是 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vc3RvcmFnZS9zdG9yYWdlZHJpdmVyLw==\">storage driver<i class=\"fa fa-external-link-alt\"></i></span>。实际使用过程中，用户往往会根据 linux 版本、文件系统类型、容器读写情况等因素选择合适的 storage driver。不同 storage driver 下，容器的 rootfs 挂载点遵循一定规律，因此我们可以根据 storage driver 的类型推断出容器的 rootfs 挂载点，进而采集容器内部日志。下表展示了部分 storage dirver 的 rootfs 挂载点及其计算方法。</p>\n<table>\n<thead>\n<tr>\n<th>Storage driver</th>\n<th>rootfs 挂载点</th>\n<th>计算方法</th>\n</tr>\n</thead>\n<tbody><tr>\n<td> aufs</td>\n<td>/var/lib/docker/aufs/mnt/</td>\n<td>id 可以从如下文件读到。 <code>/var/lib/docker/image/aufs/layerdb/mounts/&lt;container-id&gt;/mount-id</code></td>\n</tr>\n<tr>\n<td>overlay</td>\n<td>/var/lib/docker/overlay//merged</td>\n<td> 完整路径可以通过如下命令得到。 <code>docker inspect -f '{{.GraphDriver.Data.MergedDir}}' &lt;container-id&gt;</code></td>\n</tr>\n<tr>\n<td>overlay2</td>\n<td>/var/lib/docker/overlay2//merged</td>\n<td> 完整路径可以通过如下命令得到。 <code>docker inspect -f '{{.GraphDriver.Data.MergedDir}}' &lt;container-id&gt;</code></td>\n</tr>\n<tr>\n<td>devicemapper</td>\n<td>/var/lib/docker/devicemapper/mnt//rootfs</td>\n<td>id 可以通过如下命令得到。 <code>docker inspect -f '{{.GraphDriver.Data.DeviceName}}' &lt;container-id&gt;</code></td>\n</tr>\n</tbody></table>\n<p>示例：</p>\n<pre class=\"language-none\"><code class=\"language-none\"># 创建容器 tomcat-test\n[root@fy-local-2 /]# docker  run -d  --name  tomcat-test  -P  tomcat\n36510dd653ae7dcac1d017174b1c38b3f9a226f9c4e329d0ff656cfe041939ff  \n# 查看tomcat-test 容器的 挂载点位置\n[root@fy-local-2 /]# docker inspect -f '{{.GraphDriver.Data.MergedDir}}' 36510dd653ae7dcac1d017174b1c38b3f9a226f9c4e329d0ff656cfe041939ff  \n/var/lib/docker/overlay2/c10ec54bab8f3fccd2c5f1a305df6f3b1e53068776363ab0c104d253216b799d/merged\n# 查看挂载点的目录结构\n[root@fy-local-2 /]# ls -l /var/lib/docker/overlay2/c10ec54bab8f3fccd2c5f1a305df6f3b1e53068776363ab0c104d253216b799d/merged\ntotal 4\ndrwxr-xr-x 1 root root  179 May  8 13:05 bin\ndrwxr-xr-x 2 root root    6 Mar 28 17:12 boot\ndrwxr-xr-x 1 root root   43 May 22 17:27 dev\nlrwxrwxrwx 1 root root   33 May  8 13:08 docker-java-home -&gt; /usr/lib/jvm/java-8-openjdk-amd64\ndrwxr-xr-x 1 root root   66 May 22 17:27 etc\ndrwxr-xr-x 2 root root    6 Mar 28 17:12 home\ndrwxr-xr-x 1 root root    6 May 16 08:50 lib\ndrwxr-xr-x 2 root root   34 May  6 08:00 lib64\ndrwxr-xr-x 2 root root    6 May  6 08:00 media\ndrwxr-xr-x 2 root root    6 May  6 08:00 mnt\ndrwxr-xr-x 2 root root    6 May  6 08:00 opt\ndrwxr-xr-x 2 root root    6 Mar 28 17:12 proc\ndrwx------ 1 root root   27 May 22 17:29 root\ndrwxr-xr-x 3 root root   30 May  6 08:00 run\ndrwxr-xr-x 2 root root 4096 May  6 08:00 sbin\ndrwxr-xr-x 2 root root    6 May  6 08:00 srv\ndrwxr-xr-x 2 root root    6 Mar 28 17:12 sys\ndrwxrwxrwt 1 root root   29 May 16 08:50 tmp\ndrwxr-xr-x 1 root root   19 May  6 08:00 usr\ndrwxr-xr-x 1 root root   41 May  6 08:00 var\n# 查看日志\n[root@fy-local-2 /]# ls -l /var/lib/docker/overlay2/c10ec54bab8f3fccd2c5f1a305df6f3b1e53068776363ab0c104d253216b799d/merged/usr/local/tomcat/logs/\ntotal 20\n-rw-r----- 1 root root 14514 May 22 17:40 catalina.2019-05-22.log\n-rw-r----- 1 root root     0 May 22 17:27 host-manager.2019-05-22.log\n-rw-r----- 1 root root  1194 May 22 17:40 localhost.2019-05-22.log\n-rw-r----- 1 root root     0 May 22 17:27 localhost_access_log.2019-05-22.txt\n-rw-r----- 1 root root     0 May 22 17:27 manager.2019-05-22.log</code></pre>\n\n<h5 id=\"将日志写入kafka\"><a href=\"#将日志写入kafka\" class=\"headerlink\" title=\"将日志写入kafka\"></a>将日志写入 kafka</h5><p>docker -&gt; kafka -&gt; Logstash -&gt; Elasticsearch</p>\n<p>通过代码层面，直接将日志写入 <code>kafka</code>, 最后写入 <code>Elasticsearch</code>。</p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vb3BlcmF0aW9uaG9tZS9wLzEwOTA3NTkxLmh0bWw=\">https://www.cnblogs.com/operationhome/p/10907591.html<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n","categories":["Container","Docker"],"tags":["HTML","Docker"]},{"title":"Google 工具类 Guava 的基本使用","url":"/2020/10/2020-10-22-Google%E5%B7%A5%E5%85%B7%E7%B1%BBGuava%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/","content":"<h3 id=\"Guava-介绍\"><a href=\"#Guava-介绍\" class=\"headerlink\" title=\"Guava 介绍\"></a>Guava 介绍</h3><p>Guava 是一种基于开源的 Java 库，其中包含谷歌正在由他们很多项目使用的很多核心库。这个库是为了方便编码，并减少编码错误。这个库提供用于集合，缓存，支持原语，并发性，常见注解，字符串处理，I/O 和验证的实用方法。</p>\n<a id=\"more\"></a>\n\n<h4 id=\"Guava-优点\"><a href=\"#Guava-优点\" class=\"headerlink\" title=\"Guava 优点\"></a>Guava 优点</h4><ul>\n<li>标准化 - Guava 库是由谷歌托管。</li>\n<li>高效 - 可靠，快速和有效的扩展 JAVA 标准库</li>\n<li>优化 -Guava 库经过高度的优化。</li>\n<li>函数式编程 - 增加 JAVA 功能和处理能力。</li>\n<li>实用程序 - 提供了经常需要在应用程序开发的许多实用程序类。</li>\n<li>验证 - 提供标准的故障安全验证机制。</li>\n<li>最佳实践 - 强调最佳的做法。</li>\n</ul>\n<h4 id=\"Guava-链接\"><a href=\"#Guava-链接\" class=\"headerlink\" title=\"Guava 链接\"></a>Guava 链接</h4><ul>\n<li>GitHub：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZS9ndWF2YQ==\">https://github.com/google/guava<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li> 官网：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ndWF2YS5kZXYv\">https://guava.dev/<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<h4 id=\"Guava-引入\"><a href=\"#Guava-引入\" class=\"headerlink\" title=\"Guava 引入\"></a>Guava 引入</h4><pre class=\"language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>com.google.guava<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>guava<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>30.0-jre<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n\n<h3 id=\"Guava-集合工具\"><a href=\"#Guava-集合工具\" class=\"headerlink\" title=\"Guava 集合工具\"></a>Guava 集合工具</h3><ul>\n<li><strong><code>Multiset</code></strong><br>一个扩展来设置界面，允许重复的元素。</li>\n<li><strong><code>Multimap</code></strong><br>一个扩展来映射接口，以便其键可一次被映射到多个值</li>\n<li><strong><code>BiMap</code></strong><br>一个扩展来映射接口，支持反向操作。</li>\n<li><strong><code>Table</code></strong><br>表代表一个特殊的图，其中两个键可以在组合的方式被指定为单个值。</li>\n</ul>\n<h3 id=\"Guava-缓存工具\"><a href=\"#Guava-缓存工具\" class=\"headerlink\" title=\"Guava 缓存工具\"></a>Guava 缓存工具</h3><ul>\n<li><p><strong><code>LoadingCache</code></strong></p>\n<p>LoadingCache 提供了一个非常强大的基于内存的 LoadingCache&lt;K，V&gt;。</p>\n<p>在缓存中自动加载值，它提供了许多实用的方法，在有缓存需求时非常有用。</p>\n</li>\n</ul>\n<h3 id=\"Guava-字符串工具\"><a href=\"#Guava-字符串工具\" class=\"headerlink\" title=\"Guava 字符串工具\"></a>Guava 字符串工具</h3><ul>\n<li><p><strong><code>Joiner</code></strong><br>实用加入对象，字符串等。</p>\n</li>\n<li><p><strong><code>Spilter</code></strong><br>实用程序用来分割字符串。</p>\n</li>\n<li><p><strong><code>CharMatcher</code></strong><br>实用的字符操作。</p>\n</li>\n<li><p><strong><code>CaseFormat</code></strong><br>实用程序，用于改变字符串格式。</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">CaseFormat</span><span class=\"token punctuation\">.</span>LOWER_HYPHEN<span class=\"token punctuation\">.</span><span class=\"token keyword\">to</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CaseFormat</span><span class=\"token punctuation\">.</span>LOWER_CAMEL<span class=\"token punctuation\">,</span> <span class=\"token string\">\"test-data\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// testData</span>\n<span class=\"token class-name\">CaseFormat</span><span class=\"token punctuation\">.</span>LOWER_UNDERSCORE<span class=\"token punctuation\">.</span><span class=\"token keyword\">to</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CaseFormat</span><span class=\"token punctuation\">.</span>LOWER_CAMEL<span class=\"token punctuation\">,</span> <span class=\"token string\">\"test_data\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// testData</span>\n<span class=\"token class-name\">CaseFormat</span><span class=\"token punctuation\">.</span>UPPER_UNDERSCORE<span class=\"token punctuation\">.</span><span class=\"token keyword\">to</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CaseFormat</span><span class=\"token punctuation\">.</span>UPPER_CAMEL<span class=\"token punctuation\">,</span> <span class=\"token string\">\"test_data\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// TestData</span></code></pre>\n\n</li>\n</ul>\n<h3 id=\"Guava-原语工具\"><a href=\"#Guava-原语工具\" class=\"headerlink\" title=\"Guava 原语工具\"></a>Guava 原语工具</h3><p>作为 Java 的原语类型，不能用来传递在泛型或于类别作为输入。Guava 提供大量包装工具类来处理原始类型的对象。</p>\n<p>以下是有用的原始处理工具的列表：</p>\n<ul>\n<li><strong><code>Bytes</code></strong><br>实用程序的原始字节。</li>\n<li><strong><code>Shorts</code></strong><br>实用的原始 short。</li>\n<li><strong><code>Ints</code></strong><br>实用为基本整型。</li>\n<li><strong><code>Longs</code></strong><br>实用的原始长整型。</li>\n<li><strong><code>Floats</code></strong><br>实用为基本 float。</li>\n<li><strong><code>Doubles</code></strong><br>实用为基本的 double。</li>\n<li><strong><code>Chars</code></strong><br>实用的原始字符。</li>\n<li><strong><code>Booleans</code></strong><br>实用为基本布尔。</li>\n</ul>\n<h3 id=\"Guava-数学工具\"><a href=\"#Guava-数学工具\" class=\"headerlink\" title=\"Guava 数学工具\"></a>Guava 数学工具</h3><ul>\n<li><p><strong><code>IntMath</code></strong><br>数学工具为 int 类型。</p>\n</li>\n<li><p><strong><code>LongMath</code></strong><br>数学工具为 long 类型。</p>\n</li>\n<li><p><strong><code>BigIntegerMath</code></strong><br>数学实用程序处理 BigInteger。</p>\n</li>\n</ul>\n<h3 id=\"Guava-其他类库\"><a href=\"#Guava-其他类库\" class=\"headerlink\" title=\"Guava 其他类库\"></a>Guava 其他类库</h3><h4 id=\"Optional\"><a href=\"#Optional\" class=\"headerlink\" title=\"Optional\"></a>Optional</h4><p>Optional 用于包含非空对象的不可变对象。 Optional 对象，用于不存在值表示 null。这个类有各种实用的方法，以方便代码来处理为可用或不可用，而不是检查 null 值。</p>\n<ul>\n<li><strong><code>static &lt;T&gt; Optional&lt;T&gt; absent()</code></strong><br>返回没有包含的参考 Optional 的实例。</li>\n<li><strong><code>abstract Set&lt;T&gt; asSet()</code></strong><br>返回一个不可变的单集的唯一元素所包含的实例 (如果存在); 否则为一个空的不可变的集合。</li>\n<li><strong><code>abstract boolean equals(Object object)</code></strong><br>返回 true 如果对象是一个 Optional 实例，无论是包含引用彼此相等或两者都不存在。</li>\n<li><strong><code>static &lt;T&gt; Optional&lt;T&gt; fromNullable(T nullableReference)</code></strong><br>如果 nullableReference 非空，返回一个包含引用 Optional 实例；否则返回 absent ()。</li>\n<li><strong><code>abstract T get()</code></strong><br>返回所包含的实例，它必须存在。</li>\n<li><strong><code>abstract int hashCode()</code></strong><br>返回此实例的哈希码。</li>\n<li><strong><code>abstract boolean isPresent()</code></strong><br>返回 true，如果这支架包含一个 (非空) 的实例。</li>\n<li><strong><code>static &lt;T&gt; Optional&lt;T&gt; of(T reference)</code></strong><br>返回包含给定的非空引用 Optional 实例。</li>\n<li><strong><code>abstract Optional&lt;T&gt; or(Optional&lt;? extends T&gt; secondChoice)</code></strong><br>返回此 Optional，如果它有一个值存在；否则返回 secondChoice。</li>\n<li><strong><code>abstract T or(Supplier&lt;? extends T&gt; supplier)</code></strong><br>返回所包含的实例 (如果存在); 否则 supplier.get ()。</li>\n<li><strong><code>abstract T or(T defaultValue)</code></strong><br>返回所包含的实例 (如果存在); 否则为默认值。</li>\n<li><strong><code>abstract T orNull()</code></strong><br>返回所包含的实例 (如果存在); 否则返回 null。</li>\n<li><strong><code>static &lt;T&gt; Iterable&lt;T&gt; presentInstances(Iterable&lt;? extends Optional&lt;? extends T&gt;&gt; optionals)</code></strong><br>从提供的 optionals 返回每个实例的存在的值，从而跳过 absent ()。</li>\n<li><strong><code>abstract String toString()</code></strong><br>返回此实例的字符串表示。</li>\n<li><strong><code>abstract &lt;V&gt; Optional&lt;V&gt; transform(Function&lt;? super T,V&gt; function)</code></strong><br>如果实例存在，则它被转换给定的功能；否则 absent () 被返回。</li>\n</ul>\n<p>示例代码：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token class-name\">OptionalDemo</span> guavaTester <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OptionalDemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">Integer</span> value1 <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">Integer</span> value2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> a <span class=\"token operator\">=</span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">fromNullable</span><span class=\"token punctuation\">(</span>value1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> b <span class=\"token operator\">=</span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>value2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>guavaTester<span class=\"token punctuation\">.</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 10</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">Integer</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> a<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"First parameter is present: \"</span> <span class=\"token operator\">+</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">isPresent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Second parameter is present: \"</span> <span class=\"token operator\">+</span> b<span class=\"token punctuation\">.</span><span class=\"token function\">isPresent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n\t<span class=\"token class-name\">Integer</span> value1 <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">or</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">Integer</span> value2 <span class=\"token operator\">=</span> b<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> value1 <span class=\"token operator\">+</span> value2<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<h4 id=\"Preconditions\"><a href=\"#Preconditions\" class=\"headerlink\" title=\"Preconditions\"></a>Preconditions</h4><p>Preconditions 提供静态方法来检查方法或构造函数，被调用是否给定适当的参数。它检查的先决条件。其方法失败抛出 IllegalArgumentException。</p>\n<ul>\n<li><strong><code>static void checkArgument(boolean expression)</code></strong><br>确保涉及的一个或多个参数来调用方法表达式的真相。</li>\n<li><strong><code>static void checkArgument(boolean expression, Object errorMessage)</code></strong><br>确保涉及的一个或多个参数来调用方法表达式的真相。</li>\n<li><strong><code>static void checkArgument(boolean expression, String errorMessageTemplate, Object... errorMessageArgs)</code></strong><br>确保涉及的一个或多个参数来调用方法表达式的真相。</li>\n<li><strong><code>static int checkElementIndex(int index, int size)</code></strong><br>确保索引指定一个数组，列表或尺寸大小的字符串有效的元素。</li>\n<li><strong><code>static int checkElementIndex(int index, int size, String desc)</code></strong><br>确保索引指定一个数组，列表或尺寸大小的字符串有效的元素。</li>\n<li><strong><code>static &lt;T&gt; T checkNotNull(T reference)</code></strong><br>确保对象引用作为参数传递给调用方法不为空。</li>\n<li><strong><code>static &lt;T&gt; T checkNotNull(T reference, Object errorMessage)</code></strong><br>确保对象引用作为参数传递给调用方法不为空。</li>\n<li><strong><code>static &lt;T&gt; T checkNotNull(T reference, String errorMessageTemplate, Object... errorMessageArgs)</code></strong><br>确保对象引用作为参数传递给调用方法不为空。</li>\n<li><strong><code>static int checkPositionIndex(int index, int size)</code></strong><br>确保索引指定一个数组，列表或尺寸大小的字符串的有效位置。</li>\n<li><strong><code>static int checkPositionIndex(int index, int size, String desc)</code></strong><br>确保索引指定一个数组，列表或尺寸大小的字符串的有效位置。</li>\n<li><strong><code>static void checkPositionIndexes(int start, int end, int size)</code></strong><br>确保开始和结束指定数组，列表或字符串大小有效的位置，并按照顺序。</li>\n<li><strong><code>static void checkState(boolean expression)</code></strong><br>确保涉及调用实例的状态，但不涉及任何参数来调用方法表达式的真相。</li>\n<li><strong><code>static void checkState(boolean expression, Object errorMessage)</code></strong><br>确保涉及调用实例的状态，但不涉及任何参数来调用方法表达式的真相。</li>\n<li><strong><code>static void checkState(boolean expression, String errorMessageTemplate, Object... errorMessageArgs)</code></strong><br>确保涉及调用实例的状态，但不涉及任何参数来调用方法表达式的真相。</li>\n</ul>\n<p>示例代码：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token class-name\">PreconditionsDemo</span> guavaTester <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PreconditionsDemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>guavaTester<span class=\"token punctuation\">.</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">3.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Negative value -3.0.</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IllegalArgumentException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>guavaTester<span class=\"token punctuation\">.</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">NullPointerException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// First parameter is Null.</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>guavaTester<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IndexOutOfBoundsException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Invalid index. (6) must be less than size (5)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> input<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IllegalArgumentException</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token class-name\">Preconditions</span><span class=\"token punctuation\">.</span><span class=\"token function\">checkArgument</span><span class=\"token punctuation\">(</span>input <span class=\"token operator\">&gt;</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Negative value %s.\"</span><span class=\"token punctuation\">,</span> input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> a<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\ta <span class=\"token operator\">=</span> <span class=\"token class-name\">Preconditions</span><span class=\"token punctuation\">.</span><span class=\"token function\">checkNotNull</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token string\">\"First parameter is Null.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tb <span class=\"token operator\">=</span> <span class=\"token class-name\">Preconditions</span><span class=\"token punctuation\">.</span><span class=\"token function\">checkNotNull</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Second parameter is Null.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> input<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">Preconditions</span><span class=\"token punctuation\">.</span><span class=\"token function\">checkElementIndex</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Invalid index.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<h4 id=\"Ordering\"><a href=\"#Ordering\" class=\"headerlink\" title=\"Ordering\"></a>Ordering</h4><p>Ordering (排序) 可以被看作是一个丰富的比较具有增强功能的链接，多个实用方法，多类型排序功能等。</p>\n<ul>\n<li><strong><code>static Ordering&lt;Object&gt; allEqual()</code></strong><br>返回一个排序，它把所有的值相等，说明 “没有顺序。” 通过这个顺序以任何稳定的排序算法的结果，在改变没有顺序元素。</li>\n<li><strong><code>static Ordering&lt;Object&gt; arbitrary()</code></strong><br>返回一个任意顺序对所有对象，其中 compare (a, b) == 0 意味着 a == b（身份平等）。</li>\n<li><strong><code>int binarySearch(List&lt;? extends T&gt; sortedList, T key)</code></strong><br>搜索排序列表使用键的二进制搜索算法。</li>\n<li><strong><code>abstract int compare(T left, T right)</code></strong><br>比较两个参数的顺序。</li>\n<li><strong><code>&lt;U extends T&gt; Ordering&lt;U&gt; compound(Comparator&lt;? super U&gt; secondaryComparator)</code></strong><br>返回首先使用排序这一点，但它排序中的 “tie”，然后委托给 secondaryComparator 事件。</li>\n<li><strong><code>static &lt;T&gt; Ordering&lt;T&gt; compound(Iterable&lt;? extends Comparator&lt;? super T&gt;&gt; comparators)</code></strong><br>返回一个排序它尝试每个给定的比较器，以便直到一个非零结果找到，返回该结果，并返回零仅当所有比较器返回零。</li>\n<li><strong><code>static &lt;T&gt; Ordering&lt;T&gt; explicit(List&lt;T&gt; valuesInOrder)</code></strong><br>返回根据它们出现的定列表中的顺序比较对象进行排序。</li>\n<li><strong><code>static &lt;T&gt; Ordering&lt;T&gt; explicit(T leastValue, T... remainingValuesInOrder)</code></strong><br>返回根据它们所赋予本方法的顺序进行比较的对象进行排序。</li>\n<li><strong><code>static &lt;T&gt; Ordering&lt;T&gt; from(Comparator&lt;T&gt; comparator)</code></strong><br>返回基于现有的比较实例进行排序。</li>\n<li><strong><code>&lt;E extends T&gt; List&lt;E&gt; greatestOf(Iterable&lt;E&gt; iterable, int k)</code></strong><br>返回根据这个顺序给出迭代，为了从最大到最小的 k 个最大的元素。</li>\n<li><strong><code>&lt;E extends T&gt; List&lt;E&gt; greatestOf(Iterator&lt;E&gt; iterator, int k)</code></strong><br>返回从给定的迭代器按照这个顺序，从最大到最小 k 个最大的元素。</li>\n<li><strong><code>&lt;E extends T&gt; ImmutableList&lt;E&gt; immutableSortedCopy(Iterable&lt;E&gt; elements)</code></strong><br>返回包含的元素排序这种排序的不可变列表。</li>\n<li><strong><code>boolean isOrdered(Iterable&lt;? extends T&gt; iterable)</code></strong><br>返回 true 如果在迭代后的第一个的每个元素是大于或等于在它之前，根据该排序的元素。</li>\n<li><strong><code>boolean isStrictlyOrdered(Iterable&lt;? extends T&gt; iterable)</code></strong><br>返回 true 如果在迭代后的第一个的每个元素是严格比在它之前，根据该排序的元素更大。</li>\n<li><strong><code>&lt;E extends T&gt; List&lt;E&gt; leastOf(Iterable&lt;E&gt; iterable, int k)</code></strong><br>返回根据这个顺序给出迭代，从而从低到最大的 k 个最低的元素。</li>\n<li><strong><code>&lt;E extends T&gt; List&lt;E&gt; leastOf(Iterator&lt;E&gt; elements, int k)</code></strong><br>返回第 k 从给定的迭代器，按照这个顺序从最低到最大至少元素。</li>\n<li><strong><code>&lt;S extends T&gt; Ordering&lt;Iterable&lt;S&gt;&gt; lexicographical()</code></strong><br>返回一个新的排序它通过比较对应元素两两直到非零结果发现排序迭代；规定 “字典顺序”。</li>\n<li><strong><code>&lt;E extends T&gt; E max(E a, E b)</code></strong><br>返回两个值按照这个顺序的较大值。</li>\n<li><strong><code>&lt;E extends T&gt; E max(E a, E b, E c, E... rest)</code></strong><br>返回指定的值，根据这个顺序是最大的。</li>\n<li><strong><code>&lt;E extends T&gt; E max(Iterable&lt;E&gt; iterable)</code></strong><br>返回指定的值，根据这个顺序是最大的。</li>\n<li><strong><code>&lt;E extends T&gt; E max(Iterator&lt;E&gt; iterator)</code></strong><br>返回指定的值，根据这个顺序是最大的。</li>\n<li><strong><code>&lt;E extends T&gt; E min(E a, E b)</code></strong><br>返回两个值按照这个顺序的较小者。</li>\n<li><strong><code>&lt;E extends T&gt; E min(E a, E b, E c, E... rest)</code></strong><br>返回最少指定的值，根据这个顺序。</li>\n<li><strong><code>&lt;E extends T&gt; E min(Iterable&lt;E&gt; iterable)</code></strong><br>返回最少指定的值，根据这个顺序。</li>\n<li><strong><code>&lt;E extends T&gt; E min(Iterator&lt;E&gt; iterator)</code></strong><br>返回最少指定的值，根据这个顺序。</li>\n<li><strong><code>static &lt;C extends Comparable&gt; Ordering&lt;C&gt; natural()</code></strong><br>返回使用值的自然顺序排序序列化。</li>\n<li><strong><code>&lt;S extends T&gt; Ordering&lt;S&gt; nullsFirst()</code></strong><br>返回对待 null 小于所有其他值，并使用此来比较非空值排序。</li>\n<li><strong><code>&lt;S extends T&gt; Ordering&lt;S&gt; nullsLast()</code></strong><br>返回对待 null 作为大于所有其他值，并使用这个顺序来比较非空值排序。</li>\n<li><strong><code>&lt;F&gt; Ordering&lt;F&gt; onResultOf(Function&lt;F,? extends T&gt; function)</code></strong><br>返回一个新的排序在 F 上，首先应用功能给它们，然后比较使用此这些结果的顺序元素。</li>\n<li><strong><code>&lt;S extends T&gt; Ordering&lt;S&gt; reverse()</code></strong><br>返回相反顺序；顺序相当于 Collections.reverseOrder（Comparator）。</li>\n<li><strong><code>&lt;E extends T&gt; List&lt;E&gt; sortedCopy(Iterable&lt;E&gt; elements)</code></strong><br>返回包含的元素排序此排序可变列表；使用这个只有在结果列表可能需要进一步修改，或可能包含 null。</li>\n<li><strong><code>static Ordering&lt;Object&gt; usingToString()</code></strong><br>返回由它们的字符串表示的自然顺序，toString () 比较对象进行排序。</li>\n</ul>\n<p>示例代码：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> numbers <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nnumbers<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nnumbers<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nnumbers<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nnumbers<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">(</span><span class=\"token number\">51</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nnumbers<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">(</span><span class=\"token number\">53</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nnumbers<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">(</span><span class=\"token number\">35</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nnumbers<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">(</span><span class=\"token number\">45</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nnumbers<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nnumbers<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">(</span><span class=\"token number\">43</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nnumbers<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [5, 2, 15, 51, 53, 35, 45, 32, 43, 16]</span>\n\n<span class=\"token class-name\">Ordering</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> ordering <span class=\"token operator\">=</span> <span class=\"token class-name\">Ordering</span><span class=\"token punctuation\">.</span><span class=\"token function\">natural</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">,</span> ordering<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [2, 5, 15, 16, 32, 35, 43, 45, 51, 53]</span>\n\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>ordering<span class=\"token punctuation\">.</span><span class=\"token function\">isOrdered</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Minimum: \"</span> <span class=\"token operator\">+</span> ordering<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Maximum: \"</span> <span class=\"token operator\">+</span> ordering<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 53</span>\n\n<span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">,</span> ordering<span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 倒序</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [53, 51, 45, 43, 35, 32, 16, 15, 5, 2]</span>\n\nnumbers<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [53, 51, 45, 43, 35, 32, 16, 15, 5, 2, null]</span>\n\n<span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">,</span> ordering<span class=\"token punctuation\">.</span><span class=\"token function\">nullsFirst</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [null, 2, 5, 15, 16, 32, 35, 43, 45, 51, 53]</span>\n\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> names <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nnames<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Ram\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nnames<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Shyam\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nnames<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Mohan\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nnames<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Sohan\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nnames<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Ramesh\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nnames<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Suresh\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nnames<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Naresh\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nnames<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Mahesh\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nnames<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nnames<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Vikas\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nnames<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Deepak\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Another List: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>names<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [Ram, Shyam, Mohan, Sohan, Ramesh, Suresh, Naresh, Mahesh, null, Vikas, Deepak]</span>\n\n<span class=\"token class-name\">Ordering</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> ordering2 <span class=\"token operator\">=</span> <span class=\"token class-name\">Ordering</span><span class=\"token punctuation\">.</span><span class=\"token function\">natural</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>names<span class=\"token punctuation\">,</span> ordering2<span class=\"token punctuation\">.</span><span class=\"token function\">nullsFirst</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Null first then reverse sorted list: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>names<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [Vikas, Suresh, Sohan, Shyam, Ramesh, Ram, Naresh, Mohan, Mahesh, Deepak, null]</span></code></pre>\n\n<h4 id=\"Range\"><a href=\"#Range\" class=\"headerlink\" title=\"Range\"></a>Range</h4><p>Range 表示一个间隔或一个序列。它被用于获取一组数字 / 串在一个特定范围之内。</p>\n<ul>\n<li><strong><code>static &lt;C extends Comparable&lt;?&gt;&gt; Range&lt;C&gt; all()</code></strong><br>返回包含 C 型的每一个值范围</li>\n<li><strong><code>boolean apply(C input)Deprecated.</code></strong><br>只有提供满足谓词接口；使用包含 (C) 来代替。</li>\n<li><strong><code>static &lt;C extends Comparable&lt;?&gt;&gt; Range&lt;C&gt; atLeast(C endpoint)</code></strong><br>返回包含大于或等于终点 (endpoint) 的所有值的范围内。</li>\n<li><strong><code>static &lt;C extends Comparable&lt;?&gt;&gt; Range&lt;C&gt; atMost(C endpoint)</code></strong><br>返回包含的所有值小于或等于终点的范围内。</li>\n<li><strong><code>Range&lt;C&gt; canonical(DiscreteDomain&lt;C&gt; domain)</code></strong><br>返回此范围内，在给定域中的规范形式。</li>\n<li><strong><code>static &lt;C extends Comparable&lt;?&gt;&gt; Range&lt;C&gt; closed(C lower, C upper)</code></strong><br>返回包含大于所有值或等于降低且小于或等于上限的范围内。</li>\n<li><strong><code>static &lt;C extends Comparable&lt;?&gt;&gt; Range&lt;C&gt; closedOpen(C lower, C upper)</code></strong><br>返回包含大于或等于下限和所有值严格大于上限以下的范围内。</li>\n<li><strong><code>boolean contains(C value)</code></strong><br>返回 true，如果值是这个范围的范围之内。</li>\n<li><strong><code>boolean containsAll(Iterable&lt;? extends C&gt; values)</code></strong><br>如果值每一个元素都包含在这个范围内，则返回 true。</li>\n<li><strong><code>static &lt;C extends Comparable&lt;?&gt;&gt; Range&lt;C&gt; downTo(C endpoint, BoundType boundType)</code></strong><br>返回的范围内的给定的端点，它可以是包容性（闭合）或专用（开），没有上限。</li>\n<li><strong><code>static &lt;C extends Comparable&lt;?&gt;&gt; Range&lt;C&gt; encloseAll(Iterable&lt;C&gt; values)</code></strong><br>返回包含所有给定值的最小范围内。</li>\n<li><strong><code>boolean encloses(Range&lt;C&gt; other)</code></strong><br>返回 true，如果其他的边界不在该范围的边界之外延伸。</li>\n<li><strong><code>boolean equals(Object object)</code></strong><br>返回 true，如果对象是具有相同端点和绑定类型，这个范围内的范围。</li>\n<li><strong><code>static &lt;C extends Comparable&lt;?&gt;&gt; Range&lt;C&gt; greaterThan(C endpoint)</code></strong><br>返回一个包含所有值严格大于端点的范围内。</li>\n<li><strong><code>int hashCode()</code></strong><br>返回此范围内的哈希码。</li>\n<li><strong><code>boolean hasLowerBound()</code></strong><br>如果此范围内具有更低的终点返回 true。</li>\n<li><strong><code>boolean hasUpperBound()</code></strong><br>如果此范围内有上端点返回 true。</li>\n<li><strong><code>Range&lt;C&gt; intersection(Range&lt;C&gt; connectedRange)</code></strong><br>返回由两者范围和 connectedRange 封闭，如果这样的范围存在的最大范围。</li>\n<li><strong><code>boolean isConnected(Range&lt;C&gt; other)</code></strong><br>如果存在这是由两者此范围和其他封闭（可能为空）的范围，则返回 true。</li>\n<li><strong><code>boolean isEmpty()</code></strong><br>返回 true，如果这个范围是形式 [v..v)  或 (v..v].</li>\n<li><strong><code>static &lt;C extends Comparable&lt;?&gt;&gt; Range&lt;C&gt; lessThan(C endpoint)</code></strong><br>返回一个包含所有值严格小于端点的范围内。</li>\n<li><strong><code>BoundType lowerBoundType()</code></strong><br>返回类型这个范围的下限：如果范围包括它的下端点 BoundType.CLOSED，如果没有 BoundType.OPEN。</li>\n<li><strong><code>C lowerEndpoint()</code></strong><br>返回该范围的较低端点。</li>\n<li><strong><code>static &lt;C extends Comparable&lt;?&gt;&gt; Range&lt;C&gt; open(C lower, C upper)</code></strong><br>返回一个包含所有值严格大于下限和严格比上端更小一个范围。</li>\n<li><strong><code>static &lt;C extends Comparable&lt;?&gt;&gt; Range&lt;C&gt; openClosed(C lower, C upper)</code></strong><br>返回包含所有值严格低于更大且小于或等于上限的范围内。</li>\n<li><strong><code>static &lt;C extends Comparable&lt;?&gt;&gt; Range&lt;C&gt; range(C lower, BoundType lowerType, C upper, BoundType upperType)</code></strong><br>返回包含任何值由下到上，每个端点可以是包容性（关闭）或专用（开）的范围。</li>\n<li><strong><code>static &lt;C extends Comparable&lt;?&gt;&gt; Range&lt;C&gt; singleton(C value)</code></strong><br>返回包含只在给定范围内的值。</li>\n<li><strong><code>Range&lt;C&gt; span(Range&lt;C&gt; other)</code></strong><br>返回最小的范围包围两者这个范围和 other 等。</li>\n<li><strong><code>String toString()</code></strong><br>返回该范围内的字符串表示，如 “[3..5）”（其他实例列在类文档）。</li>\n<li><strong><code>BoundType upperBoundType()</code></strong><br>返回类型此范围的上限：如果范围包括其上的端点返回 BoundType.CLOSED，如果没有返回 BoundType.OPEN。</li>\n<li><strong><code>C upperEndpoint()</code></strong><br>返回此范围的上限端点。</li>\n<li><strong><code>static &lt;C extends Comparable&lt;?&gt;&gt; Range&lt;C&gt; upTo(C endpoint, BoundType boundType)</code></strong><br>返回一个范围，没有下限到给定的端点，它可以是包容性（闭合）或专用（开）。</li>\n</ul>\n<p>示例代码：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 创建一个序列 [a,b] = { x | a &lt;= x &lt;= b}</span>\n<span class=\"token class-name\">Range</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> range1 <span class=\"token operator\">=</span> <span class=\"token class-name\">Range</span><span class=\"token punctuation\">.</span><span class=\"token function\">closed</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0 1 2 3 4 5 6 7 8 9</span>\n\n<span class=\"token comment\">// 创建一个序列 (a,b) = { x | a &lt; x &lt; b}</span>\n<span class=\"token class-name\">Range</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> range2 <span class=\"token operator\">=</span> <span class=\"token class-name\">Range</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">open</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1 2 3 4 5 6 7 8</span>\n\n<span class=\"token comment\">// 创建一个序列 (a,b] = { x | a &lt; x &lt;= b}</span>\n<span class=\"token class-name\">Range</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> range3 <span class=\"token operator\">=</span> <span class=\"token class-name\">Range</span><span class=\"token punctuation\">.</span><span class=\"token function\">openClosed</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1 2 3 4 5 6 7 8 9</span>\n\n<span class=\"token comment\">// 创建一个序列 [a,b) = { x | a &lt;= x &lt; b}</span>\n<span class=\"token class-name\">Range</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> range4 <span class=\"token operator\">=</span> <span class=\"token class-name\">Range</span><span class=\"token punctuation\">.</span><span class=\"token function\">closedOpen</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0 1 2 3 4 5 6 7 8</span></code></pre>\n\n\n\n<h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h3><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cueWlpYmFpLmNvbS9ndWF2YQ==\">https://www.yiibai.com/guava<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n","categories":["Java","JavaJar"],"tags":["Java","JavaJar","Google"]},{"title":"Google 工具类 Gson 的基本使用","url":"/2020/10/2020-10-26-Google%E5%B7%A5%E5%85%B7%E7%B1%BBGson%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/","content":"<h3 id=\"Gson-介绍\"><a href=\"#Gson-介绍\" class=\"headerlink\" title=\"Gson 介绍\"></a>Gson 介绍</h3><p>Google Gson 是一个简单的基于 Java 的库，用于将 Java 对象序列化为 JSON，反之亦然。 它是由 Google 开发的一个开源库。</p>\n<p>以下几点说明为什么应该使用这个库 </p>\n<ul>\n<li><strong>标准化</strong> - Gson 是一个由 Google 管理的标准化库。</li>\n<li><strong>高效</strong> - 这是对 Java 标准库的可靠，快速和高效的扩展。</li>\n<li><strong>优化</strong> - Gson 库经过高度优化。</li>\n<li><strong>支持泛型</strong> - 它为泛型提供了广泛的支持。</li>\n<li><strong>支持复杂的内部类</strong> - 它支持具有深度继承层次结构的复杂对象。</li>\n</ul>\n<a id=\"more\"></a>\n\n<h4 id=\"Gson-的特点\"><a href=\"#Gson-的特点\" class=\"headerlink\" title=\"Gson 的特点\"></a>Gson 的特点</h4><p>这里列出了 Gson 的一些最显着的特点 </p>\n<ul>\n<li><strong>易于使用</strong> - Gson API 提供了一个高级外观来简化常用的用例。</li>\n<li><strong>无需创建映射</strong> - Gson API 为大部分要序列化的对象提供了默认映射。</li>\n<li><strong>性能优</strong> - Gson 速度相当快，内存占用量低。 它适用于大型对象图或系统。</li>\n<li><strong>干净</strong> JSON - Gson 创建一个干净而紧凑的 JSON 结果，它易于阅读。</li>\n<li><strong>无依赖性</strong> —Gson 库不需要 JDK 以外的任何其他库。</li>\n<li><strong>开源</strong> - Gson 库是开源的；它是免费提供的。</li>\n</ul>\n<h4 id=\"处理JSON的方法\"><a href=\"#处理JSON的方法\" class=\"headerlink\" title=\"处理JSON的方法\"></a>处理 JSON 的方法</h4><p>Gson 提供了三种处理 JSON 的替代方法 - </p>\n<ol>\n<li><p><strong>流媒体 API</strong></p>\n<p>它读取和写入 JSON 内容作为离散事件。 JsonReader 和 JsonWriter 将数据读取 / 写入令牌，称为 JsonToken。<br>这是处理 JSON 的三种方法中最强大的方法。 它具有最低的开销，并且在读 / 写操作中速度非常快。 它类似于用于 XML 的 Stax 解析器。</p>\n</li>\n<li><p><strong>树模型</strong></p>\n<p>它准备 JSON 文档的内存树表示。 它构建了一个 JsonObject 节点树。 这是一种灵活的方法，类似于 XML 的 DOM 解析器。</p>\n</li>\n<li><p><strong>数据绑定</strong></p>\n<p>它使用属性访问器将 JSON 转换为 POJO (普通旧 Java 对象) 并从中转换。 Gson 使用数据类型适配器读取 / 写入 JSON。 它类似于 XML 的 JAXB 解析器。</p>\n</li>\n</ol>\n<h4 id=\"Gson-链接\"><a href=\"#Gson-链接\" class=\"headerlink\" title=\"Gson 链接\"></a>Gson 链接</h4><ul>\n<li>GitHub：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZS9nc29u\">https://github.com/google/gson<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li> 用户指南：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaXRlcy5nb29nbGUuY29tL3NpdGUvZ3Nvbi9nc29uLXVzZXItZ3VpZGU=\">https://sites.google.com/site/gson/gson-user-guide<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<h4 id=\"Gson-引入\"><a href=\"#Gson-引入\" class=\"headerlink\" title=\"Gson 引入\"></a>Gson 引入</h4><pre class=\"language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token comment\">&lt;!-- https://mvnrepository.com/artifact/com.google.code.gson/gson --&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>com.google.code.gson<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>gson<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>2.8.6<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n\n<h3 id=\"Gson-入门程序\"><a href=\"#Gson-入门程序\" class=\"headerlink\" title=\"Gson 入门程序\"></a>Gson 入门程序</h3><p>Gson 是 Google Gson 库的主要操作类。 它提供了将 Java 对象转换为匹配的 JSON 结构的功能，反之亦然。 </p>\n<p>Gson 首先使用 <code>GsonBuilder</code> 构建，然后使用 <code>toJson(Object)</code> 或 <code>fromJson(String，Class)</code> 方法读取 / 写入 JSON 构造。</p>\n<ol>\n<li><p>使用 <code>GsonBuilder</code> 创建 Gson 对象<br>创建一个 Gson 对象。 它是一个可重用的对象。</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">GsonBuilder</span> builder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GsonBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \nbuilder<span class=\"token punctuation\">.</span><span class=\"token function\">setPrettyPrinting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token class-name\">Gson</span> gson <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n</li>\n<li><p>将 JSON 反序列化为对象<br>使用 <code>fromJson()</code> 方法从 JSON 获取对象。 传递 Json 字符串 / Json 字符串的源和对象类型作为参数。</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Object to JSON Conversion </span>\n<span class=\"token class-name\">Student</span> student <span class=\"token operator\">=</span> gson<span class=\"token punctuation\">.</span><span class=\"token function\">fromJson</span><span class=\"token punctuation\">(</span>jsonString<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n</li>\n<li><p>将对象序列化为 JSON<br>使用 <code>toJson()</code> 方法获取对象的 JSON 字符串表示形式。</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Object to JSON Conversion   </span>\njsonString <span class=\"token operator\">=</span> gson<span class=\"token punctuation\">.</span><span class=\"token function\">toJson</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n</li>\n</ol>\n<p>示例如下：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">String</span> jsonString <span class=\"token operator\">=</span> <span class=\"token string\">\"{\\\"name\\\":\\\"Maxsu\\\", \\\"age\\\":24}\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">GsonBuilder</span> builder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GsonBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nbuilder<span class=\"token punctuation\">.</span><span class=\"token function\">setPrettyPrinting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Gson</span> gson <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Student</span> student <span class=\"token operator\">=</span> gson<span class=\"token punctuation\">.</span><span class=\"token function\">fromJson</span><span class=\"token punctuation\">(</span>jsonString<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\njsonString <span class=\"token operator\">=</span> gson<span class=\"token punctuation\">.</span><span class=\"token function\">toJson</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>jsonString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n<h3 id=\"Gson-序列化\"><a href=\"#Gson-序列化\" class=\"headerlink\" title=\"Gson 序列化\"></a>Gson 序列化</h3><h4 id=\"对象序列化\"><a href=\"#对象序列化\" class=\"headerlink\" title=\"对象序列化\"></a>对象序列化</h4><p>序列化写入：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">writeJSON</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span> student<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token class-name\">GsonBuilder</span> builder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GsonBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">Gson</span> gson <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">FileWriter</span> writer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileWriter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"student.json\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\twriter<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>gson<span class=\"token punctuation\">.</span><span class=\"token function\">toJson</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\twriter<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<p>序列化读取：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token class-name\">Student</span> <span class=\"token function\">readJSON</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">FileNotFoundException</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token class-name\">GsonBuilder</span> builder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GsonBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">Gson</span> gson <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">BufferedReader</span> bufferedReader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileReader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"student.json\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">Student</span> student <span class=\"token operator\">=</span> gson<span class=\"token punctuation\">.</span><span class=\"token function\">fromJson</span><span class=\"token punctuation\">(</span>bufferedReader<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> student<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<h4 id=\"数组序列化\"><a href=\"#数组序列化\" class=\"headerlink\" title=\"数组序列化\"></a>数组序列化</h4><pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 序列化 </span>\n<span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> marks1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">90</span><span class=\"token punctuation\">,</span><span class=\"token number\">85</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> \n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"marks:\"</span> <span class=\"token operator\">+</span> gson<span class=\"token punctuation\">.</span><span class=\"token function\">toJson</span><span class=\"token punctuation\">(</span>marks1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        \n<span class=\"token comment\">// 反序列化</span>\n<span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> marks2 <span class=\"token operator\">=</span> gson<span class=\"token punctuation\">.</span><span class=\"token function\">fromJson</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[100,90,85]\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"marks:\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>marks2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n<h4 id=\"集合序列化\"><a href=\"#集合序列化\" class=\"headerlink\" title=\"集合序列化\"></a>集合序列化</h4><pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 序列化 </span>\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> marks <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"marks:\"</span> <span class=\"token operator\">+</span> gson<span class=\"token punctuation\">.</span><span class=\"token function\">toJson</span><span class=\"token punctuation\">(</span>marks<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        \n<span class=\"token comment\">// 反序列化 </span>\n<span class=\"token class-name\">Type</span> listType <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeToken</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span><span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \nmarks <span class=\"token operator\">=</span> gson<span class=\"token punctuation\">.</span><span class=\"token function\">fromJson</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[100,90,85]\"</span><span class=\"token punctuation\">,</span> listType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"marks:\"</span> <span class=\"token operator\">+</span>marks<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n<h4 id=\"泛型序列化\"><a href=\"#泛型序列化\" class=\"headerlink\" title=\"泛型序列化\"></a>泛型序列化</h4><p>Gson 使用 Java 反射 API 来获取要将 Json 文本映射到的对象的类型。 但是在泛型中，这些信息在序列化过程中丢失了。 </p>\n<p>为了解决这个问题，Gson 提供了一个 <code>com.google.gson.reflect.TypeToken</code> 类来存储通用对象的类型。</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Gson</span> gson <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Gson</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 创建泛型对象</span>\n<span class=\"token class-name\">Shape</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Circle</span><span class=\"token punctuation\">&gt;</span></span> shape <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Shape</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Circle</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Circle</span> circle <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Circle</span><span class=\"token punctuation\">(</span><span class=\"token number\">5.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nshape<span class=\"token punctuation\">.</span><span class=\"token function\">setShape</span><span class=\"token punctuation\">(</span>circle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 定义 TypeToken</span>\n<span class=\"token class-name\">Type</span> shapeType <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeToken</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Shape</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Circle</span><span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span><span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 序列化</span>\n<span class=\"token class-name\">String</span> jsonString <span class=\"token operator\">=</span> gson<span class=\"token punctuation\">.</span><span class=\"token function\">toJson</span><span class=\"token punctuation\">(</span>shape<span class=\"token punctuation\">,</span> shapeType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>jsonString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {\"shape\":{\"radius\":5.0}}</span>\n\n<span class=\"token comment\">// （错误）通过 类 反序列化</span>\n<span class=\"token class-name\">Shape</span> shape1 <span class=\"token operator\">=</span> gson<span class=\"token punctuation\">.</span><span class=\"token function\">fromJson</span><span class=\"token punctuation\">(</span>jsonString<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Shape</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>shape1<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// class com.google.gson.internal.LinkedTreeMap</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>shape1<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {radius=5.0}</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>shape1<span class=\"token punctuation\">.</span><span class=\"token function\">getArea</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0.0</span>\n\n<span class=\"token comment\">// （正确）通过 TypeToken 反序列化</span>\n<span class=\"token class-name\">Shape</span> shape2 <span class=\"token operator\">=</span> gson<span class=\"token punctuation\">.</span><span class=\"token function\">fromJson</span><span class=\"token punctuation\">(</span>jsonString<span class=\"token punctuation\">,</span> shapeType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>shape2<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// class demo.google.gson.Circle</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>shape2<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Circle</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>shape2<span class=\"token punctuation\">.</span><span class=\"token function\">getArea</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 78.5</span></code></pre>\n\n<p>其中：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Shape</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token punctuation\">{</span> \n   <span class=\"token keyword\">public</span> <span class=\"token class-name\">T</span> shape<span class=\"token punctuation\">;</span>  \n\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setShape</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> shape<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>shape <span class=\"token operator\">=</span> shape<span class=\"token punctuation\">;</span> \n   <span class=\"token punctuation\">}</span>  \n   <span class=\"token keyword\">public</span> <span class=\"token class-name\">T</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n      <span class=\"token keyword\">return</span> shape<span class=\"token punctuation\">;</span> \n   <span class=\"token punctuation\">}</span>  \n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">getArea</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>shape <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Circle</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n         <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Circle</span><span class=\"token punctuation\">)</span> shape<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getArea</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span> \n         <span class=\"token keyword\">return</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">;</span> \n      <span class=\"token punctuation\">}</span> \n   <span class=\"token punctuation\">}</span> \n<span class=\"token punctuation\">}</span>  \n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Circle</span> <span class=\"token punctuation\">{</span> \n   <span class=\"token keyword\">private</span> <span class=\"token keyword\">double</span> radius<span class=\"token punctuation\">;</span>  \n\n   <span class=\"token keyword\">public</span> <span class=\"token class-name\">Circle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> radius<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> \n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>radius <span class=\"token operator\">=</span> radius<span class=\"token punctuation\">;</span> \n   <span class=\"token punctuation\">}</span>  \n   <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n      <span class=\"token keyword\">return</span> <span class=\"token string\">\"Circle\"</span><span class=\"token punctuation\">;</span> \n   <span class=\"token punctuation\">}</span>  \n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">getRadius</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n      <span class=\"token keyword\">return</span> radius<span class=\"token punctuation\">;</span> \n   <span class=\"token punctuation\">}</span>  \n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setRadius</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> radius<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>radius <span class=\"token operator\">=</span> radius<span class=\"token punctuation\">;</span> \n   <span class=\"token punctuation\">}</span>  \n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">getArea</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>radius<span class=\"token operator\">*</span>radius<span class=\"token operator\">*</span><span class=\"token number\">3.14</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n   <span class=\"token punctuation\">}</span> \n<span class=\"token punctuation\">}</span></code></pre>\n\n<h4 id=\"内部类序列化\"><a href=\"#内部类序列化\" class=\"headerlink\" title=\"内部类序列化\"></a>内部类序列化</h4><pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Person</span> person <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nperson<span class=\"token punctuation\">.</span><span class=\"token function\">setRollNo</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Name</span> name <span class=\"token operator\">=</span> person<span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nname<span class=\"token punctuation\">.</span>firstName <span class=\"token operator\">=</span> <span class=\"token string\">\"Mahesh\"</span><span class=\"token punctuation\">;</span>\nname<span class=\"token punctuation\">.</span>lastName <span class=\"token operator\">=</span> <span class=\"token string\">\"Kumar\"</span><span class=\"token punctuation\">;</span>\nperson<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Gson</span> gson <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Gson</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">String</span> jsonString <span class=\"token operator\">=</span> gson<span class=\"token punctuation\">.</span><span class=\"token function\">toJson</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>jsonString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {\"rollNo\":1,\"name\":{\"firstName\":\"Mahesh\",\"lastName\":\"Kumar\"}}</span>\n\n<span class=\"token comment\">// 主类</span>\nperson <span class=\"token operator\">=</span> gson<span class=\"token punctuation\">.</span><span class=\"token function\">fromJson</span><span class=\"token punctuation\">(</span>jsonString<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">.</span><span class=\"token function\">getRollNo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span><span class=\"token string\">\":\"</span><span class=\"token operator\">+</span> person<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>firstName <span class=\"token operator\">+</span><span class=\"token string\">\":\"</span><span class=\"token operator\">+</span> person<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>lastName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1:Mahesh:Kumar</span>\n\n<span class=\"token comment\">// 内部类</span>\n<span class=\"token class-name\">String</span> nameString <span class=\"token operator\">=</span> gson<span class=\"token punctuation\">.</span><span class=\"token function\">toJson</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>nameString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {\"firstName\":\"Mahesh\",\"lastName\":\"Kumar\"}</span>\nname <span class=\"token operator\">=</span> gson<span class=\"token punctuation\">.</span><span class=\"token function\">fromJson</span><span class=\"token punctuation\">(</span>nameString<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Name</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// class demo.google.gson.Person$Name</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">.</span>firstName <span class=\"token operator\">+</span> <span class=\"token string\">\":\"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">.</span>lastName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Mahesh:Kumar</span></code></pre>\n\n<p>其中：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> rollNo<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">Name</span> name<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getRollNo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> rollNo<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setRollNo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> rollNo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>rollNo <span class=\"token operator\">=</span> rollNo<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Name</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Name</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">class</span> <span class=\"token class-name\">Name</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> firstName<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> lastName<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<h3 id=\"Gson-从序列化中排除字段\"><a href=\"#Gson-从序列化中排除字段\" class=\"headerlink\" title=\"Gson 从序列化中排除字段\"></a>Gson 从序列化中排除字段</h3><h4 id=\"使用excludeFieldsWithModifiers\"><a href=\"#使用excludeFieldsWithModifiers\" class=\"headerlink\" title=\"使用excludeFieldsWithModifiers()\"></a>使用 excludeFieldsWithModifiers ()</h4><p>GsonBuilder 使用序列化 / 反序列化过程中的 <code>excludeFieldsWithModifiers()</code> 方法提供对使用特定修饰符排除字段的控制。 </p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">GsonBuilder</span> builder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GsonBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \nbuilder<span class=\"token punctuation\">.</span><span class=\"token function\">excludeFieldsWithModifiers</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Modifier</span><span class=\"token punctuation\">.</span>TRANSIENT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    \n<span class=\"token class-name\">Gson</span> gson <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </code></pre>\n\n<h4 id=\"使用-Expose注解\"><a href=\"#使用-Expose注解\" class=\"headerlink\" title=\"使用@Expose注解\"></a>使用 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0V4cG9zZQ==\">@Expose<i class=\"fa fa-external-link-alt\"></i></span> 注解</h4><p>Gson 提供 <code>@Expose</code> 注解来根据其范围控制类的 Json 序列化 / 反序列化。</p>\n<ol>\n<li><p>类属性中具有 <code>@Expose</code> 支持的变量的类。 </p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Student2</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token annotation punctuation\">@Expose</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> rollNo<span class=\"token punctuation\">;</span>\n\t<span class=\"token annotation punctuation\">@Expose</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> verified<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> className<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<p>在这个类中，<code>name</code> 和 <code>rollno</code> 变量将被暴露以进行序列化。 </p>\n</li>\n<li><p>使用 <code>GsonBuilder.excludeFieldsWithoutExposeAnnotation()</code> 方法来指示只有暴露的变量要被序列化 / 反序列化。</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">GsonBuilder</span> builder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GsonBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nbuilder<span class=\"token punctuation\">.</span><span class=\"token function\">excludeFieldsWithoutExposeAnnotation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Gson</span> gson1 <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n</li>\n</ol>\n<h3 id=\"Gson-数据绑定\"><a href=\"#Gson-数据绑定\" class=\"headerlink\" title=\"Gson 数据绑定\"></a>Gson 数据绑定</h3><p>数据绑定 API 用于使用属性访问器或使用注释将 JSON 转换为 POJO (普通旧 Java 对象) 以及从 POJO (普通旧 Java 对象) 转换。 </p>\n<p>它有两种类型，分别如下所示： </p>\n<ul>\n<li><strong>原始数据绑定</strong> - 将 JSON 转换为 Java 地图，列表，字符串，数字，布尔值和 NULL 对象。</li>\n<li><strong>对象数据绑定</strong> - 从任何 JAVA 类型转换 JSON。</li>\n</ul>\n<p>Gson 为这两种类型的数据绑定读 / 写 JSON。 数据绑定类似于 XML 的 JAXB 解析器。</p>\n<h4 id=\"原始数据绑定\"><a href=\"#原始数据绑定\" class=\"headerlink\" title=\"原始数据绑定\"></a>原始数据绑定</h4><p>基元数据绑定是指将 JSON 映射到 JAVA 核心数据类型和内置集合。 </p>\n<p>Gson 提供了各种内置适配器，可用于序列化 / 反序列化原始数据类型。</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Gson</span> gson <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Gson</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"Maxsu\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">long</span> rollNo <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">boolean</span> verified <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> marks <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">90</span><span class=\"token punctuation\">,</span> <span class=\"token number\">85</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 序列化</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name: \"</span> <span class=\"token operator\">+</span> gson<span class=\"token punctuation\">.</span><span class=\"token function\">toJson</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"rollNo: \"</span> <span class=\"token operator\">+</span> gson<span class=\"token punctuation\">.</span><span class=\"token function\">toJson</span><span class=\"token punctuation\">(</span>rollNo<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"verified: \"</span> <span class=\"token operator\">+</span> gson<span class=\"token punctuation\">.</span><span class=\"token function\">toJson</span><span class=\"token punctuation\">(</span>verified<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"marks:\"</span> <span class=\"token operator\">+</span> gson<span class=\"token punctuation\">.</span><span class=\"token function\">toJson</span><span class=\"token punctuation\">(</span>marks<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"}\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 反序列化</span>\nname <span class=\"token operator\">=</span> gson<span class=\"token punctuation\">.</span><span class=\"token function\">fromJson</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\\"Maxsu\\\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nrollNo <span class=\"token operator\">=</span> gson<span class=\"token punctuation\">.</span><span class=\"token function\">fromJson</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nverified <span class=\"token operator\">=</span> gson<span class=\"token punctuation\">.</span><span class=\"token function\">fromJson</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"false\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmarks <span class=\"token operator\">=</span> gson<span class=\"token punctuation\">.</span><span class=\"token function\">fromJson</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[100,90,85]\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n<h4 id=\"对象数据绑定\"><a href=\"#对象数据绑定\" class=\"headerlink\" title=\"对象数据绑定\"></a>对象数据绑定</h4><p>对象数据绑定是指将 JSON 映射到任何 JAVA 对象。</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Gson</span> gson <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Gson</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Student</span> student <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nstudent<span class=\"token punctuation\">.</span><span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span><span class=\"token number\">26</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nstudent<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Maxsu\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">String</span> jsonString <span class=\"token operator\">=</span> gson<span class=\"token punctuation\">.</span><span class=\"token function\">toJson</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>jsonString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Student</span> student1 <span class=\"token operator\">=</span> gson<span class=\"token punctuation\">.</span><span class=\"token function\">fromJson</span><span class=\"token punctuation\">(</span>jsonString<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>student1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n<h3 id=\"Gson-树模型\"><a href=\"#Gson-树模型\" class=\"headerlink\" title=\"Gson 树模型\"></a>Gson 树模型</h3><h4 id=\"从JSON创建树\"><a href=\"#从JSON创建树\" class=\"headerlink\" title=\"从JSON创建树\"></a>从 JSON 创建树</h4><p>在读取 JSON 之后，<code>JsonParser</code> 提供了一个指向树的根节点的指针。根节点可以用来遍历整个树。 </p>\n<p>下面的代码片段来获取提供的 JSON 字符串的根节点。</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">JsonParser</span> parser <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JsonParser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> jsonString <span class=\"token operator\">=</span> <span class=\"token string\">\"{\\\"name\\\":\\\"Maxsu\\\", \\\"age\\\":26,\\\"verified\\\":false,\\\"marks\\\": [100,90,85]}\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 从JSON创建树</span>\n<span class=\"token class-name\">JsonElement</span> rootNode <span class=\"token operator\">=</span> parser<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>jsonString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n<h4 id=\"遍历树模型\"><a href=\"#遍历树模型\" class=\"headerlink\" title=\"遍历树模型\"></a>遍历树模型</h4><p>在遍历树并处理数据时，使用到根节点的相对路径获取每个节点。 </p>\n<p>以下代码片段显示了如何遍历树。</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 遍历树模型</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rootNode<span class=\"token punctuation\">.</span><span class=\"token function\">isJsonObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n\t<span class=\"token class-name\">JsonObject</span> details <span class=\"token operator\">=</span> rootNode<span class=\"token punctuation\">.</span><span class=\"token function\">getAsJsonObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">JsonElement</span> nameNode <span class=\"token operator\">=</span> details<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Name: \"</span> <span class=\"token operator\">+</span> nameNode<span class=\"token punctuation\">.</span><span class=\"token function\">getAsString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">JsonElement</span> ageNode <span class=\"token operator\">=</span> details<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Age: \"</span> <span class=\"token operator\">+</span> ageNode<span class=\"token punctuation\">.</span><span class=\"token function\">getAsInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">JsonElement</span> verifiedNode <span class=\"token operator\">=</span> details<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"verified\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Verified: \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>verifiedNode<span class=\"token punctuation\">.</span><span class=\"token function\">getAsBoolean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"Yes\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"No\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">JsonArray</span> marks <span class=\"token operator\">=</span> details<span class=\"token punctuation\">.</span><span class=\"token function\">getAsJsonArray</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"marks\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> marks<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">JsonPrimitive</span> value <span class=\"token operator\">=</span> marks<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAsJsonPrimitive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">getAsInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<h3 id=\"Gson-数据流\"><a href=\"#Gson-数据流\" class=\"headerlink\" title=\"Gson 数据流\"></a>Gson 数据流</h3><p>Streaming API 用于通过令牌读取 JSON 令牌。 它读取和写入 JSON 内容作为离散事件。 </p>\n<p><code>JsonReader</code> 和 <code>JsonWriter</code> 将数据读取 / 写入令牌，称为 <code>JsonToken</code>。</p>\n<p>这是处理 JSON 的三种方法中最强大的方法。 它具有最低的开销，并且在读 / 写操作中速度非常快。 它类似于用于 XML 的 Stax 解析器。</p>\n<p>下面，我们将展示使用 GSON streaming API 来读取 JSON 数据。 Streaming API 与令牌的概念一起工作，Json 的每个细节都要仔细处理。</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 创建JsonReader对象，并将其传递给json文本。</span>\n<span class=\"token class-name\">JsonReader</span> reader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JsonReader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">StringReader</span><span class=\"token punctuation\">(</span>jsonString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\n<span class=\"token comment\">// 开始读取   </span>\nreader<span class=\"token punctuation\">.</span><span class=\"token function\">beginObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\n<span class=\"token comment\">// 获取下一个</span>\n<span class=\"token class-name\">JsonToken</span> token <span class=\"token operator\">=</span> reader<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\n<span class=\"token comment\">// 检查类型</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JsonToken</span><span class=\"token punctuation\">.</span>NAME<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>     \n   <span class=\"token comment\">// 获取内容</span>\n   fieldname <span class=\"token operator\">=</span> reader<span class=\"token punctuation\">.</span><span class=\"token function\">nextName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span></code></pre>\n\n<h3 id=\"Gson-自定义类型适配器\"><a href=\"#Gson-自定义类型适配器\" class=\"headerlink\" title=\"Gson 自定义类型适配器\"></a>Gson 自定义类型适配器</h3><p>Gson 使用其内置适配器执行对象的序列化 / 反序列化。 它也支持自定义适配器。 </p>\n<h4 id=\"创建自定义适配器\"><a href=\"#创建自定义适配器\" class=\"headerlink\" title=\"创建自定义适配器\"></a>创建自定义适配器</h4><p>通过扩展 <code>TypeAdapter</code> 类并传递目标类型的对象来创建自定义适配器。 </p>\n<p>重写读写方法分别执行自定义的反序列化和序列化。</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">StudentAdapter</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">TypeAdapter</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token punctuation\">{</span> \n   <span class=\"token annotation punctuation\">@Override</span> \n   <span class=\"token keyword\">public</span> <span class=\"token class-name\">Student</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JsonReader</span> reader<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span> \n      <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> \n   <span class=\"token punctuation\">}</span> \n   <span class=\"token annotation punctuation\">@Override</span> \n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JsonWriter</span> writer<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Student</span> student<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span> \n   <span class=\"token punctuation\">}</span> \n<span class=\"token punctuation\">}</span></code></pre>\n\n<h4 id=\"注册自定义适配器\"><a href=\"#注册自定义适配器\" class=\"headerlink\" title=\"注册自定义适配器\"></a>注册自定义适配器</h4><p>使用 <code>GsonBuilder</code> 注册自定义适配器并使用 <code>GsonBuilder</code> 创建一个 Gson 实例。</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">GsonBuilder</span> builder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GsonBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \nbuilder<span class=\"token punctuation\">.</span><span class=\"token function\">registerTypeAdapter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StudentAdapter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token class-name\">Gson</span> gson <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n<h4 id=\"完整示例\"><a href=\"#完整示例\" class=\"headerlink\" title=\"完整示例\"></a>完整示例</h4><pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomAdaptersDemo</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">GsonBuilder</span> builder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GsonBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tbuilder<span class=\"token punctuation\">.</span><span class=\"token function\">registerTypeAdapter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Worker</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WorkerAdapter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tbuilder<span class=\"token punctuation\">.</span><span class=\"token function\">setPrettyPrinting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">Gson</span> gson <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token class-name\">String</span> jsonString <span class=\"token operator\">=</span> <span class=\"token string\">\"{\\\"name\\\":\\\"Maxsu\\\", \\\"rollNo\\\":1}\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">Worker</span> worker <span class=\"token operator\">=</span> gson<span class=\"token punctuation\">.</span><span class=\"token function\">fromJson</span><span class=\"token punctuation\">(</span>jsonString<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Worker</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>worker<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\tjsonString <span class=\"token operator\">=</span> gson<span class=\"token punctuation\">.</span><span class=\"token function\">toJson</span><span class=\"token punctuation\">(</span>worker<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>jsonString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span> \n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">WorkerAdapter</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">TypeAdapter</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Worker</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Worker</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JsonReader</span> reader<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">Worker</span> worker <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Worker</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\treader<span class=\"token punctuation\">.</span><span class=\"token function\">beginObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">String</span> fieldname <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>reader<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token class-name\">JsonToken</span> token <span class=\"token operator\">=</span> reader<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JsonToken</span><span class=\"token punctuation\">.</span>NAME<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\tfieldname <span class=\"token operator\">=</span> reader<span class=\"token punctuation\">.</span><span class=\"token function\">nextName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>fieldname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\ttoken <span class=\"token operator\">=</span> reader<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\tworker<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span>reader<span class=\"token punctuation\">.</span><span class=\"token function\">nextString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"rollNo\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>fieldname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\ttoken <span class=\"token operator\">=</span> reader<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\tworker<span class=\"token punctuation\">.</span><span class=\"token function\">setRollNo</span><span class=\"token punctuation\">(</span>reader<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\treader<span class=\"token punctuation\">.</span><span class=\"token function\">endObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> worker<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JsonWriter</span> writer<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Worker</span> worker<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n\t\twriter<span class=\"token punctuation\">.</span><span class=\"token function\">beginObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\twriter<span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\twriter<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span>worker<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\twriter<span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"rollNo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\twriter<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span>worker<span class=\"token punctuation\">.</span><span class=\"token function\">getRollNo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\twriter<span class=\"token punctuation\">.</span><span class=\"token function\">endObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Worker</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> rollNo<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getRollNo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> rollNo<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setRollNo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> rollNo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>rollNo <span class=\"token operator\">=</span> rollNo<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"Worker[ name = \"</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token string\">\", roll no: \"</span> <span class=\"token operator\">+</span> rollNo <span class=\"token operator\">+</span> <span class=\"token string\">\"]\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<h3 id=\"Gson-空对象支持\"><a href=\"#Gson-空对象支持\" class=\"headerlink\" title=\"Gson 空对象支持\"></a>Gson 空对象支持</h3><p>Gson 默认生成优化的 Json 内容，忽略 <code>NULL</code> 值。 </p>\n<p>但是 <code>GsonBuilder</code> 提供的标志使用 <code>GsonBuilder.serializeNulls()</code> 方法在 Json 输出中显示 <code>NULL</code> 值。</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 默认</span>\n<span class=\"token class-name\">Gson</span> gson1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Gson</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">demo</span><span class=\"token punctuation\">(</span>gson1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {\"age\":1}</span>\n\n<span class=\"token comment\">// 使用serializeNulls</span>\n<span class=\"token class-name\">GsonBuilder</span> builder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GsonBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nbuilder<span class=\"token punctuation\">.</span><span class=\"token function\">serializeNulls</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nbuilder<span class=\"token punctuation\">.</span><span class=\"token function\">setPrettyPrinting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Gson</span> gson2 <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">demo</span><span class=\"token punctuation\">(</span>gson2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {\"name\": null, \"age\": 1 }</span></code></pre>\n\n<p>其中，</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">demo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Gson</span> gson<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token class-name\">Student</span> student <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tstudent<span class=\"token punctuation\">.</span><span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token class-name\">String</span> jsonString <span class=\"token operator\">=</span> gson<span class=\"token punctuation\">.</span><span class=\"token function\">toJson</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>jsonString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<h3 id=\"Gson-版本支持\"><a href=\"#Gson-版本支持\" class=\"headerlink\" title=\"Gson 版本支持\"></a>Gson 版本支持</h3><p>Gson 提供了 <code>@Since</code> 注解来控制基于其各种版本的类的 Json 序列化 / 反序列化。</p>\n<p>以下具有版本支持的类：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token annotation punctuation\">@Since</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> rollNo<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token annotation punctuation\">@Since</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token annotation punctuation\">@Since</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.1</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> verified<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getRollNo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> rollNo<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setRollNo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> rollNo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>rollNo <span class=\"token operator\">=</span> rollNo<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setVerified</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">boolean</span> verified<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>verified <span class=\"token operator\">=</span> verified<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isVerified</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> verified<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<p>进行 Json 序列化 / 反序列化：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 构建对象</span>\n<span class=\"token class-name\">Demo</span> demo <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Demo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndemo<span class=\"token punctuation\">.</span><span class=\"token function\">setRollNo</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndemo<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Maxsu\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndemo<span class=\"token punctuation\">.</span><span class=\"token function\">setVerified</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 默认</span>\n<span class=\"token class-name\">Gson</span> gson1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Gson</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> jsonString1 <span class=\"token operator\">=</span> gson1<span class=\"token punctuation\">.</span><span class=\"token function\">toJson</span><span class=\"token punctuation\">(</span>demo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>jsonString1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {\"rollNo\":1,\"name\":\"Maxsu\",\"verified\":true}</span>\n\n<span class=\"token comment\">// 版本支持</span>\n<span class=\"token class-name\">GsonBuilder</span> builder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GsonBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nbuilder<span class=\"token punctuation\">.</span><span class=\"token function\">setVersion</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Gson</span> gson2 <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> jsonString2 <span class=\"token operator\">=</span> gson2<span class=\"token punctuation\">.</span><span class=\"token function\">toJson</span><span class=\"token punctuation\">(</span>demo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>jsonString2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {\"rollNo\":1,\"name\":\"Maxsu\"}</span></code></pre>\n\n\n\n<h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h3><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cueWlpYmFpLmNvbS9nc29u\">https://www.yiibai.com/gson<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n","categories":["Java","JavaJar"],"tags":["Java","JavaJar","Google","JSON"]},{"title":"SpringBoot 通过 Druid 集成 JPA 数据源","url":"/2020/12/2020-12-15-SpringBoot%E9%80%9A%E8%BF%87Druid%E9%9B%86%E6%88%90JPA%E6%95%B0%E6%8D%AE%E6%BA%90/","content":"<h3 id=\"JPA-介绍\"><a href=\"#JPA-介绍\" class=\"headerlink\" title=\"JPA 介绍\"></a>JPA 介绍</h3><p>JPA 顾名思义就是 Java Persistence API 的意思，是 JDK 5.0 注解或 XML 描述对象－关系表的映射关系，并将运行期的实体对象持久化到数据库中。</p>\n<p>JPA 具有如下优势：</p>\n<ol>\n<li><p><strong>标准化</strong></p>\n<p>JPA 是 JCP 组织发布的 Java EE 标准之一，因此任何声称符合 JPA 标准的框架都遵循同样的架构，提供相同的访问 API，这保证了基于 JPA 开发的企业应用能够经过少量的修改就能够在不同的 JPA 框架下运行。</p>\n</li>\n<li><p><strong>容器级特性的支持</strong></p>\n<p>JPA 框架中支持大数据集、事务、并发等容器级事务，这使得 JPA 超越了简单持久化框架的局限，在企业应用发挥更大的作用。</p>\n</li>\n<li><p><strong>简单方便</strong></p>\n<p>JPA 的主要目标之一就是提供更加简单的编程模型：在 JPA 框架下创建实体和创建 Java 类一样简单，没有任何的约束和限制，只需要使用 javax.persistence.Entity 进行注释，JPA 的框架和接口也都非常简单，没有太多特别的规则和设计模式的要求，开发者可以很容易的掌握。JPA 基于非侵入式原则设计，因此可以很容易的和其它框架或者容器集成。</p>\n</li>\n<li><p><strong>查询能力</strong></p>\n<p>JPA 的查询语言是面向对象而非面向数据库的，它以面向对象的自然语法构造查询语句，可以看成是 Hibernate HQL 的等价物。JPA 定义了独特的 JPQL（Java Persistence Query Language），JPQL 是 EJB QL 的一种扩展，它是针对实体的一种查询语言，操作对象是实体，而不是关系数据库的表，而且能够支持批量更新和修改、JOIN、GROUP BY、HAVING 等通常只有 SQL 才能够提供的高级查询特性，甚至还能够支持子查询。</p>\n</li>\n<li><p><strong>高级特性</strong></p>\n<p>JPA 中能够支持面向对象的高级特性，如类之间的继承、多态和类之间的复杂关系，这样的支持能够让开发者最大限度的使用面向对象的模型设计企业应用，而不需要自行处理这些特性在关系数据库的持久化。</p>\n</li>\n</ol>\n<a id=\"more\"></a>\n\n<h3 id=\"maven-配置\"><a href=\"#maven-配置\" class=\"headerlink\" title=\"maven 配置\"></a>maven 配置</h3><pre class=\"language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>spring-boot-starter-data-jpa<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>mysql<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>mysql-connector-java<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">&gt;</span></span>runtime<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>com.alibaba<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>druid-spring-boot-starter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>1.2.4<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.projectlombok<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>lombok<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>optional</span><span class=\"token punctuation\">&gt;</span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>optional</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>spring-boot-starter-test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">&gt;</span></span>test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n\n<h3 id=\"配置单数据源\"><a href=\"#配置单数据源\" class=\"headerlink\" title=\"配置单数据源\"></a>配置单数据源</h3><ol>\n<li><p>配置文件</p>\n<pre class=\"language-properties\" data-language=\"properties\"><code class=\"language-properties\"><span class=\"token attr-name\">spring.datasource.driverClassName</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">com.mysql.cj.jdbc.Driver</span>\n<span class=\"token attr-name\">spring.datasource.url</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">jdbc:mysql://localhost:3306/test?serverTimezone=UTC</span>\n<span class=\"token attr-name\">spring.datasource.username</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">xxx</span>\n<span class=\"token attr-name\">spring.datasource.password</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">xxx</span></code></pre>\n</li>\n<li><p>Bean</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Data</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>persistence<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Entity</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>persistence<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">GeneratedValue</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>persistence<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">GenerationType</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>persistence<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Id</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Date</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Entity</span>\n<span class=\"token annotation punctuation\">@Data</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Id</span>\n    <span class=\"token annotation punctuation\">@GeneratedValue</span><span class=\"token punctuation\">(</span>strategy <span class=\"token operator\">=</span> <span class=\"token class-name\">GenerationType</span><span class=\"token punctuation\">.</span>IDENTITY<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> username<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> nickname<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n</li>\n<li><p>Mapper</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>jueee<span class=\"token punctuation\">.</span>druid<span class=\"token punctuation\">.</span>bean<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">User</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>jpa<span class=\"token punctuation\">.</span>repository<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">JpaRepository</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>jpa<span class=\"token punctuation\">.</span>repository<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Query</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>repository<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Param</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">UserMapper</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">JpaRepository</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Query</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"SELECT t FROM User t WHERE username = :username\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token class-name\">User</span> <span class=\"token function\">findUserByName</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Param</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n</li>\n<li><p>Service</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>jueee<span class=\"token punctuation\">.</span>druid<span class=\"token punctuation\">.</span>bean<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">User</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>jueee<span class=\"token punctuation\">.</span>druid<span class=\"token punctuation\">.</span>mapper<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">UserMapper</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Autowired</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Service</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Service</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserService</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserMapper</span> userMapper<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span> <span class=\"token function\">findUserByName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">findUserByName</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n</li>\n<li><p>测试类</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>jueee<span class=\"token punctuation\">.</span>druid<span class=\"token punctuation\">.</span>bean<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">User</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span>extern<span class=\"token punctuation\">.</span>slf4j<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Slf4j</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span>jupiter<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Test</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Autowired</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringBootTest</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token annotation punctuation\">@SpringBootTest</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserServiceTest</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserService</span> userService<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">findUserByName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> userService<span class=\"token punctuation\">.</span><span class=\"token function\">findUserByName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">getUsername</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\"-\"</span><span class=\"token operator\">+</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">getNickname</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// admin-小章鱼</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">&gt;</span></span> list <span class=\"token operator\">=</span> userService<span class=\"token punctuation\">.</span><span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        list<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">-&gt;</span> log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span><span class=\"token function\">getUsername</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// admin</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n</li>\n</ol>\n<h3 id=\"配置多数据源\"><a href=\"#配置多数据源\" class=\"headerlink\" title=\"配置多数据源\"></a>配置多数据源</h3><p><strong>注意点</strong>：</p>\n<ul>\n<li>@Primary 注解的使用</li>\n<li>目录结构中，JPA 目录和实体类目录建议根据多数据源的配置进行分层，因为在多数据源配置中存在相关配置</li>\n</ul>\n<p>相关配置如下：</p>\n<ol>\n<li><p>配置文件</p>\n<pre class=\"language-properties\" data-language=\"properties\"><code class=\"language-properties\"><span class=\"token attr-name\">spring.datasource.first.driverClassName</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">com.mysql.cj.jdbc.Driver</span>\n<span class=\"token attr-name\">spring.datasource.first.url</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">jdbc:mysql://127.0.0.1:3306/vuedb?serverTimezone=UTC</span>\n<span class=\"token attr-name\">spring.datasource.first.username</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">xxx</span>\n<span class=\"token attr-name\">spring.datasource.first.password</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">xxx</span>\n\n<span class=\"token attr-name\">spring.datasource.second.driverClassName</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">com.mysql.cj.jdbc.Driver</span>\n<span class=\"token attr-name\">spring.datasource.second.url</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">jdbc:mysql://127.0.0.1:3306/test?serverTimezone=UTC</span>\n<span class=\"token attr-name\">spring.datasource.second.username</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">xxx</span>\n<span class=\"token attr-name\">spring.datasource.second.password</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">xxx</span></code></pre>\n</li>\n<li><p>多数据源配置：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>druid<span class=\"token punctuation\">.</span>spring<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>autoconfigure<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DruidDataSourceBuilder</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>properties<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ConfigurationProperties</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Bean</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Configuration</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Primary</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DataSource</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DruidDataSourceConfig</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Primary</span>\n    <span class=\"token annotation punctuation\">@ConfigurationProperties</span><span class=\"token punctuation\">(</span>prefix <span class=\"token operator\">=</span> <span class=\"token string\">\"spring.datasource.first\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token annotation punctuation\">@Bean</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"firstDataSource\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">DataSource</span> <span class=\"token function\">firstDataSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">DruidDataSourceBuilder</span><span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@ConfigurationProperties</span><span class=\"token punctuation\">(</span>prefix <span class=\"token operator\">=</span> <span class=\"token string\">\"spring.datasource.second\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token annotation punctuation\">@Bean</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"secondDataSource\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">DataSource</span> <span class=\"token function\">secondDataSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">DruidDataSourceBuilder</span><span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<div class=\"note warning\"><p>多数据源配置时，一定要区分主数据源和其他数据源。所以在主数据源初始化时一定要加上注解 @Peimary，其余数据源初始化不可以使用这个注解，否则报错。</p>\n</div>\n</li>\n<li><p>对应不同的数据源，需要匹配不同的 JPA</p>\n<p>主数据源 primary JPA 配置如下：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Autowired</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Qualifier</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>autoconfigure<span class=\"token punctuation\">.</span>orm<span class=\"token punctuation\">.</span>jpa<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HibernateProperties</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>autoconfigure<span class=\"token punctuation\">.</span>orm<span class=\"token punctuation\">.</span>jpa<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HibernateSettings</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>autoconfigure<span class=\"token punctuation\">.</span>orm<span class=\"token punctuation\">.</span>jpa<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">JpaProperties</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>orm<span class=\"token punctuation\">.</span>jpa<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">EntityManagerFactoryBuilder</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Bean</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Configuration</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Primary</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>jpa<span class=\"token punctuation\">.</span>repository<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">EnableJpaRepositories</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>orm<span class=\"token punctuation\">.</span>jpa<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">JpaTransactionManager</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>orm<span class=\"token punctuation\">.</span>jpa<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">LocalContainerEntityManagerFactoryBean</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>transaction<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PlatformTransactionManager</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>transaction<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">EnableTransactionManagement</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>persistence<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">EntityManager</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DataSource</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token annotation punctuation\">@EnableTransactionManagement</span>\n<span class=\"token annotation punctuation\">@EnableJpaRepositories</span><span class=\"token punctuation\">(</span>\n        entityManagerFactoryRef <span class=\"token operator\">=</span> <span class=\"token string\">\"entityManagerFactoryFirst\"</span><span class=\"token punctuation\">,</span>\n        transactionManagerRef <span class=\"token operator\">=</span> <span class=\"token string\">\"transactionManagerFirst\"</span><span class=\"token punctuation\">,</span>\n        basePackages <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"com.jueee.druid.mapper.first\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//设置Repository所在位置</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">JpaConfigFirst</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">JpaProperties</span> jpaProperties<span class=\"token punctuation\">;</span>\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">HibernateProperties</span> hibernateProperties<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token annotation punctuation\">@Qualifier</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"firstDataSource\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">DataSource</span> firstDataSource<span class=\"token punctuation\">;</span>\n\n\n\n    <span class=\"token annotation punctuation\">@Primary</span>\n    <span class=\"token annotation punctuation\">@Bean</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"entityManagerFirst\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">EntityManager</span> <span class=\"token function\">entityManager</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">EntityManagerFactoryBuilder</span> builder<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">entityManagerFactoryFirst</span><span class=\"token punctuation\">(</span>builder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">createEntityManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Primary</span>\n    <span class=\"token annotation punctuation\">@Bean</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"entityManagerFactoryFirst\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">LocalContainerEntityManagerFactoryBean</span> <span class=\"token function\">entityManagerFactoryFirst</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">EntityManagerFactoryBuilder</span> builder<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> builder\n                <span class=\"token punctuation\">.</span><span class=\"token function\">dataSource</span><span class=\"token punctuation\">(</span>firstDataSource<span class=\"token punctuation\">)</span><span class=\"token comment\">// 设置数据源</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">properties</span><span class=\"token punctuation\">(</span>jpaProperties<span class=\"token punctuation\">.</span><span class=\"token function\">getProperties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 设置jpa配置</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">properties</span><span class=\"token punctuation\">(</span><span class=\"token function\">getVendorProperties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 设置hibernate配置</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">packages</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.jueee.druid.bean.first\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//设置实体类所在位置</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">persistenceUnit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"firstPersistenceUnit\"</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 设置持久化单元名，用于@PersistenceContext注解获取EntityManager时指定数据源</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Map</span> <span class=\"token function\">getVendorProperties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> hibernateProperties<span class=\"token punctuation\">.</span><span class=\"token function\">determineHibernateProperties</span><span class=\"token punctuation\">(</span>jpaProperties<span class=\"token punctuation\">.</span><span class=\"token function\">getProperties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HibernateSettings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Primary</span>\n    <span class=\"token annotation punctuation\">@Bean</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"transactionManagerFirst\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">PlatformTransactionManager</span> <span class=\"token function\">transactionManagerFirst</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">EntityManagerFactoryBuilder</span> builder<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JpaTransactionManager</span><span class=\"token punctuation\">(</span><span class=\"token function\">entityManagerFactoryFirst</span><span class=\"token punctuation\">(</span>builder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<div class=\"note warning\"><p>主数据源 JPA 配置中，相对应的注入 bean 一定要加上注解 @Primary，否则报错！</p>\n</div>\n\n<p>第二数据源 JPA 配置如下：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Autowired</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Qualifier</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>autoconfigure<span class=\"token punctuation\">.</span>orm<span class=\"token punctuation\">.</span>jpa<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HibernateProperties</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>autoconfigure<span class=\"token punctuation\">.</span>orm<span class=\"token punctuation\">.</span>jpa<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HibernateSettings</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>autoconfigure<span class=\"token punctuation\">.</span>orm<span class=\"token punctuation\">.</span>jpa<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">JpaProperties</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>orm<span class=\"token punctuation\">.</span>jpa<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">EntityManagerFactoryBuilder</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Bean</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Configuration</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Primary</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>jpa<span class=\"token punctuation\">.</span>repository<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">EnableJpaRepositories</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>orm<span class=\"token punctuation\">.</span>jpa<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">JpaTransactionManager</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>orm<span class=\"token punctuation\">.</span>jpa<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">LocalContainerEntityManagerFactoryBean</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>transaction<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PlatformTransactionManager</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>transaction<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">EnableTransactionManagement</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>persistence<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">EntityManager</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DataSource</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token annotation punctuation\">@EnableTransactionManagement</span>\n<span class=\"token annotation punctuation\">@EnableJpaRepositories</span><span class=\"token punctuation\">(</span>\n        entityManagerFactoryRef <span class=\"token operator\">=</span> <span class=\"token string\">\"entityManagerFactorySecond\"</span><span class=\"token punctuation\">,</span>\n        transactionManagerRef <span class=\"token operator\">=</span> <span class=\"token string\">\"transactionManagerSecond\"</span><span class=\"token punctuation\">,</span>\n        basePackages <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"com.jueee.druid.mapper.second\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//设置Repository所在位置</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">JpaConfigSecond</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">JpaProperties</span> jpaProperties<span class=\"token punctuation\">;</span>\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">HibernateProperties</span> hibernateProperties<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token annotation punctuation\">@Qualifier</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"secondDataSource\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">DataSource</span> secondDataSource<span class=\"token punctuation\">;</span>\n\n\n\n    <span class=\"token annotation punctuation\">@Primary</span>\n    <span class=\"token annotation punctuation\">@Bean</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"entityManagerSecond\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">EntityManager</span> <span class=\"token function\">entityManager</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">EntityManagerFactoryBuilder</span> builder<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">entityManagerFactorySecond</span><span class=\"token punctuation\">(</span>builder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">createEntityManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Primary</span>\n    <span class=\"token annotation punctuation\">@Bean</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"entityManagerFactorySecond\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">LocalContainerEntityManagerFactoryBean</span> <span class=\"token function\">entityManagerFactorySecond</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">EntityManagerFactoryBuilder</span> builder<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> builder\n                <span class=\"token punctuation\">.</span><span class=\"token function\">dataSource</span><span class=\"token punctuation\">(</span>secondDataSource<span class=\"token punctuation\">)</span><span class=\"token comment\">// 设置数据源</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">properties</span><span class=\"token punctuation\">(</span>jpaProperties<span class=\"token punctuation\">.</span><span class=\"token function\">getProperties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 设置jpa配置</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">properties</span><span class=\"token punctuation\">(</span><span class=\"token function\">getVendorProperties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 设置hibernate配置</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">packages</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.jueee.druid.bean.second\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//设置实体类所在位置</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">persistenceUnit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"secondPersistenceUnit\"</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 设置持久化单元名，用于@PersistenceContext注解获取EntityManager时指定数据源</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Map</span> <span class=\"token function\">getVendorProperties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> hibernateProperties<span class=\"token punctuation\">.</span><span class=\"token function\">determineHibernateProperties</span><span class=\"token punctuation\">(</span>jpaProperties<span class=\"token punctuation\">.</span><span class=\"token function\">getProperties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HibernateSettings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Primary</span>\n    <span class=\"token annotation punctuation\">@Bean</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"transactionManagerSecond\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">PlatformTransactionManager</span> <span class=\"token function\">transactionManagerSecond</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">EntityManagerFactoryBuilder</span> builder<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JpaTransactionManager</span><span class=\"token punctuation\">(</span><span class=\"token function\">entityManagerFactorySecond</span><span class=\"token punctuation\">(</span>builder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n</li>\n<li><p>Bean</p>\n<p><code>com.jueee.druid.bean.first.User</code> 类：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Data</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>persistence<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Entity</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>persistence<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">GeneratedValue</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>persistence<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">GenerationType</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>persistence<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Id</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Date</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Entity</span>\n<span class=\"token annotation punctuation\">@Data</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Id</span>\n    <span class=\"token annotation punctuation\">@GeneratedValue</span><span class=\"token punctuation\">(</span>strategy <span class=\"token operator\">=</span> <span class=\"token class-name\">GenerationType</span><span class=\"token punctuation\">.</span>IDENTITY<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> username<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> nickname<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<p><code>com.jueee.druid.bean.second.Book</code> 类：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Data</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>persistence<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Entity</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>persistence<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">GeneratedValue</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>persistence<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">GenerationType</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>persistence<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Id</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Entity</span>\n<span class=\"token annotation punctuation\">@Data</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Book</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Id</span>\n    <span class=\"token annotation punctuation\">@GeneratedValue</span><span class=\"token punctuation\">(</span>strategy <span class=\"token operator\">=</span> <span class=\"token class-name\">GenerationType</span><span class=\"token punctuation\">.</span>IDENTITY<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> author<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> description<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> title<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n</li>\n<li><p>Mapper</p>\n<p><code>com.jueee.druid.mapper.first</code> 类：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>jueee<span class=\"token punctuation\">.</span>druid<span class=\"token punctuation\">.</span>bean<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">User</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>jpa<span class=\"token punctuation\">.</span>repository<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">JpaRepository</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>jpa<span class=\"token punctuation\">.</span>repository<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Query</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>repository<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Param</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">UserMapper</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">JpaRepository</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Query</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"SELECT t FROM User t WHERE username = :username\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token class-name\">User</span> <span class=\"token function\">findUserByName</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Param</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<p><code>com.jueee.druid.mapper.second</code> 类：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>jueee<span class=\"token punctuation\">.</span>druid<span class=\"token punctuation\">.</span>bean<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Book</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>jpa<span class=\"token punctuation\">.</span>repository<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">JpaRepository</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>jpa<span class=\"token punctuation\">.</span>repository<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Query</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>repository<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Param</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">BookMapper</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">JpaRepository</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Book</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Query</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"SELECT t FROM Book t WHERE title = :title\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token class-name\">Book</span> <span class=\"token function\">findUserByTitle</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Param</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"title\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n</li>\n<li><p>Service 和 Test 与单数据源一致，不再赘述。</p>\n</li>\n</ol>\n","categories":["Java","JavaJar","SpringBoot"],"tags":["Java","JavaJar","Alibaba","Druid","JPA"]},{"title":"SpringBoot 通过 Druid 集成 MyBatis 数据源","url":"/2020/12/2020-12-20-SpringBoot%E9%80%9A%E8%BF%87Druid%E9%9B%86%E6%88%90MyBatis%E6%95%B0%E6%8D%AE%E6%BA%90/","content":"<h3 id=\"MyBatis-介绍\"><a href=\"#MyBatis-介绍\" class=\"headerlink\" title=\"MyBatis 介绍\"></a>MyBatis 介绍</h3><p>MyBatis 是一款优秀的持久层框架，它支持自定义 SQL、存储过程以及高级映射。MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。MyBatis 可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"maven-配置\"><a href=\"#maven-配置\" class=\"headerlink\" title=\"maven 配置\"></a>maven 配置</h3><pre class=\"language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.mybatis.spring.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>mybatis-spring-boot-starter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>2.1.4<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>mysql<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>mysql-connector-java<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">&gt;</span></span>runtime<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>com.alibaba<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>druid-spring-boot-starter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>1.2.4<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.projectlombok<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>lombok<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>optional</span><span class=\"token punctuation\">&gt;</span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>optional</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>spring-boot-starter-test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">&gt;</span></span>test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n\n<h3 id=\"配置单数据源\"><a href=\"#配置单数据源\" class=\"headerlink\" title=\"配置单数据源\"></a>配置单数据源</h3><ol>\n<li><p>配置文件</p>\n<pre class=\"language-properties\" data-language=\"properties\"><code class=\"language-properties\"><span class=\"token attr-name\">spring.datasource.driverClassName</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">com.mysql.cj.jdbc.Driver</span>\n<span class=\"token attr-name\">spring.datasource.url</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">jdbc:mysql://localhost:3306/test?serverTimezone=UTC</span>\n<span class=\"token attr-name\">spring.datasource.username</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">xxx</span>\n<span class=\"token attr-name\">spring.datasource.password</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">xxx</span>\n\n<span class=\"token attr-name\">mybatis.mapper-locations</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">classpath:mapper/*Mapper.xml</span>\n<span class=\"token attr-name\">mybatis.type-aliases-package</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">com.jueee.bean</span></code></pre>\n</li>\n<li><p>Bean</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Data</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Data</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> username<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> nickname<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n</li>\n<li><p>Mapper</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>jueee<span class=\"token punctuation\">.</span>bean<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">User</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Repository</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Repository</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">UserMapper</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">User</span> <span class=\"token function\">selectById</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n</li>\n<li><p>Mapper</p>\n<pre class=\"language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span>\n<span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">mapper</span> <span class=\"token name\">PUBLIC</span> <span class=\"token string\">\"-//mybatis.org//DTD Mapper 3.0//EN\"</span> <span class=\"token string\">\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mapper</span> <span class=\"token attr-name\">namespace</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.jueee.mapper.UserMapper<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>selectById<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">resultType</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.jueee.bean.User<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n        select * from user where id = #{id}\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>mapper</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n</li>\n<li><p>Service</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>jueee<span class=\"token punctuation\">.</span>bean<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">User</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>jueee<span class=\"token punctuation\">.</span>mapper<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">UserMapper</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Autowired</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Service</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Service</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserService</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserMapper</span> userMapper<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span> <span class=\"token function\">selectById</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectById</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n</li>\n<li><p>测试类</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>jueee<span class=\"token punctuation\">.</span>bean<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">User</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span>extern<span class=\"token punctuation\">.</span>slf4j<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Slf4j</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span>jupiter<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Test</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Autowired</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringBootTest</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token annotation punctuation\">@SpringBootTest</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserServiceTest</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserService</span> userService<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">selectById</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> userService<span class=\"token punctuation\">.</span><span class=\"token function\">selectById</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">getNickname</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 小章鱼</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n</li>\n</ol>\n<h4 id=\"项目结构\"><a href=\"#项目结构\" class=\"headerlink\" title=\"项目结构\"></a>项目结构</h4><p><img src=\"/images/2020/12/image-20201218153328612.png\" alt=\"image-20201218153328612\" loading=\"lazy\"></p>\n<h3 id=\"配置多数据源\"><a href=\"#配置多数据源\" class=\"headerlink\" title=\"配置多数据源\"></a>配置多数据源</h3><p><strong>注意点</strong>：</p>\n<ul>\n<li>@Primary 注解的使用</li>\n<li>目录结构中，实体类目录建议根据多数据源的配置进行分层，因为在多数据源配置中存在相关配置</li>\n</ul>\n<p>相关配置如下：</p>\n<ol>\n<li><p>配置文件</p>\n<pre class=\"language-properties\" data-language=\"properties\"><code class=\"language-properties\"><span class=\"token attr-name\">spring.datasource.first.driverClassName</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">com.mysql.cj.jdbc.Driver</span>\n<span class=\"token attr-name\">spring.datasource.first.jdbc-url</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">jdbc:mysql://127.0.0.1:3306/vuedb?serverTimezone=UTC</span>\n<span class=\"token attr-name\">spring.datasource.first.username</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">xxx</span>\n<span class=\"token attr-name\">spring.datasource.first.password</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">xxx</span>\n\n<span class=\"token attr-name\">spring.datasource.second.driverClassName</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">com.mysql.cj.jdbc.Driver</span>\n<span class=\"token attr-name\">spring.datasource.second.jdbc-url</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">jdbc:mysql://127.0.0.1:3306/test?serverTimezone=UTC</span>\n<span class=\"token attr-name\">spring.datasource.second.username</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">xxx</span>\n<span class=\"token attr-name\">spring.datasource.second.password</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">xxx</span></code></pre>\n\n<div class=\"note warning\"><p>与单数据源配置 <code>spring.datasource.second.url</code> 不同，多数据源时需配置 <code>spring.datasource.second.jdbc-url</code>，否则会报错：</p>\n<pre class=\"language-none\"><code class=\"language-none\">jdbcUrl is required with driverClassName</code></pre>\n\n<p>spring.datasource.url 数据库的 JDBC URL。</p>\n<p>spring.datasource.jdbc-url 用来重写自定义连接池</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmctYm9vdC9kb2NzL2N1cnJlbnQvcmVmZXJlbmNlL2h0bWxzaW5nbGUvI2hvd3RvLWNvbmZpZ3VyZS1hLWRhdGFzb3VyY2U=\">官方文档<i class=\"fa fa-external-link-alt\"></i></span> 的解释是：</p>\n<p>因为连接池的实际类型没有被公开，所以在您的自定义数据源的元数据中没有生成密钥，而且在 IDE 中没有完成 (因为 DataSource 接口没有暴露属性)。</p>\n</div>\n</li>\n<li><p>对应不同的数据源，，进行匹配</p>\n<p>主数据源 primary 配置如下：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>ibatis<span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SqlSessionFactory</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>mybatis<span class=\"token punctuation\">.</span>spring<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SqlSessionFactoryBean</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>mybatis<span class=\"token punctuation\">.</span>spring<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SqlSessionTemplate</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>mybatis<span class=\"token punctuation\">.</span>spring<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MapperScan</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Qualifier</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>properties<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ConfigurationProperties</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>jdbc<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DataSourceBuilder</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Bean</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Configuration</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Primary</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span>support<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PathMatchingResourcePatternResolver</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DataSource</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token annotation punctuation\">@MapperScan</span><span class=\"token punctuation\">(</span>basePackages <span class=\"token operator\">=</span> <span class=\"token string\">\"com.jueee.mapper.first\"</span><span class=\"token punctuation\">,</span> sqlSessionFactoryRef <span class=\"token operator\">=</span> <span class=\"token string\">\"firstSqlSessionFactory\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DataSourceConfigFirst</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Primary</span> <span class=\"token comment\">// 表示这个数据源是默认数据源</span>\n    <span class=\"token annotation punctuation\">@Bean</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"firstDataSource\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token annotation punctuation\">@ConfigurationProperties</span><span class=\"token punctuation\">(</span>prefix <span class=\"token operator\">=</span> <span class=\"token string\">\"spring.datasource.first\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 读取application.properties中的配置参数映射成为一个对象</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">DataSource</span> <span class=\"token function\">getDateSource1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">DataSourceBuilder</span><span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Primary</span> <span class=\"token comment\">// 表示这个数据源是默认数据源</span>\n    <span class=\"token annotation punctuation\">@Bean</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"firstSqlSessionFactory\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">SqlSessionFactory</span> <span class=\"token function\">firstSqlSessionFactory</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Qualifier</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"firstDataSource\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">DataSource</span> datasource<span class=\"token punctuation\">)</span> <span class=\"token comment\">// @Qualifier表示查找Spring容器中名字为firstDataSource的对象</span>\n            <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">SqlSessionFactoryBean</span> bean <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SqlSessionFactoryBean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        bean<span class=\"token punctuation\">.</span><span class=\"token function\">setDataSource</span><span class=\"token punctuation\">(</span>datasource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        bean<span class=\"token punctuation\">.</span><span class=\"token function\">setMapperLocations</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">PathMatchingResourcePatternResolver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getResources</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"classpath*:mapper/first/*.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// // 设置mybatis的xml所在位置</span>\n        <span class=\"token keyword\">return</span> bean<span class=\"token punctuation\">.</span><span class=\"token function\">getObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Primary</span> <span class=\"token comment\">// 表示这个数据源是默认数据源</span>\n    <span class=\"token annotation punctuation\">@Bean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"firstSqlSessionTemplate\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">SqlSessionTemplate</span> <span class=\"token function\">firstSqlSessionTemplate</span><span class=\"token punctuation\">(</span>\n            <span class=\"token annotation punctuation\">@Qualifier</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"firstSqlSessionFactory\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">SqlSessionFactory</span> sessionFactory<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SqlSessionTemplate</span><span class=\"token punctuation\">(</span>sessionFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<div class=\"note warning\"><p>主数据源配置中，相对应的注入 bean 一定要加上注解 @Primary，否则报错！</p>\n</div>\n\n<p>第二数据源配置如下：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>ibatis<span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SqlSessionFactory</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>mybatis<span class=\"token punctuation\">.</span>spring<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SqlSessionFactoryBean</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>mybatis<span class=\"token punctuation\">.</span>spring<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SqlSessionTemplate</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>mybatis<span class=\"token punctuation\">.</span>spring<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MapperScan</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Qualifier</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>properties<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ConfigurationProperties</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>jdbc<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DataSourceBuilder</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Bean</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Configuration</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Primary</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span>support<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PathMatchingResourcePatternResolver</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DataSource</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token annotation punctuation\">@MapperScan</span><span class=\"token punctuation\">(</span>basePackages <span class=\"token operator\">=</span> <span class=\"token string\">\"com.jueee.mapper.second\"</span><span class=\"token punctuation\">,</span> sqlSessionFactoryRef <span class=\"token operator\">=</span> <span class=\"token string\">\"secondSqlSessionFactory\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DataSourceConfigSecond</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">// 将这个对象放入Spring容器中</span>\n    <span class=\"token annotation punctuation\">@Bean</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"secondDataSource\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token annotation punctuation\">@ConfigurationProperties</span><span class=\"token punctuation\">(</span>prefix <span class=\"token operator\">=</span> <span class=\"token string\">\"spring.datasource.second\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 读取application.properties中的配置参数映射成为一个对象</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">DataSource</span> <span class=\"token function\">getDateSource1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">DataSourceBuilder</span><span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Bean</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"secondSqlSessionFactory\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">SqlSessionFactory</span> <span class=\"token function\">secondSqlSessionFactory</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Qualifier</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"secondDataSource\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">DataSource</span> datasource<span class=\"token punctuation\">)</span> <span class=\"token comment\">// @Qualifier表示查找Spring容器中名字为secondDataSource的对象</span>\n            <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">SqlSessionFactoryBean</span> bean <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SqlSessionFactoryBean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        bean<span class=\"token punctuation\">.</span><span class=\"token function\">setDataSource</span><span class=\"token punctuation\">(</span>datasource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        bean<span class=\"token punctuation\">.</span><span class=\"token function\">setMapperLocations</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">PathMatchingResourcePatternResolver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getResources</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"classpath*:mapper/second/*.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// // 设置mybatis的xml所在位置</span>\n        <span class=\"token keyword\">return</span> bean<span class=\"token punctuation\">.</span><span class=\"token function\">getObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Bean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"secondSqlSessionTemplate\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">SqlSessionTemplate</span> <span class=\"token function\">secondSqlSessionTemplate</span><span class=\"token punctuation\">(</span>\n            <span class=\"token annotation punctuation\">@Qualifier</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"secondSqlSessionFactory\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">SqlSessionFactory</span> sessionFactory<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SqlSessionTemplate</span><span class=\"token punctuation\">(</span>sessionFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre>\n</li>\n<li><p>Bean</p>\n<p><code>com.jueee.bean.first.User</code> 类：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Data</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Data</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> username<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> nickname<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<p><code>com.jueee.bean.second.Book</code> 类：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Data</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Data</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Book</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> author<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> description<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> title<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n</li>\n<li><p>Mapper</p>\n<p><code>com.jueee.first</code> 类：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>jueee<span class=\"token punctuation\">.</span>bean<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">User</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Repository</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Repository</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">UserMapper</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">User</span> <span class=\"token function\">selectById</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<p><code>com.jueee.mapper.second</code> 类：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>jueee<span class=\"token punctuation\">.</span>bean<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Book</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Repository</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Repository</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">BookMapper</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Book</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">selectAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n</li>\n<li><p>Mapper 对应的 xml 文件。</p>\n<pre class=\"language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span>\n<span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">mapper</span> <span class=\"token name\">PUBLIC</span> <span class=\"token string\">\"-//mybatis.org//DTD Mapper 3.0//EN\"</span> <span class=\"token string\">\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mapper</span> <span class=\"token attr-name\">namespace</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.jueee.mapper.first.UserMapper<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>selectById<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">resultType</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.jueee.bean.first.User<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n        select * from user where id = #{id}\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>mapper</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n\n<pre class=\"language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span>\n<span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">mapper</span> <span class=\"token name\">PUBLIC</span> <span class=\"token string\">\"-//mybatis.org//DTD Mapper 3.0//EN\"</span> <span class=\"token string\">\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mapper</span> <span class=\"token attr-name\">namespace</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.jueee.mapper.second.BookMapper<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>resultMap</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>BaseResultMap<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.jueee.bean.second.Book<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>result</span> <span class=\"token attr-name\">column</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>id<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">jdbcType</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>INTEGER<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>id<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>result</span> <span class=\"token attr-name\">column</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>author<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">jdbcType</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>VARCHAR<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>author<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>result</span> <span class=\"token attr-name\">column</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>description<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">jdbcType</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>VARCHAR<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>description<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>result</span> <span class=\"token attr-name\">column</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>title<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">jdbcType</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>VARCHAR<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>title<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>resultMap</span><span class=\"token punctuation\">&gt;</span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>selectAll<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">resultMap</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>BaseResultMap<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n        select * from book\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>mapper</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n</li>\n<li><p>Service 和 Test 与单数据源一致，不再赘述。</p>\n</li>\n</ol>\n<h4 id=\"项目结构-1\"><a href=\"#项目结构-1\" class=\"headerlink\" title=\"项目结构\"></a>项目结构</h4><p><img src=\"/images/2020/12/image-20201218160646087.png\" alt=\"image-20201218160646087\" loading=\"lazy\"></p>\n<h3 id=\"注解匹配多数据源\"><a href=\"#注解匹配多数据源\" class=\"headerlink\" title=\"注解匹配多数据源\"></a>注解匹配多数据源</h3><p>相关配置如下：</p>\n<ol>\n<li><p>使用注解方式，需要引入 druid 包：</p>\n<pre class=\"language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>com.alibaba<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>druid-spring-boot-starter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>1.2.4<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n</li>\n<li><p>配置文件</p>\n<pre class=\"language-properties\" data-language=\"properties\"><code class=\"language-properties\"><span class=\"token attr-name\">spring.datasource.first.driverClassName</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">com.mysql.cj.jdbc.Driver</span>\n<span class=\"token attr-name\">spring.datasource.first.jdbc-url</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">jdbc:mysql://127.0.0.1:3306/vuedb?serverTimezone=UTC</span>\n<span class=\"token attr-name\">spring.datasource.first.username</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">xxx</span>\n<span class=\"token attr-name\">spring.datasource.first.password</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">xxx</span>\n\n<span class=\"token attr-name\">spring.datasource.second.driverClassName</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">com.mysql.cj.jdbc.Driver</span>\n<span class=\"token attr-name\">spring.datasource.second.jdbc-url</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">jdbc:mysql://127.0.0.1:3306/test?serverTimezone=UTC</span>\n<span class=\"token attr-name\">spring.datasource.second.username</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">xxx</span>\n<span class=\"token attr-name\">spring.datasource.second.password</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">xxx</span>\n\n<span class=\"token attr-name\">mybatis.mapper-location</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">classpath*:mapper/*.xml</span></code></pre>\n</li>\n<li><p>数据源通用方法 AbstractDatasource：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>druid<span class=\"token punctuation\">.</span>pool<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DruidDataSource</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>ibatis<span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SqlSessionFactory</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>mybatis<span class=\"token punctuation\">.</span>spring<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SqlSessionFactoryBean</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Resource</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span>support<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PathMatchingResourcePatternResolver</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span>support<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ResourcePatternResolver</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DataSource</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AbstractDbConfig</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">SqlSessionFactory</span> <span class=\"token function\">sqlSessionFactory</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DataSource</span> dataSource<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> mapperLocation<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">SqlSessionFactoryBean</span> factoryBean <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SqlSessionFactoryBean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        factoryBean<span class=\"token punctuation\">.</span><span class=\"token function\">setDataSource</span><span class=\"token punctuation\">(</span>dataSource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ResourcePatternResolver</span> resourceResolver <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PathMatchingResourcePatternResolver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Resource</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> resource<span class=\"token operator\">=</span> resourceResolver<span class=\"token punctuation\">.</span><span class=\"token function\">getResources</span><span class=\"token punctuation\">(</span>mapperLocation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        factoryBean<span class=\"token punctuation\">.</span><span class=\"token function\">setMapperLocations</span><span class=\"token punctuation\">(</span>resource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> factoryBean<span class=\"token punctuation\">.</span><span class=\"token function\">getObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">DataSource</span> <span class=\"token function\">dataSourceFactory</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> driveClassName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> url<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> userName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">DruidDataSource</span> datasource <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DruidDataSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        datasource<span class=\"token punctuation\">.</span><span class=\"token function\">setDriverClassName</span><span class=\"token punctuation\">(</span>driveClassName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        datasource<span class=\"token punctuation\">.</span><span class=\"token function\">setUrl</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        datasource<span class=\"token punctuation\">.</span><span class=\"token function\">setUsername</span><span class=\"token punctuation\">(</span>userName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        datasource<span class=\"token punctuation\">.</span><span class=\"token function\">setPassword</span><span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        datasource<span class=\"token punctuation\">.</span><span class=\"token function\">setMaxActive</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        datasource<span class=\"token punctuation\">.</span><span class=\"token function\">setInitialSize</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> datasource<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n</li>\n<li><p>对应不同的数据源，进行匹配</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>jueee<span class=\"token punctuation\">.</span>repository<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FirstRepository</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>mybatis<span class=\"token punctuation\">.</span>spring<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SqlSessionTemplate</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>mybatis<span class=\"token punctuation\">.</span>spring<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MapperScan</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Qualifier</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Value</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Bean</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Configuration</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>jdbc<span class=\"token punctuation\">.</span>datasource<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DataSourceTransactionManager</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>transaction<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PlatformTransactionManager</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DataSource</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token annotation punctuation\">@MapperScan</span><span class=\"token punctuation\">(</span>basePackages <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"com.jueee\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>annotationClass <span class=\"token operator\">=</span> <span class=\"token class-name\">FirstRepository</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>\n        sqlSessionTemplateRef <span class=\"token operator\">=</span> <span class=\"token string\">\"firstUserTemplate\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DataSourceConfigFirst</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractDbConfig</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"${spring.datasource.first.jdbc-url}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> url<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"${spring.datasource.first.username}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> userName<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"${spring.datasource.first.password}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> password<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"${spring.datasource.first.driver-class-name}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> driveClassName<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"${mybatis.mapper-location}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> mapperLocation<span class=\"token punctuation\">;</span>\n\n\n    <span class=\"token annotation punctuation\">@Bean</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"firstUser\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">DataSource</span> <span class=\"token function\">secondaryDataSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">dataSourceFactory</span><span class=\"token punctuation\">(</span>driveClassName<span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">,</span> userName<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Bean</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"firstUserTemplate\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">SqlSessionTemplate</span> <span class=\"token function\">firstUserSqlTemplate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SqlSessionTemplate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token function\">sqlSessionFactory</span><span class=\"token punctuation\">(</span><span class=\"token function\">secondaryDataSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> mapperLocation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token annotation punctuation\">@Qualifier</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"firstUserTransaction\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">PlatformTransactionManager</span> <span class=\"token function\">firstUserTransaction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DataSourceTransactionManager</span><span class=\"token punctuation\">(</span><span class=\"token function\">secondaryDataSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<p>第二数据源配置如下：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>jueee<span class=\"token punctuation\">.</span>repository<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SecondRepository</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>mybatis<span class=\"token punctuation\">.</span>spring<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SqlSessionTemplate</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>mybatis<span class=\"token punctuation\">.</span>spring<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MapperScan</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Qualifier</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Value</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Bean</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Configuration</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>jdbc<span class=\"token punctuation\">.</span>datasource<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DataSourceTransactionManager</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>transaction<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PlatformTransactionManager</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DataSource</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token annotation punctuation\">@MapperScan</span><span class=\"token punctuation\">(</span>basePackages <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"com.jueee\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>annotationClass <span class=\"token operator\">=</span> <span class=\"token class-name\">SecondRepository</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>\n        sqlSessionTemplateRef <span class=\"token operator\">=</span> <span class=\"token string\">\"secondUserTemplate\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DataSourceConfigSecond</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractDbConfig</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"${spring.datasource.second.jdbc-url}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> url<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"${spring.datasource.second.username}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> userName<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"${spring.datasource.second.password}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> password<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"${spring.datasource.second.driver-class-name}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> driveClassName<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"${mybatis.mapper-location}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> mapperLocation<span class=\"token punctuation\">;</span>\n\n\n    <span class=\"token annotation punctuation\">@Bean</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"secondUser\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">DataSource</span> <span class=\"token function\">secondaryDataSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">dataSourceFactory</span><span class=\"token punctuation\">(</span>driveClassName<span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">,</span> userName<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Bean</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"secondUserTemplate\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">SqlSessionTemplate</span> <span class=\"token function\">secondUserSqlTemplate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SqlSessionTemplate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token function\">sqlSessionFactory</span><span class=\"token punctuation\">(</span><span class=\"token function\">secondaryDataSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> mapperLocation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token annotation punctuation\">@Qualifier</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"secondUserTransaction\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">PlatformTransactionManager</span> <span class=\"token function\">secondUserTransaction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DataSourceTransactionManager</span><span class=\"token punctuation\">(</span><span class=\"token function\">secondaryDataSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n</li>\n<li><p>定义注解，分别作为不同数据库的表识。</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>ibatis<span class=\"token punctuation\">.</span>annotations<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Mapper</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Component</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Documented</span>\n<span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span>RUNTIME<span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>TYPE<span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token annotation punctuation\">@Mapper</span>\n<span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">FirstRepository</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">String</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>ibatis<span class=\"token punctuation\">.</span>annotations<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Mapper</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Component</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Documented</span>\n<span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span>RUNTIME<span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>TYPE<span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token annotation punctuation\">@Mapper</span>\n<span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">SecondRepository</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">String</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n</li>\n<li><p>Bean：</p>\n<p><code>com.jueee.bean.User</code> 类：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Data</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Data</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> username<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> nickname<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<p><code>com.jueee.bean.Book</code> 类：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Data</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Data</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Book</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> author<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> description<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> title<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n</li>\n<li><p>Mapper <code>com.jueee</code> 类：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>jueee<span class=\"token punctuation\">.</span>bean<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">User</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>jueee<span class=\"token punctuation\">.</span>repository<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FirstRepository</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@FirstRepository</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">UserMapper</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">User</span> <span class=\"token function\">selectById</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>jueee<span class=\"token punctuation\">.</span>bean<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Book</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>jueee<span class=\"token punctuation\">.</span>repository<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SecondRepository</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@SecondRepository</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">BookMapper</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Book</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">selectAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n</li>\n<li><p>Service 和 Test 与单数据源一致，不再赘述。</p>\n</li>\n</ol>\n<h4 id=\"项目结构-2\"><a href=\"#项目结构-2\" class=\"headerlink\" title=\"项目结构\"></a>项目结构</h4><p><img src=\"/images/2020/12/image-20201218164353447.png\" alt=\"image-20201218164353447\" loading=\"lazy\"></p>\n","categories":["Java","JavaJar","SpringBoot"],"tags":["Java","JavaJar","MyBatis","Druid"]},{"title":"利用 JODConverter 转化文档为 PDF 格式","url":"/2020/12/2020-12-22-%E5%88%A9%E7%94%A8JODConverter%E8%BD%AC%E5%8C%96%E6%96%87%E6%A1%A3%E4%B8%BAPDF%E6%A0%BC%E5%BC%8F/","content":"<h3 id=\"JODConverter-介绍\"><a href=\"#JODConverter-介绍\" class=\"headerlink\" title=\"JODConverter 介绍\"></a>JODConverter 介绍</h3><p>JODConverter，是一个 Java 的 OpenDocument 文件转换器，可以进行许多文件格式的转换。</p>\n<p>JODConverter 依赖于 OpenOffice.org 或者 LibreOffice 提供的服务来进行转换，它能将 Microsoft Office 文档（Word，Excel，PowerPoint）转换为 PDF 格式。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"老版本转换\"><a href=\"#老版本转换\" class=\"headerlink\" title=\"老版本转换\"></a>老版本转换</h3><h4 id=\"maven-引入\"><a href=\"#maven-引入\" class=\"headerlink\" title=\"maven 引入\"></a>maven 引入</h4><pre class=\"language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>com.artofsolving<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>jodconverter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>2.2.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n\n<h4 id=\"转换代码\"><a href=\"#转换代码\" class=\"headerlink\" title=\"转换代码\"></a>转换代码</h4><p>参数分别表示：</p>\n<ul>\n<li>ip：OpenOffice 服务的 IP 地址。</li>\n<li>port：OpenOffice 服务的端口地址。</li>\n<li>sourceFile：转换来源文档全路径。</li>\n<li>destFile：转换生成的 PDF 文档保存全路径。</li>\n</ul>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">office2PDF</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> ip<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> port<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> sourceFile<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> destFile<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">File</span> inputFile <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span>sourceFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>inputFile<span class=\"token punctuation\">.</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"找不到源文件\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 找不到源文件, 则返回-1</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// 如果目标路径不存在, 则新建该路径</span>\n        <span class=\"token class-name\">File</span> outputFile <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span>destFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>outputFile<span class=\"token punctuation\">.</span><span class=\"token function\">getParentFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            outputFile<span class=\"token punctuation\">.</span><span class=\"token function\">getParentFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">mkdirs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// connect to an OpenOffice.org instance running on port 8100</span>\n        <span class=\"token class-name\">OpenOfficeConnection</span> connection <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SocketOpenOfficeConnection</span><span class=\"token punctuation\">(</span>ip<span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        connection<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// convert</span>\n        <span class=\"token class-name\">DocumentConverter</span> converter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StreamOpenOfficeDocumentConverter</span><span class=\"token punctuation\">(</span>connection<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        converter<span class=\"token punctuation\">.</span><span class=\"token function\">convert</span><span class=\"token punctuation\">(</span>inputFile<span class=\"token punctuation\">,</span> outputFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// close the connection</span>\n        connection<span class=\"token punctuation\">.</span><span class=\"token function\">disconnect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"office2PDF path：\"</span> <span class=\"token operator\">+</span> destFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ConnectException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ConnectException\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<h3 id=\"新版本转换\"><a href=\"#新版本转换\" class=\"headerlink\" title=\"新版本转换\"></a>新版本转换</h3><h4 id=\"前期准备\"><a href=\"#前期准备\" class=\"headerlink\" title=\"前期准备\"></a>前期准备</h4><p>需要先在运行服务器，安装 OpenOffice。</p>\n<h4 id=\"maven引入\"><a href=\"#maven引入\" class=\"headerlink\" title=\"maven引入\"></a>maven 引入</h4><pre class=\"language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.jodconverter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>jodconverter-local<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>4.2.2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n\n<h4 id=\"转换代码-1\"><a href=\"#转换代码-1\" class=\"headerlink\" title=\"转换代码\"></a>转换代码</h4><pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">office2PDF</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> sourceFile<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> destFile<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">OfficeManager</span> officeManager\n            <span class=\"token operator\">=</span> <span class=\"token class-name\">LocalOfficeManager</span><span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">install</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">officeHome</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"C:\\\\Program Files (x86)\\\\OpenOffice 4\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">File</span> inputFile <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span>sourceFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>inputFile<span class=\"token punctuation\">.</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"找不到源文件\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 找不到源文件, 则返回-1</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// 如果目标路径不存在, 则新建该路径</span>\n        <span class=\"token class-name\">File</span> outputFile <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span>destFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>outputFile<span class=\"token punctuation\">.</span><span class=\"token function\">getParentFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            outputFile<span class=\"token punctuation\">.</span><span class=\"token function\">getParentFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">mkdirs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        officeManager<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Start the office process</span>\n        <span class=\"token class-name\">JodConverter</span><span class=\"token punctuation\">.</span><span class=\"token function\">convert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span>sourceFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">to</span><span class=\"token punctuation\">(</span>outputFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">OfficeUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">stopQuietly</span><span class=\"token punctuation\">(</span>officeManager<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Stop the office process</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<h4 id=\"配置信息\"><a href=\"#配置信息\" class=\"headerlink\" title=\"配置信息\"></a>配置信息</h4><p>使用 LocalOfficeManager 需要设置一些参数。使用 <strong>JODConverter</strong> 时，会采用默认配置。虽然这些配置信息不一定是最好的，但是他们更有可能被选中使用。</p>\n<ul>\n<li><strong>protNumbers</strong> 和 <strong>pipeNames</strong><br> OpenOffice  进程间的通信可以使用 TCP sockets 或者 命名管道。命名管道具有不占用 TCP 端口的优势（存在安全隐患），并且可能会更快一些。然而命名管道需要由 JVM 加载本地库，这意味着必须在 <code>java.library.path</code> 中设置路径，这就是为什么 <code>pipeNames</code> 不是默认配置的原因了。</li>\n<li><strong>officeHome</strong><br>该属性应该设置为 OpenOffice 的安装目录。若没有配置，则创建 OfficeManager 时会自动检测，从 LibreOffice（优先于 OpenOffice）的最新版本开始。</li>\n<li><strong>processManager</strong><br>JODConverter 开始处理一个 office 进程时，就需要使用到进程管理器。当它开始进行这项工作，就必须要检索该进程的 PID，以便在需要时能够 kill it。默认情况下，JODConverter 会根据 JODConverter 运行的操作系统来选择最佳的进程管理器。但是，在 <code>classpath</code> 中发现的，且继承了 <code>ProcessManager</code> 接口的进程管理器均可以被使用。</li>\n<li><strong>workingDir</strong><br>该属性用来设置 office 临时文件配置目录。每个 office 进程启动时，一个文件配置目录将会被创建。当使用 <code>InputStream/OutputStream</code> 来转换时，这个目录也会被创建。默认由指定的路径为 <code>java.io.tmpdir</code></li>\n<li><strong>templateProfileDir</strong><br>为了避免进程被中断或者用户使用了另一个 OpenOffice 实例，LocalOfficeManager 会为 OpenOffice 进程创建一个临时配置文件目录。使用这个属性，你可以提供一个包含个性化设置的临时配置文件目录。OfficeManager 会将以其为模板，来生成临时配置文件目录。所以当我们创建新的 OpenOffice 实例时，都会使用相同的配置。默认情况虾，这个临时的配置文件由 OpenOffice 使用默认配置来创建，并且其依赖于 <code>-nofirststartwizard</code> 这个命令选项。</li>\n<li><strong>killExistingProcess</strong><br>该属性能够指定，当一个包含相同 <code>connection string</code> 的 office 进程启动，是否杀死一个已经存在的 office 进程。默认为 <code>true</code>.</li>\n<li><strong>processTimeout</strong><br>当尝试调用一个 office 进程时（开始 / 中止），该属性可以设置超时时间，单位为毫秒。默认为 <code>120000</code>（2 minutes）</li>\n<li><strong>processRetryInterval</strong><br>每当尝试调用一个 office 进程时（开始 / 中止）的间隙，可用该属性设置延迟，单位为毫秒。默认为 <code>250</code>（0.25 seconds）</li>\n<li><strong>taskExecutionTimeout</strong><br>该属性设置执行一个任务的最大时间，若超过这个时间任务仍未执行，则当前任务被中止且执行下个任务。默认为 <code>12000</code>（两分钟）</li>\n<li><strong>maxTasksPerProcess</strong><br>该属性设置一个 office 进程在重启之前所能执行的最大任务数。默认为 <code>200</code> 个。</li>\n<li><strong>disableOpengl</strong><br>当启动一个新的 office 进程时（在 LibreOffice 的情况下），该属性能够指定是否禁止 OpenGL。如果 OpenGL 已经根据 office 进程使用的用户配置禁用，那么将不会执行任何操作。如果该属性改变，那么 office 进程必须重启。如果 LO 进程奔溃，那么你可以尝试测试该属性。默认为 <code>false</code></li>\n<li><strong>taskQueueTimeout</strong> 该属性用来设置一个任务在转换队列中的最大生存时间。如果等待时间超过最大生存时间或者有 <code>OfficeException</code> 异常抛出，则任务将会从队列中移除。默认为 <code>30000</code>（30 seconds）</li>\n</ul>\n","categories":["Java","Apache","JavaJar","OpenOffice"],"tags":["Apache","OpenOffice"]},{"title":"OpenOffice 简要介绍和安装说明","url":"/2020/12/2020-12-21-OpenOffice%E7%AE%80%E8%A6%81%E4%BB%8B%E7%BB%8D%E5%92%8C%E5%AE%89%E8%A3%85%E8%AF%B4%E6%98%8E/","content":"<h3 id=\"OpenOffice-介绍\"><a href=\"#OpenOffice-介绍\" class=\"headerlink\" title=\"OpenOffice 介绍\"></a>OpenOffice 介绍</h3><p><strong>OpenOffice.org</strong> 是一套跨平台的办公室软件套件，能在 Windows、Linux、MacOS X (X11)、和 Solaris 等操作系统上执行。它与各个主要的办公室软件套件兼容。</p>\n<p>OpenOffice.org 的主要模块有：</p>\n<ul>\n<li>Writer (文本文档)</li>\n<li>Calc (电子表格)</li>\n<li>Impress (演示文稿)</li>\n<li>Math (公式计算)</li>\n<li>Draw (画图)</li>\n<li>Base (数据库)</li>\n</ul>\n<a id=\"more\"></a>\n\n<h3 id=\"OpenOffice-相关链接\"><a href=\"#OpenOffice-相关链接\" class=\"headerlink\" title=\"OpenOffice 相关链接\"></a>OpenOffice 相关链接</h3><ul>\n<li>官网：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9vcGVub2ZmaWNlLmFwYWNoZS5vcmcvJUUzJTgwJTgxaHR0cDovL3d3dy5vcGVub2ZmaWNlLm9yZy8=\">https://openoffice.apache.org/、http://www.openoffice.org/<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li> 下载：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5vcGVub2ZmaWNlLm9yZy9kb3dubG9hZC8=\">http://www.openoffice.org/download/<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>GitHub：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FwYWNoZS9vcGVub2ZmaWNl\">https://github.com/apache/openoffice<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<h3 id=\"安装-OpenOffice\"><a href=\"#安装-OpenOffice\" class=\"headerlink\" title=\"安装 OpenOffice\"></a>安装 OpenOffice</h3><h4 id=\"Debian-安装\"><a href=\"#Debian-安装\" class=\"headerlink\" title=\"Debian 安装\"></a>Debian 安装</h4><ol>\n<li><p>下载 OpenOffice 软件包</p>\n<p>下载地址：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5vcGVub2ZmaWNlLm9yZy96aC1jbi9kb3dubG9hZC8=\">http://www.openoffice.org/zh-cn/download/<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>版本：deb 64 选择 <code>Linux 64-bit (x86-64) (DEB)</code></p>\n</li>\n<li><p>解压软件包</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">tar</span> -zxvf Apache_OpenOffice_4.1.7_Linux_x86-64_install-deb_zh-CN.tar.gz</code></pre>\n</li>\n<li><p>安装 OpenOffice</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> zh-CN/DEBS\n<span class=\"token function\">sudo</span> dpkg -i *.deb\n<span class=\"token builtin class-name\">cd</span> desktop-integration\n<span class=\"token function\">sudo</span> dpkg -i *.deb</code></pre>\n</li>\n<li><p>启动 OpenOffice</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> soffice --headless --accept<span class=\"token operator\">=</span><span class=\"token string\">\"socket,host=127.0.0.1,port=8100;urp;\"</span> --nofirststartwizard <span class=\"token operator\">&amp;</span></code></pre>\n\n</li>\n</ol>\n<h4 id=\"Windows-安装\"><a href=\"#Windows-安装\" class=\"headerlink\" title=\"Windows 安装\"></a>Windows 安装</h4><ol>\n<li>下载 <code>Apache_OpenOffice_4.1.8_Win_x86_install_zh-CN.exe</code></li>\n<li>双击进行安装。</li>\n<li>安装后，在 <code>C:\\Program Files (x86)\\OpenOffice 4</code>&nbsp;目录下。</li>\n</ol>\n<h4 id=\"异常处理\"><a href=\"#异常处理\" class=\"headerlink\" title=\"异常处理\"></a>异常处理</h4><p>运行程序报错：</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ soffice --headless --accept<span class=\"token operator\">=</span><span class=\"token string\">\"socket,host=127.0.0.1,port=8100;urp;\"</span> --nofirststartwizard\nX11 connection rejected because of wrong authentication.\nX11 connection rejected because of wrong authentication.\n/opt/openoffice4/program/soffice.bin X11 error: Can't <span class=\"token function\">open</span> display:\n   Set <span class=\"token environment constant\">DISPLAY</span> environment variable, use -display option\n   or check permissions of your X-Server\n   <span class=\"token punctuation\">(</span>See <span class=\"token string\">\"man X\"</span> resp. <span class=\"token string\">\"man xhost\"</span> <span class=\"token keyword\">for</span> details<span class=\"token punctuation\">)</span></code></pre>\n\n<p>需安装 X11：</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> xvfb\n<span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> x11-xserver-utils\n<span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> tightvncserver tightvnc-java</code></pre>\n\n\n\n","categories":["Apache","OpenOffice"],"tags":["Apache","OpenOffice"]},{"title":"SpringBoot 通过 Druid 集成 Tkmybatis","url":"/2020/12/2020-12-24-SpringBoot%E9%80%9A%E8%BF%87Druid%E9%9B%86%E6%88%90Tkmybatis/","content":"<h3 id=\"Tkmybatis-介绍\"><a href=\"#Tkmybatis-介绍\" class=\"headerlink\" title=\"Tkmybatis 介绍\"></a>Tkmybatis 介绍</h3><p>Tk mybatis 可以极大的方便开发人员。可以随意的按照自己的需要选择通用方法，还可以很方便的开发自己的通用方法。</p>\n<p>极其方便的使用 MyBatis 单表的增删改查。</p>\n<p>支持单表操作，不支持通用的多表联合查询。</p>\n<ul>\n<li>GitHub：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FiZWw1MzMvTWFwcGVy\">https://github.com/abel533/Mapper<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>JavaDoc：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9hcGlkb2MuZ2l0ZWUuY29tL2ZyZWUvTWFwcGVyLw==\">https://apidoc.gitee.com/free/Mapper/<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<a id=\"more\"></a>\n\n<h4 id=\"引入依赖\"><a href=\"#引入依赖\" class=\"headerlink\" title=\"引入依赖\"></a>引入依赖</h4><pre class=\"language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>tk.mybatis<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>mapper-spring-boot-starter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>2.1.5<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n\n<h3 id=\"Tkmybatis-单数据源\"><a href=\"#Tkmybatis-单数据源\" class=\"headerlink\" title=\"Tkmybatis 单数据源\"></a>Tkmybatis 单数据源</h3><ol start=\"2\">\n<li><p>配置文件：</p>\n<pre class=\"language-properties\" data-language=\"properties\"><code class=\"language-properties\"><span class=\"token attr-name\">spring.datasource.driverClassName</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">com.mysql.cj.jdbc.Driver</span>\n<span class=\"token attr-name\">spring.datasource.url</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">jdbc:mysql://127.0.0.1:3306/vuedb?serverTimezone=UTC</span>\n<span class=\"token attr-name\">spring.datasource.username</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">xxx</span>\n<span class=\"token attr-name\">spring.datasource.password</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">xxx</span></code></pre>\n</li>\n<li><p>Bean</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Data</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>persistence<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">GeneratedValue</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>persistence<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Id</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>persistence<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Table</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Data</span>\n<span class=\"token annotation punctuation\">@Table</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"user\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Id</span>\n    <span class=\"token annotation punctuation\">@GeneratedValue</span><span class=\"token punctuation\">(</span>generator <span class=\"token operator\">=</span> <span class=\"token string\">\"JDBC\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> username<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> nickname<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> email<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> phoneNumber<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> status<span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span></code></pre>\n</li>\n<li><p>Mapper</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>jueee<span class=\"token punctuation\">.</span>bean<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">User</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>ibatis<span class=\"token punctuation\">.</span>annotations<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Select</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">tk<span class=\"token punctuation\">.</span>mybatis<span class=\"token punctuation\">.</span>mapper<span class=\"token punctuation\">.</span>common<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Mapper</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">UserMapper</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Mapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Select</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"select * from user where username=#{username}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token class-name\">User</span> <span class=\"token function\">selectByUserName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n</li>\n<li><p>Service</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>jueee<span class=\"token punctuation\">.</span>bean<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">User</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>jueee<span class=\"token punctuation\">.</span>mapper<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">UserMapper</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Autowired</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Service</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Service</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserService</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserMapper</span> userMapper<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span> <span class=\"token function\">selectById</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectByPrimaryKey</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span> <span class=\"token function\">selectByUserName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        user<span class=\"token punctuation\">.</span><span class=\"token function\">setUsername</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectByUserName</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n</li>\n<li><p>Application</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>autoconfigure<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringBootApplication</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">tk<span class=\"token punctuation\">.</span>mybatis<span class=\"token punctuation\">.</span>spring<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MapperScan</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@MapperScan</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.jueee.mapper\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//扫描的mapper</span>\n<span class=\"token annotation punctuation\">@SpringBootApplication</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MysqlMybatisApplication</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MysqlMybatisApplication</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre>\n</li>\n<li><p>Test</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>jueee<span class=\"token punctuation\">.</span>bean<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">User</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span>extern<span class=\"token punctuation\">.</span>slf4j<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Slf4j</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span>jupiter<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Test</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Autowired</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringBootTest</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token annotation punctuation\">@SpringBootTest</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserServiceTest</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserService</span> userService<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">selectById</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> userService<span class=\"token punctuation\">.</span><span class=\"token function\">selectById</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">getNickname</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">selectByUserName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> userService<span class=\"token punctuation\">.</span><span class=\"token function\">selectByUserName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">getEmail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\"-\"</span><span class=\"token operator\">+</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">getNickname</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n</li>\n</ol>\n<h4 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h4><p><img src=\"/images/2020/12/image-20201222174948100.png\" alt=\"image-20201222174948100\" loading=\"lazy\"></p>\n<h3 id=\"Tkmybatis-多数据源\"><a href=\"#Tkmybatis-多数据源\" class=\"headerlink\" title=\"Tkmybatis 多数据源\"></a>Tkmybatis 多数据源</h3><p>相关配置如下：</p>\n<ol>\n<li><p>使用注解方式，需要引入 druid 包：</p>\n<pre class=\"language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>com.alibaba<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>druid-spring-boot-starter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>1.2.4<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n</li>\n<li><p>配置文件</p>\n<pre class=\"language-properties\" data-language=\"properties\"><code class=\"language-properties\"><span class=\"token attr-name\">spring.datasource.first.driverClassName</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">com.mysql.cj.jdbc.Driver</span>\n<span class=\"token attr-name\">spring.datasource.first.jdbc-url</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">jdbc:mysql://127.0.0.1:3306/vuedb?serverTimezone=UTC</span>\n<span class=\"token attr-name\">spring.datasource.first.username</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">xxx</span>\n<span class=\"token attr-name\">spring.datasource.first.password</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">xxx</span>\n\n<span class=\"token attr-name\">spring.datasource.second.driverClassName</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">com.mysql.cj.jdbc.Driver</span>\n<span class=\"token attr-name\">spring.datasource.second.jdbc-url</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">jdbc:mysql://127.0.0.1:3306/test?serverTimezone=UTC</span>\n<span class=\"token attr-name\">spring.datasource.second.username</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">xxx</span>\n<span class=\"token attr-name\">spring.datasource.second.password</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">xxx</span>\n\n<span class=\"token attr-name\">mybatis.mapper-location</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">classpath*:mapper/*.xml  </span></code></pre>\n</li>\n<li><p>数据源通用方法 AbstractDatasource：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>druid<span class=\"token punctuation\">.</span>pool<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DruidDataSource</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>ibatis<span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SqlSessionFactory</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>mybatis<span class=\"token punctuation\">.</span>spring<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SqlSessionFactoryBean</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Resource</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span>support<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PathMatchingResourcePatternResolver</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span>support<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ResourcePatternResolver</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DataSource</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AbstractDbConfig</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">SqlSessionFactory</span> <span class=\"token function\">sqlSessionFactory</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DataSource</span> dataSource<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> mapperLocation<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">SqlSessionFactoryBean</span> factoryBean <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SqlSessionFactoryBean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        factoryBean<span class=\"token punctuation\">.</span><span class=\"token function\">setDataSource</span><span class=\"token punctuation\">(</span>dataSource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ResourcePatternResolver</span> resourceResolver <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PathMatchingResourcePatternResolver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Resource</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> resource<span class=\"token operator\">=</span> resourceResolver<span class=\"token punctuation\">.</span><span class=\"token function\">getResources</span><span class=\"token punctuation\">(</span>mapperLocation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        factoryBean<span class=\"token punctuation\">.</span><span class=\"token function\">setMapperLocations</span><span class=\"token punctuation\">(</span>resource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> factoryBean<span class=\"token punctuation\">.</span><span class=\"token function\">getObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">DataSource</span> <span class=\"token function\">dataSourceFactory</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> driveClassName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> url<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> userName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">DruidDataSource</span> datasource <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DruidDataSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        datasource<span class=\"token punctuation\">.</span><span class=\"token function\">setDriverClassName</span><span class=\"token punctuation\">(</span>driveClassName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        datasource<span class=\"token punctuation\">.</span><span class=\"token function\">setUrl</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        datasource<span class=\"token punctuation\">.</span><span class=\"token function\">setUsername</span><span class=\"token punctuation\">(</span>userName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        datasource<span class=\"token punctuation\">.</span><span class=\"token function\">setPassword</span><span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        datasource<span class=\"token punctuation\">.</span><span class=\"token function\">setMaxActive</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        datasource<span class=\"token punctuation\">.</span><span class=\"token function\">setInitialSize</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> datasource<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n</li>\n<li><p>对应不同的数据源，进行匹配。注：需引入 <code>tk.mybatis.spring.annotation.MapperScan</code></p>\n<p>第一数据源配置如下：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>jueee<span class=\"token punctuation\">.</span>repository<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FirstRepository</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>mybatis<span class=\"token punctuation\">.</span>spring<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SqlSessionTemplate</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Qualifier</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Value</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Bean</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Configuration</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Primary</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>jdbc<span class=\"token punctuation\">.</span>datasource<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DataSourceTransactionManager</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>transaction<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PlatformTransactionManager</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">tk<span class=\"token punctuation\">.</span>mybatis<span class=\"token punctuation\">.</span>spring<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MapperScan</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DataSource</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token annotation punctuation\">@MapperScan</span><span class=\"token punctuation\">(</span>basePackages <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"com.jueee\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>annotationClass <span class=\"token operator\">=</span> <span class=\"token class-name\">FirstRepository</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>\n        sqlSessionTemplateRef <span class=\"token operator\">=</span> <span class=\"token string\">\"firstUserTemplate\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DataSourceConfigFirst</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractDbConfig</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"${spring.datasource.first.jdbc-url}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> url<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"${spring.datasource.first.username}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> userName<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"${spring.datasource.first.password}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> password<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"${spring.datasource.first.driver-class-name}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> driveClassName<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"${mybatis.mapper-location}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> mapperLocation<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Bean</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"firstUser\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">DataSource</span> <span class=\"token function\">secondaryDataSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">dataSourceFactory</span><span class=\"token punctuation\">(</span>driveClassName<span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">,</span> userName<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Primary</span>\n    <span class=\"token annotation punctuation\">@Bean</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"firstUserTemplate\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">SqlSessionTemplate</span> <span class=\"token function\">firstUserSqlTemplate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SqlSessionTemplate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token function\">sqlSessionFactory</span><span class=\"token punctuation\">(</span><span class=\"token function\">secondaryDataSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> mapperLocation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token annotation punctuation\">@Qualifier</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"firstUserTransaction\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">PlatformTransactionManager</span> <span class=\"token function\">firstUserTransaction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DataSourceTransactionManager</span><span class=\"token punctuation\">(</span><span class=\"token function\">secondaryDataSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<p>第二数据源配置如下：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>jueee<span class=\"token punctuation\">.</span>repository<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SecondRepository</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>mybatis<span class=\"token punctuation\">.</span>spring<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SqlSessionTemplate</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Qualifier</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Value</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Bean</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Configuration</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>jdbc<span class=\"token punctuation\">.</span>datasource<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DataSourceTransactionManager</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>transaction<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PlatformTransactionManager</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">tk<span class=\"token punctuation\">.</span>mybatis<span class=\"token punctuation\">.</span>spring<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MapperScan</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DataSource</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token annotation punctuation\">@MapperScan</span><span class=\"token punctuation\">(</span>basePackages <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"com.jueee\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>annotationClass <span class=\"token operator\">=</span> <span class=\"token class-name\">SecondRepository</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>\n        sqlSessionTemplateRef <span class=\"token operator\">=</span> <span class=\"token string\">\"secondUserTemplate\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DataSourceConfigSecond</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractDbConfig</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"${spring.datasource.second.jdbc-url}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> url<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"${spring.datasource.second.username}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> userName<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"${spring.datasource.second.password}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> password<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"${spring.datasource.second.driver-class-name}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> driveClassName<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"${mybatis.mapper-location}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> mapperLocation<span class=\"token punctuation\">;</span>\n\n\n    <span class=\"token annotation punctuation\">@Bean</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"secondUser\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">DataSource</span> <span class=\"token function\">secondaryDataSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">dataSourceFactory</span><span class=\"token punctuation\">(</span>driveClassName<span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">,</span> userName<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Bean</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"secondUserTemplate\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">SqlSessionTemplate</span> <span class=\"token function\">secondUserSqlTemplate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SqlSessionTemplate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token function\">sqlSessionFactory</span><span class=\"token punctuation\">(</span><span class=\"token function\">secondaryDataSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> mapperLocation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token annotation punctuation\">@Qualifier</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"secondUserTransaction\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">PlatformTransactionManager</span> <span class=\"token function\">secondUserTransaction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DataSourceTransactionManager</span><span class=\"token punctuation\">(</span><span class=\"token function\">secondaryDataSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n</li>\n<li><p>定义注解，分别作为不同数据库的表识。</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>ibatis<span class=\"token punctuation\">.</span>annotations<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Mapper</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Component</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Documented</span>\n<span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span>RUNTIME<span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>TYPE<span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token annotation punctuation\">@Mapper</span>\n<span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">FirstRepository</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">String</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>ibatis<span class=\"token punctuation\">.</span>annotations<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Mapper</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Component</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Documented</span>\n<span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span>RUNTIME<span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>TYPE<span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token annotation punctuation\">@Mapper</span>\n<span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">SecondRepository</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">String</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n</li>\n<li><p>Bean：</p>\n<p><code>com.jueee.bean.User</code> 类：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Data</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>persistence<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">GeneratedValue</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>persistence<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Id</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>persistence<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Table</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Data</span>\n<span class=\"token annotation punctuation\">@Table</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Id</span>\n    <span class=\"token annotation punctuation\">@GeneratedValue</span><span class=\"token punctuation\">(</span>generator <span class=\"token operator\">=</span> <span class=\"token string\">\"JDBC\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> username<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> nickname<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> email<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> phoneNumber<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> status<span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span></code></pre>\n\n<p><code>com.jueee.bean.Book</code> 类：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Data</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>persistence<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">GeneratedValue</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>persistence<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Id</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>persistence<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Table</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Data</span>\n<span class=\"token annotation punctuation\">@Table</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"book\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Book</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Id</span>\n    <span class=\"token annotation punctuation\">@GeneratedValue</span><span class=\"token punctuation\">(</span>generator <span class=\"token operator\">=</span> <span class=\"token string\">\"JDBC\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> author<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> description<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> title<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n</li>\n<li><p>Mapper <code>com.jueee</code> 类：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>jueee<span class=\"token punctuation\">.</span>bean<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">User</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>jueee<span class=\"token punctuation\">.</span>repository<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FirstRepository</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">tk<span class=\"token punctuation\">.</span>mybatis<span class=\"token punctuation\">.</span>mapper<span class=\"token punctuation\">.</span>common<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Mapper</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Serializable</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@FirstRepository</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">UserMapper</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Mapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">User</span> <span class=\"token function\">selectByUserName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Serializable</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>jueee<span class=\"token punctuation\">.</span>bean<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Book</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>jueee<span class=\"token punctuation\">.</span>repository<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SecondRepository</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">tk<span class=\"token punctuation\">.</span>mybatis<span class=\"token punctuation\">.</span>mapper<span class=\"token punctuation\">.</span>common<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Mapper</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@SecondRepository</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">BookMapper</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Mapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Book</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span></code></pre>\n</li>\n<li><p>Service 类如下：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>jueee<span class=\"token punctuation\">.</span>bean<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Book</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>jueee<span class=\"token punctuation\">.</span>mapper<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">BookMapper</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Autowired</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Service</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Service</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BookService</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">BookMapper</span> bookMapper<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Book</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">selectAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> bookMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre>\n\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>jueee<span class=\"token punctuation\">.</span>bean<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">User</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>jueee<span class=\"token punctuation\">.</span>mapper<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">UserMapper</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Autowired</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Service</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Service</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserService</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserMapper</span> userMapper<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span> <span class=\"token function\">selectById</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectByPrimaryKey</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span> <span class=\"token function\">selectByUserName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectByUserName</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n</li>\n<li><p>自定义 <code>selectByUserName</code> 方法对应的 Mapping.xml ：</p>\n<pre class=\"language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span>\n<span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">mapper</span> <span class=\"token name\">PUBLIC</span> <span class=\"token string\">\"-//mybatis.org//DTD Mapper 3.0//EN\"</span> <span class=\"token string\">\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mapper</span> <span class=\"token attr-name\">namespace</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.jueee.mapper.UserMapper<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>selectByUserName<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">resultType</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.jueee.bean.User<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n        select * from user where username = #{username}\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>mapper</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n</li>\n<li><p>测试类如下：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>jueee<span class=\"token punctuation\">.</span>bean<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Book</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>jueee<span class=\"token punctuation\">.</span>bean<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">User</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span>extern<span class=\"token punctuation\">.</span>slf4j<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Slf4j</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span>jupiter<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Test</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Autowired</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringBootTest</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token annotation punctuation\">@SpringBootTest</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserServiceTest</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserService</span> userService<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">BookService</span> bookService<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">selectUserById</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> userService<span class=\"token punctuation\">.</span><span class=\"token function\">selectById</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">getNickname</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">selectByUserName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> userService<span class=\"token punctuation\">.</span><span class=\"token function\">selectByUserName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">getEmail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\"-\"</span><span class=\"token operator\">+</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">getNickname</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">selectAllBook</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Book</span><span class=\"token punctuation\">&gt;</span></span> list <span class=\"token operator\">=</span> bookService<span class=\"token punctuation\">.</span><span class=\"token function\">selectAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        list<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>t<span class=\"token operator\">-&gt;</span>log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span><span class=\"token function\">getAuthor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n</li>\n</ol>\n<h4 id=\"目录结构-1\"><a href=\"#目录结构-1\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h4><p><img src=\"/images/2020/12/image-20201222192502651.png\" alt=\"image-20201222192502651\" loading=\"lazy\"></p>\n<h3 id=\"问题解决\"><a href=\"#问题解决\" class=\"headerlink\" title=\"问题解决\"></a>问题解决</h3><p>报错：</p>\n<p><img src=\"/images/2020/12/image-20201222143508821.png\" alt=\"image-20201222143508821\" loading=\"lazy\"></p>\n<p>解决办法，不是导入 <code>org.mybatis.spring.annotation.MapperScan</code>，应该导入 <code>tk.mybatis.spring.annotation.MapperScan</code> 包。</p>\n<p><img src=\"/images/2020/12/image-20201222143643372.png\" alt=\"image-20201222143643372\" loading=\"lazy\"></p>\n","categories":["Java","JavaJar","SpringBoot"],"tags":["Java","JavaJar","MyBatis","Druid","Tkmybatis"]},{"title":"JavaScript 校验密码复杂度","url":"/2020/12/2020-12-04-JavaScript%E6%A0%A1%E9%AA%8C%E5%AF%86%E7%A0%81%E5%A4%8D%E6%9D%82%E5%BA%A6/","content":"<p>1、密码中必须包含大小字母、数字、特称字符，至少 8 个字符，最多 30 个字符。</p>\n<pre class=\"language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> regex <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token string\">'(?=.*[0-9])(?=.*[A-Z])(?=.*[a-z])(?=.*[^a-zA-Z0-9]).{8,30}'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>regex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'123456@qq.com'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"密码中必须包含字母、数字、特殊字符，请重新设置！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<p>2、密码中必须包含字母、数字、特称字符，至少 8 个字符，最多 30 个字符。</p>\n<pre class=\"language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> regex <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token string\">'(?=.*[0-9])(?=.*[a-zA-Z])(?=.*[^a-zA-Z0-9]).{8,30}'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>regex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'123456@qq.com'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"密码中必须包含字母、数字、特殊字符，请重新设置！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>3、密码中必须包含字母、数字，至少 8 个字符，最多 30 个字符。</p>\n<pre class=\"language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> regex <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token string\">'(?=.*[0-9])(?=.*[a-zA-Z]).{8,30}'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>regex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'123456@qq.com'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"密码中必须包含字母、数字，请重新设置！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>","categories":["JavaScript"],"tags":["JavaScript"]},{"title":"Mybatis 增强工具包 MyBatis-Plus","url":"/2020/12/2020-12-03-Mybatis%E5%A2%9E%E5%BC%BA%E5%B7%A5%E5%85%B7%E5%8C%85MyBatis-Plus/","content":"<h3 id=\"MyBatis-Plus-介绍\"><a href=\"#MyBatis-Plus-介绍\" class=\"headerlink\" title=\"MyBatis-Plus 介绍\"></a>MyBatis-Plus 介绍</h3><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2Jhb21pZG91L215YmF0aXMtcGx1cw==\">MyBatis-Plus<i class=\"fa fa-external-link-alt\"></i></span>（简称 MP）是一个 <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5teWJhdGlzLm9yZy9teWJhdGlzLTMv\">MyBatis<i class=\"fa fa-external-link-alt\"></i></span>的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。</p>\n<ul>\n<li>官网：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYW9taWRvdS5jb20v\">https://baomidou.com/<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>GitHub：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2Jhb21pZG91L215YmF0aXMtcGx1cw==\">https://github.com/baomidou/mybatis-plus<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<h4 id=\"依赖引入\"><a href=\"#依赖引入\" class=\"headerlink\" title=\"依赖引入\"></a>依赖引入</h4><pre class=\"language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>com.baomidou<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>mybatis-plus-boot-starter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>3.4.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n\n<a id=\"more\"></a>\n\n<h3 id=\"MyBatis-Plus-特性\"><a href=\"#MyBatis-Plus-特性\" class=\"headerlink\" title=\"MyBatis-Plus 特性\"></a>MyBatis-Plus 特性</h3><ul>\n<li><strong>无侵入</strong>：只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑</li>\n<li><strong>损耗小</strong>：启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作</li>\n<li><strong>强大的 CRUD 操作</strong>：内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分 CRUD 操作，更有强大的条件构造器，满足各类使用需求</li>\n<li><strong>支持 Lambda 形式调用</strong>：通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错</li>\n<li><strong>支持主键自动生成</strong>：支持多达 4 种主键策略（内含分布式唯一 ID 生成器 - Sequence），可自由配置，完美解决主键问题</li>\n<li><strong>支持 ActiveRecord 模式</strong>：支持 ActiveRecord 形式调用，实体类只需继承 Model 类即可进行强大的 CRUD 操作</li>\n<li><strong>支持自定义全局通用操作</strong>：支持全局通用方法注入（ Write once, use anywhere ）</li>\n<li><strong>内置代码生成器</strong>：采用代码或者 Maven 插件可快速生成 Mapper 、 Model 、 Service 、 Controller 层代码，支持模板引擎，更有超多自定义配置等您来使用</li>\n<li><strong>内置分页插件</strong>：基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询</li>\n<li><strong>分页插件支持多种数据库</strong>：支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer 等多种数据库</li>\n<li><strong>内置性能分析插件</strong>：可输出 Sql 语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询</li>\n<li><strong>内置全局拦截插件</strong>：提供全表 delete 、 update 操作智能分析阻断，也可自定义拦截规则，预防误操作</li>\n</ul>\n<h3 id=\"MyBatis-Plus-基本操作\"><a href=\"#MyBatis-Plus-基本操作\" class=\"headerlink\" title=\"MyBatis-Plus 基本操作\"></a>MyBatis-Plus 基本操作</h3><h4 id=\"忽略字段\"><a href=\"#忽略字段\" class=\"headerlink\" title=\"忽略字段\"></a>忽略字段</h4><ul>\n<li>@TableField (exist = false)：表示该属性不为数据库表字段，但又是必须使用的。</li>\n<li>@TableField (exist = true)：表示该属性为数据库表字段。</li>\n</ul>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@TableField</span><span class=\"token punctuation\">(</span>exist <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> total<span class=\"token punctuation\">;</span></code></pre>\n\n<h4 id=\"查询操作\"><a href=\"#查询操作\" class=\"headerlink\" title=\"查询操作\"></a>查询操作</h4><h5 id=\"批量查询\"><a href=\"#批量查询\" class=\"headerlink\" title=\"批量查询\"></a>批量查询</h5><pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">&gt;</span></span> users <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectBatchIds</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nusers<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n<h5 id=\"自定义Map查询\"><a href=\"#自定义Map查询\" class=\"headerlink\" title=\"自定义Map查询\"></a>自定义 Map 查询</h5><pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">&gt;</span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Sandy\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">21</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">&gt;</span></span> users <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectByMap</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n<h5 id=\"条件构造器\"><a href=\"#条件构造器\" class=\"headerlink\" title=\"条件构造器\"></a>条件构造器</h5><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYW9taWRvdS5jb20vZ3VpZGUvd3JhcHBlci5odG1sI2Fic3RyYWN0d3JhcHBlcg==\">参考文档<i class=\"fa fa-external-link-alt\"></i></span></p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">&gt;</span></span> wrapper<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nwrapper<span class=\"token punctuation\">.</span><span class=\"token function\">like</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"author\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"tom\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Book</span><span class=\"token punctuation\">&gt;</span></span> list <span class=\"token operator\">=</span> bookService<span class=\"token punctuation\">.</span><span class=\"token function\">selectAll</span><span class=\"token punctuation\">(</span>wrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n<h5 id=\"主键查询\"><a href=\"#主键查询\" class=\"headerlink\" title=\"主键查询\"></a>主键查询</h5><p>确定主键：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@TableId</span><span class=\"token punctuation\">(</span>type <span class=\"token operator\">=</span> <span class=\"token class-name\">IdType</span><span class=\"token punctuation\">.</span>INPUT<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">private</span>  <span class=\"token class-name\">String</span>\t userid<span class=\"token punctuation\">;</span></code></pre>\n\n<p>主键查询：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\">userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectById</span><span class=\"token punctuation\">(</span>userid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n<h5 id=\"分页查询\"><a href=\"#分页查询\" class=\"headerlink\" title=\"分页查询\"></a>分页查询</h5><p>注册插件</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@MapperScan</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.jueee.mapper\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@EnableTransactionManagement</span>\n<span class=\"token annotation punctuation\">@Configuration</span> <span class=\"token comment\">// 配置类</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyBatisPlusConfig</span> <span class=\"token punctuation\">{</span>\n    \n    <span class=\"token annotation punctuation\">@Bean</span> <span class=\"token comment\">// 分页插件</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">PaginationInterceptor</span> <span class=\"token function\">paginationInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  \t\t<span class=\"token keyword\">return</span>  <span class=\"token keyword\">new</span> <span class=\"token class-name\">PaginationInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<p>如果自定义了 MybatisSqlSessionFactoryBean 需要手动加入插件，否则分页不生效：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">MybatisSqlSessionFactoryBean</span> factoryBean <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MybatisSqlSessionFactoryBean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nfactoryBean<span class=\"token punctuation\">.</span><span class=\"token function\">setPlugins</span><span class=\"token punctuation\">(</span><span class=\"token function\">paginationInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n<p>测试分页查询：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Page</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">&gt;</span></span> page <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Page</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 参数：当前页、页面大小</span>\nuserMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectPage</span><span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">,</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\npage<span class=\"token punctuation\">.</span><span class=\"token function\">getRecords</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 查询对象</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">.</span><span class=\"token function\">getTotal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 总数</span></code></pre>\n\n<h4 id=\"新增操作\"><a href=\"#新增操作\" class=\"headerlink\" title=\"新增操作\"></a>新增操作</h4><pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nuser<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mybatis-plus_insertTest\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nuser<span class=\"token punctuation\">.</span><span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nuser<span class=\"token punctuation\">.</span><span class=\"token function\">setEmail</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test@foxmail.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 帮我们自动生成id</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 受影响的行数，打印 1</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// User(id=1341988615581687810, name=mybatis-plus_insertTest, age=15, email=test@foxmail.com)</span></code></pre>\n\n<p><strong>主键自增策略：</strong></p>\n<ol>\n<li>实体类字段上 @TableId (type = IdType.AUTO)</li>\n<li> 数据库 id 字段设置为自增！</li>\n</ol>\n<p>其中， <code>com.baomidou.mybatisplus.annotation.IdType</code> 的类型选择如下：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">IdType</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">AUTO</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 数据库id自增</span>\n  <span class=\"token function\">NONE</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 未设置主键</span>\n  <span class=\"token function\">INPUT</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 手动输入</span>\n  <span class=\"token function\">ID_WORKER</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 默认的方式,全局唯一id</span>\n  <span class=\"token function\">UUID</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 全局唯一id uuid</span>\n  <span class=\"token function\">ID_WORKER_STR</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//ID_WORKER 字符串表示法</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<h4 id=\"更新操作\"><a href=\"#更新操作\" class=\"headerlink\" title=\"更新操作\"></a>更新操作</h4><pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 通过条件自动拼接动态sql</span>\nuser<span class=\"token punctuation\">.</span><span class=\"token function\">setId</span><span class=\"token punctuation\">(</span><span class=\"token number\">1341988615581687811L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nuser<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"kwhua_mybatis-plus_updateTest\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nuser<span class=\"token punctuation\">.</span><span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 注意：updateById 但是参数是一个对象！</span>\n<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">updateById</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 打印：1</span></code></pre>\n\n<h4 id=\"删除操作\"><a href=\"#删除操作\" class=\"headerlink\" title=\"删除操作\"></a>删除操作</h4><h5 id=\"根据ID删除\"><a href=\"#根据ID删除\" class=\"headerlink\" title=\"根据ID删除\"></a>根据 ID 删除</h5><pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\">userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">deleteById</span><span class=\"token punctuation\">(</span><span class=\"token number\">1L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n<h5 id=\"通过ID批量删除\"><a href=\"#通过ID批量删除\" class=\"headerlink\" title=\"通过ID批量删除\"></a>通过 ID 批量删除</h5><pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\">userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">deleteBatchIds</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token number\">2L</span><span class=\"token punctuation\">,</span><span class=\"token number\">3L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n<h5 id=\"通过map删除\"><a href=\"#通过map删除\" class=\"headerlink\" title=\"通过map删除\"></a>通过 map 删除</h5><pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">&gt;</span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"mybatis-plus_insertTest\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nuserMapper<span class=\"token punctuation\">.</span><span class=\"token function\">deleteByMap</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n<h3 id=\"MyBatis-Plus-高级操作\"><a href=\"#MyBatis-Plus-高级操作\" class=\"headerlink\" title=\"MyBatis-Plus 高级操作\"></a>MyBatis-Plus 高级操作</h3><h4 id=\"自动填充\"><a href=\"#自动填充\" class=\"headerlink\" title=\"自动填充\"></a>自动填充</h4><p>自动化完成创建时间、修改时间这两个字段的操作，我们不希望手动更新！</p>\n<ol>\n<li><p>在表中新增字段 gmt_create, gmt_modified。</p>\n</li>\n<li><p>实体类字段属性上需要增加注解</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@TableField</span><span class=\"token punctuation\">(</span>fill <span class=\"token operator\">=</span> <span class=\"token class-name\">FieldFill</span><span class=\"token punctuation\">.</span>INSERT<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">Date</span> gmt_create<span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@TableField</span><span class=\"token punctuation\">(</span>fill <span class=\"token operator\">=</span> <span class=\"token class-name\">FieldFill</span><span class=\"token punctuation\">.</span>INSERT_UPDATE<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">Date</span> gmt_modified<span class=\"token punctuation\">;</span></code></pre>\n</li>\n<li><p>编写处理器来处理这个注解</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>baomidou<span class=\"token punctuation\">.</span>mybatisplus<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>handlers<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MetaObjectHandler</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span>extern<span class=\"token punctuation\">.</span>slf4j<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Slf4j</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>ibatis<span class=\"token punctuation\">.</span>reflection<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MetaObject</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Component</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Date</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token annotation punctuation\">@Component</span> <span class=\"token comment\">// 一定不要忘记把处理器加到IOC容器中！</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyMetaObjectHandler</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">MetaObjectHandler</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 插入时的填充策略</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">insertFill</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MetaObject</span> metaObject<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"start insert fill.....\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// setFieldValByName(String fieldName, Object fieldVal, MetaObject metaObject</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setFieldValByName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"gmt_create\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>metaObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setFieldValByName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"gmt_modified\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>metaObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 更新时的填充策略</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">updateFill</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MetaObject</span> metaObject<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"start update fill.....\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setFieldValByName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"gmt_modified\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>metaObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n</li>\n<li><p>注入 Handler</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">protected</span> <span class=\"token class-name\">SqlSessionFactory</span> <span class=\"token function\">sqlSessionFactory</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DataSource</span> dataSource<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> mapperLocation<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">MybatisSqlSessionFactoryBean</span> factoryBean <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MybatisSqlSessionFactoryBean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    factoryBean<span class=\"token punctuation\">.</span><span class=\"token function\">setDataSource</span><span class=\"token punctuation\">(</span>dataSource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">ResourcePatternResolver</span> resourceResolver <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PathMatchingResourcePatternResolver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Resource</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> resource<span class=\"token operator\">=</span> resourceResolver<span class=\"token punctuation\">.</span><span class=\"token function\">getResources</span><span class=\"token punctuation\">(</span>mapperLocation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    factoryBean<span class=\"token punctuation\">.</span><span class=\"token function\">setMapperLocations</span><span class=\"token punctuation\">(</span>resource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 将 MyMetaObjectHandler 设置进入 GlobalConfig</span>\n    <span class=\"token class-name\">GlobalConfig</span> globalConfig <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GlobalConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    globalConfig<span class=\"token punctuation\">.</span><span class=\"token function\">setMetaObjectHandler</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">MyMetaObjectHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    factoryBean<span class=\"token punctuation\">.</span><span class=\"token function\">setGlobalConfig</span><span class=\"token punctuation\">(</span>globalConfig<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> factoryBean<span class=\"token punctuation\">.</span><span class=\"token function\">getObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n</li>\n<li><p>测试插入和更新，检查时间变化。</p>\n</li>\n</ol>\n<h4 id=\"乐观锁\"><a href=\"#乐观锁\" class=\"headerlink\" title=\"乐观锁\"></a>乐观锁</h4><p>乐观锁：顾名思义，十分乐观，它总是认为不会出现问题，无论干什么不去上锁！如果出现了问题， 再次更新值测试。</p>\n<p>悲观锁：顾名思义，十分悲观，它总是认为总是出现问题，无论干什么都会上锁！再去操作！</p>\n<p>乐观锁实现方式：取出记录时，获取当前 version 更新时，带上这个 version 执行更新时， set version = newVersion where version = oldVersion 如果 version 不对，就更新失败。</p>\n<ol>\n<li><p>给数据库中增加 version 字段！</p>\n</li>\n<li><p>实体类加对应的字段</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Version</span> <span class=\"token comment\">//乐观锁Version注解</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> version<span class=\"token punctuation\">;</span></code></pre>\n</li>\n<li><p>注册插件</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@MapperScan</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.jueee.mapper\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@EnableTransactionManagement</span>\n<span class=\"token annotation punctuation\">@Configuration</span> <span class=\"token comment\">// 配置类</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyBatisPlusConfig</span> <span class=\"token punctuation\">{</span>\n    \n    <span class=\"token annotation punctuation\">@Bean</span> <span class=\"token comment\">// 注册乐观锁插件</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">OptimisticLockerInterceptor</span> <span class=\"token function\">optimisticLockerInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OptimisticLockerInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n</li>\n<li><p>乐观锁测试</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 先查询user</span>\nuser<span class=\"token punctuation\">.</span><span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nuserMapper<span class=\"token punctuation\">.</span><span class=\"token function\">updateById</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 然后更新，version字段已经由1变成了2</span></code></pre>\n\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 线程 1</span>\n<span class=\"token class-name\">User</span> user1 <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectById</span><span class=\"token punctuation\">(</span><span class=\"token number\">1L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nuser1<span class=\"token punctuation\">.</span><span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 模拟另外一个线程执行了插队操作</span>\n<span class=\"token class-name\">User</span> user2 <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectById</span><span class=\"token punctuation\">(</span><span class=\"token number\">1L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nuser2<span class=\"token punctuation\">.</span><span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> update2 <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">updateById</span><span class=\"token punctuation\">(</span>user2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlog<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"update2:\"</span><span class=\"token operator\">+</span>update2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// update2:1</span>\n<span class=\"token keyword\">int</span> update1 <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">updateById</span><span class=\"token punctuation\">(</span>user1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 如果没有乐观锁就会覆盖插队线程的值！</span>\nlog<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"update1:\"</span><span class=\"token operator\">+</span>update1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// update1:0</span></code></pre>\n\n</li>\n</ol>\n<p>如果自定义了 MybatisSqlSessionFactoryBean 需要手动加入插件：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">MybatisSqlSessionFactoryBean</span> factoryBean <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MybatisSqlSessionFactoryBean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nfactoryBean<span class=\"token punctuation\">.</span><span class=\"token function\">setPlugins</span><span class=\"token punctuation\">(</span><span class=\"token function\">optimisticLockerInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n<p>否则会报错：</p>\n<blockquote>\n<p>org.apache.ibatis.binding.BindingException: Parameter 'MP_OPTLOCK_VERSION_ORIGINAL' not found. Available parameters are [param1, et]</p>\n</blockquote>\n<h4 id=\"逻辑删除\"><a href=\"#逻辑删除\" class=\"headerlink\" title=\"逻辑删除\"></a>逻辑删除</h4><ol>\n<li><p>在数据库加上 is_deleted 字段，默认值为 0（未删除）</p>\n</li>\n<li><p>实体类中增加属性</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@TableLogic</span> <span class=\"token comment\">//逻辑删除</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> is_deleted<span class=\"token punctuation\">;</span></code></pre>\n</li>\n<li><p>配置文件配置：</p>\n<pre class=\"language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">mybatis-plus</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">global-config</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">db-config</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">logic-delete-value</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span> <span class=\"token comment\"># 逻辑已删除值(默认为 1)</span>\n      <span class=\"token key atrule\">logic-not-delete-value</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span> <span class=\"token comment\"># 逻辑未删除值(默认为 0)</span></code></pre>\n\n</li>\n</ol>\n<p>测试删除，is_deleted 字段值也从 0 修改成了 1：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\">userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">deleteById</span><span class=\"token punctuation\">(</span><span class=\"token number\">4L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n<p><img src=\"/images/2020/12/image-20201225160326916.png\" alt=\"image-20201225160326916\" loading=\"lazy\"></p>\n<p>此时，查询分页时，也会自动携带 <code>is_deleted=0</code> 的查询条件。</p>\n<p><img src=\"/images/2020/12/image-20201225160519777.png\" alt=\"image-20201225160519777\" loading=\"lazy\"></p>\n<h4 id=\"性能分析插件\"><a href=\"#性能分析插件\" class=\"headerlink\" title=\"性能分析插件\"></a>性能分析插件</h4><p>导入插件：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Bean</span>\n<span class=\"token annotation punctuation\">@Profile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"dev\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 设置 dev test 环境开启，保证我们的效率</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">PerformanceInterceptor</span> <span class=\"token function\">performanceInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">PerformanceInterceptor</span> performanceInterceptor <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PerformanceInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    performanceInterceptor<span class=\"token punctuation\">.</span><span class=\"token function\">setMaxTime</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//ms 设置sql执行的最大时间，如果超过了则不执行</span>\n    performanceInterceptor<span class=\"token punctuation\">.</span><span class=\"token function\">setFormat</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> performanceInterceptor<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<p>但是官方在 3.2.0 版本移除 PerformanceInterceptor 了相关，建议使用 p6spy。<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2Jhb21pZG91L215YmF0aXMtcGx1cy9ibG9iLzMuMC9DSEFOR0VMT0cubWQjdjMyMC0yMDE5MDgyNg==\">更新文档<i class=\"fa fa-external-link-alt\"></i></span></p>\n","categories":["Java","JavaJar"],"tags":["Java","JavaJar","MyBatis"]},{"title":"SpringBoot 通过 Druid 多数据源集成 MyBatis-Plus","url":"/2020/12/2020-12-23-SpringBoot%E9%80%9A%E8%BF%87Druid%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E9%9B%86%E6%88%90MyBatis-Plus/","content":"<p>需要引入 maven 包：</p>\n<pre class=\"language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>com.baomidou<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>mybatis-plus-boot-starter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>3.4.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>mysql<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>mysql-connector-java<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">&gt;</span></span>runtime<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>com.alibaba<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>druid-spring-boot-starter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>1.2.4<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.projectlombok<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>lombok<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>optional</span><span class=\"token punctuation\">&gt;</span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>optional</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n\n<a id=\"more\"></a>\n\n<h3 id=\"Druid-注解多数据源\"><a href=\"#Druid-注解多数据源\" class=\"headerlink\" title=\"Druid 注解多数据源\"></a>Druid 注解多数据源</h3><h4 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h4><pre class=\"language-properties\" data-language=\"properties\"><code class=\"language-properties\"><span class=\"token attr-name\">spring.datasource.first.driverClassName</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">com.mysql.cj.jdbc.Driver</span>\n<span class=\"token attr-name\">spring.datasource.first.jdbc-url</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">jdbc:mysql://127.0.0.1:3306/vuedb?serverTimezone=UTC</span>\n<span class=\"token attr-name\">spring.datasource.first.username</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">xxx</span>\n<span class=\"token attr-name\">spring.datasource.first.password</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">xxx</span>\n\n<span class=\"token attr-name\">spring.datasource.second.driverClassName</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">com.mysql.cj.jdbc.Driver</span>\n<span class=\"token attr-name\">spring.datasource.second.jdbc-url</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">jdbc:mysql://127.0.0.1:3306/test?serverTimezone=UTC</span>\n<span class=\"token attr-name\">spring.datasource.second.username</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">xxx</span>\n<span class=\"token attr-name\">spring.datasource.second.password</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">xxx</span>\n\n<span class=\"token attr-name\">mybatis.mapper-location</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">classpath*:mapper/*.xml</span></code></pre>\n\n<h4 id=\"数据源配置\"><a href=\"#数据源配置\" class=\"headerlink\" title=\"数据源配置\"></a>数据源配置</h4><ol>\n<li><p>数据源通用方法 AbstractDatasource：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>druid<span class=\"token punctuation\">.</span>pool<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DruidDataSource</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>baomidou<span class=\"token punctuation\">.</span>mybatisplus<span class=\"token punctuation\">.</span>extension<span class=\"token punctuation\">.</span>spring<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MybatisSqlSessionFactoryBean</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>ibatis<span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SqlSessionFactory</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Resource</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span>support<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PathMatchingResourcePatternResolver</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span>support<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ResourcePatternResolver</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DataSource</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AbstractDbConfig</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">SqlSessionFactory</span> <span class=\"token function\">sqlSessionFactory</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DataSource</span> dataSource<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> mapperLocation<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">MybatisSqlSessionFactoryBean</span> factoryBean <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MybatisSqlSessionFactoryBean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        factoryBean<span class=\"token punctuation\">.</span><span class=\"token function\">setDataSource</span><span class=\"token punctuation\">(</span>dataSource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ResourcePatternResolver</span> resourceResolver <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PathMatchingResourcePatternResolver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Resource</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> resource<span class=\"token operator\">=</span> resourceResolver<span class=\"token punctuation\">.</span><span class=\"token function\">getResources</span><span class=\"token punctuation\">(</span>mapperLocation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        factoryBean<span class=\"token punctuation\">.</span><span class=\"token function\">setMapperLocations</span><span class=\"token punctuation\">(</span>resource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> factoryBean<span class=\"token punctuation\">.</span><span class=\"token function\">getObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">DataSource</span> <span class=\"token function\">dataSourceFactory</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> driveClassName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> url<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> userName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">DruidDataSource</span> datasource <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DruidDataSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        datasource<span class=\"token punctuation\">.</span><span class=\"token function\">setDriverClassName</span><span class=\"token punctuation\">(</span>driveClassName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        datasource<span class=\"token punctuation\">.</span><span class=\"token function\">setUrl</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        datasource<span class=\"token punctuation\">.</span><span class=\"token function\">setUsername</span><span class=\"token punctuation\">(</span>userName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        datasource<span class=\"token punctuation\">.</span><span class=\"token function\">setPassword</span><span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        datasource<span class=\"token punctuation\">.</span><span class=\"token function\">setMaxActive</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        datasource<span class=\"token punctuation\">.</span><span class=\"token function\">setInitialSize</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> datasource<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<div class=\"note warning\"><p>在这个配置类中，应该使用 <code>MybatisSqlSessionFactoryBean</code> 而不是 <code>SqlSessionFactoryBean</code>，否则会报错：</p>\n<blockquote>\n<p>Invalid bound statement (not found)</p>\n</blockquote>\n</div>\n</li>\n<li><p>对应不同的数据源，进行匹配</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>jueee<span class=\"token punctuation\">.</span>repository<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FirstRepository</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>mybatis<span class=\"token punctuation\">.</span>spring<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SqlSessionTemplate</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>mybatis<span class=\"token punctuation\">.</span>spring<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MapperScan</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Qualifier</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Value</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Bean</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Configuration</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>jdbc<span class=\"token punctuation\">.</span>datasource<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DataSourceTransactionManager</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>transaction<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PlatformTransactionManager</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DataSource</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token annotation punctuation\">@MapperScan</span><span class=\"token punctuation\">(</span>basePackages <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"com.jueee\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>annotationClass <span class=\"token operator\">=</span> <span class=\"token class-name\">FirstRepository</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>\n        sqlSessionTemplateRef <span class=\"token operator\">=</span> <span class=\"token string\">\"firstUserTemplate\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DataSourceConfigFirst</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractDbConfig</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"${spring.datasource.first.jdbc-url}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> url<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"${spring.datasource.first.username}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> userName<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"${spring.datasource.first.password}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> password<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"${spring.datasource.first.driver-class-name}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> driveClassName<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"${mybatis.mapper-location}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> mapperLocation<span class=\"token punctuation\">;</span>\n\n\n    <span class=\"token annotation punctuation\">@Bean</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"firstUser\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">DataSource</span> <span class=\"token function\">secondaryDataSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">dataSourceFactory</span><span class=\"token punctuation\">(</span>driveClassName<span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">,</span> userName<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Bean</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"firstUserTemplate\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">SqlSessionTemplate</span> <span class=\"token function\">firstUserSqlTemplate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SqlSessionTemplate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token function\">sqlSessionFactory</span><span class=\"token punctuation\">(</span><span class=\"token function\">secondaryDataSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> mapperLocation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token annotation punctuation\">@Qualifier</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"firstUserTransaction\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">PlatformTransactionManager</span> <span class=\"token function\">firstUserTransaction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DataSourceTransactionManager</span><span class=\"token punctuation\">(</span><span class=\"token function\">secondaryDataSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<p>第二数据源配置如下：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>jueee<span class=\"token punctuation\">.</span>repository<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SecondRepository</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>mybatis<span class=\"token punctuation\">.</span>spring<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SqlSessionTemplate</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>mybatis<span class=\"token punctuation\">.</span>spring<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MapperScan</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Qualifier</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Value</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Bean</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Configuration</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>jdbc<span class=\"token punctuation\">.</span>datasource<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DataSourceTransactionManager</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>transaction<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PlatformTransactionManager</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DataSource</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token annotation punctuation\">@MapperScan</span><span class=\"token punctuation\">(</span>basePackages <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"com.jueee\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>annotationClass <span class=\"token operator\">=</span> <span class=\"token class-name\">SecondRepository</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>\n        sqlSessionTemplateRef <span class=\"token operator\">=</span> <span class=\"token string\">\"secondUserTemplate\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DataSourceConfigSecond</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractDbConfig</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"${spring.datasource.second.jdbc-url}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> url<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"${spring.datasource.second.username}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> userName<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"${spring.datasource.second.password}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> password<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"${spring.datasource.second.driver-class-name}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> driveClassName<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"${mybatis.mapper-location}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> mapperLocation<span class=\"token punctuation\">;</span>\n\n\n    <span class=\"token annotation punctuation\">@Bean</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"secondUser\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">DataSource</span> <span class=\"token function\">secondaryDataSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">dataSourceFactory</span><span class=\"token punctuation\">(</span>driveClassName<span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">,</span> userName<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Bean</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"secondUserTemplate\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">SqlSessionTemplate</span> <span class=\"token function\">secondUserSqlTemplate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SqlSessionTemplate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token function\">sqlSessionFactory</span><span class=\"token punctuation\">(</span><span class=\"token function\">secondaryDataSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> mapperLocation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token annotation punctuation\">@Qualifier</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"secondUserTransaction\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">PlatformTransactionManager</span> <span class=\"token function\">secondUserTransaction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DataSourceTransactionManager</span><span class=\"token punctuation\">(</span><span class=\"token function\">secondaryDataSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n</li>\n</ol>\n<h4 id=\"定义注解\"><a href=\"#定义注解\" class=\"headerlink\" title=\"定义注解\"></a>定义注解</h4><p>定义注解，分别作为不同数据库的表识。</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>ibatis<span class=\"token punctuation\">.</span>annotations<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Mapper</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Component</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Documented</span>\n<span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span>RUNTIME<span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>TYPE<span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token annotation punctuation\">@Mapper</span>\n<span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">FirstRepository</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">String</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>ibatis<span class=\"token punctuation\">.</span>annotations<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Mapper</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Component</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Documented</span>\n<span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span>RUNTIME<span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>TYPE<span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token annotation punctuation\">@Mapper</span>\n<span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">SecondRepository</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">String</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<h4 id=\"Bean\"><a href=\"#Bean\" class=\"headerlink\" title=\"Bean\"></a>Bean</h4><p><code>com.jueee.bean.User</code> 类：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>baomidou<span class=\"token punctuation\">.</span>mybatisplus<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">TableName</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Data</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Data</span>\n<span class=\"token annotation punctuation\">@TableName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> username<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> nickname<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<p><code>com.jueee.bean.Book</code> 类：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>baomidou<span class=\"token punctuation\">.</span>mybatisplus<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">TableName</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Data</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Data</span>\n<span class=\"token annotation punctuation\">@TableName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"book\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Book</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> author<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> description<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> title<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<h4 id=\"Mapper\"><a href=\"#Mapper\" class=\"headerlink\" title=\"Mapper\"></a>Mapper</h4><pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>baomidou<span class=\"token punctuation\">.</span>mybatisplus<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>mapper<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">BaseMapper</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>jueee<span class=\"token punctuation\">.</span>bean<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">User</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>jueee<span class=\"token punctuation\">.</span>repository<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FirstRepository</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@FirstRepository</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">UserMapper</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">BaseMapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>baomidou<span class=\"token punctuation\">.</span>mybatisplus<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>mapper<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">BaseMapper</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>jueee<span class=\"token punctuation\">.</span>bean<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Book</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>jueee<span class=\"token punctuation\">.</span>repository<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SecondRepository</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@SecondRepository</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">BookMapper</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">BaseMapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Book</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<h4 id=\"Service\"><a href=\"#Service\" class=\"headerlink\" title=\"Service\"></a>Service</h4><pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>jueee<span class=\"token punctuation\">.</span>bean<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">User</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>jueee<span class=\"token punctuation\">.</span>mapper<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">UserMapper</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Autowired</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Service</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Service</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserService</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserMapper</span> userMapper<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span> <span class=\"token function\">selectById</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectById</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>jueee<span class=\"token punctuation\">.</span>bean<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Book</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>jueee<span class=\"token punctuation\">.</span>mapper<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">BookMapper</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Autowired</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Service</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Service</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BookService</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">BookMapper</span> bookMapper<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Book</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">selectAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> bookMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<h4 id=\"测试类\"><a href=\"#测试类\" class=\"headerlink\" title=\"测试类\"></a>测试类</h4><pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>jueee<span class=\"token punctuation\">.</span>bean<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Book</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>jueee<span class=\"token punctuation\">.</span>bean<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">User</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span>extern<span class=\"token punctuation\">.</span>slf4j<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Slf4j</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span>jupiter<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Test</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Autowired</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringBootTest</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token annotation punctuation\">@SpringBootTest</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserServiceTest</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserService</span> userService<span class=\"token punctuation\">;</span>\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">BookService</span> bookService<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">selectById</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> userService<span class=\"token punctuation\">.</span><span class=\"token function\">selectById</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">getNickname</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">selectAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Book</span><span class=\"token punctuation\">&gt;</span></span> list <span class=\"token operator\">=</span> bookService<span class=\"token punctuation\">.</span><span class=\"token function\">selectAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        list<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>t<span class=\"token operator\">-&gt;</span>log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span><span class=\"token function\">getAuthor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\" - \"</span><span class=\"token operator\">+</span>t<span class=\"token punctuation\">.</span><span class=\"token function\">getTitle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<h4 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h4>","categories":["Java","JavaJar","SpringBoot"],"tags":["Java","JavaJar","MyBatis","Druid"]},{"title":"MyBatis-Plus 的代码生成器 AutoGenerator","url":"/2020/12/2020-12-05-MyBatis-Plus%E7%9A%84%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8AutoGenerator/","content":"<h3 id=\"AutoGenerator-介绍\"><a href=\"#AutoGenerator-介绍\" class=\"headerlink\" title=\"AutoGenerator 介绍\"></a>AutoGenerator 介绍</h3><p>AutoGenerator 是 MyBatis-Plus 的代码生成器，通过 AutoGenerator 可以快速生成 Entity、Mapper、Mapper XML、Service、Controller 等各个模块的代码，极大的提升了开发效率。</p>\n<ul>\n<li>文档：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYW9taWRvdS5jb20vZ3VpZGUvZ2VuZXJhdG9yLmh0bWw=\">https://baomidou.com/guide/generator.html<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li> 配置：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYW9taWRvdS5jb20vY29uZmlnL2dlbmVyYXRvci1jb25maWcuaHRtbA==\">https://baomidou.com/config/generator-config.html<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<a id=\"more\"></a>\n\n<h4 id=\"依赖引入\"><a href=\"#依赖引入\" class=\"headerlink\" title=\"依赖引入\"></a>依赖引入</h4><pre class=\"language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>com.baomidou<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>mybatis-plus-generator<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>3.4.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n\n<h4 id=\"模板引擎\"><a href=\"#模板引擎\" class=\"headerlink\" title=\"模板引擎\"></a>模板引擎</h4><p>MyBatis-Plus 支持 Velocity（默认）、Freemarker、Beetl，用户可以选择自己熟悉的模板引擎。</p>\n<p>Velocity（默认）：</p>\n<pre class=\"language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.apache.velocity<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>velocity-engine-core<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>2.2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n\n<p>Freemarker：</p>\n<pre class=\"language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.freemarker<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>freemarker<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>2.3.30<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n\n<p>Beetl：</p>\n<pre class=\"language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>com.ibeetl<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>beetl<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>3.3.1.RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n\n<p>注意！如果您选择了非默认引擎，需要在 AutoGenerator 中 设置模板引擎。</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">AutoGenerator</span> generator <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AutoGenerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// set freemarker engine</span>\ngenerator<span class=\"token punctuation\">.</span><span class=\"token function\">setTemplateEngine</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FreemarkerTemplateEngine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n<h3 id=\"自动生成代码\"><a href=\"#自动生成代码\" class=\"headerlink\" title=\"自动生成代码\"></a>自动生成代码</h3><pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>baomidou<span class=\"token punctuation\">.</span>mybatisplus<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DbType</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>baomidou<span class=\"token punctuation\">.</span>mybatisplus<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FieldFill</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>baomidou<span class=\"token punctuation\">.</span>mybatisplus<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IdType</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>baomidou<span class=\"token punctuation\">.</span>mybatisplus<span class=\"token punctuation\">.</span>generator<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AutoGenerator</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>baomidou<span class=\"token punctuation\">.</span>mybatisplus<span class=\"token punctuation\">.</span>generator<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DataSourceConfig</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>baomidou<span class=\"token punctuation\">.</span>mybatisplus<span class=\"token punctuation\">.</span>generator<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">GlobalConfig</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>baomidou<span class=\"token punctuation\">.</span>mybatisplus<span class=\"token punctuation\">.</span>generator<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PackageConfig</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>baomidou<span class=\"token punctuation\">.</span>mybatisplus<span class=\"token punctuation\">.</span>generator<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">StrategyConfig</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>baomidou<span class=\"token punctuation\">.</span>mybatisplus<span class=\"token punctuation\">.</span>generator<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>po<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">TableFill</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>baomidou<span class=\"token punctuation\">.</span>mybatisplus<span class=\"token punctuation\">.</span>generator<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>rules<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DateType</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>baomidou<span class=\"token punctuation\">.</span>mybatisplus<span class=\"token punctuation\">.</span>generator<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>rules<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">NamingStrategy</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>baomidou<span class=\"token punctuation\">.</span>mybatisplus<span class=\"token punctuation\">.</span>generator<span class=\"token punctuation\">.</span>engine<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FreemarkerTemplateEngine</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GenerateCode</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 需要构建一个 代码自动生成器 对象</span>\n        <span class=\"token class-name\">AutoGenerator</span> mpg <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AutoGenerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        mpg<span class=\"token punctuation\">.</span><span class=\"token function\">setTemplateEngine</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FreemarkerTemplateEngine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 添加 Freemarker 模板引擎</span>\n        <span class=\"token comment\">// 配置策略</span>\n        <span class=\"token comment\">// 1、全局配置</span>\n        <span class=\"token class-name\">GlobalConfig</span> gc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GlobalConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> projectPath <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user.dir\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        gc<span class=\"token punctuation\">.</span><span class=\"token function\">setOutputDir</span><span class=\"token punctuation\">(</span>projectPath<span class=\"token operator\">+</span><span class=\"token string\">\"/src/main/java\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        gc<span class=\"token punctuation\">.</span><span class=\"token function\">setAuthor</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Jue\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//作者名称</span>\n        gc<span class=\"token punctuation\">.</span><span class=\"token function\">setOpen</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        gc<span class=\"token punctuation\">.</span><span class=\"token function\">setFileOverride</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 是否覆盖</span>\n        gc<span class=\"token punctuation\">.</span><span class=\"token function\">setIdType</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IdType</span><span class=\"token punctuation\">.</span>ID_WORKER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        gc<span class=\"token punctuation\">.</span><span class=\"token function\">setDateType</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DateType</span><span class=\"token punctuation\">.</span>ONLY_DATE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        gc<span class=\"token punctuation\">.</span><span class=\"token function\">setSwagger2</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//实体属性 Swagger2 注解</span>\n\n        <span class=\"token comment\">// 自定义文件命名，注意 %s 会自动填充表实体属性！</span>\n        gc<span class=\"token punctuation\">.</span><span class=\"token function\">setServiceName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%sService\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        gc<span class=\"token punctuation\">.</span><span class=\"token function\">setControllerName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%sController\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        gc<span class=\"token punctuation\">.</span><span class=\"token function\">setServiceName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%sService\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        gc<span class=\"token punctuation\">.</span><span class=\"token function\">setServiceImplName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%sServiceImpl\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        gc<span class=\"token punctuation\">.</span><span class=\"token function\">setMapperName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%sMapper\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        gc<span class=\"token punctuation\">.</span><span class=\"token function\">setXmlName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%sMapper\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        mpg<span class=\"token punctuation\">.</span><span class=\"token function\">setGlobalConfig</span><span class=\"token punctuation\">(</span>gc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//2、设置数据源</span>\n        <span class=\"token class-name\">DataSourceConfig</span> dsc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DataSourceConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        dsc<span class=\"token punctuation\">.</span><span class=\"token function\">setUrl</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jdbc:mysql://localhost:3306/test?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=GMT%2B8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        dsc<span class=\"token punctuation\">.</span><span class=\"token function\">setDriverName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.mysql.cj.jdbc.Driver\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// dsc.setDriverName(\"com.mysql.jdbc.Driver\"); //mysql5.6以下的驱动</span>\n        dsc<span class=\"token punctuation\">.</span><span class=\"token function\">setUsername</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"root\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        dsc<span class=\"token punctuation\">.</span><span class=\"token function\">setPassword</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jue\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        dsc<span class=\"token punctuation\">.</span><span class=\"token function\">setDbType</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DbType</span><span class=\"token punctuation\">.</span>MYSQL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        mpg<span class=\"token punctuation\">.</span><span class=\"token function\">setDataSource</span><span class=\"token punctuation\">(</span>dsc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//3、包的配置</span>\n        <span class=\"token class-name\">PackageConfig</span> pc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PackageConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        pc<span class=\"token punctuation\">.</span><span class=\"token function\">setParent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.jueee.generator\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//包名</span>\n        pc<span class=\"token punctuation\">.</span><span class=\"token function\">setModuleName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"model\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//模块名</span>\n        pc<span class=\"token punctuation\">.</span><span class=\"token function\">setEntity</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"entity\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        pc<span class=\"token punctuation\">.</span><span class=\"token function\">setMapper</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mapper\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        pc<span class=\"token punctuation\">.</span><span class=\"token function\">setService</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"service\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        pc<span class=\"token punctuation\">.</span><span class=\"token function\">setController</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"controller\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        mpg<span class=\"token punctuation\">.</span><span class=\"token function\">setPackageInfo</span><span class=\"token punctuation\">(</span>pc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//4、策略配置</span>\n        <span class=\"token class-name\">StrategyConfig</span> strategy <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StrategyConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        strategy<span class=\"token punctuation\">.</span><span class=\"token function\">setInclude</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"employees\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"reader\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 设置要映射的表名</span>\n        strategy<span class=\"token punctuation\">.</span><span class=\"token function\">setNaming</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">NamingStrategy</span><span class=\"token punctuation\">.</span>underline_to_camel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        strategy<span class=\"token punctuation\">.</span><span class=\"token function\">setColumnNaming</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">NamingStrategy</span><span class=\"token punctuation\">.</span>underline_to_camel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        strategy<span class=\"token punctuation\">.</span><span class=\"token function\">setEntityLombokModel</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 自动lombok；</span>\n        strategy<span class=\"token punctuation\">.</span><span class=\"token function\">setLogicDeleteFieldName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"is_deleted\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 自动填充配置</span>\n        <span class=\"token class-name\">TableFill</span> gmtCreate <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TableFill</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"gmt_create\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">FieldFill</span><span class=\"token punctuation\">.</span>INSERT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">TableFill</span> gmtModified <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TableFill</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"gmt_modified\"</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">FieldFill</span><span class=\"token punctuation\">.</span>INSERT_UPDATE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TableFill</span><span class=\"token punctuation\">&gt;</span></span> tableFills <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        tableFills<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>gmtCreate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        tableFills<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>gmtModified<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        strategy<span class=\"token punctuation\">.</span><span class=\"token function\">setTableFillList</span><span class=\"token punctuation\">(</span>tableFills<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 乐观锁</span>\n        strategy<span class=\"token punctuation\">.</span><span class=\"token function\">setVersionFieldName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"version\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//根据你的表名来建对应的类名，如果你的表名没有下划线，比如test，那么你就可以取消这一步</span>\n        strategy<span class=\"token punctuation\">.</span><span class=\"token function\">setTablePrefix</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"t_\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        strategy<span class=\"token punctuation\">.</span><span class=\"token function\">setRestControllerStyle</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//rest请求</span>\n        <span class=\"token comment\">//自动转下划线，比如localhost:8080/hello_id_2</span>\n        strategy<span class=\"token punctuation\">.</span><span class=\"token function\">setControllerMappingHyphenStyle</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        mpg<span class=\"token punctuation\">.</span><span class=\"token function\">setStrategy</span><span class=\"token punctuation\">(</span>strategy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        mpg<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//执行</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<p>效果如下：</p>\n<p><img src=\"/images/2020/12/image-20201225185054159.png\" alt=\"image-20201225185054159\" loading=\"lazy\"></p>\n<p>以 Bean 中的 <code>Employees</code> 为例，效果如下：</p>\n<p><img src=\"/images/2020/12/image-20201225185150320.png\" alt=\"image-20201225185150320\" loading=\"lazy\"></p>\n","categories":["Java","JavaJar"],"tags":["Java","JavaJar","MyBatis"]},{"title":"Web 渗透工具 Burp Suite 安装配置","url":"/2020/12/2020-12-26-Web%E6%B8%97%E9%80%8F%E5%B7%A5%E5%85%B7BurpSuite%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/","content":"<h3 id=\"Burp-Suite-介绍\"><a href=\"#Burp-Suite-介绍\" class=\"headerlink\" title=\"Burp Suite 介绍\"></a>Burp Suite 介绍</h3><p>Burp Suite 是用于攻击 web 应用程序的集成平台，包含了许多工具。</p>\n<p>Burp Suite 为这些工具设计了许多接口，以加快攻击应用程序的过程。所有工具都共享一个请求，并能处理对应的 HTTP 消息、持久性、认证、代理、日志、警报。</p>\n<ul>\n<li>下载：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wb3J0c3dpZ2dlci5uZXQvYnVycA==\">https://portswigger.net/burp<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<a id=\"more\"></a>\n\n<h3 id=\"Burp-Suite-工具箱\"><a href=\"#Burp-Suite-工具箱\" class=\"headerlink\" title=\"Burp Suite 工具箱\"></a>Burp Suite 工具箱</h3><ul>\n<li>Proxy—— 是一个拦截 HTTP/S 的代理服务器，作为一个在浏览器和目标应用程序之间的中间人，允许你拦截，查看，修改在两个方向上的原始数据流。</li>\n<li>Spider—— 是一个应用智能感应的网络爬虫，它能完整的枚举应用程序的内容和功能。</li>\n<li>Scanner [仅限专业版]—— 是一个高级的工具，执行后，它能自动地发现 web 应用程序的安全漏洞。</li>\n<li>Intruder—— 是一个定制的高度可配置的工具，对 web 应用程序进行自动化攻击，如：枚举标识符，收集有用的数据，以及使用 fuzzing 技术探测常规漏洞。</li>\n<li>Repeater—— 是一个靠手动操作来补发单独的 HTTP 请求，并分析应用程序响应的工具。</li>\n<li>Sequencer—— 是一个用来分析那些不可预知的应用程序会话令牌和重要数据项的随机性的工具。</li>\n<li>Decoder—— 是一个进行手动执行或对应用程序数据者智能解码编码的工具。</li>\n<li>Comparer—— 是一个实用的工具，通常是通过一些相关的请求和响应得到两项数据的一个可视化的 “差异”。</li>\n</ul>\n<h3 id=\"Burp-Suite-抓包\"><a href=\"#Burp-Suite-抓包\" class=\"headerlink\" title=\"Burp Suite 抓包\"></a>Burp Suite 抓包</h3><h4 id=\"配置代理\"><a href=\"#配置代理\" class=\"headerlink\" title=\"配置代理\"></a>配置代理</h4><ol>\n<li><p>配置 Burp suite 代理 ，打开 burp 选择 proxy-----&gt;options</p>\n<p>一般建议将端口改下，避免和其他应用冲突。</p>\n<p><img src=\"/images/2020/12/image-20201224174146023.png\" alt=\"image-20201224174146023\" loading=\"lazy\"></p>\n</li>\n<li><p>浏览器进行配置，这里以谷歌浏览器为例，其他浏览器类似。</p>\n<p>设置 -----&gt; 高级 -----&gt; 打开代理，如下图：</p>\n<p><img src=\"/images/2020/12/image-20201224174447835.png\" alt=\"image-20201224174447835\" loading=\"lazy\"></p>\n</li>\n<li><p>手动设置代理地址：</p>\n<p><img src=\"/images/2020/12/image-20201224174547907.png\" alt=\"image-20201224174547907\" loading=\"lazy\"></p>\n</li>\n<li><p>配置完成后就可以使用 burp suite 进行抓包了</p>\n</li>\n</ol>\n<h4 id=\"https-证书\"><a href=\"#https-证书\" class=\"headerlink\" title=\"https 证书\"></a>https 证书</h4><p>抓包过程中可能出现如下问题，https 无法抓取，解决办法就是安装 Burp Suite 的受信任证书。</p>\n<ol>\n<li><p>打开 proxy 的 options 选项，选择 import/export CA certificate 按钮：</p>\n<p><img src=\"/images/2020/12/image-20201224175025835.png\" alt=\"image-20201224175025835\" loading=\"lazy\"></p>\n<p>或者访问 <span class=\"exturl\" data-url=\"aHR0cDovLzEyNy4wLjAuMTo4MDg4Lw==\">http://127.0.0.1:8088/<i class=\"fa fa-external-link-alt\"></i></span> ，点击下载 CA 证书：</p>\n<p><img src=\"/images/2020/12/image-20201225093213139.png\" alt=\"image-20201225093213139\" loading=\"lazy\"></p>\n</li>\n<li><p>弹出下面窗口，选中第一项，并点击 next</p>\n<p><img src=\"/images/2020/12/image-20201224175139459.png\" alt=\"image-20201224175139459\" loading=\"lazy\"></p>\n</li>\n<li><p>继续选择证书导出的本地地址并保存</p>\n<p><img src=\"/images/2020/12/image-20201224175351191.png\" alt=\"image-20201224175351191\" loading=\"lazy\"></p>\n</li>\n<li><p>打开 Chrome 浏览器，设置 -----&gt; 隐私设置和安全性 -----&gt; 安全 ----- &gt; 管理证书</p>\n<p><img src=\"/images/2020/12/image-20201224190002564.png\" alt=\"image-20201224190002564\" loading=\"lazy\"></p>\n</li>\n<li><p>在证书管理窗口选择导入，并选择导入刚刚导出的证书文件。</p>\n</li>\n<li><p>以上就是安装证书的全部过程，接下来就可以使用 burp 拦截 https 包了。</p>\n<p><img src=\"/images/2020/12/image-20201225093814785.png\" alt=\"image-20201225093814785\" loading=\"lazy\"></p>\n</li>\n</ol>\n","categories":["软件","Windows"],"tags":["软件","Windows"]},{"title":"curl 命令行修改 ElasticSearch 配置","url":"/2020/12/2020-12-25-curl%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%BF%AE%E6%94%B9ElasticSearch%E9%85%8D%E7%BD%AE/","content":"<h3 id=\"curl\"><a href=\"#curl\" class=\"headerlink\" title=\"curl\"></a>curl</h3><p>curl 是常用的命令行工具，用来请求 Web 服务器。它的名字就是客户端（client）的 URL 工具的意思。</p>\n<a id=\"more\"></a>\n\n<h4 id=\"常用参数\"><a href=\"#常用参数\" class=\"headerlink\" title=\"常用参数\"></a>常用参数</h4><ul>\n<li><code>-d</code> 参数用于发送 POST 请求的数据体。</li>\n<li><code>-H</code> 参数添加 HTTP 请求的标头。</li>\n<li><code>-X</code> 参数指定 HTTP 请求的方法。</li>\n</ul>\n<h3 id=\"GET\"><a href=\"#GET\" class=\"headerlink\" title=\"GET\"></a>GET</h3><p>查看 es 集群状态：</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> http://127.0.0.1:9200/_cat/health?v</code></pre>\n\n<p>集群节点健康查看：</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> http://127.0.0.1:9200/_cat/nodes?v</code></pre>\n\n<p>列出集群所有索引：</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> http://127.0.0.1:9200/_cat/indices?v</code></pre>\n\n<p>查看某个索引的 Mapping 配置：</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> http://127.0.0.1:9200/mdasmail_manti/_mapping?pretty</code></pre>\n\n<p>查询某个索引下某条记录的具体数据：</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> http://127.0.0.1:9200/mdasmail_manti/mail/1e50baf1dea339f871f9272508bc7615</code></pre>\n\n<h3 id=\"PUT\"><a href=\"#PUT\" class=\"headerlink\" title=\"PUT\"></a>PUT</h3><p>修改参数（单个查询最大的桶数，默认 10000）：</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> -X PUT http://127.0.0.1:9200/_cluster/settings?flat_settings -H <span class=\"token string\">'content-Type:application/json'</span> -d <span class=\"token string\">'{\"persistent\":{\"search\":{\"max_buckets\":\"2147483647\"}}}'</span></code></pre>\n\n<p>如果不加 <code>-H 'content-Type:application/json'</code> 参数，可能会报错：</p>\n<blockquote>\n<p>{\"error\":\"Content-Type header [application/x-www-form-urlencoded] is not supported\",\"status\":406}</p>\n</blockquote>\n<h3 id=\"DELETE\"><a href=\"#DELETE\" class=\"headerlink\" title=\"DELETE\"></a>DELETE</h3><p>删除某个索引：</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> -XDELETE <span class=\"token string\">'http://127.0.0.1:9200/mdasmail_manti'</span></code></pre>\n\n","categories":["Linux","Shell","Database","ElasticSearch"],"tags":["ElasticSearch","Database","curl"]},{"title":"Web 渗透工具 BurpSuite 的 Intruder 模块","url":"/2020/12/2020-12-27-Web%E6%B8%97%E9%80%8F%E5%B7%A5%E5%85%B7BurpSuite%E7%9A%84Intruder%E6%A8%A1%E5%9D%97/","content":"<h3 id=\"Burp-Intruder-介绍\"><a href=\"#Burp-Intruder-介绍\" class=\"headerlink\" title=\"Burp Intruder 介绍\"></a>Burp Intruder 介绍</h3><p>Burp Intruder 是一个强大的工具，用于自动对 Web 应用程序自定义的攻击，Burp Intruder 是高度可配置的，并被用来在广范围内进行自动化攻击。</p>\n<p>可以使用 Burp Intruder 方便地执行许多任务，包括枚举标识符，获取有用数据，漏洞模糊测试。</p>\n<p>合适的攻击类型取决于应用程序的情况，可能包括：缺陷测试：SQL 注入，跨站点脚本，缓冲区溢出，路径遍历；暴力攻击认证系统；枚举；操纵参数；拖出隐藏的内容和功能；会话令牌测序和会话劫持；数据挖掘；并发攻击；应用层的拒绝服务式攻击。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"模块说明\"><a href=\"#模块说明\" class=\"headerlink\" title=\"模块说明\"></a>模块说明</h3><p>Burp Intruder 主要有四个模块组成:</p>\n<ol>\n<li>Target 用于配置目标服务器进行攻击的详细信息。</li>\n<li>Positions  设置 Payloads 的插入点以及攻击类型（攻击模式）。</li>\n<li>Payloads  设置 payload，配置字典</li>\n<li> Opetions  此选项卡包含了 request headers，request engine，attack results ，grep match，grep_extrack，grep payloads 和 redirections。</li>\n</ol>\n<p>可以发动攻击之前，在主要 Intruder 的 UI 上编辑这些选项，大部分设置也可以在攻击时对已在运行的窗口进行修改。</p>\n<h4 id=\"Target：目标选项\"><a href=\"#Target：目标选项\" class=\"headerlink\" title=\"Target：目标选项\"></a>Target：目标选项</h4><p>这个选项是用来配置目标服务器的细节，配置目标的 host，port 及协议（http/https）：</p>\n<p><img src=\"/images/2020/12/image-20201225101813001.png\" alt=\"image-20201225101813001\" loading=\"lazy\"></p>\n<h4 id=\"Positions：位置选项\"><a href=\"#Positions：位置选项\" class=\"headerlink\" title=\"Positions：位置选项\"></a>Positions：位置选项</h4><p>这个选项是用来配置在攻击里产生的所有 HTTP 请求的模板。</p>\n<p><img src=\"/images/2020/12/image-20201225102225581.png\" alt=\"image-20201225102225581\" loading=\"lazy\"></p>\n<p>Attack type 有四个攻击方式，下面说下每个的作用：</p>\n<ul>\n<li>sniper – 对变量依次进行暴力破解。</li>\n<li>battering ram – 对变量同时进行破解。</li>\n<li>pitchfork – 每一个变量标记对应一个字典，一一对应进行破解。</li>\n<li>cluster bomb – 每个变量对应一个字典，并且进行交叉式破解，尝试各种组合。适用于用户名 + 密码的破解。</li>\n</ul>\n<p>可以使用选项上的按钮来控制位置上的标记：</p>\n<ul>\n<li>add § — 在当前光标位置插入一个位置标记。</li>\n<li>clear § — 删除整个模板或选中的部分模板里的位置标记。</li>\n<li>auto § — 这会对放置标记的位置做一个猜测，放哪里会有用，然后就把标记放到相应位置。这是一个为攻击常规漏洞 (SQL 注入) 快速标记出合适位置的有用的功能，然后人工标记是为自定义攻击的。</li>\n<li>refresh — 如果需要，可以刷新编辑器里有颜色的代码。</li>\n<li>clear — 删除整个编辑器内容。</li>\n</ul>\n<h4 id=\"Payloads：有效负荷选项\"><a href=\"#Payloads：有效负荷选项\" class=\"headerlink\" title=\"Payloads：有效负荷选项\"></a>Payloads：有效负荷选项</h4><p>这个选项是用来配置一个或多个有效负荷的集合。如果定义了”cluster bomb” 和”pitchfork” 攻击类型，然后必须为每定义的有效负荷位置 (最多 8 个) 配置一个单独的有效负荷。使用”payload set” 下拉菜单选择要配置的有效负荷。</p>\n<h5 id=\"Payload-Sets\"><a href=\"#Payload-Sets\" class=\"headerlink\" title=\"Payload Sets\"></a>Payload Sets</h5><p>Payload 数量类型设置</p>\n<p><img src=\"/images/2020/12/image-20201225102526892.png\" alt=\"image-20201225102526892\" loading=\"lazy\"></p>\n<h5 id=\"Payload-Opetions\"><a href=\"#Payload-Opetions\" class=\"headerlink\" title=\"Payload Opetions\"></a>Payload Opetions</h5><p>该选项会根据选项 1 中 Payload type 的设置而改变</p>\n<p><img src=\"/images/2020/12/image-20201225102556360.png\" alt=\"image-20201225102556360\" loading=\"lazy\"></p>\n<h5 id=\"Payload-Processing\"><a href=\"#Payload-Processing\" class=\"headerlink\" title=\"Payload Processing\"></a>Payload Processing</h5><p>对生成的 Payload 进行编码、加密、截取等操作</p>\n<p><img src=\"/images/2020/12/image-20201225102628858.png\" alt=\"image-20201225102628858\" loading=\"lazy\"></p>\n<h5 id=\"Payload-Encoding\"><a href=\"#Payload-Encoding\" class=\"headerlink\" title=\"Payload Encoding\"></a>Payload Encoding</h5><p>可以配置哪些有效载荷中的字符应该是 URL 编码的 HTTP 请求中的安全传输。任何已配置的 URL 编码最后应用，任何有效载荷处理规则执行之后。 这是推荐使用此设置进行最终 URL 编码，而不是一个有效载荷处理规则，因为可以用来有效载荷的 grep 选项来检查响应为呼应有效载荷的最终 URL 编码应用之前。</p>\n<p><img src=\"/images/2020/12/image-20201225102658729.png\" alt=\"image-20201225102658729\" loading=\"lazy\"></p>\n<h4 id=\"Opetions-选项卡\"><a href=\"#Opetions-选项卡\" class=\"headerlink\" title=\"Opetions 选项卡\"></a>Opetions 选项卡</h4><p>此选项卡包含了 request headers，request engine，attack results ，grep match，grep_extrack，grep payloads 和 redirections。</p>\n<p>可以发动攻击之前，在主要 Intruder 的 UI 上编辑这些选项，大部分设置也可以在攻击时对已在运行的窗口进行修改。</p>\n<h5 id=\"Request-Headers\"><a href=\"#Request-Headers\" class=\"headerlink\" title=\"Request Headers\"></a>Request Headers</h5><p>这些设置控制在 Intruder 是否更新配置请求头。</p>\n<p><img src=\"/images/2020/12/image-20201225103005795.png\" alt=\"image-20201225103005795\" loading=\"lazy\"></p>\n<ul>\n<li>如果选中‘update Content-Length header’框，Burp Intruder 会使用每个请求的 HTTP 主体长度的正确值，添加或更新这个请求里 HTTP 消息头的内容长度。这个功能对一些需要把可变长度的有效载荷插入到 HTTP 请求模板主体的攻击是很有必要的。这个 HTTP 规范和大多数 web 服务器一样，需要使用消息头内容长度来指定 HTTP 主体长度的正确值。如果没有指定正确值，目标服务器会返回一个错误，也可能返回一个未完成的请求，也可能无限期地等待接收请求里的进一步数据。</li>\n<li>如果选中‘set Connection: close’框，则 Burp Intruder 会添加或更新 HTTP 消息头的连接来请求在每个请求后已关闭的连接。在多数情况下，这个选项会让攻击执行得更快。</li>\n</ul>\n<h5 id=\"Request-Engine\"><a href=\"#Request-Engine\" class=\"headerlink\" title=\"Request Engine\"></a>Request Engine</h5><p>设置发送请求的线程、超时重试等。</p>\n<p><img src=\"/images/2020/12/image-20201225103151064.png\" alt=\"image-20201225103151064\" loading=\"lazy\"></p>\n<ul>\n<li>Number of threads：线程，该选项控制攻击请求的并发数。</li>\n<li>Number of retries on network failure：网络故障的重试次数 – 如果出现连接错误或其他网络问题，Burp 会放弃和移动之前重试的请求指定的次数。</li>\n<li>Pause before retry：重试前等待时间，当重试失败的请求，Burp 会等待指定的时间（以毫秒为单位），然后重试。</li>\n<li>Throttle between requests：请求之间的等待时间，Burp 可以在每次请求之前等待一个指定的延迟（以毫秒为单位） 。此选项很有用，以避免超载应用程序，或者是更隐蔽。</li>\n<li>Start time: 开始时间，此选项允许您配置攻击立即启动，或在指定的延迟后，或开始处于暂停状态。</li>\n</ul>\n<h5 id=\"Attack-Results\"><a href=\"#Attack-Results\" class=\"headerlink\" title=\"Attack Results\"></a>Attack Results</h5><p>设置攻击结果的显示。</p>\n<p><img src=\"/images/2020/12/image-20201225103310245.png\" alt=\"image-20201225103310245\" loading=\"lazy\"></p>\n<ul>\n<li>Store requests/responses：存储请求 / 响应，这个选项确定攻击是否会保存单个请求和响应的内容</li>\n<li> Make unmodified baseline request：未修改的基本请求，如果选择此选项，那么除了配置的攻击请求，Burp 会发出模板请求设置为基值，所有有效载荷的位置。此请求将在结果表显示为项目＃ 0 。使用此选项很有用，提供一个用来比较的攻击响应基地的响应。</li>\n<li>Use denial-of-service mode：使用拒绝服务的模式，如果选择此选项，那么攻击会发出请求，如正常，但不会等待处理从服务器收到任何答复。只要发出的每个请求， TCP 连接将被关闭。这个功能可以被用来执行拒绝服务的应用层对脆弱的应用程序的攻击，通过重复发送该启动高负荷任务的服务器上，同时避免通过举办开放套接字等待服务器响应锁定了本地资源的请求。</li>\n<li>Store full payloads：保存完整的有效载荷。如果选择此选项，Burp 将存储全部有效载荷值的结果。</li>\n</ul>\n<h5 id=\"Grep-–-Match\"><a href=\"#Grep-–-Match\" class=\"headerlink\" title=\"Grep – Match\"></a>Grep – Match</h5><p>在响应中找出存在指定的内容的一项。</p>\n<p><img src=\"/images/2020/12/image-20201225103454175.png\" alt=\"image-20201225103454175\" loading=\"lazy\"></p>\n<ul>\n<li>Match：匹配类型，指定的表达式是否是简单的字符串或 regular expressions (正则表达式)。</li>\n<li>Case sensitive match：区分大小写的匹配，指定检查表达式是否应区分大小写。</li>\n<li>Exclude HTTP headers：排除 HTTP 头，指定的 HTTP 响应头是否应被排除在检查。</li>\n</ul>\n<h5 id=\"Grep-–-Extract\"><a href=\"#Grep-–-Extract\" class=\"headerlink\" title=\"Grep – Extract\"></a>Grep – Extract</h5><p>通过正则提取返回信息中的内容。</p>\n<p>点击 ADD 就弹出正则编辑窗口，如图我们选中我们需要获取的部分就可以自动生成正则表达式。点击 OK 就可以在列表中添加这条正则表达式。</p>\n<p><img src=\"/images/2020/12/image-20201225103815261.png\" alt=\"image-20201225103815261\" loading=\"lazy\"></p>\n<h5 id=\"Grep-–-Payloads\"><a href=\"#Grep-–-Payloads\" class=\"headerlink\" title=\"Grep – Payloads\"></a>Grep – Payloads</h5><p>这些设置可以用于包含已提交的有效负载的反射的标志结果项目。如果启用了此选项，BurpSuite 会添加包含一个复选框指示当前负载的值在每个响应发现新的结果列。</p>\n<p><img src=\"/images/2020/12/image-20201225103910105.png\" alt=\"image-20201225103910105\" loading=\"lazy\"></p>\n<ul>\n<li>Search responses for payload strings：在响应中搜索 Payload。</li>\n<li>Case sensitive match：区分大小写，此指定是否对有效负载的检查区分大小写。</li>\n<li>Exclude HTTP headers：排除 HTTP 标头，不对 HTTP 响应头进行检查。</li>\n<li>Match against pre-URL-encoded payloads：对预 URL 编码的有效载荷匹配。</li>\n</ul>\n<h5 id=\"Redirections\"><a href=\"#Redirections\" class=\"headerlink\" title=\"Redirections\"></a>Redirections</h5><p>重定向响应，控制 Burp 在进行攻击时如何处理重定向。 </p>\n<p><img src=\"/images/2020/12/image-20201225104000361.png\" alt=\"image-20201225104000361\" loading=\"lazy\"></p>\n<ul>\n<li>Follow redirections：跟随重定向<br>Never：不跟随重定向（关闭跟随重定向）。</li>\n<li>On-site only：只会跟随重定向到同一个网页 “网站” ，即使用相同的主机，端口和协议的是在原始请求使用的 URL 。</li>\n<li>In-scope only：只跟随范围内，Intruder 只会跟随重定向到目标范围之内的 URL 。</li>\n<li>Always：总是跟随重定向，将遵循重定向到任何任何 URL。（此选项可能会引导 burp 到其他网站）</li>\n</ul>\n<h4 id=\"发起攻击\"><a href=\"#发起攻击\" class=\"headerlink\" title=\"发起攻击\"></a>发起攻击</h4><p>配置好相关的内容后就可以点击任意模块右上角的 start attack 或者菜单栏中的 Intruder-&gt;start attack 发起攻击请求。</p>\n","categories":["Blog"],"tags":["Blog"]},{"title":"SQL 语句拦截框架 P6Spy 的介绍使用","url":"/2020/12/2020-12-28-SQL%E8%AF%AD%E5%8F%A5%E6%8B%A6%E6%88%AA%E6%A1%86%E6%9E%B6P6Spy%E7%9A%84%E4%BB%8B%E7%BB%8D%E4%BD%BF%E7%94%A8/","content":"<h3 id=\"P6Spy-介绍\"><a href=\"#P6Spy-介绍\" class=\"headerlink\" title=\"P6Spy 介绍\"></a>P6Spy 介绍</h3><p>P6Spy 是一个可以用来在应用程序中拦截和修改数据操作语句的开源框架。 </p>\n<p>通过 P6Spy 我们可以对 SQL 语句进行拦截，相当于一个 SQL 语句的记录器，这样我们可以用它来作相关的分析，比如性能分析。</p>\n<ul>\n<li>文档：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wNnNweS5yZWFkdGhlZG9jcy5pby8=\">https://p6spy.readthedocs.io/<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>GitHub：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3A2c3B5L3A2c3B5\">https://github.com/p6spy/p6spy<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<a id=\"more\"></a>\n\n<h4 id=\"依赖引入\"><a href=\"#依赖引入\" class=\"headerlink\" title=\"依赖引入\"></a>依赖引入</h4><pre class=\"language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token comment\">&lt;!-- https://mvnrepository.com/artifact/p6spy/p6spy --&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>p6spy<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>p6spy<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>3.9.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n\n<h3 id=\"P6Spy-参数\"><a href=\"#P6Spy-参数\" class=\"headerlink\" title=\"P6Spy 参数\"></a>P6Spy 参数</h3><h4 id=\"formatMessage-参数\"><a href=\"#formatMessage-参数\" class=\"headerlink\" title=\"formatMessage 参数\"></a>formatMessage 参数</h4><ul>\n<li>connectionId：连接数据库的 ID</li>\n<li>now：当前 time 的毫秒数</li>\n<li> elapsed：操作完成所需的时间（以毫秒为单位）</li>\n<li>category：操作的类别</li>\n<li> prepared：将所有绑定变量替换为实际值的 SQL 语句</li>\n<li> SQL：执行的 sql 语句</li>\n<li> url：执行 sql 语句的数据库 URL</li>\n</ul>\n<h3 id=\"使用-P6Spy\"><a href=\"#使用-P6Spy\" class=\"headerlink\" title=\"使用 P6Spy\"></a>使用 P6Spy</h3><ol>\n<li><p>引入 P6Spy 的依赖。</p>\n</li>\n<li><p>更换数据库连接驱动。</p>\n<p>数据库驱动将 com.mysql.jdbc.Driver 替换为 com.p6spy.engine.spy.P6SpyDriver，然后在 url 中的按下面的格式加入 p6spy 即可。</p>\n<pre class=\"language-properties\" data-language=\"properties\"><code class=\"language-properties\"><span class=\"token comment\"># 更换前</span>\n<span class=\"token attr-name\">spring.datasource.second.driverClassName</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">com.mysql.cj.jdbc.Driver</span>\n<span class=\"token attr-name\">spring.datasource.second.jdbc-url</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">jdbc:mysql://127.0.0.1:3306/test?serverTimezone=UTC</span>\n\n<span class=\"token comment\"># 更换后</span>\n<span class=\"token attr-name\">spring.datasource.second.driverClassName</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">com.p6spy.engine.spy.P6SpyDriver</span>\n<span class=\"token attr-name\">spring.datasource.second.jdbc-url</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">jdbc:p6spy:mysql://127.0.0.1:3306/test?serverTimezone=UTC</span></code></pre>\n</li>\n<li><p>添加配置文件 <code>spy.properties</code>。</p>\n<pre class=\"language-properties\" data-language=\"properties\"><code class=\"language-properties\"><span class=\"token comment\"># 单行日志</span>\n<span class=\"token attr-name\">logMessageFormat</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">com.p6spy.engine.spy.appender.SingleLineFormat</span>\n<span class=\"token comment\"># 使用Slf4J记录sql</span>\n<span class=\"token attr-name\">appender</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">com.p6spy.engine.spy.appender.Slf4JLogger</span>\n<span class=\"token comment\"># 是否开启慢SQL记录</span>\n<span class=\"token attr-name\">outagedetection</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">true</span>\n<span class=\"token comment\"># 慢SQL记录标准，单位秒</span>\n<span class=\"token attr-name\">outagedetectioninterval</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">2</span>\n<span class=\"token comment\">#日期格式</span>\n<span class=\"token attr-name\">dateformat</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">yyyy-MM-dd HH:mm:ss</span></code></pre>\n\n</li>\n</ol>\n<p>效果如下：</p>\n<p><code>com.p6spy.engine.spy.appender.SingleLineFormat</code> 单行日志：</p>\n<pre class=\"language-none\"><code class=\"language-none\">2020-12-28 14:17:44.493  INFO 87484 --- [           main] p6spy                                    : 2020-12-28 14:17:44|11|statement|connection 19|url jdbc:p6spy:mysql://127.0.0.1:3306/test?serverTimezone=UTC|SELECT  id,author,description,title  FROM book     WHERE (author &gt;= ?)|SELECT  id,author,description,title  FROM book     WHERE (author &gt;= 'author0')</code></pre>\n\n<p><code>com.p6spy.engine.spy.appender.MultiLineFormat</code> 多行日志：</p>\n<pre class=\"language-none\"><code class=\"language-none\">2020-12-28 14:24:00.087  INFO 42092 --- [           main] p6spy                                    : #2020-12-28 14:24:00 | took 11ms | statement | connection 19| url jdbc:p6spy:mysql://127.0.0.1:3306/test?serverTimezone=UTC\nSELECT  id,author,description,title  FROM book \n \n WHERE (author &gt;= ?)\nSELECT  id,author,description,title  FROM book \n \n WHERE (author &gt;= 'author0');</code></pre>\n\n<h3 id=\"自定义输出格式\"><a href=\"#自定义输出格式\" class=\"headerlink\" title=\"自定义输出格式\"></a>自定义输出格式</h3><p>在 <code>spy.properties</code> 配置文件中进行配置：</p>\n<pre class=\"language-properties\" data-language=\"properties\"><code class=\"language-properties\"><span class=\"token comment\"># 自定义输出格式</span>\n<span class=\"token attr-name\">logMessageFormat</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">com.jueee.config.P6SpyLogger</span></code></pre>\n\n<p>其中，P6SpyLogger 类的实现如下：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>p6spy<span class=\"token punctuation\">.</span>engine<span class=\"token punctuation\">.</span>spy<span class=\"token punctuation\">.</span>appender<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MessageFormattingStrategy</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SimpleDateFormat</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Date</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">P6SpyLogger</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">MessageFormattingStrategy</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">SimpleDateFormat</span> format <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleDateFormat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yyyy-MM-dd HH:mm:ss:SSS\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">formatMessage</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> connectionId<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> now<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> elapsed<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> category<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> prepared<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> sql<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> url<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">!</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>format<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" | took \"</span> <span class=\"token operator\">+</span> elapsed <span class=\"token operator\">+</span> <span class=\"token string\">\"ms | \"</span> <span class=\"token operator\">+</span> category <span class=\"token operator\">+</span> <span class=\"token string\">\" | connection \"</span> <span class=\"token operator\">+</span> connectionId <span class=\"token operator\">+</span> <span class=\"token string\">\"\\n \"</span> <span class=\"token operator\">+</span> sql <span class=\"token operator\">+</span> <span class=\"token string\">\";\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<p>执行结果如下：</p>\n<pre class=\"language-none\"><code class=\"language-none\">2020-12-28 14:39:27.947  INFO 102272 --- [           main] p6spy                                    : 2020-12-28 14:39:27:947 | took 11ms | statement | connection 19\n SELECT  id,author,description,title  FROM book \n \n WHERE (author &gt;= 'author0');</code></pre>\n\n\n\n","categories":["Java","JavaJar"],"tags":["Java","JavaJar"]},{"title":"Java 中使用 RSA 算法加密","url":"/2020/12/2020-12-29-Java%E4%B8%AD%E4%BD%BF%E7%94%A8RSA%E7%AE%97%E6%B3%95%E5%8A%A0%E5%AF%86/","content":"<h3 id=\"RSA-介绍\"><a href=\"#RSA-介绍\" class=\"headerlink\" title=\"RSA 介绍\"></a>RSA 介绍</h3><p><strong>RSA 加密算法</strong>是一种<strong>非对称加密算法</strong>。</p>\n<p>RSA 是一对密钥。分别是<strong>公钥</strong>和<strong>私钥</strong> , 这个公钥和私钥其实就是一组数字！其二进制位长度可以是 1024 位或者 2048 位。长度越长其加密强度越大，目前为止公之于众的能破解的最大长度为 768 位密钥，只要高于 768 位，相对就比较安全.</p>\n<h4 id=\"RSA加密的方式\"><a href=\"#RSA加密的方式\" class=\"headerlink\" title=\"RSA加密的方式\"></a>RSA 加密的方式</h4><ul>\n<li>使用<strong>公钥</strong>加密的数据，利用<strong>私钥</strong>进行解密</li>\n<li>使用<strong>私钥</strong>加密的数据，利用<strong>公钥</strong>进行解密</li>\n</ul>\n<h4 id=\"RSA加密的缺点\"><a href=\"#RSA加密的缺点\" class=\"headerlink\" title=\"RSA加密的缺点\"></a>RSA 加密的缺点</h4><p>由于 RSA 算法的原理都是大数计算，使得 RSA 最快的情况也比<strong>对称加密算法</strong>慢上好几倍。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"使用-RSA\"><a href=\"#使用-RSA\" class=\"headerlink\" title=\"使用 RSA\"></a>使用 RSA</h3><p>引入依赖：</p>\n<pre class=\"language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token comment\">&lt;!-- https://mvnrepository.com/artifact/commons-codec/commons-codec --&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>commons-codec<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>commons-codec<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>1.15<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n\n<p>RSA 代码：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>commons<span class=\"token punctuation\">.</span>codec<span class=\"token punctuation\">.</span>binary<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Base64</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>crypto<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Cipher</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>security<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>security<span class=\"token punctuation\">.</span>interfaces<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RSAPrivateKey</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>security<span class=\"token punctuation\">.</span>interfaces<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RSAPublicKey</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>security<span class=\"token punctuation\">.</span>spec<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PKCS8EncodedKeySpec</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>security<span class=\"token punctuation\">.</span>spec<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">X509EncodedKeySpec</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Rsa 工具类，公钥私钥生成，加解密\n **/</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RSAUtil</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * 公钥解密\n     *\n     * @param publicKeyText 公钥\n     * @param text 待解密的信息\n     * @return /\n     * @throws Exception /\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">decryptByPublicKey</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> publicKeyText<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> text<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">X509EncodedKeySpec</span> x509EncodedKeySpec <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">X509EncodedKeySpec</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Base64</span><span class=\"token punctuation\">.</span><span class=\"token function\">decodeBase64</span><span class=\"token punctuation\">(</span>publicKeyText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">KeyFactory</span> keyFactory <span class=\"token operator\">=</span> <span class=\"token class-name\">KeyFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"RSA\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">PublicKey</span> publicKey <span class=\"token operator\">=</span> keyFactory<span class=\"token punctuation\">.</span><span class=\"token function\">generatePublic</span><span class=\"token punctuation\">(</span>x509EncodedKeySpec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Cipher</span> cipher <span class=\"token operator\">=</span> <span class=\"token class-name\">Cipher</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"RSA\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        cipher<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Cipher</span><span class=\"token punctuation\">.</span>DECRYPT_MODE<span class=\"token punctuation\">,</span> publicKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> result <span class=\"token operator\">=</span> cipher<span class=\"token punctuation\">.</span><span class=\"token function\">doFinal</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Base64</span><span class=\"token punctuation\">.</span><span class=\"token function\">decodeBase64</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * 私钥加密\n     *\n     * @param privateKeyText 私钥\n     * @param text 待加密的信息\n     * @return /\n     * @throws Exception /\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">encryptByPrivateKey</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> privateKeyText<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> text<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">PKCS8EncodedKeySpec</span> pkcs8EncodedKeySpec <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PKCS8EncodedKeySpec</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Base64</span><span class=\"token punctuation\">.</span><span class=\"token function\">decodeBase64</span><span class=\"token punctuation\">(</span>privateKeyText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">KeyFactory</span> keyFactory <span class=\"token operator\">=</span> <span class=\"token class-name\">KeyFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"RSA\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">PrivateKey</span> privateKey <span class=\"token operator\">=</span> keyFactory<span class=\"token punctuation\">.</span><span class=\"token function\">generatePrivate</span><span class=\"token punctuation\">(</span>pkcs8EncodedKeySpec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Cipher</span> cipher <span class=\"token operator\">=</span> <span class=\"token class-name\">Cipher</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"RSA\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        cipher<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Cipher</span><span class=\"token punctuation\">.</span>ENCRYPT_MODE<span class=\"token punctuation\">,</span> privateKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> result <span class=\"token operator\">=</span> cipher<span class=\"token punctuation\">.</span><span class=\"token function\">doFinal</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Base64</span><span class=\"token punctuation\">.</span><span class=\"token function\">encodeBase64String</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * 私钥解密\n     *\n     * @param privateKeyText 私钥\n     * @param text 待解密的文本\n     * @return /\n     * @throws Exception /\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">decryptByPrivateKey</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> privateKeyText<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> text<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">PKCS8EncodedKeySpec</span> pkcs8EncodedKeySpec5 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PKCS8EncodedKeySpec</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Base64</span><span class=\"token punctuation\">.</span><span class=\"token function\">decodeBase64</span><span class=\"token punctuation\">(</span>privateKeyText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">KeyFactory</span> keyFactory <span class=\"token operator\">=</span> <span class=\"token class-name\">KeyFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"RSA\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">PrivateKey</span> privateKey <span class=\"token operator\">=</span> keyFactory<span class=\"token punctuation\">.</span><span class=\"token function\">generatePrivate</span><span class=\"token punctuation\">(</span>pkcs8EncodedKeySpec5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Cipher</span> cipher <span class=\"token operator\">=</span> <span class=\"token class-name\">Cipher</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"RSA\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        cipher<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Cipher</span><span class=\"token punctuation\">.</span>DECRYPT_MODE<span class=\"token punctuation\">,</span> privateKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> result <span class=\"token operator\">=</span> cipher<span class=\"token punctuation\">.</span><span class=\"token function\">doFinal</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Base64</span><span class=\"token punctuation\">.</span><span class=\"token function\">decodeBase64</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * 公钥加密\n     *\n     * @param publicKeyText 公钥\n     * @param text 待加密的文本\n     * @return /\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">encryptByPublicKey</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> publicKeyText<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> text<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">X509EncodedKeySpec</span> x509EncodedKeySpec2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">X509EncodedKeySpec</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Base64</span><span class=\"token punctuation\">.</span><span class=\"token function\">decodeBase64</span><span class=\"token punctuation\">(</span>publicKeyText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">KeyFactory</span> keyFactory <span class=\"token operator\">=</span> <span class=\"token class-name\">KeyFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"RSA\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">PublicKey</span> publicKey <span class=\"token operator\">=</span> keyFactory<span class=\"token punctuation\">.</span><span class=\"token function\">generatePublic</span><span class=\"token punctuation\">(</span>x509EncodedKeySpec2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Cipher</span> cipher <span class=\"token operator\">=</span> <span class=\"token class-name\">Cipher</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"RSA\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        cipher<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Cipher</span><span class=\"token punctuation\">.</span>ENCRYPT_MODE<span class=\"token punctuation\">,</span> publicKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> result <span class=\"token operator\">=</span> cipher<span class=\"token punctuation\">.</span><span class=\"token function\">doFinal</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Base64</span><span class=\"token punctuation\">.</span><span class=\"token function\">encodeBase64String</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * 构建RSA密钥对\n     *\n     * @return /\n     * @throws NoSuchAlgorithmException /\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">RsaKeyPair</span> <span class=\"token function\">generateKeyPair</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">NoSuchAlgorithmException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">KeyPairGenerator</span> keyPairGenerator <span class=\"token operator\">=</span> <span class=\"token class-name\">KeyPairGenerator</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"RSA\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        keyPairGenerator<span class=\"token punctuation\">.</span><span class=\"token function\">initialize</span><span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">KeyPair</span> keyPair <span class=\"token operator\">=</span> keyPairGenerator<span class=\"token punctuation\">.</span><span class=\"token function\">generateKeyPair</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">RSAPublicKey</span> rsaPublicKey <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">RSAPublicKey</span><span class=\"token punctuation\">)</span> keyPair<span class=\"token punctuation\">.</span><span class=\"token function\">getPublic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">RSAPrivateKey</span> rsaPrivateKey <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">RSAPrivateKey</span><span class=\"token punctuation\">)</span> keyPair<span class=\"token punctuation\">.</span><span class=\"token function\">getPrivate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> publicKeyString <span class=\"token operator\">=</span> <span class=\"token class-name\">Base64</span><span class=\"token punctuation\">.</span><span class=\"token function\">encodeBase64String</span><span class=\"token punctuation\">(</span>rsaPublicKey<span class=\"token punctuation\">.</span><span class=\"token function\">getEncoded</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> privateKeyString <span class=\"token operator\">=</span> <span class=\"token class-name\">Base64</span><span class=\"token punctuation\">.</span><span class=\"token function\">encodeBase64String</span><span class=\"token punctuation\">(</span>rsaPrivateKey<span class=\"token punctuation\">.</span><span class=\"token function\">getEncoded</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RsaKeyPair</span><span class=\"token punctuation\">(</span>publicKeyString<span class=\"token punctuation\">,</span> privateKeyString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n\n    <span class=\"token comment\">/**\n     * RSA密钥对对象\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RsaKeyPair</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> publicKey<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> privateKey<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">RsaKeyPair</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> publicKey<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> privateKey<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>publicKey <span class=\"token operator\">=</span> publicKey<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>privateKey <span class=\"token operator\">=</span> privateKey<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getPublicKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> publicKey<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getPrivateKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> privateKey<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<h3 id=\"测试-RSA\"><a href=\"#测试-RSA\" class=\"headerlink\" title=\"测试 RSA\"></a>测试 RSA</h3><pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RSAUtilTest</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> SRC <span class=\"token operator\">=</span> <span class=\"token string\">\"123456\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testRSA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">RSAUtil</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">RsaKeyPair</span> keyPair <span class=\"token operator\">=</span> <span class=\"token class-name\">RSAUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">generateKeyPair</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"公钥：\"</span> <span class=\"token operator\">+</span> keyPair<span class=\"token punctuation\">.</span><span class=\"token function\">getPublicKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"私钥：\"</span> <span class=\"token operator\">+</span> keyPair<span class=\"token punctuation\">.</span><span class=\"token function\">getPrivateKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">test1</span><span class=\"token punctuation\">(</span>keyPair<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">test2</span><span class=\"token punctuation\">(</span>keyPair<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * 公钥加密私钥解密\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RSAUtil</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">RsaKeyPair</span> keyPair<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"***************** 公钥加密私钥解密开始 *****************\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> text1 <span class=\"token operator\">=</span> <span class=\"token class-name\">RSAUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">encryptByPublicKey</span><span class=\"token punctuation\">(</span>keyPair<span class=\"token punctuation\">.</span><span class=\"token function\">getPublicKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> SRC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> text2 <span class=\"token operator\">=</span> <span class=\"token class-name\">RSAUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">decryptByPrivateKey</span><span class=\"token punctuation\">(</span>keyPair<span class=\"token punctuation\">.</span><span class=\"token function\">getPrivateKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> text1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"加密前：\"</span> <span class=\"token operator\">+</span> SRC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"加密后：\"</span> <span class=\"token operator\">+</span> text1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"解密后：\"</span> <span class=\"token operator\">+</span> text2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>SRC<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>text2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"解密字符串和原始字符串一致，解密成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"解密字符串和原始字符串不一致，解密失败\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"***************** 公钥加密私钥解密结束 *****************\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * 私钥加密公钥解密\n     * @throws Exception /\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test2</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RSAUtil</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">RsaKeyPair</span> keyPair<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"***************** 私钥加密公钥解密开始 *****************\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> text1 <span class=\"token operator\">=</span> <span class=\"token class-name\">RSAUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">encryptByPrivateKey</span><span class=\"token punctuation\">(</span>keyPair<span class=\"token punctuation\">.</span><span class=\"token function\">getPrivateKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> SRC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> text2 <span class=\"token operator\">=</span> <span class=\"token class-name\">RSAUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">decryptByPublicKey</span><span class=\"token punctuation\">(</span>keyPair<span class=\"token punctuation\">.</span><span class=\"token function\">getPublicKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> text1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"加密前：\"</span> <span class=\"token operator\">+</span> SRC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"加密后：\"</span> <span class=\"token operator\">+</span> text1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"解密后：\"</span> <span class=\"token operator\">+</span> text2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>SRC<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>text2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"解密字符串和原始字符串一致，解密成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"解密字符串和原始字符串不一致，解密失败\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"***************** 私钥加密公钥解密结束 *****************\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<p>输入结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">公钥：MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCL8TmwbG0Gi5fjs+0GI/vQnLfxzk66o44VurAQwvsL3EUbra4S/2gPn9vIBP9vW/FwUsRRHesqRVipS7I6idbUXIOH5g1i6qNborZOLb+lB2cXay1Sjc+sxEnAciVjQEdcKi56mvUuz6waJwzhB3HkruKcXJKAvux3WOECTLLgJQIDAQAB\n私钥：MIICdgIBADANBgkqhkiG9w0BAQEFAASCAmAwggJcAgEAAoGBAIvxObBsbQaLl+Oz7QYj+9Cct/HOTrqjjhW6sBDC+wvcRRutrhL/aA+f28gE/29b8XBSxFEd6ypFWKlLsjqJ1tRcg4fmDWLqo1uitk4tv6UHZxdrLVKNz6zEScByJWNAR1wqLnqa9S7PrBonDOEHceSu4pxckoC+7HdY4QJMsuAlAgMBAAECgYAnUmXiY+UStMC+M72DPzMvwAmTwWOv3+s5wdZdL1x5TbCBgYDrR6cG1OVdw8G+mbgy1p7hKCX/H7M1BtcSyc56PQi77DvCaA3f/wr1i7jhDI+RFmL5unjKcuuyAfAKLxNxx16ErtxdKleygq645F48Qg8YIzF+9pqV1TPjk6P7tQJBAMJMTu+3nP+od92h78ekkkiC4KVOaI14wgvmSCj3qvBl1UGHgJZmmO2N6zp0HAwam1xc0PvQ9nV1tqbF5U+Uh4sCQQC4Yf+o67xiR9XCEEJyarEGQRie6tOEG0slg9WEDTrgEx3M8SfKdgjh3pzhpyLGf7CiwicnLiNfCB3o3l2m8q0PAkEAwM9Oye2wu7dnc6W+N6SlkZVm7kP31uQN1BcqZpUXqcW0MXoQ7a9UdPCPjIsqRgylPavRqwJ7gKZWofriCu2+7wJAIkMDkM4NOW4DyIXg8wXkUzcxbgZQu5Geyx/OQzV6JT0oIncFX9fDGsWU/VFjYuNDXVsaj2tBY11MwYLggC9D/QJAbgNEEDLpwOizVDWPy3qAgCifWEyg/FL5v9kVHo2+N19w0HlB0NMdYPVNEuPFxTxzzsnE087wEbhFHFjt9YjlkQ==\n\n\n***************** 公钥加密私钥解密开始 *****************\n加密前：123456\n加密后：J8ov9OnSNuUL4biVYK09CZ1diwxXyiU1o/k8OzGkYy6MQ60yFNe3OaQ8Nu4kYaBhuZrd9jwEdl9EsUjwkwJ7U9yKe3U9lMcj/cEkrnNNEkDvKHBsq/NEIqrGOfW8+lfx/T6guN3KWALS6T0asBfE6uBrdRlIXhRrHyQ/XKRe/IA=\n解密后：123456\n解密字符串和原始字符串一致，解密成功\n***************** 公钥加密私钥解密结束 *****************\n\n\n***************** 私钥加密公钥解密开始 *****************\n加密前：123456\n加密后：Hw2vOZXe3nivbS1hR0dZhEtpSeaAfGrZiwOkgHNkPi1auNsgVM0MT7InaqdzOgu+f9AgNhOHhaNzROr4rI6RflsfEXeQp4gjR2v6Y0IJiT+djKIi8mF8esIEojXFwPqkNGFyzhS4dxP7P5voo5qLzU4RPVfmG0ldw+P5MA7p6tc=\n解密后：123456\n解密字符串和原始字符串一致，解密成功\n***************** 私钥加密公钥解密结束 *****************</code></pre>\n\n","categories":["Java","JavaClass"],"tags":["JavaClass","Java","RSA"]},{"title":"Java 实现 HTTP 请求的三种方式","url":"/2020/12/2020-12-11-Java%E5%AE%9E%E7%8E%B0HTTP%E8%AF%B7%E6%B1%82%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F/","content":"<p>目前 JAVA 实现 HTTP 请求的方法用的最多的有两种：</p>\n<ul>\n<li><p>通过 HTTPClient 这种第三方的开源框架去实现。</p>\n<p>HTTPClient 对 HTTP 的封装性比较不错，通过它基本上能够满足我们大部分的需求。</p>\n<ul>\n<li>HttpClient3.1 是 org.apache.commons.httpclient 下操作远程 url 的工具包，虽然已不再更新，但实现工作中使用 httpClient3.1 的代码还是很多。</li>\n<li>HttpClient4.5 是 org.apache.http.client 下操作远程 url 的工具包，最新的。</li>\n</ul>\n</li>\n<li><p>通过 HttpURLConnection 去实现</p>\n<p>HttpURLConnection 是 JAVA 的标准类，是 JAVA 比较原生的一种实现方式。</p>\n</li>\n</ul>\n<a id=\"more\"></a>\n\n<h3 id=\"Apache-HttpComponents\"><a href=\"#Apache-HttpComponents\" class=\"headerlink\" title=\"Apache HttpComponents\"></a>Apache HttpComponents</h3><p>Apache HttpComponents™项目负责创建和维护一组底层 Java 组件工具集，这些组件主要关注 HTTP 和相关协议。</p>\n<ul>\n<li>官网：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9oYy5hcGFjaGUub3JnLw==\">https://hc.apache.org/<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>GitHub：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FwYWNoZS9odHRwY29tcG9uZW50cy1jbGllbnQ=\">https://github.com/apache/httpcomponents-client<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<h3 id=\"第一种：Java-原生\"><a href=\"#第一种：Java-原生\" class=\"headerlink\" title=\"第一种：Java 原生\"></a>第一种：Java 原生</h3><p>通过 Java 原生 HttpURLConnection 来实现。</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span>extern<span class=\"token punctuation\">.</span>slf4j<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Slf4j</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">InputStream</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">InputStreamReader</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">OutputStream</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpURLConnection</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MalformedURLException</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span></span>URL<span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HttpClient</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">doGet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> httpurl<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">HttpURLConnection</span> connection <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">InputStream</span> is <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">BufferedReader</span> br <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 返回结果字符串</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 创建远程url连接对象</span>\n            <span class=\"token class-name\">URL</span> url <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">URL</span><span class=\"token punctuation\">(</span>httpurl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 通过远程url连接对象打开一个连接，强转成httpURLConnection类</span>\n            connection <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpURLConnection</span><span class=\"token punctuation\">)</span> url<span class=\"token punctuation\">.</span><span class=\"token function\">openConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 设置连接方式：get</span>\n            connection<span class=\"token punctuation\">.</span><span class=\"token function\">setRequestMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 设置连接主机服务器的超时时间：15000毫秒</span>\n            connection<span class=\"token punctuation\">.</span><span class=\"token function\">setConnectTimeout</span><span class=\"token punctuation\">(</span><span class=\"token number\">15000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 设置读取远程返回的数据时间：60000毫秒</span>\n            connection<span class=\"token punctuation\">.</span><span class=\"token function\">setReadTimeout</span><span class=\"token punctuation\">(</span><span class=\"token number\">60000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 发送请求</span>\n            connection<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 通过connection连接，获取输入流</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>connection<span class=\"token punctuation\">.</span><span class=\"token function\">getResponseCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                is <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">getInputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// 封装输入流is，并指定字符集</span>\n                br <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">InputStreamReader</span><span class=\"token punctuation\">(</span>is<span class=\"token punctuation\">,</span> <span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// 存放数据</span>\n                <span class=\"token class-name\">StringBuffer</span> sbf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">String</span> temp <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>temp <span class=\"token operator\">=</span> br<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    sbf<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    sbf<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                result <span class=\"token operator\">=</span> sbf<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">MalformedURLException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 关闭资源</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span> <span class=\"token operator\">!=</span> br<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                    br<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span> <span class=\"token operator\">!=</span> is<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                    is<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n\n            connection<span class=\"token punctuation\">.</span><span class=\"token function\">disconnect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 关闭远程连接</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">doPost</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> httpUrl<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> param<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token class-name\">HttpURLConnection</span> connection <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">InputStream</span> is <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">OutputStream</span> os <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">BufferedReader</span> br <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">URL</span> url <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">URL</span><span class=\"token punctuation\">(</span>httpUrl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 通过远程url连接对象打开连接</span>\n            connection <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpURLConnection</span><span class=\"token punctuation\">)</span> url<span class=\"token punctuation\">.</span><span class=\"token function\">openConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 设置连接请求方式</span>\n            connection<span class=\"token punctuation\">.</span><span class=\"token function\">setRequestMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"POST\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 设置连接主机服务器超时时间：15000毫秒</span>\n            connection<span class=\"token punctuation\">.</span><span class=\"token function\">setConnectTimeout</span><span class=\"token punctuation\">(</span><span class=\"token number\">15000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 设置读取主机服务器返回数据超时时间：60000毫秒</span>\n            connection<span class=\"token punctuation\">.</span><span class=\"token function\">setReadTimeout</span><span class=\"token punctuation\">(</span><span class=\"token number\">60000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// 默认值为：false，当向远程服务器传送数据/写数据时，需要设置为true</span>\n            connection<span class=\"token punctuation\">.</span><span class=\"token function\">setDoOutput</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 默认值为：true，当前向远程服务读取数据时，设置为true，该参数可有可无</span>\n            connection<span class=\"token punctuation\">.</span><span class=\"token function\">setDoInput</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 设置传入参数的格式:请求参数应该是 name1=value1&amp;name2=value2 的形式。</span>\n            connection<span class=\"token punctuation\">.</span><span class=\"token function\">setRequestProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Content-Type\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"application/x-www-form-urlencoded\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 设置鉴权信息：Authorization: Bearer da3efcbf-0845-4fe3-8aba-ee040be542c0</span>\n            connection<span class=\"token punctuation\">.</span><span class=\"token function\">setRequestProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Authorization\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Bearer da3efcbf-0845-4fe3-8aba-ee040be542c0\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 通过连接对象获取一个输出流</span>\n            os <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">getOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 通过输出流对象将参数写出去/传输出去,它是通过字节数组写出的</span>\n            os<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 通过连接对象获取一个输入流，向远程读取</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>connection<span class=\"token punctuation\">.</span><span class=\"token function\">getResponseCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n                is <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">getInputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// 对输入流对象进行包装:charset根据工作项目组的要求来设置</span>\n                br <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">InputStreamReader</span><span class=\"token punctuation\">(</span>is<span class=\"token punctuation\">,</span> <span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token class-name\">StringBuffer</span> sbf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">String</span> temp <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// 循环遍历一行一行读取数据</span>\n                <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>temp <span class=\"token operator\">=</span> br<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    sbf<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    sbf<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                result <span class=\"token operator\">=</span> sbf<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">MalformedURLException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 关闭资源</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span> <span class=\"token operator\">!=</span> br<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                    br<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span> <span class=\"token operator\">!=</span> os<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                    os<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span> <span class=\"token operator\">!=</span> is<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                    is<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token comment\">// 断开与远程地址url的连接</span>\n            connection<span class=\"token punctuation\">.</span><span class=\"token function\">disconnect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<h3 id=\"第二种：HttpClient3-1\"><a href=\"#第二种：HttpClient3-1\" class=\"headerlink\" title=\"第二种：HttpClient3.1\"></a>第二种：HttpClient3.1</h3><p>通过 Apache HttpClient3.1 来实现。</p>\n<p>引入依赖：</p>\n<pre class=\"language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token comment\">&lt;!-- https://mvnrepository.com/artifact/commons-httpclient/commons-httpclient --&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>commons-httpclient<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>commons-httpclient<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>3.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n\n<p>代码实现：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">InputStream</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">InputStreamReader</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">UnsupportedEncodingException</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Iterator</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Entry</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Set</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span>extern<span class=\"token punctuation\">.</span>slf4j<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Slf4j</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>commons<span class=\"token punctuation\">.</span>httpclient<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DefaultHttpMethodRetryHandler</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>commons<span class=\"token punctuation\">.</span>httpclient<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpClient</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>commons<span class=\"token punctuation\">.</span>httpclient<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpStatus</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>commons<span class=\"token punctuation\">.</span>httpclient<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">NameValuePair</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>commons<span class=\"token punctuation\">.</span>httpclient<span class=\"token punctuation\">.</span>methods<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">GetMethod</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>commons<span class=\"token punctuation\">.</span>httpclient<span class=\"token punctuation\">.</span>methods<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PostMethod</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>commons<span class=\"token punctuation\">.</span>httpclient<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpMethodParams</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HttpClient3</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">doGet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> url<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 输入流</span>\n        <span class=\"token class-name\">InputStream</span> is <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">BufferedReader</span> br <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 创建httpClient实例</span>\n        <span class=\"token class-name\">HttpClient</span> httpClient <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HttpClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 设置http连接主机服务超时时间：15000毫秒</span>\n        <span class=\"token comment\">// 先获取连接管理器对象，再获取参数对象,再进行参数的赋值</span>\n        httpClient<span class=\"token punctuation\">.</span><span class=\"token function\">getHttpConnectionManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getParams</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setConnectionTimeout</span><span class=\"token punctuation\">(</span><span class=\"token number\">15000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 创建一个Get方法实例对象</span>\n        <span class=\"token class-name\">GetMethod</span> getMethod <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GetMethod</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 设置get请求超时为60000毫秒</span>\n        getMethod<span class=\"token punctuation\">.</span><span class=\"token function\">getParams</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setParameter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpMethodParams</span><span class=\"token punctuation\">.</span>SO_TIMEOUT<span class=\"token punctuation\">,</span> <span class=\"token number\">60000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 设置请求重试机制，默认重试次数：3次，参数设置为true，重试机制可用，false相反</span>\n        getMethod<span class=\"token punctuation\">.</span><span class=\"token function\">getParams</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setParameter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpMethodParams</span><span class=\"token punctuation\">.</span>RETRY_HANDLER<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultHttpMethodRetryHandler</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 执行Get方法</span>\n            <span class=\"token keyword\">int</span> statusCode <span class=\"token operator\">=</span> httpClient<span class=\"token punctuation\">.</span><span class=\"token function\">executeMethod</span><span class=\"token punctuation\">(</span>getMethod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 判断返回码</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>statusCode <span class=\"token operator\">!=</span> <span class=\"token class-name\">HttpStatus</span><span class=\"token punctuation\">.</span>SC_OK<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">// 如果状态码返回的不是ok,说明失败了,打印错误信息</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Method faild: \"</span> <span class=\"token operator\">+</span> getMethod<span class=\"token punctuation\">.</span><span class=\"token function\">getStatusLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">// 通过getMethod实例，获取远程的一个输入流</span>\n                is <span class=\"token operator\">=</span> getMethod<span class=\"token punctuation\">.</span><span class=\"token function\">getResponseBodyAsStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// 包装输入流</span>\n                br <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">InputStreamReader</span><span class=\"token punctuation\">(</span>is<span class=\"token punctuation\">,</span> <span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token class-name\">StringBuffer</span> sbf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// 读取封装的输入流</span>\n                <span class=\"token class-name\">String</span> temp <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>temp <span class=\"token operator\">=</span> br<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    sbf<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n\n                result <span class=\"token operator\">=</span> sbf<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 关闭资源</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span> <span class=\"token operator\">!=</span> br<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                    br<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span> <span class=\"token operator\">!=</span> is<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                    is<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token comment\">// 释放连接</span>\n            getMethod<span class=\"token punctuation\">.</span><span class=\"token function\">releaseConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">doPost</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> url<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">&gt;</span></span> paramMap<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 获取输入流</span>\n        <span class=\"token class-name\">InputStream</span> is <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">BufferedReader</span> br <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 创建httpClient实例对象</span>\n        <span class=\"token class-name\">HttpClient</span> httpClient <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HttpClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 设置httpClient连接主机服务器超时时间：15000毫秒</span>\n        httpClient<span class=\"token punctuation\">.</span><span class=\"token function\">getHttpConnectionManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getParams</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setConnectionTimeout</span><span class=\"token punctuation\">(</span><span class=\"token number\">15000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 创建post请求方法实例对象</span>\n        <span class=\"token class-name\">PostMethod</span> postMethod <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PostMethod</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 设置post请求超时时间</span>\n        postMethod<span class=\"token punctuation\">.</span><span class=\"token function\">getParams</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setParameter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpMethodParams</span><span class=\"token punctuation\">.</span>SO_TIMEOUT<span class=\"token punctuation\">,</span> <span class=\"token number\">60000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">NameValuePair</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nvp <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 判断参数map集合paramMap是否为空</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span> <span class=\"token operator\">!=</span> paramMap <span class=\"token operator\">&amp;&amp;</span> paramMap<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token comment\">// 不为空</span>\n            <span class=\"token comment\">// 创建键值参数对象数组，大小为参数的个数</span>\n            nvp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NameValuePair</span><span class=\"token punctuation\">[</span>paramMap<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 循环遍历参数集合map</span>\n            <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Entry</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> entrySet <span class=\"token operator\">=</span> paramMap<span class=\"token punctuation\">.</span><span class=\"token function\">entrySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 获取迭代器</span>\n            <span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Entry</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> iterator <span class=\"token operator\">=</span> entrySet<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">&gt;</span></span> mapEntry <span class=\"token operator\">=</span> iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// 从mapEntry中获取key和value创建键值对象存放到数组中</span>\n                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                    nvp<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NameValuePair</span><span class=\"token punctuation\">(</span>mapEntry<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                            <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>mapEntry<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">UnsupportedEncodingException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                index<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// 判断nvp数组是否为空</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span> <span class=\"token operator\">!=</span> nvp <span class=\"token operator\">&amp;&amp;</span> nvp<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 将参数存放到requestBody对象中</span>\n            postMethod<span class=\"token punctuation\">.</span><span class=\"token function\">setRequestBody</span><span class=\"token punctuation\">(</span>nvp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// 执行POST方法</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> statusCode <span class=\"token operator\">=</span> httpClient<span class=\"token punctuation\">.</span><span class=\"token function\">executeMethod</span><span class=\"token punctuation\">(</span>postMethod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 判断是否成功</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>statusCode <span class=\"token operator\">!=</span> <span class=\"token class-name\">HttpStatus</span><span class=\"token punctuation\">.</span>SC_OK<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Method faild: \"</span> <span class=\"token operator\">+</span> postMethod<span class=\"token punctuation\">.</span><span class=\"token function\">getStatusLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token comment\">// 获取远程返回的数据</span>\n            is <span class=\"token operator\">=</span> postMethod<span class=\"token punctuation\">.</span><span class=\"token function\">getResponseBodyAsStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 封装输入流</span>\n            br <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">InputStreamReader</span><span class=\"token punctuation\">(</span>is<span class=\"token punctuation\">,</span> <span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token class-name\">StringBuffer</span> sbf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">String</span> temp <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>temp <span class=\"token operator\">=</span> br<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                sbf<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            result <span class=\"token operator\">=</span> sbf<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 关闭资源</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span> <span class=\"token operator\">!=</span> br<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                    br<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span> <span class=\"token operator\">!=</span> is<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                    is<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token comment\">// 释放连接</span>\n            postMethod<span class=\"token punctuation\">.</span><span class=\"token function\">releaseConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<h3 id=\"第三种：HttpClient4-5\"><a href=\"#第三种：HttpClient4-5\" class=\"headerlink\" title=\"第三种：HttpClient4.5\"></a>第三种：HttpClient4.5</h3><p>通过 Apache HttpClient4.5 来实现。</p>\n<p>引入依赖：</p>\n<pre class=\"language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token comment\">&lt;!-- https://mvnrepository.com/artifact/org.apache.httpcomponents/httpclient --&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.apache.httpcomponents<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>httpclient<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>4.5.13<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n\n<p>代码实现：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span>extern<span class=\"token punctuation\">.</span>slf4j<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Slf4j</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpEntity</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">NameValuePair</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ClientProtocolException</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RequestConfig</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span>entity<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">UrlEncodedFormEntity</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span>methods<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">CloseableHttpResponse</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span>methods<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpGet</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span>methods<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpPost</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span>impl<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">CloseableHttpClient</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span>impl<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpClients</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">BasicNameValuePair</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">EntityUtils</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">UnsupportedEncodingException</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HttpClient4</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">doGet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> url<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">CloseableHttpClient</span> httpClient <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">CloseableHttpResponse</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> result <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 通过址默认配置创建一个httpClient实例</span>\n            httpClient <span class=\"token operator\">=</span> <span class=\"token class-name\">HttpClients</span><span class=\"token punctuation\">.</span><span class=\"token function\">createDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 创建httpGet远程连接实例</span>\n            <span class=\"token class-name\">HttpGet</span> httpGet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HttpGet</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 设置请求头信息，鉴权</span>\n            httpGet<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Authorization\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Bearer da3efcbf-0845-4fe3-8aba-ee040be542c0\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 设置配置请求参数</span>\n            <span class=\"token class-name\">RequestConfig</span> requestConfig <span class=\"token operator\">=</span> <span class=\"token class-name\">RequestConfig</span><span class=\"token punctuation\">.</span><span class=\"token function\">custom</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setConnectTimeout</span><span class=\"token punctuation\">(</span><span class=\"token number\">35000</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 连接主机服务超时时间</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">setConnectionRequestTimeout</span><span class=\"token punctuation\">(</span><span class=\"token number\">35000</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 请求超时时间</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">setSocketTimeout</span><span class=\"token punctuation\">(</span><span class=\"token number\">60000</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 数据读取超时时间</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 为httpGet实例设置配置</span>\n            httpGet<span class=\"token punctuation\">.</span><span class=\"token function\">setConfig</span><span class=\"token punctuation\">(</span>requestConfig<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 执行get请求得到返回对象</span>\n            response <span class=\"token operator\">=</span> httpClient<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>httpGet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 通过返回对象获取返回数据</span>\n            <span class=\"token class-name\">HttpEntity</span> entity <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">getEntity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 通过EntityUtils中的toString方法将结果转换为字符串</span>\n            result <span class=\"token operator\">=</span> <span class=\"token class-name\">EntityUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>entity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ClientProtocolException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 关闭资源</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span> <span class=\"token operator\">!=</span> response<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                    response<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span> <span class=\"token operator\">!=</span> httpClient<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                    httpClient<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">doPost</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> url<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">&gt;</span></span> paramMap<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">CloseableHttpClient</span> httpClient <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">CloseableHttpResponse</span> httpResponse <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> result <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 创建httpClient实例</span>\n        httpClient <span class=\"token operator\">=</span> <span class=\"token class-name\">HttpClients</span><span class=\"token punctuation\">.</span><span class=\"token function\">createDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 创建httpPost远程连接实例</span>\n        <span class=\"token class-name\">HttpPost</span> httpPost <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HttpPost</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 配置请求参数实例</span>\n        <span class=\"token class-name\">RequestConfig</span> requestConfig <span class=\"token operator\">=</span> <span class=\"token class-name\">RequestConfig</span><span class=\"token punctuation\">.</span><span class=\"token function\">custom</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setConnectTimeout</span><span class=\"token punctuation\">(</span><span class=\"token number\">35000</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 设置连接主机服务超时时间</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">setConnectionRequestTimeout</span><span class=\"token punctuation\">(</span><span class=\"token number\">35000</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 设置连接请求超时时间</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">setSocketTimeout</span><span class=\"token punctuation\">(</span><span class=\"token number\">60000</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 设置读取数据连接超时时间</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 为httpPost实例设置配置</span>\n        httpPost<span class=\"token punctuation\">.</span><span class=\"token function\">setConfig</span><span class=\"token punctuation\">(</span>requestConfig<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 设置请求头</span>\n        httpPost<span class=\"token punctuation\">.</span><span class=\"token function\">addHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Content-Type\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"application/x-www-form-urlencoded\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 封装post请求参数</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span> <span class=\"token operator\">!=</span> paramMap <span class=\"token operator\">&amp;&amp;</span> paramMap<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">NameValuePair</span><span class=\"token punctuation\">&gt;</span></span> nvps <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">NameValuePair</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 通过map集成entrySet方法获取entity</span>\n            <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Entry</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> entrySet <span class=\"token operator\">=</span> paramMap<span class=\"token punctuation\">.</span><span class=\"token function\">entrySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 循环遍历，获取迭代器</span>\n            <span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Entry</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> iterator <span class=\"token operator\">=</span> entrySet<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">Map</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">&gt;</span></span> mapEntry <span class=\"token operator\">=</span> iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                nvps<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">BasicNameValuePair</span><span class=\"token punctuation\">(</span>mapEntry<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> mapEntry<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token comment\">// 为httpPost设置封装好的请求参数</span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                httpPost<span class=\"token punctuation\">.</span><span class=\"token function\">setEntity</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">UrlEncodedFormEntity</span><span class=\"token punctuation\">(</span>nvps<span class=\"token punctuation\">,</span> <span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">UnsupportedEncodingException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// httpClient对象执行post请求,并返回响应参数对象</span>\n            httpResponse <span class=\"token operator\">=</span> httpClient<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>httpPost<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 从响应对象中获取响应内容</span>\n            <span class=\"token class-name\">HttpEntity</span> entity <span class=\"token operator\">=</span> httpResponse<span class=\"token punctuation\">.</span><span class=\"token function\">getEntity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            result <span class=\"token operator\">=</span> <span class=\"token class-name\">EntityUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>entity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ClientProtocolException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 关闭资源</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span> <span class=\"token operator\">!=</span> httpResponse<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                    httpResponse<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span> <span class=\"token operator\">!=</span> httpClient<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                    httpClient<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n","categories":["Java","Apache","JavaJar","HttpComponents"],"tags":["Apache","Java","JavaJar","HttpComponents"]},{"title":"Zeppelin 配置连接 MySQL 数据库","url":"/2020/12/2020-12-30-Zeppelin%E9%85%8D%E7%BD%AE%E8%BF%9E%E6%8E%A5MySQL%E6%95%B0%E6%8D%AE%E5%BA%93/","content":"<p>Zeppelin 原生支持 JDBC 链接。 但是默认的设置是指向 PostgreSQL。</p>\n<p>一种最简单的办法就是直接修改 JDBC Interpreter 里面的内容，指向你自己的 MySQL 实例即可。</p>\n<p>本文介绍如何创建 MySQL Interpreter 并连接。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"访问-Zeppelin\"><a href=\"#访问-Zeppelin\" class=\"headerlink\" title=\"访问 Zeppelin\"></a>访问 Zeppelin</h3><p>搭建安装好 Zeppelin 后，访问 <span class=\"exturl\" data-url=\"aHR0cDovLzEyNy4wLjAuMTo4MDgwLyMv\">http://127.0.0.1:8080/#/<i class=\"fa fa-external-link-alt\"></i></span> 。结果如下：</p>\n<p><img src=\"/images/2020/12/image-20201230143530356.png\" alt=\"image-20201230143530356\" loading=\"lazy\"></p>\n<h3 id=\"创建-MySQL-Interpreters\"><a href=\"#创建-MySQL-Interpreters\" class=\"headerlink\" title=\"创建 MySQL Interpreters\"></a>创建 MySQL Interpreters</h3><ol>\n<li><p>选择 Interpreters</p>\n<p><img src=\"/images/2020/12/image-20201230143619751.png\" alt=\"image-20201230143619751\" loading=\"lazy\"></p>\n</li>\n<li><p>点击 Create 进行创建</p>\n<p><img src=\"/images/2020/12/image-20201230143656818.png\" alt=\"image-20201230143656818\" loading=\"lazy\"></p>\n</li>\n<li><p>配置解析器名称，注意解析器所属组选择 “jdbc”</p>\n<p><img src=\"/images/2020/12/image-20201230143831845.png\" alt=\"image-20201230143831845\" loading=\"lazy\"></p>\n</li>\n<li><p>配置 jdbc 连接属性</p>\n<p><img src=\"/images/2020/12/image-20201230144116469.png\" alt=\"image-20201230144116469\" loading=\"lazy\"></p>\n</li>\n<li><p>设置依赖 MySQL 驱动，这里选择 <code>mysql:mysql-connector-java:8.0.22</code>。</p>\n<p><img src=\"/images/2020/12/image-20201230144218765.png\" alt=\"image-20201230144218765\" loading=\"lazy\"></p>\n</li>\n<li><p>检查没有问题后，点击 Save 保存。</p>\n</li>\n</ol>\n<h3 id=\"创建-MySQL-NoteBook\"><a href=\"#创建-MySQL-NoteBook\" class=\"headerlink\" title=\"创建 MySQL NoteBook\"></a>创建 MySQL NoteBook</h3><ol>\n<li><p>选择创建  NoteBook</p>\n<p><img src=\"/images/2020/12/image-20201230144519005.png\" alt=\"image-20201230144519005\" loading=\"lazy\"></p>\n</li>\n<li><p>设置 NoteBook 名称，Interpreters 选择上面创建的 “mysql-Interpreters”。</p>\n<p><img src=\"/images/2020/12/image-20201230144431472.png\" alt=\"image-20201230144431472\" loading=\"lazy\"></p>\n</li>\n<li><p>输入 SQL，并点击执行，即可查看 执行结果 table。</p>\n<p><img src=\"/images/2020/12/image-20201230144757351.png\" alt=\"image-20201230144757351\" loading=\"lazy\"></p>\n</li>\n<li><p>选择 Bar Chart，并现在 keys 为 “statday”，values 为 “cnt”，即可查看相应的图表。</p>\n<p><img src=\"/images/2020/12/image-20201230144858229.png\" alt=\"image-20201230144858229\" loading=\"lazy\"></p>\n</li>\n<li><p>饼图、折线图等，与柱状图类似。不赘述。</p>\n</li>\n</ol>\n","categories":["Apache","Database","MySQL","Zeppelin"],"tags":["Apache","MySQL","Zeppelin"]},{"title":"SpringBoot 用 AOP 切面实现权限校验","url":"/2021/01/2021-01-02-SpringBoot%E7%94%A8AOP%E5%88%87%E9%9D%A2%E5%AE%9E%E7%8E%B0%E6%9D%83%E9%99%90%E6%A0%A1%E9%AA%8C/","content":"<p>使用 AOP，首先需要引入 <strong>AOP 的依赖</strong>。</p>\n<pre class=\"language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>spring-boot-starter-aop<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n\n<a id=\"more\"></a>\n\n<h3 id=\"截获Get请求\"><a href=\"#截获Get请求\" class=\"headerlink\" title=\"截获Get请求\"></a>截获 Get 请求</h3><p>在所有的 <code>get</code> 请求被调用前在控制台输出一句 \"get 请求的 advice 触发了\"。</p>\n<h4 id=\"创建AOP切面类\"><a href=\"#创建AOP切面类\" class=\"headerlink\" title=\"创建AOP切面类\"></a>创建 AOP 切面类</h4><p>创建一个 AOP 切面类，只要在类上加个 <code>@Aspect</code> 注解即可。</p>\n<ul>\n<li><code>@Aspect</code> 注解用来描述一个切面类，定义切面类的时候需要打上这个注解。</li>\n<li><code>@Component</code> 注解将该类交给 Spring 来管理。</li>\n</ul>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>aspectj<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Aspect</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>aspectj<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Before</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>aspectj<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Pointcut</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Component</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Aspect</span>\n<span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LogAdvice</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 定义一个切点：所有被GetMapping注解修饰的方法会织入advice</span>\n    <span class=\"token annotation punctuation\">@Pointcut</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"@annotation(org.springframework.web.bind.annotation.GetMapping)\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">logAdvicePointcut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Before表示logAdvice将在目标方法执行前执行</span>\n    <span class=\"token annotation punctuation\">@Before</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"logAdvicePointcut()\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">logAdvice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 这里只是一个示例，你可以写任何处理逻辑</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"get请求的advice触发了\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<h4 id=\"创建接口类\"><a href=\"#创建接口类\" class=\"headerlink\" title=\"创建接口类\"></a>创建接口类</h4><p>创建一个接口类，内部创建一个 get 请求：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@RestController</span>\n<span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"/aop\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AopController</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"/getTest\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">JSONObject</span> <span class=\"token function\">aopTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> JSON<span class=\"token punctuation\">.</span><span class=\"token function\">parseObject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{\\\"message\\\":\\\"SUCCESS\\\",\\\"code\\\":200}\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@PostMapping</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"/postTest\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">JSONObject</span> <span class=\"token function\">aopTest2</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestParam</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> JSON<span class=\"token punctuation\">.</span><span class=\"token function\">parseObject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{\\\"message\\\":\\\"SUCCESS\\\",\\\"code\\\":200}\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<h4 id=\"请求接口\"><a href=\"#请求接口\" class=\"headerlink\" title=\"请求接口\"></a>请求接口</h4><p>项目启动后，请求 <code>http://localhost:8080/aop/getTest</code> 接口：</p>\n<p><img src=\"/images/2021/01/image-20201231112432589.png\" alt=\"image-20201231112432589\" loading=\"lazy\"></p>\n<h3 id=\"截获权限校验注解\"><a href=\"#截获权限校验注解\" class=\"headerlink\" title=\"截获权限校验注解\"></a>截获权限校验注解</h3><h4 id=\"自定义注解\"><a href=\"#自定义注解\" class=\"headerlink\" title=\"自定义注解\"></a>自定义注解</h4><p>自定义一个注解 <code>PermissionsAnnotation</code></p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>METHOD<span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span>RUNTIME<span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Documented</span>\n<span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">PermissionAnnotation</span><span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<h4 id=\"创建切面类\"><a href=\"#创建切面类\" class=\"headerlink\" title=\"创建切面类\"></a>创建切面类</h4><p>创建一个切面类，切点设置为拦截所有标注 <code>PermissionsAnnotation</code> 的方法，截取到接口的参数，进行简单的权限校验。</p>\n<ul>\n<li><code>@Aspect</code> 注解用来描述一个切面类，定义切面类的时候需要打上这个注解。</li>\n<li><code>@Component</code> 注解将该类交给 Spring 来管理。</li>\n<li><code>@Order</code> 注解管理切面类执行顺序，该注解后的数字越小，所在切面类越先执行。</li>\n</ul>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>fastjson<span class=\"token punctuation\">.</span></span>JSON<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>fastjson<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">JSONObject</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span>extern<span class=\"token punctuation\">.</span>slf4j<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Slf4j</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>aspectj<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ProceedingJoinPoint</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>aspectj<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Around</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>aspectj<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Aspect</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>aspectj<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Pointcut</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Order</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Component</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token annotation punctuation\">@Aspect</span>\n<span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token annotation punctuation\">@Order</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PermissionFirstAdvice</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">// 定义一个切面，括号内写入第1步中自定义注解的路径</span>\n    <span class=\"token annotation punctuation\">@Pointcut</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"@annotation(com.jueee.annotation.PermissionAnnotation)\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">permissionCheck</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Around</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"permissionCheck()\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">permissionCheckFirst</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProceedingJoinPoint</span> joinPoint<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Throwable</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"===================权限切面===================：\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//获取请求参数，详见接口类</span>\n        <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> objects <span class=\"token operator\">=</span> joinPoint<span class=\"token punctuation\">.</span><span class=\"token function\">getArgs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Long</span> id <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JSONObject</span><span class=\"token punctuation\">)</span> objects<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLong</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JSONObject</span><span class=\"token punctuation\">)</span> objects<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id-&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\"</span> <span class=\"token operator\">+</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name-&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// name不是管理员则抛出异常</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> JSON<span class=\"token punctuation\">.</span><span class=\"token function\">parseObject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{\\\"message\\\":\\\"not admin\\\",\\\"code\\\":403}\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> joinPoint<span class=\"token punctuation\">.</span><span class=\"token function\">proceed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre>\n\n<h4 id=\"创建接口类-1\"><a href=\"#创建接口类-1\" class=\"headerlink\" title=\"创建接口类\"></a>创建接口类</h4><p>创建接口类，并在目标方法上标注自定义注解 <code>PermissionsAnnotation</code>：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>fastjson<span class=\"token punctuation\">.</span></span>JSON<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>fastjson<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">JSONObject</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>jueee<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PermissionAnnotation</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@RestController</span>\n<span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"/permission\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestController</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"/check\"</span><span class=\"token punctuation\">,</span> method <span class=\"token operator\">=</span> <span class=\"token class-name\">RequestMethod</span><span class=\"token punctuation\">.</span>POST<span class=\"token punctuation\">)</span>\n    <span class=\"token annotation punctuation\">@PermissionAnnotation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 添加这个注解</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">JSONObject</span> <span class=\"token function\">getGroupList</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">JSONObject</span> request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> JSON<span class=\"token punctuation\">.</span><span class=\"token function\">parseObject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{\\\"message\\\":\\\"SUCCESS\\\",\\\"code\\\":200,\\\"data\\\":\"</span> <span class=\"token operator\">+</span> request <span class=\"token operator\">+</span> <span class=\"token string\">\"}\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<h4 id=\"请求接口-1\"><a href=\"#请求接口-1\" class=\"headerlink\" title=\"请求接口\"></a>请求接口</h4><p>有权限请求：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">JSONObject</span> jsonObject <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JSONObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\njsonObject<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\njsonObject<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> result <span class=\"token operator\">=</span> <span class=\"token class-name\">HttpClient4</span><span class=\"token punctuation\">.</span><span class=\"token function\">doPost</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://localhost:8080/permission/check\"</span><span class=\"token punctuation\">,</span>jsonObject<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlog<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {\"code\":200,\"data\":{\"name\":\"admin\",\"id\":11},\"message\":\"SUCCESS\"}</span></code></pre>\n\n<p>无权限请求：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">JSONObject</span> jsonObject <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JSONObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\njsonObject<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">23</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\njsonObject<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"jueee\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> result <span class=\"token operator\">=</span> <span class=\"token class-name\">HttpClient4</span><span class=\"token punctuation\">.</span><span class=\"token function\">doPost</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://localhost:8080/permission/check\"</span><span class=\"token punctuation\">,</span>jsonObject<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlog<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {\"code\":403,\"message\":\"not admin\"}</span></code></pre>\n\n","categories":["Java","SpringBoot","Spring"],"tags":["Java","Spring","AOP"]},{"title":"Spring 面向切面编程 AOP 介绍及注解","url":"/2021/01/2021-01-01-Spring%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2%E7%BC%96%E7%A8%8BAOP%E4%BB%8B%E7%BB%8D%E5%8F%8A%E6%B3%A8%E8%A7%A3/","content":"<h3 id=\"Spring-AOP\"><a href=\"#Spring-AOP\" class=\"headerlink\" title=\"Spring AOP\"></a>Spring AOP</h3><p><strong>AOP 即 Aspect Oriented Program 面向切面编程</strong>。</p>\n<p>首先，在面向切面编程的思想里面，把功能分为核心业务功能，和周边功能。</p>\n<ul>\n<li><strong>所谓的核心业务</strong>，比如登陆，增加数据，删除数据都叫核心业务</li>\n<li><strong>所谓的周边功能</strong>，比如性能统计，日志，事务管理等等</li>\n</ul>\n<p>周边功能在 Spring 的面向切面编程 AOP 思想里，即被定义为切面。</p>\n<p>在面向切面编程 AOP 的思想里面，核心业务功能和切面功能分别独立进行开发，然后把切面功能和核心业务功能 \"编织\" 在一起，这就叫 AOP。</p>\n<a id=\"more\"></a>\n\n<h4 id=\"AOP-的目的\"><a href=\"#AOP-的目的\" class=\"headerlink\" title=\"AOP 的目的\"></a>AOP 的目的</h4><p>AOP 能够将那些与业务无关，却为业务模块所共同调用的逻辑或责任（例如事务处理、日志管理、权限控制等）封装起来，便于减少系统的重复代码，降低模块间的耦合度，并有利于未来的可拓展性和可维护性。</p>\n<h4 id=\"AOP术语\"><a href=\"#AOP术语\" class=\"headerlink\" title=\"AOP术语\"></a>AOP 术语</h4><ul>\n<li><p><strong>连接点（Joinpoint)</strong> 程序执行的某个特定位置，如某个方法调用前，调用后，方法抛出异常后，这些代码中的特定点称为连接点。简单来说，就是在哪加入你的逻辑增强<br>连接点表示具体要拦截的方法，上面切点是定义一个范围，而连接点是具体到某个方法</p>\n</li>\n<li><p><strong>切点（PointCut）</strong> 每个程序的连接点有多个，如何定位到某个感兴趣的连接点，就需要通过切点来定位。比如，连接点 -- 数据库的记录，切点 -- 查询条件<br>切点用于来限定 Spring-AOP 启动的范围，通常我们采用表达式的方式来设置，所以关键词是范围</p>\n</li>\n<li><p><strong>业务增强（Advice）</strong> 业务增强是织入到目标类连接点上的一段程序代码。</p>\n<p>业务增强分为如下几种：</p>\n<ul>\n<li><strong>前置通知 (before)</strong>: 在执行业务代码前做些操作，比如获取连接对象</li>\n<li><strong>后置通知 (after)</strong>: 在执行业务代码后做些操作，无论是否发生异常，它都会执行，比如关闭连接对象</li>\n<li><strong>异常通知（afterThrowing）</strong>: 在执行业务代码后出现异常，需要做的操作，比如回滚事务</li>\n<li><strong>返回通知 (afterReturning)</strong>, 在执行业务代码后无异常，会执行的操作</li>\n<li> ** 环绕通知 (around)**，在执行业务代码前和执行业务代码后都会执行的操作</li>\n</ul>\n</li>\n<li><p><strong>目标对象（Target）</strong> 需要被加强的业务对象</p>\n</li>\n<li><p><strong>织入（Weaving）</strong> 织入就是将增强添加到对目标类具体连接点上的过程。<br>织入是一个形象的说法，具体来说，就是生成代理对象并将切面内容融入到业务流程的过程。</p>\n</li>\n<li><p><strong>代理类（Proxy）</strong> 一个类被 AOP 织入增强后，就产生了一个代理类。</p>\n</li>\n<li><p><strong>切面（Aspect）</strong> 切面由切点和增强组成，它既包括了横切逻辑的定义，也包括了连接点的定义，SpringAOP 就是将切面所定义的横切逻辑织入到切面所制定的连接点中。</p>\n</li>\n</ul>\n<h3 id=\"AOP-体系\"><a href=\"#AOP-体系\" class=\"headerlink\" title=\"AOP 体系\"></a>AOP 体系</h3><p><img src=\"/images/2021/01/image-20201231111624405.png\" alt=\"image-20201231111624405\" loading=\"lazy\"></p>\n<h3 id=\"AOP-相关注解\"><a href=\"#AOP-相关注解\" class=\"headerlink\" title=\"AOP 相关注解\"></a>AOP 相关注解</h3><h4 id=\"Pointcut\"><a href=\"#Pointcut\" class=\"headerlink\" title=\"@Pointcut\"></a>@Pointcut</h4><p><code>@Pointcut</code> 注解，用来定义一个切面，即上文中所关注的某件事情的入口，切入点定义了事件触发时机。</p>\n<p>有两个常用的表达式：</p>\n<h5 id=\"execution-表达式\"><a href=\"#execution-表达式\" class=\"headerlink\" title=\"execution() 表达式\"></a>execution () 表达式</h5><pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * 定义一个切面，拦截 com.jueee.controller 包和子包下的所有方法\n */</span>\n<span class=\"token annotation punctuation\">@Pointcut</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"execution(* com.jueee.controller..*.*(..))\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">pointCut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre>\n\n<p>以 <code>execution(* * com.jueee.controller..*.*(..)))</code> 表达式为例：</p>\n<ul>\n<li>第一个 * 号的位置：表示返回值类型，* 表示所有类型。</li>\n<li>包名：表示需要拦截的包名，后面的两个句点表示当前包和当前包的所有子包，在本例中指 com.mutest.controller 包、子包下所有类的方法。</li>\n<li>第二个 * 号的位置：表示类名，* 表示所有类。</li>\n<li><em>(..)：这个星号表示方法名，</em> 表示所有的方法，后面括弧里面表示方法的参数，两个句点表示任何参数。</li>\n</ul>\n<h5 id=\"annotation-表达式\"><a href=\"#annotation-表达式\" class=\"headerlink\" title=\"annotation() 表达式\"></a>annotation () 表达式</h5><p><code>annotation()</code> 方式是针对某个注解来定义切面，比如我们对具有 @PostMapping 注解的方法做切面，可以如下定义切面：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Pointcut</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"@annotation(org.springframework.web.bind.annotation.GetMapping)\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">logAdvicePointcut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre>\n\n<p>然后使用该切面的话，就会切入注解是 <code>@PostMapping</code> 的所有方法。</p>\n<p>这种方式很适合处理 <code>@GetMapping、@PostMapping、@DeleteMapping</code> 不同注解有各种特定处理逻辑的场景。</p>\n<h4 id=\"Around\"><a href=\"#Around\" class=\"headerlink\" title=\"@Around\"></a>@Around</h4><p><code>@Around</code> 注解用于修饰 <code>Around</code> 增强处理，<code>Around</code> 增强处理非常强大，表现在：</p>\n<ol>\n<li><code>@Around</code> 可以自由选择增强动作与目标方法的执行顺序，也就是说可以在增强动作前后，甚至过程中执行目标方法。这个特性的实现在于，调用 <code>ProceedingJoinPoint</code> 参数的 <code>procedd()</code> 方法才会执行目标方法。</li>\n<li><code>@Around</code> 可以改变执行目标方法的参数值，也可以改变执行目标方法之后的返回值。</li>\n</ol>\n<p><code>Around</code> 增强处理有以下特点：</p>\n<ol>\n<li>当定义一个 <code>Around</code> 增强处理方法时，该方法的第一个形参必须是 <code>ProceedingJoinPoint</code> 类型（至少一个形参）。在增强处理方法体内，调用 <code>ProceedingJoinPoint</code> 的 <code>proceed</code> 方法才会执行目标方法：这就是 <code>@Around</code> 增强处理可以完全控制目标方法执行时机、如何执行的关键；如果程序没有调用 <code>ProceedingJoinPoint</code> 的 <code>proceed</code> 方法，则目标方法不会执行。</li>\n<li>调用 <code>ProceedingJoinPoint</code> 的 <code>proceed</code> 方法时，还可以传入一个 <code>Object[ ]</code> 对象，该数组中的值将被传入目标方法作为实参 —— 这就是 <code>Around</code> 增强处理方法可以改变目标方法参数值的关键。这就是如果传入的 <code>Object[ ]</code> 数组长度与目标方法所需要的参数个数不相等，或者 <code>Object[ ]</code> 数组元素与目标方法所需参数的类型不匹配，程序就会出现异常。</li>\n</ol>\n<p><code>@Around</code> 功能虽然强大，但通常需要在线程安全的环境下使用。</p>\n<p>因此，如果使用普通的 <code>Before</code>、<code>AfterReturning</code> 就能解决的问题，就没有必要使用 <code>Around</code> 了。如果需要目标方法执行之前和之后共享某种状态数据，则应该考虑使用 <code>Around</code>。尤其是需要使用增强处理阻止目标的执行，或需要改变目标方法的返回值时，则只能使用 <code>Around</code> 增强处理了。</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Aspect</span>\n<span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AroundAdvice</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Pointcut</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"@annotation(com.jueee.annotation.PermissionAnnotation)\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">permissionCheck</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token annotation punctuation\">@Around</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"permissionCheck()\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">permissionCheck</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProceedingJoinPoint</span> joinPoint<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Throwable</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"===================开始增强处理===================\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//获取请求参数，详见接口类</span>\n        <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> objects <span class=\"token operator\">=</span> joinPoint<span class=\"token punctuation\">.</span><span class=\"token function\">getArgs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Long</span> id <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JSONObject</span><span class=\"token punctuation\">)</span> objects<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLong</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JSONObject</span><span class=\"token punctuation\">)</span> objects<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id1-&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\"</span> <span class=\"token operator\">+</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name1-&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 修改入参</span>\n        <span class=\"token class-name\">JSONObject</span> object <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JSONObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        object<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        object<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"lisi\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        objects<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> object<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 将修改后的参数传入</span>\n        <span class=\"token keyword\">return</span> joinPoint<span class=\"token punctuation\">.</span><span class=\"token function\">proceed</span><span class=\"token punctuation\">(</span>objects<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<p>处理日志：</p>\n<pre class=\"language-none\"><code class=\"language-none\">服务端：\n===================开始增强处理===================\nid1-&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;23\nname1-&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;jueee\n\n客户端：\n{\"code\":200,\"data\":{\"name\":\"lisi\",\"id\":8},\"message\":\"SUCCESS\"}</code></pre>\n\n<h4 id=\"Before\"><a href=\"#Before\" class=\"headerlink\" title=\"@Before\"></a>@Before</h4><p><code>@Before</code> 注解指定的方法在切面切入目标方法之前执行，可以做一些 <code>Log</code> 处理，也可以做一些信息的统计，比如获取用户的请求 <code>URL</code> 以及用户的 <code>IP</code> 地址等等，这个在做个人站点的时候都能用得到，都是常用的方法。</p>\n<p><code>JointPoint</code> 对象很有用，可以用它来获取一个签名，利用签名可以获取请求的包名、方法名，包括参数（通过 <code>joinPoint.getArgs()</code> 获取）等。如下示例：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Aspect</span>\n<span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BeforeAdvice</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * 定义一个切面，拦截 com.mutest.controller 包下的所有方法\n     */</span>\n    <span class=\"token annotation punctuation\">@Pointcut</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"execution(* com.jueee.controller..*.*(..))\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">pointCut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">/**\n     * 在上面定义的 pointCut() 切面方法之前执行该方法\n     * @param joinPoint jointPoint\n     */</span>\n    <span class=\"token annotation punctuation\">@Before</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pointCut()\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doBefore</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JoinPoint</span> joinPoint<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"====doBefore方法进入了====\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 获取签名</span>\n        <span class=\"token class-name\">Signature</span> signature <span class=\"token operator\">=</span> joinPoint<span class=\"token punctuation\">.</span><span class=\"token function\">getSignature</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 获取切入的包名</span>\n        <span class=\"token class-name\">String</span> declaringTypeName <span class=\"token operator\">=</span> signature<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaringTypeName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 获取即将执行的方法名</span>\n        <span class=\"token class-name\">String</span> funcName <span class=\"token operator\">=</span> signature<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"即将执行方法为: {}，属于{}包\"</span><span class=\"token punctuation\">,</span> funcName<span class=\"token punctuation\">,</span> declaringTypeName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 也可以用来记录一些信息，比如获取请求的 URL 和 IP</span>\n        <span class=\"token class-name\">ServletRequestAttributes</span> attributes <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ServletRequestAttributes</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">RequestContextHolder</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRequestAttributes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">HttpServletRequest</span> request <span class=\"token operator\">=</span> attributes<span class=\"token punctuation\">.</span><span class=\"token function\">getRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 获取请求 URL</span>\n        <span class=\"token class-name\">String</span> url <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getRequestURL</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 获取请求 IP</span>\n        <span class=\"token class-name\">String</span> ip <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getRemoteAddr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"用户请求的url为：{}，ip地址为：{}\"</span><span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">,</span> ip<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<p>输出日志：</p>\n<pre class=\"language-none\"><code class=\"language-none\">: ====doBefore方法进入了====\n: 即将执行方法为: getGroupList，属于com.jueee.controller.TestController包\n: 用户请求的url为：http://localhost:8080/permission/check，ip地址为：127.0.0.1</code></pre>\n\n<h4 id=\"After\"><a href=\"#After\" class=\"headerlink\" title=\"@After\"></a>@After</h4><p><code>@After</code> 注解和 <code>@Before</code> 注解相对应，指定的方法在切面切入目标方法之后执行，也可以做一些完成某方法之后的 Log 处理。</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Aspect</span>\n<span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AfterAdvice</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * 定义一个切面，拦截 com.mutest.controller 包下的所有方法\n     */</span>\n    <span class=\"token annotation punctuation\">@Pointcut</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"execution(* com.jueee.controller..*.*(..))\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">pointCut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">/**\n     * 在上面定义的切面方法之后执行该方法\n     * @param joinPoint jointPoint\n     */</span>\n    <span class=\"token annotation punctuation\">@After</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pointCut()\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doAfter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JoinPoint</span> joinPoint<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"==== doAfter 方法进入了====\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Signature</span> signature <span class=\"token operator\">=</span> joinPoint<span class=\"token punctuation\">.</span><span class=\"token function\">getSignature</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> method <span class=\"token operator\">=</span> signature<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"方法{}已经执行完\"</span><span class=\"token punctuation\">,</span> method<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<p>输出日志：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token operator\">:</span> <span class=\"token operator\">==</span><span class=\"token operator\">==</span> doAfter 方法进入了<span class=\"token operator\">==</span><span class=\"token operator\">==</span>\n<span class=\"token operator\">:</span> 方法getGroupList已经执行完</code></pre>\n\n<h4 id=\"AfterReturning\"><a href=\"#AfterReturning\" class=\"headerlink\" title=\"@AfterReturning\"></a>@AfterReturning</h4><p><code>@AfterReturning</code> 注解和 <code>@After</code> 有些类似，区别在于 <code>@AfterReturning</code> 注解可以用来捕获切入方法执行完之后的返回值，对返回值进行业务逻辑上的增强处理，例如：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Aspect</span>\n<span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AfterReturningAdvice</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * 定义一个切面，拦截 com.mutest.controller 包下的所有方法\n     */</span>\n    <span class=\"token annotation punctuation\">@Pointcut</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"execution(* com.jueee.controller..*.*(..))\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">pointCut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">/**\n     * 在上面定义的切面方法返回后执行该方法，可以捕获返回对象或者对返回对象进行增强\n     * @param joinPoint joinPoint\n     * @param result result\n     */</span>\n    <span class=\"token annotation punctuation\">@AfterReturning</span><span class=\"token punctuation\">(</span>pointcut <span class=\"token operator\">=</span> <span class=\"token string\">\"pointCut()\"</span><span class=\"token punctuation\">,</span> returning <span class=\"token operator\">=</span> <span class=\"token string\">\"result\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doAfterReturning</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JoinPoint</span> joinPoint<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Signature</span> signature <span class=\"token operator\">=</span> joinPoint<span class=\"token punctuation\">.</span><span class=\"token function\">getSignature</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> classMethod <span class=\"token operator\">=</span> signature<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"方法{}执行完毕，返回参数为：{}\"</span><span class=\"token punctuation\">,</span> classMethod<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 实际项目中可以根据业务做具体的返回值增强</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"对返回参数进行业务上的增强：{}\"</span><span class=\"token punctuation\">,</span> result <span class=\"token operator\">+</span> <span class=\"token string\">\"增强版\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<p>日志如下：</p>\n<pre class=\"language-none\"><code class=\"language-none\">: 方法getGroupList执行完毕，返回参数为：{\"code\":200,\"message\":\"SUCCESS\"}\n: 对返回参数进行业务上的增强：{\"code\":200,\"message\":\"SUCCESS\"}增强版</code></pre>\n\n<h4 id=\"AfterThrowing\"><a href=\"#AfterThrowing\" class=\"headerlink\" title=\"@AfterThrowing\"></a>@AfterThrowing</h4><p>当被切方法执行过程中抛出异常时，会进入 <code>@AfterThrowing</code> 注解的方法中执行，在该方法中可以做一些异常的处理逻辑。</p>\n<p>要注意的是 <code>throwing</code> 属性的值必须要和参数一致，否则会报错。</p>\n<p>该方法中的第二个入参即为抛出的异常。</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Aspect</span>\n<span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AfterThrowingAdvice</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * 定义一个切面，拦截 com.mutest.controller 包下的所有方法\n     */</span>\n    <span class=\"token annotation punctuation\">@Pointcut</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"execution(* com.jueee.controller..*.*(..))\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">pointCut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">/**\n     * 在上面定义的切面方法执行抛异常时，执行该方法\n     * @param joinPoint jointPoint\n     * @param ex ex\n     */</span>\n    <span class=\"token annotation punctuation\">@AfterThrowing</span><span class=\"token punctuation\">(</span>pointcut <span class=\"token operator\">=</span> <span class=\"token string\">\"pointCut()\"</span><span class=\"token punctuation\">,</span> throwing <span class=\"token operator\">=</span> <span class=\"token string\">\"ex\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">afterThrowing</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JoinPoint</span> joinPoint<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Throwable</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Signature</span> signature <span class=\"token operator\">=</span> joinPoint<span class=\"token punctuation\">.</span><span class=\"token function\">getSignature</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> method <span class=\"token operator\">=</span> signature<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 处理异常的逻辑</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"执行方法{}出错，异常为：{}\"</span><span class=\"token punctuation\">,</span> method<span class=\"token punctuation\">,</span> ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n","categories":["Java","Spring"],"tags":["Java","Spring","AOP"]},{"title":"Spring 的 IOC 容器管理对象示例","url":"/2020/12/2021-01-03-Spring%E7%9A%84IOC%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86%E5%AF%B9%E8%B1%A1%E7%A4%BA%E4%BE%8B/","content":"<h3 id=\"IOC-控制反转\"><a href=\"#IOC-控制反转\" class=\"headerlink\" title=\"IOC 控制反转\"></a>IOC 控制反转</h3><p>IOC—Inversion of Control，即 “控制反转”，不是什么技术，而是一种设计思想。</p>\n<p>在 Java 开发中，IOC 意味着将你设计好的对象交给容器控制，而不是传统的在你的对象内部直接控制。</p>\n<p>所谓 IOC，对于 Spring 框架来说，就是由 Spring 来负责控制对象的生命周期和对象间的关系。</p>\n<p>Spring 所倡导的开发方式就是如此，所有的类都会在 Spring 容器中登记。所有的类的创建、销毁都由 Spring 来控制，也就是说控制对象生存周期的不再是引用它的对象，而是 Spring。对于某个具体的对象而言，以前是它控制其他对象，现在是所有对象都被 Spring 控制，所以这叫控制反转。</p>\n<a id=\"more\"></a>\n\n<h4 id=\"理解-IOC\"><a href=\"#理解-IOC\" class=\"headerlink\" title=\"理解 IOC\"></a>理解 IOC</h4><p>如何理解好 IOC 呢？理解好 IOC 的关键是要明确：</p>\n<ul>\n<li><p>谁控制谁，控制什么？</p>\n<p>传统 Java SE 程序设计，我们直接在对象内部通过 new 进行创建对象，是程序主动去创建依赖对象；而 IOC 是有专门一个容器来创建这些对象，即由 IOC 容器来控制对 象的创建；谁控制谁？当然是 IOC 容器控制了对象；控制什么？那就是主要控制了外部资源获取（不只是对象包括比如文件等）。</p>\n</li>\n<li><p>为何是反转，哪些方面反转了？</p>\n<p>有反转就有正转，传统应用程序是由我们自己在对象中主动控制去直接获取依赖对象，也就是正转；而反转则是由容器来帮忙创建及注入依赖对象；为何是反转？因为由容器帮我们查找及注入依赖对象，对象只是被动的接受依赖对象，所以是反转；哪些方面反转了？依赖对象的获取被反转了。</p>\n</li>\n</ul>\n<h3 id=\"对象示例\"><a href=\"#对象示例\" class=\"headerlink\" title=\"对象示例\"></a>对象示例</h3><pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloWorld</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> userName<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setUserName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> userName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>userName <span class=\"token operator\">=</span> userName<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getUserName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> userName<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello,\"</span><span class=\"token operator\">+</span>userName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<h3 id=\"传统方式加载对象\"><a href=\"#传统方式加载对象\" class=\"headerlink\" title=\"传统方式加载对象\"></a>传统方式加载对象</h3><pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">HelloWorld</span> helloWorld<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">HelloWorld</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nhelloWorld<span class=\"token punctuation\">.</span><span class=\"token function\">setUserName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"周杰伦\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nhelloWorld<span class=\"token punctuation\">.</span><span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n<h3 id=\"IOC-容器加载对象\"><a href=\"#IOC-容器加载对象\" class=\"headerlink\" title=\"IOC 容器加载对象\"></a>IOC 容器加载对象</h3><h4 id=\"新建IOC配置文件\"><a href=\"#新建IOC配置文件\" class=\"headerlink\" title=\"新建IOC配置文件\"></a>新建 IOC 配置文件</h4><p>在 resources 目录下新建一个 IOC 的配置文件 applicationContext.xml，等下需要通过这个配置文件去创建 IOC 容器。</p>\n<pre class=\"language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>beans</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans<span class=\"token punctuation\">\"</span></span>\n       <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span>\n       <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans\n        http://www.springframework.org/schema/beans/spring-beans.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>helloWorld<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.jueee.bean.HelloWorld<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>userName<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>林俊杰<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>beans</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n\n<h4 id=\"IOC-普通方式加载\"><a href=\"#IOC-普通方式加载\" class=\"headerlink\" title=\"IOC 普通方式加载\"></a>IOC 普通方式加载</h4><ul>\n<li>BeanFactory：表示 Spring IOC 容器，专门生产 bean 对象的工厂，负责配置，创建和管理 bean</li>\n<li>bean：被 Spring IOC 容器管理的对象都是 bean，可以理解为 Spring 下皆为 bean</li>\n</ul>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//1.从classpath路径去寻找配置文件，加载我们的配置</span>\n<span class=\"token class-name\">Resource</span> resources<span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassPathResource</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"applicationContext.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//2.加载配置文件之后，创建IOC容器</span>\n<span class=\"token class-name\">BeanFactory</span> factory<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">XmlBeanFactory</span><span class=\"token punctuation\">(</span>resources<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//3.从Spring IOC容器中获取指定名称的对象</span>\n<span class=\"token class-name\">HelloWorld</span> helloWorld<span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">HelloWorld</span><span class=\"token punctuation\">)</span> factory<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"helloWorld\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//--------------------IOC结束了---------------------</span>\nhelloWorld<span class=\"token punctuation\">.</span><span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n<h4 id=\"IOC-注解方式加载\"><a href=\"#IOC-注解方式加载\" class=\"headerlink\" title=\"IOC 注解方式加载\"></a>IOC 注解方式加载</h4><ul>\n<li>先在测试类头上加个 @ContextConfiguration，意思是找到 Spring 容器，classpath 就是 resource 目录</li>\n<li> @Autowired：表示自动按照类型去 Spring 容器中找到对应的 Bean 对象，然后自动注入 </li>\n</ul>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@SpringBootTest</span>\n<span class=\"token annotation punctuation\">@ContextConfiguration</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"classpath:applicationContext.xml\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloWorldTest2</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">HelloWorld</span> helloWorld<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testHelloIOCNB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        helloWorld<span class=\"token punctuation\">.</span><span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<h4 id=\"IOC-加载工作原理\"><a href=\"#IOC-加载工作原理\" class=\"headerlink\" title=\"IOC 加载工作原理\"></a>IOC 加载工作原理</h4><p>IOC 的工作原理，使用到的技术有两个，反射和内省。</p>\n<p>如下示例所示：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">String</span> className <span class=\"token operator\">=</span> <span class=\"token string\">\"com.jueee.bean.HelloWorld\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//--------------------模拟IOC开始了-------------------</span>\n<span class=\"token comment\">//1.使用反射创建对象</span>\n<span class=\"token class-name\">Class</span> clzz <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span>className<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Constructor</span> con <span class=\"token operator\">=</span> clzz<span class=\"token punctuation\">.</span><span class=\"token function\">getConstructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncon<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//设置构造器可访问性为true</span>\n<span class=\"token class-name\">Object</span> obj <span class=\"token operator\">=</span> con<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//2.使用内省机制获取所有的属性名称</span>\n<span class=\"token class-name\">BeanInfo</span> beanInfo <span class=\"token operator\">=</span> <span class=\"token class-name\">Introspector</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBeanInfo</span><span class=\"token punctuation\">(</span>clzz<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">PropertyDescriptor</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> pds <span class=\"token operator\">=</span> beanInfo<span class=\"token punctuation\">.</span><span class=\"token function\">getPropertyDescriptors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">PropertyDescriptor</span> pd <span class=\"token operator\">:</span> pds<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">String</span> propertyName <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"userName\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>propertyName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        pd<span class=\"token punctuation\">.</span><span class=\"token function\">getWriteMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token string\">\"陈奕迅\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">HelloWorld</span> helloWorld <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">HelloWorld</span><span class=\"token punctuation\">)</span> obj<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//--------------------模拟IOC结束了---------------------</span>\nhelloWorld<span class=\"token punctuation\">.</span><span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n<h3 id=\"IOC的容器类型\"><a href=\"#IOC的容器类型\" class=\"headerlink\" title=\"IOC的容器类型\"></a>IOC 的容器类型</h3><h4 id=\"BeanFactory\"><a href=\"#BeanFactory\" class=\"headerlink\" title=\"BeanFactory\"></a>BeanFactory</h4><pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//--------------------IOC开始了-------------------</span>\n<span class=\"token comment\">//1.从classpath路径去寻找配置文件，加载我们的配置</span>\n<span class=\"token class-name\">Resource</span> resources<span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassPathResource</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"applicationContext.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//2.加载配置文件之后，创建IOC容器</span>\n<span class=\"token class-name\">BeanFactory</span> factory<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">XmlBeanFactory</span><span class=\"token punctuation\">(</span>resources<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//3.从Spring IOC容器中获取指定名称的对象</span>\n<span class=\"token class-name\">HelloWorld</span> helloWorld<span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">HelloWorld</span><span class=\"token punctuation\">)</span> factory<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HelloWorld</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//--------------------IOC结束了---------------------</span>\nhelloWorld<span class=\"token punctuation\">.</span><span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n<h4 id=\"ApplicationContext\"><a href=\"#ApplicationContext\" class=\"headerlink\" title=\"ApplicationContext\"></a>ApplicationContext</h4><p>ApplicationContext 这个其实是 BeanFactory 的一个子接口。</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//--------------------IOC开始了-------------------</span>\n<span class=\"token class-name\">ApplicationContext</span> ctx<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassPathXmlApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"applicationContext.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"上面的代码已经创建Bean对象了，下面的获取Bean，获取已有的Bean\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">HelloWorld</span> helloWorld<span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"helloWorld\"</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">HelloWorld</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//--------------------IOC结束了---------------------</span>\nhelloWorld<span class=\"token punctuation\">.</span><span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n<h3 id=\"加载Bean的方式\"><a href=\"#加载Bean的方式\" class=\"headerlink\" title=\"加载Bean的方式\"></a>加载 Bean 的方式</h3><ol>\n<li><p>根据 Bean 对象在容器中的 id 来获取。当有两个 id 重复时，就会报错。</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">HelloWorld</span> helloWorld<span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">HelloWorld</span><span class=\"token punctuation\">)</span> factory<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"helloWorld\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n</li>\n<li><p>根据类型获取 Bean。当两个 bean 的 id 不一样，class 一样的时候，还是会报错，报类找到的 Bean 不是唯一的</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">HelloWorld</span> helloWorld<span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">HelloWorld</span><span class=\"token punctuation\">)</span> factory<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HelloWorld</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n</li>\n<li><p>根据 id + 类型来获取 Bean，推荐方式。</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">HelloWorld</span> helloWorld<span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"helloWorld\"</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">HelloWorld</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n</li>\n</ol>\n<h3 id=\"Bean的作用域\"><a href=\"#Bean的作用域\" class=\"headerlink\" title=\"Bean的作用域\"></a>Bean 的作用域</h3><ol>\n<li><p>singltton: 单例，在 IOC 容器中的 Bean 实例，都是唯一的</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token operator\">&lt;</span>bean id<span class=\"token operator\">=</span><span class=\"token string\">\"helloWorld1\"</span> <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"com.jueee.bean.HelloWorld\"</span> scope<span class=\"token operator\">=</span><span class=\"token string\">\"singleton\"</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>bean<span class=\"token operator\">&gt;</span></code></pre>\n</li>\n<li><p>prototype: 多例，在 IOC 容器中的 Bean，每次都返回一个新的对象</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token operator\">&lt;</span>bean id<span class=\"token operator\">=</span><span class=\"token string\">\"helloWorld2\"</span> <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"com.jueee.bean.HelloWorld\"</span> scope<span class=\"token operator\">=</span><span class=\"token string\">\"prototype\"</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>bean<span class=\"token operator\">&gt;</span></code></pre>\n\n</li>\n</ol>\n<h3 id=\"配置文件的import导入\"><a href=\"#配置文件的import导入\" class=\"headerlink\" title=\"配置文件的import导入\"></a>配置文件的 import 导入</h3><p>我们的 applicationContext.xml 里面写的是 Bean，当项目里面多个需要控制反转的配置，如果都写在一个 xml 文件里，太大，也太乱。</p>\n<p>所以我们可以分开写每个包里面写个自己的 xml，然后 applicationContext.xml 直接 import 导入就可以了。</p>\n<pre class=\"language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token comment\">&lt;!--导入其他的配置文件--&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>import</span> <span class=\"token attr-name\">resource</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>classpath:HelloWorld.xml<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>import</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n\n<h3 id=\"Bean的初始化和销毁\"><a href=\"#Bean的初始化和销毁\" class=\"headerlink\" title=\"Bean的初始化和销毁\"></a>Bean 的初始化和销毁</h3><ol>\n<li><p>构建 Bean</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyDataSource</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token keyword\">open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" 初始化\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">dowork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" 工作\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" 销毁\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n</li>\n<li><p>配置 xml</p>\n<pre class=\"language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>myDataSource<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.jueee.bean.MyDataSource<span class=\"token punctuation\">\"</span></span>  <span class=\"token attr-name\">init-method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>open<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">destroy-method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>close<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n</li>\n<li><p>普通模式</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">MyDataSource</span> myDataSource<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">MyDataSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyDataSource<span class=\"token punctuation\">.</span><span class=\"token keyword\">open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyDataSource<span class=\"token punctuation\">.</span><span class=\"token function\">dowork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyDataSource<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n<p>输出：</p>\n<pre class=\"language-none\"><code class=\"language-none\">com.jueee.bean.MyDataSource@4ae33a11 初始化\ncom.jueee.bean.MyDataSource@4ae33a11 工作\ncom.jueee.bean.MyDataSource@4ae33a11 销毁</code></pre>\n</li>\n<li><p>IOC 模式</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@SpringBootTest</span>\n<span class=\"token annotation punctuation\">@ContextConfiguration</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"classpath:applicationContext4.xml\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyDataSourceTest</span> <span class=\"token punctuation\">{</span>\n    \n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">MyDataSource</span> myDataSource<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//IOC容器的方式</span>\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        myDataSource<span class=\"token punctuation\">.</span><span class=\"token function\">dowork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<p>输出（自动进行创建和销毁）：</p>\n<p><img src=\"/images/2021/01/image-20201231164806006.png\" alt=\"image-20201231164806006\" loading=\"lazy\"></p>\n</li>\n</ol>\n","categories":["Java","SpringBoot","Spring"],"tags":["Java","Spring","AOP"]},{"title":"Swagger 设置全局 token","url":"/2021/01/2021-01-04-Swagger%E8%AE%BE%E7%BD%AE%E5%85%A8%E5%B1%80token/","content":"<p>swagger 是一个很使用的工具，但正常使用时，我们的接口需要登陆才能访问的。即登陆时，要传一个登陆后的 token 才能访问的。 </p>\n<p>那这个怎么设置，才可以让所有接口都允许登陆后访问呢？</p>\n<a id=\"more\"></a>\n\n<h3 id=\"出现问题\"><a href=\"#出现问题\" class=\"headerlink\" title=\"出现问题\"></a>出现问题</h3><p><img src=\"/images/2021/01/image-20210106113200793.png\" alt=\"image-20210106113200793\" loading=\"lazy\"></p>\n<h3 id=\"解决问题\"><a href=\"#解决问题\" class=\"headerlink\" title=\"解决问题\"></a>解决问题</h3><p><code>SwaggerConfig</code> 配置类中增加方法：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ApiKey</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">securitySchemes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ApiKey</span><span class=\"token punctuation\">&gt;</span></span> apiKeyList<span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    apiKeyList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ApiKey</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Authorization\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Authorization\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"header\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> apiKeyList<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<p>注册方法：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Bean</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">Docket</span> <span class=\"token function\">docket</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Docket</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DocumentationType</span><span class=\"token punctuation\">.</span>SWAGGER_2<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">apiInfo</span><span class=\"token punctuation\">(</span><span class=\"token function\">apiInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">groupName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"System\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 配置分组</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">apis</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RequestHandlerSelectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">basePackage</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.test.system\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">paths</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PathSelectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">any</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">securitySchemes</span><span class=\"token punctuation\">(</span><span class=\"token function\">securitySchemes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">pathMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<h3 id=\"解决效果\"><a href=\"#解决效果\" class=\"headerlink\" title=\"解决效果\"></a>解决效果</h3><p>访问：<span class=\"exturl\" data-url=\"aHR0cDovLzEyNy4wLjAuMTo4MTgxL3N3YWdnZXItdWkuaHRtbCVFRiVCQyU4QyVFOCVCRiU5QiVFOCVBMSU4QyVFNyU5OSVCQiVFNSVCRCU5NSVFMyU4MCU4Mg==\">http://127.0.0.1:8181/swagger-ui.html，进行登录。<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p><img src=\"/images/2021/01/image-20210106113515400.png\" alt=\"image-20210106113515400\" loading=\"lazy\"></p>\n<p>插入 token 字符串。</p>\n<p><img src=\"/images/2021/01/image-20210106113342562.png\" alt=\"image-20210106113342562\" loading=\"lazy\"></p>\n<p>传入成功的效果图：</p>\n<p><img src=\"/images/2021/01/image-20210106113255981.png\" alt=\"image-20210106113255981\" loading=\"lazy\"></p>\n<p>接口访问成功效果图：</p>\n<p><img src=\"/images/2021/01/image-20210106113224686.png\" alt=\"image-20210106113224686\" loading=\"lazy\"></p>\n","categories":["Java","JavaJar"],"tags":["Java","JavaJar","RESTful"]},{"title":"AOP 的 JoinPoint 参数方法详解","url":"/2021/01/2021-01-05-AOP%E7%9A%84JoinPoint%E5%8F%82%E6%95%B0%E6%96%B9%E6%B3%95%E8%AF%A6%E8%A7%A3/","content":"<h3 id=\"重要方法\"><a href=\"#重要方法\" class=\"headerlink\" title=\"重要方法\"></a>重要方法</h3><pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/*获取参数的值数组*/</span>\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args <span class=\"token operator\">=</span> point<span class=\"token punctuation\">.</span><span class=\"token function\">getArgs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                                    <span class=\"token comment\">//  [1] 参数的值</span>\n\n<span class=\"token comment\">/*获取目标对象(被加强的对象)*/</span>\n<span class=\"token class-name\">Object</span> target <span class=\"token operator\">=</span> point<span class=\"token punctuation\">.</span><span class=\"token function\">getTarget</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*获取signature 该注解作用在方法上，强转为 MethodSignature*/</span>\n<span class=\"token class-name\">MethodSignature</span> signature <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">MethodSignature</span><span class=\"token punctuation\">)</span> point<span class=\"token punctuation\">.</span><span class=\"token function\">getSignature</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*方法名*/</span>\n<span class=\"token class-name\">String</span> signatureName <span class=\"token operator\">=</span> signature<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                         <span class=\"token comment\">//  findById</span>\n\n<span class=\"token comment\">/*参数名称数组(与args参数值意义对应)*/</span>\n<span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> parameterNames <span class=\"token operator\">=</span> signature<span class=\"token punctuation\">.</span><span class=\"token function\">getParameterNames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\">//  [i] 参数名称</span>\n\n<span class=\"token comment\">/*获取执行的方法对应Method对象*/</span>\n<span class=\"token class-name\">Method</span> method <span class=\"token operator\">=</span> signature<span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                              \n<span class=\"token comment\">//  public void com.jueee.test.service.UserService.findById(int)</span>\n\n<span class=\"token comment\">/*获取返回值类型*/</span>\n<span class=\"token class-name\">Class</span> returnType <span class=\"token operator\">=</span> signature<span class=\"token punctuation\">.</span><span class=\"token function\">getReturnType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                       <span class=\"token comment\">//  void</span>\n\n<span class=\"token comment\">/*获取方法上的注解*/</span>\n<span class=\"token class-name\">OperationLog</span> operationLog <span class=\"token operator\">=</span> method<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredAnnotation</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">OperationLog</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n<h3 id=\"request-response\"><a href=\"#request-response\" class=\"headerlink\" title=\"request / response\"></a>request / response</h3><pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 获取request/response(ThreadLocal模式)</span>\n<span class=\"token class-name\">RequestAttributes</span> requestAttributes <span class=\"token operator\">=</span> <span class=\"token class-name\">RequestContextHolder</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRequestAttributes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">ServletRequestAttributes</span> servletRequestAttributes <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ServletRequestAttributes</span><span class=\"token punctuation\">)</span> requestAttributes<span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">HttpServletRequest</span> request <span class=\"token operator\">=</span> servletRequestAttributes<span class=\"token punctuation\">.</span><span class=\"token function\">getRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">HttpServletResponse</span> response <span class=\"token operator\">=</span> servletRequestAttributes<span class=\"token punctuation\">.</span><span class=\"token function\">getResponse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">HttpSession</span> session <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>","categories":["Java","JavaClass","Spring"],"tags":["Java","Spring","AOP"]},{"title":"SpringBoot 实现 API 接口数据 AES 加密","url":"/2021/01/2021-01-06-SpringBoot%E5%AE%9E%E7%8E%B0API%E6%8E%A5%E5%8F%A3%E6%95%B0%E6%8D%AEAES%E5%8A%A0%E5%AF%86/","content":"<h3 id=\"接口安全\"><a href=\"#接口安全\" class=\"headerlink\" title=\"接口安全\"></a>接口安全</h3><p>放到互联网上的接口数据，直接采用明文的话，就很容易被抓包，然后进行修改或者被恶意植入木马，本文研究一下怎么样对接口进行数据加密。</p>\n<p>接口加密的作用：</p>\n<ol>\n<li>防止恶意调用攻击</li>\n<li>防止篡改信息攻击</li>\n<li>防拦截攻击，数据被截取后进行修改后重新放回去</li>\n<li>防止数据泄漏攻击</li>\n</ol>\n<a id=\"more\"></a>\n\n<div class=\"note info\"><p>抓包（packet capture）就是将网络传输发送与接收的数据包进行截获、重发、编辑、转存等操作，也用来检查网络安全。抓包也经常被用来进行数据截取等。</p>\n</div>\n\n<h3 id=\"项目代码\"><a href=\"#项目代码\" class=\"headerlink\" title=\"项目代码\"></a>项目代码</h3><p>本文完整项目代码位于：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0p1ZWVlL2Jsb2ctcHJvamVjdC90cmVlL21haW4vamF2YS13ZWItc2VjcmV0\">https://github.com/Jueee/blog-project/tree/main/java-web-secret<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h3 id=\"编写代码\"><a href=\"#编写代码\" class=\"headerlink\" title=\"编写代码\"></a>编写代码</h3><h4 id=\"POM文件\"><a href=\"#POM文件\" class=\"headerlink\" title=\"POM文件\"></a>POM 文件</h4><pre class=\"language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>spring-boot-starter-web<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.projectlombok<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>lombok<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>optional</span><span class=\"token punctuation\">&gt;</span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>optional</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>spring-boot-starter-test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">&gt;</span></span>test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n\n<h4 id=\"加密解密工具类\"><a href=\"#加密解密工具类\" class=\"headerlink\" title=\"加密解密工具类\"></a>加密解密工具类</h4><pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span>extern<span class=\"token punctuation\">.</span>slf4j<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Slf4j</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>tomcat<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>codec<span class=\"token punctuation\">.</span>binary<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Base64</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>crypto<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Cipher</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>crypto<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">KeyGenerator</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>crypto<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SecretKey</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>crypto<span class=\"token punctuation\">.</span>spec<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SecretKeySpec</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>security<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">NoSuchAlgorithmException</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>security<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SecureRandom</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * AES加密解密\n */</span>\n<span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AesUtils</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> KEY_ALGORITHM <span class=\"token operator\">=</span> <span class=\"token string\">\"AES\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> DEFAULT_CIPHER_ALGORITHM <span class=\"token operator\">=</span> <span class=\"token string\">\"AES/ECB/PKCS5Padding\"</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 默认的加密算法</span>\n\n    <span class=\"token comment\">/**\n     * AES 加密操作\n     * @param content  待加密内容\n     * @param password 加密密码\n     * @return String 返回Base64转码后的加密数据\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">encrypt</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> content<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> password<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 创建密码器</span>\n            <span class=\"token keyword\">final</span> <span class=\"token class-name\">Cipher</span> cipher <span class=\"token operator\">=</span> <span class=\"token class-name\">Cipher</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span>DEFAULT_CIPHER_ALGORITHM<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 设置为UTF-8编码</span>\n            <span class=\"token keyword\">final</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> byteContent <span class=\"token operator\">=</span> content<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 初始化为加密模式的密码器</span>\n            cipher<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Cipher</span><span class=\"token punctuation\">.</span>ENCRYPT_MODE<span class=\"token punctuation\">,</span> <span class=\"token function\">getSecretKey</span><span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 加密</span>\n            <span class=\"token keyword\">final</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> result <span class=\"token operator\">=</span> cipher<span class=\"token punctuation\">.</span><span class=\"token function\">doFinal</span><span class=\"token punctuation\">(</span>byteContent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 通过Base64转码返回</span>\n            <span class=\"token keyword\">return</span> <span class=\"token class-name\">Base64</span><span class=\"token punctuation\">.</span><span class=\"token function\">encodeBase64String</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * AES 解密操作\n     *\n     * @param content\n     * @param password\n     * @return String\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">decrypt</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> content<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> password<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 实例化</span>\n            <span class=\"token keyword\">final</span> <span class=\"token class-name\">Cipher</span> cipher <span class=\"token operator\">=</span> <span class=\"token class-name\">Cipher</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span>DEFAULT_CIPHER_ALGORITHM<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 使用密钥初始化，设置为解密模式</span>\n            cipher<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Cipher</span><span class=\"token punctuation\">.</span>DECRYPT_MODE<span class=\"token punctuation\">,</span> <span class=\"token function\">getSecretKey</span><span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 执行操作</span>\n            <span class=\"token keyword\">final</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> result <span class=\"token operator\">=</span> cipher<span class=\"token punctuation\">.</span><span class=\"token function\">doFinal</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Base64</span><span class=\"token punctuation\">.</span><span class=\"token function\">decodeBase64</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 采用UTF-8编码转化为字符串</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> <span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * 生成加密秘钥\n     *\n     * @param password 加密的密码\n     * @return SecretKeySpec\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">SecretKeySpec</span> <span class=\"token function\">getSecretKey</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> password<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 返回生成指定算法密钥生成器的 KeyGenerator 对象</span>\n        <span class=\"token class-name\">KeyGenerator</span> kg <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            kg <span class=\"token operator\">=</span> <span class=\"token class-name\">KeyGenerator</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span>KEY_ALGORITHM<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// AES 要求密钥长度为 128</span>\n            kg<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SecureRandom</span><span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 生成一个密钥</span>\n            <span class=\"token keyword\">final</span> <span class=\"token class-name\">SecretKey</span> secretKey <span class=\"token operator\">=</span> kg<span class=\"token punctuation\">.</span><span class=\"token function\">generateKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 转换为AES专用密钥</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SecretKeySpec</span><span class=\"token punctuation\">(</span>secretKey<span class=\"token punctuation\">.</span><span class=\"token function\">getEncoded</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> KEY_ALGORITHM<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">NoSuchAlgorithmException</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * 根据密钥，生成 aes.key\n     * @param password\n     * @return\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getKeyByPass</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> password<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">SecretKeySpec</span> keySpec <span class=\"token operator\">=</span> <span class=\"token function\">getSecretKey</span><span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> b <span class=\"token operator\">=</span> keySpec<span class=\"token punctuation\">.</span><span class=\"token function\">getEncoded</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">byteToHexString</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">/**\n     * byte数组转化为16进制字符串\n     * @param bytes\n     * @return\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">byteToHexString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bytes<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">StringBuffer</span> sb <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> bytes<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">String</span> strHex<span class=\"token operator\">=</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHexString</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>strHex<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>strHex<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>strHex<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0\"</span> <span class=\"token operator\">+</span> strHex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>strHex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> sb<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre>\n\n<h4 id=\"加密注解\"><a href=\"#加密注解\" class=\"headerlink\" title=\"加密注解\"></a>加密注解</h4><pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Documented</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Retention</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Target</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * 返回对body加密,针对类跟方法\n */</span>\n<span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>METHOD<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>TYPE <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span>RUNTIME<span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Documented</span>\n<span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">ResponseEncrypt</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">/**\n     * 返回对body加密，默认是true\n     * @return boolean\n     */</span>\n    <span class=\"token keyword\">boolean</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<h4 id=\"加密判断类\"><a href=\"#加密判断类\" class=\"headerlink\" title=\"加密判断类\"></a>加密判断类</h4><pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>jueee<span class=\"token punctuation\">.</span>annotations<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ResponseEncrypt</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MethodParameter</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * 是否需要加密解密\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">NeedDecrypt</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">/**\n     * 判断是否需要加密\n     *\n     * @param returnType\n     * @return boolean\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">needEncrypt</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MethodParameter</span> returnType<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">boolean</span> encrypt <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 获取类上的注解</span>\n        <span class=\"token keyword\">final</span> <span class=\"token keyword\">boolean</span> classPresentAnno <span class=\"token operator\">=</span> returnType<span class=\"token punctuation\">.</span><span class=\"token function\">getContainingClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isAnnotationPresent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ResponseEncrypt</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 获取方法上的注解</span>\n        <span class=\"token keyword\">final</span> <span class=\"token keyword\">boolean</span> methodPresentAnno <span class=\"token operator\">=</span> returnType<span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isAnnotationPresent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ResponseEncrypt</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>classPresentAnno<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 类上标注的是否需要加密</span>\n            encrypt <span class=\"token operator\">=</span> returnType<span class=\"token punctuation\">.</span><span class=\"token function\">getContainingClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAnnotation</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ResponseEncrypt</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 类不加密，所有都不加密</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>encrypt<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>methodPresentAnno<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 方法上标注的是否需要加密</span>\n            encrypt <span class=\"token operator\">=</span> returnType<span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAnnotation</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ResponseEncrypt</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> encrypt<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre>\n\n<h4 id=\"加密拦截\"><a href=\"#加密拦截\" class=\"headerlink\" title=\"加密拦截\"></a>加密拦截</h4><pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>jueee<span class=\"token punctuation\">.</span>bean<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ResponseBean</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>jueee<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AesUtils</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>jueee<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">NeedDecrypt</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Value</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MethodParameter</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MediaType</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span>converter<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpMessageConverter</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span>server<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ServerHttpRequest</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span>server<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ServerHttpResponse</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ControllerAdvice</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>mvc<span class=\"token punctuation\">.</span>method<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ResponseBodyAdvice</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * 对接口数据进行加密\n */</span>\n<span class=\"token annotation punctuation\">@ControllerAdvice</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ResponseEncryptAdvice</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ResponseBodyAdvice</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"${module.boots.response.aes.key}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> key<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">supports</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MethodParameter</span> returnType<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HttpMessageConverter</span><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> converterType<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * 在写入之前更改body的值\n     * @param body\n     * @param returnType\n     * @param selectedContentType\n     * @param selectedConverterType\n     * @param request\n     * @param response\n     * @return\n     * @return\n     */</span>\n    <span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token string\">\"unchecked\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"rawtypes\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">beforeBodyWrite</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> body<span class=\"token punctuation\">,</span> <span class=\"token class-name\">MethodParameter</span> returnType<span class=\"token punctuation\">,</span> <span class=\"token class-name\">MediaType</span> selectedContentType<span class=\"token punctuation\">,</span>\n                                  <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HttpMessageConverter</span><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> selectedConverterType<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ServerHttpRequest</span> request<span class=\"token punctuation\">,</span>\n                                  <span class=\"token class-name\">ServerHttpResponse</span> response<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 判断是否需要加密</span>\n        <span class=\"token keyword\">final</span> <span class=\"token keyword\">boolean</span> encrypt <span class=\"token operator\">=</span> <span class=\"token class-name\">NeedDecrypt</span><span class=\"token punctuation\">.</span><span class=\"token function\">needEncrypt</span><span class=\"token punctuation\">(</span>returnType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>encrypt<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> body<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 如果body是属于ResponseBean类型,只需要对data里面的数据进行加密即可</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>body <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">ResponseBean</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">final</span> <span class=\"token class-name\">ResponseBean</span> responseBean <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ResponseBean</span><span class=\"token punctuation\">)</span> body<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">final</span> <span class=\"token class-name\">Object</span> data <span class=\"token operator\">=</span> responseBean<span class=\"token punctuation\">.</span><span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">return</span> body<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    responseBean<span class=\"token punctuation\">.</span><span class=\"token function\">setData</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AesUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">encrypt</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">return</span> responseBean<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> body<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre>\n\n<h4 id=\"配置密钥\"><a href=\"#配置密钥\" class=\"headerlink\" title=\"配置密钥\"></a>配置密钥</h4><pre class=\"language-properties\" data-language=\"properties\"><code class=\"language-properties\"><span class=\"token attr-name\">module.boots.response.aes.key</span><span class=\"token punctuation\">:</span> <span class=\"token attr-value\">6162382d323fb399fc202a5aca55336a</span></code></pre>\n\n<h3 id=\"测试代码\"><a href=\"#测试代码\" class=\"headerlink\" title=\"测试代码\"></a>测试代码</h3><h4 id=\"数据接口\"><a href=\"#数据接口\" class=\"headerlink\" title=\"数据接口\"></a>数据接口</h4><pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>jueee<span class=\"token punctuation\">.</span>annotations<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ResponseEncrypt</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>jueee<span class=\"token punctuation\">.</span>bean<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">GetEncryptVO</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>jueee<span class=\"token punctuation\">.</span>bean<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ResponseBean</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>jueee<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AesUtils</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span>extern<span class=\"token punctuation\">.</span>slf4j<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Slf4j</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Value</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MediaType</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">GetMapping</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RequestMapping</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RequestParam</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RestController</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * 加密数据接口\n */</span>\n<span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"deprecation\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@RestController</span>\n<span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SecretController</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"${module.boots.response.aes.key}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> key<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * 获取加密数据\n     */</span>\n    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"/getEncrypt\"</span><span class=\"token punctuation\">,</span> produces <span class=\"token operator\">=</span> <span class=\"token class-name\">MediaType</span><span class=\"token punctuation\">.</span>APPLICATION_JSON_UTF8_VALUE<span class=\"token punctuation\">)</span>\n    <span class=\"token annotation punctuation\">@ResponseEncrypt</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ResponseBean</span> <span class=\"token function\">getEncrypt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">final</span> <span class=\"token class-name\">GetEncryptVO</span> vo <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GetEncryptVO</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        vo<span class=\"token punctuation\">.</span><span class=\"token function\">setId</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"123456\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        vo<span class=\"token punctuation\">.</span><span class=\"token function\">setUserName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Jueee\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">ResponseBean</span><span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span>vo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * 获取解密数据\n     */</span>\n    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"/getDecrypt\"</span><span class=\"token punctuation\">,</span> produces <span class=\"token operator\">=</span> <span class=\"token class-name\">MediaType</span><span class=\"token punctuation\">.</span>APPLICATION_JSON_UTF8_VALUE<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ResponseBean</span> <span class=\"token function\">getDecrypt</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestParam</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"content\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> content<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"content:\"</span><span class=\"token operator\">+</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> str <span class=\"token operator\">=</span> <span class=\"token class-name\">AesUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">decrypt</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"decrypt:\"</span><span class=\"token operator\">+</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">ResponseBean</span><span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre>\n\n<h4 id=\"测试接口\"><a href=\"#测试接口\" class=\"headerlink\" title=\"测试接口\"></a>测试接口</h4><pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>jueee<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpClient4</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span>extern<span class=\"token punctuation\">.</span>slf4j<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Slf4j</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">JSONObject</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span>jupiter<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Test</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">URLEncoder</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SecretControllerTest</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">String</span> encrypt <span class=\"token operator\">=</span> <span class=\"token class-name\">HttpClient4</span><span class=\"token punctuation\">.</span><span class=\"token function\">doGet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://127.0.0.1:8080/test/getEncrypt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span>encrypt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">JSONObject</span> jsonObject <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JSONObject</span><span class=\"token punctuation\">(</span>encrypt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span>jsonObject<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> data <span class=\"token operator\">=</span> jsonObject<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> decrypt <span class=\"token operator\">=</span> <span class=\"token class-name\">HttpClient4</span><span class=\"token punctuation\">.</span><span class=\"token function\">doGet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://127.0.0.1:8080/test/getDecrypt?content=\"</span><span class=\"token operator\">+</span> <span class=\"token class-name\">URLEncoder</span><span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> <span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span>decrypt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<p>输出：</p>\n<pre class=\"language-none\"><code class=\"language-none\">- {\"code\":200,\"msg\":\"成功\",\"data\":\"FJscqvyWFReJftsv9WxkIFpHq8Y/GLBAi4tbv/qyAqLMeCAr8fpaJBQ83F4Owe1S\"}\n- FJscqvyWFReJftsv9WxkIFpHq8Y/GLBAi4tbv/qyAqLMeCAr8fpaJBQ83F4Owe1S\n- {\"code\":200,\"msg\":\"GetEncryptVO(id=123456, userName=Jueee)\",\"data\":null}</code></pre>\n\n<h4 id=\"测试工具类\"><a href=\"#测试工具类\" class=\"headerlink\" title=\"测试工具类\"></a>测试工具类</h4><pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span>jupiter<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Test</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">AesUtilsTest</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> aesKey <span class=\"token operator\">=</span> <span class=\"token string\">\"6162382d323fb399fc202a5aca55336a\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Test</span> <span class=\"token comment\">// 生成 AES Key</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AesUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getKeyByPass</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Jueee\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token annotation punctuation\">@Test</span> <span class=\"token comment\">// AES 解密</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testDecrypt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"FJscqvyWFReJftsv9WxkIFpHq8Y/GLBAi4tbv/qyAqLMeCAr8fpaJBQ83F4Owe1S\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AesUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">decrypt</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> aesKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<p>输出：</p>\n<pre class=\"language-none\"><code class=\"language-none\">6162382d323fb399fc202a5aca55336a\nGetEncryptVO(id=123456, userName=Jueee)</code></pre>\n\n","categories":["Java","SpringBoot"],"tags":["Java","SpringBoot","AES"]},{"title":"SpringBoot 增加 XSS 跨站脚本攻击防护","url":"/2021/01/2021-01-08-SpringBoot%E5%A2%9E%E5%8A%A0XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB%E9%98%B2%E6%8A%A4/","content":"<h3 id=\"XSS原理\"><a href=\"#XSS原理\" class=\"headerlink\" title=\"XSS原理\"></a>XSS 原理</h3><p>XSS 攻击的原理是利用前后端校验不严格，用户将攻击代码植入到数据中提交到了后台，当这些数据在网页上被其他用户查看的时候触发攻击。</p>\n<p>举例：用户提交表单时把地址写成：</p>\n<pre class=\"language-none\"><code class=\"language-none\">杭州市&lt;script&gt;for(var i=0;i&lt;9999;i++){alert(i)}&lt;/script&gt;</code></pre>\n\n<p>上面的数据如果没有在后台做处理，当数据被展示到网页上的时候，会在网页上弹出 N 个 alert 框，当然实际攻击肯定是比这个要复杂的多的。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"项目代码\"><a href=\"#项目代码\" class=\"headerlink\" title=\"项目代码\"></a>项目代码</h3><p>本文完整项目代码位于：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0p1ZWVlL2Jsb2ctcHJvamVjdC90cmVlL21haW4vamF2YS13ZWIteHNz\">https://github.com/Jueee/blog-project/tree/main/java-web-xss<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h3 id=\"XSS-攻击示例\"><a href=\"#XSS-攻击示例\" class=\"headerlink\" title=\"XSS&nbsp;攻击示例\"></a>XSS&nbsp;攻击示例</h3><h4 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h4><p>引入依赖：</p>\n<pre class=\"language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>spring-boot-starter-web<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>spring-boot-starter-thymeleaf<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n\n<p>Controller 如下：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span>extern<span class=\"token punctuation\">.</span>slf4j<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Slf4j</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Controller</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>ui<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ModelMap</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RequestMapping</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RequestParam</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ResponseBody</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpServletRequest</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpServletResponse</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token annotation punctuation\">@Controller</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DemoController</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/demo\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">demo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ModelMap</span> m<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"into demo page\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"demo\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@ResponseBody</span>\n    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/demoAction\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">demoAction</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestParam</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span>\n                             <span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ModelMap</span> m<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name:\"</span><span class=\"token operator\">+</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"name is:\"</span><span class=\"token operator\">+</span>name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<p>前端页面如下：</p>\n<pre class=\"language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">action</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>demoAction<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>post<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>demoForm<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    Name: <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>name<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>demo<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Submit<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n\n<h4 id=\"正常效果\"><a href=\"#正常效果\" class=\"headerlink\" title=\"正常效果\"></a>正常效果</h4><ol>\n<li><p>访问 <span class=\"exturl\" data-url=\"aHR0cDovLzEyNy4wLjAuMTo4MDgwL2RlbW8=\">http://127.0.0.1:8080/demo<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p><img src=\"/images/2021/01/image-20210108184256800.png\" alt=\"image-20210108184256800\" loading=\"lazy\"></p>\n</li>\n<li><p>点击提交：</p>\n<p><img src=\"/images/2021/01/image-20210108184309976.png\" alt=\"image-20210108184309976\" loading=\"lazy\"></p>\n</li>\n</ol>\n<h4 id=\"攻击效果\"><a href=\"#攻击效果\" class=\"headerlink\" title=\"攻击效果\"></a>攻击效果</h4><ol>\n<li><p>访问 <span class=\"exturl\" data-url=\"aHR0cDovLzEyNy4wLjAuMTo4MDgwL2RlbW8lRUYlQkMlOEMlRTUlQjklQjYlRTglQkUlOTMlRTUlODUlQTU=\">http://127.0.0.1:8080/demo，并输入<i class=\"fa fa-external-link-alt\"></i></span> <code>test&lt;script&gt;alert('Attack!')&lt;/script&gt;</code></p>\n<p><img src=\"/images/2021/01/image-20210108184403240.png\" alt=\"image-20210108184403240\" loading=\"lazy\"></p>\n</li>\n<li><p>点击提交：</p>\n<p><img src=\"/images/2021/01/image-20210108184500891.png\" alt=\"image-20210108184500891\" loading=\"lazy\"></p>\n</li>\n</ol>\n<h3 id=\"SpringBoot-防护\"><a href=\"#SpringBoot-防护\" class=\"headerlink\" title=\"SpringBoot 防护\"></a>SpringBoot 防护</h3><h4 id=\"添加依赖\"><a href=\"#添加依赖\" class=\"headerlink\" title=\"添加依赖\"></a>添加依赖</h4><pre class=\"language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token comment\">&lt;!-- https://mvnrepository.com/artifact/org.apache.commons/commons-lang3 --&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.apache.commons<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>commons-lang3<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>3.11<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token comment\">&lt;!-- https://mvnrepository.com/artifact/org.jsoup/jsoup --&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.jsoup<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>jsoup<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>1.13.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n\n<h4 id=\"Filter-类\"><a href=\"#Filter-类\" class=\"headerlink\" title=\"Filter 类\"></a>Filter 类</h4><pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>commons<span class=\"token punctuation\">.</span>lang3<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpServletRequest</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>regex<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Matcher</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>regex<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Pattern</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">XssFilter</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Filter</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> excludes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> enabled <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">FilterConfig</span> filterConfig<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">String</span> strExcludes <span class=\"token operator\">=</span> filterConfig<span class=\"token punctuation\">.</span><span class=\"token function\">getInitParameter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"excludes\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> strEnabled <span class=\"token operator\">=</span> filterConfig<span class=\"token punctuation\">.</span><span class=\"token function\">getInitParameter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"enabled\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//将不需要xss过滤的接口添加到列表中</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNotEmpty</span><span class=\"token punctuation\">(</span>strExcludes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> urls <span class=\"token operator\">=</span> strExcludes<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> url<span class=\"token operator\">:</span>urls<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                excludes<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNotEmpty</span><span class=\"token punctuation\">(</span>strEnabled<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            enabled <span class=\"token operator\">=</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>strEnabled<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doFilter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServletRequest</span> servletRequest<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ServletResponse</span> servletResponse<span class=\"token punctuation\">,</span> <span class=\"token class-name\">FilterChain</span> filterChain<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ServletException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">HttpServletRequest</span> request <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span><span class=\"token punctuation\">)</span> servletRequest<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//如果该访问接口在排除列表里面则不拦截</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">isExcludeUrl</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">getServletPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            filterChain<span class=\"token punctuation\">.</span><span class=\"token function\">doFilter</span><span class=\"token punctuation\">(</span>servletRequest<span class=\"token punctuation\">,</span>servletResponse<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">//拦截该url并进行xss过滤</span>\n        <span class=\"token class-name\">XssHttpServletRequestWrapper</span> xssHttpServletRequestWrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XssHttpServletRequestWrapper</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        filterChain<span class=\"token punctuation\">.</span><span class=\"token function\">doFilter</span><span class=\"token punctuation\">(</span>xssHttpServletRequestWrapper<span class=\"token punctuation\">,</span>servletResponse<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isExcludeUrl</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> urlPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>enabled<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">//如果xss开关关闭了，则所有url都不拦截</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>excludes<span class=\"token operator\">==</span><span class=\"token keyword\">null</span><span class=\"token operator\">||</span>excludes<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token class-name\">String</span> url <span class=\"token operator\">=</span> urlPath<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> pattern<span class=\"token operator\">:</span>excludes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Pattern</span> p <span class=\"token operator\">=</span> <span class=\"token class-name\">Pattern</span><span class=\"token punctuation\">.</span><span class=\"token function\">compile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"^\"</span><span class=\"token operator\">+</span>pattern<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Matcher</span> m <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">matcher</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<h4 id=\"XSS-过滤包装类\"><a href=\"#XSS-过滤包装类\" class=\"headerlink\" title=\"XSS 过滤包装类\"></a>XSS 过滤包装类</h4><p>增加一个 XssHttpServletRequestWrapper 类，这个类重写了获取参数的方法，在获取参数时做了 XSS 替换处理</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span>extern<span class=\"token punctuation\">.</span>slf4j<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Slf4j</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>commons<span class=\"token punctuation\">.</span>lang3<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>jsoup<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Jsoup</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>jsoup<span class=\"token punctuation\">.</span>safety<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Whitelist</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpServletRequest</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpServletRequestWrapper</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * xss过滤包装类\n */</span>\n<span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">XssHttpServletRequestWrapper</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HttpServletRequestWrapper</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Constructs a request object wrapping the given request.\n     * @param request The request to wrap\n     * @throws IllegalArgumentException if the request is null\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">XssHttpServletRequestWrapper</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getHeader</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">String</span> strHeader <span class=\"token operator\">=</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">getHeader</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span>strHeader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> strHeader<span class=\"token punctuation\">;</span>\n\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Jsoup</span><span class=\"token punctuation\">.</span><span class=\"token function\">clean</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">getHeader</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Whitelist</span><span class=\"token punctuation\">.</span><span class=\"token function\">relaxed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getParameter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">String</span> strParameter <span class=\"token operator\">=</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">getParameter</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span>strParameter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> strParameter<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Jsoup</span><span class=\"token punctuation\">.</span><span class=\"token function\">clean</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">getParameter</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Whitelist</span><span class=\"token punctuation\">.</span><span class=\"token function\">relaxed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getParameterValues</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> values <span class=\"token operator\">=</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">getParameterValues</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>values<span class=\"token operator\">==</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> values<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> values<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> escapseValues <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">//过滤一切可能的xss攻击字符串</span>\n            escapseValues<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Jsoup</span><span class=\"token punctuation\">.</span><span class=\"token function\">clean</span><span class=\"token punctuation\">(</span>values<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Whitelist</span><span class=\"token punctuation\">.</span><span class=\"token function\">relaxed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>escapseValues<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>values<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xss字符串过滤前：\"</span><span class=\"token operator\">+</span>values<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token string\">\"\\t\"</span><span class=\"token operator\">+</span><span class=\"token string\">\"过滤后：\"</span><span class=\"token operator\">+</span>escapseValues<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> escapseValues<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<h4 id=\"配置加载类\"><a href=\"#配置加载类\" class=\"headerlink\" title=\"配置加载类\"></a>配置加载类</h4><p>SpringBoot 里面增加一个 configuration 配置，把 Filter 类配置上去</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>jueee<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">XssFilter</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>commons<span class=\"token punctuation\">.</span>lang3<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Value</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FilterRegistrationBean</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Bean</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Configuration</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DispatcherType</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HashMap</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * 设置跨站脚本过滤\n */</span>\n<span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FilterConfig</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"${xss.enabled}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> enabled<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"${xss.excludes}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> excludes<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"${xss.urlPatterns}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> urlPatterns<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">FilterRegistrationBean</span> <span class=\"token function\">xssFilterRegistration</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">FilterRegistrationBean</span> registrationBean <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FilterRegistrationBean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        registrationBean<span class=\"token punctuation\">.</span><span class=\"token function\">setDispatcherTypes</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DispatcherType</span><span class=\"token punctuation\">.</span>REQUEST<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        registrationBean<span class=\"token punctuation\">.</span><span class=\"token function\">setFilter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">XssFilter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        registrationBean<span class=\"token punctuation\">.</span><span class=\"token function\">addUrlPatterns</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span>urlPatterns<span class=\"token punctuation\">,</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        registrationBean<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"XssFilter\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        registrationBean<span class=\"token punctuation\">.</span><span class=\"token function\">setOrder</span><span class=\"token punctuation\">(</span><span class=\"token number\">9999</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> initParameters <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        initParameters<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"excludes\"</span><span class=\"token punctuation\">,</span>excludes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        initParameters<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"enabled\"</span><span class=\"token punctuation\">,</span>enabled<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        registrationBean<span class=\"token punctuation\">.</span><span class=\"token function\">setInitParameters</span><span class=\"token punctuation\">(</span>initParameters<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> registrationBean<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\n<h4 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h4><p>在 application.properties 或者 application.yml 里面增加一些开关配置，可以忽略某些接口提交的数据或者关闭 xss 过滤</p>\n<pre class=\"language-properties\" data-language=\"properties\"><code class=\"language-properties\"><span class=\"token comment\">#xss攻击拦截</span>\n<span class=\"token attr-name\">xss.enabled</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">true</span>\n<span class=\"token attr-name\">xss.excludes</span><span class=\"token punctuation\">=</span>\n<span class=\"token attr-name\">xss.urlPatterns</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">/*</span></code></pre>\n\n<h4 id=\"防护效果\"><a href=\"#防护效果\" class=\"headerlink\" title=\"防护效果\"></a>防护效果</h4><p>访问 <span class=\"exturl\" data-url=\"aHR0cDovLzEyNy4wLjAuMTo4MDgwL2RlbW8lRUYlQkMlOEMlRTglQkUlOTMlRTUlODUlQTU=\">http://127.0.0.1:8080/demo，输入<i class=\"fa fa-external-link-alt\"></i></span>  <code>test&lt;script&gt;alert('Attack!')&lt;/script&gt;</code>&nbsp;，并提交：</p>\n<p><img src=\"/images/2021/01/image-20210108185026725.png\" alt=\"image-20210108185026725\" loading=\"lazy\"></p>\n<p>日志：</p>\n<pre class=\"language-none\"><code class=\"language-none\">: into demo page\n: xss字符串过滤前：test&lt;script&gt;alert('Attack!')&lt;/script&gt;\t过滤后：test\n: name:test</code></pre>\n\n","categories":["Java","SpringBoot"],"tags":["Java","SpringBoot","XSS"]},{"title":"所有分类","url":"/categories/index.html","content":""},{"title":"404","url":"//404.html","content":"<pre class=\"language-none\"><code class=\"language-none\">██╗  ██╗ ██████╗ ██╗  ██╗    ███╗   ██╗ ██████╗ ████████╗\n██║  ██║██╔═████╗██║  ██║    ████╗  ██║██╔═══██╗╚══██╔══╝\n███████║██║██╔██║███████║    ██╔██╗ ██║██║   ██║   ██║\n╚════██║████╔╝██║╚════██║    ██║╚██╗██║██║   ██║   ██║\n     ██║╚██████╔╝     ██║    ██║ ╚████║╚██████╔╝   ██║\n     ╚═╝ ╚═════╝      ╚═╝    ╚═╝  ╚═══╝ ╚═════╝    ╚═╝\n\n    ███████╗ ██████╗ ██╗   ██╗███╗   ██╗██████╗\n    ██╔════╝██╔═══██╗██║   ██║████╗  ██║██╔══██╗\n    █████╗  ██║   ██║██║   ██║██╔██╗ ██║██║  ██║\n    ██╔══╝  ██║   ██║██║   ██║██║╚██╗██║██║  ██║\n    ██║     ╚██████╔╝╚██████╔╝██║ ╚████║██████╔╝\n    ╚═╝      ╚═════╝  ╚═════╝ ╚═╝  ╚═══╝╚═════╝</code></pre>\n"},{"title":"阅读笔记合集","url":"/nodes/index.html","content":"<h4 id=\"容器化相关笔记\"><a href=\"#容器化相关笔记\" class=\"headerlink\" title=\"容器化相关笔记\"></a>容器化相关笔记</h4><div class=\"link-grid\"><div class=\"link-grid-container\">\n<div class=\"link-grid-image\" style=\"background-image: url(/images/nodes/docker.jpg);\"></div>\n<p>docker 相关</p><p>docker 相关学习笔记</p>\n<a href=\"https://jueee.github.io/docker-doc/\"></a>\n</div><div class=\"link-grid-container\">\n<div class=\"link-grid-image\" style=\"background-image: url(/images/nodes/kubernetes.jpg);\"></div>\n<p>kubernetes 相关</p><p>kubernetes 相关学习笔记</p>\n<a href=\"https://jueee.github.io/kubernetes-doc/\"></a>\n</div></div>\n\n<h4 id=\"Java-相关笔记\"><a href=\"#Java-相关笔记\" class=\"headerlink\" title=\"Java 相关笔记\"></a>Java 相关笔记</h4><div class=\"link-grid\"><div class=\"link-grid-container\">\n<div class=\"link-grid-image\" style=\"background-image: url(/images/nodes/design-patterns.png);\"></div>\n<p>设计模式</p><p>《设计模式：可复用面向对象软件的基础》学习笔记</p>\n<a href=\"https://jueee.github.io/design-patterns/\"></a>\n</div><div class=\"link-grid-container\">\n<div class=\"link-grid-image\" style=\"background-image: url(/images/nodes/Effective-Java.png);\"></div>\n<p>Effective Java</p><p>《Effective Java 第三版》学习笔记</p>\n<a href=\"https://jueee.github.io/effective-Java/\"></a>\n</div><div class=\"link-grid-container\">\n<div class=\"link-grid-image\" style=\"background-image: url(/images/nodes/ConcurrencyWithJava.png);\"></div>\n<p>Java 并发编程</p><p>《精通 Java 并发编程（第 2 版 ）》学习笔记</p>\n<a href=\"https://jueee.github.io/ConcurrencyWithJava/\"></a>\n</div><div class=\"link-grid-container\">\n<div class=\"link-grid-image\" style=\"background-image: url(/images/nodes/JavaTestDrivenDev.png);\"></div>\n<p>Java 测试驱动开发</p><p>《Java 测试驱动开发》学习笔记</p>\n<a href=\"https://jueee.github.io/JavaTestDrivenDev/\"></a>\n</div><div class=\"link-grid-container\">\n<div class=\"link-grid-image\" style=\"background-image: url(/images/nodes/lambda.png);\"></div>\n<p>Java 8 函数式编程</p><p>《Java 8 函数式编程》学习笔记</p>\n<a href=\"https://jueee.github.io/Java8Lambdas/\"></a>\n</div><div class=\"link-grid-container\">\n<div class=\"link-grid-image\" style=\"background-image: url(/images/nodes/spring-boot.png);\"></div>\n<p>Spring Boot 实战</p><p>《 Spring Boot 实战（第 4 版）》 学习笔记</p>\n<a href=\"https://jueee.github.io/spring-boot-in-action/\"></a>\n</div></div>\n\n<h4 id=\"Spark-相关笔记\"><a href=\"#Spark-相关笔记\" class=\"headerlink\" title=\"Spark 相关笔记\"></a>Spark 相关笔记</h4><div class=\"link-grid\"><div class=\"link-grid-container\">\n<div class=\"link-grid-image\" style=\"background-image: url(/images/nodes/spark.png);\"></div>\n<p>Spark 大数据分析</p><p>《Spark 快速大数据分析》学习笔记</p>\n<a href=\"https://jueee.github.io/SparkFastDataAnalysis/\"></a>\n</div><div class=\"link-grid-container\">\n<div class=\"link-grid-image\" style=\"background-image: url(/images/nodes/scala.png);\"></div>\n<p>Scala 程序设计</p><p>《 Scala 程序设计（第 2 版）》学习笔记</p>\n<a href=\"https://jueee.github.io/ScalaProgramming/\"></a>\n</div></div>\n\n<h4 id=\"Python-相关笔记\"><a href=\"#Python-相关笔记\" class=\"headerlink\" title=\"Python 相关笔记\"></a>Python 相关笔记</h4><div class=\"link-grid\"><div class=\"link-grid-container\">\n<div class=\"link-grid-image\" style=\"background-image: url(/images/nodes/python.jpg);\"></div>\n<p>Python 标准库</p><p>《Python Standard Library》学习笔记</p>\n<a href=\"http://jueee.github.io/PythonStandardLibrary/\"></a>\n</div></div>"},{"title":"所有标签","url":"/tags/index.html","content":""}]