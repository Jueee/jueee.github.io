<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jueee的专栏</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://jueee.github.io/"/>
  <updated>2020-08-07T06:34:57.435Z</updated>
  <id>https://jueee.github.io/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>搭建hexo+github+hexo-theme-next主题博客</title>
    <link href="https://jueee.github.io/2020-08-07-%E6%90%AD%E5%BB%BAhexo+github+hexo-theme-next%E4%B8%BB%E9%A2%98%E5%8D%9A%E5%AE%A2/"/>
    <id>https://jueee.github.io/2020-08-07-%E6%90%AD%E5%BB%BAhexo+github+hexo-theme-next%E4%B8%BB%E9%A2%98%E5%8D%9A%E5%AE%A2/</id>
    <published>2020-08-07T00:00:00.000Z</published>
    <updated>2020-08-07T06:34:57.435Z</updated>
    
    <content type="html"><![CDATA[<h3 id="博客介绍"><a href="#博客介绍" class="headerlink" title="博客介绍"></a>博客介绍</h3><p>博客预览地址：<span class="exturl" data-url="aHR0cHM6Ly90aGVtZS1uZXh0LmpzLm9yZy8=">https://theme-next.js.org/<i class="fa fa-external-link-alt"></i></span></p><h3 id="搭建博客"><a href="#搭建博客" class="headerlink" title="搭建博客"></a>搭建博客</h3><p>GitHub：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL25leHQtdGhlbWUvdGhlbWUtbmV4dC1kb2Nz">https://github.com/next-theme/theme-next-docs<i class="fa fa-external-link-alt"></i></span></p><p>在本地安装：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/next-theme/theme-next-docs</span><br><span class="line">cd theme-next-docs</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>生成：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npx hexo generate</span><br></pre></td></tr></table></figure><p>运行：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npx hexo server</span><br></pre></td></tr></table></figure><h3 id="博客主题"><a href="#博客主题" class="headerlink" title="博客主题"></a>博客主题</h3><p>GitHub：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL25leHQtdGhlbWUvaGV4by10aGVtZS1uZXh0">https://github.com/next-theme/hexo-theme-next<i class="fa fa-external-link-alt"></i></span></p><h3 id="博客设置"><a href="#博客设置" class="headerlink" title="博客设置"></a>博客设置</h3><h4 id="创建categories"><a href="#创建categories" class="headerlink" title="创建categories"></a>创建categories</h4><ol><li><p><strong>新建一个页面，命名为categories。命令如下：</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npx hexo new page categories</span><br></pre></td></tr></table></figure><p>在myBlog/source下会新生成一个新的文件夹categories<br>，在该文件夹下会有一个index.md文件。</p></li><li><p><strong>编辑categories文件夹下的index.md</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: categories</span><br><span class="line">date: 2020-08-07 10:29:47</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure></li><li><p><strong>在菜单中添加链接。</strong></p><p>编辑主题的 <code>_config.next.yml</code>，将menu中的 categories: /categories 注释去掉，如下:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">categories: &#x2F;categories&#x2F; || fa fa-fw fa-th</span><br></pre></td></tr></table></figure></li></ol><h4 id="添加sitemap"><a href="#添加sitemap" class="headerlink" title="添加sitemap"></a>添加sitemap</h4><p>站点地图是一种文件，您可以通过该文件列出您网站上的网页，从而将您网站内容的组织架构告知Google和其他搜索引擎。Googlebot等搜索引擎网页抓取工具会读取此文件，以便更加智能地抓取您的网站。</p><ol><li><p>安装插件：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save</span><br><span class="line">npm install hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure></li><li><p>在博客目录的_config.yml中添加如下代码：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 自动生成sitemap</span><br><span class="line">sitemap:</span><br><span class="line">    path: sitemap.xml</span><br><span class="line">baidusitemap:</span><br><span class="line">    path: baidusitemap.xml</span><br></pre></td></tr></table></figure></li><li><p>编译博客</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npx hexo generate</span><br></pre></td></tr></table></figure></li><li><p>在你的博客根目录的public下面发现生成了sitemap.xml以及baidusitemap.xml就表示成功了。</p></li></ol>]]></content>
    
    <summary type="html">
    
      Hexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Coding上，是搭建博客的首选框架。
    
    </summary>
    
    
      <category term="Blog" scheme="https://jueee.github.io/categories/Blog/"/>
    
    
      <category term="Blog" scheme="https://jueee.github.io/tags/Blog/"/>
    
      <category term="Node.js" scheme="https://jueee.github.io/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>Arthas之jad反编译原理</title>
    <link href="https://jueee.github.io/2020-08-04-Arthas%E4%B9%8Bjad%E5%8F%8D%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
    <id>https://jueee.github.io/2020-08-04-Arthas%E4%B9%8Bjad%E5%8F%8D%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/</id>
    <published>2020-08-04T00:00:00.000Z</published>
    <updated>2020-08-07T04:28:11.457Z</updated>
    
    <content type="html"><![CDATA[<h3 id="jad-命令介绍"><a href="#jad-命令介绍" class="headerlink" title="jad 命令介绍"></a>jad 命令介绍</h3><p>jad 即 java decompiler，把 JVM 已加载类的字节码反编译成Java代码。</p><blockquote><p><span class="exturl" data-url="aHR0cHM6Ly9hbGliYWJhLmdpdGh1Yi5pby9hcnRoYXMvamFkLmh0bWw=">https://alibaba.github.io/arthas/jad.html<i class="fa fa-external-link-alt"></i></span></p></blockquote><h3 id="获取到类的字节码"><a href="#获取到类的字节码" class="headerlink" title="获取到类的字节码"></a>获取到类的字节码</h3><p>反编译有两部分工作：</p><ol><li>获取到字节码</li><li>反编译为Java代码</li></ol><p>那么怎么从运行的JVM里获取到字节码？</p><p>最常见的思路是，在<code>classpaths</code>下面查找，比如 <code>ClassLoader.getResource(&quot;java/lang/String.class&quot;)</code>，但是这样子查找到的字节码不一定对。比如可能有多个冲突的jar，或者有Java Agent修改了字节码。</p><h3 id="ClassFileTransformer机制"><a href="#ClassFileTransformer机制" class="headerlink" title="ClassFileTransformer机制"></a>ClassFileTransformer机制</h3><p>从JDK 1.5起，有一套<code>ClassFileTransformer</code>的机制，Java Agent通过<code>Instrumentation</code>注册<code>ClassFileTransformer</code>，那么在类加载或者<code>retransform</code>时就可以回调修改字节码。</p><p>显然，在Arthas里，要增强的类是已经被加载的，所以它们的字节码都是在<code>retransform</code>时被修改的。<br>通过显式调用<code>Instrumentation.retransformClasses(Class&lt;?&gt;...)</code>可以触发回调。</p><p>Arthas里增强字节码的<code>watch</code>/<code>trace</code>/<code>stack</code>/<code>tt</code>等命令都是通过<code>ClassFileTransformer</code>来实现的。</p><p><code>java.lang.instrument.ClassFileTransformer</code>的接口如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ClassFileTransformer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">byte</span>[]</span><br><span class="line">    transform(  ClassLoader         loader,</span><br><span class="line">                String              className,</span><br><span class="line">                Class&lt;?&gt;            classBeingRedefined,</span><br><span class="line">                ProtectionDomain    protectionDomain,</span><br><span class="line">                <span class="keyword">byte</span>[]              classfileBuffer)</span><br><span class="line">        <span class="keyword">throws</span> IllegalClassFormatException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到这里，读者应该猜到<code>jad</code>是怎么获取到字节码的了：</p><ol><li>注册一个<code>ClassFileTransformer</code></li><li>通过<code>Instrumentation.retransformClasses</code>触发回调</li><li>在回调的<code>transform</code>函数里获取到字节码</li><li>删掉注册的<code>ClassFileTransformer</code></li></ol><h3 id="使用cfr来反编译"><a href="#使用cfr来反编译" class="headerlink" title="使用cfr来反编译"></a>使用cfr来反编译</h3><p>获取到字节码之后，怎样转换为Java代码呢？</p><p>以前大家使用比较多的反编译软件可能是<code>jd-gui</code>，但是它不支持JDK8的lambda语法和一些新版本JDK的特性。</p><p>后面比较成熟的反编译软件是<code>cfr</code>，它以前是不开源的。直到最近的<code>0.145</code>版本，作者终于开源了，可喜可贺。地址是</p><blockquote><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xlaWJuaXR6MjcvY2Zy">https://github.com/leibnitz27/cfr<i class="fa fa-external-link-alt"></i></span></p></blockquote><p>在Arthas <code>jad</code>命令里，通过调用<code>cfr</code>来完成反编译。</p><h3 id="jad-命令的缺陷"><a href="#jad-命令的缺陷" class="headerlink" title="jad 命令的缺陷"></a>jad 命令的缺陷</h3><p>99%的情况下，<code>jad</code>命令dump下来的字节码是准确的，除了一些极端情况。</p><ol><li>因为JVM里注册的<code>ClassFileTransformer</code>可能有多个，那么在JVM里运行的字节码里，可能是被多个<code>ClassFileTransformer</code>处理过的。</li><li>触发了<code>retransformClasses</code>之后，这些注册的<code>ClassFileTransformer</code>会被依次回，上一个处理的字节码传递到下一个。<br>所以不能保证这些<code>ClassFileTransformer</code>第二次执行会返回同样的结果。</li><li>有可能一些<code>ClassFileTransformer</code>会被删掉，触发<code>retransformClasses</code>之后，之前的一些修改就会丢失掉。</li></ol><p>所以目前在Arthas里，如果开两个窗口，一个窗口执行<code>watch</code>/<code>tt</code>等命令，另一个窗口对这个类执行<code>jad</code>，那么可以观察到<code>watch</code>/<code>tt</code>停止了输出，实际上是因为字节码在触发了<code>retransformClasses</code>之后，<code>watch</code>/<code>tt</code>所做的修改丢失了。</p><h3 id="精确获取字节码"><a href="#精确获取字节码" class="headerlink" title="精确获取字节码"></a>精确获取字节码</h3><p>如果想精确获取到JVM内运行的Java字节码，可以使用这个<code>dumpclass</code>工具，它是通过<code>sa-jdi.jar</code>来实现的，保证dump下来的字节码是JVM内所运行的。</p><blockquote><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2hlbmd5dW5hYmMvZHVtcGNsYXNz">https://github.com/hengyunabc/dumpclass<i class="fa fa-external-link-alt"></i></span></p></blockquote><h3 id="cfr反编译示例"><a href="#cfr反编译示例" class="headerlink" title="cfr反编译示例"></a>cfr反编译示例</h3><p>参考Arthas代码：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvYXJ0aGFzL2Jsb2IvbWFzdGVyL2NvcmUvc3JjL21haW4vamF2YS9jb20vdGFvYmFvL2FydGhhcy9jb3JlL3V0aWwvRGVjb21waWxlci5qYXZh">com.taobao.arthas.core.util.Decompiler.java<i class="fa fa-external-link-alt"></i></span></p><h4 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h4><p>首先，需要引入 maven 依赖：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.benf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cfr<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.150<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="编写方法"><a href="#编写方法" class="headerlink" title="编写方法"></a>编写方法</h4><p>编写反编译类 <code>sample.utils.Decompiler</code>：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">decompile</span><span class="params">(String classFilePath, String methodName)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> decompile(classFilePath, methodName, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> classFilePath</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> methodName</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> hideUnicode</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">decompile</span><span class="params">(String classFilePath, String methodName, <span class="keyword">boolean</span> hideUnicode)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> StringBuilder result = <span class="keyword">new</span> StringBuilder(<span class="number">8192</span>);</span><br><span class="line"></span><br><span class="line">    OutputSinkFactory mySink = <span class="keyword">new</span> OutputSinkFactory() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> List&lt;SinkClass&gt; <span class="title">getSupportedSinks</span><span class="params">(SinkType sinkType, Collection&lt;SinkClass&gt; collection)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Arrays.asList(SinkClass.STRING, SinkClass.DECOMPILED, SinkClass.DECOMPILED_MULTIVER,</span><br><span class="line">                            SinkClass.EXCEPTION_MESSAGE);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> &lt;T&gt; <span class="function">Sink&lt;T&gt; <span class="title">getSink</span><span class="params">(<span class="keyword">final</span> SinkType sinkType, SinkClass sinkClass)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Sink&lt;T&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(T sinkable)</span> </span>&#123;</span><br><span class="line">                    <span class="comment">// skip message like: Analysing type demo.MathGame</span></span><br><span class="line">                    <span class="keyword">if</span> (sinkType == SinkType.PROGRESS) &#123;</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    result.append(sinkable);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    HashMap&lt;String, String&gt; options = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> org.benf.cfr.reader.util.MiscConstants.Version.getVersion() Currently,</span></span><br><span class="line"><span class="comment">     *      the cfr version is wrong. so disable show cfr version.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    options.put(<span class="string">&quot;showversion&quot;</span>, <span class="string">&quot;false&quot;</span>);</span><br><span class="line">    options.put(<span class="string">&quot;hideutf&quot;</span>, String.valueOf(hideUnicode));</span><br><span class="line">    <span class="keyword">if</span> (!StringUtils.isBlank(methodName)) &#123;</span><br><span class="line">        options.put(<span class="string">&quot;methodname&quot;</span>, methodName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    CfrDriver driver = <span class="keyword">new</span> CfrDriver.Builder().withOptions(options).withOutputSink(mySink).build();</span><br><span class="line">    List&lt;String&gt; toAnalyse = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">    toAnalyse.add(classFilePath);</span><br><span class="line">    driver.analyse(toAnalyse);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">String className &#x3D; &quot;sample&#x2F;redefine&#x2F;RedefineSuccess.class&quot;;</span><br><span class="line">String classPath &#x3D; Thread.currentThread().getContextClassLoader().getResource(className).getFile();</span><br><span class="line">System.out.println(classPath);</span><br><span class="line"></span><br><span class="line">String result &#x3D; decompile(classPath, null);</span><br><span class="line">System.out.println(result);</span><br><span class="line"></span><br><span class="line">String result2 &#x3D; decompile(classPath, &quot;printFlag&quot;);</span><br><span class="line">System.out.println(result2);</span><br></pre></td></tr></table></figure><h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">/C:/Codes/JavaWorkSpace/workspace48/arthas-demo/target/classes/sample/redefine/RedefineSuccess.class</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Decompiled with CFR.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> sample.redefine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedefineSuccess</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">3L</span>);</span><br><span class="line">            RedefineSuccess.printFlag();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printFlag</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;flag is true.&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;flag is false.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printFlag</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;flag is true.&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;flag is false.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><blockquote><p><span class="exturl" data-url="aHR0cDovL2hlbmd5dW5hYmMuZ2l0aHViLmlvL2FydGhhcy1qYWQv">http://hengyunabc.github.io/arthas-jad/<i class="fa fa-external-link-alt"></i></span></p></blockquote>]]></content>
    
    <summary type="html">
    
      Arthas是阿里巴巴开源的Java应用诊断利器，本文介绍Arthas里jad命令的实现原理。
    
    </summary>
    
    
      <category term="Java" scheme="https://jueee.github.io/categories/Java/"/>
    
      <category term="Java诊断" scheme="https://jueee.github.io/categories/Java/Java%E8%AF%8A%E6%96%AD/"/>
    
    
      <category term="Java诊断" scheme="https://jueee.github.io/tags/Java%E8%AF%8A%E6%96%AD/"/>
    
      <category term="Arthas" scheme="https://jueee.github.io/tags/Arthas/"/>
    
  </entry>
  
  <entry>
    <title>Arthas之源码简要分析</title>
    <link href="https://jueee.github.io/2020-08-03-Arthas%E4%B9%8B%E6%BA%90%E7%A0%81%E7%AE%80%E8%A6%81%E5%88%86%E6%9E%90/"/>
    <id>https://jueee.github.io/2020-08-03-Arthas%E4%B9%8B%E6%BA%90%E7%A0%81%E7%AE%80%E8%A6%81%E5%88%86%E6%9E%90/</id>
    <published>2020-08-03T00:00:00.000Z</published>
    <updated>2020-08-07T04:28:16.999Z</updated>
    
    <content type="html"><![CDATA[<h3 id="启动模块（boot）"><a href="#启动模块（boot）" class="headerlink" title="启动模块（boot）"></a>启动模块（boot）</h3><h4 id="启动-Arthas"><a href="#启动-Arthas" class="headerlink" title="启动 Arthas"></a>启动 Arthas</h4><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">wget https://alibaba.github.io/arthas/arthas-boot.jar</span><br><span class="line">java -jar arthas-boot.jar</span><br></pre></td></tr></table></figure><p><strong>模块代码</strong>：</p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvYXJ0aGFzL3RyZWUvbWFzdGVyL2Jvb3Q=">GitHub Code by arthas-boot<i class="fa fa-external-link-alt"></i></span></p><h4 id="模块入口"><a href="#模块入口" class="headerlink" title="模块入口"></a>模块入口</h4><p>在 arthas-boot模块的 pom.xml 文件中，找到启动类：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">manifest</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.taobao.arthas.boot.Bootstrap<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>com.taobao.arthas.boot.Bootstrap.main()</code> 方法：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvYXJ0aGFzL2Jsb2IvbWFzdGVyL2Jvb3Qvc3JjL21haW4vamF2YS9jb20vdGFvYmFvL2FydGhhcy9ib290L0Jvb3RzdHJhcC5qYXZhI0wyNzM=">GitHub Code by Bootstrap.java<i class="fa fa-external-link-alt"></i></span></p><h4 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h4><h5 id="参数解析"><a href="#参数解析" class="headerlink" title="参数解析"></a>参数解析</h5><p>使用了阿里开源的组件 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvY2xp">cli<i class="fa fa-external-link-alt"></i></span>，对参数进行了解析。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">CLI cli = CLIConfigurator.define(Bootstrap.class);</span><br><span class="line">CommandLine commandLine = cli.parse(Arrays.asList(args));</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    CLIConfigurator.inject(commandLine, bootstrap);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">    System.out.println(usage(cli));</span><br><span class="line">    System.exit(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="参数处理"><a href="#参数处理" class="headerlink" title="参数处理"></a>参数处理</h5><p>对传入的参数进行处理。</p><p>如调整日志级别，设置 RepoMirror 地址，Java版本，telnet/http的端口检查。</p><h5 id="检查-pid"><a href="#检查-pid" class="headerlink" title="检查 pid"></a>检查 pid</h5><p>如果在传入参数中没有 pid，则会调用本地 jps 命令，列出 java 进程（当然会排除本身）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">long</span> pid = bootstrap.getPid();</span><br><span class="line"><span class="comment">// select pid</span></span><br><span class="line"><span class="keyword">if</span> (pid &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        pid = ProcessUtils.select(bootstrap.isVerbose(), telnetPortPid, bootstrap.getSelect());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InputMismatchException e) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Please input an integer to select pid.&quot;</span>);</span><br><span class="line">        System.exit(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (pid &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Please select an available pid.&quot;</span>);</span><br><span class="line">        System.exit(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvYXJ0aGFzL2Jsb2IvbWFzdGVyL2Jvb3Qvc3JjL21haW4vamF2YS9jb20vdGFvYmFvL2FydGhhcy9ib290L1Byb2Nlc3NVdGlscy5qYXZhI0wxMjM=">GitHub Code by ProcessUtils.java<i class="fa fa-external-link-alt"></i></span></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;Long, String&gt; <span class="title">listProcessByJps</span><span class="params">(<span class="keyword">boolean</span> v)</span> </span>&#123;</span><br><span class="line">    Map&lt;Long, String&gt; result = <span class="keyword">new</span> LinkedHashMap&lt;Long, String&gt;();</span><br><span class="line"></span><br><span class="line">    String jps = <span class="string">&quot;jps&quot;</span>;</span><br><span class="line">    File jpsFile = findJps();</span><br><span class="line">    <span class="keyword">if</span> (jpsFile != <span class="keyword">null</span>) &#123;</span><br><span class="line">        jps = jpsFile.getAbsolutePath();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    AnsiLog.debug(<span class="string">&quot;Try use jps to lis java process, jps: &quot;</span> + jps);</span><br><span class="line"></span><br><span class="line">    String[] command = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (v) &#123;</span><br><span class="line">        command = <span class="keyword">new</span> String[] &#123; jps, <span class="string">&quot;-v&quot;</span>, <span class="string">&quot;-l&quot;</span> &#125;;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        command = <span class="keyword">new</span> String[] &#123; jps, <span class="string">&quot;-l&quot;</span> &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    List&lt;String&gt; lines = ExecutingCommand.runNative(command);</span><br><span class="line"></span><br><span class="line">    AnsiLog.debug(<span class="string">&quot;jps result: &quot;</span> + lines);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> currentPid = Long.parseLong(PidUtils.currentPid());</span><br><span class="line">    <span class="keyword">for</span> (String line : lines) &#123;</span><br><span class="line">        String[] strings = line.trim().split(<span class="string">&quot;\\s+&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (strings.length &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">long</span> pid = Long.parseLong(strings[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">if</span> (pid == currentPid) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (strings.length &gt;= <span class="number">2</span> &amp;&amp; isJpsProcess(strings[<span class="number">1</span>])) &#123; <span class="comment">// skip jps</span></span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            result.put(pid, line);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            <span class="comment">// https://github.com/alibaba/arthas/issues/970</span></span><br><span class="line">            <span class="comment">// ignore</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="启动服务端"><a href="#启动服务端" class="headerlink" title="启动服务端"></a>启动服务端</h5><p>进入主逻辑，会在用户目录下建立 <code>.arthas</code> 目录，同时下载 <code>arthas-core</code> 和 <code>arthas-agent</code> 等lib文件，然后启动客户端和服务端。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (telnetPortPid &gt; <span class="number">0</span> &amp;&amp; pid == telnetPortPid) &#123;</span><br><span class="line">    AnsiLog.info(<span class="string">&quot;The target process already listen port &#123;&#125;, skip attach.&quot;</span>, bootstrap.getTelnetPort());</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//double check telnet port and pid before attach</span></span><br><span class="line">    telnetPortPid = findProcessByTelnetClient(arthasHomeDir.getAbsolutePath(), bootstrap.getTelnetPort());</span><br><span class="line">    checkTelnetPortPid(bootstrap, telnetPortPid, pid);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// start arthas-core.jar</span></span><br><span class="line">    List&lt;String&gt; attachArgs = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">    attachArgs.add(<span class="string">&quot;-jar&quot;</span>);</span><br><span class="line">    attachArgs.add(<span class="keyword">new</span> File(arthasHomeDir, <span class="string">&quot;arthas-core.jar&quot;</span>).getAbsolutePath());</span><br><span class="line">    attachArgs.add(<span class="string">&quot;-pid&quot;</span>);</span><br><span class="line">    attachArgs.add(<span class="string">&quot;&quot;</span> + pid);</span><br><span class="line">    attachArgs.add(<span class="string">&quot;-target-ip&quot;</span>);</span><br><span class="line">    attachArgs.add(bootstrap.getTargetIp());</span><br><span class="line">    attachArgs.add(<span class="string">&quot;-telnet-port&quot;</span>);</span><br><span class="line">    attachArgs.add(<span class="string">&quot;&quot;</span> + bootstrap.getTelnetPort());</span><br><span class="line">    attachArgs.add(<span class="string">&quot;-http-port&quot;</span>);</span><br><span class="line">    attachArgs.add(<span class="string">&quot;&quot;</span> + bootstrap.getHttpPort());</span><br><span class="line">    attachArgs.add(<span class="string">&quot;-core&quot;</span>);</span><br><span class="line">    attachArgs.add(<span class="keyword">new</span> File(arthasHomeDir, <span class="string">&quot;arthas-core.jar&quot;</span>).getAbsolutePath());</span><br><span class="line">    attachArgs.add(<span class="string">&quot;-agent&quot;</span>);</span><br><span class="line">    attachArgs.add(<span class="keyword">new</span> File(arthasHomeDir, <span class="string">&quot;arthas-agent.jar&quot;</span>).getAbsolutePath());</span><br><span class="line">    <span class="keyword">if</span> (bootstrap.getSessionTimeout() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        attachArgs.add(<span class="string">&quot;-session-timeout&quot;</span>);</span><br><span class="line">        attachArgs.add(<span class="string">&quot;&quot;</span> + bootstrap.getSessionTimeout());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (bootstrap.getTunnelServer() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        attachArgs.add(<span class="string">&quot;-tunnel-server&quot;</span>);</span><br><span class="line">        attachArgs.add(bootstrap.getTunnelServer());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (bootstrap.getAgentId() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        attachArgs.add(<span class="string">&quot;-agent-id&quot;</span>);</span><br><span class="line">        attachArgs.add(bootstrap.getAgentId());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (bootstrap.getStatUrl() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        attachArgs.add(<span class="string">&quot;-stat-url&quot;</span>);</span><br><span class="line">        attachArgs.add(bootstrap.getStatUrl());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    AnsiLog.info(<span class="string">&quot;Try to attach process &quot;</span> + pid);</span><br><span class="line">    AnsiLog.debug(<span class="string">&quot;Start arthas-core.jar args: &quot;</span> + attachArgs);</span><br><span class="line">    <span class="comment">// 启动服务端</span></span><br><span class="line">    ProcessUtils.startArthasCore(pid, attachArgs);</span><br><span class="line"></span><br><span class="line">    AnsiLog.info(<span class="string">&quot;Attach process &#123;&#125; success.&quot;</span>, pid);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="启动客户端"><a href="#启动客户端" class="headerlink" title="启动客户端"></a>启动客户端</h5><p>最后通过反射的方式来启动字符客户端，等待用户输入指令。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">URLClassLoader classLoader = <span class="keyword">new</span> URLClassLoader(</span><br><span class="line">                <span class="keyword">new</span> URL[] &#123; <span class="keyword">new</span> File(arthasHomeDir, <span class="string">&quot;arthas-client.jar&quot;</span>).toURI().toURL() &#125;);</span><br><span class="line">Class&lt;?&gt; telnetConsoleClas = classLoader.loadClass(<span class="string">&quot;com.taobao.arthas.client.TelnetConsole&quot;</span>);</span><br><span class="line">Method mainMethod = telnetConsoleClas.getMethod(<span class="string">&quot;main&quot;</span>, String[].class);</span><br></pre></td></tr></table></figure><h3 id="服务端模块（core）"><a href="#服务端模块（core）" class="headerlink" title="服务端模块（core）"></a>服务端模块（core）</h3><p><strong>模块代码</strong>：</p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvYXJ0aGFzL3RyZWUvbWFzdGVyL2NvcmU=">GitHub Code by arthas-core<i class="fa fa-external-link-alt"></i></span></p><h4 id="模块入口-1"><a href="#模块入口-1" class="headerlink" title="模块入口"></a>模块入口</h4><p>在 arthas-core 模块的 pom.xml 中，找到启动类：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transformers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transformer</span> <span class="attr">implementation</span>=<span class="string">&quot;org.apache.maven.plugins.shade.resource.ManifestResourceTransformer&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.taobao.arthas.core.Arthas<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">transformer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transformers</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>com.taobao.arthas.core.Arthas.main()</code> 方法：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvYXJ0aGFzL2Jsb2IvbWFzdGVyL2NvcmUvc3JjL21haW4vamF2YS9jb20vdGFvYmFvL2FydGhhcy9jb3JlL0FydGhhcy5qYXZh">GitHub Code by Arthas.java<i class="fa fa-external-link-alt"></i></span></p><h4 id="源码分析-1"><a href="#源码分析-1" class="headerlink" title="源码分析"></a>源码分析</h4><h5 id="连接进程"><a href="#连接进程" class="headerlink" title="连接进程"></a>连接进程</h5><p>使用 <code>VirutalMachine.attach(pid)</code> 来连接进程,同时使用 <code>virtualMachine.loadAgent</code> 加载自定义的agent.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">attachAgent</span><span class="params">(Configure configure)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 省略部分代码</span></span><br><span class="line">    <span class="comment">// 连接进程</span></span><br><span class="line">            virtualMachine = VirtualMachine.attach(<span class="string">&quot;&quot;</span> + configure.getJavaPid());</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 省略部分代码</span></span><br><span class="line">    <span class="comment">// 动态加载Agent</span></span><br><span class="line">        virtualMachine.loadAgent(arthasAgentPath,</span><br><span class="line">                configure.getArthasCore() + <span class="string">&quot;;&quot;</span> + configure.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JavaAgent代理（agent）"><a href="#JavaAgent代理（agent）" class="headerlink" title="JavaAgent代理（agent）"></a>JavaAgent代理（agent）</h3><p><strong>模块代码</strong>：</p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvYXJ0aGFzL3RyZWUvbWFzdGVyL2FnZW50">GitHub Code by arthas-agent<i class="fa fa-external-link-alt"></i></span></p><h4 id="模块入口-2"><a href="#模块入口-2" class="headerlink" title="模块入口"></a>模块入口</h4><p>在 arthas-core 模块的 pom.xml 中，找到启动类：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">manifestEntries</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Premain-Class</span>&gt;</span>com.taobao.arthas.agent334.AgentBootstrap<span class="tag">&lt;/<span class="name">Premain-Class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Agent-Class</span>&gt;</span>com.taobao.arthas.agent334.AgentBootstrap<span class="tag">&lt;/<span class="name">Agent-Class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifestEntries</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>com.taobao.arthas.agent334.AgentBootstrap.main()</code> 方法：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvYXJ0aGFzL2Jsb2IvbWFzdGVyL2FnZW50L3NyYy9tYWluL2phdmEvY29tL3Rhb2Jhby9hcnRoYXMvYWdlbnQzMzQvQWdlbnRCb290c3RyYXAuamF2YQ==">GitHub Code by AgentBootstrap.java<i class="fa fa-external-link-alt"></i></span></p><h4 id="源码分析-2"><a href="#源码分析-2" class="headerlink" title="源码分析"></a>源码分析</h4><p><code>main()</code>方法中对于<code>arthas-spy</code>(简单理解为勾子类,类似于spring aop的前置方法,后置方法)进行了加载。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> ClassLoader agentLoader = getClassLoader(inst, arthasCoreJarFile);</span><br></pre></td></tr></table></figure><p>将spyJar添加到了BootstrapClassLoader(启动类加载器)，优先加载启动类加载器，spy可以在各个ClassLoader中使用。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">private static ClassLoader getClassLoader(Instrumentation inst, File arthasCoreJarFile) throws Throwable &#123;</span><br><span class="line">    &#x2F;&#x2F; 构造自定义的类加载器，尽量减少Arthas对现有工程的侵蚀</span><br><span class="line">    return loadOrDefineClassLoader(arthasCoreJarFile);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>异步调用bind()方法，启动服务端，监听端口，和客户端进行通讯。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Thread bindingThread = <span class="keyword">new</span> Thread() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            bind(inst, agentLoader, agentArgs);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            throwable.printStackTrace(ps);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Arthas之源码简要分析。
    
    </summary>
    
    
      <category term="Java" scheme="https://jueee.github.io/categories/Java/"/>
    
      <category term="Java诊断" scheme="https://jueee.github.io/categories/Java/Java%E8%AF%8A%E6%96%AD/"/>
    
    
      <category term="Java诊断" scheme="https://jueee.github.io/tags/Java%E8%AF%8A%E6%96%AD/"/>
    
      <category term="Arthas" scheme="https://jueee.github.io/tags/Arthas/"/>
    
  </entry>
  
  <entry>
    <title>Arthas之各模块简介</title>
    <link href="https://jueee.github.io/2020-08-02-Arthas%E4%B9%8B%E5%90%84%E6%A8%A1%E5%9D%97%E7%AE%80%E4%BB%8B/"/>
    <id>https://jueee.github.io/2020-08-02-Arthas%E4%B9%8B%E5%90%84%E6%A8%A1%E5%9D%97%E7%AE%80%E4%BB%8B/</id>
    <published>2020-08-03T00:00:00.000Z</published>
    <updated>2020-08-07T04:28:22.431Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Arthas"><a href="#Arthas" class="headerlink" title="Arthas"></a>Arthas</h3><h4 id="项目代码"><a href="#项目代码" class="headerlink" title="项目代码"></a>项目代码</h4><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvYXJ0aGFz">GitHub Code by arthas<i class="fa fa-external-link-alt"></i></span></p><h4 id="包含模块"><a href="#包含模块" class="headerlink" title="包含模块"></a>包含模块</h4><p><img src="/images/2020/08/1596679506644.png" alt="1596679506644" loading="lazy"></p><h3 id="模块简介"><a href="#模块简介" class="headerlink" title="模块简介"></a>模块简介</h3><ul><li>arthas-agent：基于JavaAgent技术的代理</li><li>bin：一些启动脚本</li><li>arthas-boot：Java版本的一键安装启动脚本</li><li>arthas-client：telnet client代码</li><li>arthas-common：一些共用的工具类和枚举类</li><li>arthas-core：核心库，各种arthas命令的交互和实现</li><li>arthas-demo：示例代码</li><li>arthas-memorycompiler：内存编绎器代码</li><li>arthas-packaging：maven打包相关的</li><li>arthas-site：arthas站点</li><li>arthas-spy：编织到目标类中的各个切面</li><li>static：静态资源</li><li>arthas-testcase：测试</li></ul><h3 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h3><p>Arthas 提供的功能主要可以分为以下三个方面：</p><ol><li>信息监控<ul><li>进程运行基本信息包括：内存、CPU占用、线程信息、线程堆栈、线程数统计、环境变量信息。</li><li>对象信息：类对象静态属性、 Mbean 的属性信息、已加载类信息、类加载器、类方法信息。</li></ul></li><li>方法调用<ul><li>方法调用入参、返回值查看。</li><li>方法被调用的调用路径、调用耗时、方法调用次数、成功次数、失败次数等统计。</li><li>记录和重做方法调用。</li></ul></li><li>类文件处理<ul><li>dump 已加载类的字节码、字节码反编译、类编译、类重新热加载。</li></ul></li></ol><h3 id="模块关系"><a href="#模块关系" class="headerlink" title="模块关系"></a>模块关系</h3><p>整体宏观模块调用图：</p><p><img src="/images/2020/08/1596698216827.png" alt="1596698216827" loading="lazy"></p><p>模块描述：</p><p><img src="/images/2020/08/1596616373228.png" alt="1596616373228" loading="lazy"></p><h3 id="核心类描述"><a href="#核心类描述" class="headerlink" title="核心类描述"></a>核心类描述</h3><p>核心类描述：</p><p><img src="/images/2020/08/1596710846489.png" alt="1596710846489" loading="lazy"></p><p>核心类描述（精简版）</p><p><img src="/images/2020/08/1596700025625.png" alt="1596700025625" loading="lazy"></p><h3 id="常用命令汇总"><a href="#常用命令汇总" class="headerlink" title="常用命令汇总"></a>常用命令汇总</h3><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvYXJ0aGFzL2lzc3Vlcy8xMDAz">Arthas 常用命令汇总<i class="fa fa-external-link-alt"></i></span></p><p><img src="/images/2020/08/1596701687793.png" alt="1596701687793" loading="lazy"></p>]]></content>
    
    <summary type="html">
    
      Arthas之各模块简介。
    
    </summary>
    
    
      <category term="Java" scheme="https://jueee.github.io/categories/Java/"/>
    
      <category term="Java诊断" scheme="https://jueee.github.io/categories/Java/Java%E8%AF%8A%E6%96%AD/"/>
    
    
      <category term="Java诊断" scheme="https://jueee.github.io/tags/Java%E8%AF%8A%E6%96%AD/"/>
    
      <category term="Arthas" scheme="https://jueee.github.io/tags/Arthas/"/>
    
  </entry>
  
  <entry>
    <title>idea相关配置总结</title>
    <link href="https://jueee.github.io/2020-08-06-idea%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE%E6%80%BB%E7%BB%93/"/>
    <id>https://jueee.github.io/2020-08-06-idea%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE%E6%80%BB%E7%BB%93/</id>
    <published>2020-07-31T00:00:00.000Z</published>
    <updated>2020-08-07T03:14:47.884Z</updated>
    
    <content type="html"><![CDATA[<h3 id="对maven仓库建立快捷方式"><a href="#对maven仓库建立快捷方式" class="headerlink" title="对maven仓库建立快捷方式"></a>对maven仓库建立快捷方式</h3><p>对于 maven 仓库配置在其他磁盘的情况，建立快捷方式。</p><p>使用管理员权限执行如下命令：</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">cmd /c mklink /D C:\Users\hzweiyongqiang\.m2\repository E:\code\Java\repository</span><br></pre></td></tr></table></figure><h3 id="配置阿里云中央仓库"><a href="#配置阿里云中央仓库" class="headerlink" title="配置阿里云中央仓库"></a>配置阿里云中央仓库</h3><p>进入到idea安装目录，找到\plugins\maven\lib 目录，可以看到maven有几个</p><p><img src="/images/2020/08/1596678866870.png" alt="1596678866870" loading="lazy"></p><p>修改 maven3 下 conf 目录下的settings.xml 。</p><p>找到mirrors，添加以下内容：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span>          </span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改后保存，打开idea，菜单 file-settings,搜索maven，选择刚才修改的maven：</p><p><img src="/images/2020/08/1596679064163.png" alt="1596679064163" loading="lazy"></p><p>设置好后保存，以后使用maven速度会提升很多倍。</p><h3 id="鼠标控制放大缩小"><a href="#鼠标控制放大缩小" class="headerlink" title="鼠标控制放大缩小"></a>鼠标控制放大缩小</h3><p>File -&gt; Setting -&gt; Editor -&gt; General</p><p><img src="/images/2020/08/1596680119868.png" alt="1596680119868" loading="lazy"></p>]]></content>
    
    <summary type="html">
    
      idea相关配置总结。
    
    </summary>
    
    
      <category term="软件" scheme="https://jueee.github.io/categories/%E8%BD%AF%E4%BB%B6/"/>
    
    
      <category term="软件" scheme="https://jueee.github.io/tags/%E8%BD%AF%E4%BB%B6/"/>
    
      <category term="idea" scheme="https://jueee.github.io/tags/idea/"/>
    
  </entry>
  
  <entry>
    <title>迁移VMware虚拟机至微软Hyper-V</title>
    <link href="https://jueee.github.io/2020-07-31-%E8%BF%81%E7%A7%BBVMware%E8%99%9A%E6%8B%9F%E6%9C%BA%E8%87%B3%E5%BE%AE%E8%BD%AFHyper-V/"/>
    <id>https://jueee.github.io/2020-07-31-%E8%BF%81%E7%A7%BBVMware%E8%99%9A%E6%8B%9F%E6%9C%BA%E8%87%B3%E5%BE%AE%E8%BD%AFHyper-V/</id>
    <published>2020-07-31T00:00:00.000Z</published>
    <updated>2020-08-07T04:29:25.247Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Hyper-V-虚拟机"><a href="#Hyper-V-虚拟机" class="headerlink" title="Hyper-V 虚拟机"></a>Hyper-V 虚拟机</h3><p>Hyper-V是微软的一款虚拟化产品，是微软第一个采用类似Vmware ESXi和Citrix Xen的基于hypervisor的技术。</p><h3 id="开启-Hyper-V"><a href="#开启-Hyper-V" class="headerlink" title="开启 Hyper-V"></a>开启 Hyper-V</h3><p>进入电脑的控制面板-&gt;程序-&gt;启用或关闭Windows功能-&gt;把Hyper-v勾上，启用后电脑会重启。</p><p><img src="/images/2020/07/1595925972986.png" alt="1595925972986" loading="lazy"></p><h3 id="迁移VMware虚拟机"><a href="#迁移VMware虚拟机" class="headerlink" title="迁移VMware虚拟机"></a>迁移VMware虚拟机</h3><h4 id="使用微软MVMC工具实现迁移"><a href="#使用微软MVMC工具实现迁移" class="headerlink" title="使用微软MVMC工具实现迁移"></a>使用微软MVMC工具实现迁移</h4><p>MVMC工具可以直接由微软官网下载</p><blockquote><p><span class="exturl" data-url="aHR0cDovL3d3dy5taWNyb3NvZnQuY29tL2VuLXVzL2Rvd25sb2FkL2RldGFpbHMuYXNweD9pZD00MjQ5Nw==">下载链接<i class="fa fa-external-link-alt"></i></span></p></blockquote><p>下载完成后，将安装文件拷贝到要安装MVMC的服务器上。</p><h4 id="安装StarWind-V2V-Converter"><a href="#安装StarWind-V2V-Converter" class="headerlink" title="安装StarWind V2V Converter"></a>安装StarWind V2V Converter</h4><p>下载StarWind V2V Converter安装文件并执行安装，安装过程按照引导进行即可。</p><p>安装完成后，打开 <code>StarWind V2V Image Converter</code>。</p><p>选择 Local file：</p><p><img src="/images/2020/07/1596174987682.png" alt="1596174987682" loading="lazy"></p><p>Next，选择 VMware虚拟机的 vmdk 文件：</p><p><img src="/images/2020/07/1596175078239.png" alt="1596175078239" loading="lazy"></p><p>再点击 Next，等待转换完成，即可。</p><p><img src="/images/2020/07/1596174902166.png" alt="1596174902166" loading="lazy"></p><h4 id="导入-vhd-文件"><a href="#导入-vhd-文件" class="headerlink" title="导入 vhd 文件"></a>导入 vhd 文件</h4><p>打开 Hyper-V，新建虚拟机。</p><p>指定名称和存储位置。</p><p><img src="/images/2020/07/1596175210979.png" alt="1596175210979" loading="lazy"></p><p>指定虚拟机的代数，选择第一代。</p><blockquote><p>Windows10 Hyper-V支持的虚拟机文件格式有两代，第一代的文件后缀为.vhd；第二代的文件后缀为.vhdx。</p></blockquote><p><img src="/images/2020/07/1596175283830.png" alt="1596175283830" loading="lazy"></p><p>分配内存：</p><p><img src="/images/2020/07/1596175352095.png" alt="1596175352095" loading="lazy"></p><p>配置网络：</p><p><img src="/images/2020/07/1596175380895.png" alt="1596175380895" loading="lazy"></p><p>选择指定刚刚生成的.vhd文件：</p><p><img src="/images/2020/07/1596175428931.png" alt="1596175428931" loading="lazy"></p><p>转换导入成功，接下来，虚拟机就可以运行了。</p><h3 id="Hyper-v虚拟机联网配置"><a href="#Hyper-v虚拟机联网配置" class="headerlink" title="Hyper-v虚拟机联网配置"></a>Hyper-v虚拟机联网配置</h3><h4 id="新建虚拟交换机"><a href="#新建虚拟交换机" class="headerlink" title="新建虚拟交换机"></a>新建虚拟交换机</h4><p>选择：</p><p><img src="/images/2020/07/1596175872059.png" alt="1596175872059" loading="lazy"></p><p>输入交换机名称和选择外部网络，可以看到外部网络的下拉框的选项，这里选择当前计算机的联网方式。</p><p>如何知道当前使用什么方式联网呢？---查看网络适配器。</p><p><img src="/images/2020/07/1596176082370.png" alt="1596176082370" loading="lazy"></p><p><strong>如果主机切换了联网方式，只要去虚拟机里改下对应的下拉选项即可。</strong></p><p><img src="/images/2020/07/1596175973333.png" alt="1596175973333" loading="lazy"></p><p>点击确定，建立虚拟交换机。</p><h4 id="更改虚拟机的网络适配器"><a href="#更改虚拟机的网络适配器" class="headerlink" title="更改虚拟机的网络适配器"></a>更改虚拟机的网络适配器</h4><p>右键---设置---网络适配器：</p><p><img src="/images/2020/07/1596176189357.png" alt="1596176189357" loading="lazy"></p><h3 id="debian-设置网络"><a href="#debian-设置网络" class="headerlink" title="debian 设置网络"></a>debian 设置网络</h3><p>问题描述：</p><p>配置完/etc/networking/interfaces后，使用 /etc/init.d/networking restart 出现启动失败，根据提示输入systemctl status networking.service 发现不认识/etc/networking/interfaces中配置的虚拟网卡(或者是因为虚拟机的重新移动导致的设备不匹配问题等)</p><p>解决方法：</p><p>首先可以查看etc/udev/rules.d/70-persistent-net.rules 是否存在，如果存在，则删除 rm etc/udev/rules.d/70-persistent-net.rules，重启即可</p><p>如果etc/udev/rules.d/70-persistent-net.rules 不存在，则ifconfig -a查看全部网卡，修改/etc/networking/interfaces中的网卡名和ifconfig -a命令显示的网卡名匹配，重启网络即可。</p>]]></content>
    
    <summary type="html">
    
      介绍微软 Hyper-V 虚拟机的使用。
    
    </summary>
    
    
      <category term="软件" scheme="https://jueee.github.io/categories/%E8%BD%AF%E4%BB%B6/"/>
    
      <category term="Windows" scheme="https://jueee.github.io/categories/%E8%BD%AF%E4%BB%B6/Windows/"/>
    
    
      <category term="软件" scheme="https://jueee.github.io/tags/%E8%BD%AF%E4%BB%B6/"/>
    
      <category term="Windows" scheme="https://jueee.github.io/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>为Github项目说明添加优美标签</title>
    <link href="https://jueee.github.io/2020-07-30-%E4%B8%BAGithub%E9%A1%B9%E7%9B%AE%E8%AF%B4%E6%98%8E%E6%B7%BB%E5%8A%A0%E4%BC%98%E7%BE%8E%E6%A0%87%E7%AD%BE/"/>
    <id>https://jueee.github.io/2020-07-30-%E4%B8%BAGithub%E9%A1%B9%E7%9B%AE%E8%AF%B4%E6%98%8E%E6%B7%BB%E5%8A%A0%E4%BC%98%E7%BE%8E%E6%A0%87%E7%AD%BE/</id>
    <published>2020-07-30T00:00:00.000Z</published>
    <updated>2020-08-07T03:15:48.543Z</updated>
    
    <content type="html"><![CDATA[<p>大家在Github上看项目的时候，是不是经常在项目介绍README.md里看到这种高大上的标签：</p><p> <img src="/images/2020/07/1596161123283.png" alt="1596161123283" loading="lazy"></p><p><strong>接下来我们来制作这种标签</strong>。</p><h3 id="标签网站"><a href="#标签网站" class="headerlink" title="标签网站"></a>标签网站</h3><ul><li><span class="exturl" data-url="aHR0cHM6Ly9zaGllbGRzLmlvLw==">https://shields.io/<i class="fa fa-external-link-alt"></i></span></li></ul><h3 id="制作标签"><a href="#制作标签" class="headerlink" title="制作标签"></a>制作标签</h3><p>下拉，找到Your Badge：</p><p><img src="/images/2020/07/1596160368983.png" alt="1596160368983" loading="lazy"></p><p>填写<strong>subject、status、color</strong>三个字段，点击<strong>Make Badge</strong>生成标签：</p><p><img src="/images/2020/07/1596160688666.png" alt="1596160688666" loading="lazy"></p><p>生成结果：</p><p><img src="/images/2020/07/1596160441795.png" alt="1596160441795" loading="lazy"></p><p>复制标签地址：<span class="exturl" data-url="aHR0cHM6Ly9pbWcuc2hpZWxkcy5pby9iYWRnZS9hdXRob3ItSnVlZWUtZ3JlZW4=">https://img.shields.io/badge/author-Jueee-green<i class="fa fa-external-link-alt"></i></span></p><p>在README.md里添加如下代码：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">![](https://img.shields.io/badge/author-Jueee-green)</span><br></pre></td></tr></table></figure><p>可以看到如下显示：</p><p><img src="https://img.shields.io/badge/author-Jueee-green" loading="lazy"></p><p>这些图片url是有规律的：<code>文字-文字-颜色</code>。</p><h3 id="组合标签"><a href="#组合标签" class="headerlink" title="组合标签"></a>组合标签</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">![](https:&#x2F;&#x2F;img.shields.io&#x2F;badge&#x2F;build-success-green) ![](https:&#x2F;&#x2F;img.shields.io&#x2F;badge&#x2F;version-1.0-orange) ![](https:&#x2F;&#x2F;img.shields.io&#x2F;badge&#x2F;author-Jueee-blue)</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="/images/2020/07/1596162573650.png" alt="1596162573650" loading="lazy"></p><h3 id="添加点击事件"><a href="#添加点击事件" class="headerlink" title="添加点击事件"></a>添加点击事件</h3><p>为标签添加点击事件，代码如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[![](https:&#x2F;&#x2F;img.shields.io&#x2F;badge&#x2F;author-Jueee-green)](点击跳转的链接)</span><br></pre></td></tr></table></figure><h4 id="为啥这么写？"><a href="#为啥这么写？" class="headerlink" title="为啥这么写？"></a>为啥这么写？</h4><p>我们知道，MarkDown中<strong>链接</strong>显示语法为</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">链接名称</span>](链接地址)</span><br></pre></td></tr></table></figure><p><strong>图片</strong>显示语法为：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">!<span class="selector-attr">[图片名称]</span>(图片地址)</span><br></pre></td></tr></table></figure><p>那么带链接的图片就是将两者语法嵌套就行了，即<code>[链接名称]</code>部分变成图片显示语法，语法变成：</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">![图片名称</span>](图片地址)](链接地址)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      制作项目介绍 README.md 里看到这种高大上的标签。
    
    </summary>
    
    
      <category term="Blog" scheme="https://jueee.github.io/categories/Blog/"/>
    
    
      <category term="Blog" scheme="https://jueee.github.io/tags/Blog/"/>
    
      <category term="HTML" scheme="https://jueee.github.io/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>为 GitLab 代码库配置 Specific Runner</title>
    <link href="https://jueee.github.io/2020-07-25-%E4%B8%BAGitLab%E4%BB%A3%E7%A0%81%E5%BA%93%E9%85%8D%E7%BD%AESpecific%20Runner/"/>
    <id>https://jueee.github.io/2020-07-25-%E4%B8%BAGitLab%E4%BB%A3%E7%A0%81%E5%BA%93%E9%85%8D%E7%BD%AESpecific%20Runner/</id>
    <published>2020-07-25T00:00:00.000Z</published>
    <updated>2020-08-07T02:01:19.262Z</updated>
    
    <content type="html"><![CDATA[<h3 id="添加-k8s-集群"><a href="#添加-k8s-集群" class="headerlink" title="添加 k8s 集群"></a>添加 k8s 集群</h3><p>单击<strong>添加现有集群</strong>选项卡，然后填写详细信息：</p><ul><li><p><strong>Kubernetes集群名称</strong>（必填）-您希望为<strong>集群指定</strong>的名称。</p></li><li><p><strong>环境范围</strong>（必需）-  <a href="index.md#setting-the-environment-scope-premium">与</a>此集群<a href="index.md#setting-the-environment-scope-premium">相关的环境</a>。</p></li><li><p><strong>API URL</strong>（必填）-这是GitLab用于访问Kubernetes API的URL。Kubernetes公开了几个API，我们希望所有API都具有通用的“基本” URL，例如，<code>https://kubernetes.example.com</code>而不是<code>https://kubernetes.example.com/api/v1</code>。</p><p>通过运行以下命令获取API URL：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubectl cluster-info | grep &#39;Kubernetes master&#39; | awk &#39;&#x2F;http&#x2F; &#123;print $NF&#125;&#39;</span><br></pre></td></tr></table></figure></li><li><p><strong>CA证书</strong>（必需）-需要有效的Kubernetes证书才能对集群进行身份验证。我们将使用默认创建的证书。</p><ul><li><p>用列出秘密<code>kubectl get secrets</code>，并命名类似  <code>default-token-xxxxx</code>。复制该令牌名称以在下面使用。</p></li><li><p>通过运行以下命令获取证书：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubectl get secret &lt;secret name&gt; -o jsonpath&#x3D;&quot;&#123;[&#39;data&#39;][&#39;ca\.crt&#39;]&#125;&quot; | base64 --decode</span><br></pre></td></tr></table></figure><p>注意：<strong>注意：</strong>  如果命令返回整个证书链，则需要在证书链 底部复制<em>root ca</em>证书。</p></li></ul></li><li><p><strong>令牌</strong> -GitLab使用服务令牌对Kubernetes进行身份验证，该服务令牌的范围仅限于特定的<code>namespace</code>。 <strong>使用的令牌应属于具有cluster-admin 特权的服务帐户  。</strong>要创建此服务帐户：</p><ol><li><p>创建一个<code>gitlab-admin-service-account.yaml</code>包含内容的文件：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  name: gitlab-admin</span><br><span class="line">  namespace: kube-system</span><br><span class="line">---</span><br><span class="line">apiVersion: rbac.authorization.k8s.io&#x2F;v1beta1</span><br><span class="line">kind: ClusterRoleBinding</span><br><span class="line">metadata:</span><br><span class="line">  name: gitlab-admin</span><br><span class="line">roleRef:</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line">  kind: ClusterRole</span><br><span class="line">  name: cluster-admin</span><br><span class="line">subjects:</span><br><span class="line">- kind: ServiceAccount</span><br><span class="line">  name: gitlab-admin</span><br><span class="line">  namespace: kube-system</span><br></pre></td></tr></table></figure></li><li><p>将服务帐户和群集角色绑定应用于您的群集：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubectl apply -f gitlab-admin-service-account.yaml</span><br></pre></td></tr></table></figure><p>您将需要<code>container.clusterRoleBindings.create</code>许可权才能创建集群级角色。如果您没有此权限，则可以选择启用基本身份验证，然后<code>kubectl apply</code>以管理员身份运行  命令：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubectl apply -f gitlab-admin-service-account.yaml --username&#x3D;admin --password&#x3D;&lt;password&gt;</span><br></pre></td></tr></table></figure><p>注意：<strong>注意：</strong>  可以打开基本身份验证，并可以使用Google Cloud Console获取密码凭据。</p><p>输出：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">serviceaccount &quot;gitlab-admin&quot; created</span><br><span class="line">clusterrolebinding &quot;gitlab-admin&quot; created</span><br></pre></td></tr></table></figure></li><li><p>检索<code>gitlab-admin</code>服务帐户的令牌：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | grep gitlab-admin | awk &#39;&#123;print $1&#125;&#39;)</span><br></pre></td></tr></table></figure><p>复制<code>&lt;authentication_token&gt;</code>输出中的值：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Name:         gitlab-admin-token-b5zv4</span><br><span class="line">Namespace:    kube-system</span><br><span class="line">Labels:       &lt;none&gt;</span><br><span class="line">Annotations:  kubernetes.io&#x2F;service-account.name&#x3D;gitlab-admin</span><br><span class="line">              kubernetes.io&#x2F;service-account.uid&#x3D;bcfe66ac-39be-11e8-97e8-026dce96b6e8</span><br><span class="line"></span><br><span class="line">Type:  kubernetes.io&#x2F;service-account-token</span><br><span class="line"></span><br><span class="line">Data</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">ca.crt:     1025 bytes</span><br><span class="line">namespace:  11 bytes</span><br><span class="line">token:      &lt;authentication_token&gt;</span><br></pre></td></tr></table></figure></li></ol></li></ul><h3 id="配置-Specific-Runner"><a href="#配置-Specific-Runner" class="headerlink" title="配置 Specific Runner"></a>配置 Specific Runner</h3><p>在 GitLab 的 CI/CD 流程中具体执行任务的节点叫做 <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmdpdGxhYi5jb20vcnVubmVyLw==">runner<i class="fa fa-external-link-alt"></i></span>。GitLab 中有两种类型的 runner：</p><ul><li><strong>Shared Runners</strong> 由 GitLab 管理员配置的公有 runner。多个项目公用。作为开发人员无需配置，可以直接使用。</li><li><strong>Specific Runners</strong> 开发人员为每个代码库单独配置的专属 runner。只能执行所属代码库的任务。需要开发人员手动搭建。</li></ul><p>由于我厂的 GitLab 并没有配置任何 Shared Runner。所以只能选择在自己的台式机上手动搭建。</p><h3 id="下载-runner-可执行文件"><a href="#下载-runner-可执行文件" class="headerlink" title="下载 runner 可执行文件"></a>下载 runner 可执行文件</h3><p>根据你的环境下载 <span class="exturl" data-url="aHR0cHM6Ly9naXRsYWItcnVubmVyLWRvd25sb2Fkcy5zMy5hbWF6b25hd3MuY29tL2xhdGVzdC9iaW5hcmllcy9naXRsYWItcnVubmVyLXdpbmRvd3MtMzg2LmV4ZQ==">x86<i class="fa fa-external-link-alt"></i></span> 或者 <span class="exturl" data-url="aHR0cHM6Ly9naXRsYWItcnVubmVyLWRvd25sb2Fkcy5zMy5hbWF6b25hd3MuY29tL2xhdGVzdC9iaW5hcmllcy9naXRsYWItcnVubmVyLXdpbmRvd3MtYW1kNjQuZXhl">amd64<i class="fa fa-external-link-alt"></i></span> 版本。</p><p>创建 <code>D:\GitLab-Runner</code> 目录，将刚刚下载好的文件复制到该目录并重命名为 <code>gitlab-runner.exe</code>。</p><h3 id="获取配置信息"><a href="#获取配置信息" class="headerlink" title="获取配置信息"></a>获取配置信息</h3><p>进入代码库主页，依次点击 <code>Settings</code> =&gt; <code>CI / CD</code> =&gt; <code>Runners settings</code>。</p><p><img src="/images/2020/07/1595562311495.png" alt="1595562311495" loading="lazy"></p><p>这里展开的信息中有两个字段需要我们记下来。分别是一个 URL 和一个 Token。</p><p><img src="/images/2020/07/1595562367478.png" alt="1595562367478" loading="lazy"></p><h3 id="注册-runner"><a href="#注册-runner" class="headerlink" title="注册 runner"></a>注册 runner</h3><h4 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">k exec -it runner-gitlab-runner-74cf6f794b-22vln gitlab-runner register -n gitlab-managed-apps</span><br></pre></td></tr></table></figure><h4 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h4><p>进入 <code>D:\GitLab-Runner</code> 目录执行命令：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">./gitlab-runner.exe</span> <span class="string">register</span></span><br></pre></td></tr></table></figure><h4 id="进行注册"><a href="#进行注册" class="headerlink" title="进行注册"></a>进行注册</h4><p>执行完后会进入一个交互式的配置流程，你需要回答以下问题：</p><ul><li><code>Please enter the gitlab-ci coordinator URL</code>：填入上一步获取的 URL</li><li><code>Please enter the gitlab-ci token for this runner</code>：填入上一步获取的 Token</li><li><code>Please enter the gitlab-ci description for this runner</code>：给你的 runner 起一个名字</li><li><code>Please enter the gitlab-ci tags for this runner (comma separated)</code>：GitLab 允许我们给 runner 设置标签，设置好后该 runner 只会执行拥有相同标签的任务。由于我们的 runner 只为我们自己的代码库服务，所以此处不做过多配置。留空即可。</li><li><code>Whether to lock Runner to current project</code>：该 runner 是否应该锁定在当前项目上。由于我们是自己用，选 <code>true</code> 即可。</li><li><code>Please enter the executor: ssh, docker+machine, docker-ssh+machine, kubernetes, docker, parallels, virtualbox, docker-ssh, shell: docker</code>：选择任务执行环境，我们选择最简单的 <code>shell</code>。</li></ul><h3 id="验证服务已启动"><a href="#验证服务已启动" class="headerlink" title="验证服务已启动"></a>验证服务已启动</h3><p>进入代码库主页，依次点击 <code>Settings</code> =&gt; <code>CI / CD</code> =&gt; <code>Runners settings</code>。</p><p><img src="/images/2020/07/1595562200358.png" alt="1595562200358" loading="lazy"></p>]]></content>
    
    <summary type="html">
    
      在 GitLab 的 CI/CD 流程。
    
    </summary>
    
    
      <category term="GitLab" scheme="https://jueee.github.io/categories/GitLab/"/>
    
    
      <category term="GitLab" scheme="https://jueee.github.io/tags/GitLab/"/>
    
  </entry>
  
  <entry>
    <title>使用 GitBook 进行团队文档协作</title>
    <link href="https://jueee.github.io/2020-07-24-%E4%BD%BF%E7%94%A8GitBook%E8%BF%9B%E8%A1%8C%E5%9B%A2%E9%98%9F%E6%96%87%E6%A1%A3%E5%8D%8F%E4%BD%9C/"/>
    <id>https://jueee.github.io/2020-07-24-%E4%BD%BF%E7%94%A8GitBook%E8%BF%9B%E8%A1%8C%E5%9B%A2%E9%98%9F%E6%96%87%E6%A1%A3%E5%8D%8F%E4%BD%9C/</id>
    <published>2020-07-24T00:00:00.000Z</published>
    <updated>2020-08-07T03:16:22.518Z</updated>
    
    <content type="html"><![CDATA[<p><strong>GitBook 提供了 GitBook Editor ，GitBook cli 这两个工具，一个是编辑文档，一个可以生成文档。只要本地搭建一个Git 服务就完全可以实现本地化了。</strong></p><h3 id="工具准备"><a href="#工具准备" class="headerlink" title="工具准备"></a>工具准备</h3><p>如果没有团队协作要求，只想生成电子书，只在自己机器上安装GitBook CI 就可以，1，2 就可以省略了。</p><ol><li>GitLab 一键安装包 <span class="exturl" data-url="aHR0cHM6Ly9hYm91dC5naXRsYWIuY29tL2Rvd25sb2Fkcy8=">https://about.gitlab.com/downloads/<i class="fa fa-external-link-alt"></i></span> </li><li>GitLab Ci Runner <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2dpdGxhYmhxL2dpdGxhYi1jaS1ydW5uZXI=">https://github.com/gitlabhq/gitlab-ci-runner<i class="fa fa-external-link-alt"></i></span> </li><li>GitBook CI <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0dpdGJvb2tJTy9naXRib29rLWNsaQ==">https://github.com/GitbookIO/gitbook-cli<i class="fa fa-external-link-alt"></i></span> </li><li>GitBook Editor <span class="exturl" data-url="aHR0cHM6Ly93d3cuZ2l0Ym9vay5jb20vZWRpdG9y">https://www.gitbook.com/editor<i class="fa fa-external-link-alt"></i></span></li></ol><h3 id="GitLab-Runner配置"><a href="#GitLab-Runner配置" class="headerlink" title="GitLab Runner配置"></a>GitLab Runner配置</h3><h4 id="编辑-gitlab-ci-yml"><a href="#编辑-gitlab-ci-yml" class="headerlink" title="编辑 .gitlab-ci.yml"></a>编辑 .gitlab-ci.yml</h4><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义 stages</span></span><br><span class="line"><span class="attr">stages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">build</span></span><br><span class="line"><span class="comment"># 定义 job</span></span><br><span class="line"><span class="attr">GenerateHTML:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">build</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">p=`pwd`</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">$p</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">gitbook</span> <span class="string">build</span></span><br></pre></td></tr></table></figure><p>gitlab 执行构建，会在文件夹下生成 _book 的目录。</p><p>手工执行 gitbook serve 启动。</p><p>打开 ip:4000 就可以查看文档了。</p><h3 id="相关命令"><a href="#相关命令" class="headerlink" title="相关命令"></a>相关命令</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$ gitbook init <span class="comment"># 初始化一个仓库</span></span><br><span class="line"></span><br><span class="line">$ gitbook install <span class="comment"># 安装插件</span></span><br><span class="line"></span><br><span class="line">$ gitbook serve <span class="comment"># 本地预览</span></span><br><span class="line"></span><br><span class="line">$ gitbook serve --port <span class="number">8001</span> <span class="comment"># 指定端口,默认4000</span></span><br><span class="line"></span><br><span class="line">$ gitbook build  <span class="comment"># 输出一个静态网站</span></span><br><span class="line"></span><br><span class="line">$ gitbook pdf <span class="comment"># 生成pdf文件</span></span><br><span class="line"></span><br><span class="line">$ gitbook help <span class="comment"># 查看帮助</span></span><br></pre></td></tr></table></figure><p>可以使用<code>--log=debug</code>和<code>--debug</code>来获得更详细的错误消息（堆栈跟踪）。例如：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ gitbook build .&#x2F; --log&#x3D;debug --debug</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ gitbook serve .&#x2F; --log&#x3D;debug --debug</span><br></pre></td></tr></table></figure><h3 id="Docker容器化"><a href="#Docker容器化" class="headerlink" title="Docker容器化"></a>Docker容器化</h3><p><code>Dockerfile</code> 文件如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">From node:10</span><br><span class="line"></span><br><span class="line">LABEL version&#x3D;$VERSION</span><br><span class="line"></span><br><span class="line">ENV TZ&#x3D;Asia&#x2F;Shanghai</span><br><span class="line">RUN ln -snf &#x2F;usr&#x2F;share&#x2F;zoneinfo&#x2F;$TZ &#x2F;etc&#x2F;localtime &amp;&amp; echo $TZ &gt; &#x2F;etc&#x2F;timezone</span><br><span class="line"></span><br><span class="line">WORKDIR &#x2F;gitbook</span><br><span class="line">COPY xxx_deploy &#x2F;gitbook</span><br><span class="line"></span><br><span class="line">RUN npm install gitbook-cli -g &amp;&amp; gitbook fetch $&#123;VERSION&#125; &amp;&amp; npm cache clear --force &amp;&amp; rm -rf &#x2F;tmp&#x2F;*</span><br><span class="line">RUN gitbook build</span><br><span class="line"></span><br><span class="line">CMD [&quot;gitbook&quot;, &quot;serve&quot;,&quot;--port&quot;,&quot;4000&quot;]</span><br></pre></td></tr></table></figure><h3 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h3><h4 id="windows更新报错"><a href="#windows更新报错" class="headerlink" title="windows更新报错"></a>windows更新报错</h4><p>gitbook的新版本，在windows下有个bug，当文件内容发生更新时，gitbook报错然后退出：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Error: EPERM: operation not permitted, open</span><br></pre></td></tr></table></figure><p>gitbook 官方已有bug，存在半年了，一直没有fix：</p><ul><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0dpdGJvb2tJTy9naXRib29rL2lzc3Vlcy8xMzc5">git serve can&#39;t restart when file changes<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0dpdGJvb2tJTy9naXRib29rLWNsaS9pc3N1ZXMvNTE=">gitbook-cli crashes with EPERM: operation not permitted on windows<i class="fa fa-external-link-alt"></i></span></li></ul><p><strong>解决方法</strong></p><p>在官方bugfix之前，暂时只能回避：</p><ol><li><p>不要在 windows 下使用gitbook：linux没有这个问题</p></li><li><p>不是办法的办法：</p><p>新建一个 <code>run.bat</code> ，内容如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@Echo off</span><br><span class="line">:Start</span><br><span class="line">call gitbook serve</span><br><span class="line">goto Start</span><br></pre></td></tr></table></figure><p>每次崩溃之后立即重新启动一次，凑合着用吧。</p></li></ol><h4 id="底部链接修改与隐藏"><a href="#底部链接修改与隐藏" class="headerlink" title="底部链接修改与隐藏"></a>底部链接修改与隐藏</h4><p>用 GitBook 生成的网页中，在左侧目录下方默认有一个 Published with GitBook 连接，可以将这个连接去掉，或者替换成其它连接。</p><p>在 GitBook 站点目录创建 <code>_layouts-&gt;website-&gt;summary.html</code></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;% macro articles(_articles) %&#125;</span><br><span class="line">    &#123;% for article in _articles %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;chapter &#123;% if article.path == file.path and not article.anchor %&#125;active&#123;% endif %&#125;&quot;</span> <span class="attr">data-level</span>=<span class="string">&quot;&#123;&#123; article.level &#125;&#125;&quot;</span> &#123;% <span class="attr">if</span> <span class="attr">article.path</span> %&#125;<span class="attr">data-path</span>=<span class="string">&quot;&#123;&#123; article.path|resolveFile &#125;&#125;&quot;</span>&#123;% <span class="attr">endif</span> %&#125;&gt;</span></span><br><span class="line">            &#123;% if article.path and getPageByPath(article.path) %&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; article.path|resolveFile &#125;&#125;&#123;&#123; article.anchor &#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">            &#123;% elif article.url %&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; article.url &#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">            &#123;% else %&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">            &#123;% endif %&#125;</span><br><span class="line">                    &#123;% if article.level != &quot;0&quot; and config.pluginsConfig[&#x27;theme-default&#x27;].showLevel %&#125;</span><br><span class="line">                        <span class="tag">&lt;<span class="name">b</span>&gt;</span>&#123;&#123; article.level &#125;&#125;.<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">                    &#123;% endif %&#125;</span><br><span class="line">                    &#123;&#123; article.title &#125;&#125;</span><br><span class="line">            &#123;% if article.path  or article.url %&#125;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            &#123;% else %&#125;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            &#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">            &#123;% if article.articles.length &gt; 0 %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;articles&quot;</span>&gt;</span></span><br><span class="line">                &#123;&#123; articles(article.articles, file, config) &#125;&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">            &#123;% endif %&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">&#123;% endmacro %&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;summary&quot;</span>&gt;</span></span><br><span class="line">    &#123;% set _divider = false %&#125;</span><br><span class="line">    &#123;% if config.links.sidebar  %&#125;</span><br><span class="line">    &#123;% for linkTitle, link in config.links.sidebar  %&#125;</span><br><span class="line">        &#123;% set _divider = true %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; link &#125;&#125;&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">class</span>=<span class="string">&quot;custom-link&quot;</span>&gt;</span>&#123;&#123; linkTitle &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">    &#123;% if _divider %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;divider&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">    &#123;% for part in summary.parts %&#125;</span><br><span class="line">        &#123;% if part.title %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span>&#123;&#123; part.title &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        &#123;% elif not loop.first %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;divider&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line">        &#123;&#123; articles(part.articles, file, config) &#125;&#125;</span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;divider&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--&lt;li&gt;</span></span><br><span class="line"><span class="comment">        &lt;a href=&quot;https://www.gitbook.com&quot; target=&quot;blank&quot; class=&quot;gitbook-link&quot;&gt;</span></span><br><span class="line"><span class="comment">            &#123;&#123; &quot;GITBOOK_LINK&quot;|t &#125;&#125;</span></span><br><span class="line"><span class="comment">        &lt;/a&gt;</span></span><br><span class="line"><span class="comment">    &lt;/li&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      GitBook 提供了 GitBook Editor ，GitBook cli 这两个工具，一个是编辑文档，一个可以生成文档。只要本地搭建一个Git 服务就完全可以实现本地化了。
    
    </summary>
    
    
      <category term="Blog" scheme="https://jueee.github.io/categories/Blog/"/>
    
    
      <category term="Blog" scheme="https://jueee.github.io/tags/Blog/"/>
    
      <category term="GitBook" scheme="https://jueee.github.io/tags/GitBook/"/>
    
  </entry>
  
  <entry>
    <title>使用 Arthas 热更新 Java 代码</title>
    <link href="https://jueee.github.io/2020-07-16-%E4%BD%BF%E7%94%A8Arthas%E7%83%AD%E6%9B%B4%E6%96%B0Java%E4%BB%A3%E7%A0%81/"/>
    <id>https://jueee.github.io/2020-07-16-%E4%BD%BF%E7%94%A8Arthas%E7%83%AD%E6%9B%B4%E6%96%B0Java%E4%BB%A3%E7%A0%81/</id>
    <published>2020-07-16T00:00:00.000Z</published>
    <updated>2020-08-07T04:27:40.804Z</updated>
    
    <content type="html"><![CDATA[<p>Arthas（阿尔萨斯）是 Alibaba 开源的一款 Java 诊断工具，使用它我们可以监控和排查 Java 程序，然而它还提供了非常实用的 Java 热更新功能。</p><p>所谓的 Java 热更新是指在不重启项目的情况下实现代码的更新与替换。使用它可以实现不停机更新 Java 程序，尤其是对那些启动非常耗时的 Java 项目来说，更是效果显著。</p><h3 id="Arthas-使用"><a href="#Arthas-使用" class="headerlink" title="Arthas 使用"></a>Arthas 使用</h3><h4 id="Arthas资料"><a href="#Arthas资料" class="headerlink" title="Arthas资料"></a>Arthas资料</h4><p>Github 地址：</p><blockquote><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvYXJ0aGFz"> https://github.com/alibaba/arthas<i class="fa fa-external-link-alt"></i></span></p></blockquote><p>Arthas<br>用户文档：</p><blockquote><p><span class="exturl" data-url="aHR0cHM6Ly9hbGliYWJhLmdpdGh1Yi5pby9hcnRoYXMv">https://alibaba.github.io/arthas/<i class="fa fa-external-link-alt"></i></span></p></blockquote><h4 id="下载-Arthas"><a href="#下载-Arthas" class="headerlink" title="下载 Arthas"></a>下载 Arthas</h4><p>首先，我们先把 Arthas 的 Jar 包下载到本地，它的下载地址是：</p><blockquote><p><span class="exturl" data-url="aHR0cHM6Ly9hbGliYWJhLmdpdGh1Yi5pby9hcnRoYXMvYXJ0aGFzLWJvb3QuamFy">https://alibaba.github.io/arthas/arthas-boot.jar<i class="fa fa-external-link-alt"></i></span></p></blockquote><h4 id="启动-Arthas"><a href="#启动-Arthas" class="headerlink" title="启动 Arthas"></a>启动 Arthas</h4><p>我们只需要使用普通的 jar 包启动命令：<code>java -jar arthas-boot.jar</code> 来启动 Arthas 即可。</p><h4 id="Windows-运行"><a href="#Windows-运行" class="headerlink" title="Windows 运行"></a>Windows 运行</h4><p>Windows 需要以管理员方式运行，bat 脚本如下：</p><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">%<span class="number">1</span> mshta vbscript:CreateObject(&quot;Shell.Application&quot;).ShellExecute(&quot;<span class="built_in">cmd</span>.exe&quot;,&quot;/c %~s0 ::&quot;,&quot;&quot;,&quot;runas&quot;,<span class="number">1</span>)(window.close)&amp;&amp;<span class="keyword">exit</span></span><br><span class="line"><span class="built_in">cd</span> /d &quot;%~dp0&quot;</span><br><span class="line">java -jar arthas-boot.jar</span><br></pre></td></tr></table></figure><h3 id="热更新-Java-代码"><a href="#热更新-Java-代码" class="headerlink" title="热更新 Java 代码"></a>热更新 Java 代码</h3><p>假如我们原来的代码是这样的：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> sample.redefine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedefineSuccess</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">            printFlag();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printFlag</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;flag is true.&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;flag is false.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们现在想要把 <code>flag</code> 变量改为 <code>false</code> 就可以这样来做：</p><ol><li>使用 Arthas 的内存编译工具将新的 Java 代码编译为字节码；</li><li>使用 Arthas 的 <code>redefine</code> 命令实现热更新。</li></ol><h4 id="编译字节码"><a href="#编译字节码" class="headerlink" title="编译字节码"></a>编译字节码</h4><p>首先，我们需要将新的 Java 代码编译为字节码，我们可以通过 Arthas 提供的 <code>mc</code> 命令实现，<code>mc</code> 是 Memory Compiler（内存编译器）的缩写。</p><p>实现示例如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[arthas@<span class="number">10200</span>]$ mc C:/arthas-demo/src/main/java/sample/redefine/RedefineSuccess.java -d  E:</span><br><span class="line">Memory compiler output:</span><br><span class="line">E:\sample\redefine\RedefineSuccess.class</span><br><span class="line">Affect(row-cnt:<span class="number">1</span>) cost in <span class="number">500</span> ms.</span><br></pre></td></tr></table></figure><p>其中 <code>-d</code> 表示编译文件的存放位置。</p><blockquote><p>小贴士：我们也可以使用 javac App.java 生成的字节码，它与此步骤执行的结果相同。</p></blockquote><h4 id="执行热更新"><a href="#执行热更新" class="headerlink" title="执行热更新"></a>执行热更新</h4><p>有了字节码文件之后，我们就可以使用 <code>redefine</code> 命令来实现热更新了，实现示例如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[arthas@10200]$ redefine e:&#x2F;sample&#x2F;redefine&#x2F;RedefineSuccess.class</span><br><span class="line">redefine success, size: 1</span><br></pre></td></tr></table></figure><p>从上述结果可以看出，热更新执行成功，此时我们去控制台查看执行结果，如下图所示：</p><p><img src="/images/2020/07/1594883244673.png" alt="1594883244673" loading="lazy"></p><p>这说明热更新执行确实成功了。</p><h3 id="结合-jad-mc-命令使用"><a href="#结合-jad-mc-命令使用" class="headerlink" title="结合 jad/mc 命令使用"></a>结合 jad/mc 命令使用</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jad --source-only com.example.demo.arthas.user.UserController &gt; &#x2F;tmp&#x2F;UserController.java</span><br><span class="line">mc &#x2F;tmp&#x2F;UserController.java -d &#x2F;tmp</span><br><span class="line">redefine &#x2F;tmp&#x2F;com&#x2F;example&#x2F;demo&#x2F;arthas&#x2F;user&#x2F;UserController.class</span><br></pre></td></tr></table></figure><ul><li>jad命令反编译，然后可以用其它编译器，比如vim来修改源码</li><li>mc命令来内存编译修改过的代码</li><li>用redefine命令加载新的字节码</li></ul><h3 id="热更新注意事项"><a href="#热更新注意事项" class="headerlink" title="热更新注意事项"></a>热更新注意事项</h3><h4 id="redefine-特别说明"><a href="#redefine-特别说明" class="headerlink" title="redefine 特别说明"></a>redefine 特别说明</h4><p><code>redefine</code>命令和<code>jad</code>/<code>watch</code>/<code>trace</code>/<code>monitor</code>/<code>tt</code>等命令会冲突。</p><p>执行完<code>redefine</code>之后，如果再执行上面提到的命令，则会把<code>redefine</code>的字节码重置。 </p><p>原因是jdk本身redefine和Retransform是不同的机制，同时使用两种机制来更新字节码，只有最后修改的会生效。</p><h4 id="条件限制"><a href="#条件限制" class="headerlink" title="条件限制"></a>条件限制</h4><p>使用热更新功能有一些条件限制，我们只能用它来修改方法内部的一些业务代码，如果我们出现了以下任意一种情况，那么热更新就会执行失败：</p><ol><li>增加类属性（类字段）；</li><li>增加或删除方法；</li><li>替换正在运行的方法。</li></ol><p>最后一条我们需要单独说明一下，假如我们把上面的示例改为如下代码：</p> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> sample.redefine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedefineError</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">            <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;flag is true.&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;flag is false.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>那么此时我们再进行热更新操作修改 <code>flag</code> 的值，那么就会执行失败，因为我们替换的是正在运行中的方法，而我们正常示例中的代码之所以能成功，是因为我们在 <code>while</code> 无线循环中调用了另一个方法，而那个方法是被间歇性使用的，因此可以替换成功。</p>]]></content>
    
    <summary type="html">
    
      所谓的 Java 热更新是指在不重启项目的情况下实现代码的更新与替换。使用它可以实现不停机更新 Java 程序，尤其是对那些启动非常耗时的 Java 项目来说，更是效果显著。
    
    </summary>
    
    
      <category term="Java" scheme="https://jueee.github.io/categories/Java/"/>
    
      <category term="Java诊断" scheme="https://jueee.github.io/categories/Java/Java%E8%AF%8A%E6%96%AD/"/>
    
    
      <category term="Java诊断" scheme="https://jueee.github.io/tags/Java%E8%AF%8A%E6%96%AD/"/>
    
      <category term="Arthas" scheme="https://jueee.github.io/tags/Arthas/"/>
    
  </entry>
  
  <entry>
    <title>使用LFTP进行SFTP文件上传与下载</title>
    <link href="https://jueee.github.io/2020-07-14-%E4%BD%BF%E7%94%A8LFTP%E8%BF%9B%E8%A1%8CSFTP%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%B8%8E%E4%B8%8B%E8%BD%BD/"/>
    <id>https://jueee.github.io/2020-07-14-%E4%BD%BF%E7%94%A8LFTP%E8%BF%9B%E8%A1%8CSFTP%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%B8%8E%E4%B8%8B%E8%BD%BD/</id>
    <published>2020-07-14T00:00:00.000Z</published>
    <updated>2020-08-07T03:13:34.381Z</updated>
    
    <content type="html"><![CDATA[<h3 id="工具介绍"><a href="#工具介绍" class="headerlink" title="工具介绍"></a>工具介绍</h3><p>LFTP 是一款非常著名的字符界面的文件传输工具。支持FTP、HTTP、FISH、SFTP、HTTPS和FTPS协议。</p><h3 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt-cache search lftp</span><br><span class="line">apt-get install lftp -y</span><br></pre></td></tr></table></figure><h3 id="lftp-的使用"><a href="#lftp-的使用" class="headerlink" title="lftp 的使用"></a>lftp 的使用</h3><h4 id="使用语法"><a href="#使用语法" class="headerlink" title="使用语法"></a>使用语法</h4><ul><li><code>lftp -[fceup] user:passwd@host</code>：passwd可选,此方式密码明文保存,history可查看 </li><li><code>-f &lt;file&gt;</code>：执行文件中的命令后退出</li><li><code>-c &lt;cmd&gt;</code>：执行命令后退出 </li><li><code>-e &lt;cmd&gt;</code>：登录后后执行命令 </li><li><code>-u &lt;user&gt;[,&lt;pass&gt;]</code>：使用指定的用户名/口令进行验证 </li><li><code>-p &lt;port&gt;</code>：连接指定的端口，默认21</li></ul><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><ul><li><code>cd</code>：切换FTP目录 </li><li><code>lcd</code>：切换本地目录</li><li><code>ls</code>：列出FTP目录文件</li><li><code>!ls</code>：列出本地目录文件 </li><li><code>find ./ -name file</code>：查找文件</li><li><code>mv</code>：移动</li><li><code>rm</code>：删除</li><li><code>mkdir</code>：新建目录</li><li><code>rmdir</code>：删除目录</li></ul><h4 id="上传下载文件"><a href="#上传下载文件" class="headerlink" title="上传下载文件"></a>上传下载文件</h4><ul><li><p><code>get [cEaO] file -o newfilename</code>：下载文件</p></li><li><p><code>put [cEaO] file -o newfilename</code>：上传文件</p></li><li><p><code>pget -n</code>：多线程下载</p><p>可选参数：</p><ul><li><code>-c</code>：支持断点续传 </li><li><code>-E</code>：下载后删除远端文件</li><li><code>-a</code>：指定传输为ascii模式, 默认为二进制模式 </li><li><code>-O</code>：指定存放目录</li></ul></li></ul><h4 id="上传下载目录"><a href="#上传下载目录" class="headerlink" title="上传下载目录"></a>上传下载目录</h4><ul><li><p><code>mirror [cRnr] remote [local]</code> </p><p>可选参数： </p><ul><li><code>-c</code>：支持断点续传 </li><li><code>-R</code>：上传整个目录 </li><li><code>-n</code>：只下载较新的档案，可用于增量备份 </li><li><code>-r</code>：只下载当前目录，不递归目录</li></ul></li></ul><h4 id="书签管理"><a href="#书签管理" class="headerlink" title="书签管理"></a>书签管理</h4><ul><li><code>bookmark add name</code>：保存当前连接为书签名字name，下次打开可直接使用lftp name</li><li><code>bookmark del name</code>：删除书签</li><li><code>bookmark list</code>：显示书签列表</li><li><code>bookmark edit</code>：编辑书签</li></ul><h4 id="编码设置"><a href="#编码设置" class="headerlink" title="编码设置"></a>编码设置</h4><ul><li><code>set ftp:charset &quot;gbk&quot;</code> </li><li><code>set file:charset &quot;UTF-8&quot;</code> </li><li>或加入配置文件<code>.lftp/rc</code></li></ul><h4 id="主动-被动模式"><a href="#主动-被动模式" class="headerlink" title="主动/被动模式"></a>主动/被动模式</h4><p>默认为被动模式 。</p><p><code>set ftp:passive-mode no</code>：关闭被动模式转为主动模式</p><p>主动客户端开启数据传输端口，被动服务端开启数据传输端口。</p><h3 id="Shell脚本"><a href="#Shell脚本" class="headerlink" title="Shell脚本"></a>Shell脚本</h3><h4 id="批量上传"><a href="#批量上传" class="headerlink" title="批量上传"></a>批量上传</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">SFTP配置信息</span></span><br><span class="line"><span class="meta">#</span><span class="bash">用户名</span></span><br><span class="line">USER=root</span><br><span class="line"><span class="meta">#</span><span class="bash">密码</span></span><br><span class="line">PASSWORD=5EYS40T04BMF</span><br><span class="line"><span class="meta">#</span><span class="bash">待上传文件根目录</span></span><br><span class="line">SRCDIR=/u02/dab/sftpFiles</span><br><span class="line"><span class="meta">#</span><span class="bash">FTP目录</span></span><br><span class="line">DESDIR=/u01/sftpFiles</span><br><span class="line"><span class="meta">#</span><span class="bash">IP</span></span><br><span class="line">IP=192.168.10.11</span><br><span class="line"><span class="meta">#</span><span class="bash">端口</span></span><br><span class="line">PORT=22022</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">获取文件</span></span><br><span class="line">cd $&#123;SRCDIR&#125; ;</span><br><span class="line"><span class="meta">#</span><span class="bash">目录下的所有文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash">FILES=`ls` </span></span><br><span class="line"><span class="meta">#</span><span class="bash">修改时间在执行时间五分钟之前的xml文件</span></span><br><span class="line">FILES=`find $&#123;SRCDIR&#125; -mmin -50 -name &#x27;*.xml&#x27;`</span><br><span class="line"></span><br><span class="line">for FILE in $&#123;FILES&#125;</span><br><span class="line">do</span><br><span class="line">    echo $&#123;FILE&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash">发送文件 (关键部分）  复制出来，如有结尾有空格，请自行去掉</span></span><br><span class="line">lftp -u $&#123;USER&#125;,$&#123;PASSWORD&#125; sftp://$&#123;IP&#125;:$&#123;PORT&#125; &lt;&lt;EOF</span><br><span class="line">cd $&#123;DESDIR&#125;/</span><br><span class="line">lcd $&#123;SRCDIR&#125;</span><br><span class="line">put $&#123;FILE&#125;</span><br><span class="line">by</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">done</span><br></pre></td></tr></table></figure><h4 id="单文件下载"><a href="#单文件下载" class="headerlink" title="单文件下载"></a>单文件下载</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">USER=root</span><br><span class="line"><span class="meta">#</span><span class="bash">密码</span></span><br><span class="line">PASSWORD=5EYS40T04BMF</span><br><span class="line"><span class="meta">#</span><span class="bash">下载文件目录</span></span><br><span class="line">SRCDIR=/u02/dab</span><br><span class="line"><span class="meta">#</span><span class="bash">FTP目录(待下载文件目录)</span></span><br><span class="line">DESDIR=/u01/sftpFiles</span><br><span class="line"><span class="meta">#</span><span class="bash">银联IP</span></span><br><span class="line">IP=192.168.1.10</span><br><span class="line"><span class="meta">#</span><span class="bash">端口</span></span><br><span class="line">PORT=22022</span><br><span class="line"></span><br><span class="line">lftp -u $&#123;USER&#125;,$&#123;PASSWORD&#125; sftp://$&#123;IP&#125;:$&#123;PORT&#125;&lt;&lt;EOF</span><br><span class="line">cd $&#123;DESDIR&#125;</span><br><span class="line">lcd $&#123;SRCDIR&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash">需要下载的文件为text.xml</span></span><br><span class="line">get text.xml</span><br><span class="line">by</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      LFTP 是一款非常著名的字符界面的文件传输工具。支持FTP、HTTP、FISH、SFTP、HTTPS和FTPS协议。
    
    </summary>
    
    
      <category term="Linux" scheme="https://jueee.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://jueee.github.io/tags/Linux/"/>
    
      <category term="工具" scheme="https://jueee.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>使用不蒜子增加Jekyll博客访问量统计</title>
    <link href="https://jueee.github.io/2020-07-09-%E4%BD%BF%E7%94%A8%E4%B8%8D%E8%92%9C%E5%AD%90%E5%A2%9E%E5%8A%A0Jekyll%E5%8D%9A%E5%AE%A2%E8%AE%BF%E9%97%AE%E9%87%8F%E7%BB%9F%E8%AE%A1/"/>
    <id>https://jueee.github.io/2020-07-09-%E4%BD%BF%E7%94%A8%E4%B8%8D%E8%92%9C%E5%AD%90%E5%A2%9E%E5%8A%A0Jekyll%E5%8D%9A%E5%AE%A2%E8%AE%BF%E9%97%AE%E9%87%8F%E7%BB%9F%E8%AE%A1/</id>
    <published>2020-07-09T00:00:00.000Z</published>
    <updated>2020-08-07T02:01:19.226Z</updated>
    
    <content type="html"><![CDATA[<p>“不蒜子”是一款极简的网页计数器，可以很方便的统计博客的总访问量和访问次数。</p><p>“不蒜子”与百度统计谷歌分析等有区别：“不蒜子”可直接将访问次数显示在您在网页上（也可不显示）；对于已经上线一段时间的网站，“不蒜子”允许您初始化首次数据。</p><h3 id="不蒜子"><a href="#不蒜子" class="headerlink" title="不蒜子"></a>不蒜子</h3><p>官网介绍</p><blockquote><p><span class="exturl" data-url="aHR0cDovL2J1c3VhbnppLmlicnVjZS5pbmZvLw==">http://busuanzi.ibruce.info/<i class="fa fa-external-link-alt"></i></span></p></blockquote><p>两行代码 搞定计数</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">&quot;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;busuanzi_container_site_pv&quot;</span>&gt;</span></span><br><span class="line">    本站总访问量<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;busuanzi_value_site_pv&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>次</span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="安装标签"><a href="#安装标签" class="headerlink" title="安装标签"></a>安装标签</h3><p>只需要复制相应的html标签到你的网站要显示访问量的位置即可。</p><p>您可以随意更改不蒜子标签为自己喜欢的显示效果，内容参考第三部分<strong>扩展开发</strong>。</p><p>根据你要显示内容的不同，这分几种情况。</p><h4 id="显示站点总访问量"><a href="#显示站点总访问量" class="headerlink" title="显示站点总访问量"></a>显示站点总访问量</h4><p>要显示站点总访问量，复制以下代码添加到你需要显示的位置。</p><p>有两种算法可选：</p><p>算法a：pv的方式，单个用户连续点击n篇文章，记录n次访问量。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;busuanzi_container_site_pv&quot;</span>&gt;</span>    </span><br><span class="line">    本站总访问量<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;busuanzi_value_site_pv&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>次</span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p>算法b：uv的方式，单个用户连续点击n篇文章，只记录1次访客数。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;busuanzi_container_site_uv&quot;</span>&gt;</span>  </span><br><span class="line">    本站访客数<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;busuanzi_value_site_uv&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>人次</span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="显示单页面访问量"><a href="#显示单页面访问量" class="headerlink" title="显示单页面访问量"></a>显示单页面访问量</h4><p>要显示每篇文章的访问量，复制以下代码添加到你需要显示的位置。</p><p>算法：pv的方式，单个用户点击1篇文章，本篇文章记录1次阅读量。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;busuanzi_container_page_pv&quot;</span>&gt;</span>  </span><br><span class="line">    本文总阅读量<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;busuanzi_value_page_pv&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>次</span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="扩展开发"><a href="#扩展开发" class="headerlink" title="扩展开发"></a>扩展开发</h3><p>不蒜子之所以称为极客的算子，正是因为不蒜子自身只提供标签+数字，至于显示的style和css动画效果，任你发挥。</p><p><code>busuanzi_value_site_pv</code> 的作用是异步回填访问数，这个id一定要正确。</p><p><code>busuanzi_container_site_pv</code>的作用是为防止计数服务访问出错或超时（3秒）的情况下，使整个标签自动隐藏显示，带来更好的体验。这个id可以省略。</p><p>因此，你也可以使用极简模式：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">本站总访问量<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;busuanzi_value_site_pv&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>次</span><br><span class="line">本站访客数<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;busuanzi_value_site_uv&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>人次</span><br><span class="line">本文总阅读量<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;busuanzi_value_page_pv&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>次</span><br></pre></td></tr></table></figure><p>或者个性化一下：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Total <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;busuanzi_value_site_pv&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> views.</span><br><span class="line">您是xxx的第<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;busuanzi_value_site_uv&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>个小伙伴</span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;busuanzi_value_page_pv&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> Hits</span><br></pre></td></tr></table></figure><h3 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h3><ol><li><p>我只要统计不显示？</p><p>只引入busuanzi.js，不引入显示标签即可。</p></li><li><p>你的标签太丑了，我想美化一下可以么？</p><p>可以的，您可以用自己站点的css进行控制，只要内层span的id正确以便回填访问次数即可，甚至标签都可以不是span。</p></li><li><p>中文字体太丑了，我的主题不适合？</p><p>您可以将本站总访问量xxx次改成view xxx times等英文以获得更和谐的显示效果。</p></li><li><p>在访问量数据未取回来之前，我不想让页面显示为诸如“本站总访问量 次”，显得太low，怎么办？</p><p>只需要如下css，不蒜子执行完毕会自动将标签显示出来，其他以此类推：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;busuanzi_container_site_pv&quot;</span> <span class="attr">style</span>=<span class="string">&#x27;display:none&#x27;</span>&gt;</span></span><br><span class="line">    本站总访问量<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;busuanzi_value_site_pv&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>次</span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p>   上面的做法还是很low？！可以在没加载出来前就显示个菊花转转转:<br>   首先，你要引入font-awesome字体：</p>   <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;//maxcdn.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.min.css&quot;</span>&gt;</span></span><br><span class="line">或</span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;//cdn.bootcss.com/font-awesome/4.3.0/css/font-awesome.min.css&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>   其次，修改不蒜子标签：</p>   <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;busuanzi_value_page_pv&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-spinner&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> Hits</span><br><span class="line">或（旋转效果）</span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;busuanzi_value_page_pv&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-spinner fa-spin&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> Hits</span><br></pre></td></tr></table></figure><p>   和谐多了！</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><span class="exturl" data-url="aHR0cDovL2licnVjZS5pbmZvLzIwMTUvMDQvMDQvYnVzdWFuemkv">http://ibruce.info/2015/04/04/busuanzi/<i class="fa fa-external-link-alt"></i></span></li></ul>]]></content>
    
    <summary type="html">
    
      “不蒜子”是一款极简的网页计数器，可以很方便的统计博客的总访问量和访问次数。
    
    </summary>
    
    
      <category term="Blog" scheme="https://jueee.github.io/categories/Blog/"/>
    
    
      <category term="Blog" scheme="https://jueee.github.io/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>网页粒子背景插件canvas-nest.js</title>
    <link href="https://jueee.github.io/2020-07-10-%E7%BD%91%E9%A1%B5%E7%B2%92%E5%AD%90%E8%83%8C%E6%99%AF%E6%8F%92%E4%BB%B6canvas-nest.js/"/>
    <id>https://jueee.github.io/2020-07-10-%E7%BD%91%E9%A1%B5%E7%B2%92%E5%AD%90%E8%83%8C%E6%99%AF%E6%8F%92%E4%BB%B6canvas-nest.js/</id>
    <published>2020-07-09T00:00:00.000Z</published>
    <updated>2020-08-07T03:13:18.527Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Canvas-nest.js是一个非常好看的网页粒子背景插件，不需要依赖任何第三方库即可运行，提供额非常炫酷的背景。</strong></p><h3 id="Canvas-nest-js"><a href="#Canvas-nest-js" class="headerlink" title="Canvas-nest.js"></a>Canvas-nest.js</h3><p>官网介绍</p><blockquote><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2h1c3RjYy9jYW52YXMtbmVzdC5qcw==">https://github.com/hustcc/canvas-nest.js<i class="fa fa-external-link-alt"></i></span></p></blockquote><h4 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h4><ul><li>它不依赖jQuery，并且使用原始的 javascrpit。</li><li>体积小巧，只有 2 Kb。</li><li>易于实现，配置简单。</li><li>您不必是Web开发人员即可使用它。</li><li>使用区域渲染进行模块化。</li></ul><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>使用非常简单，将下面的代码插入到 <code>&lt;body&gt;</code> 和 <code>&lt;/body&gt;</code> 之间就行了。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">color</span>=<span class="string">&quot;#34495e&quot;</span> <span class="attr">opacity</span>=<span class="string">&#x27;0.5&#x27;</span> <span class="attr">zIndex</span>=<span class="string">&quot;-2&quot;</span> <span class="attr">count</span>=<span class="string">&quot;99&quot;</span> <span class="attr">src</span>=<span class="string">&quot;canvas-nest.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="组态"><a href="#组态" class="headerlink" title="组态"></a>组态</h4><ul><li><strong>color</strong>：线条颜色，默认值：<code>&#39;0,0,0&#39;</code>；RGB值：（R，G，B）。（注意：使用&#39;，&#39;分隔。）</li><li><strong>pointColor</strong>：点的颜色，默认值：<code>&#39;0,0,0&#39;</code>；RGB值：（R，G，B）。（注意：使用&#39;，&#39;分隔。）</li><li><strong>opacity</strong>：线的不透明度（0〜1），默认值：<code>0.5</code>。</li><li><strong>count</strong>：线条数量，默认值：<code>99</code>。</li><li><strong>zIndex</strong>：背景的 z-index 属性，默认值：<code>-1</code>。</li></ul>]]></content>
    
    <summary type="html">
    
      Canvas-nest.js是一个非常好看的网页粒子背景插件，不需要依赖任何第三方库即可运行，提供额非常炫酷的背景。
    
    </summary>
    
    
      <category term="Blog" scheme="https://jueee.github.io/categories/Blog/"/>
    
    
      <category term="Blog" scheme="https://jueee.github.io/tags/Blog/"/>
    
      <category term="HTML" scheme="https://jueee.github.io/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>博客添加 Fork me on GitHub</title>
    <link href="https://jueee.github.io/2020-07-16-%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0Fork%20me%20on%20GitHub/"/>
    <id>https://jueee.github.io/2020-07-16-%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0Fork%20me%20on%20GitHub/</id>
    <published>2020-07-09T00:00:00.000Z</published>
    <updated>2020-08-07T03:13:58.168Z</updated>
    
    <content type="html"><![CDATA[<p><strong>在网上浏览博客时经常看到页面的右上角或左上角有一个fork me on github的按钮，本文将介绍如何实现。</strong></p><h3 id="Fork-me-on-GitHub"><a href="#Fork-me-on-GitHub" class="headerlink" title="Fork me on GitHub"></a>Fork me on GitHub</h3><p>GitHub 获取 css 文件：</p><blockquote><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NpbW9ud2hpdGFrZXIvZ2l0aHViLWZvcmstcmliYm9uLWNzcy8=">https://github.com/simonwhitaker/github-fork-ribbon-css/<i class="fa fa-external-link-alt"></i></span></p></blockquote><p>效果演示：</p><blockquote><p><span class="exturl" data-url="aHR0cHM6Ly9zaW1vbndoaXRha2VyLmdpdGh1Yi5pby9naXRodWItZm9yay1yaWJib24tY3NzLw==">https://simonwhitaker.github.io/github-fork-ribbon-css/<i class="fa fa-external-link-alt"></i></span></p></blockquote><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>将以下代码复制到<code>&lt;head&gt;</code>页面的中，引入 css：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;https:&#x2F;&#x2F;cdnjs.cloudflare.com&#x2F;ajax&#x2F;libs&#x2F;github-fork-ribbon-css&#x2F;0.2.3&#x2F;gh-fork-ribbon.min.css&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure><p>使用非常简单，将下面的代码插入到 <code>&lt;body&gt;</code> 和 <code>&lt;/body&gt;</code> 之间就行了。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;github-fork-ribbon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://github.com/Jueee&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> </span></span><br><span class="line"><span class="tag">       <span class="attr">data-ribbon</span>=<span class="string">&quot;Fork me on GitHub&quot;</span> <span class="attr">title</span>=<span class="string">&quot;Fork me on GitHub&quot;</span>&gt;</span></span><br><span class="line">    Fork me on GitHub</span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>默认是在页面右上角。</p><h3 id="其他样式"><a href="#其他样式" class="headerlink" title="其他样式"></a>其他样式</h3><ul><li><p>固定标签：<code>class=&quot;github-fork-ribbon fixed&quot;</code></p></li><li><p>更换位置：</p><ul><li>右上角：<code>class=&quot;github-fork-ribbon right-top&quot;</code></li><li>右下角：<code>class=&quot;github-fork-ribbon right-bottom&quot;</code></li><li>左上角：<code>class=&quot;github-fork-ribbon left-top&quot;</code></li><li>左下角：<code>class=&quot;github-fork-ribbon left-bottom fixed&quot;</code></li></ul></li><li><p>更换背景颜色：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.github-fork-ribbon</span><span class="selector-class">.left-bottom</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="小屏幕不显示"><a href="#小屏幕不显示" class="headerlink" title="小屏幕不显示"></a>小屏幕不显示</h3><p>按照上面的步骤当屏幕缩小后还会显示fork me on github图标，但这不是我想要的，如果希望在大屏下显示，小屏后就不显示了。方法如下：</p><p>新增样式：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.forkme</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width:</span> <span class="number">1350px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.forkme</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: inline;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码块上套上div加上class就行了，如下：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;forkme&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;github-fork-ribbon fixed&quot;</span>    <span class="attr">href</span>=<span class="string">&quot;https://github.com/Jueee&quot;</span> &gt;</span></span><br><span class="line">        Fork me on GitHub</span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      在网上浏览博客时经常看到页面的右上角或左上角有一个fork me on github的按钮，本文将介绍如何实现。
    
    </summary>
    
    
      <category term="Blog" scheme="https://jueee.github.io/categories/Blog/"/>
    
    
      <category term="Blog" scheme="https://jueee.github.io/tags/Blog/"/>
    
      <category term="HTML" scheme="https://jueee.github.io/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>jekyll使用中文路径</title>
    <link href="https://jueee.github.io/2020-07-08-jekyll%E4%BD%BF%E7%94%A8%E4%B8%AD%E6%96%87%E8%B7%AF%E5%BE%84/"/>
    <id>https://jueee.github.io/2020-07-08-jekyll%E4%BD%BF%E7%94%A8%E4%B8%AD%E6%96%87%E8%B7%AF%E5%BE%84/</id>
    <published>2020-07-08T00:00:00.000Z</published>
    <updated>2020-08-07T03:12:56.685Z</updated>
    
    <content type="html"><![CDATA[<h2 id="出现问题"><a href="#出现问题" class="headerlink" title="出现问题"></a>出现问题</h2><p>在使用 jekyll 在本地预览自己写的博客无法正常打开，而提交到 github 上却可以正常解析。</p><p>看了一下，发现原来是因为博客的markdown文件使用了中文文件名，jekyll 无法正常解析出现乱码。</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>修改 安装目录 <code>Ruby26-x64\lib\ruby\2.6.0\webrick\httpservlet</code> 下的 <code>filehandler.rb</code> 文件，建议先备份。</p><p>找到下列两处，添加一句（+的一行为添加部分）</p><p>第285行： </p><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">path = req.path_info.dup.force_encoding(Encoding.find(<span class="string">&quot;filesystem&quot;</span>))</span><br><span class="line">+ path.force_encoding(<span class="string">&quot;UTF-8&quot;</span>) <span class="comment"># 加入编码</span></span><br><span class="line"><span class="keyword">if</span> trailing_pathsep?(req.path_info)       </span><br></pre></td></tr></table></figure><p>第333行：</p><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="keyword">break</span> <span class="keyword">if</span> base == <span class="string">&quot;/&quot;</span></span><br><span class="line">+ base.force_encoding(<span class="string">&quot;UTF-8&quot;</span>) <span class="comment">#加入編碼</span></span><br><span class="line"><span class="keyword">break</span> <span class="keyword">unless</span> File.directory?(File.expand_path(res.filename + base))  </span><br></pre></td></tr></table></figure><p>修改完重新 jekyll serve 即可支持中文文件名。</p>]]></content>
    
    <summary type="html">
    
      在使用 jekyll 在本地预览自己写的中文文件名博客无法正常打开，如何解决？
    
    </summary>
    
    
      <category term="Blog" scheme="https://jueee.github.io/categories/Blog/"/>
    
    
      <category term="Ruby" scheme="https://jueee.github.io/tags/Ruby/"/>
    
      <category term="Blog" scheme="https://jueee.github.io/tags/Blog/"/>
    
      <category term="jekyll" scheme="https://jueee.github.io/tags/jekyll/"/>
    
  </entry>
  
  <entry>
    <title>使用rinetd实现端口转发重定向</title>
    <link href="https://jueee.github.io/2020-07-07-%E4%BD%BF%E7%94%A8rinetd%E5%AE%9E%E7%8E%B0%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91%E9%87%8D%E5%AE%9A%E5%90%91/"/>
    <id>https://jueee.github.io/2020-07-07-%E4%BD%BF%E7%94%A8rinetd%E5%AE%9E%E7%8E%B0%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91%E9%87%8D%E5%AE%9A%E5%90%91/</id>
    <published>2020-07-07T00:00:00.000Z</published>
    <updated>2020-08-07T03:12:42.290Z</updated>
    
    <content type="html"><![CDATA[<h3 id="工具介绍"><a href="#工具介绍" class="headerlink" title="工具介绍"></a>工具介绍</h3><p>linux下简单好用的工具rinetd，实现端口映射/转发/重定向。</p><p>用于有效地将连接从一个 IP 地址/端口组合重定向到另一 IP 地址/端口组合。在操作虚拟服务器、防火墙等时很有用。</p><p>Rinetd是单一过程的服务器，它处理任何数量的连接到在配置文件etc/rinetd中指定的地址/端口对。尽管rinetd使用非闭锁I/O运行作为一个单一过程，它可能重定向很多连接而不对这台机器增加额外的负担。</p><p>官网地址：<span class="exturl" data-url="aHR0cDovL3d3dy5ib3V0ZWxsLmNvbS9yaW5ldGQ=">http://www.boutell.com/rinetd<i class="fa fa-external-link-alt"></i></span></p><h3 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h3><h4 id="方法一：压缩包"><a href="#方法一：压缩包" class="headerlink" title="方法一：压缩包"></a>方法一：压缩包</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget http://www.boutell.com/rinetd/http/rinetd.tar.gz</span><br><span class="line">tar zxvf rinetd.tar.gz</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><h4 id="方法二：apt-get"><a href="#方法二：apt-get" class="headerlink" title="方法二：apt-get"></a>方法二：apt-get</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt-cache search rinetd</span><br><span class="line">apt-get install rinetd -y</span><br></pre></td></tr></table></figure><h3 id="软件配置"><a href="#软件配置" class="headerlink" title="软件配置"></a>软件配置</h3><p>配置文件格式：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Source Address] [Source Port] [Destination Address] [Destination Port]</span><br><span class="line">源地址 源端口 目的地址 目的端口</span><br></pre></td></tr></table></figure><p>在每一单独的行中指定每个要转发的端口。源地址和目的地址都可以是主机名或IP地址，IP 地址0.0.0.0将rinetd绑定到任何可用的本地IP地址上。</p><p>例如：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;rinetd.conf</span><br><span class="line">0.0.0.0 8080 172.19.94.3 8080</span><br><span class="line">0.0.0.0 2222 192.168.0.103 3389</span><br><span class="line">1.2.3.4 80     192.168.0.10 80</span><br></pre></td></tr></table></figure><p>说明一下（0.0.0.0表示本机绑定所有可用地址）</p><ul><li>将所有发往本机8080端口的请求转发到172.19.94.3的8080端口</li><li>将所有发往本机2222端口的请求转发到192.168.0.103的3389端口</li><li>将所有发往1.2.3.4的80端口请求转发到192.168.0.10的80端口</li></ul><h3 id="启动程序"><a href="#启动程序" class="headerlink" title="启动程序"></a>启动程序</h3><p>关闭进程</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pkill rinetd</span><br></pre></td></tr></table></figure><p>启动转发</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rinetd -c &#x2F;etc&#x2F;rinetd.conf</span><br></pre></td></tr></table></figure><h3 id="开机启动"><a href="#开机启动" class="headerlink" title="开机启动"></a>开机启动</h3><p>把这条命令加到 <code>/etc/rc.local</code> 里面就可以开机自动运行。</p><h3 id="查看状态"><a href="#查看状态" class="headerlink" title="查看状态"></a>查看状态</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">netstat -antup</span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li><p>rinetd.conf 中绑定的本机端口必须没有被其它程序占用。</p></li><li><p>运行 rinetd 的系统防火墙应该打开绑定的本机端口。</p><p>例如：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-A RH-Firewall-1-INPUT -m state --state NEW -m tcp -p tcp --dport 1111 -jACCEPT</span><br><span class="line">-A RH-Firewall-1-INPUT -m state --state NEW -m tcp -p tcp --dport 2222 -jACCEPT</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      linux下简单好用的工具rinetd，实现端口映射/转发/重定向。用于有效地将连接从一个 IP 地址/端口组合重定向到另一 IP 地址/端口组合。
    
    </summary>
    
    
      <category term="Linux" scheme="https://jueee.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://jueee.github.io/tags/Linux/"/>
    
      <category term="工具" scheme="https://jueee.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>关于toString方法的重写工具ToStringBuilder</title>
    <link href="https://jueee.github.io/2020-07-15-%E5%85%B3%E4%BA%8EtoString%E6%96%B9%E6%B3%95%E7%9A%84%E9%87%8D%E5%86%99%E5%B7%A5%E5%85%B7ToStringBuilder/"/>
    <id>https://jueee.github.io/2020-07-15-%E5%85%B3%E4%BA%8EtoString%E6%96%B9%E6%B3%95%E7%9A%84%E9%87%8D%E5%86%99%E5%B7%A5%E5%85%B7ToStringBuilder/</id>
    <published>2020-07-06T00:00:00.000Z</published>
    <updated>2020-08-07T05:36:13.745Z</updated>
    
    <content type="html"><![CDATA[<p>Apache 的 <code>commons-lang3</code> 的工具包里有一个 <code>ToStringBuilder</code> 类，这样在打日志的时候可以方便的打印出类实例中的各属性的值。</p><h3 id="依赖引入"><a href="#依赖引入" class="headerlink" title="依赖引入"></a>依赖引入</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-lang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="重写-toString"><a href="#重写-toString" class="headerlink" title="重写 toString"></a>重写 toString</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ToStringBuilder.reflectionToString(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印结果参考：</p><blockquote><p>com.zzz.other.City@4eec7777[id=1,name=杭州,province=浙江,country=CN]</p></blockquote><h3 id="ToStringStyle"><a href="#ToStringStyle" class="headerlink" title="ToStringStyle"></a>ToStringStyle</h3><p><code>ToStringBuilder.reflectionToString</code>  默认为 <code>ToStringStyle.DEFAULT_STYLE</code>。</p><p>使用方法：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ToStringBuilder.reflectionToString(this, ToStringStyle.DEFAULT_STYLE);</span><br></pre></td></tr></table></figure><p>ToStringStyle 还有其他样式，可调整 ToStringBuilder 的打印结果：</p><ul><li><p><strong>ToStringStyle.DEFAULT_STYLE</strong>：对象及其属性一行显示</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">com.zzz.other.City@4eec7777[id&#x3D;1,name&#x3D;杭州,province&#x3D;浙江,country&#x3D;CN]</span><br></pre></td></tr></table></figure></li><li><p><strong>ToStringStyle.MULTI_LINE_STYLE</strong>：属性换行显示</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">com.zzz.other.City@4eec7777[</span><br><span class="line">  id&#x3D;1</span><br><span class="line">  name&#x3D;杭州</span><br><span class="line">  province&#x3D;浙江</span><br><span class="line">  country&#x3D;CN</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p><strong>ToStringStyle.NO_FIELD_NAMES_STYLE</strong>：不显示属性名，只显示属性值</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">com.zzz.other.City@4eec7777[1,杭州,浙江,CN]</span><br></pre></td></tr></table></figure></li><li><p><strong>ToStringStyle.SHORT_PREFIX_STYLE</strong>：对象名称简写</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">City[id&#x3D;1,name&#x3D;杭州,province&#x3D;浙江,country&#x3D;CN]</span><br></pre></td></tr></table></figure></li><li><p><strong>ToStringStyle.SIMPLE_STYLE</strong>：只显示属性</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1,杭州,浙江,CN</span><br></pre></td></tr></table></figure></li></ul><h3 id="原理解析"><a href="#原理解析" class="headerlink" title="原理解析"></a>原理解析</h3><p><code>ReflectionToStringBuilder</code> 主要是通过java 反射实现的属性拼接。</p><p><strong>org.apache.commons.lang.builder.ReflectionToStringBuilder</strong>：</p> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">toString</span><span class="params">(Object object, ToStringStyle style, </span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">boolean</span> outputTransients, <span class="keyword">boolean</span> outputStatics,</span></span></span><br><span class="line"><span class="function"><span class="params">                              Class reflectUpToClass)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ReflectionToStringBuilder(object, style, <span class="keyword">null</span>, </span><br><span class="line">                                         reflectUpToClass, outputTransients,</span><br><span class="line">                                         outputStatics).toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.getObject() == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.getStyle().getNullText();</span><br><span class="line">    &#125;</span><br><span class="line">    Class clazz = <span class="keyword">this</span>.getObject().getClass();</span><br><span class="line">    <span class="keyword">this</span>.appendFieldsIn(clazz);</span><br><span class="line">    <span class="keyword">while</span> (clazz.getSuperclass() != <span class="keyword">null</span> &amp;&amp; clazz != <span class="keyword">this</span>.getUpToClass()) &#123;</span><br><span class="line">        clazz = clazz.getSuperclass();</span><br><span class="line">        <span class="keyword">this</span>.appendFieldsIn(clazz);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中参数  <code>ToStringStyle</code>  是个抽象类，定义了输出的格式 主要是 append了一类类信息到字符串上，可以自己继承 <code>ToStringStyle</code>  实现自定义的输出格式。</p>]]></content>
    
    <summary type="html">
    
      apache的commons-lang3的工具包里有一个ToStringBuilder类，这样在打日志的时候可以方便的打印出类实例中的各属性的值。
    
    </summary>
    
    
      <category term="Java" scheme="https://jueee.github.io/categories/Java/"/>
    
      <category term="JavaClass" scheme="https://jueee.github.io/categories/Java/JavaClass/"/>
    
    
      <category term="JavaClass" scheme="https://jueee.github.io/tags/JavaClass/"/>
    
      <category term="Apache" scheme="https://jueee.github.io/tags/Apache/"/>
    
  </entry>
  
  <entry>
    <title>模板List分两列展示</title>
    <link href="https://jueee.github.io/2020-07-06-%E6%A8%A1%E6%9D%BFList%E5%88%86%E4%B8%A4%E5%88%97%E5%B1%95%E7%A4%BA/"/>
    <id>https://jueee.github.io/2020-07-06-%E6%A8%A1%E6%9D%BFList%E5%88%86%E4%B8%A4%E5%88%97%E5%B1%95%E7%A4%BA/</id>
    <published>2020-07-06T00:00:00.000Z</published>
    <updated>2020-08-07T03:11:24.119Z</updated>
    
    <content type="html"><![CDATA[<p>使用 freeMarker 的机会有很多，自然也就会接触下 <code>&lt;List&gt;</code> 标签，我想大家应该都不陌生。</p><p><code>&lt;#list attrList as attr&gt;$&#123;a.name&#125;&lt;/#list&gt;</code> 类似的用法很多，但是偶尔会用到两列的展示效果我们改怎么办呢？</p><p>我们可以根据模型中的 int 类型的某一列，一般是自动增长的id标识列。</p><h3 id="freemarker-模板语言"><a href="#freemarker-模板语言" class="headerlink" title="freemarker 模板语言"></a>freemarker 模板语言</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">#list</span> <span class="attr">attrList</span> <span class="attr">as</span> <span class="attr">attr</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">#if</span> <span class="attr">attr_index</span>%<span class="attr">2</span> ==<span class="string">0</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">#if</span> <span class="attr">attr_index</span>==<span class="string">0</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">#else</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">#if</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">#if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span> <span class="attr">width</span>=<span class="string">&quot;118&quot;</span>&gt;</span>$&#123;attr.key!&#125;:<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;attr.value!&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">#if</span> <span class="attr">attr_index</span>==<span class="string">attrList?size-1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">#if</span> <span class="attr">attr_index</span>%<span class="attr">2</span> ==<span class="string">1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">#else</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">width</span>=<span class="string">&quot;118&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">#if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">#if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">#list</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Liquid-模板语言"><a href="#Liquid-模板语言" class="headerlink" title="Liquid 模板语言"></a>Liquid 模板语言</h3><p>Liquid 是一门开源的模板语言，由 <span class="exturl" data-url="aHR0cHM6Ly93d3cuc2hvcGlmeS5jb20v">Shopify<i class="fa fa-external-link-alt"></i></span> 创造并用 Ruby 实现。它是 Shopify 主题的骨骼，并且被用于加载店铺系统的动态内容。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> &gt;</span></span><br><span class="line">&#123;% for post in site.gitpagelink %&#125;</span><br><span class="line">&#123;% assign index_2 = forloop.index | modulo: 2 %&#125;</span><br><span class="line">    &#123;% if index_2 == 1 %&#125;</span><br><span class="line">        &#123;% if forloop.index == 1 %&#125; <span class="tag">&lt;<span class="name">tr</span>&gt;</span> &#123;% else %&#125; <span class="tag">&lt;/<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">tr</span>&gt;</span> &#123;% endif %&#125;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; post.name &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    &#123;% if forloop.size == forloop.index %&#125;</span><br><span class="line">        &#123;% if index_2 == 0 %&#125;<span class="tag">&lt;/<span class="name">tr</span>&gt;</span>&#123;% else %&#125;<span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span>&#123;% endif %&#125;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      对于模板语言的List遍历，偶尔会用到两列的展示效果我们改怎么办呢？
    
    </summary>
    
    
      <category term="HTML" scheme="https://jueee.github.io/categories/HTML/"/>
    
    
      <category term="HTML" scheme="https://jueee.github.io/tags/HTML/"/>
    
      <category term="freemarker" scheme="https://jueee.github.io/tags/freemarker/"/>
    
      <category term="Liquid" scheme="https://jueee.github.io/tags/Liquid/"/>
    
  </entry>
  
  <entry>
    <title>为Jekyll博客系统增加来必力评论系统</title>
    <link href="https://jueee.github.io/2020-07-01-%E4%B8%BAJekyll%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F%E5%A2%9E%E5%8A%A0%E6%9D%A5%E5%BF%85%E5%8A%9B%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/"/>
    <id>https://jueee.github.io/2020-07-01-%E4%B8%BAJekyll%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F%E5%A2%9E%E5%8A%A0%E6%9D%A5%E5%BF%85%E5%8A%9B%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/</id>
    <published>2020-07-01T00:00:00.000Z</published>
    <updated>2020-08-07T03:11:48.361Z</updated>
    
    <content type="html"><![CDATA[<p>来必力（LiveRe）是韩国的产品。是一款通过链接社交网站账户，免去额外的注册过程的社会化评论系统。</p><p>来必力安装简单、使用方便、UI美观，同时支持所有的主流社交网络，以及评论管理、通知等功能，深受国内外互联网用户的欢迎。</p><p>该产品主要分为中文、英文、韩文三个版本，用户可以根据语言选择对应的版本。</p><h3 id="来必力（LiveRe）"><a href="#来必力（LiveRe）" class="headerlink" title="来必力（LiveRe）"></a>来必力（LiveRe）</h3><p>官网介绍</p><blockquote><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubGl2ZXJlLmNvbS8=">https://www.livere.com/<i class="fa fa-external-link-alt"></i></span></p></blockquote><p>核心功能：</p><ul><li>使用社交网站账户登录，免去注册过程。</li><li>提高用户的参与和沟通意愿。</li><li>管理/删除我的评论内容。</li><li>提供管理页面，管理网站文章及评论内容。</li></ul><h3 id="域名设置"><a href="#域名设置" class="headerlink" title="域名设置"></a>域名设置</h3><p>在网站列表中，设置个人域名。</p><h3 id="代码设置"><a href="#代码设置" class="headerlink" title="代码设置"></a>代码设置</h3><p>在 <code>_config.yml</code> 文件中添加：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Support for LiveRe comments system.</span><br><span class="line"># You can get your uid from https:&#x2F;&#x2F;livere.com&#x2F;insight&#x2F;myCode (General web site)</span><br><span class="line">livere_uid: MTAyMC81MDgwMC8yNzI4Mg&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><p>参考 <span class="exturl" data-url="aHR0cHM6Ly93d3cubGl2ZXJlLmNvbS9pbnNpZ2h0L215Q29kZSVFRiVCQyU4QyVFNSU5QyVBOA==">https://www.livere.com/insight/myCode，在<i class="fa fa-external-link-alt"></i></span> <code>post.html</code> 文件中添加：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% raw %&#125;<span class="comment">&lt;!-- 来必力City版安装代码 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;lv-container&quot;</span> <span class="attr">data-id</span>=<span class="string">&quot;city&quot;</span> <span class="attr">data-uid</span>=<span class="string">&quot;&#123;&#123;site.livere_uid&#125;&#125;&quot;</span>  <span class="attr">style</span>=<span class="string">&quot;padding-right: 10%;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">  (<span class="function"><span class="keyword">function</span>(<span class="params">d, s</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">     <span class="keyword">var</span> j, e = d.getElementsByTagName(s)[<span class="number">0</span>];</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">     <span class="keyword">if</span> (<span class="keyword">typeof</span> LivereTower === <span class="string">&#x27;function&#x27;</span>) &#123; <span class="keyword">return</span>; &#125;</span></span><br><span class="line"></span><br><span class="line">     j = d.createElement(s);</span><br><span class="line"><span class="javascript">     j.src = <span class="string">&#x27;https://cdn-city.livere.com/js/embed.dist.js&#x27;</span>;</span></span><br><span class="line"><span class="javascript">     j.async = <span class="literal">true</span>;</span></span><br><span class="line"></span><br><span class="line">     e.parentNode.insertBefore(j, e);</span><br><span class="line"><span class="javascript">  &#125;)(<span class="built_in">document</span>, <span class="string">&#x27;script&#x27;</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">noscript</span>&gt;</span>为正常使用来必力评论功能请激活JavaScript<span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- City版安装代码已完成 --&gt;</span>&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      来必力（LiveRe）是韩国的产品。是一款通过链接社交网站账户，免去额外的注册过程的社会化评论系统。
    
    </summary>
    
    
      <category term="Blog" scheme="https://jueee.github.io/categories/Blog/"/>
    
    
      <category term="Blog" scheme="https://jueee.github.io/tags/Blog/"/>
    
      <category term="LiveRe" scheme="https://jueee.github.io/tags/LiveRe/"/>
    
  </entry>
  
  <entry>
    <title>为Jekyll博客系统增加百度统计</title>
    <link href="https://jueee.github.io/2020-06-19-%E4%B8%BAJekyll%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F%E5%A2%9E%E5%8A%A0%E7%99%BE%E5%BA%A6%E7%BB%9F%E8%AE%A1/"/>
    <id>https://jueee.github.io/2020-06-19-%E4%B8%BAJekyll%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F%E5%A2%9E%E5%8A%A0%E7%99%BE%E5%BA%A6%E7%BB%9F%E8%AE%A1/</id>
    <published>2020-06-19T00:00:00.000Z</published>
    <updated>2020-08-07T03:12:10.217Z</updated>
    
    <content type="html"><![CDATA[<p>百度统计是网站用户行为分析平台，为 Jekyll 博客系统接入百度统计，可以很方便的查看博客的各种访问、统计数据。</p><h3 id="百度统计"><a href="#百度统计" class="headerlink" title="百度统计"></a>百度统计</h3><p>官网介绍</p><blockquote><p><span class="exturl" data-url="aHR0cHM6Ly90b25namkuYmFpZHUuY29tL3dlYi93ZWxjb21lL2xvZ2lu">https://tongji.baidu.com/web/welcome/login<i class="fa fa-external-link-alt"></i></span></p></blockquote><h3 id="域名设置"><a href="#域名设置" class="headerlink" title="域名设置"></a>域名设置</h3><p>在网站列表中，设置个人域名。</p><h3 id="代码设置"><a href="#代码设置" class="headerlink" title="代码设置"></a>代码设置</h3><p>在 <code>_config.yml</code> 文件中添加：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">baidu_tmid: d11c8b9bc802239c2cc46ff39d3faf79</span><br></pre></td></tr></table></figure><p>在 <code>footer.html</code> 文件中添加：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% raw %&#125;<span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> _hmt = _hmt || [];</span></span><br><span class="line"><span class="javascript">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">   <span class="keyword">var</span> hm = <span class="built_in">document</span>.createElement(<span class="string">&quot;script&quot;</span>);</span></span><br><span class="line"><span class="handlebars"><span class="xml">   hm.src = &quot;https://hm.baidu.com/hm.js?</span><span class="template-variable">&#123;&#123;<span class="name">site.baidu_tmid</span>&#125;&#125;</span><span class="xml">&quot;;</span></span></span><br><span class="line"><span class="javascript">   <span class="keyword">var</span> s = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;script&quot;</span>)[<span class="number">0</span>]; </span></span><br><span class="line">   s.parentNode.insertBefore(hm, s);</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span>&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      百度统计是网站用户行为分析平台，为 Jekyll 博客系统接入百度统计，可以很方便的查看博客的各种访问、统计数据。
    
    </summary>
    
    
      <category term="Blog" scheme="https://jueee.github.io/categories/Blog/"/>
    
    
      <category term="Blog" scheme="https://jueee.github.io/tags/Blog/"/>
    
      <category term="Baidu" scheme="https://jueee.github.io/tags/Baidu/"/>
    
  </entry>
  
</feed>
