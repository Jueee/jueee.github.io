<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小决的专栏</title>
  
  <subtitle>进一寸有一寸的欢喜</subtitle>
  <link href="https://jueee.github.io/atom.xml" rel="self"/>
  
  <link href="https://jueee.github.io/"/>
  <updated>2023-02-15T07:34:56.233Z</updated>
  <id>https://jueee.github.io/</id>
  
  <author>
    <name>小决</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java 获取文件编码格式</title>
    <link href="https://jueee.github.io/2023/02/2023-02-14-Java%E8%8E%B7%E5%8F%96%E6%96%87%E4%BB%B6%E7%BC%96%E7%A0%81%E6%A0%BC%E5%BC%8F/"/>
    <id>https://jueee.github.io/2023/02/2023-02-14-Java%E8%8E%B7%E5%8F%96%E6%96%87%E4%BB%B6%E7%BC%96%E7%A0%81%E6%A0%BC%E5%BC%8F/</id>
    <published>2023-02-14T00:00:00.000Z</published>
    <updated>2023-02-15T07:34:56.233Z</updated>
    
    <content type="html"><![CDATA[<p>Java 在读取文件时容易出现乱码，究其原因是读取文件的编码跟文件本身的编码不一致，那在解析文件前如何获取文件的编码格式呢？</p><p>本文主要通过 google 开源的 juniversalchardet 来实现。</p><a id="more"></a><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><ul><li>代码：<span class="exturl" data-url="aHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vYXJjaGl2ZS9wL2p1bml2ZXJzYWxjaGFyZGV0Lw==">https://code.google.com/archive/p/juniversalchardet/<i class="fa fa-external-link-alt"></i></span></li><li>GitHub：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FsYmZlcm5hbmRlei9qdW5pdmVyc2FsY2hhcmRldA==">https://github.com/albfernandez/juniversalchardet<i class="fa fa-external-link-alt"></i></span></li></ul><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.googlecode.juniversalchardet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>juniversalchardet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></code></pre><p>或者：</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.github.albfernandez<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>juniversalchardet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.4.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></code></pre><h3 id="代码封装"><a href="#代码封装" class="headerlink" title="代码封装"></a>代码封装</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/**  * 获得文件编码格式  *  * @param file  * @return  * @throws IOException  */</span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getFileEncode</span><span class="token punctuation">(</span><span class="token class-name">File</span> file<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>     <span class="token class-name">FileInputStream</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">String</span> code <span class="token operator">=</span> <span class="token string">"utf-8"</span><span class="token punctuation">;</span>     <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">4096</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token class-name">UniversalDetector</span> detector <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UniversalDetector</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// (2)</span>     <span class="token keyword">int</span> nread<span class="token punctuation">;</span>     <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>nread <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>detector<span class="token punctuation">.</span><span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         detector<span class="token punctuation">.</span><span class="token function">handleData</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> nread<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token comment">// (3)</span>     detector<span class="token punctuation">.</span><span class="token function">dataEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// (4)</span>     <span class="token class-name">String</span> encoding <span class="token operator">=</span> detector<span class="token punctuation">.</span><span class="token function">getDetectedCharset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>encoding<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         code <span class="token operator">=</span> encoding<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token comment">// (5)</span>     detector<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> code<span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;Java 在读取文件时容易出现乱码，究其原因是读取文件的编码跟文件本身的编码不一致，那在解析文件前如何获取文件的编码格式呢？&lt;/p&gt;
&lt;p&gt;本文主要通过 google 开源的 juniversalchardet 来实现。&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://jueee.github.io/categories/Java/"/>
    
    <category term="JavaJar" scheme="https://jueee.github.io/categories/Java/JavaJar/"/>
    
    
    <category term="Java" scheme="https://jueee.github.io/tags/Java/"/>
    
    <category term="JavaJar" scheme="https://jueee.github.io/tags/JavaJar/"/>
    
  </entry>
  
  <entry>
    <title>Windows 的 WSL2 子系统安装 Docker 环境</title>
    <link href="https://jueee.github.io/2023/01/2023-01-13-Windows%E7%9A%84WSL2%E5%AD%90%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85Docker%E7%8E%AF%E5%A2%83/"/>
    <id>https://jueee.github.io/2023/01/2023-01-13-Windows%E7%9A%84WSL2%E5%AD%90%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85Docker%E7%8E%AF%E5%A2%83/</id>
    <published>2023-01-13T00:00:00.000Z</published>
    <updated>2023-01-13T05:42:17.886Z</updated>
    
    <content type="html"><![CDATA[<p>WSL 子系统安装好 Debian 后，需要配置 Docker 环境，下面介绍安装步骤。</p><a id="more"></a><h3 id="配置更新源"><a href="#配置更新源" class="headerlink" title="配置更新源"></a>配置更新源</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">cat</span> <span class="token operator">&lt;&lt;</span><span class="token string">'EOF'</span> <span class="token operator">&gt;</span> /etc/apt/sources.listdeb http://mirrors.163.com/debian/ bullseye main non-free contribdeb-src http://mirrors.163.com/debian/ bullseye main non-free contribdeb http://mirrors.163.com/debian-security/ bullseye-security maindeb-src http://mirrors.163.com/debian-security/ bullseye-security maindeb http://mirrors.163.com/debian/ bullseye-updates main non-free contribdeb-src http://mirrors.163.com/debian/ bullseye-updates main non-free contribdeb http://mirrors.163.com/debian/ bullseye-backports main non-free contribdeb-src http://mirrors.163.com/debian/ bullseye-backports main non-free contribEOF$ <span class="token function">apt-get</span> update</code></pre><h3 id="安装-Docker-环境"><a href="#安装-Docker-环境" class="headerlink" title="安装 Docker 环境"></a>安装 Docker 环境</h3><p>下载 docker deb 文件：</p><p><span class="exturl" data-url="aHR0cHM6Ly9kb3dubG9hZC5kb2NrZXIuY29tL2xpbnV4L2RlYmlhbi9kaXN0cy9idWxsc2V5ZS9wb29sL3N0YWJsZS9hbWQ2NC8=">https://download.docker.com/linux/debian/dists/bullseye/pool/stable/amd64/<i class="fa fa-external-link-alt"></i></span></p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><ul><li>containerd.io - 与 OS API 进行交互的守护程序（在本例中为 LXC-Linux Containers），从本质上将 Docker 与 OS 分离，还为非 Docker 容器管理器提供容器服务</li><li> docker-ce-Docker 守护程序，这是完成所有管理工作的部分，<strong>在 Linux 上需要另外两个</strong></li><li> docker-ce-cli - 用于控制守护程序的 CLI 工具，如果要控制远程 Docker 守护程序，则可以单独安装它们</li></ul><blockquote><p>$ sudo dpkg -i containerd.io_1.6.9-1_amd64.deb</p><p>$ sudo dpkg -i docker-ce-cli_20.10.9_3-0_debian-bullseye_amd64.deb</p><p>$ sudo dpkg -i docker-ce_20.10.9_3-0_debian-bullseye_amd64.deb</p></blockquote><h4 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h4><blockquote><p>/var/log# tail -n 100 docker.log</p></blockquote><h4 id="依赖-iptables-包"><a href="#依赖-iptables-包" class="headerlink" title="依赖 iptables 包"></a>依赖 iptables 包</h4><p>依赖 iptables 包：</p><pre class="language-none"><code class="language-none">sudo apt-get install iptablessudo apt --fix-broken install</code></pre><h4 id="WSL2-不支持-iptables-nft"><a href="#WSL2-不支持-iptables-nft" class="headerlink" title="WSL2 不支持 iptables-nft"></a>WSL2 不支持 iptables-nft</h4><pre class="language-none"><code class="language-none">time="2023-01-13T10:27:21.593809700+08:00" level=info msg="stopping healthcheck following graceful shutdownfailed to start daemon: Error initializing network controller: error obtaining controller instance: unable v1.8.7 (nf_tables):  RULE_APPEND failed (No such file or directory): rule in chain DOCKER-ISOLATION-STAGE-1 (exit status 4))</code></pre><p>原因是由于新的 Debian 系统使用了 iptables-nft，而 WSL2 不支持导致的。</p><p>可以通过以下命令进行修改</p><pre class="language-none"><code class="language-none">$ sudo update-alternatives --config iptablesThere are 2 choices for the alternative iptables (providing /usr/sbin/iptables).  Selection    Path                       Priority   Status------------------------------------------------------------* 0            /usr/sbin/iptables-nft      20        auto mode  1            /usr/sbin/iptables-legacy   10        manual mode  2            /usr/sbin/iptables-nft      20        manual modePress &lt;enter&gt; to keep the current choice[*], or type selection number: 1update-alternatives: using /usr/sbin/iptables-legacy to provide /usr/sbin/iptables (iptables) in manual mode</code></pre><p>修改完成后重启 Docker 服务即可。 <code>$ sudo service docker start</code></p><h3 id="验证-docker"><a href="#验证-docker" class="headerlink" title="验证 docker"></a>验证 docker</h3><pre class="language-none"><code class="language-none">$ docker psCONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES</code></pre><h3 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h3><h4 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h4><pre class="language-none"><code class="language-none">$ docker pull safe-box:1.0.2Error response from daemon: Get "https://registry-1.docker.io/v2/": x509: certificate signed by unknown authority</code></pre><p>可能你机器本身需要更新一下，不认识 RootCA 清单，执行这一行：</p><pre class="language-none"><code class="language-none">sudo apt-get update &amp;&amp; sudo apt-get install ca-certificates</code></pre><p>然后重启 Docker 服务即可。 <code>$ sudo service docker start</code></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;WSL 子系统安装好 Debian 后，需要配置 Docker 环境，下面介绍安装步骤。&lt;/p&gt;</summary>
    
    
    
    <category term="OS" scheme="https://jueee.github.io/categories/OS/"/>
    
    <category term="Debian" scheme="https://jueee.github.io/categories/OS/Debian/"/>
    
    
    <category term="OS" scheme="https://jueee.github.io/tags/OS/"/>
    
    <category term="Debian" scheme="https://jueee.github.io/tags/Debian/"/>
    
  </entry>
  
  <entry>
    <title>Windows 系统设置 cmd 中常用命令的别名 (alias)</title>
    <link href="https://jueee.github.io/2023/01/2023-01-12-Windows%E7%B3%BB%E7%BB%9F%E8%AE%BE%E7%BD%AEcmd%E4%B8%AD%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E7%9A%84%E5%88%AB%E5%90%8D(alias)/"/>
    <id>https://jueee.github.io/2023/01/2023-01-12-Windows%E7%B3%BB%E7%BB%9F%E8%AE%BE%E7%BD%AEcmd%E4%B8%AD%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E7%9A%84%E5%88%AB%E5%90%8D(alias)/</id>
    <published>2023-01-12T00:00:00.000Z</published>
    <updated>2023-01-12T07:14:41.418Z</updated>
    
    <content type="html"><![CDATA[<h3 id="doskey"><a href="#doskey" class="headerlink" title="doskey"></a>doskey</h3><p>doskey 相当于 Linux 中的 alias，等号左边是右边的别名。<br>$* 表示这个命令还可能有其他参数。</p><p>但是 doskey 只在本次命令行中生效。如果想要在 cmd 持续生效，可以先将所需的别名保存一份 bat。</p><a id="more"></a><h3 id="设置系统别名步骤"><a href="#设置系统别名步骤" class="headerlink" title="设置系统别名步骤"></a>设置系统别名步骤</h3><h4 id="新建-bat-文件"><a href="#新建-bat-文件" class="headerlink" title="新建 bat 文件"></a>新建 bat 文件</h4><p>在某个目录下（建议在用户根目录）新建文件 cmd_auto.bat , 输入自己需要的常用命令的别名。</p><p>下面是我的 cmd_auto.bat：</p><pre class="language-bat" data-language="bat"><code class="language-bat">@echo offdoskey ls=dir /b $*doskey alias=doskey /macrosdoskey history=doskey /historydoskey mvnci=mvn clean install -Dmaven.test.skip=truedoskey mvncp=mvn clean package -Dmaven.test.skip=true</code></pre><h4 id="修改注册表"><a href="#修改注册表" class="headerlink" title="修改注册表"></a>修改注册表</h4><p>使 cmd 启动时自动执行该 bat 文件。<br>win+r，键入 <code>regedit</code>，进入地址：<code>计算机\HKEY_CURRENT_USER\Software\Microsoft\Command Processor</code></p><p>右边空白处右键新建 -&gt; 字符串值。</p><p><img src="assets/image-20230112150844594.png" alt="image-20230112150844594" loading="lazy"></p><p>双击编辑该值，随便起个名字（比如 AutoRun），数值数据里填刚才新建的 bat 文件的路径（我的是 C:\GreenSoftware\cmd_auto.bat）</p><p><img src="assets/image-20230112150933483.png" alt="image-20230112150933483" loading="lazy"></p><h4 id="别名生效"><a href="#别名生效" class="headerlink" title="别名生效"></a>别名生效</h4><p>确定后重启 cmd，别名就可以用了</p><pre class="language-none"><code class="language-none">$ aliasls=dir /b $*mvnci=mvn clean install -Dmaven.test.skip=truealias=doskey /macrosmvncp=mvn clean package -Dmaven.test.skip=truehistory=doskey /history</code></pre><h3 id="注册表中找不到配置"><a href="#注册表中找不到配置" class="headerlink" title="注册表中找不到配置"></a>注册表中找不到配置</h3><p>部分机器存在注册表中找不到 Command Processor 的问题。</p><p>路径地址：<code>计算机\HKEY_CURRENT_USER\Software\Microsoft\Command Processor</code></p><p>此时，可以自己添加一个，把下面代码写到 1.ps1：</p><pre class="language-ps1" data-language="ps1"><code class="language-ps1">$regPath = 'HKCU:\Software\Microsoft\Command Processor'if (! (test-path $regPath) ) {   write-output "$regPath does not exist, creating"   $eatMe = new-item -path $regPath}</code></pre><p>然后执行：</p><p><img src="assets/image-20230112151339245.png" alt="image-20230112151339245" loading="lazy"></p><p>然后刷新注册表，就可以看到路径地址了，可以进行上面的别名配置。</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;doskey&quot;&gt;&lt;a href=&quot;#doskey&quot; class=&quot;headerlink&quot; title=&quot;doskey&quot;&gt;&lt;/a&gt;doskey&lt;/h3&gt;&lt;p&gt;doskey 相当于 Linux 中的 alias，等号左边是右边的别名。&lt;br&gt;$* 表示这个命令还可能有其他参数。&lt;/p&gt;
&lt;p&gt;但是 doskey 只在本次命令行中生效。如果想要在 cmd 持续生效，可以先将所需的别名保存一份 bat。&lt;/p&gt;</summary>
    
    
    
    <category term="OS" scheme="https://jueee.github.io/categories/OS/"/>
    
    <category term="Windows" scheme="https://jueee.github.io/categories/OS/Windows/"/>
    
    
    <category term="Windows" scheme="https://jueee.github.io/tags/Windows/"/>
    
    <category term="OS" scheme="https://jueee.github.io/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>Vue 中的 el-table 实现拖拽排序</title>
    <link href="https://jueee.github.io/2022/12/2022-12-15-Vue%E4%B8%AD%E7%9A%84el-table%E5%AE%9E%E7%8E%B0%E6%8B%96%E6%8B%BD%E6%8E%92%E5%BA%8F/"/>
    <id>https://jueee.github.io/2022/12/2022-12-15-Vue%E4%B8%AD%E7%9A%84el-table%E5%AE%9E%E7%8E%B0%E6%8B%96%E6%8B%BD%E6%8E%92%E5%BA%8F/</id>
    <published>2022-12-15T00:00:00.000Z</published>
    <updated>2023-01-11T11:04:41.668Z</updated>
    
    <content type="html"><![CDATA[<p>element ui 表格没有自带的拖拽排序的功能，只能借助第三方插件 Sortable.js 来实现。</p><a id="more"></a><h3 id="Sortable-js"><a href="#Sortable-js" class="headerlink" title="Sortable.js"></a>Sortable.js</h3><ul><li>官网：<span class="exturl" data-url="aHR0cDovL3d3dy5zb3J0YWJsZWpzLmNvbS8=">http://www.sortablejs.com/<i class="fa fa-external-link-alt"></i></span></li><li> 配置项：<span class="exturl" data-url="aHR0cDovL3d3dy5zb3J0YWJsZWpzLmNvbS9vcHRpb25zLmh0bWw=">http://www.sortablejs.com/options.html<i class="fa fa-external-link-alt"></i></span></li><li>GitHub：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1NvcnRhYmxlSlMvU29ydGFibGU=">https://github.com/SortableJS/Sortable<i class="fa fa-external-link-alt"></i></span></li></ul><h3 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h3><h4 id="安装-Sortable-js"><a href="#安装-Sortable-js" class="headerlink" title="安装 Sortable.js"></a>安装 Sortable.js</h4><pre class="language-javascript" data-language="javascript"><code class="language-javascript">npm install <span class="token operator">--</span>save sortablejs</code></pre><h4 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h4><p>在当前  Vue 中 JS 代码中引入：</p><pre class="language-vue" data-language="vue"><code class="language-vue">import Sortable from "sortablejs";</code></pre><h4 id="配置-el-table"><a href="#配置-el-table" class="headerlink" title="配置 el-table"></a>配置 el-table</h4><p>在当前 vue 文件 template 的 el-table 中 <strong>指定 row-key，row-key 必须是唯一的</strong>，如 ID，不然会出现排序不对的情况。</p><p>【注意】row-key 不可用 index，因为拖拽后 index 会变，会有问题。</p><pre class="language-vue" data-language="vue"><code class="language-vue">&lt;el-table          ref="table"          :data="apiObj"          row-key="id"          @selection-change="selectionChange"          :paginationLayout="'prev, pager, next'" &gt;</code></pre><h4 id="项目完整代码"><a href="#项目完整代码" class="headerlink" title="项目完整代码"></a>项目完整代码</h4><pre class="language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div class="dic-data"&gt;    &lt;el-container&gt;      &lt;el-header&gt;         &lt;el-button type="primary" @click="saveSortData(apiObjDrag)"              &gt;排序保存&lt;/el-button            &gt;      &lt;/el-header&gt;      &lt;el-main class="nopadding"&gt;        &lt;el-table           stripe          ref="table"          :data="apiObj"          row-key="id"          @selection-change="selectionChange"          :paginationLayout="'prev, pager, next'"        &gt;          &lt;el-table-column            label="序号"            type="index"            width="50"          &gt;&lt;/el-table-column&gt;          &lt;el-table-column            label="字典键"            prop="dictKey"            align="left"          &gt;&lt;/el-table-column&gt;          &lt;el-table-column            label="字典值"            prop="dictValue"            align="left"          &gt;&lt;/el-table-column&gt;        &lt;/el-table&gt;      &lt;/el-main&gt;    &lt;/el-container&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import Sortable from 'sortablejs'export default {  name: 'data',  data() {    return {      dialog: {        new: false,      },      apiObj: [        {          dictKey:'你好',          dictValue:'aa'        },        {          dictKey:'我好',          dictValue:'bb'        },        {          dictKey:'他好',          dictValue:'cc'        }      ],      apiObjDrag: [],    }  },  created() {    this.getDictDatalist()    this.$nextTick(() =&gt; {      this.rowDrop()    })  },  methods: {        //行-拖拽    rowDrop() {      const tbody = document.querySelector('.el-table__body-wrapper tbody')      const _this = this      Sortable.create(tbody, {        onEnd({ newIndex, oldIndex }) {          const currRow = _this.apiObj.splice(oldIndex, 1)[0]          _this.apiObj.splice(newIndex, 0, currRow)          //   拖动后获取newIdex          let arr = Array.from(_this.apiObj)          _this.apiObjDrag = arr.map((item, index) =&gt; {            return {              id: item.id,              dictSort: index,            }          })        },      })    },    // 排序后，把拖动后的结果穿啊给后端    async saveSortData(apiObjDrag) {      if (apiObjDrag == '') {        this.$message.warning("请先拖动字典数据，再点击");        return      }      const {data: res} = await this.$http.post( "sortConfig", apiObjDrag);      if (res.code === 200) {        this.$message.success('排序成功')      } else {        this.$alert(res.msg, '提示', { type: 'error' })      }    },    //表格选择后回调事件    selectionChange(selection) {      this.selection = selection    },  },}&lt;/script&gt;</code></pre><h4 id="后端代码"><a href="#后端代码" class="headerlink" title="后端代码"></a>后端代码</h4><p>Controller 层：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/sortConfig"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">ResponseBean</span> <span class="token function">sortConfig</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token annotation punctuation">@Validated</span> <span class="token class-name">Config</span><span class="token punctuation">[</span><span class="token punctuation">]</span> configs<span class="token punctuation">)</span> <span class="token punctuation">{</span>    service<span class="token punctuation">.</span><span class="token function">sortConfig</span><span class="token punctuation">(</span>configs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">ResponseBean</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>Service 层：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sortConfig</span><span class="token punctuation">(</span><span class="token class-name">Config</span><span class="token punctuation">[</span><span class="token punctuation">]</span> configs<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Config</span> config<span class="token operator">:</span>configs<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Config</span> infoConfig <span class="token operator">=</span> <span class="token function">selectById</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>infoConfig<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            infoConfig<span class="token punctuation">.</span><span class="token function">setOrdernum</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">getOrdernum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            mapper<span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>infoConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;element ui 表格没有自带的拖拽排序的功能，只能借助第三方插件 Sortable.js 来实现。&lt;/p&gt;</summary>
    
    
    
    <category term="Vue" scheme="https://jueee.github.io/categories/Vue/"/>
    
    
    <category term="Vue" scheme="https://jueee.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>curl 命令行查询 ElasticSearch 数据</title>
    <link href="https://jueee.github.io/2022/12/2022-12-13-curl%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%9F%A5%E8%AF%A2ElasticSearch%E6%95%B0%E6%8D%AE/"/>
    <id>https://jueee.github.io/2022/12/2022-12-13-curl%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%9F%A5%E8%AF%A2ElasticSearch%E6%95%B0%E6%8D%AE/</id>
    <published>2022-12-13T00:00:00.000Z</published>
    <updated>2022-12-13T09:00:48.042Z</updated>
    
    <content type="html"><![CDATA[<p>ES 的查询有 query、URL 两种方式，而 URL 是比较简洁的一种，本文主要以实例探讨和总结 URL 的查询方式。</p><a id="more"></a><h3 id="查询语法"><a href="#查询语法" class="headerlink" title="查询语法"></a>查询语法</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token punctuation">[</span> -s<span class="token punctuation">]</span><span class="token punctuation">[</span> -g<span class="token punctuation">]</span><span class="token punctuation">[</span> -X<span class="token operator">&lt;</span>REST Verb<span class="token operator">&gt;</span><span class="token punctuation">]</span><span class="token punctuation">[</span> -H <span class="token string">'Content-Type: application/json'</span><span class="token punctuation">]</span> <span class="token string">'&lt;Node&gt;:&lt;Port&gt;/&lt;Index&gt;[/Type][/ID]/_search?pretty&amp;q=&lt;search string&gt;'</span>　　注意要用<span class="token string">''</span>包起来，否则后面的<span class="token operator">&amp;</span>会被识别为“后台执行”，即<span class="token operator">&amp;</span>后面的内容被忽略　　-s 不输出查询的时间那些东西　　-g 做转义用　　　　<span class="token operator">&lt;</span>REST Verb<span class="token operator">&gt;</span>：REST风格的语法谓词，GET/POST/PUT　　<span class="token operator">&lt;</span>Node<span class="token operator">&gt;</span>:节点ip，默认使用localhost　　<span class="token operator">&lt;</span>port<span class="token operator">&gt;</span>:节点端口号，默认80，ES默认使用9200　　<span class="token operator">&lt;</span>Index<span class="token operator">&gt;</span>:索引名，支持通配符，power_json*　　<span class="token operator">&lt;</span>Type<span class="token operator">&gt;</span>:索引类型，由于一个index只有一个type，可不输入　　<span class="token operator">&lt;</span>ID<span class="token operator">&gt;</span>:操作对象的ID号，可不输入　　q  ：前面加<span class="token operator">&amp;</span>，后跟查询语句</code></pre><h4 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h4><pre class="language-none"><code class="language-none">q---查询字符串sort---排序执行。可以是fieldName或 fieldName:asc/ 的形式fieldName:desc。fieldName可以是文档中的实际字段，也可以是特殊_score名称，表示基于分数的排序。可以有几个sort参数（顺序很重要）。from---从命中的索引开始返回。默认为0。size---要返回的点击次数。默认为10。_source_include---查询包含某些source字段的文档。_source_exclude---查询不包含某些source字段的文档。timeout---搜索超时，将搜索请求限制在指定的时间值内执行，并使用在到期时累积的点击数进行保释。默认为无超时。default_field---默认为index.query.default_field，即未指定字段前缀时返回所有字段，索引设置为*default_operator---默认查询运算符，未指定时默认为OR。analyzer---用于分析查询字符串的分析器名称。_source---设置为false禁用_source字段检索。analyze_wildcard---是否应分析通配符和前缀查询,默认为falsestatus:active---where the status field contains active　　　　　　　 ---（status相当于fieldname,active相当于值-----&gt;TESTID：39232032303039,由于=被用在了前面“q=”,所以这里用“：”代替了“=”）title:(quick OR brown)---where the title field contains quick or brown. If you omit the OR operator the default operator will be usedauthor:"John Smith"---where the author field contains the exact phrase "john smith"_exists_:title---where the field title has any non-null valuedate:[2012-01-01 TO 2012-12-31]---All days in 2012count:[10 TO *]---Numbers from 10 upwardscount:&gt;=10---Numbers from 10 upwards</code></pre><h3 id="查看具体数据"><a href="#查看具体数据" class="headerlink" title="查看具体数据"></a>查看具体数据</h3><p>查询某个索引下某条记录的具体数据：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token string">'localhost:9200/index_name/mail/aaa'</span><span class="token function">curl</span> <span class="token string">'localhost:9200/index_name/_doc/aaa'</span>（默认 <span class="token builtin class-name">type</span> 为 _doc）</code></pre><h3 id="根据条件查询"><a href="#根据条件查询" class="headerlink" title="根据条件查询"></a>根据条件查询</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token string">'localhost:9200/index_name/_search?pretty&amp;q=msgid:aaa'</span>//查指定的字段值<span class="token function">curl</span> <span class="token string">'localhost:9200/index_name/_search?pretty&amp;q=msgid:aaa&amp;size=3'</span> //查指定的字段值，并只显示3个<span class="token function">curl</span> <span class="token string">'localhost:9200/index_name/_search?pretty&amp;q=msgid:aaa&amp;from=2&amp;size=3'</span> //从第3个开始只显示3个，即3/4/5<span class="token function">curl</span> <span class="token string">'localhost:9200/index_name/_search?pretty&amp;q=msgid:aaa&amp;sort=TIME:desc'</span> //按时间排序，desc降序，默认为升序<span class="token function">curl</span> <span class="token string">'localhost:9200/index_name/_search?pretty&amp;analyze_wildcard&amp;q=msgid:aaa'</span>　　 //模糊查询<span class="token function">curl</span> <span class="token string">'localhost:9200/index_name/_search?pretty&amp;q=VAL:&lt;200'</span>　　//比较大小<span class="token function">curl</span> <span class="token string">'localhost:9200/index_name/_search?pretty&amp;_source=false'</span>　　//是否显示<span class="token function">curl</span> <span class="token string">'localhost:9200/index_name/_search?pretty&amp;_source_includes=TIME,VAL'</span>　　//设置包含的字段<span class="token function">curl</span> -g <span class="token string">'localhost:9200/index_name/_search?pretty&amp;q=(SOLAR:1%20AND%20CENTRAL:1)'</span>　　//组合查询，要加 -g<span class="token function">curl</span> -g <span class="token string">'localhost:9200/index_name/_search?pretty&amp;q=TIME:[2019-05%20TO%202019-06]'</span>　//范围查询，要加 -g</code></pre><h3 id="查询多个index数据"><a href="#查询多个index数据" class="headerlink" title="查询多个index数据"></a>查询多个 index 数据</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token string">'http://127.0.0.1:9200/index_name1,index_name2,index_name3/_search?pretty&amp;q=msgid:1e50baf1dea339f871f9272508bc7615'</span></code></pre><h3 id="JSON参数复杂查询"><a href="#JSON参数复杂查询" class="headerlink" title="JSON参数复杂查询"></a>JSON 参数复杂查询</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token string">'http://127.0.0.1:9200/index_name/_search'</span> <span class="token punctuation">{</span><span class="token string">"query"</span>:<span class="token punctuation">{</span><span class="token string">"bool"</span>:<span class="token punctuation">{</span><span class="token string">"must"</span>:<span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">"match"</span>:<span class="token punctuation">{</span><span class="token string">"uid"</span><span class="token builtin class-name">:</span><span class="token string">"aaa"</span><span class="token punctuation">}</span><span class="token punctuation">}</span>,<span class="token punctuation">{</span><span class="token string">"match"</span>:<span class="token punctuation">{</span><span class="token string">"msgid"</span><span class="token builtin class-name">:</span><span class="token string">"bbb"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;ES 的查询有 query、URL 两种方式，而 URL 是比较简洁的一种，本文主要以实例探讨和总结 URL 的查询方式。&lt;/p&gt;</summary>
    
    
    
    <category term="Database" scheme="https://jueee.github.io/categories/Database/"/>
    
    <category term="ElasticSearch" scheme="https://jueee.github.io/categories/Database/ElasticSearch/"/>
    
    <category term="OS" scheme="https://jueee.github.io/categories/OS/"/>
    
    <category term="Shell" scheme="https://jueee.github.io/categories/OS/Shell/"/>
    
    
    <category term="ElasticSearch" scheme="https://jueee.github.io/tags/ElasticSearch/"/>
    
    <category term="Database" scheme="https://jueee.github.io/tags/Database/"/>
    
    <category term="curl" scheme="https://jueee.github.io/tags/curl/"/>
    
  </entry>
  
  <entry>
    <title>HttpGet 请求传 body 参数</title>
    <link href="https://jueee.github.io/2022/12/2022-12-12-HttpGet%E8%AF%B7%E6%B1%82%E4%BC%A0body%E5%8F%82%E6%95%B0/"/>
    <id>https://jueee.github.io/2022/12/2022-12-12-HttpGet%E8%AF%B7%E6%B1%82%E4%BC%A0body%E5%8F%82%E6%95%B0/</id>
    <published>2022-12-12T00:00:00.000Z</published>
    <updated>2023-02-15T07:27:21.848Z</updated>
    
    <content type="html"><![CDATA[<p>elastic search 的请求是一个 Get 请求，入参在 Body 中（Json 格式）。</p><a id="more"></a><h3 id="处理方法"><a href="#处理方法" class="headerlink" title="处理方法"></a>处理方法</h3><h4 id="引入httpclient-依赖"><a href="#引入httpclient-依赖" class="headerlink" title="引入httpclient 依赖"></a>引入 httpclient 依赖</h4><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.httpcomponents/httpclient --&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.httpcomponents<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>httpclient<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.5.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></code></pre><h4 id="定义一个HttpGet实体类"><a href="#定义一个HttpGet实体类" class="headerlink" title="定义一个HttpGet实体类"></a>定义一个 HttpGet 实体类</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span>client<span class="token punctuation">.</span>methods<span class="token punctuation">.</span></span><span class="token class-name">HttpEntityEnclosingRequestBase</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span>URI<span class="token punctuation">;</span><span class="token comment">/** * @author xf * @version 1.0.0 * @ClassName HttpGetWithEntity * @Description TODO 定义一个带body的GET请求 继承 HttpEntityEnclosingRequestBase */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HttpGetWithEntity</span> <span class="token keyword">extends</span> <span class="token class-name">HttpEntityEnclosingRequestBase</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">String</span> METHOD_NAME <span class="token operator">=</span> <span class="token string">"GET"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> METHOD_NAME<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">HttpGetWithEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">HttpGetWithEntity</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">URI</span> uri<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setURI</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">HttpGetWithEntity</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> uri<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setURI</span><span class="token punctuation">(</span>URI<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="HttpGet请求公共方法"><a href="#HttpGet请求公共方法" class="headerlink" title="HttpGet请求公共方法"></a>HttpGet 请求公共方法</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/**  * 发送get请求，参数为json  * @param url  * @param param  * @param encoding  * @return  * @throws Exception  */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">sendJsonByGetReq</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">,</span> <span class="token class-name">String</span> param<span class="token punctuation">,</span> <span class="token class-name">String</span> encoding<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> body <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token comment">//创建httpclient对象</span>    <span class="token class-name">CloseableHttpClient</span> client <span class="token operator">=</span> <span class="token class-name">HttpClients</span><span class="token punctuation">.</span><span class="token function">createDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">HttpGetWithEntity</span> httpGetWithEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpGetWithEntity</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">HttpEntity</span> httpEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringEntity</span><span class="token punctuation">(</span>param<span class="token punctuation">,</span> <span class="token class-name">ContentType</span><span class="token punctuation">.</span>APPLICATION_JSON<span class="token punctuation">)</span><span class="token punctuation">;</span>    httpGetWithEntity<span class="token punctuation">.</span><span class="token function">setEntity</span><span class="token punctuation">(</span>httpEntity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//执行请求操作，并拿到结果（同步阻塞）</span>    <span class="token class-name">CloseableHttpResponse</span> response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>httpGetWithEntity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//获取结果实体</span>    <span class="token class-name">HttpEntity</span> entity <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>entity <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//按指定编码转换结果实体为String类型</span>        body <span class="token operator">=</span> <span class="token class-name">EntityUtils</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>entity<span class="token punctuation">,</span> encoding<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//释放链接</span>    response<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> body<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;elastic search 的请求是一个 Get 请求，入参在 Body 中（Json 格式）。&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://jueee.github.io/categories/Java/"/>
    
    <category term="Apache" scheme="https://jueee.github.io/categories/Apache/"/>
    
    <category term="JavaJar" scheme="https://jueee.github.io/categories/Java/JavaJar/"/>
    
    <category term="HttpComponents" scheme="https://jueee.github.io/categories/Apache/HttpComponents/"/>
    
    
    <category term="Apache" scheme="https://jueee.github.io/tags/Apache/"/>
    
    <category term="HttpComponents" scheme="https://jueee.github.io/tags/HttpComponents/"/>
    
  </entry>
  
  <entry>
    <title>解决 group_concat 默认长度限制问题</title>
    <link href="https://jueee.github.io/2022/11/2022-11-21-%E8%A7%A3%E5%86%B3group_concat%E9%BB%98%E8%AE%A4%E9%95%BF%E5%BA%A6%E9%99%90%E5%88%B6%E9%97%AE%E9%A2%98/"/>
    <id>https://jueee.github.io/2022/11/2022-11-21-%E8%A7%A3%E5%86%B3group_concat%E9%BB%98%E8%AE%A4%E9%95%BF%E5%BA%A6%E9%99%90%E5%88%B6%E9%97%AE%E9%A2%98/</id>
    <published>2022-11-21T00:00:00.000Z</published>
    <updated>2023-02-15T07:28:02.372Z</updated>
    
    <content type="html"><![CDATA[<p>GROUP_CONCAT 有个最大长度的限制，超过最大长度就会被截断掉</p><a id="more"></a><h3 id="获取长度"><a href="#获取长度" class="headerlink" title="获取长度"></a>获取长度</h3><p>可以通过下面的语句获得长度：</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">SELECT @@global.group_concat_max_len;show variables like 'group_concat_max_len';</code></pre><h3 id="设置长度"><a href="#设置长度" class="headerlink" title="设置长度"></a>设置长度</h3><p>使用以下语句设置：</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">SET GLOBAL group_concat_max_len=102400;SET SESSION group_concat_max_len=102400;</code></pre><h3 id="配置设置"><a href="#配置设置" class="headerlink" title="配置设置"></a>配置设置</h3><p>在 MySQL 配置文件中 my.conf 或 my.ini 中添加:</p><pre class="language-ini" data-language="ini"><code class="language-ini"><span class="token selector">[mysqld]</span>　　group_concat_max_len<span class="token attr-value"><span class="token punctuation">=</span>102400</span></code></pre><p>重启 MySQL 服务。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;GROUP_CONCAT 有个最大长度的限制，超过最大长度就会被截断掉&lt;/p&gt;</summary>
    
    
    
    <category term="Database" scheme="https://jueee.github.io/categories/Database/"/>
    
    <category term="MySQL" scheme="https://jueee.github.io/categories/Database/MySQL/"/>
    
    
    <category term="MySQL" scheme="https://jueee.github.io/tags/MySQL/"/>
    
    <category term="Database" scheme="https://jueee.github.io/tags/Database/"/>
    
  </entry>
  
  <entry>
    <title>RestHighLevelClient 使用 es 中三种查询用法</title>
    <link href="https://jueee.github.io/2022/11/2022-11-04-RestHighLevelClient%E4%BD%BF%E7%94%A8es%E4%B8%AD%E4%B8%89%E7%A7%8D%E6%9F%A5%E8%AF%A2%E7%94%A8%E6%B3%95/"/>
    <id>https://jueee.github.io/2022/11/2022-11-04-RestHighLevelClient%E4%BD%BF%E7%94%A8es%E4%B8%AD%E4%B8%89%E7%A7%8D%E6%9F%A5%E8%AF%A2%E7%94%A8%E6%B3%95/</id>
    <published>2022-11-04T00:00:00.000Z</published>
    <updated>2023-02-15T07:28:52.656Z</updated>
    
    <content type="html"><![CDATA[<h3 id="三种查询用法"><a href="#三种查询用法" class="headerlink" title="三种查询用法"></a>三种查询用法</h3><p>三者之间的区别</p><h4 id="from-size"><a href="#from-size" class="headerlink" title="from size"></a>from size</h4><ul><li>深度分页或者 size 特别大的情况，会出现 deep pagination 问题。且 es 的自保机制 max_result_window 是 10000，当查询数量超过一万就会报错</li><li>该查询的实现原理类似于 mysql 中的 limit，比如查询第 10001 条数据，那么需要将前面的 1000 条都拿出来，进行过滤，最终才得到数据。（性能较差，实现简单，适用于少量数据）</li></ul><h4 id="search-after"><a href="#search-after" class="headerlink" title="search after"></a>search after</h4><ul><li>search_after 缺点是不能够随机跳转分页，只能是一页一页的向后翻（当有新数据进来，也能实时查询到），并且需要至少指定一个唯一不重复字段来排序（一般是_id 和时间字段）</li><li>当使用 search_after 时，from 值必须设置为 0 或者 - 1</li><li> 可以查询 10000 条以上数据</li></ul><h4 id="scroll"><a href="#scroll" class="headerlink" title="scroll"></a>scroll</h4><ul><li>高效进行滚动查询，首次查询会在内存中保存一个历史快照以及游标（scroll_id）, 记录当前消息查询的终止位置，下次查询的时候将基于游标进行消费（性能良好，不具备实时性，一般是用于大量数据导出或者索引重建）</li><li>可以查询 10000 条以上数据</li></ul><h3 id="from-size-示例"><a href="#from-size-示例" class="headerlink" title="from size 示例"></a>from size 示例</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSearch</span><span class="token punctuation">(</span><span class="token class-name">String</span> indexName<span class="token punctuation">,</span><span class="token class-name">String</span> orderName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>    <span class="token keyword">long</span> startTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 1、创建searchRequest</span>    <span class="token class-name">SearchRequest</span> searchRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchRequest</span><span class="token punctuation">(</span>indexName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 2、指定查询条件</span>    <span class="token class-name">SearchSourceBuilder</span> sourceBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchSourceBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//必须加上track_total_hits，不然就只显示10000</span>    <span class="token comment">// 页面上的第一页等同于在es中的 0</span>    sourceBuilder<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 每页多少条数据</span>    sourceBuilder<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 设置唯一排序值定位</span>    sourceBuilder<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token class-name">SortBuilders</span><span class="token punctuation">.</span><span class="token function">fieldSort</span><span class="token punctuation">(</span>orderName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">order</span><span class="token punctuation">(</span><span class="token class-name">SortOrder</span><span class="token punctuation">.</span>DESC<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//将sourceBuilder对象添加到搜索请求中</span>    searchRequest<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>sourceBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 发送请求</span>    <span class="token class-name">SearchResponse</span> searchResponse <span class="token operator">=</span> esClient<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>searchRequest<span class="token punctuation">,</span> <span class="token class-name">RequestOptions</span><span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">SearchHit</span><span class="token punctuation">[</span><span class="token punctuation">]</span> hits <span class="token operator">=</span> searchResponse<span class="token punctuation">.</span><span class="token function">getHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>hits <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> hits<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">SearchHit</span> hit <span class="token operator">:</span> hits<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 获取需要数据</span>            <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> sourceAsMap <span class="token operator">=</span> hit<span class="token punctuation">.</span><span class="token function">getSourceAsMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>sourceAsMap<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"查询出来的数据个数为：{}"</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 关闭客户端</span>    esClient<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"运行时间: "</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> startTime<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"ms"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>如果 from size 查询的数据超过 10000 条，会报错误：</p><pre class="language-none"><code class="language-none">Elasticsearch exception [type=search_phase_execution_exception, reason=all shards failed]Result window is too large, from + size must be less than or equal to: [10000] but was [10030]. See the scroll api for a more efficient way to request large data sets. This limit can be set by changing the [index.max_result_window] index level setting.</code></pre><h3 id="search-after-示例"><a href="#search-after-示例" class="headerlink" title="search after 示例"></a>search after 示例</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSearch</span><span class="token punctuation">(</span><span class="token class-name">String</span> indexName<span class="token punctuation">,</span><span class="token class-name">String</span> orderName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>    <span class="token keyword">long</span> startTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 1、创建searchRequest</span>    <span class="token class-name">SearchRequest</span> searchRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchRequest</span><span class="token punctuation">(</span>indexName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 2、指定查询条件</span>    <span class="token class-name">SearchSourceBuilder</span> sourceBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchSourceBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trackTotalHits</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//必须加上track_total_hits，不然就只显示10000</span>    <span class="token comment">//设置每页查询的数据个数</span>    sourceBuilder<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 设置唯一排序值定位</span>    sourceBuilder<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token class-name">SortBuilders</span><span class="token punctuation">.</span><span class="token function">fieldSort</span><span class="token punctuation">(</span>orderName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">order</span><span class="token punctuation">(</span><span class="token class-name">SortOrder</span><span class="token punctuation">.</span>DESC<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//多条件查询</span>    <span class="token comment">//将sourceBuilder对象添加到搜索请求中</span>    searchRequest<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>sourceBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 发送请求</span>    <span class="token class-name">SearchResponse</span> searchResponse <span class="token operator">=</span> esClient<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>searchRequest<span class="token punctuation">,</span> <span class="token class-name">RequestOptions</span><span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">SearchHit</span><span class="token punctuation">[</span><span class="token punctuation">]</span> hits1 <span class="token operator">=</span> searchResponse<span class="token punctuation">.</span><span class="token function">getHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>hits1 <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> hits1<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">do</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">SearchHit</span> hit <span class="token operator">:</span> hits1<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// 获取需要数据</span>                <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> sourceAsMap <span class="token operator">=</span> hit<span class="token punctuation">.</span><span class="token function">getSourceAsMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>sourceAsMap<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">// 取得最后得排序值sort，用于记录下次将从这个地方开始取数</span>            <span class="token class-name">SearchHit</span><span class="token punctuation">[</span><span class="token punctuation">]</span> hits <span class="token operator">=</span> searchResponse<span class="token punctuation">.</span><span class="token function">getHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> lastNum <span class="token operator">=</span> hits<span class="token punctuation">[</span>hits<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getSortValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 设置searchAfter的最后一个排序值</span>            sourceBuilder<span class="token punctuation">.</span><span class="token function">searchAfter</span><span class="token punctuation">(</span>lastNum<span class="token punctuation">)</span><span class="token punctuation">;</span>            searchRequest<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>sourceBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 进行下次查询</span>            searchResponse <span class="token operator">=</span> esClient<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>searchRequest<span class="token punctuation">,</span> <span class="token class-name">RequestOptions</span><span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>searchResponse<span class="token punctuation">.</span><span class="token function">getHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"查询出来的数据个数为：{}"</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 关闭客户端</span>    esClient<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"运行时间: "</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> startTime<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"ms"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="scroll-示例"><a href="#scroll-示例" class="headerlink" title="scroll 示例"></a>scroll 示例</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSearch</span><span class="token punctuation">(</span><span class="token class-name">String</span> indexName<span class="token punctuation">,</span><span class="token class-name">String</span> orderName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>    <span class="token keyword">long</span> startTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 1、创建searchRequest</span>    <span class="token class-name">SearchRequest</span> searchRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchRequest</span><span class="token punctuation">(</span>indexName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 2、指定scroll信息</span>    searchRequest<span class="token punctuation">.</span><span class="token function">scroll</span><span class="token punctuation">(</span><span class="token class-name">TimeValue</span><span class="token punctuation">.</span><span class="token function">timeValueMinutes</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 3、指定查询条件</span>    <span class="token class-name">SearchSourceBuilder</span> searchSourceBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchSourceBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    searchSourceBuilder<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    searchSourceBuilder<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token class-name">SortBuilders</span><span class="token punctuation">.</span><span class="token function">fieldSort</span><span class="token punctuation">(</span>orderName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">order</span><span class="token punctuation">(</span><span class="token class-name">SortOrder</span><span class="token punctuation">.</span>DESC<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//多条件查询</span>    searchRequest<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>searchSourceBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//4、获取返回结果scrollId，source</span>    <span class="token class-name">SearchResponse</span> searchResponse <span class="token operator">=</span> esClient<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>searchRequest<span class="token punctuation">,</span> <span class="token class-name">RequestOptions</span><span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//通过发送初始搜索请求来初始化搜索上下文</span>    <span class="token class-name">String</span> scrollId <span class="token operator">=</span> searchResponse<span class="token punctuation">.</span><span class="token function">getScrollId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">SearchHit</span><span class="token punctuation">[</span><span class="token punctuation">]</span> searchHits <span class="token operator">=</span> searchResponse<span class="token punctuation">.</span><span class="token function">getHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">SearchHit</span> hit<span class="token operator">:</span> searchHits<span class="token punctuation">)</span> <span class="token punctuation">{</span>        result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>hit<span class="token punctuation">.</span><span class="token function">getSourceAsMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// java也是一样要查询两次，先把我们的首页给查询出来</span>    <span class="token comment">// 查询出来之后我们要获取他的id</span>    <span class="token comment">// 然后利用他的id去查询他的下一页</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//5、循环  -  创建 SearchScrollRequest  创建一个新的搜索滚动请求，保存最后返回的滚动标识符和滚动间隔</span>        <span class="token comment">// 获取 scrollId 去查询下一页</span>        <span class="token class-name">SearchScrollRequest</span> scrollRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchScrollRequest</span><span class="token punctuation">(</span>scrollId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//6、指定scrollId的生存时间</span>        scrollRequest<span class="token punctuation">.</span><span class="token function">scroll</span><span class="token punctuation">(</span><span class="token class-name">TimeValue</span><span class="token punctuation">.</span><span class="token function">timeValueMinutes</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//7、执行查询获取返回结果</span>        <span class="token class-name">SearchResponse</span> scrollResp <span class="token operator">=</span> esClient<span class="token punctuation">.</span><span class="token function">scroll</span><span class="token punctuation">(</span>scrollRequest<span class="token punctuation">,</span> <span class="token class-name">RequestOptions</span><span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//8、判断是否查询到了数据，输出</span>        <span class="token class-name">SearchHit</span><span class="token punctuation">[</span><span class="token punctuation">]</span> hits <span class="token operator">=</span> scrollResp<span class="token punctuation">.</span><span class="token function">getHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//循环输出下一页</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>hits <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> hits<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">SearchHit</span> hit <span class="token operator">:</span> hits<span class="token punctuation">)</span> <span class="token punctuation">{</span>                result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>hit<span class="token punctuation">.</span><span class="token function">getSourceAsMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment">//9、判断没有查询到数据，退出循环</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">//查完之后我们把存进缓存的id给删除  完成滚动后，清除滚动上下文</span>    <span class="token comment">//10、创建ClearScrollRequest</span>    <span class="token class-name">ClearScrollRequest</span> clearScrollRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClearScrollRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//11、指定scrollId</span>    clearScrollRequest<span class="token punctuation">.</span><span class="token function">addScrollId</span><span class="token punctuation">(</span>scrollId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//12、删除scrollId</span>    <span class="token class-name">ClearScrollResponse</span> clearScrollResponse <span class="token operator">=</span> esClient<span class="token punctuation">.</span><span class="token function">clearScroll</span><span class="token punctuation">(</span>clearScrollRequest<span class="token punctuation">,</span> <span class="token class-name">RequestOptions</span><span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//13、输出结果</span>    <span class="token keyword">boolean</span> succeeded <span class="token operator">=</span> clearScrollResponse<span class="token punctuation">.</span><span class="token function">isSucceeded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"删除scrollId：{}"</span><span class="token punctuation">,</span> succeeded<span class="token punctuation">)</span><span class="token punctuation">;</span>    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"查询总个数：{}"</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 关闭客户端</span>    esClient<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"运行时间: "</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> startTime<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"ms"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;三种查询用法&quot;&gt;&lt;a href=&quot;#三种查询用法&quot; class=&quot;headerlink&quot; title=&quot;三种查询用法&quot;&gt;&lt;/a&gt;三种查询用法&lt;/h3&gt;&lt;p&gt;三者之间的区别&lt;/p&gt;
&lt;h4 id=&quot;from-size&quot;&gt;&lt;a href=&quot;#from-size&quot; cl</summary>
      
    
    
    
    <category term="Database" scheme="https://jueee.github.io/categories/Database/"/>
    
    <category term="ElasticSearch" scheme="https://jueee.github.io/categories/Database/ElasticSearch/"/>
    
    
    <category term="ElasticSearch" scheme="https://jueee.github.io/tags/ElasticSearch/"/>
    
    <category term="Database" scheme="https://jueee.github.io/tags/Database/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 全文索引实现相似度搜索</title>
    <link href="https://jueee.github.io/2022/11/2022-11-01-MySQL%E5%85%A8%E6%96%87%E7%B4%A2%E5%BC%95%E5%AE%9E%E7%8E%B0%E7%9B%B8%E4%BC%BC%E5%BA%A6%E6%90%9C%E7%B4%A2/"/>
    <id>https://jueee.github.io/2022/11/2022-11-01-MySQL%E5%85%A8%E6%96%87%E7%B4%A2%E5%BC%95%E5%AE%9E%E7%8E%B0%E7%9B%B8%E4%BC%BC%E5%BA%A6%E6%90%9C%E7%B4%A2/</id>
    <published>2022-11-01T00:00:00.000Z</published>
    <updated>2022-11-14T07:31:34.471Z</updated>
    
    <content type="html"><![CDATA[<h3 id="MySQL-全文检索"><a href="#MySQL-全文检索" class="headerlink" title="MySQL 全文检索"></a>MySQL 全文检索</h3><p>在 Mysql 5.7.6 后 Mysql 内置了 ngram 分词疫情，可以实现中文、日文、韩文的解析。</p><p>我们需要对指定字段建立全文索引并指定分词引擎。</p><a id="more"></a><ul><li><span class="exturl" data-url="aHR0cHM6Ly9kZXYubXlzcWwuY29tL2RvYy9yZWZtYW4vNS43L2VuL2Z1bGx0ZXh0LW5hdHVyYWwtbGFuZ3VhZ2UuaHRtbA==">官方文档<i class="fa fa-external-link-alt"></i></span></li></ul><p>【注意】建立全文索引的字段 数据类型只能为 VARCHAR, TEXT, CHAR</p><h3 id="设置分词"><a href="#设置分词" class="headerlink" title="设置分词"></a>设置分词</h3><p>通过设置 MySQL 的 ngram_token_size 参数。</p><pre class="language-none"><code class="language-none">默认值：2最小值：1最大值：10</code></pre><p>查看参数：</p><pre class="language-MYSQL" data-language="MYSQL"><code class="language-MYSQL">show variables like 'ngram_token_size';</code></pre><h3 id="建立索引"><a href="#建立索引" class="headerlink" title="建立索引"></a>建立索引</h3><p>选定分词引擎建立 FLULTEXT 索引：</p><pre class="language-MYSQL" data-language="MYSQL"><code class="language-MYSQL">ALTER TABLE `table_name` ADD FULLTEXT INDEX `index_name`(`column_name`) WITH PARSER ngram;</code></pre><h3 id="进行搜索"><a href="#进行搜索" class="headerlink" title="进行搜索"></a>进行搜索</h3><p>建立索引后，可以通过 match against 语句进行搜索</p><pre class="language-MYSQL" data-language="MYSQL"><code class="language-MYSQL">SELECT * FROM `table` WHERE MATCH (`column`) against('你好世界')</code></pre><h3 id="全文索引的两种搜索模式"><a href="#全文索引的两种搜索模式" class="headerlink" title="全文索引的两种搜索模式"></a>全文索引的两种搜索模式</h3><ul><li>自然语言搜索 (也是默认的搜索模式): 不能使用操作符 进行复杂检索.</li><li>BOOLEAN 模式：可以通过操作符 进行复杂搜索，与搜索引擎类似.</li></ul><pre class="language-MYSQL" data-language="MYSQL"><code class="language-MYSQL">SELECT * FROM `table` WHERE MATCH (`column`) against('你好世界' IN NATURAL LANGUAGE MODE)# 必须包含'你好', 但不能包含'我的'SELECT * FROM `table` WHERE MATCH (`column`) against('+你好 -我的' IN BOOLEAN MODE)</code></pre>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;MySQL-全文检索&quot;&gt;&lt;a href=&quot;#MySQL-全文检索&quot; class=&quot;headerlink&quot; title=&quot;MySQL 全文检索&quot;&gt;&lt;/a&gt;MySQL 全文检索&lt;/h3&gt;&lt;p&gt;在 Mysql 5.7.6 后 Mysql 内置了 ngram 分词疫情，可以实现中文、日文、韩文的解析。&lt;/p&gt;
&lt;p&gt;我们需要对指定字段建立全文索引并指定分词引擎。&lt;/p&gt;</summary>
    
    
    
    <category term="Database" scheme="https://jueee.github.io/categories/Database/"/>
    
    <category term="MySQL" scheme="https://jueee.github.io/categories/Database/MySQL/"/>
    
    
    <category term="MySQL" scheme="https://jueee.github.io/tags/MySQL/"/>
    
    <category term="Database" scheme="https://jueee.github.io/tags/Database/"/>
    
  </entry>
  
  <entry>
    <title>力扣的 1024・马尔可夫链卡牌活动编程实现</title>
    <link href="https://jueee.github.io/2022/10/2022-10-24-%E5%8A%9B%E6%89%A3%E7%9A%841024%20%C2%B7%20%E9%A9%AC%E5%B0%94%E5%8F%AF%E5%A4%AB%E9%93%BE%E5%8D%A1%E7%89%8C%E6%B4%BB%E5%8A%A8%E7%BC%96%E7%A8%8B%E5%AE%9E%E7%8E%B0/"/>
    <id>https://jueee.github.io/2022/10/2022-10-24-%E5%8A%9B%E6%89%A3%E7%9A%841024%20%C2%B7%20%E9%A9%AC%E5%B0%94%E5%8F%AF%E5%A4%AB%E9%93%BE%E5%8D%A1%E7%89%8C%E6%B4%BB%E5%8A%A8%E7%BC%96%E7%A8%8B%E5%AE%9E%E7%8E%B0/</id>
    <published>2022-10-24T00:00:00.000Z</published>
    <updated>2022-10-21T05:40:57.021Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1024-·-马尔可夫链"><a href="#1024-·-马尔可夫链" class="headerlink" title="1024 · 马尔可夫链"></a>1024・马尔可夫链</h3><p>2022 年 10 月 17 日 18:00 - 2022 年 10 月 31 日 18:00，参与「1024・马尔可夫链」游戏，完成指定行为可以获得力扣 1024 活动奖励。</p><ul><li>活动介绍：<span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jbi9jaXJjbGUvZGlzY3Vzcy9KbVgzTTYv">https://leetcode.cn/circle/discuss/JmX3M6/<i class="fa fa-external-link-alt"></i></span></li></ul><a id="more"></a><h4 id="游戏规则"><a href="#游戏规则" class="headerlink" title="游戏规则"></a>游戏规则</h4><p>活动期间用户可以使用已经获得的 数字牌 和 运算符号牌 进行运算；<br>单次运算只能是 2 个数字之间的运算，且运算过程不可逆；<br>在 3 次运算后， 运算结果为 1024 时记为成功，否则记为失败。失败时，将返还全部用于计算的卡牌（包括 数字牌 及 运算符号牌）。<br>运算结果的取值范围为 32 位有符号整数，超过此范围将提示报错。</p><p>作者：力扣 (LeetCode)<br>链接：<span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jbi9jaXJjbGUvZGlzY3Vzcy9KbVgzTTYv">https://leetcode.cn/circle/discuss/JmX3M6/<i class="fa fa-external-link-alt"></i></span><br>来源：力扣（LeetCode）<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p><h3 id="运算符号"><a href="#运算符号" class="headerlink" title="运算符号"></a>运算符号</h3><table><thead><tr><th>运算操作</th><th>符号</th></tr></thead><tbody><tr><td>加法</td><td> +</td></tr><tr><td> 减法</td><td> -</td></tr><tr><td> 乘法</td><td> *</td></tr><tr><td> 幂运算</td><td> **</td></tr><tr><td> 取余</td><td> %</td></tr><tr><td> 整除</td><td> //</td></tr><tr><td> 或</td><td>｜</td></tr><tr><td>与</td><td> &amp;</td></tr><tr><td> 异或</td><td> ^</td></tr><tr><td> 左移</td><td> &lt;&lt;</td></tr><tr><td> 右移</td><td> &gt;&gt;</td></tr></tbody></table><h3 id="编程Python实现"><a href="#编程Python实现" class="headerlink" title="编程Python实现"></a>编程 Python 实现</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">calculate_res</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> ops<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        r1 <span class="token operator">=</span> my_op<span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ops<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        r2 <span class="token operator">=</span> my_op<span class="token punctuation">(</span>r1<span class="token punctuation">,</span> nums<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ops<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        r3 <span class="token operator">=</span> my_op<span class="token punctuation">(</span>r2<span class="token punctuation">,</span> nums<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ops<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> r3<span class="token operator">==</span><span class="token number">1024</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ops<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'='</span><span class="token punctuation">,</span>r1<span class="token punctuation">,</span><span class="token string">'\t'</span><span class="token punctuation">,</span>r1<span class="token punctuation">,</span> ops<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'='</span><span class="token punctuation">,</span>r2<span class="token punctuation">,</span><span class="token string">'\t'</span><span class="token punctuation">,</span>r2<span class="token punctuation">,</span> ops<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'='</span><span class="token punctuation">,</span>r3<span class="token punctuation">)</span>    <span class="token keyword">except</span> ZeroDivisionError<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token keyword">return</span> r3<span class="token keyword">def</span> <span class="token function">my_op</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> op<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> op <span class="token operator">==</span> <span class="token string">'+'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> x <span class="token operator">+</span> y    <span class="token keyword">elif</span> op <span class="token operator">==</span> <span class="token string">'-'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> x <span class="token operator">-</span> y    <span class="token keyword">elif</span> op <span class="token operator">==</span> <span class="token string">'*'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> x <span class="token operator">*</span> y    <span class="token keyword">elif</span> op <span class="token operator">==</span> <span class="token string">'//'</span><span class="token punctuation">:</span>    <span class="token comment"># 整除</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> x <span class="token operator">//</span> y        <span class="token keyword">except</span> ZeroDivisionError<span class="token punctuation">:</span>            <span class="token keyword">raise</span> ZeroDivisionError    <span class="token keyword">elif</span> op <span class="token operator">==</span> <span class="token string">'**'</span><span class="token punctuation">:</span>    <span class="token comment"># 幂运算</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token builtin">int</span><span class="token punctuation">(</span>x <span class="token operator">**</span> y<span class="token punctuation">)</span>        <span class="token keyword">except</span> ZeroDivisionError<span class="token punctuation">:</span>            <span class="token keyword">raise</span> ZeroDivisionError    <span class="token keyword">elif</span> op <span class="token operator">==</span> <span class="token string">'&amp;'</span><span class="token punctuation">:</span>     <span class="token comment"># 与</span>        <span class="token keyword">return</span> x <span class="token operator">&amp;</span> y    <span class="token keyword">elif</span> op <span class="token operator">==</span> <span class="token string">'|'</span><span class="token punctuation">:</span>     <span class="token comment"># 或</span>        <span class="token keyword">return</span> x <span class="token operator">|</span> y    <span class="token keyword">elif</span> op <span class="token operator">==</span> <span class="token string">'^'</span><span class="token punctuation">:</span>     <span class="token comment"># 异或</span>        <span class="token keyword">return</span> x <span class="token operator">^</span> y    <span class="token keyword">elif</span> op <span class="token operator">==</span> <span class="token string">'&gt;&gt;'</span><span class="token punctuation">:</span>    <span class="token comment"># 右移</span>        <span class="token keyword">return</span> x <span class="token operator">&gt;&gt;</span> y    <span class="token keyword">elif</span> op <span class="token operator">==</span> <span class="token string">'&lt;&lt;'</span><span class="token punctuation">:</span>    <span class="token comment"># 左移</span>        <span class="token keyword">return</span> x <span class="token operator">&lt;&lt;</span> y    <span class="token keyword">elif</span> op <span class="token operator">==</span> <span class="token string">'%'</span><span class="token punctuation">:</span>     <span class="token comment"># 取余</span>        <span class="token keyword">return</span> x <span class="token operator">%</span> y<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>  <span class="token comment"># 填拥有的数字卡</span>    ops <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"&gt;&gt;"</span><span class="token punctuation">,</span> <span class="token string">"**"</span><span class="token punctuation">,</span> <span class="token string">"//"</span><span class="token punctuation">]</span>  <span class="token comment"># 请填入拥有的符号卡</span>    <span class="token keyword">from</span> itertools <span class="token keyword">import</span> permutations <span class="token comment"># 全排列</span>    <span class="token keyword">for</span> n_perm <span class="token keyword">in</span> permutations<span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> o_perm <span class="token keyword">in</span> permutations<span class="token punctuation">(</span>ops<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                res <span class="token operator">=</span> calculate_res<span class="token punctuation">(</span>n_perm<span class="token punctuation">,</span> o_perm<span class="token punctuation">)</span>                <span class="token keyword">if</span> res <span class="token operator">==</span> <span class="token number">1024</span><span class="token punctuation">:</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span>n_perm<span class="token punctuation">,</span> o_perm<span class="token punctuation">,</span> n_perm<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>o_perm<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>n_perm<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">except</span> TypeError<span class="token punctuation">:</span>                <span class="token keyword">pass</span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;1024-·-马尔可夫链&quot;&gt;&lt;a href=&quot;#1024-·-马尔可夫链&quot; class=&quot;headerlink&quot; title=&quot;1024 · 马尔可夫链&quot;&gt;&lt;/a&gt;1024・马尔可夫链&lt;/h3&gt;&lt;p&gt;2022 年 10 月 17 日 18:00 - 2022 年 10 月 31 日 18:00，参与「1024・马尔可夫链」游戏，完成指定行为可以获得力扣 1024 活动奖励。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;活动介绍：&lt;a href=&quot;https://leetcode.cn/circle/discuss/JmX3M6/&quot;&gt;https://leetcode.cn/circle/discuss/JmX3M6/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Python" scheme="https://jueee.github.io/categories/Python/"/>
    
    
    <category term="Python" scheme="https://jueee.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 设置时区 serverTimezone</title>
    <link href="https://jueee.github.io/2022/09/2022-09-26-MySQL%E8%AE%BE%E7%BD%AE%E6%97%B6%E5%8C%BAserverTimezone/"/>
    <id>https://jueee.github.io/2022/09/2022-09-26-MySQL%E8%AE%BE%E7%BD%AE%E6%97%B6%E5%8C%BAserverTimezone/</id>
    <published>2022-09-26T00:00:00.000Z</published>
    <updated>2022-09-26T02:07:44.337Z</updated>
    
    <content type="html"><![CDATA[<h3 id="UTC"><a href="#UTC" class="headerlink" title="UTC"></a>UTC</h3><p>UTC，简称世界统一时间，跟北京时间相比，比北京早 8 个小时。</p><p>如果你设置 serverTimezone=UTC，连接不报错，但是我们在用 java 代码插入到数据库时间的时候却出现了问题。</p><p>比如在 java 代码里面插入的时间为：2022-09-26 09:44:12</p><p>但是在数据库里面显示的时间却为：2022-09-26 01:44:12</p><p>有了 8 个小时的时差。</p><h3 id="设置国内时间"><a href="#设置国内时间" class="headerlink" title="设置国内时间"></a>设置国内时间</h3><p>东八区时间：</p><pre class="language-none"><code class="language-none">serverTimezone=GMT%2B8</code></pre><p>上海时间：</p><pre class="language-none"><code class="language-none">serverTimezone=Asia/Shanghai</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;UTC&quot;&gt;&lt;a href=&quot;#UTC&quot; class=&quot;headerlink&quot; title=&quot;UTC&quot;&gt;&lt;/a&gt;UTC&lt;/h3&gt;&lt;p&gt;UTC，简称世界统一时间，跟北京时间相比，比北京早 8 个小时。&lt;/p&gt;
&lt;p&gt;如果你设置 serverTimezone=UTC，连</summary>
      
    
    
    
    <category term="Database" scheme="https://jueee.github.io/categories/Database/"/>
    
    <category term="MySQL" scheme="https://jueee.github.io/categories/Database/MySQL/"/>
    
    
    <category term="MySQL" scheme="https://jueee.github.io/tags/MySQL/"/>
    
    <category term="Database" scheme="https://jueee.github.io/tags/Database/"/>
    
  </entry>
  
  <entry>
    <title>Bootstrap Multiselect 动态赋值</title>
    <link href="https://jueee.github.io/2022/09/2022-09-02-Bootstrap%20Multiselect%20%E5%8A%A8%E6%80%81%E8%B5%8B%E5%80%BC/"/>
    <id>https://jueee.github.io/2022/09/2022-09-02-Bootstrap%20Multiselect%20%E5%8A%A8%E6%80%81%E8%B5%8B%E5%80%BC/</id>
    <published>2022-09-02T00:00:00.000Z</published>
    <updated>2022-09-02T06:56:41.847Z</updated>
    
    <content type="html"><![CDATA[<p>记录在用 Bootstrap Multiselect 的时候，从后台传来的值，动态赋值的解决方法。</p><a id="more"></a><h3 id="动态赋值"><a href="#动态赋值" class="headerlink" title="动态赋值"></a>动态赋值</h3><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> newDatas <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>$<span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span>datas<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">index<span class="token punctuation">,</span> temp</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    obj <span class="token operator">=</span> <span class="token punctuation">{</span>        label <span class="token operator">:</span> temp<span class="token punctuation">.</span>text<span class="token punctuation">,</span>        value <span class="token operator">:</span> temp<span class="token punctuation">.</span>id    <span class="token punctuation">}</span><span class="token punctuation">;</span>    newDatas<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#dataId"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">multiselect</span><span class="token punctuation">(</span><span class="token string">'dataprovider'</span><span class="token punctuation">,</span> newDatas<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#dataId'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">multiselect</span><span class="token punctuation">(</span><span class="token string">'refresh'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>其中，<code>datas</code> 为动态赋值的键值对数组。</p><h3 id="FreeMarker"><a href="#FreeMarker" class="headerlink" title="FreeMarker"></a>FreeMarker</h3><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> newDatas <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>#list dataList <span class="token keyword">as</span> temp<span class="token operator">&gt;</span>    obj <span class="token operator">=</span> <span class="token punctuation">{</span>        label <span class="token operator">:</span> <span class="token string">'${temp.text}'</span><span class="token punctuation">,</span>        value <span class="token operator">:</span> <span class="token string">'${temp.id}'</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    newDatas<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span><span class="token operator">/</span>#list<span class="token operator">&gt;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#dataId"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">multiselect</span><span class="token punctuation">(</span><span class="token string">'dataprovider'</span><span class="token punctuation">,</span> newDatas<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#dataId'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">multiselect</span><span class="token punctuation">(</span><span class="token string">'refresh'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>其中，<code>dataList</code> 为后台返回的键值对数组。</p><h3 id="动态赋值后重新勾选"><a href="#动态赋值后重新勾选" class="headerlink" title="动态赋值后重新勾选"></a>动态赋值后重新勾选</h3><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> dataSearch <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#dataSearch"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>dataSearch<span class="token operator">!=</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#dataId'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">multiselect</span><span class="token punctuation">(</span><span class="token string">'select'</span><span class="token punctuation">,</span> dataSearch<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>其中，<code>dataSearch</code> 为动态赋值前的勾选值。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;记录在用 Bootstrap Multiselect 的时候，从后台传来的值，动态赋值的解决方法。&lt;/p&gt;</summary>
    
    
    
    <category term="JavaScript" scheme="https://jueee.github.io/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://jueee.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Debian 服务器安装初始化操作汇总</title>
    <link href="https://jueee.github.io/2022/08/2022-08-28-Debian%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85%E5%88%9D%E5%A7%8B%E5%8C%96%E6%93%8D%E4%BD%9C%E6%B1%87%E6%80%BB/"/>
    <id>https://jueee.github.io/2022/08/2022-08-28-Debian%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85%E5%88%9D%E5%A7%8B%E5%8C%96%E6%93%8D%E4%BD%9C%E6%B1%87%E6%80%BB/</id>
    <published>2022-08-28T00:00:00.000Z</published>
    <updated>2023-01-13T02:23:38.861Z</updated>
    
    <content type="html"><![CDATA[<p>整理一下 Debian 服务器安装初始化操作汇总。</p><a id="more"></a><h3 id="查看Debian版本"><a href="#查看Debian版本" class="headerlink" title="查看Debian版本"></a>查看 Debian 版本</h3><pre class="language-none"><code class="language-none">jue@debian:~$ uname -r4.9.0-12-amd64jue@debian:~$ lsb_release -crRelease:        9.12Codename:       stretch</code></pre><h3 id="初始化-vi-编辑器"><a href="#初始化-vi-编辑器" class="headerlink" title="初始化 vi 编辑器"></a>初始化 vi 编辑器</h3><p>执行以下命令再使用 vi 编辑器：</p><pre class="language-none"><code class="language-none">cp /etc/vim/vimrc ~/.vimrc</code></pre><p>Vi 编辑器在文本输入模式时，不能正确使用方向键和退格键，或者是输入内容无法正常的内容，解决方法：</p><pre class="language-none"><code class="language-none">sudo sed -i '$a\set nocompatible' /etc/vim/vimrc.tinysudo sed -i '$a\set backspace=2' /etc/vim/vimrc.tiny</code></pre><h3 id="运行-dpkg-命令设置"><a href="#运行-dpkg-命令设置" class="headerlink" title="运行 dpkg 命令设置"></a>运行 dpkg 命令设置</h3><p>如果无法运行 dpkg 命令，提示：</p><blockquote><p>dpkg: warningL 'ldconfig' not found in PATH or not executable</p></blockquote><p>解决方案是添加环境变量，修改配置文件 <code>~/.bashrc</code>：</p><p>添加如下环境变量配置：</p><pre class="language-none"><code class="language-none">export PATH=PATH:/sbin:/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin</code></pre><p>保存退出编辑，然后执行 <code>source ~/.bashrc</code> 使配置生效。</p><h3 id="设置-IP-地址"><a href="#设置-IP-地址" class="headerlink" title="设置 IP 地址"></a>设置 IP 地址</h3><p>通过 <code>ifconfig</code> 或者 <code>ip addr</code> 查看网卡信息。</p><p>以下以网卡名称 eth0 为例进行说明。</p><h4 id="设置静态-IP"><a href="#设置静态-IP" class="headerlink" title="设置静态 IP"></a>设置静态 IP</h4><p>配置网卡文件 <code>/etc/network/inferfaces</code>：</p><pre class="language-none"><code class="language-none">auto eth0allow-hotplug eth0iface eth0 inet staticaddress 192.168.0.11netmask 255.255.255.0gateway 192.168.0.1</code></pre><h4 id="设置动态-IP"><a href="#设置动态-IP" class="headerlink" title="设置动态 IP"></a>设置动态 IP</h4><p>配置网卡文件 <code>/etc/network/inferfaces</code>：</p><pre class="language-none"><code class="language-none">auto eth0iface eth0 inet dhcp</code></pre><h4 id="重启网络配置"><a href="#重启网络配置" class="headerlink" title="重启网络配置"></a>重启网络配置</h4><pre class="language-none"><code class="language-none">/etc/init.d/networking restart</code></pre><h3 id="ssh-服务开机自启动"><a href="#ssh-服务开机自启动" class="headerlink" title="ssh 服务开机自启动"></a>ssh 服务开机自启动</h3><p>设置 ssh 服务开机自启动：</p><pre class="language-none"><code class="language-none">sudo systemctl enable ssh</code></pre><p>设置成功后，可以用 chkconfig 查看一下 ssh 的开机启动状态，on 表示已设置开机自启动。</p><p>设置 ssh 服务禁用开启自启动：</p><pre class="language-none"><code class="language-none">sudo systemctl disable ssh</code></pre><h3 id="允许root远程登陆"><a href="#允许root远程登陆" class="headerlink" title="允许root远程登陆"></a>允许 root 远程登陆</h3><p>编辑配置文件 <code>sudo vim /etc/ssh/sshd_config</code>。</p><p>将 <code>PermitRootLogin prohibit-password</code> 更改为：<code>PermitRootLogin yes</code></p><p>如果 <code>PermitRootLogin prohibit-password</code> 被注释，则取消注释并更改为 <code>PermitRootLogin yes</code></p><p>重启 ssh 服务：</p><pre class="language-none"><code class="language-none">sudo systemctl restart sshdsudo service sshd restart</code></pre><p>再次进行远程登录，即可成功。</p><h3 id="挂载硬盘"><a href="#挂载硬盘" class="headerlink" title="挂载硬盘"></a>挂载硬盘</h3><p>查看磁盘使用情况，获取磁盘名称和是否已经挂载的信息：</p><pre class="language-none"><code class="language-none">fdisk -l</code></pre><p>格式化磁盘：</p><pre class="language-none"><code class="language-none">mkfs ext4 /dev/vdb</code></pre><p>创建目录并进行挂载：</p><pre class="language-none"><code class="language-none">mkdir /data1mount /dev/vdb /data1</code></pre><p>最后可以通过 <code>df -lh</code> 查看磁盘挂载的情况。</p><h3 id="卸载磁盘挂载"><a href="#卸载磁盘挂载" class="headerlink" title="卸载磁盘挂载"></a>卸载磁盘挂载</h3><pre class="language-none"><code class="language-none">umount /dev/vdb</code></pre><h3 id="开机自动挂载磁盘"><a href="#开机自动挂载磁盘" class="headerlink" title="开机自动挂载磁盘"></a>开机自动挂载磁盘</h3><p>先获取磁盘 UUID：</p><pre class="language-none"><code class="language-none">$ sudo blkid /dev/vdb/dev/vdb: LABEL="D" UUID="3AFE93C9FE937BB7" TYPE="ext4" </code></pre><p>配置自动挂载：</p><pre class="language-none"><code class="language-none">$ sudo vim /etc/fstab</code></pre><p>在文件末尾添加：</p><pre class="language-none"><code class="language-none">UUID=3AFE93C9FE937BB7/data1ext4defaults02</code></pre><p>注意：</p><ul><li>第一个：UUID 为上面<strong>通过 blkid 获取到的 UUID 内容</strong>，注意不要加双引号。</li><li>第二个：为磁盘挂载的位置。</li><li>第三个：为 ntfs 为上面<strong>通过 blkid 获取到的 TYPE 内容</strong>，注意不要加双引号。</li><li>第四个：<strong>0 -&gt; 开机不检查磁盘，1 -&gt; 开机检查磁盘</strong></li><li>第五个：<strong>0 -&gt; 交换分区，1 -&gt; 启动分区（Linux），2 -&gt; 普通分区</strong></li></ul><h3 id="Python-文件传输"><a href="#Python-文件传输" class="headerlink" title="Python 文件传输"></a>Python 文件传输</h3><p>如果 python 版本为 2.x ，输入命令：</p><pre class="language-none"><code class="language-none">python -m SimpleHTTPServer 8000</code></pre><p>如果 python 版本为 3.x ，输入命令：</p><pre class="language-none"><code class="language-none">python -m http.server 8000</code></pre><p>以上两个命令，端口不指定时，默认 8000 端口。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;整理一下 Debian 服务器安装初始化操作汇总。&lt;/p&gt;</summary>
    
    
    
    <category term="OS" scheme="https://jueee.github.io/categories/OS/"/>
    
    <category term="Debian" scheme="https://jueee.github.io/categories/OS/Debian/"/>
    
    
    <category term="OS" scheme="https://jueee.github.io/tags/OS/"/>
    
    <category term="Debian" scheme="https://jueee.github.io/tags/Debian/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu 下删除键失效的解决方案</title>
    <link href="https://jueee.github.io/2022/08/2022-08-24-Ubuntu%E4%B8%8B%E5%88%A0%E9%99%A4%E9%94%AE%E5%A4%B1%E6%95%88%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>https://jueee.github.io/2022/08/2022-08-24-Ubuntu%E4%B8%8B%E5%88%A0%E9%99%A4%E9%94%AE%E5%A4%B1%E6%95%88%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</id>
    <published>2022-08-24T00:00:00.000Z</published>
    <updated>2022-08-29T02:28:01.496Z</updated>
    
    <content type="html"><![CDATA[<p>在 Ubuntu 系统下，因为误操作，导致删除键（backspace）以及方向键失效，按下删除键反而会多出来一个空格。</p><h3 id="出现的问题"><a href="#出现的问题" class="headerlink" title="出现的问题"></a>出现的问题</h3><p>误删 ncurses-base 后导致终端输入窗口出现了一系列的问题：</p><p>Ubuntu 终端输入无法退格（删除文本）、使用↑↓方向键无法切换最近的命令，而是复制上次的命令、换行显示异常等。</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>重装 ncurses-base 库，并重启 Ubuntu（或者重启终端）。</p><p>重装方法：</p><pre class="language-csharp" data-language="csharp"><code class="language-csharp">sudo apt<span class="token operator">-</span><span class="token keyword">get</span> install ncurses<span class="token operator">-</span><span class="token keyword">base</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在 Ubuntu 系统下，因为误操作，导致删除键（backspace）以及方向键失效，按下删除键反而会多出来一个空格。&lt;/p&gt;
&lt;h3 id=&quot;出现的问题&quot;&gt;&lt;a href=&quot;#出现的问题&quot; class=&quot;headerlink&quot; title=&quot;出现的问题&quot;&gt;&lt;/a&gt;出现的问</summary>
      
    
    
    
    <category term="OS" scheme="https://jueee.github.io/categories/OS/"/>
    
    <category term="Ubuntu" scheme="https://jueee.github.io/categories/OS/Ubuntu/"/>
    
    
    <category term="OS" scheme="https://jueee.github.io/tags/OS/"/>
    
    <category term="Ubuntu" scheme="https://jueee.github.io/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu 看不到磁盘进行挂载</title>
    <link href="https://jueee.github.io/2022/08/2022-08-23-Ubuntu%E7%9C%8B%E4%B8%8D%E5%88%B0%E7%A3%81%E7%9B%98%E8%BF%9B%E8%A1%8C%E6%8C%82%E8%BD%BD/"/>
    <id>https://jueee.github.io/2022/08/2022-08-23-Ubuntu%E7%9C%8B%E4%B8%8D%E5%88%B0%E7%A3%81%E7%9B%98%E8%BF%9B%E8%A1%8C%E6%8C%82%E8%BD%BD/</id>
    <published>2022-08-23T00:00:00.000Z</published>
    <updated>2022-08-29T02:28:01.495Z</updated>
    
    <content type="html"><![CDATA[<p>Ubuntu 在重启后，看不到磁盘了，下面介绍如何进行重新挂载。</p><a id="more"></a><h3 id="查看所有磁盘"><a href="#查看所有磁盘" class="headerlink" title="查看所有磁盘"></a>查看所有磁盘</h3><p>安装 Ubuntu 20.04 进入系统后看不到之前分配的磁盘。</p><pre class="language-none"><code class="language-none">$ df -lh文件系统        容量  已用  可用 已用% 挂载点udev            7.7G     0  7.7G    0% /devtmpfs           1.6G  3.2M  1.6G    1% /run/dev/nvme0n1p2  234G   31G  191G   14% /tmpfs           7.7G   73M  7.6G    1% /dev/shmtmpfs           5.0M  4.0K  5.0M    1% /run/locktmpfs           7.7G     0  7.7G    0% /sys/fs/cgroup/dev/nvme0n1p1  511M  5.3M  506M    2% /boot/efitmpfs           1.6G   40K  1.6G    1% /run/user/1000</code></pre><h3 id="查看所有分区"><a href="#查看所有分区" class="headerlink" title="查看所有分区"></a>查看所有分区</h3><pre class="language-none"><code class="language-none">$ sudo fdisk -l Disk /dev/nvme0n1：476.96 GiB，512110190592 字节，1000215216 个扇区Disk model: WDC PC SN730 SDBQNTY-512G-1001          单元：扇区 / 1 * 512 = 512 字节扇区大小(逻辑/物理)：512 字节 / 512 字节I/O 大小(最小/最佳)：512 字节 / 512 字节磁盘标签类型：gpt磁盘标识符：35631C71-83E4-4618-8493-BB887A5C5062设备                起点       末尾      扇区   大小 类型/dev/nvme0n1p1      4096    2101247   2097152     1G Linux 文件系统/dev/nvme0n1p2   2101248  500744191 498642944 237.8G Linux 文件系统/dev/nvme0n1p3 500746240 1000214527 499468288 238.2G Microsoft 基本数据</code></pre><h3 id="挂载分区"><a href="#挂载分区" class="headerlink" title="挂载分区"></a>挂载分区</h3><p>发现 <code>/dev/nvme0n1p3</code> 未显示<br>于是把他挂载到 <code>/mnt/data</code> 下：</p><pre class="language-none"><code class="language-none">~$ sudo mkdir /mnt/data~$ sudo mount /dev/nvme0n1p3 /mnt/data</code></pre><p>查看磁盘：</p><pre class="language-none"><code class="language-none">$ df -lh文件系统        容量  已用  可用 已用% 挂载点udev            7.7G     0  7.7G    0% /devtmpfs           1.6G  3.2M  1.6G    1% /run/dev/nvme0n1p2  234G   31G  191G   14% /tmpfs           7.7G   73M  7.6G    1% /dev/shmtmpfs           5.0M  4.0K  5.0M    1% /run/locktmpfs           7.7G     0  7.7G    0% /sys/fs/cgroup/dev/nvme0n1p3  239G   32G  207G   14% /mnt/data/dev/nvme0n1p1  511M  5.3M  506M    2% /boot/efitmpfs           1.6G   40K  1.6G    1% /run/user/1000</code></pre><h3 id="问题处理"><a href="#问题处理" class="headerlink" title="问题处理"></a>问题处理</h3><p>如果挂载的时候提示：</p><pre class="language-none"><code class="language-none">mount: /data1: wrong fs type, bad option, bad superblock on /dev/sdb, missing codepage or helper program, or other erro</code></pre><p>那么需要：</p><pre class="language-none"><code class="language-none">$ mkfs -t ext4 /dev/sdb</code></pre><h3 id="开机自动挂载"><a href="#开机自动挂载" class="headerlink" title="开机自动挂载"></a>开机自动挂载</h3><p>先获取磁盘 UUID：</p><pre class="language-none"><code class="language-none">$ sudo blkid /dev/nvme0n1p3/dev/nvme0n1p3: LABEL="D" UUID="3AFE93C9FE937BB7" TYPE="ntfs" PARTLABEL="Basic data partition" PARTUUID="1fe88d4a-788f-4f2d-946f-38c85cdc22e0"</code></pre><p>配置自动挂载：</p><pre class="language-none"><code class="language-none">$ sudo vim /etc/fstab</code></pre><p>在文件末尾添加：</p><pre class="language-none"><code class="language-none">UUID=3AFE93C9FE937BB7/mnt/datantfs02</code></pre><p>注意：</p><ul><li>第一个：UUID 为上面<strong>通过 blkid 获取到的 UUID 内容</strong>，注意不要加双引号。</li><li>第二个：为磁盘挂载的位置。</li><li>第三个：为 ntfs 为上面<strong>通过 blkid 获取到的 TYPE 内容</strong>，注意不要加双引号。</li><li>第四个：<strong>0 -&gt; 开机不检查磁盘，1 -&gt; 开机检查磁盘</strong></li><li>第五个：<strong>0 -&gt; 交换分区，1 -&gt; 启动分区（Linux），2 -&gt; 普通分区</strong></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;Ubuntu 在重启后，看不到磁盘了，下面介绍如何进行重新挂载。&lt;/p&gt;</summary>
    
    
    
    <category term="OS" scheme="https://jueee.github.io/categories/OS/"/>
    
    <category term="Ubuntu" scheme="https://jueee.github.io/categories/OS/Ubuntu/"/>
    
    
    <category term="OS" scheme="https://jueee.github.io/tags/OS/"/>
    
    <category term="Ubuntu" scheme="https://jueee.github.io/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Java 获取对象实例的字节大小</title>
    <link href="https://jueee.github.io/2022/08/2022-08-22-Java%E8%8E%B7%E5%8F%96%E5%AF%B9%E8%B1%A1%E5%AE%9E%E4%BE%8B%E7%9A%84%E5%AD%97%E8%8A%82%E5%A4%A7%E5%B0%8F/"/>
    <id>https://jueee.github.io/2022/08/2022-08-22-Java%E8%8E%B7%E5%8F%96%E5%AF%B9%E8%B1%A1%E5%AE%9E%E4%BE%8B%E7%9A%84%E5%AD%97%E8%8A%82%E5%A4%A7%E5%B0%8F/</id>
    <published>2022-08-22T00:00:00.000Z</published>
    <updated>2022-08-29T02:28:01.495Z</updated>
    
    <content type="html"><![CDATA[<p>有些时候，我们需要获取 Java 对象的字节大小，来进行一些判断处理。</p><p>那么，应该如何获取 Java 对象的字节大小呢？</p><p>参考地址：<span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNTIzNTMvaW4tamF2YS13aGF0LWlzLXRoZS1iZXN0LXdheS10by1kZXRlcm1pbmUtdGhlLXNpemUtb2YtYW4tb2JqZWN0">in-java-what-is-the-best-way-to-determine-the-size-of-an-object<i class="fa fa-external-link-alt"></i></span></p><a id="more"></a><h3 id="ObjectSizeCalculator-类"><a href="#ObjectSizeCalculator-类" class="headerlink" title="ObjectSizeCalculator 类"></a>ObjectSizeCalculator 类</h3><p>对于 JDK8，<code>jdk.nashorn.internal.ir.debug.ObjectSizeCalculator</code>：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">ObjectSizeCalculator</span><span class="token punctuation">.</span><span class="token function">getObjectSize</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>如果 maven 打包时，提示没有 <code>ObjectSizeCalculator</code> 类，则需要引入 <code>nashorn.jar</code> 依赖：</p><pre class="language-none"><code class="language-none">&lt;dependency&gt;   &lt;groupId&gt;javafx&lt;/groupId&gt;   &lt;artifactId&gt;nashorn&lt;/artifactId&gt;   &lt;version&gt;${java.version}&lt;/version&gt;   &lt;scope&gt;system&lt;/scope&gt;   &lt;systemPath&gt;${java.home}/lib/ext/nashorn.jar&lt;/systemPath&gt;&lt;/dependency&gt;</code></pre><p>也可能出现：</p><pre class="language-none"><code class="language-none">Could not initialize class jdk.nashorn.internal.ir.debug.ObjectSizeCalculator$CurrentLayoutjava.lang.NoClassDefFoundError: Could not initialize class jdk.nashorn.internal.ir.debug.ObjectSizeCalculator$CurrentLayout        at jdk.nashorn.internal.ir.debug.ObjectSizeCalculator.getObjectSize(ObjectSizeCalculator.java:122)</code></pre><p>则需要添加 <code>-javaagent:/java-app-dir/approot/lib/nashorn-1.8.jar</code>。</p><h3 id="自行编写-ObjectSizeCalculator"><a href="#自行编写-ObjectSizeCalculator" class="headerlink" title="自行编写 ObjectSizeCalculator"></a>自行编写 ObjectSizeCalculator</h3><p>Twitter 用于计算深度对象大小的实用程序。 它考虑了不同的内存模型（32 位，压缩 oops，64 位），填充，子类填充，在圆形数据结构和数组上正常工作。 </p><p>可以编译 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3R3aXR0ZXIvY29tbW9ucy9ibG9iL21hc3Rlci9zcmMvamF2YS9jb20vdHdpdHRlci9jb21tb24vb2JqZWN0c2l6ZS9PYmplY3RTaXplQ2FsY3VsYXRvci5qYXZh">ObjectSizeCalculator.java<i class="fa fa-external-link-alt"></i></span> 这个.java 文件，它没有外部依赖。</p><h3 id="序列化后获取大小"><a href="#序列化后获取大小" class="headerlink" title="序列化后获取大小"></a>序列化后获取大小</h3><p>序列化方法可能是大多数 JVM 的良好近似。 最简单的方法如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getSize</span><span class="token punctuation">(</span><span class="token class-name">Serializable</span> ser<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>    <span class="token class-name">ByteArrayOutputStream</span> baos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>baos<span class="token punctuation">)</span><span class="token punctuation">;</span>    oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>ser<span class="token punctuation">)</span><span class="token punctuation">;</span>    oos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> baos<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>如果您有具有公共引用的对象，则不会给出正确的结果，并且序列化的大小将不总是与内存中的大小匹配，但它是一个很好的近似值。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;有些时候，我们需要获取 Java 对象的字节大小，来进行一些判断处理。&lt;/p&gt;
&lt;p&gt;那么，应该如何获取 Java 对象的字节大小呢？&lt;/p&gt;
&lt;p&gt;参考地址：&lt;a href=&quot;https://stackoverflow.com/questions/52353/in-java-what-is-the-best-way-to-determine-the-size-of-an-object&quot;&gt;in-java-what-is-the-best-way-to-determine-the-size-of-an-object&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://jueee.github.io/categories/Java/"/>
    
    <category term="JavaClass" scheme="https://jueee.github.io/categories/Java/JavaClass/"/>
    
    
    <category term="JavaClass" scheme="https://jueee.github.io/tags/JavaClass/"/>
    
    <category term="Java" scheme="https://jueee.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java 消费 Kafka 配置信息总结</title>
    <link href="https://jueee.github.io/2022/08/2022-08-21-Java%E6%B6%88%E8%B4%B9Kafka%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF%E6%80%BB%E7%BB%93/"/>
    <id>https://jueee.github.io/2022/08/2022-08-21-Java%E6%B6%88%E8%B4%B9Kafka%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF%E6%80%BB%E7%BB%93/</id>
    <published>2022-08-21T00:00:00.000Z</published>
    <updated>2022-08-29T02:28:01.473Z</updated>
    
    <content type="html"><![CDATA[<p>Java 消费 Kafka 配置信息总结。</p><p>配置文档：<span class="exturl" data-url="aHR0cHM6Ly9rYWZrYS5hcGFjaGUub3JnL2RvY3VtZW50YXRpb24vI25ld2NvbnN1bWVyY29uZmlncw==">https://kafka.apache.org/documentation/#newconsumerconfigs<i class="fa fa-external-link-alt"></i></span></p><a id="more"></a><h3 id="长轮询poll消息"><a href="#长轮询poll消息" class="headerlink" title="长轮询poll消息"></a>长轮询 poll 消息</h3><p>代码中设置了长轮询的时间是 1000 毫秒：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">ConsumerRecords</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> records <span class="token operator">=</span>  consumer<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofMillis</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>【注意】</p><ul><li>poll () 方法里传的参数是时间（ms）。</li><li>Kafka 轮询一次就相当于拉取（poll）一定时间段 broker 中可消费的数据，  在这个指定时间段里拉取，时间到了就立刻返回数据。 </li><li>poll（5000）：  即在 5s 中内拉去的数据返回到消费者端。</li></ul><h3 id="消费者拉取最大条数"><a href="#消费者拉取最大条数" class="headerlink" title="消费者拉取最大条数"></a>消费者拉取最大条数</h3><p>默认情况下，消费者一次最大会拉去的消息条数设置如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// max.poll.records</span>props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ConsumerConfig</span><span class="token punctuation">.</span>MAX_POLL_RECORDS_CONFIG<span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>【注意】必须为整型，不能为字符串。</p><p>对于如下消费循环：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">ConsumerRecords</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> records <span class="token operator">=</span>  consumer<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofMillis</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ConsumerRecord</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">record</span> <span class="token operator">:</span> records<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"收到消息：partition = %d,offset = %d,key = %s ,value = %s%n"</span><span class="token punctuation">,</span>                <span class="token keyword">record</span><span class="token punctuation">.</span><span class="token function">partition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">record</span><span class="token punctuation">.</span><span class="token function">offset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">record</span><span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">record</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>如果一次 poll 到 500 条消息，就直接执行 for 循环</li><li>如果一次没有 poll 到 500 条，且时间在 1 秒内，那么长轮询继续 poll，要么到 500 条，要么到 1s</li></ul><h3 id="消费者拉取最大字节"><a href="#消费者拉取最大字节" class="headerlink" title="消费者拉取最大字节"></a>消费者拉取最大字节</h3><p>服务器将返回的每个分区的最大数据量：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// max.partition.fetch.bytes</span>props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ConsumerConfig</span><span class="token punctuation">.</span>MAX_PARTITION_FETCH_BYTES_CONFIG<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>设置 max.partition.fetch.bytes 时的另一个重要考虑因素是消费者处理数据所花费的时间。</p><p>消费者必须足够频繁地调用 poll () 以避免会话超时和随后的重新平衡。</p><p>如果单次 poll () 返回的数据量很大，消费者处理的时间可能会更长，这意味着它不会及时到达轮询循环的下一次迭代，以避免会话超时。</p><h3 id="消费者心跳检查"><a href="#消费者心跳检查" class="headerlink" title="消费者心跳检查"></a>消费者心跳检查</h3><p>如果两次 poll 的时间超过了 30s 的时间间隔，kafka 会认为消费者消费能力过弱，将其踢出消费者组，将分区分配给其他消费者 rebalance</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// heartbeat.interval.ms</span><span class="token comment">// consumer给broker发送心跳的间隔时间</span>props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ConsumerConfig</span><span class="token punctuation">.</span>HEARTBEAT_INTERVAL_MS_CONFIG<span class="token punctuation">,</span> <span class="token number">30</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="消费者健康状态检查"><a href="#消费者健康状态检查" class="headerlink" title="消费者健康状态检查"></a>消费者健康状态检查</h3><p>消费者每隔 1s 向 kafka 集群发送心跳，集群发现如果有超过 10s 没有续约的消费者，将被踢出消费组，出发消费组的 rebalance 机制，将该分区交给消费组里其他消费者进行消费</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// heartbeat.interval.ms</span><span class="token comment">// consumer给broker发送心跳的间隔时间</span>props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ConsumerConfig</span><span class="token punctuation">.</span>HEARTBEAT_INTERVAL_MS_CONFIG<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// session.timeout.ms</span><span class="token comment">// kafka如果超过10秒没有收到消费这的心跳，会把消费者踢出消费者组，进行rebalance,把分区分配给其他消费者</span>props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ConsumerConfig</span><span class="token punctuation">.</span>SESSION_TIMEOUT_MS_CONFIG<span class="token punctuation">,</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>其中，<code>session.timeout.ms</code> 的设置必须介于 <code>group.min.session.timeout.ms</code> 和 <code>group.max.session.timeout.ms</code> 之间。</p><ul><li><p>group.min.session.timeout.ms：6000 (6 seconds)：消费者允许的最小会话超时。</p><p>更短的超时导致更快的故障检测，代价是更频繁的消费者心跳</p></li><li><p>group.max.session.timeout.ms：1800000 (30 minutes)：注册消费者允许的最大会话超时。</p><p>更长的超时时间让消费者有更多的时间来处理心跳之间的消息，但代价是检测故障的时间更长。</p></li></ul><h3 id="请求时间"><a href="#请求时间" class="headerlink" title="请求时间"></a>请求时间</h3><p>配置控制客户端等待请求响应的最长时间。</p><p>如果在超时之前没有收到响应，客户端将在必要时重新发送请求，或者如果重试次数用尽，则请求失败。</p><p>request.timeout.ms 应该大于 session.timeout.ms 和 fetch.max.wait.ms。</p><h3 id="指定条件消费"><a href="#指定条件消费" class="headerlink" title="指定条件消费"></a>指定条件消费</h3><h4 id="指定分区消费"><a href="#指定分区消费" class="headerlink" title="指定分区消费"></a>指定分区消费</h4><pre class="language-JAVA" data-language="JAVA"><code class="language-JAVA">consumer.assign(Arrays.asList(new TopicPartition(TOPIC_NAME,0)));</code></pre><h4 id="消息回溯消费"><a href="#消息回溯消费" class="headerlink" title="消息回溯消费"></a>消息回溯消费</h4><p>从 topic offset 的 0 号位置开始消费</p><pre class="language-JAVA" data-language="JAVA"><code class="language-JAVA">consumer.assign(Arrays.asList(new TopicPartition(TOPIC_NAME,0)));consumer.seekToBeginning(Arrays.asList(new TopicPartition(TOPIC_NAME,0)));</code></pre><h4 id="指定offset消费"><a href="#指定offset消费" class="headerlink" title="指定offset消费"></a>指定 offset 消费</h4><pre class="language-JAVA" data-language="JAVA"><code class="language-JAVA">consumer.assign(Arrays.asList(new TopicPartition(TOPIC_NAME,0)));consumer.seek(new TopicPartition(TOPIC_NAME,0),10);</code></pre><h4 id="从指定时间点开始消费"><a href="#从指定时间点开始消费" class="headerlink" title="从指定时间点开始消费"></a>从指定时间点开始消费</h4><pre class="language-JAVA" data-language="JAVA"><code class="language-JAVA">//从指定时间点开始消费//1. 拿到主题下所有的分区List&lt;PartitionInfo&gt; partitionInfos = consumer.partitionsFor(TOPIC_NAME);//2. 拿到1小时前的时间long fetchDateTime = new Date().getTime()- 1000 * 60 * 60;HashMap&lt;TopicPartition, Long&gt; map = new HashMap&lt;&gt;();for (PartitionInfo partitionInfo : partitionInfos) {    map.put(new TopicPartition(TOPIC_NAME, partitionInfo.partition()),fetchDateTime);}//3. consumer.offsetsForTimes 根据时间拿到偏移量Map&lt;TopicPartition, OffsetAndTimestamp&gt; parmap = consumer.offsetsForTimes(map);for (Map.Entry&lt;TopicPartition, OffsetAndTimestamp&gt; entry : parmap.entrySet()) {    //先拿到分区    TopicPartition key = entry.getKey();    OffsetAndTimestamp value = entry.getValue();    if(key ==null || value == null) continue;    long offset = value.offset();    System.out.println("partition-"+key.partition() + "|offset-"+offset);    //根据消费里的timestamp确定offset    if(value != null){        consumer.assign(Arrays.asList(key));        consumer.seek(key,offset);    }}</code></pre><h3 id="新消费组的消费偏移量"><a href="#新消费组的消费偏移量" class="headerlink" title="新消费组的消费偏移量"></a>新消费组的消费偏移量</h3><pre class="language-JAVA" data-language="JAVA"><code class="language-JAVA">/** * 当消费主题的是一个新的消费组，或者指定offset的消费方式，offset不存在 * latest(默认)：只消费自己启动后发送到主题的消息 * earliest: 第一次从头开始消费，以后按照消费offset记录继续消费，这个需要区别于consumer.seekToBeginning(每次从头开始消费) */// auto.offset.resetprops.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, "earliest");</code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;Java 消费 Kafka 配置信息总结。&lt;/p&gt;
&lt;p&gt;配置文档：&lt;a href=&quot;https://kafka.apache.org/documentation/#newconsumerconfigs&quot;&gt;https://kafka.apache.org/documentation/#newconsumerconfigs&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Apache" scheme="https://jueee.github.io/categories/Apache/"/>
    
    <category term="Kafka" scheme="https://jueee.github.io/categories/Apache/Kafka/"/>
    
    
    <category term="Apache" scheme="https://jueee.github.io/tags/Apache/"/>
    
    <category term="Kafka" scheme="https://jueee.github.io/tags/Kafka/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu 下安装 idea 创建桌面快捷方式</title>
    <link href="https://jueee.github.io/2022/08/2022-08-18-Ubuntu%E4%B8%8B%E5%AE%89%E8%A3%85idea%E5%88%9B%E5%BB%BA%E6%A1%8C%E9%9D%A2%E5%BF%AB%E6%8D%B7%E6%96%B9%E5%BC%8F/"/>
    <id>https://jueee.github.io/2022/08/2022-08-18-Ubuntu%E4%B8%8B%E5%AE%89%E8%A3%85idea%E5%88%9B%E5%BB%BA%E6%A1%8C%E9%9D%A2%E5%BF%AB%E6%8D%B7%E6%96%B9%E5%BC%8F/</id>
    <published>2022-08-18T00:00:00.000Z</published>
    <updated>2022-08-29T02:28:01.453Z</updated>
    
    <content type="html"><![CDATA[<p>介绍在 Ubuntu 下安装 idea 的方法并创建桌面快捷方式。</p><a id="more"></a><h3 id="安装-idea"><a href="#安装-idea" class="headerlink" title="安装 idea"></a>安装 idea</h3><p>打开 idea 官网，点击下载：</p><blockquote><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuamV0YnJhaW5zLmNvbS96aC1jbi9pZGVhLw==">https://www.jetbrains.com/zh-cn/idea/<i class="fa fa-external-link-alt"></i></span></p></blockquote><p>解压：<code>tar -zxvf ideaIU-2022.2.tar.gz</code></p><p>移动：<code>mv idea-IC-222.3345.118/ /home/netease/文档/software/</code></p><p>启动：到 idea 目录 bin 下执行 <code>./idea.sh</code> 。</p><h3 id="创建快捷方式"><a href="#创建快捷方式" class="headerlink" title="创建快捷方式"></a>创建快捷方式</h3><p>每次启动的时候都需要到 idea 目录 bin 下执行：</p><pre class="language-none"><code class="language-none">./idea.sh</code></pre><p>这样比较麻烦，现在我们在 <strong>桌面</strong> 上创建快捷方式。</p><p>在 ubuntu 20.04 中要想双击打开只能建立桌面图标。</p><ol><li><p>创建快捷方式。注意，必须要在桌面上创建快捷方式，才可生效。</p><pre class="language-none"><code class="language-none">touch idea.desktop</code></pre></li><li><p>编辑此文件</p><pre class="language-none"><code class="language-none">vi idea.desktop</code></pre></li><li><p>添加以下内容</p><pre class="language-none"><code class="language-none">[Desktop Entry]Name=IntelliJ IDEAComment=IntelliJ IDEAExec=/home/netease/文档/software/idea-IC-222.3345.118/bin/idea.shIcon=/home/netease/文档/software/idea-IC-222.3345.118/bin/idea.pngTerminal=falseType=ApplicationCategories=Developer;</code></pre></li><li><p>此时，图标如下：<br><img src="/images/2022/08/image-20220818155022689.png" alt="image-20220818155022689" loading="lazy"></p></li><li><p>鼠标右键，设置允许启动：<br><img src="/images/2022/08/image-20220818155635581.png" alt="image-20220818155635581" loading="lazy"></p></li><li><p>此时，图标会变成 idea 的图标。如下所示：<br><img src="/images/2022/08/image-20220818155805234.png" alt="image-20220818155805234" loading="lazy"></p></li><li><p>然后双击该 idea 图标，即可打开 idea 软件了。</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;介绍在 Ubuntu 下安装 idea 的方法并创建桌面快捷方式。&lt;/p&gt;</summary>
    
    
    
    <category term="OS" scheme="https://jueee.github.io/categories/OS/"/>
    
    <category term="Ubuntu" scheme="https://jueee.github.io/categories/OS/Ubuntu/"/>
    
    
    <category term="OS" scheme="https://jueee.github.io/tags/OS/"/>
    
    <category term="Ubuntu" scheme="https://jueee.github.io/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>查看 Linux 系统架构的命令</title>
    <link href="https://jueee.github.io/2022/08/2022-08-16-%E6%9F%A5%E7%9C%8BLinux%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84%E7%9A%84%E5%91%BD%E4%BB%A4/"/>
    <id>https://jueee.github.io/2022/08/2022-08-16-%E6%9F%A5%E7%9C%8BLinux%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84%E7%9A%84%E5%91%BD%E4%BB%A4/</id>
    <published>2022-08-16T00:00:00.000Z</published>
    <updated>2022-08-29T02:28:01.452Z</updated>
    
    <content type="html"><![CDATA[<p>整理一些查看 Linux 系统架构的命令汇总。</p><a id="more"></a><h3 id="查看内核版本"><a href="#查看内核版本" class="headerlink" title="查看内核版本"></a>查看内核版本</h3><ul><li><p><code>cat /proc/version</code></p><pre class="language-none"><code class="language-none">$ cat /proc/versionLinux version 5.13.0-30-generic (buildd@lcy02-amd64-003) (gcc (Ubuntu 9.3.0-17ubuntu1~20.04) 9.3.0, GNU ld (GNU Binutils for Ubuntu) 2.34) #33~20.04.1-Ubuntu SMP Mon Feb 7 14:25:10 UTC 2022</code></pre></li><li><p><code>uname -a</code></p><pre class="language-none"><code class="language-none">$ uname -aLinux hih-l-9286 5.13.0-30-generic #33~20.04.1-Ubuntu SMP Mon Feb 7 14:25:10 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux</code></pre></li><li><p><code>uname -r</code></p><pre class="language-none"><code class="language-none">$ uname -r5.13.0-30-generic</code></pre></li></ul><h3 id="查看-Linux-版本信息"><a href="#查看-Linux-版本信息" class="headerlink" title="查看 Linux 版本信息"></a>查看 Linux 版本信息</h3><ul><li><p><code>lsb_release -a</code></p><pre class="language-none"><code class="language-none">$ lsb_release -aNo LSB modules are available.Distributor ID:UbuntuDescription:Ubuntu 20.04.4 LTSRelease:20.04Codename:focal</code></pre></li><li><p><code>cat /etc/issue</code></p><pre class="language-none"><code class="language-none">$ cat /etc/issueUbuntu 20.04.4 LTS \n \l</code></pre></li></ul><h3 id="查看linux是64为还是32位"><a href="#查看linux是64为还是32位" class="headerlink" title="查看linux是64为还是32位"></a>查看 linux 是 64 为还是 32 位</h3><ul><li><p><code>getconf LONG_BIT</code></p><pre class="language-none"><code class="language-none">$ getconf LONG_BIT64</code></pre></li><li><p><code>file /bin/ls</code></p><pre class="language-none"><code class="language-none">$ file /bin/ls/bin/ls: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=2f15ad836be3339dec0e2e6a3c637e08e48aacbd, for GNU/Linux 3.2.0, stripped</code></pre></li></ul><h3 id="查看系统的架构"><a href="#查看系统的架构" class="headerlink" title="查看系统的架构"></a>查看系统的架构</h3><ul><li><p><code>dpkg --print-architecture</code></p><pre class="language-none"><code class="language-none">$ dpkg --print-architectureamd64</code></pre></li><li><p><code>arch</code></p><pre class="language-none"><code class="language-none">$ archx86_64</code></pre></li><li><p><code>file /lib/systemd/systemd</code></p><pre class="language-none"><code class="language-none">$ file /lib/systemd/systemd/lib/systemd/systemd: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=52d683fd53e75da4dcfe607c8080cdf2d8ae1ce5, for GNU/Linux 3.2.0, stripped</code></pre></li></ul><h3 id="查看Mint系统对应的-Ubuntu系统"><a href="#查看Mint系统对应的-Ubuntu系统" class="headerlink" title="查看Mint系统对应的 Ubuntu系统"></a>查看 Mint 系统对应的 Ubuntu 系统</h3><p>使用 <code>cat /etc/os-release</code> 命令也可以获取到 Ubuntu 代号：</p><pre class="language-none"><code class="language-none">$ cat /etc/os-release NAME="Ubuntu"VERSION="20.04.4 LTS (Focal Fossa)"ID=ubuntuID_LIKE=debianPRETTY_NAME="Ubuntu 20.04.4 LTS"VERSION_ID="20.04"HOME_URL="https://www.ubuntu.com/"SUPPORT_URL="https://help.ubuntu.com/"BUG_REPORT_URL="https://bugs.launchpad.net/ubuntu/"PRIVACY_POLICY_URL="https://www.ubuntu.com/legal/terms-and-policies/privacy-policy"VERSION_CODENAME=focalUBUNTU_CODENAME=focal</code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;整理一些查看 Linux 系统架构的命令汇总。&lt;/p&gt;</summary>
    
    
    
    <category term="OS" scheme="https://jueee.github.io/categories/OS/"/>
    
    <category term="Linux" scheme="https://jueee.github.io/categories/OS/Linux/"/>
    
    
    <category term="Linux" scheme="https://jueee.github.io/tags/Linux/"/>
    
    <category term="OS" scheme="https://jueee.github.io/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 分隔符分隔字符串操作汇总</title>
    <link href="https://jueee.github.io/2022/08/2022-08-11-MySQL%E5%88%86%E9%9A%94%E7%AC%A6%E5%88%86%E9%9A%94%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C%E6%B1%87%E6%80%BB/"/>
    <id>https://jueee.github.io/2022/08/2022-08-11-MySQL%E5%88%86%E9%9A%94%E7%AC%A6%E5%88%86%E9%9A%94%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C%E6%B1%87%E6%80%BB/</id>
    <published>2022-08-11T00:00:00.000Z</published>
    <updated>2022-08-29T02:28:01.434Z</updated>
    
    <content type="html"><![CDATA[<p>MySQL 分隔符分隔字符串操作汇总。</p><p>参考文档：<span class="exturl" data-url="aHR0cHM6Ly9kZXYubXlzcWwuY29tL2RvYy9yZWZtYW4vOC4wL2VuL3N0cmluZy1mdW5jdGlvbnMuaHRtbA==">https://dev.mysql.com/doc/refman/8.0/en/string-functions.html<i class="fa fa-external-link-alt"></i></span></p><a id="more"></a><h3 id="SUBSTRING"><a href="#SUBSTRING" class="headerlink" title="SUBSTRING"></a>SUBSTRING</h3><p>对于所有形式的 SUBSTRING ()，要从中提取子字符串的字符串中第一个字符的位置被认为是 1。</p><p>可以对函数使用负值 。在这种情况下，子字符串的开头是字符串末尾的字符，而不是开头。</p><h4 id="指定位置截取"><a href="#指定位置截取" class="headerlink" title="指定位置截取"></a>指定位置截取</h4><blockquote><p>SUBSTRING (str,pos)  或者 SUBSTRING (str FROM pos)</p></blockquote><p>示例：</p><pre class="language-none"><code class="language-none">mysql&gt; SELECT SUBSTRING('Quadratically',5);        -&gt; 'ratically'mysql&gt; SELECT SUBSTRING('foobarbar' FROM 4);        -&gt; 'barbar'mysql&gt; SELECT SUBSTRING('Sakila', -3);        -&gt; 'ila'</code></pre><h4 id="指定长度截取"><a href="#指定长度截取" class="headerlink" title="指定长度截取"></a>指定长度截取</h4><blockquote><p>SUBSTRING (str,pos,len) 或者 SUBSTRING (str FROM pos FOR len)</p></blockquote><p>示例：</p><pre class="language-none"><code class="language-none">mysql&gt; SELECT SUBSTRING('Quadratically',5,6);        -&gt; 'ratica'mysql&gt; SELECT SUBSTRING('Sakila', -5, 3);        -&gt; 'aki'mysql&gt; SELECT SUBSTRING('Sakila' FROM -4 FOR 2);        -&gt; 'ki'</code></pre><h3 id="SUBSTRING-INDEX"><a href="#SUBSTRING-INDEX" class="headerlink" title="SUBSTRING_INDEX"></a>SUBSTRING_INDEX</h3><p>从指定出现次数的分隔符之前的字符串中返回子字符串。</p><p>SUBSTRING_INDEX 函数的格式如下：</p><blockquote><p>SUBSTRING_INDEX(str,delim,count)</p></blockquote><p>从出现分隔符 <em><code>str </code></em> 之前的字符串返回子字符串 。</p><ul><li>如果是正数，则返回最终分隔符左侧（从左侧算起）的所有内容。</li><li>如果为负数，则返回最终分隔符右侧（从右侧开始计数）的所有内容。 </li></ul><p>搜索时执行区分大小写的匹配 。</p><pre class="language-none"><code class="language-none">mysql&gt; SELECT SUBSTRING_INDEX('www.mysql.com', '.', 2);        -&gt; 'www.mysql'mysql&gt; SELECT SUBSTRING_INDEX('www.mysql.com', '.', -2);        -&gt; 'mysql.com'</code></pre><p>SUBSTRING_INDEX () 任何参数是 NULL， 则返回 NULL。</p><h3 id="LEFT"><a href="#LEFT" class="headerlink" title="LEFT"></a>LEFT</h3><p>LEFT 函数的格式如下：</p><blockquote><p>LEFT(str,len)</p></blockquote><p>返回字符串中最左边 *<code>len</code><em>的字符</em><code>str</code>*，或者 <code>NULL</code> 如果任何参数是 <code>NULL</code>。</p><pre class="language-none"><code class="language-none">mysql&gt; SELECT LEFT('foobarbar', 5);        -&gt; 'fooba'</code></pre><h3 id="RIGHT"><a href="#RIGHT" class="headerlink" title="RIGHT"></a>RIGHT</h3><p>RIGHT 函数的格式如下：</p><blockquote><p>RIGHT(str,len)</p></blockquote><p>返回字符串中最右边 *<code>len</code>* 的字符 *<code>str</code>*，或者 <code>NULL</code> 如果任何参数是 <code>NULL</code>。</p><pre class="language-none"><code class="language-none">mysql&gt; SELECT RIGHT('foobarbar', 4);        -&gt; 'rbar'</code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;MySQL 分隔符分隔字符串操作汇总。&lt;/p&gt;
&lt;p&gt;参考文档：&lt;a href=&quot;https://dev.mysql.com/doc/refman/8.0/en/string-functions.html&quot;&gt;https://dev.mysql.com/doc/refman/8.0/en/string-functions.html&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Database" scheme="https://jueee.github.io/categories/Database/"/>
    
    <category term="MySQL" scheme="https://jueee.github.io/categories/Database/MySQL/"/>
    
    
    <category term="MySQL" scheme="https://jueee.github.io/tags/MySQL/"/>
    
    <category term="Database" scheme="https://jueee.github.io/tags/Database/"/>
    
  </entry>
  
</feed>
