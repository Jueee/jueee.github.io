<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小决的专栏</title>
  
  <subtitle>进一寸有一寸的欢喜</subtitle>
  <link href="https://jueee.github.io/atom.xml" rel="self"/>
  
  <link href="https://jueee.github.io/"/>
  <updated>2020-10-27T10:49:55.519Z</updated>
  <id>https://jueee.github.io/</id>
  
  <author>
    <name>小决</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>作业调度框架 Quartz 的基本使用</title>
    <link href="https://jueee.github.io/2020/10/2020-10-27-%E4%BD%9C%E4%B8%9A%E8%B0%83%E5%BA%A6%E6%A1%86%E6%9E%B6Quartz%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>https://jueee.github.io/2020/10/2020-10-27-%E4%BD%9C%E4%B8%9A%E8%B0%83%E5%BA%A6%E6%A1%86%E6%9E%B6Quartz%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</id>
    <published>2020-10-27T00:00:00.000Z</published>
    <updated>2020-10-27T10:49:55.519Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Quartz-介绍"><a href="#Quartz-介绍" class="headerlink" title="Quartz 介绍"></a>Quartz 介绍</h3><p>Quartz 是一个开源的作业调度框架，可以让计划的程序任务一个预定义的日期和时间运行。</p><p>Quartz 可以用来创建简单或复杂的日程安排执行几十，几百，甚至是十万的作业数。</p><p>Quartz 官网：<span class="exturl" data-url="aHR0cDovL3d3dy5xdWFydHotc2NoZWR1bGVyLm9yZy8=">http://www.quartz-scheduler.org/<i class="fa fa-external-link-alt"></i></span></p><p>GitHub：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3F1YXJ0ei1zY2hlZHVsZXI=">https://github.com/quartz-scheduler<i class="fa fa-external-link-alt"></i></span></p><a id="more"></a><h4 id="Quartz-功能"><a href="#Quartz-功能" class="headerlink" title="Quartz 功能"></a>Quartz 功能</h4><p>如果应用程序需要在给定时间执行任务，或者如果系统有连续维护作业，那么 Quartz 是理想的解决方案。</p><p>使用 Quartz 作业调度应用的示例：</p><ul><li><strong>驱动处理工作流程</strong>：作为一个新的订单被初始化放置，调度作业到在正好两个小时内，它将检查订单的状态，如果订单确认消息尚未收到命令触发警告通知，以及改变订单的状态为 “等待的干预”。</li><li><strong>系统维护</strong>：调度工作给数据库的内容，每个工作日（节假日除外平日）在 11:30 PM 转储到一个 XML 文件中。</li><li><strong>在应用程序内提供提醒服务</strong>。</li></ul><h4 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h4><ul><li>Quartz 可以运行嵌入在另一个独立式应用程序</li><li> Quartz 可以在应用程序服务器 (或 servlet 容器) 内被实例化，并且参与 XA 事务</li><li> Quartz 可以作为一个独立的程序运行 (其自己的 Java 虚拟机内)，可以通过 RMI 使用</li><li> Quartz 可以被实例化，作为独立的项目集群 (负载平衡和故障转移功能)，用于作业的执行</li></ul><h4 id="作业调度"><a href="#作业调度" class="headerlink" title="作业调度"></a>作业调度</h4><p>作业被安排在一个给定的触发时运行。触发器可以使用以下指令的接近任何组合来创建：</p><ul><li>在一天中的某个时间（到毫秒）</li><li>在一周的某几天</li><li>在每月的某一天</li><li>在一年中的某些日期</li><li>不在注册的日历中列出的特定日期（如商业节假日除外）</li><li>重复特定次数</li><li>重复进行，直到一个特定的时间 / 日期</li><li>无限重复</li><li>重复的延迟时间间隔</li></ul><p>作业是由其创建者赋予的名字，也可以组织成命名组。触发器也可以给予名称和放置在组中，以方便地将它们调度内组织。</p><p>作业可以被添加到所述调度器一次，而是具有多个触发器注册。</p><p>在企业 Java 环境中，作业可以执行自己的工作作为分布式（XA）事务的一部分。</p><h4 id="作业执行"><a href="#作业执行" class="headerlink" title="作业执行"></a>作业执行</h4><ul><li>作业可以实现简单的作业接口，为作业执行工作的任何 Java 类。</li><li>Job 类的实例可以通过 Quartz 被实例化，或者通过应用程序框架。</li><li>当触发时，调度通知实现 JobListener 和 TriggerListener 接口零个或多个 Java 对象（监听器可以是简单的 Java 对象，或 EJB，JMS 或发布者等）。这些监听器在作业已经执行之后通知。</li><li>由于作业完成后返回 JobCompletionCode，它通知的成功或失败的调度。JobCompletionCode 还可以指示的基础上，成功的话就采取行动调度 / 失败的代码 - 如立即重新执行作业。</li></ul><h4 id="作业持久性"><a href="#作业持久性" class="headerlink" title="作业持久性"></a>作业持久性</h4><ul><li>Quartz 的设计包括可被实现以提供的作业存储各种机制一个作业存储接口</li><li>通过使用包含的 JDBCJobStore，所有的作业和触发器配置为 “非挥发性” 都存储在通过 JDBC 关系数据库。</li><li>通过使用包含的 RAMJobStore，所有的作业和触发器存储在 RAM，因此不计划执行仍然存在 - 但这是无需使用外部数据库的优势。</li></ul><h4 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h4><ul><li>可以参与 JTA 事务，通过使用 JobStoreCMT（JDBCJobStore 的子类）。</li><li>Quartz 可以管理 JTA 事务（开始并提交它们）周围作业的执行，从而使作业执行的工作自动将 JTA 事务中发生。</li></ul><h4 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h4><ul><li>故障切换</li><li>负载均衡</li><li> Quartz 的内置的群集功能，通过 JDBCJobStore（如上所述）依靠数据库持久</li><li> Terracotta 扩展 Quartz 提供集群功能，而不需要一个支持数据库</li></ul><h4 id="监听器和插件"><a href="#监听器和插件" class="headerlink" title="监听器和插件"></a>监听器和插件</h4><ul><li>应用程序可以捕捉事件的调度监控或通过实现一个或多个监听器接口控制工作 / 触发行为。</li><li>插件机制，可以用来添加功能，Quartz 让作业执行过程中或工作负载和触发定义的历史不受限在一个文件中。</li><li>附带了一些 “工厂建有” 插件和监听器。</li></ul><h4 id="Quartz-引入"><a href="#Quartz-引入" class="headerlink" title="Quartz 引入"></a>Quartz 引入</h4><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/org.quartz-scheduler/quartz --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.quartz-scheduler<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>quartz<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.3.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></code></pre><h3 id="Quartz-简单示例"><a href="#Quartz-简单示例" class="headerlink" title="Quartz 简单示例"></a>Quartz 简单示例</h3><h4 id="Quartz-作业"><a href="#Quartz-作业" class="headerlink" title="Quartz 作业"></a>Quartz 作业</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloJob</span> <span class="token keyword">implements</span> <span class="token class-name">Job</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">JobExecutionContext</span> context<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">JobExecutionException</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello Quartz!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="Quartz-触发器"><a href="#Quartz-触发器" class="headerlink" title="Quartz 触发器"></a>Quartz 触发器</h4><p>定义 Quartz 触发器，运行在上面的 Quartz 作业。</p><p>Quartz 有两种类型的触发器在 Quartz2：</p><ul><li><p><strong>SimpleTrigger</strong> – 允许设置开始时间，结束时间，重复间隔。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Trigger</span> trigger <span class="token operator">=</span> <span class="token class-name">TriggerBuilder</span><span class="token punctuation">.</span><span class="token function">newTrigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span><span class="token string">"dummyTriggerName"</span><span class="token punctuation">,</span> <span class="token string">"group1"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">withSchedule</span><span class="token punctuation">(</span><span class="token class-name">SimpleScheduleBuilder</span><span class="token punctuation">.</span><span class="token function">simpleSchedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">withIntervalInSeconds</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">repeatForever</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p><strong>CronTrigger</strong> – 允许 UNIX cron 表达式来指定日期和时间来运行作业。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Trigger</span> trigger <span class="token operator">=</span> <span class="token class-name">TriggerBuilder</span><span class="token punctuation">.</span><span class="token function">newTrigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span><span class="token string">"dummyTriggerName"</span><span class="token punctuation">,</span> <span class="token string">"group1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withSchedule</span><span class="token punctuation">(</span><span class="token class-name">CronScheduleBuilder</span><span class="token punctuation">.</span><span class="token function">cronSchedule</span><span class="token punctuation">(</span><span class="token string">"0/5 * * * * ?"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><h4 id="Scheduler"><a href="#Scheduler" class="headerlink" title="Scheduler"></a>Scheduler</h4><p>调度类链接 “工作” 和 “触发器” 到一起，并执行它。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Scheduler</span> scheduler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StdSchedulerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>scheduler<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>scheduler<span class="token punctuation">.</span><span class="token function">scheduleJob</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span> trigger<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="完整示例"><a href="#完整示例" class="headerlink" title="完整示例"></a>完整示例</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">JobDetail</span> job <span class="token operator">=</span> <span class="token class-name">JobBuilder</span><span class="token punctuation">.</span><span class="token function">newJob</span><span class="token punctuation">(</span><span class="token class-name">HelloJob</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span><span class="token string">"dummyJobName"</span><span class="token punctuation">,</span> <span class="token string">"group1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Trigger</span> trigger <span class="token operator">=</span> <span class="token class-name">TriggerBuilder</span><span class="token punctuation">.</span><span class="token function">newTrigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span><span class="token string">"dummyTriggerName"</span><span class="token punctuation">,</span> <span class="token string">"group1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withSchedule</span><span class="token punctuation">(</span><span class="token class-name">CronScheduleBuilder</span><span class="token punctuation">.</span><span class="token function">cronSchedule</span><span class="token punctuation">(</span><span class="token string">"0/5 * * * * ?"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Scheduler</span> scheduler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StdSchedulerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>scheduler<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>scheduler<span class="token punctuation">.</span><span class="token function">scheduleJob</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span> trigger<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="Quartz-作业监听"><a href="#Quartz-作业监听" class="headerlink" title="Quartz 作业监听"></a>Quartz 作业监听</h3><h4 id="JobListener"><a href="#JobListener" class="headerlink" title="JobListener"></a>JobListener</h4><p>创建一个 JobListener，只是实现了 JobListener 接口，并覆盖所有的接口的方法。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloJobListener</span> <span class="token keyword">implements</span> <span class="token class-name">JobListener</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><h4 id="加入监听"><a href="#加入监听" class="headerlink" title="加入监听"></a>加入监听</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Scheduler</span> scheduler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StdSchedulerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>scheduler<span class="token punctuation">.</span><span class="token function">getListenerManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">.</span><span class="token function">addJobListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HelloJobListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">KeyMatcher</span><span class="token punctuation">.</span><span class="token function">keyEquals</span><span class="token punctuation">(</span>jobKey<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="Quartz-执行多作业"><a href="#Quartz-执行多作业" class="headerlink" title="Quartz 执行多作业"></a>Quartz 执行多作业</h3><p>在 Quartz 调度框架中，每个作业将被连接到一个唯一的触发，并且由调度器运行它。</p><p>P.S：在 Quartz 中，一个触发器触发多个作业是不可以的。 </p><p>使用 QuartzAPI 声明上述 3 个作业，分配它们到特定触发器并调度它。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">JobKey</span> jobKeyA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JobKey</span><span class="token punctuation">(</span><span class="token string">"jobA"</span><span class="token punctuation">,</span> <span class="token string">"group1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">JobDetail</span> jobA <span class="token operator">=</span> <span class="token class-name">JobBuilder</span><span class="token punctuation">.</span><span class="token function">newJob</span><span class="token punctuation">(</span><span class="token class-name">JobA</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span>jobKeyA<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">JobKey</span> jobKeyB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JobKey</span><span class="token punctuation">(</span><span class="token string">"jobB"</span><span class="token punctuation">,</span> <span class="token string">"group1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">JobDetail</span> jobB <span class="token operator">=</span> <span class="token class-name">JobBuilder</span><span class="token punctuation">.</span><span class="token function">newJob</span><span class="token punctuation">(</span><span class="token class-name">JobB</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span>jobKeyB<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">JobKey</span> jobKeyC <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JobKey</span><span class="token punctuation">(</span><span class="token string">"jobC"</span><span class="token punctuation">,</span> <span class="token string">"group1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">JobDetail</span> jobC <span class="token operator">=</span> <span class="token class-name">JobBuilder</span><span class="token punctuation">.</span><span class="token function">newJob</span><span class="token punctuation">(</span><span class="token class-name">JobC</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span>jobKeyC<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Trigger</span> trigger1 <span class="token operator">=</span> <span class="token class-name">TriggerBuilder</span><span class="token punctuation">.</span><span class="token function">newTrigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span><span class="token string">"dummyTriggerName1"</span><span class="token punctuation">,</span> <span class="token string">"group1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withSchedule</span><span class="token punctuation">(</span><span class="token class-name">CronScheduleBuilder</span><span class="token punctuation">.</span><span class="token function">cronSchedule</span><span class="token punctuation">(</span><span class="token string">"0/5 * * * * ?"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Trigger</span> trigger2 <span class="token operator">=</span> <span class="token class-name">TriggerBuilder</span><span class="token punctuation">.</span><span class="token function">newTrigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span><span class="token string">"dummyTriggerName2"</span><span class="token punctuation">,</span> <span class="token string">"group1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withSchedule</span><span class="token punctuation">(</span><span class="token class-name">CronScheduleBuilder</span><span class="token punctuation">.</span><span class="token function">cronSchedule</span><span class="token punctuation">(</span><span class="token string">"0/5 * * * * ?"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Trigger</span> trigger3 <span class="token operator">=</span> <span class="token class-name">TriggerBuilder</span><span class="token punctuation">.</span><span class="token function">newTrigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span><span class="token string">"dummyTriggerName3"</span><span class="token punctuation">,</span> <span class="token string">"group1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withSchedule</span><span class="token punctuation">(</span><span class="token class-name">CronScheduleBuilder</span><span class="token punctuation">.</span><span class="token function">cronSchedule</span><span class="token punctuation">(</span><span class="token string">"0/5 * * * * ?"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Scheduler</span> scheduler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StdSchedulerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>scheduler<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>scheduler<span class="token punctuation">.</span><span class="token function">scheduleJob</span><span class="token punctuation">(</span>jobA<span class="token punctuation">,</span> trigger1<span class="token punctuation">)</span><span class="token punctuation">;</span>scheduler<span class="token punctuation">.</span><span class="token function">scheduleJob</span><span class="token punctuation">(</span>jobB<span class="token punctuation">,</span> trigger2<span class="token punctuation">)</span><span class="token punctuation">;</span>scheduler<span class="token punctuation">.</span><span class="token function">scheduleJob</span><span class="token punctuation">(</span>jobC<span class="token punctuation">,</span> trigger3<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="列出调度器所有作业"><a href="#列出调度器所有作业" class="headerlink" title="列出调度器所有作业"></a>列出调度器所有作业</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Scheduler</span> scheduler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StdSchedulerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> groupName <span class="token operator">:</span> scheduler<span class="token punctuation">.</span><span class="token function">getJobGroupNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">JobKey</span> jobKey <span class="token operator">:</span> scheduler<span class="token punctuation">.</span><span class="token function">getJobKeys</span><span class="token punctuation">(</span><span class="token class-name">GroupMatcher</span><span class="token punctuation">.</span><span class="token function">jobGroupEquals</span><span class="token punctuation">(</span>groupName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">String</span> jobName <span class="token operator">=</span> jobKey<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> jobGroup <span class="token operator">=</span> jobKey<span class="token punctuation">.</span><span class="token function">getGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Trigger</span><span class="token punctuation">&gt;</span></span> triggers <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Trigger</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> scheduler<span class="token punctuation">.</span><span class="token function">getTriggersOfJob</span><span class="token punctuation">(</span>jobKey<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Date</span> nextFireTime <span class="token operator">=</span> triggers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getNextFireTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"[jobName] : "</span> <span class="token operator">+</span> jobName <span class="token operator">+</span> <span class="token string">" [groupName] : "</span> <span class="token operator">+</span> jobGroup <span class="token operator">+</span> <span class="token string">" - "</span> <span class="token operator">+</span> nextFireTime<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;Quartz-介绍&quot;&gt;&lt;a href=&quot;#Quartz-介绍&quot; class=&quot;headerlink&quot; title=&quot;Quartz 介绍&quot;&gt;&lt;/a&gt;Quartz 介绍&lt;/h3&gt;&lt;p&gt;Quartz 是一个开源的作业调度框架，可以让计划的程序任务一个预定义的日期和时间运行。&lt;/p&gt;
&lt;p&gt;Quartz 可以用来创建简单或复杂的日程安排执行几十，几百，甚至是十万的作业数。&lt;/p&gt;
&lt;p&gt;Quartz 官网：&lt;a href=&quot;http://www.quartz-scheduler.org/&quot;&gt;http://www.quartz-scheduler.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;GitHub：&lt;a href=&quot;https://github.com/quartz-scheduler&quot;&gt;https://github.com/quartz-scheduler&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://jueee.github.io/categories/Java/"/>
    
    <category term="JavaJar" scheme="https://jueee.github.io/categories/Java/JavaJar/"/>
    
    
    <category term="Java" scheme="https://jueee.github.io/tags/Java/"/>
    
    <category term="JavaJar" scheme="https://jueee.github.io/tags/JavaJar/"/>
    
  </entry>
  
  <entry>
    <title>Google 工具类 Gson 的基本使用</title>
    <link href="https://jueee.github.io/2020/10/2020-10-26-Google%E5%B7%A5%E5%85%B7%E7%B1%BBGson%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>https://jueee.github.io/2020/10/2020-10-26-Google%E5%B7%A5%E5%85%B7%E7%B1%BBGson%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</id>
    <published>2020-10-26T00:00:00.000Z</published>
    <updated>2020-10-27T08:06:16.320Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Gson-介绍"><a href="#Gson-介绍" class="headerlink" title="Gson 介绍"></a>Gson 介绍</h3><p>Google Gson 是一个简单的基于 Java 的库，用于将 Java 对象序列化为 JSON，反之亦然。 它是由 Google 开发的一个开源库。</p><p>以下几点说明为什么应该使用这个库 </p><ul><li><strong>标准化</strong> - Gson 是一个由 Google 管理的标准化库。</li><li><strong>高效</strong> - 这是对 Java 标准库的可靠，快速和高效的扩展。</li><li><strong>优化</strong> - Gson 库经过高度优化。</li><li><strong>支持泛型</strong> - 它为泛型提供了广泛的支持。</li><li><strong>支持复杂的内部类</strong> - 它支持具有深度继承层次结构的复杂对象。</li></ul><a id="more"></a><h4 id="Gson-的特点"><a href="#Gson-的特点" class="headerlink" title="Gson 的特点"></a>Gson 的特点</h4><p>这里列出了 Gson 的一些最显着的特点 </p><ul><li><strong>易于使用</strong> - Gson API 提供了一个高级外观来简化常用的用例。</li><li><strong>无需创建映射</strong> - Gson API 为大部分要序列化的对象提供了默认映射。</li><li><strong>性能优</strong> - Gson 速度相当快，内存占用量低。 它适用于大型对象图或系统。</li><li><strong>干净</strong> JSON - Gson 创建一个干净而紧凑的 JSON 结果，它易于阅读。</li><li><strong>无依赖性</strong> —Gson 库不需要 JDK 以外的任何其他库。</li><li><strong>开源</strong> - Gson 库是开源的；它是免费提供的。</li></ul><h4 id="处理JSON的方法"><a href="#处理JSON的方法" class="headerlink" title="处理JSON的方法"></a>处理 JSON 的方法</h4><p>Gson 提供了三种处理 JSON 的替代方法 - </p><ol><li><p><strong>流媒体 API</strong></p><p>它读取和写入 JSON 内容作为离散事件。 JsonReader 和 JsonWriter 将数据读取 / 写入令牌，称为 JsonToken。<br>这是处理 JSON 的三种方法中最强大的方法。 它具有最低的开销，并且在读 / 写操作中速度非常快。 它类似于用于 XML 的 Stax 解析器。</p></li><li><p><strong>树模型</strong></p><p>它准备 JSON 文档的内存树表示。 它构建了一个 JsonObject 节点树。 这是一种灵活的方法，类似于 XML 的 DOM 解析器。</p></li><li><p><strong>数据绑定</strong></p><p>它使用属性访问器将 JSON 转换为 POJO (普通旧 Java 对象) 并从中转换。 Gson 使用数据类型适配器读取 / 写入 JSON。 它类似于 XML 的 JAXB 解析器。</p></li></ol><h4 id="Gson-链接"><a href="#Gson-链接" class="headerlink" title="Gson 链接"></a>Gson 链接</h4><ul><li>GitHub：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZS9nc29u">https://github.com/google/gson<i class="fa fa-external-link-alt"></i></span></li><li> 用户指南：<span class="exturl" data-url="aHR0cHM6Ly9zaXRlcy5nb29nbGUuY29tL3NpdGUvZ3Nvbi9nc29uLXVzZXItZ3VpZGU=">https://sites.google.com/site/gson/gson-user-guide<i class="fa fa-external-link-alt"></i></span></li></ul><h4 id="Gson-引入"><a href="#Gson-引入" class="headerlink" title="Gson 引入"></a>Gson 引入</h4><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/com.google.code.gson/gson --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.google.code.gson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>gson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.8.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></code></pre><h3 id="Gson-入门程序"><a href="#Gson-入门程序" class="headerlink" title="Gson 入门程序"></a>Gson 入门程序</h3><p>Gson 是 Google Gson 库的主要操作类。 它提供了将 Java 对象转换为匹配的 JSON 结构的功能，反之亦然。 </p><p>Gson 首先使用 <code>GsonBuilder</code> 构建，然后使用 <code>toJson(Object)</code> 或 <code>fromJson(String，Class)</code> 方法读取 / 写入 JSON 构造。</p><ol><li><p>使用 <code>GsonBuilder</code> 创建 Gson 对象<br>创建一个 Gson 对象。 它是一个可重用的对象。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">GsonBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GsonBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> builder<span class="token punctuation">.</span><span class="token function">setPrettyPrinting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">Gson</span> gson <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>将 JSON 反序列化为对象<br>使用 <code>fromJson()</code> 方法从 JSON 获取对象。 传递 Json 字符串 / Json 字符串的源和对象类型作为参数。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//Object to JSON Conversion </span><span class="token class-name">Student</span> student <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">,</span> <span class="token class-name">Student</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>将对象序列化为 JSON<br>使用 <code>toJson()</code> 方法获取对象的 JSON 字符串表示形式。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//Object to JSON Conversion   </span>jsonString <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ol><p>示例如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> jsonString <span class="token operator">=</span> <span class="token string">"{\"name\":\"Maxsu\", \"age\":24}"</span><span class="token punctuation">;</span><span class="token class-name">GsonBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GsonBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>builder<span class="token punctuation">.</span><span class="token function">setPrettyPrinting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Gson</span> gson <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Student</span> student <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">,</span> <span class="token class-name">Student</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>jsonString <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="Gson-序列化"><a href="#Gson-序列化" class="headerlink" title="Gson 序列化"></a>Gson 序列化</h3><h4 id="对象序列化"><a href="#对象序列化" class="headerlink" title="对象序列化"></a>对象序列化</h4><p>序列化写入：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">writeJSON</span><span class="token punctuation">(</span><span class="token class-name">Student</span> student<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span><span class="token class-name">GsonBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GsonBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Gson</span> gson <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">FileWriter</span> writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"student.json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>gson<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>writer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>序列化读取：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">Student</span> <span class="token function">readJSON</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">FileNotFoundException</span> <span class="token punctuation">{</span><span class="token class-name">GsonBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GsonBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Gson</span> gson <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">BufferedReader</span> bufferedReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"student.json"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Student</span> student <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>bufferedReader<span class="token punctuation">,</span> <span class="token class-name">Student</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> student<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="数组序列化"><a href="#数组序列化" class="headerlink" title="数组序列化"></a>数组序列化</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 序列化 </span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> marks1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token number">85</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"marks:"</span> <span class="token operator">+</span> gson<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>marks1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 反序列化</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> marks2 <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span><span class="token string">"[100,90,85]"</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"marks:"</span> <span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>marks2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="集合序列化"><a href="#集合序列化" class="headerlink" title="集合序列化"></a>集合序列化</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 序列化 </span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> marks <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"marks:"</span> <span class="token operator">+</span> gson<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>marks<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 反序列化 </span><span class="token class-name">Type</span> listType <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TypeToken</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> marks <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span><span class="token string">"[100,90,85]"</span><span class="token punctuation">,</span> listType<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"marks:"</span> <span class="token operator">+</span>marks<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="泛型序列化"><a href="#泛型序列化" class="headerlink" title="泛型序列化"></a>泛型序列化</h4><p>Gson 使用 Java 反射 API 来获取要将 Json 文本映射到的对象的类型。 但是在泛型中，这些信息在序列化过程中丢失了。 </p><p>为了解决这个问题，Gson 提供了一个 <code>com.google.gson.reflect.TypeToken</code> 类来存储通用对象的类型。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Gson</span> gson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 创建泛型对象</span><span class="token class-name">Shape</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Circle</span><span class="token punctuation">&gt;</span></span> shape <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Shape</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Circle</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Circle</span> circle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token number">5.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>shape<span class="token punctuation">.</span><span class="token function">setShape</span><span class="token punctuation">(</span>circle<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 定义 TypeToken</span><span class="token class-name">Type</span> shapeType <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TypeToken</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Shape</span><span class="token punctuation">&lt;</span><span class="token class-name">Circle</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 序列化</span><span class="token class-name">String</span> jsonString <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>shape<span class="token punctuation">,</span> shapeType<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {"shape":{"radius":5.0}}</span><span class="token comment">// （错误）通过 类 反序列化</span><span class="token class-name">Shape</span> shape1 <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">,</span> <span class="token class-name">Shape</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>shape1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// class com.google.gson.internal.LinkedTreeMap</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>shape1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {radius=5.0}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>shape1<span class="token punctuation">.</span><span class="token function">getArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0.0</span><span class="token comment">// （正确）通过 TypeToken 反序列化</span><span class="token class-name">Shape</span> shape2 <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">,</span> shapeType<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>shape2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// class demo.google.gson.Circle</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>shape2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Circle</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>shape2<span class="token punctuation">.</span><span class="token function">getArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 78.5</span></code></pre><p>其中：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Shape</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">T</span> shape<span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setShape</span><span class="token punctuation">(</span><span class="token class-name">T</span> shape<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>shape <span class="token operator">=</span> shape<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">return</span> shape<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>shape <span class="token keyword">instanceof</span> <span class="token class-name">Circle</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Circle</span><span class="token punctuation">)</span> shape<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token number">0.0</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span>  <span class="token keyword">class</span> <span class="token class-name">Circle</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> radius<span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token keyword">double</span> radius<span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>radius <span class="token operator">=</span> radius<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">return</span> <span class="token string">"Circle"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getRadius</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">return</span> radius<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setRadius</span><span class="token punctuation">(</span><span class="token keyword">double</span> radius<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>radius <span class="token operator">=</span> radius<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">return</span> <span class="token punctuation">(</span>radius<span class="token operator">*</span>radius<span class="token operator">*</span><span class="token number">3.14</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><h4 id="内部类序列化"><a href="#内部类序列化" class="headerlink" title="内部类序列化"></a>内部类序列化</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>person<span class="token punctuation">.</span><span class="token function">setRollNo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token class-name">Name</span> name <span class="token operator">=</span> person<span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>name<span class="token punctuation">.</span>firstName <span class="token operator">=</span> <span class="token string">"Mahesh"</span><span class="token punctuation">;</span>name<span class="token punctuation">.</span>lastName <span class="token operator">=</span> <span class="token string">"Kumar"</span><span class="token punctuation">;</span>person<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Gson</span> gson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> jsonString <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {"rollNo":1,"name":{"firstName":"Mahesh","lastName":"Kumar"}}</span><span class="token comment">// 主类</span>person <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">,</span> <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">getRollNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span> person<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span> person<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>lastName<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1:Mahesh:Kumar</span><span class="token comment">// 内部类</span><span class="token class-name">String</span> nameString <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>nameString<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {"firstName":"Mahesh","lastName":"Kumar"}</span>name <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>nameString<span class="token punctuation">,</span> <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token class-name">Name</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// class demo.google.gson.Person$Name</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> name<span class="token punctuation">.</span>lastName<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Mahesh:Kumar</span></code></pre><p>其中：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token keyword">int</span> rollNo<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">Name</span> name<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getRollNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> rollNo<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setRollNo</span><span class="token punctuation">(</span><span class="token keyword">int</span> rollNo<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>rollNo <span class="token operator">=</span> rollNo<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">Name</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">Name</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Name</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token class-name">String</span> firstName<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">String</span> lastName<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="Gson-从序列化中排除字段"><a href="#Gson-从序列化中排除字段" class="headerlink" title="Gson 从序列化中排除字段"></a>Gson 从序列化中排除字段</h3><h4 id="使用excludeFieldsWithModifiers"><a href="#使用excludeFieldsWithModifiers" class="headerlink" title="使用excludeFieldsWithModifiers()"></a>使用 excludeFieldsWithModifiers ()</h4><p>GsonBuilder 使用序列化 / 反序列化过程中的 <code>excludeFieldsWithModifiers()</code> 方法提供对使用特定修饰符排除字段的控制。 </p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">GsonBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GsonBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> builder<span class="token punctuation">.</span><span class="token function">excludeFieldsWithModifiers</span><span class="token punctuation">(</span><span class="token class-name">Modifier</span><span class="token punctuation">.</span>TRANSIENT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Gson</span> gson <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </code></pre><h4 id="使用-Expose注解"><a href="#使用-Expose注解" class="headerlink" title="使用@Expose注解"></a>使用 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0V4cG9zZQ==">@Expose<i class="fa fa-external-link-alt"></i></span> 注解</h4><p>Gson 提供 <code>@Expose</code> 注解来根据其范围控制类的 Json 序列化 / 反序列化。</p><ol><li><p>类属性中具有 <code>@Expose</code> 支持的变量的类。 </p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Student2</span> <span class="token punctuation">{</span><span class="token annotation punctuation">@Expose</span><span class="token keyword">private</span> <span class="token keyword">int</span> rollNo<span class="token punctuation">;</span><span class="token annotation punctuation">@Expose</span><span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">boolean</span> verified<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> className<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在这个类中，<code>name</code> 和 <code>rollno</code> 变量将被暴露以进行序列化。 </p></li><li><p>使用 <code>GsonBuilder.excludeFieldsWithoutExposeAnnotation()</code> 方法来指示只有暴露的变量要被序列化 / 反序列化。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">GsonBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GsonBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>builder<span class="token punctuation">.</span><span class="token function">excludeFieldsWithoutExposeAnnotation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Gson</span> gson1 <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ol><h3 id="Gson-数据绑定"><a href="#Gson-数据绑定" class="headerlink" title="Gson 数据绑定"></a>Gson 数据绑定</h3><p>数据绑定 API 用于使用属性访问器或使用注释将 JSON 转换为 POJO (普通旧 Java 对象) 以及从 POJO (普通旧 Java 对象) 转换。 </p><p>它有两种类型，分别如下所示： </p><ul><li><strong>原始数据绑定</strong> - 将 JSON 转换为 Java 地图，列表，字符串，数字，布尔值和 NULL 对象。</li><li><strong>对象数据绑定</strong> - 从任何 JAVA 类型转换 JSON。</li></ul><p>Gson 为这两种类型的数据绑定读 / 写 JSON。 数据绑定类似于 XML 的 JAXB 解析器。</p><h4 id="原始数据绑定"><a href="#原始数据绑定" class="headerlink" title="原始数据绑定"></a>原始数据绑定</h4><p>基元数据绑定是指将 JSON 映射到 JAVA 核心数据类型和内置集合。 </p><p>Gson 提供了各种内置适配器，可用于序列化 / 反序列化原始数据类型。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Gson</span> gson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">"Maxsu"</span><span class="token punctuation">;</span><span class="token keyword">long</span> rollNo <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> verified <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> marks <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">85</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// 序列化</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"{"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name: "</span> <span class="token operator">+</span> gson<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"rollNo: "</span> <span class="token operator">+</span> gson<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>rollNo<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"verified: "</span> <span class="token operator">+</span> gson<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>verified<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"marks:"</span> <span class="token operator">+</span> gson<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>marks<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 反序列化</span>name <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span><span class="token string">"\"Maxsu\""</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>rollNo <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>verified <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span><span class="token string">"false"</span><span class="token punctuation">,</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>marks <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span><span class="token string">"[100,90,85]"</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="对象数据绑定"><a href="#对象数据绑定" class="headerlink" title="对象数据绑定"></a>对象数据绑定</h4><p>对象数据绑定是指将 JSON 映射到任何 JAVA 对象。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Gson</span> gson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>student<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">;</span>student<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"Maxsu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> jsonString <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Student</span> student1 <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">,</span> <span class="token class-name">Student</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student1<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="Gson-树模型"><a href="#Gson-树模型" class="headerlink" title="Gson 树模型"></a>Gson 树模型</h3><h4 id="从JSON创建树"><a href="#从JSON创建树" class="headerlink" title="从JSON创建树"></a>从 JSON 创建树</h4><p>在读取 JSON 之后，<code>JsonParser</code> 提供了一个指向树的根节点的指针。根节点可以用来遍历整个树。 </p><p>下面的代码片段来获取提供的 JSON 字符串的根节点。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">JsonParser</span> parser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JsonParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> jsonString <span class="token operator">=</span> <span class="token string">"{\"name\":\"Maxsu\", \"age\":26,\"verified\":false,\"marks\": [100,90,85]}"</span><span class="token punctuation">;</span><span class="token comment">// 从JSON创建树</span><span class="token class-name">JsonElement</span> rootNode <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="遍历树模型"><a href="#遍历树模型" class="headerlink" title="遍历树模型"></a>遍历树模型</h4><p>在遍历树并处理数据时，使用到根节点的相对路径获取每个节点。 </p><p>以下代码片段显示了如何遍历树。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 遍历树模型</span><span class="token keyword">if</span> <span class="token punctuation">(</span>rootNode<span class="token punctuation">.</span><span class="token function">isJsonObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token class-name">JsonObject</span> details <span class="token operator">=</span> rootNode<span class="token punctuation">.</span><span class="token function">getAsJsonObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">JsonElement</span> nameNode <span class="token operator">=</span> details<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Name: "</span> <span class="token operator">+</span> nameNode<span class="token punctuation">.</span><span class="token function">getAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">JsonElement</span> ageNode <span class="token operator">=</span> details<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Age: "</span> <span class="token operator">+</span> ageNode<span class="token punctuation">.</span><span class="token function">getAsInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">JsonElement</span> verifiedNode <span class="token operator">=</span> details<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"verified"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Verified: "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>verifiedNode<span class="token punctuation">.</span><span class="token function">getAsBoolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">"Yes"</span> <span class="token operator">:</span> <span class="token string">"No"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">JsonArray</span> marks <span class="token operator">=</span> details<span class="token punctuation">.</span><span class="token function">getAsJsonArray</span><span class="token punctuation">(</span><span class="token string">"marks"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> marks<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">JsonPrimitive</span> value <span class="token operator">=</span> marks<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAsJsonPrimitive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">getAsInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="Gson-数据流"><a href="#Gson-数据流" class="headerlink" title="Gson 数据流"></a>Gson 数据流</h3><p>Streaming API 用于通过令牌读取 JSON 令牌。 它读取和写入 JSON 内容作为离散事件。 </p><p><code>JsonReader</code> 和 <code>JsonWriter</code> 将数据读取 / 写入令牌，称为 <code>JsonToken</code>。</p><p>这是处理 JSON 的三种方法中最强大的方法。 它具有最低的开销，并且在读 / 写操作中速度非常快。 它类似于用于 XML 的 Stax 解析器。</p><p>下面，我们将展示使用 GSON streaming API 来读取 JSON 数据。 Streaming API 与令牌的概念一起工作，Json 的每个细节都要仔细处理。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 创建JsonReader对象，并将其传递给json文本。</span><span class="token class-name">JsonReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JsonReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringReader</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 开始读取   </span>reader<span class="token punctuation">.</span><span class="token function">beginObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取下一个</span><span class="token class-name">JsonToken</span> token <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 检查类型</span><span class="token keyword">if</span> <span class="token punctuation">(</span>token<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">JsonToken</span><span class="token punctuation">.</span>NAME<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 获取内容</span>   fieldname <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">nextName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><h3 id="Gson-自定义类型适配器"><a href="#Gson-自定义类型适配器" class="headerlink" title="Gson 自定义类型适配器"></a>Gson 自定义类型适配器</h3><p>Gson 使用其内置适配器执行对象的序列化 / 反序列化。 它也支持自定义适配器。 </p><h4 id="创建自定义适配器"><a href="#创建自定义适配器" class="headerlink" title="创建自定义适配器"></a>创建自定义适配器</h4><p>通过扩展 <code>TypeAdapter</code> 类并传递目标类型的对象来创建自定义适配器。 </p><p>重写读写方法分别执行自定义的反序列化和序列化。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">StudentAdapter</span> <span class="token keyword">extends</span> <span class="token class-name">TypeAdapter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Student</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token class-name">JsonReader</span> reader<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>       <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">JsonWriter</span> writer<span class="token punctuation">,</span> <span class="token class-name">Student</span> student<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><h4 id="注册自定义适配器"><a href="#注册自定义适配器" class="headerlink" title="注册自定义适配器"></a>注册自定义适配器</h4><p>使用 <code>GsonBuilder</code> 注册自定义适配器并使用 <code>GsonBuilder</code> 创建一个 Gson 实例。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">GsonBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GsonBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> builder<span class="token punctuation">.</span><span class="token function">registerTypeAdapter</span><span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">StudentAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">Gson</span> gson <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="完整示例"><a href="#完整示例" class="headerlink" title="完整示例"></a>完整示例</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomAdaptersDemo</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">GsonBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GsonBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>builder<span class="token punctuation">.</span><span class="token function">registerTypeAdapter</span><span class="token punctuation">(</span><span class="token class-name">Worker</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">WorkerAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>builder<span class="token punctuation">.</span><span class="token function">setPrettyPrinting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Gson</span> gson <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> jsonString <span class="token operator">=</span> <span class="token string">"{\"name\":\"Maxsu\", \"rollNo\":1}"</span><span class="token punctuation">;</span><span class="token class-name">Worker</span> worker <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">,</span> <span class="token class-name">Worker</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>worker<span class="token punctuation">)</span><span class="token punctuation">;</span>jsonString <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>worker<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">WorkerAdapter</span> <span class="token keyword">extends</span> <span class="token class-name">TypeAdapter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Worker</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">Worker</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token class-name">JsonReader</span> reader<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span><span class="token class-name">Worker</span> worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>reader<span class="token punctuation">.</span><span class="token function">beginObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> fieldname <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>reader<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">JsonToken</span> token <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>token<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">JsonToken</span><span class="token punctuation">.</span>NAME<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>fieldname <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">nextName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>fieldname<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>token <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>worker<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>reader<span class="token punctuation">.</span><span class="token function">nextString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"rollNo"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>fieldname<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>token <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>worker<span class="token punctuation">.</span><span class="token function">setRollNo</span><span class="token punctuation">(</span>reader<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>reader<span class="token punctuation">.</span><span class="token function">endObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> worker<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">JsonWriter</span> writer<span class="token punctuation">,</span> <span class="token class-name">Worker</span> worker<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>writer<span class="token punctuation">.</span><span class="token function">beginObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>writer<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>writer<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span>worker<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>writer<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">"rollNo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>writer<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span>worker<span class="token punctuation">.</span><span class="token function">getRollNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>writer<span class="token punctuation">.</span><span class="token function">endObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Worker</span> <span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token keyword">int</span> rollNo<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getRollNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> rollNo<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setRollNo</span><span class="token punctuation">(</span><span class="token keyword">int</span> rollNo<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>rollNo <span class="token operator">=</span> rollNo<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token string">"Worker[ name = "</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">", roll no: "</span> <span class="token operator">+</span> rollNo <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="Gson-空对象支持"><a href="#Gson-空对象支持" class="headerlink" title="Gson 空对象支持"></a>Gson 空对象支持</h3><p>Gson 默认生成优化的 Json 内容，忽略 <code>NULL</code> 值。 </p><p>但是 <code>GsonBuilder</code> 提供的标志使用 <code>GsonBuilder.serializeNulls()</code> 方法在 Json 输出中显示 <code>NULL</code> 值。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 默认</span><span class="token class-name">Gson</span> gson1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">demo</span><span class="token punctuation">(</span>gson1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {"age":1}</span><span class="token comment">// 使用serializeNulls</span><span class="token class-name">GsonBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GsonBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>builder<span class="token punctuation">.</span><span class="token function">serializeNulls</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>builder<span class="token punctuation">.</span><span class="token function">setPrettyPrinting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Gson</span> gson2 <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">demo</span><span class="token punctuation">(</span>gson2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {"name": null, "age": 1 }</span></code></pre><p>其中，</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token class-name">Gson</span> gson<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>student<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> jsonString <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="Gson-版本支持"><a href="#Gson-版本支持" class="headerlink" title="Gson 版本支持"></a>Gson 版本支持</h3><p>Gson 提供了 <code>@Since</code> 注解来控制基于其各种版本的类的 Json 序列化 / 反序列化。</p><p>以下具有版本支持的类：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span><span class="token annotation punctuation">@Since</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token keyword">int</span> rollNo<span class="token punctuation">;</span><span class="token annotation punctuation">@Since</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token annotation punctuation">@Since</span><span class="token punctuation">(</span><span class="token number">1.1</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token keyword">boolean</span> verified<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getRollNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> rollNo<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setRollNo</span><span class="token punctuation">(</span><span class="token keyword">int</span> rollNo<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>rollNo <span class="token operator">=</span> rollNo<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setVerified</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> verified<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>verified <span class="token operator">=</span> verified<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isVerified</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> verified<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>进行 Json 序列化 / 反序列化：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 构建对象</span><span class="token class-name">Demo</span> demo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>demo<span class="token punctuation">.</span><span class="token function">setRollNo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>demo<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"Maxsu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>demo<span class="token punctuation">.</span><span class="token function">setVerified</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 默认</span><span class="token class-name">Gson</span> gson1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> jsonString1 <span class="token operator">=</span> gson1<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>demo<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jsonString1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {"rollNo":1,"name":"Maxsu","verified":true}</span><span class="token comment">// 版本支持</span><span class="token class-name">GsonBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GsonBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>builder<span class="token punctuation">.</span><span class="token function">setVersion</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Gson</span> gson2 <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> jsonString2 <span class="token operator">=</span> gson2<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>demo<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jsonString2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {"rollNo":1,"name":"Maxsu"}</span></code></pre><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cueWlpYmFpLmNvbS9nc29u">https://www.yiibai.com/gson<i class="fa fa-external-link-alt"></i></span></li></ul>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;Gson-介绍&quot;&gt;&lt;a href=&quot;#Gson-介绍&quot; class=&quot;headerlink&quot; title=&quot;Gson 介绍&quot;&gt;&lt;/a&gt;Gson 介绍&lt;/h3&gt;&lt;p&gt;Google Gson 是一个简单的基于 Java 的库，用于将 Java 对象序列化为 JSON，反之亦然。 它是由 Google 开发的一个开源库。&lt;/p&gt;
&lt;p&gt;以下几点说明为什么应该使用这个库 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;标准化&lt;/strong&gt; - Gson 是一个由 Google 管理的标准化库。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;高效&lt;/strong&gt; - 这是对 Java 标准库的可靠，快速和高效的扩展。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;优化&lt;/strong&gt; - Gson 库经过高度优化。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;支持泛型&lt;/strong&gt; - 它为泛型提供了广泛的支持。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;支持复杂的内部类&lt;/strong&gt; - 它支持具有深度继承层次结构的复杂对象。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Java" scheme="https://jueee.github.io/categories/Java/"/>
    
    <category term="JavaJar" scheme="https://jueee.github.io/categories/Java/JavaJar/"/>
    
    
    <category term="Java" scheme="https://jueee.github.io/tags/Java/"/>
    
    <category term="JavaJar" scheme="https://jueee.github.io/tags/JavaJar/"/>
    
    <category term="Google" scheme="https://jueee.github.io/tags/Google/"/>
    
  </entry>
  
  <entry>
    <title>Neo4j 之 Cypher 相关 SQL 汇总</title>
    <link href="https://jueee.github.io/2020/10/2020-10-24-Neo4j%E4%B9%8BCypher%E7%9B%B8%E5%85%B3SQL%E6%B1%87%E6%80%BB/"/>
    <id>https://jueee.github.io/2020/10/2020-10-24-Neo4j%E4%B9%8BCypher%E7%9B%B8%E5%85%B3SQL%E6%B1%87%E6%80%BB/</id>
    <published>2020-10-24T00:00:00.000Z</published>
    <updated>2020-10-26T02:27:56.129Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Cypher-语句"><a href="#Cypher-语句" class="headerlink" title="Cypher 语句"></a>Cypher 语句</h3><p>Cypher 是图形数据库 Neo4j 的声明式查询语言。</p><p>Cypher 语句规则和具备的能力：</p><ul><li>Cypher 通过模式匹配图数据库中的节点和关系，来提取信息或者修改数据。</li><li>Cypher 语句中允许使用变量，用来表示命名、绑定元素和参数。</li><li>Cypher 语句可以对节点、关系、标签和属性进行创建、更新和删除操作。</li><li>Cypher 语句可以管理索引和约束。</li></ul><a id="more"></a><h3 id="Cypher-汇总"><a href="#Cypher-汇总" class="headerlink" title="Cypher 汇总"></a>Cypher 汇总</h3><p>节点总数</p><pre class="language-cypher" data-language="cypher"><code class="language-cypher"><span class="token keyword">match</span> <span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">count</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>关系总数</p><pre class="language-cypher" data-language="cypher"><code class="language-cypher"><span class="token keyword">match</span> p<span class="token operator">=</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token operator">-&gt;</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">count</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="Cypher-查询"><a href="#Cypher-查询" class="headerlink" title="Cypher 查询"></a>Cypher 查询</h3><h4 id="随机查询"><a href="#随机查询" class="headerlink" title="随机查询"></a>随机查询</h4><pre class="language-cypher" data-language="cypher"><code class="language-cypher"><span class="token keyword">match</span> p<span class="token operator">=</span><span class="token punctuation">(</span>n<span class="token operator">:</span><span class="token class-name">MAIL</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token operator">-&gt;</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token keyword">return</span> p <span class="token keyword">limit</span> <span class="token number">20</span></code></pre><h4 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h4><p>根据开始节点，筛选来往关系：</p><pre class="language-cypher" data-language="cypher"><code class="language-cypher"><span class="token keyword">MATCH</span> p<span class="token operator">=</span><span class="token punctuation">(</span>n<span class="token operator">:</span><span class="token class-name">Mail</span><span class="token punctuation">{</span>mail<span class="token operator">:</span><span class="token string">'test@163.com'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">[</span>send<span class="token operator">:</span><span class="token relationship property">Send</span><span class="token operator">*</span><span class="token number">1</span><span class="token operator">..</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-&gt;</span><span class="token punctuation">(</span>m<span class="token operator">:</span><span class="token class-name">Mail</span><span class="token punctuation">)</span> <span class="token keyword">RETURN</span> p<span class="token punctuation">;</span><span class="token keyword">MATCH</span> p<span class="token operator">=</span><span class="token punctuation">(</span>n<span class="token operator">:</span><span class="token class-name">Mail</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">[</span>send<span class="token operator">:</span><span class="token relationship property">Send</span><span class="token operator">*</span><span class="token number">1</span><span class="token operator">..</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-&gt;</span><span class="token punctuation">(</span>m<span class="token operator">:</span><span class="token class-name">Mail</span><span class="token punctuation">)</span> <span class="token keyword">where</span> n<span class="token punctuation">.</span>mail<span class="token operator">=</span><span class="token string">'test@126.com'</span> <span class="token keyword">RETURN</span> p<span class="token punctuation">;</span></code></pre><h4 id="来往次数查询"><a href="#来往次数查询" class="headerlink" title="来往次数查询"></a>来往次数查询</h4><p>根据来往次数，筛选来往关系：</p><pre class="language-cypher" data-language="cypher"><code class="language-cypher"><span class="token keyword">MATCH</span> <span class="token punctuation">(</span>a<span class="token operator">:</span><span class="token class-name">MAIL</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">[</span>r<span class="token operator">:</span><span class="token relationship property">SEND</span><span class="token punctuation">]</span><span class="token operator">-&gt;</span><span class="token punctuation">(</span>b<span class="token operator">:</span><span class="token class-name">MAIL</span><span class="token punctuation">)</span> <span class="token keyword">WITH</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token function">TAIL</span> <span class="token punctuation">(</span><span class="token function">COLLECT</span> <span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> rr <span class="token keyword">WHERE</span> <span class="token function">size</span><span class="token punctuation">(</span>rr<span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">3</span> <span class="token keyword">RETURN</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>rr<span class="token punctuation">;</span></code></pre><h4 id="多层级查询"><a href="#多层级查询" class="headerlink" title="多层级查询"></a>多层级查询</h4><p>根据条件，关联 3 级：</p><pre class="language-cypher" data-language="cypher"><code class="language-cypher"><span class="token keyword">MATCH</span> p<span class="token operator">=</span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token class-name">MAIL</span><span class="token punctuation">{</span>mail<span class="token operator">:</span><span class="token string">'test@163.com'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">[</span>rels<span class="token operator">*</span><span class="token number">1</span><span class="token operator">..</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token keyword">return</span> p <span class="token keyword">limit</span> <span class="token number">100</span></code></pre><h4 id="来往关系"><a href="#来往关系" class="headerlink" title="来往关系"></a>来往关系</h4><pre class="language-cypher" data-language="cypher"><code class="language-cypher"><span class="token keyword">MATCH</span> <span class="token punctuation">(</span>p1<span class="token operator">:</span><span class="token class-name">MAIL</span><span class="token punctuation">{</span>mail<span class="token operator">:</span><span class="token string">'test1@163.com'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>p2<span class="token operator">:</span><span class="token class-name">MAIL</span><span class="token punctuation">{</span>mail<span class="token operator">:</span><span class="token string">'test2@163.com'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      p<span class="token operator">=</span><span class="token function">shortestpath</span><span class="token punctuation">(</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">[</span>rels<span class="token operator">*</span><span class="token operator">..</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">where</span> <span class="token keyword">all</span><span class="token punctuation">(</span>t <span class="token keyword">IN</span> rels <span class="token keyword">where</span> t<span class="token punctuation">.</span>date<span class="token operator">&gt;=</span><span class="token string">'2020-10-17 00:00:00'</span> <span class="token keyword">and</span> t<span class="token punctuation">.</span>date <span class="token operator">&lt;=</span><span class="token string">'2020-10-17 23:59:59'</span><span class="token punctuation">)</span> <span class="token keyword">return</span> p </code></pre><h4 id="过滤路径"><a href="#过滤路径" class="headerlink" title="过滤路径"></a>过滤路径</h4><p>普通过滤：</p><pre class="language-cypher" data-language="cypher"><code class="language-cypher"><span class="token keyword">match</span> p<span class="token operator">=</span><span class="token punctuation">(</span>n<span class="token operator">:</span><span class="token class-name">MAIL</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token operator">-&gt;</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token keyword">where</span> t<span class="token punctuation">.</span>date<span class="token operator">&gt;=</span><span class="token string">'2020-10-23 00:00:00'</span> <span class="token keyword">and</span> t<span class="token punctuation">.</span>date <span class="token operator">&lt;=</span><span class="token string">'2020-10-23 23:59:59'</span><span class="token keyword">return</span> p <span class="token keyword">limit</span> <span class="token number">20</span></code></pre><p>根据条件，关联 3 级并过滤路径：</p><pre class="language-cypher" data-language="cypher"><code class="language-cypher"><span class="token keyword">MATCH</span> p<span class="token operator">=</span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token class-name">MAIL</span><span class="token punctuation">{</span>mail<span class="token operator">:</span><span class="token string">'test@163.com'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">[</span>rels<span class="token operator">*</span><span class="token number">1</span><span class="token operator">..</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token keyword">all</span><span class="token punctuation">(</span>t <span class="token keyword">IN</span> rels <span class="token keyword">where</span> t<span class="token punctuation">.</span>date<span class="token operator">&gt;=</span><span class="token string">'2020-10-23'</span> <span class="token keyword">and</span> t<span class="token punctuation">.</span>date <span class="token operator">&lt;=</span><span class="token string">'2020-10-24'</span><span class="token punctuation">)</span> <span class="token keyword">return</span> p <span class="token keyword">limit</span> <span class="token number">100</span></code></pre><div class="note warning"><p><strong>需采用 where all (t IN rels where ...) 的方式，否则会报错：</strong> </p><p><code>Type mismatch: expected Any, Map, Node, Relationship, Point, Duration, Date, Time, LocalTime, LocalDateTime or DateTime but was List&lt;Relationship&gt;</code></p></div><h3 id="Cypher-删除"><a href="#Cypher-删除" class="headerlink" title="Cypher 删除"></a>Cypher 删除</h3><h4 id="删除所有"><a href="#删除所有" class="headerlink" title="删除所有"></a>删除所有</h4><p>删除所有节点或关系的标签或属性：</p><pre class="language-cypher" data-language="cypher"><code class="language-cypher"><span class="token keyword">MATCH</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">[</span>rel<span class="token punctuation">]</span><span class="token operator">-</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token keyword">DELETE</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>rel<span class="token punctuation">;</span><span class="token keyword">MATCH</span> <span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token class-name">Mail_test</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">[</span>rel<span class="token punctuation">]</span><span class="token operator">-</span><span class="token punctuation">(</span>b<span class="token operator">:</span><span class="token class-name">Mail_test</span><span class="token punctuation">)</span> <span class="token keyword">DELETE</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>rel<span class="token punctuation">;</span></code></pre><p>删除所有节点：</p><pre class="language-cypher" data-language="cypher"><code class="language-cypher"><span class="token keyword">MATCH</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token keyword">DELETE</span> e<span class="token punctuation">;</span><span class="token keyword">MATCH</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> <span class="token class-name">Mail_test</span><span class="token punctuation">)</span> <span class="token keyword">DELETE</span> e<span class="token punctuation">;</span></code></pre><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC8yYmI5OGM4MWQ4ZWU=">https://www.jianshu.com/p/2bb98c81d8ee<i class="fa fa-external-link-alt"></i></span></li></ul>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;Cypher-语句&quot;&gt;&lt;a href=&quot;#Cypher-语句&quot; class=&quot;headerlink&quot; title=&quot;Cypher 语句&quot;&gt;&lt;/a&gt;Cypher 语句&lt;/h3&gt;&lt;p&gt;Cypher 是图形数据库 Neo4j 的声明式查询语言。&lt;/p&gt;
&lt;p&gt;Cypher 语句规则和具备的能力：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cypher 通过模式匹配图数据库中的节点和关系，来提取信息或者修改数据。&lt;/li&gt;
&lt;li&gt;Cypher 语句中允许使用变量，用来表示命名、绑定元素和参数。&lt;/li&gt;
&lt;li&gt;Cypher 语句可以对节点、关系、标签和属性进行创建、更新和删除操作。&lt;/li&gt;
&lt;li&gt;Cypher 语句可以管理索引和约束。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Neo4j" scheme="https://jueee.github.io/categories/Neo4j/"/>
    
    
    <category term="Neo4j" scheme="https://jueee.github.io/tags/Neo4j/"/>
    
  </entry>
  
  <entry>
    <title>启用 Windows10 下的 Linux 子系统</title>
    <link href="https://jueee.github.io/2020/10/2020-10-23-%E5%90%AF%E7%94%A8Windows10%E4%B8%8B%E7%9A%84Linux%E5%AD%90%E7%B3%BB%E7%BB%9F/"/>
    <id>https://jueee.github.io/2020/10/2020-10-23-%E5%90%AF%E7%94%A8Windows10%E4%B8%8B%E7%9A%84Linux%E5%AD%90%E7%B3%BB%E7%BB%9F/</id>
    <published>2020-10-23T00:00:00.000Z</published>
    <updated>2020-10-26T02:27:56.115Z</updated>
    
    <content type="html"><![CDATA[<h3 id="WSL-介绍"><a href="#WSL-介绍" class="headerlink" title="WSL 介绍"></a>WSL 介绍</h3><p>Windows Subsystem for Linux（简称 WSL）是一个在 Windows 10 上能够运行原生 Linux 二进制可执行文件（ELF 格式）的兼容层。</p><p>官网：<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vemgtY24vd2luZG93cy93c2wv">https://docs.microsoft.com/zh-cn/windows/wsl/<i class="fa fa-external-link-alt"></i></span></p><a id="more"></a><h3 id="启用-WSL"><a href="#启用-WSL" class="headerlink" title="启用 WSL"></a>启用 WSL</h3><p>需要先启用 “适用于 Linux 的 Windows 子系统” 可选功能，然后才能在 Windows 上安装 Linux 分发。</p><p>以管理员身份打开 PowerShell 并运行：</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">dism<span class="token punctuation">.</span>exe <span class="token operator">/</span>online <span class="token operator">/</span><span class="token function">enable-feature</span> <span class="token operator">/</span>featurename:Microsoft<span class="token operator">-</span>Windows<span class="token operator">-</span>Subsystem<span class="token operator">-</span>Linux <span class="token operator">/</span>all <span class="token operator">/</span>norestart</code></pre><p>如下图所示：</p><p><img src="/images/2020/10/image-20201022164416572.png" alt="image-20201022164416572" loading="lazy"></p><p>然后，<strong>重新启动计算机</strong>。</p><h3 id="安装-Linux"><a href="#安装-Linux" class="headerlink" title="安装 Linux"></a>安装 Linux</h3><p>打开 <span class="exturl" data-url="aHR0cHM6Ly9ha2EubXMvd3Nsc3RvcmU=">Microsoft Store<i class="fa fa-external-link-alt"></i></span>，并选择你偏好的 Linux 分发版。</p><p>单击以下链接会打开每个分发版的 Microsoft Store 页面：</p><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cubWljcm9zb2Z0LmNvbS9zdG9yZS9hcHBzLzlwam4zODhocDhjOQ==">Ubuntu 16.04 LTS<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cubWljcm9zb2Z0LmNvbS9zdG9yZS9hcHBzLzlOOVROR1ZOREwzUQ==">Ubuntu 18.04 LTS<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cubWljcm9zb2Z0LmNvbS9zdG9yZS9hcHBzLzluNnN2d3Mzcng3MQ==">Ubuntu 20.04 LTS<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cubWljcm9zb2Z0LmNvbS9zdG9yZS9hcHBzLzlOSkZaSzAwRkdLVg==">openSUSE Leap 15.1<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cubWljcm9zb2Z0LmNvbS9zdG9yZS9hcHBzLzlNWjNEMVRSUDhUMQ==">SUSE Linux Enterprise Server 12 SP5<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cubWljcm9zb2Z0LmNvbS9zdG9yZS9hcHBzLzlQTjQ5OFZQTUYzWg==">SUSE Linux Enterprise Server 15 SP1<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cubWljcm9zb2Z0LmNvbS9zdG9yZS9hcHBzLzlQS1IzNFROQ1YwNw==">Kali Linux<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cubWljcm9zb2Z0LmNvbS9zdG9yZS9hcHBzLzlNU1ZLUUM3OFBLNg==">Debian GNU/Linux<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cubWljcm9zb2Z0LmNvbS9zdG9yZS9hcHBzLzluNmdkbTRrMmhuYw==">Fedora Remix for WSL<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cubWljcm9zb2Z0LmNvbS9zdG9yZS9hcHBzLzlOVjFHVjFQWFo2UA==">Pengwin<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cubWljcm9zb2Z0LmNvbS9zdG9yZS9hcHBzLzlOOExQMFg5M1ZDUA==">Pengwin Enterprise<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cubWljcm9zb2Z0LmNvbS9zdG9yZS9hcHBzLzlwODA0Y3JmMDM5NQ==">Alpine WSL<i class="fa fa-external-link-alt"></i></span></li></ul><p>在分发版的页面中，选择 “获取”。</p><h3 id="设置新分发"><a href="#设置新分发" class="headerlink" title="设置新分发"></a>设置新分发</h3><p>首次启动新安装的 Linux 分发版时，将打开一个控制台窗口，系统会要求你等待一分钟或两分钟，以便文件解压缩并存储到电脑上。 </p><p>未来的所有启动时间应不到一秒。</p><p>然后，需要<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vemgtY24vd2luZG93cy93c2wvdXNlci1zdXBwb3J0">为新的 Linux 分发版创建用户帐户和密码<i class="fa fa-external-link-alt"></i></span>。</p><p><img src="/images/2020/10/image-20201022171700195.png" alt="image-20201022171700195" loading="lazy"></p><ul><li>此<strong>用户名</strong>和<strong>密码</strong>特定于安装的每个单独的 Linux 分发版，与 Windows 用户名无关。</li><li>创建<strong>用户名</strong>和<strong>密码</strong>后，该帐户将是分发版的默认用户，并将在启动时自动登录。</li><li>此帐户将被视为 Linux 管理员，能够运行 <code>sudo</code> (Super User Do) 管理命令。</li><li>在适用于 Linux 的 Windows 子系统上运行的每个 Linux 分发版都有其自身的 Linux 用户帐户和密码。 每当添加分发版、重新安装或重置时，都必须配置一个 Linux 用户帐户。</li></ul><h3 id="查看版本信息"><a href="#查看版本信息" class="headerlink" title="查看版本信息"></a>查看版本信息</h3><p>Debian 查看版本当前操作系统发行版信息：</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">cat</span> /etc/os-release<span class="token assign-left variable">PRETTY_NAME</span><span class="token operator">=</span><span class="token string">"Debian GNU/Linux 10 (buster)"</span><span class="token assign-left variable">NAME</span><span class="token operator">=</span><span class="token string">"Debian GNU/Linux"</span><span class="token assign-left variable">VERSION_ID</span><span class="token operator">=</span><span class="token string">"10"</span><span class="token assign-left variable">VERSION</span><span class="token operator">=</span><span class="token string">"10 (buster)"</span><span class="token assign-left variable">VERSION_CODENAME</span><span class="token operator">=</span>buster<span class="token assign-left variable">ID</span><span class="token operator">=</span>debian<span class="token assign-left variable">HOME_URL</span><span class="token operator">=</span><span class="token string">"https://www.debian.org/"</span><span class="token assign-left variable">SUPPORT_URL</span><span class="token operator">=</span><span class="token string">"https://www.debian.org/support"</span><span class="token assign-left variable">BUG_REPORT_URL</span><span class="token operator">=</span><span class="token string">"https://bugs.debian.org/"</span></code></pre><p>Debian 查看当前操作系统版本信息</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">cat</span> /proc/versionLinux version <span class="token number">4.4</span>.0-19041-Microsoft <span class="token punctuation">(</span>Microsoft@Microsoft.com<span class="token punctuation">)</span> <span class="token punctuation">(</span>gcc version <span class="token number">5.4</span>.0 <span class="token punctuation">(</span>GCC<span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token comment">#1-Microsoft Fri Dec 06 14:06:00 PST 2019</span></code></pre><p>Debian 查看版本当前操作系统内核信息</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">uname</span> -r<span class="token number">4.4</span>.0-19041-Microsoft</code></pre><h3 id="卸载-WSL"><a href="#卸载-WSL" class="headerlink" title="卸载 WSL"></a>卸载 WSL</h3><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p>在 powershell 中输入下面的代码</p><pre class="language-none"><code class="language-none">wslconfig /l  #显示出你安装的列表。wslconfig /u debian #debian为上述列表中的名字   注销子系统</code></pre><h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><p>打开开始菜单，右键卸载掉。</p><p><img src="/images/2020/10/image-20201023142313438.png" alt="image-20201023142313438" loading="lazy"></p><h3 id="更新和升级包"><a href="#更新和升级包" class="headerlink" title="更新和升级包"></a>更新和升级包</h3><p>大多数分发版随附了一个空的的包目录或最简单的包目录。</p><p>强烈建议定期更新包目录并使用分发版的首选包管理器升级已安装的包。 </p><p>对于 Debian/Ubuntu，请使用 apt，修改 <code>/etc/apt/sources.list</code>：</p><pre class="language-bash" data-language="bash"><code class="language-bash">deb http://mirrors.163.com/debian/ buster main contrib non-free<span class="token comment"># deb-src http://mirrors.163.com/debian/ buster main contrib non-free</span>deb http://mirrors.163.com/debian/ buster-updates main contrib non-free<span class="token comment"># deb-src http://mirrors.163.com/debian/ buster-updates main contrib non-free</span>deb http://mirrors.163.com/debian/ buster-backports main contrib non-free<span class="token comment"># deb-src http://mirrors.163.com/debian/ buster-backports main contrib non-free</span>deb http://mirrors.163.com/debian-security buster/updates main contrib non-free<span class="token comment"># deb-src http://mirrors.163.com/debian-security buster/updates main contrib non-free</span></code></pre><p>更新</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> update <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> <span class="token function">apt</span> upgrade</code></pre><h3 id="开启-ssh-连接"><a href="#开启-ssh-连接" class="headerlink" title="开启 ssh 连接"></a>开启 ssh 连接</h3><ol><li><p>卸载 ssh server</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> remove openssh-server</code></pre></li><li><p>安装 ssh server</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> openssh-server</code></pre></li><li><p>按需修改 ssh server 配置 </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">vim</span> /etc/ssh/sshd_config</code></pre><p>可能需要修改以下几项：</p><pre class="language-none"><code class="language-none">Port 2222  #默认的是22，但是windows有自己的ssh服务，也是监听的22端口，所以这里要改一下UsePrivilegeSeparation noPasswordAuthentication yesAllowUsers youusername # 这里改成你登陆WSL用的</code></pre></li><li><p>启动 ssh server</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">service</span> <span class="token function">ssh</span> --full-restart</code></pre></li></ol><p>现在就可以用 xshell 等软件登陆 Debian on windows 了，IP 是 127.0.0.1。</p><p>但是要注意，cmd 的窗口还不能关掉。关掉后 sshd 服务也会关掉，连接就断开了。</p><h3 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h3><p>如果提示下面报错，很可能是进行设置后，没有重启电脑。</p><p><img src="/images/2020/10/image-20201022170346394.png" alt="image-20201022170346394" loading="lazy"></p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vemgtY24vd2luZG93cy93c2wvaW5zdGFsbC13aW4xMA==">https://docs.microsoft.com/zh-cn/windows/wsl/install-win10<i class="fa fa-external-link-alt"></i></span></li></ul>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;WSL-介绍&quot;&gt;&lt;a href=&quot;#WSL-介绍&quot; class=&quot;headerlink&quot; title=&quot;WSL 介绍&quot;&gt;&lt;/a&gt;WSL 介绍&lt;/h3&gt;&lt;p&gt;Windows Subsystem for Linux（简称 WSL）是一个在 Windows 10 上能够运行原生 Linux 二进制可执行文件（ELF 格式）的兼容层。&lt;/p&gt;
&lt;p&gt;官网：&lt;a href=&quot;https://docs.microsoft.com/zh-cn/windows/wsl/&quot;&gt;https://docs.microsoft.com/zh-cn/windows/wsl/&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://jueee.github.io/categories/Linux/"/>
    
    <category term="软件" scheme="https://jueee.github.io/categories/%E8%BD%AF%E4%BB%B6/"/>
    
    <category term="Windows" scheme="https://jueee.github.io/categories/%E8%BD%AF%E4%BB%B6/Windows/"/>
    
    
    <category term="Linux" scheme="https://jueee.github.io/tags/Linux/"/>
    
    <category term="软件" scheme="https://jueee.github.io/tags/%E8%BD%AF%E4%BB%B6/"/>
    
    <category term="Windows" scheme="https://jueee.github.io/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>Google 工具类 Guava 的基本使用</title>
    <link href="https://jueee.github.io/2020/10/2020-10-22-Google%E5%B7%A5%E5%85%B7%E7%B1%BBGuava%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>https://jueee.github.io/2020/10/2020-10-22-Google%E5%B7%A5%E5%85%B7%E7%B1%BBGuava%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</id>
    <published>2020-10-22T00:00:00.000Z</published>
    <updated>2020-10-22T10:32:18.739Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Guava-介绍"><a href="#Guava-介绍" class="headerlink" title="Guava 介绍"></a>Guava 介绍</h3><p>Guava 是一种基于开源的 Java 库，其中包含谷歌正在由他们很多项目使用的很多核心库。这个库是为了方便编码，并减少编码错误。这个库提供用于集合，缓存，支持原语，并发性，常见注解，字符串处理，I/O 和验证的实用方法。</p><a id="more"></a><h4 id="Guava-优点"><a href="#Guava-优点" class="headerlink" title="Guava 优点"></a>Guava 优点</h4><ul><li>标准化 - Guava 库是由谷歌托管。</li><li>高效 - 可靠，快速和有效的扩展 JAVA 标准库</li><li>优化 -Guava 库经过高度的优化。</li><li>函数式编程 - 增加 JAVA 功能和处理能力。</li><li>实用程序 - 提供了经常需要在应用程序开发的许多实用程序类。</li><li>验证 - 提供标准的故障安全验证机制。</li><li>最佳实践 - 强调最佳的做法。</li></ul><h4 id="Guava-链接"><a href="#Guava-链接" class="headerlink" title="Guava 链接"></a>Guava 链接</h4><ul><li>GitHub：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZS9ndWF2YQ==">https://github.com/google/guava<i class="fa fa-external-link-alt"></i></span></li><li>官网：<span class="exturl" data-url="aHR0cHM6Ly9ndWF2YS5kZXYv">https://guava.dev/<i class="fa fa-external-link-alt"></i></span></li></ul><h4 id="Guava-引入"><a href="#Guava-引入" class="headerlink" title="Guava 引入"></a>Guava 引入</h4><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.google.guava<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>guava<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>30.0-jre<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></code></pre><h3 id="Guava-集合工具"><a href="#Guava-集合工具" class="headerlink" title="Guava 集合工具"></a>Guava 集合工具</h3><ul><li><strong><code>Multiset</code></strong><br>一个扩展来设置界面，允许重复的元素。</li><li><strong><code>Multimap</code></strong><br>一个扩展来映射接口，以便其键可一次被映射到多个值</li><li><strong><code>BiMap</code></strong><br>一个扩展来映射接口，支持反向操作。</li><li><strong><code>Table</code></strong><br>表代表一个特殊的图，其中两个键可以在组合的方式被指定为单个值。</li></ul><h3 id="Guava-缓存工具"><a href="#Guava-缓存工具" class="headerlink" title="Guava 缓存工具"></a>Guava 缓存工具</h3><ul><li><p><strong><code>LoadingCache</code></strong></p><p>LoadingCache 提供了一个非常强大的基于内存的 LoadingCache&lt;K，V&gt;。</p><p>在缓存中自动加载值，它提供了许多实用的方法，在有缓存需求时非常有用。</p></li></ul><h3 id="Guava-字符串工具"><a href="#Guava-字符串工具" class="headerlink" title="Guava 字符串工具"></a>Guava 字符串工具</h3><ul><li><p><strong><code>Joiner</code></strong><br>实用加入对象，字符串等。</p></li><li><p><strong><code>Spilter</code></strong><br>实用程序用来分割字符串。</p></li><li><p><strong><code>CharMatcher</code></strong><br>实用的字符操作。</p></li><li><p><strong><code>CaseFormat</code></strong><br>实用程序，用于改变字符串格式。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">CaseFormat</span><span class="token punctuation">.</span>LOWER_HYPHEN<span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span><span class="token class-name">CaseFormat</span><span class="token punctuation">.</span>LOWER_CAMEL<span class="token punctuation">,</span> <span class="token string">"test-data"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// testData</span><span class="token class-name">CaseFormat</span><span class="token punctuation">.</span>LOWER_UNDERSCORE<span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span><span class="token class-name">CaseFormat</span><span class="token punctuation">.</span>LOWER_CAMEL<span class="token punctuation">,</span> <span class="token string">"test_data"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// testData</span><span class="token class-name">CaseFormat</span><span class="token punctuation">.</span>UPPER_UNDERSCORE<span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span><span class="token class-name">CaseFormat</span><span class="token punctuation">.</span>UPPER_CAMEL<span class="token punctuation">,</span> <span class="token string">"test_data"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// TestData</span></code></pre></li></ul><h3 id="Guava-原语工具"><a href="#Guava-原语工具" class="headerlink" title="Guava 原语工具"></a>Guava 原语工具</h3><p>作为 Java 的原语类型，不能用来传递在泛型或于类别作为输入。Guava 提供大量包装工具类来处理原始类型的对象。</p><p>以下是有用的原始处理工具的列表：</p><ul><li><strong><code>Bytes</code></strong><br>实用程序的原始字节。</li><li><strong><code>Shorts</code></strong><br>实用的原始 short。</li><li><strong><code>Ints</code></strong><br>实用为基本整型。</li><li><strong><code>Longs</code></strong><br>实用的原始长整型。</li><li><strong><code>Floats</code></strong><br>实用为基本 float。</li><li><strong><code>Doubles</code></strong><br>实用为基本的 double。</li><li><strong><code>Chars</code></strong><br>实用的原始字符。</li><li><strong><code>Booleans</code></strong><br>实用为基本布尔。</li></ul><h3 id="Guava-数学工具"><a href="#Guava-数学工具" class="headerlink" title="Guava 数学工具"></a>Guava 数学工具</h3><ul><li><p><strong><code>IntMath</code></strong><br>数学工具为 int 类型。</p></li><li><p><strong><code>LongMath</code></strong><br>数学工具为 long 类型。</p></li><li><p><strong><code>BigIntegerMath</code></strong><br>数学实用程序处理 BigInteger。</p></li></ul><h3 id="Guava-其他类库"><a href="#Guava-其他类库" class="headerlink" title="Guava 其他类库"></a>Guava 其他类库</h3><h4 id="Optional"><a href="#Optional" class="headerlink" title="Optional"></a>Optional</h4><p>Optional 用于包含非空对象的不可变对象。 Optional 对象，用于不存在值表示 null。这个类有各种实用的方法，以方便代码来处理为可用或不可用，而不是检查 null 值。</p><ul><li><strong><code>static &lt;T&gt; Optional&lt;T&gt; absent()</code></strong><br>返回没有包含的参考 Optional 的实例。</li><li><strong><code>abstract Set&lt;T&gt; asSet()</code></strong><br>返回一个不可变的单集的唯一元素所包含的实例 (如果存在); 否则为一个空的不可变的集合。</li><li><strong><code>abstract boolean equals(Object object)</code></strong><br>返回 true 如果对象是一个 Optional 实例，无论是包含引用彼此相等或两者都不存在。</li><li><strong><code>static &lt;T&gt; Optional&lt;T&gt; fromNullable(T nullableReference)</code></strong><br>如果 nullableReference 非空，返回一个包含引用 Optional 实例；否则返回 absent ()。</li><li><strong><code>abstract T get()</code></strong><br>返回所包含的实例，它必须存在。</li><li><strong><code>abstract int hashCode()</code></strong><br>返回此实例的哈希码。</li><li><strong><code>abstract boolean isPresent()</code></strong><br>返回 true，如果这支架包含一个 (非空) 的实例。</li><li><strong><code>static &lt;T&gt; Optional&lt;T&gt; of(T reference)</code></strong><br>返回包含给定的非空引用 Optional 实例。</li><li><strong><code>abstract Optional&lt;T&gt; or(Optional&lt;? extends T&gt; secondChoice)</code></strong><br>返回此 Optional，如果它有一个值存在；否则返回 secondChoice。</li><li><strong><code>abstract T or(Supplier&lt;? extends T&gt; supplier)</code></strong><br>返回所包含的实例 (如果存在); 否则 supplier.get ()。</li><li><strong><code>abstract T or(T defaultValue)</code></strong><br>返回所包含的实例 (如果存在); 否则为默认值。</li><li><strong><code>abstract T orNull()</code></strong><br>返回所包含的实例 (如果存在); 否则返回 null。</li><li><strong><code>static &lt;T&gt; Iterable&lt;T&gt; presentInstances(Iterable&lt;? extends Optional&lt;? extends T&gt;&gt; optionals)</code></strong><br>从提供的 optionals 返回每个实例的存在的值，从而跳过 absent ()。</li><li><strong><code>abstract String toString()</code></strong><br>返回此实例的字符串表示。</li><li><strong><code>abstract &lt;V&gt; Optional&lt;V&gt; transform(Function&lt;? super T,V&gt; function)</code></strong><br>如果实例存在，则它被转换给定的功能；否则 absent () 被返回。</li></ul><p>示例代码：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">OptionalDemo</span> guavaTester <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OptionalDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Integer</span> value1 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token class-name">Integer</span> value2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> a <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">fromNullable</span><span class="token punctuation">(</span>value1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> b <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>value2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>guavaTester<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> a<span class="token punctuation">,</span> <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"First parameter is present: "</span> <span class="token operator">+</span> a<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Second parameter is present: "</span> <span class="token operator">+</span> b<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span class="token class-name">Integer</span> value1 <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Integer</span> value2 <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> value1 <span class="token operator">+</span> value2<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="Preconditions"><a href="#Preconditions" class="headerlink" title="Preconditions"></a>Preconditions</h4><p>Preconditions 提供静态方法来检查方法或构造函数，被调用是否给定适当的参数。它检查的先决条件。其方法失败抛出 IllegalArgumentException。</p><ul><li><strong><code>static void checkArgument(boolean expression)</code></strong><br>确保涉及的一个或多个参数来调用方法表达式的真相。</li><li><strong><code>static void checkArgument(boolean expression, Object errorMessage)</code></strong><br>确保涉及的一个或多个参数来调用方法表达式的真相。</li><li><strong><code>static void checkArgument(boolean expression, String errorMessageTemplate, Object... errorMessageArgs)</code></strong><br>确保涉及的一个或多个参数来调用方法表达式的真相。</li><li><strong><code>static int checkElementIndex(int index, int size)</code></strong><br>确保索引指定一个数组，列表或尺寸大小的字符串有效的元素。</li><li><strong><code>static int checkElementIndex(int index, int size, String desc)</code></strong><br>确保索引指定一个数组，列表或尺寸大小的字符串有效的元素。</li><li><strong><code>static &lt;T&gt; T checkNotNull(T reference)</code></strong><br>确保对象引用作为参数传递给调用方法不为空。</li><li><strong><code>static &lt;T&gt; T checkNotNull(T reference, Object errorMessage)</code></strong><br>确保对象引用作为参数传递给调用方法不为空。</li><li><strong><code>static &lt;T&gt; T checkNotNull(T reference, String errorMessageTemplate, Object... errorMessageArgs)</code></strong><br>确保对象引用作为参数传递给调用方法不为空。</li><li><strong><code>static int checkPositionIndex(int index, int size)</code></strong><br>确保索引指定一个数组，列表或尺寸大小的字符串的有效位置。</li><li><strong><code>static int checkPositionIndex(int index, int size, String desc)</code></strong><br>确保索引指定一个数组，列表或尺寸大小的字符串的有效位置。</li><li><strong><code>static void checkPositionIndexes(int start, int end, int size)</code></strong><br>确保开始和结束指定数组，列表或字符串大小有效的位置，并按照顺序。</li><li><strong><code>static void checkState(boolean expression)</code></strong><br>确保涉及调用实例的状态，但不涉及任何参数来调用方法表达式的真相。</li><li><strong><code>static void checkState(boolean expression, Object errorMessage)</code></strong><br>确保涉及调用实例的状态，但不涉及任何参数来调用方法表达式的真相。</li><li><strong><code>static void checkState(boolean expression, String errorMessageTemplate, Object... errorMessageArgs)</code></strong><br>确保涉及调用实例的状态，但不涉及任何参数来调用方法表达式的真相。</li></ul><p>示例代码：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">PreconditionsDemo</span> guavaTester <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PreconditionsDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>guavaTester<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Negative value -3.0.</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalArgumentException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>guavaTester<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NullPointerException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// First parameter is Null.</span><span class="token punctuation">}</span><span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>guavaTester<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IndexOutOfBoundsException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Invalid index. (6) must be less than size (5)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token keyword">double</span> input<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IllegalArgumentException</span> <span class="token punctuation">{</span><span class="token class-name">Preconditions</span><span class="token punctuation">.</span><span class="token function">checkArgument</span><span class="token punctuation">(</span>input <span class="token operator">&gt;</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token string">"Negative value %s."</span><span class="token punctuation">,</span> input<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> a<span class="token punctuation">,</span> <span class="token class-name">Integer</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>a <span class="token operator">=</span> <span class="token class-name">Preconditions</span><span class="token punctuation">.</span><span class="token function">checkNotNull</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token string">"First parameter is Null."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>b <span class="token operator">=</span> <span class="token class-name">Preconditions</span><span class="token punctuation">.</span><span class="token function">checkNotNull</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token string">"Second parameter is Null."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token keyword">int</span> input<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token class-name">Preconditions</span><span class="token punctuation">.</span><span class="token function">checkElementIndex</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> data<span class="token punctuation">.</span>length<span class="token punctuation">,</span> <span class="token string">"Invalid index."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="Ordering"><a href="#Ordering" class="headerlink" title="Ordering"></a>Ordering</h4><p>Ordering (排序) 可以被看作是一个丰富的比较具有增强功能的链接，多个实用方法，多类型排序功能等。</p><ul><li><strong><code>static Ordering&lt;Object&gt; allEqual()</code></strong><br>返回一个排序，它把所有的值相等，说明 “没有顺序。” 通过这个顺序以任何稳定的排序算法的结果，在改变没有顺序元素。</li><li><strong><code>static Ordering&lt;Object&gt; arbitrary()</code></strong><br>返回一个任意顺序对所有对象，其中 compare (a, b) == 0 意味着 a == b（身份平等）。</li><li><strong><code>int binarySearch(List&lt;? extends T&gt; sortedList, T key)</code></strong><br>搜索排序列表使用键的二进制搜索算法。</li><li><strong><code>abstract int compare(T left, T right)</code></strong><br>比较两个参数的顺序。</li><li><strong><code>&lt;U extends T&gt; Ordering&lt;U&gt; compound(Comparator&lt;? super U&gt; secondaryComparator)</code></strong><br>返回首先使用排序这一点，但它排序中的 “tie”，然后委托给 secondaryComparator 事件。</li><li><strong><code>static &lt;T&gt; Ordering&lt;T&gt; compound(Iterable&lt;? extends Comparator&lt;? super T&gt;&gt; comparators)</code></strong><br>返回一个排序它尝试每个给定的比较器，以便直到一个非零结果找到，返回该结果，并返回零仅当所有比较器返回零。</li><li><strong><code>static &lt;T&gt; Ordering&lt;T&gt; explicit(List&lt;T&gt; valuesInOrder)</code></strong><br>返回根据它们出现的定列表中的顺序比较对象进行排序。</li><li><strong><code>static &lt;T&gt; Ordering&lt;T&gt; explicit(T leastValue, T... remainingValuesInOrder)</code></strong><br>返回根据它们所赋予本方法的顺序进行比较的对象进行排序。</li><li><strong><code>static &lt;T&gt; Ordering&lt;T&gt; from(Comparator&lt;T&gt; comparator)</code></strong><br>返回基于现有的比较实例进行排序。</li><li><strong><code>&lt;E extends T&gt; List&lt;E&gt; greatestOf(Iterable&lt;E&gt; iterable, int k)</code></strong><br>返回根据这个顺序给出迭代，为了从最大到最小的 k 个最大的元素。</li><li><strong><code>&lt;E extends T&gt; List&lt;E&gt; greatestOf(Iterator&lt;E&gt; iterator, int k)</code></strong><br>返回从给定的迭代器按照这个顺序，从最大到最小 k 个最大的元素。</li><li><strong><code>&lt;E extends T&gt; ImmutableList&lt;E&gt; immutableSortedCopy(Iterable&lt;E&gt; elements)</code></strong><br>返回包含的元素排序这种排序的不可变列表。</li><li><strong><code>boolean isOrdered(Iterable&lt;? extends T&gt; iterable)</code></strong><br>返回 true 如果在迭代后的第一个的每个元素是大于或等于在它之前，根据该排序的元素。</li><li><strong><code>boolean isStrictlyOrdered(Iterable&lt;? extends T&gt; iterable)</code></strong><br>返回 true 如果在迭代后的第一个的每个元素是严格比在它之前，根据该排序的元素更大。</li><li><strong><code>&lt;E extends T&gt; List&lt;E&gt; leastOf(Iterable&lt;E&gt; iterable, int k)</code></strong><br>返回根据这个顺序给出迭代，从而从低到最大的 k 个最低的元素。</li><li><strong><code>&lt;E extends T&gt; List&lt;E&gt; leastOf(Iterator&lt;E&gt; elements, int k)</code></strong><br>返回第 k 从给定的迭代器，按照这个顺序从最低到最大至少元素。</li><li><strong><code>&lt;S extends T&gt; Ordering&lt;Iterable&lt;S&gt;&gt; lexicographical()</code></strong><br>返回一个新的排序它通过比较对应元素两两直到非零结果发现排序迭代；规定 “字典顺序”。</li><li><strong><code>&lt;E extends T&gt; E max(E a, E b)</code></strong><br>返回两个值按照这个顺序的较大值。</li><li><strong><code>&lt;E extends T&gt; E max(E a, E b, E c, E... rest)</code></strong><br>返回指定的值，根据这个顺序是最大的。</li><li><strong><code>&lt;E extends T&gt; E max(Iterable&lt;E&gt; iterable)</code></strong><br>返回指定的值，根据这个顺序是最大的。</li><li><strong><code>&lt;E extends T&gt; E max(Iterator&lt;E&gt; iterator)</code></strong><br>返回指定的值，根据这个顺序是最大的。</li><li><strong><code>&lt;E extends T&gt; E min(E a, E b)</code></strong><br>返回两个值按照这个顺序的较小者。</li><li><strong><code>&lt;E extends T&gt; E min(E a, E b, E c, E... rest)</code></strong><br>返回最少指定的值，根据这个顺序。</li><li><strong><code>&lt;E extends T&gt; E min(Iterable&lt;E&gt; iterable)</code></strong><br>返回最少指定的值，根据这个顺序。</li><li><strong><code>&lt;E extends T&gt; E min(Iterator&lt;E&gt; iterator)</code></strong><br>返回最少指定的值，根据这个顺序。</li><li><strong><code>static &lt;C extends Comparable&gt; Ordering&lt;C&gt; natural()</code></strong><br>返回使用值的自然顺序排序序列化。</li><li><strong><code>&lt;S extends T&gt; Ordering&lt;S&gt; nullsFirst()</code></strong><br>返回对待 null 小于所有其他值，并使用此来比较非空值排序。</li><li><strong><code>&lt;S extends T&gt; Ordering&lt;S&gt; nullsLast()</code></strong><br>返回对待 null 作为大于所有其他值，并使用这个顺序来比较非空值排序。</li><li><strong><code>&lt;F&gt; Ordering&lt;F&gt; onResultOf(Function&lt;F,? extends T&gt; function)</code></strong><br>返回一个新的排序在 F 上，首先应用功能给它们，然后比较使用此这些结果的顺序元素。</li><li><strong><code>&lt;S extends T&gt; Ordering&lt;S&gt; reverse()</code></strong><br>返回相反顺序；顺序相当于 Collections.reverseOrder（Comparator）。</li><li><strong><code>&lt;E extends T&gt; List&lt;E&gt; sortedCopy(Iterable&lt;E&gt; elements)</code></strong><br>返回包含的元素排序此排序可变列表；使用这个只有在结果列表可能需要进一步修改，或可能包含 null。</li><li><strong><code>static Ordering&lt;Object&gt; usingToString()</code></strong><br>返回由它们的字符串表示的自然顺序，toString () 比较对象进行排序。</li></ul><p>示例代码：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> numbers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>numbers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>numbers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>numbers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>numbers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">51</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>numbers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">53</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>numbers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">35</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>numbers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>numbers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>numbers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">43</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>numbers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [5, 2, 15, 51, 53, 35, 45, 32, 43, 16]</span><span class="token class-name">Ordering</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> ordering <span class="token operator">=</span> <span class="token class-name">Ordering</span><span class="token punctuation">.</span><span class="token function">natural</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>numbers<span class="token punctuation">,</span> ordering<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [2, 5, 15, 16, 32, 35, 43, 45, 51, 53]</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ordering<span class="token punctuation">.</span><span class="token function">isOrdered</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Minimum: "</span> <span class="token operator">+</span> ordering<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Maximum: "</span> <span class="token operator">+</span> ordering<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 53</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>numbers<span class="token punctuation">,</span> ordering<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 倒序</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [53, 51, 45, 43, 35, 32, 16, 15, 5, 2]</span>numbers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [53, 51, 45, 43, 35, 32, 16, 15, 5, 2, null]</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>numbers<span class="token punctuation">,</span> ordering<span class="token punctuation">.</span><span class="token function">nullsFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [null, 2, 5, 15, 16, 32, 35, 43, 45, 51, 53]</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> names <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>names<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Ram"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>names<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Shyam"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>names<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Mohan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>names<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Sohan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>names<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Ramesh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>names<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Suresh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>names<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Naresh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>names<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Mahesh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>names<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>names<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Vikas"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>names<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Deepak"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Another List: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [Ram, Shyam, Mohan, Sohan, Ramesh, Suresh, Naresh, Mahesh, null, Vikas, Deepak]</span><span class="token class-name">Ordering</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> ordering2 <span class="token operator">=</span> <span class="token class-name">Ordering</span><span class="token punctuation">.</span><span class="token function">natural</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>names<span class="token punctuation">,</span> ordering2<span class="token punctuation">.</span><span class="token function">nullsFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Null first then reverse sorted list: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [Vikas, Suresh, Sohan, Shyam, Ramesh, Ram, Naresh, Mohan, Mahesh, Deepak, null]</span></code></pre><h4 id="Range"><a href="#Range" class="headerlink" title="Range"></a>Range</h4><p>Range 表示一个间隔或一个序列。它被用于获取一组数字 / 串在一个特定范围之内。</p><ul><li><strong><code>static &lt;C extends Comparable&lt;?&gt;&gt; Range&lt;C&gt; all()</code></strong><br>返回包含 C 型的每一个值范围</li><li><strong><code>boolean apply(C input)Deprecated.</code></strong><br>只有提供满足谓词接口；使用包含 (C) 来代替。</li><li><strong><code>static &lt;C extends Comparable&lt;?&gt;&gt; Range&lt;C&gt; atLeast(C endpoint)</code></strong><br>返回包含大于或等于终点 (endpoint) 的所有值的范围内。</li><li><strong><code>static &lt;C extends Comparable&lt;?&gt;&gt; Range&lt;C&gt; atMost(C endpoint)</code></strong><br>返回包含的所有值小于或等于终点的范围内。</li><li><strong><code>Range&lt;C&gt; canonical(DiscreteDomain&lt;C&gt; domain)</code></strong><br>返回此范围内，在给定域中的规范形式。</li><li><strong><code>static &lt;C extends Comparable&lt;?&gt;&gt; Range&lt;C&gt; closed(C lower, C upper)</code></strong><br>返回包含大于所有值或等于降低且小于或等于上限的范围内。</li><li><strong><code>static &lt;C extends Comparable&lt;?&gt;&gt; Range&lt;C&gt; closedOpen(C lower, C upper)</code></strong><br>返回包含大于或等于下限和所有值严格大于上限以下的范围内。</li><li><strong><code>boolean contains(C value)</code></strong><br>返回 true，如果值是这个范围的范围之内。</li><li><strong><code>boolean containsAll(Iterable&lt;? extends C&gt; values)</code></strong><br>如果值每一个元素都包含在这个范围内，则返回 true。</li><li><strong><code>static &lt;C extends Comparable&lt;?&gt;&gt; Range&lt;C&gt; downTo(C endpoint, BoundType boundType)</code></strong><br>返回的范围内的给定的端点，它可以是包容性（闭合）或专用（开），没有上限。</li><li><strong><code>static &lt;C extends Comparable&lt;?&gt;&gt; Range&lt;C&gt; encloseAll(Iterable&lt;C&gt; values)</code></strong><br>返回包含所有给定值的最小范围内。</li><li><strong><code>boolean encloses(Range&lt;C&gt; other)</code></strong><br>返回 true，如果其他的边界不在该范围的边界之外延伸。</li><li><strong><code>boolean equals(Object object)</code></strong><br>返回 true，如果对象是具有相同端点和绑定类型，这个范围内的范围。</li><li><strong><code>static &lt;C extends Comparable&lt;?&gt;&gt; Range&lt;C&gt; greaterThan(C endpoint)</code></strong><br>返回一个包含所有值严格大于端点的范围内。</li><li><strong><code>int hashCode()</code></strong><br>返回此范围内的哈希码。</li><li><strong><code>boolean hasLowerBound()</code></strong><br>如果此范围内具有更低的终点返回 true。</li><li><strong><code>boolean hasUpperBound()</code></strong><br>如果此范围内有上端点返回 true。</li><li><strong><code>Range&lt;C&gt; intersection(Range&lt;C&gt; connectedRange)</code></strong><br>返回由两者范围和 connectedRange 封闭，如果这样的范围存在的最大范围。</li><li><strong><code>boolean isConnected(Range&lt;C&gt; other)</code></strong><br>如果存在这是由两者此范围和其他封闭（可能为空）的范围，则返回 true。</li><li><strong><code>boolean isEmpty()</code></strong><br>返回 true，如果这个范围是形式 [v..v)  或 (v..v].</li><li><strong><code>static &lt;C extends Comparable&lt;?&gt;&gt; Range&lt;C&gt; lessThan(C endpoint)</code></strong><br>返回一个包含所有值严格小于端点的范围内。</li><li><strong><code>BoundType lowerBoundType()</code></strong><br>返回类型这个范围的下限：如果范围包括它的下端点 BoundType.CLOSED，如果没有 BoundType.OPEN。</li><li><strong><code>C lowerEndpoint()</code></strong><br>返回该范围的较低端点。</li><li><strong><code>static &lt;C extends Comparable&lt;?&gt;&gt; Range&lt;C&gt; open(C lower, C upper)</code></strong><br>返回一个包含所有值严格大于下限和严格比上端更小一个范围。</li><li><strong><code>static &lt;C extends Comparable&lt;?&gt;&gt; Range&lt;C&gt; openClosed(C lower, C upper)</code></strong><br>返回包含所有值严格低于更大且小于或等于上限的范围内。</li><li><strong><code>static &lt;C extends Comparable&lt;?&gt;&gt; Range&lt;C&gt; range(C lower, BoundType lowerType, C upper, BoundType upperType)</code></strong><br>返回包含任何值由下到上，每个端点可以是包容性（关闭）或专用（开）的范围。</li><li><strong><code>static &lt;C extends Comparable&lt;?&gt;&gt; Range&lt;C&gt; singleton(C value)</code></strong><br>返回包含只在给定范围内的值。</li><li><strong><code>Range&lt;C&gt; span(Range&lt;C&gt; other)</code></strong><br>返回最小的范围包围两者这个范围和 other 等。</li><li><strong><code>String toString()</code></strong><br>返回该范围内的字符串表示，如 “[3..5）”（其他实例列在类文档）。</li><li><strong><code>BoundType upperBoundType()</code></strong><br>返回类型此范围的上限：如果范围包括其上的端点返回 BoundType.CLOSED，如果没有返回 BoundType.OPEN。</li><li><strong><code>C upperEndpoint()</code></strong><br>返回此范围的上限端点。</li><li><strong><code>static &lt;C extends Comparable&lt;?&gt;&gt; Range&lt;C&gt; upTo(C endpoint, BoundType boundType)</code></strong><br>返回一个范围，没有下限到给定的端点，它可以是包容性（闭合）或专用（开）。</li></ul><p>示例代码：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 创建一个序列 [a,b] = { x | a &lt;= x &lt;= b}</span><span class="token class-name">Range</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> range1 <span class="token operator">=</span> <span class="token class-name">Range</span><span class="token punctuation">.</span><span class="token function">closed</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0 1 2 3 4 5 6 7 8 9</span><span class="token comment">// 创建一个序列 (a,b) = { x | a &lt; x &lt; b}</span><span class="token class-name">Range</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> range2 <span class="token operator">=</span> <span class="token class-name">Range</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 2 3 4 5 6 7 8</span><span class="token comment">// 创建一个序列 (a,b] = { x | a &lt; x &lt;= b}</span><span class="token class-name">Range</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> range3 <span class="token operator">=</span> <span class="token class-name">Range</span><span class="token punctuation">.</span><span class="token function">openClosed</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 2 3 4 5 6 7 8 9</span><span class="token comment">// 创建一个序列 [a,b) = { x | a &lt;= x &lt; b}</span><span class="token class-name">Range</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> range4 <span class="token operator">=</span> <span class="token class-name">Range</span><span class="token punctuation">.</span><span class="token function">closedOpen</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0 1 2 3 4 5 6 7 8</span></code></pre><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cueWlpYmFpLmNvbS9ndWF2YQ==">https://www.yiibai.com/guava<i class="fa fa-external-link-alt"></i></span></li></ul>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;Guava-介绍&quot;&gt;&lt;a href=&quot;#Guava-介绍&quot; class=&quot;headerlink&quot; title=&quot;Guava 介绍&quot;&gt;&lt;/a&gt;Guava 介绍&lt;/h3&gt;&lt;p&gt;Guava是一种基于开源的Java库，其中包含谷歌正在由他们很多项目使用的很多核心库。这个库是为了方便编码，并减少编码错误。这个库提供用于集合，缓存，支持原语，并发性，常见注解，字符串处理，I/O和验证的实用方法。&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://jueee.github.io/categories/Java/"/>
    
    <category term="JavaJar" scheme="https://jueee.github.io/categories/Java/JavaJar/"/>
    
    
    <category term="Java" scheme="https://jueee.github.io/tags/Java/"/>
    
    <category term="JavaJar" scheme="https://jueee.github.io/tags/JavaJar/"/>
    
    <category term="Google" scheme="https://jueee.github.io/tags/Google/"/>
    
  </entry>
  
  <entry>
    <title>Windows 录屏软件 Bandicam</title>
    <link href="https://jueee.github.io/2020/10/2020-10-21-Windows%E5%BD%95%E5%B1%8F%E8%BD%AF%E4%BB%B6Bandicam/"/>
    <id>https://jueee.github.io/2020/10/2020-10-21-Windows%E5%BD%95%E5%B1%8F%E8%BD%AF%E4%BB%B6Bandicam/</id>
    <published>2020-10-21T00:00:00.000Z</published>
    <updated>2020-10-22T10:32:18.725Z</updated>
    
    <content type="html"><![CDATA[<h3 id="软件介绍"><a href="#软件介绍" class="headerlink" title="软件介绍"></a>软件介绍</h3><p><strong>Bandicam</strong> 是一款非常给力的视频录制工具，它的优势在于录制视频对电脑配置要求低，且不会出现声音画面不同步的录制结果，录制后的视频视频质量清晰而且占用空间非常少，并且支持录制分辨率高达 2560×1600 高画质视频。提供多种视频录制模式，是游戏录制，屏幕录像教程，摄像头录制的好工具。</p><a id="more"></a><h3 id="软件下载"><a href="#软件下载" class="headerlink" title="软件下载"></a>软件下载</h3><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuYmFuZGljYW0uY24v">https://www.bandicam.cn/<i class="fa fa-external-link-alt"></i></span></p><h3 id="软件功能"><a href="#软件功能" class="headerlink" title="软件功能"></a>软件功能</h3><p><img src="/images/2020/10/image-20201021160918498.png" alt="image-20201021160918498" loading="lazy"></p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li>未注册的 Bandicam 只能录 10 分钟的视频。</li><li>用未注册的 Bandicam 录出来的视频有水印。</li></ol><p><img src="/images/2020/10/image-20201021160946795.png" alt="image-20201021160946795" loading="lazy"></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;软件介绍&quot;&gt;&lt;a href=&quot;#软件介绍&quot; class=&quot;headerlink&quot; title=&quot;软件介绍&quot;&gt;&lt;/a&gt;软件介绍&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Bandicam&lt;/strong&gt;是一款非常给力的视频录制工具，它的优势在于录制视频对电脑配置要求低，且不会出现声音画面不同步的录制结果，录制后的视频视频质量清晰而且占用空间非常少，并且支持录制分辨率高达2560×1600高画质视频。提供多种视频录制模式，是游戏录制，屏幕录像教程，摄像头录制的好工具。&lt;/p&gt;</summary>
    
    
    
    <category term="软件" scheme="https://jueee.github.io/categories/%E8%BD%AF%E4%BB%B6/"/>
    
    <category term="Windows" scheme="https://jueee.github.io/categories/%E8%BD%AF%E4%BB%B6/Windows/"/>
    
    
    <category term="软件" scheme="https://jueee.github.io/tags/%E8%BD%AF%E4%BB%B6/"/>
    
    <category term="Windows" scheme="https://jueee.github.io/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>PHP 之 Smarty 模板引擎使用汇总</title>
    <link href="https://jueee.github.io/2020/10/2020-10-20-PHP%E4%B9%8BSmarty%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E4%BD%BF%E7%94%A8%E6%B1%87%E6%80%BB/"/>
    <id>https://jueee.github.io/2020/10/2020-10-20-PHP%E4%B9%8BSmarty%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E4%BD%BF%E7%94%A8%E6%B1%87%E6%80%BB/</id>
    <published>2020-10-20T00:00:00.000Z</published>
    <updated>2020-10-20T03:15:36.627Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Smarty-介绍"><a href="#Smarty-介绍" class="headerlink" title="Smarty 介绍"></a>Smarty 介绍</h3><p>Smarty 是 PHP 的一个引擎模板，可以更好的进行逻辑与显示的分离，即我们常说的 MVC，这个引擎的作用就是将 C 分离出来。</p><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuc21hcnR5Lm5ldC8=">官网<i class="fa fa-external-link-alt"></i></span>：<span class="exturl" data-url="aHR0cHM6Ly93d3cuc21hcnR5Lm5ldC8=">https://www.smarty.net/<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuc21hcnR5Lm5ldC9kb2NzL3poX0NOLw==">中文手册<i class="fa fa-external-link-alt"></i></span>：<span class="exturl" data-url="aHR0cHM6Ly93d3cuc21hcnR5Lm5ldC9kb2NzL3poX0NOLw==">https://www.smarty.net/docs/zh_CN/<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NtYXJ0eS1waHAvc21hcnR5Lw==">GitHub<i class="fa fa-external-link-alt"></i></span>：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NtYXJ0eS1waHAvc21hcnR5Lw==">https://github.com/smarty-php/smarty/<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NtYXJ0eS1waHAvc21hcnR5L3JlbGVhc2Vz">下载<i class="fa fa-external-link-alt"></i></span>：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NtYXJ0eS1waHAvc21hcnR5L3JlbGVhc2Vz">https://github.com/smarty-php/smarty/releases<i class="fa fa-external-link-alt"></i></span></li></ul><a id="more"></a><h3 id="Smarty-安装"><a href="#Smarty-安装" class="headerlink" title="Smarty 安装"></a>Smarty 安装</h3><p>在网上下载 Smarty 包直接将其解压，我们需要的仅仅是里面的 libs 文件夹。</p><p>Libs 文件里面都是库文件，我们不应该修改里面的任何内容。</p><p>解压完毕后就直接将 libs 文件夹放入到我们需要使用的网站根目录。</p><p><img src="/images/2020/10/1603086382391.png" alt="image-20201019173920839" loading="lazy"></p><h3 id="Smarty-配置"><a href="#Smarty-配置" class="headerlink" title="Smarty 配置"></a>Smarty 配置</h3><p>首先打开 Smarty.class.php 文件看看里面的一些代码：</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">protected</span> <span class="token variable">$template_dir</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'./templates/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">protected</span> <span class="token variable">$config_dir</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'./configs/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">protected</span> <span class="token variable">$compile_dir</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'./templates_c/'</span><span class="token punctuation">;</span><span class="token keyword">protected</span> <span class="token variable">$cache_dir</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'./cache/'</span><span class="token punctuation">;</span></code></pre><p>Smarty 的构造器：</p><ul><li>templates：默认存放模板文件夹</li><li> templates_c：默认存放混编文件的文件夹</li><li> cache：存放缓存</li><li> configs：存放配置文件</li></ul><p>默认左右边界符：</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span> <span class="token variable">$left_delimiter</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"{"</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token variable">$right_delimiter</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"}"</span><span class="token punctuation">;</span></code></pre><h3 id="Smarty-简单使用"><a href="#Smarty-简单使用" class="headerlink" title="Smarty 简单使用"></a>Smarty 简单使用</h3><p>从上文了解到 Smarty 需要一些文件夹用来分别存放不同类别的文件。有 templates、templates_c、cache、configs 等文件夹。这是默认文件夹名称，你可以根据你的喜好对它们进行更改。</p><p>下面是我建立的文件夹：</p><p><img src="/images/2020/10/1603087940434.png" alt="1603087940434" loading="lazy"></p><p>简单实例：</p><ol><li><p>先在 templates 文件夹下准备自己需要的模板文件。test1.html</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>smarty test1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>我的名字叫{$name}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span></code></pre></li><li><p>在根目录下建立访问的逻辑文件。test1.php</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">require</span> <span class="token single-quoted-string string">'./libs/Smarty.class.php'</span><span class="token punctuation">;</span><span class="token variable">$smarty</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Smarty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$name</span><span class="token operator">=</span><span class="token single-quoted-string string">'小决'</span><span class="token punctuation">;</span><span class="token variable">$smarty</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">assign</span><span class="token punctuation">(</span> <span class="token single-quoted-string string">'name'</span> <span class="token punctuation">,</span> <span class="token variable">$name</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$smarty</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'./test1.html'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre></li><li><p>访问 test1.php 结果为：</p><p><img src="/images/2020/10/1603088135288.png" alt="1603088135288" loading="lazy"></p></li><li><p>当访问完后将会在 templates_c 中生成一个相应的混编文件。</p></li></ol><h3 id="Smarty-常用语法"><a href="#Smarty-常用语法" class="headerlink" title="Smarty 常用语法"></a>Smarty 常用语法</h3><h4 id="普通变量的声明与使用"><a href="#普通变量的声明与使用" class="headerlink" title="普通变量的声明与使用"></a>普通变量的声明与使用</h4><p>一共有两种声明变量的方法。</p><ol><li>即 $smarty-&gt;assign ('name',' 值 ');</li><li> 第二种：在模板文件中声明（html 中），即 {assignvar='name'value=' 值 '}</li></ol><p>使用：{$name}</p><p>注意：也可以定义与使用数组。假若上面定义的 name 为一个一维数组，使用时即：{$name [2]}、{$name ['aa']}={$name.aa} 等等使用方式。</p><h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token punctuation">{</span><span class="token operator">*</span>这里面是注释内容<span class="token operator">*</span><span class="token punctuation">}</span></code></pre><p>Smarty 的注释是不会在最终页面输出显示的，即：若在 html 里则效果像 <code>&lt;!--注释--&gt;</code> 一样，不过也有一定的区别，Smarty 的注释在浏览器里查看源代码也是不显示的，而 html 的注释是显示的。</p><p>代码：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--HTML注释--&gt;</span>{* 这里面是注释内容 *}我的名字叫{$name}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span></code></pre><p>结果：</p><p><img src="/images/2020/10/1603088825916.png" alt="1603088825916" loading="lazy"></p><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><p>Smarty 对数组的使用：数组 [下标]、数组。下标</p><h4 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h4><p>对象的声明和变量一样，通过 assign 来声明使用采用 -&gt; 来调用对象的属性。</p><ol><li><p>test2.php</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">require</span> <span class="token single-quoted-string string">'./libs/Smarty.class.php'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token variable">$name</span><span class="token operator">=</span><span class="token double-quoted-string string">"小决"</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token variable">$sex</span><span class="token operator">=</span><span class="token double-quoted-string string">"男"</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token variable">$age</span><span class="token operator">=</span><span class="token single-quoted-string string">'18'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$smarty</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Smarty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$test</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$smarty</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">assign</span><span class="token punctuation">(</span> <span class="token single-quoted-string string">'test'</span> <span class="token punctuation">,</span> <span class="token variable">$test</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$smarty</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'./test2.html'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre></li><li><p>test2.html</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>smarty test2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>名字：{$test-&gt;name}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>br</span><span class="token punctuation">&gt;</span></span>性别：{$test-&gt;sex}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>br</span><span class="token punctuation">&gt;</span></span>年龄：{$test-&gt;age}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>br</span><span class="token punctuation">&gt;</span></span>{$smarty.now}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span></code></pre></li><li><p>结果：</p><p><img src="/images/2020/10/1603089300156.png" alt="1603089300156" loading="lazy"></p></li></ol><h4 id="保留变量"><a href="#保留变量" class="headerlink" title="保留变量"></a>保留变量</h4><p>Smarty 中有一个特殊的变量（就是 smarty）可以通过这个变量很容易就可以访问到一些环境变量。就像 PHP 中的超全局变量一样神奇。</p><p><strong>注意</strong>：在使用这个保留变量的时候：smarty 是对于大小写敏感的，我们需要的是小写的 smarty。</p><p>例子：</p><ol><li><p>使用 smarty 访问 PHP 中的超全局数组变量：</p><ul><li>获取 <code>$_GET{$smarty.get.name}</code> 获取 get 中的 name 值</li><li>获取 <code>$_POST{$smarty.post.name}</code> 获取 post 中的 name 值</li><li>获取 <code>$_COOKIE{$smarty.cooke.name}</code> 获取 cookie 中的 name 值</li></ul><p>同理，还可以获取 <code>$_SERVER</code>,<code>$_ENV</code> 和 <code>$_SESSION</code> 等等。</p><p>注意：虽然 Smarty 提供了较方便直接访问 PHP 超全局变量的方法，但必须谨慎使用。直接访问超全局变量会弄乱应用程序底层代码和模板语法。</p><p>最佳的实践是从 PHP 将需要的变量对模板进行赋值再使用。</p></li><li><p>获取当前时间戳 <code>{$smarty.now}</code> 其原理就是调用了 <code>timr()</code> 函数</p></li><li><p>直接访问 PHP 常量 <code>{$smarty.const.常量名}</code>，即：<code>{$smarty.const.AGE}</code></p><p>PHP 定义常量 smarty 直接调用常量结果</p></li><li><p>其他</p><ul><li>获取配置变量：{$smarty.config}</li><li> 返回当前模板名称：{$smarty.template}</li><li> 返回当前模板对象：{$smarty.template_object}</li><li> 返回当前目录名称：{$smarty.current_dir}</li></ul></li></ol><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><p>在之前根据需求建立的 Configs 文件夹下，建立 Smarty.conf 配置文件（命名任意，木有明确规定），配置文件可以让设计者将全局的模板变量以文件的方式管理起来。</p><p>首先我们先来定义一些配置变量来对它进行简单的了解：</p><ol><li><p>定义如下所示 的 <code>Smarty.conf</code> 文件：</p><pre class="language-conf" data-language="conf"><code class="language-conf">title='标题'bodyColor='#eee'</code></pre></li><li><p>引入配置文件：{config_loadfile='Smarty.conf'}</p></li><li><p>引用配置变量：、{$smarty.config. 配置变量}</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>{config_load  file='Smarty.conf'}配置变量1：{#title#}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>br</span><span class="token punctuation">&gt;</span></span>配置变量2：{$smarty.config.bodyColor}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span></code></pre></li><li><p>查看：</p><p><img src="/images/2020/10/image-20201020095437334.png" alt="image-20201020095437334" loading="lazy"></p></li></ol><h4 id="段落变量"><a href="#段落变量" class="headerlink" title="段落变量"></a>段落变量</h4><p>在 Smarty 配置文件中大体分为两种变量，一种为全局变量，另一种为段落变量。</p><ul><li>全局全局变量故名思议就是就是每次载入这个配置文件的时候这些变量都会被加载</li><li>段落变量则有选择的进行加载。</li></ul><p>段落变量的定义语法：[段落名字]</p><p>段落名字：这里可以是任意字符但不包括 <code>[</code> 和 <code>]</code>。</p><p>调用段落变量：在引入配置文件后面加上这段代码 <code>section='段落名字'</code>。</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token punctuation">{</span>config_load file<span class="token operator">=</span><span class="token single-quoted-string string">'Smarty.conf'</span> section<span class="token operator">=</span><span class="token single-quoted-string string">'firstStyle'</span><span class="token punctuation">}</span></code></pre><p><strong>注意</strong>：section 只能使用一次，若有多个 section 引入多个段落变量则最后一个会覆盖前面的所有 section 引入的段落变量，即只有最后一个引入的段落变量有用其他作废。</p><p>特别说明：</p><ol><li>若全局变量与被加载的段落变量有相同的变量名，则段落名的值将覆盖全局变量的值。</li><li>若某个段落变量里含有相同的变量名，则最后一个的变量的值将会覆盖前面的值。</li><li>在整个 smarty.conf 文件中，点（.）拥有相对较高的权限的。点的作用是将一个变量或者整个段落隐藏，不能被使用。（我的理解就是相当于被注释掉不能被使用）</li></ol><p>简单应用：</p><ol><li><p>配置文件：<code>test5.conf</code></p><pre class="language-conf" data-language="conf"><code class="language-conf">#段落变量#第一种颜色风格[firstStyle]color='#00f'width='300px'height='300px'content='第一种风格'#第二种颜色风格[secondStyle]color='#0f0'width='500px'height='500px'content='第二种风格'</code></pre></li><li><p>php 文件：<code>test5.php</code></p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">require</span> <span class="token single-quoted-string string">'./libs/Smarty.class.php'</span><span class="token punctuation">;</span><span class="token variable">$smarty</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Smarty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$smarty</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'./test5.html'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre></li><li><p>模板文件：<code>test5.html</code></p><pre class="language-html" data-language="html"><code class="language-html">{config_load file='Smarty.conf' section='firstStyle'}<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>smarty test1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css"><span class="token selector">#aa</span><span class="token punctuation">{</span> <span class="token selector">width:</span> <span class="token punctuation">{</span>#width#<span class="token punctuation">}</span><span class="token selector">;height:</span> <span class="token punctuation">{</span>#height#<span class="token punctuation">}</span><span class="token selector">;background:</span> <span class="token punctuation">{</span>#color#<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>aa<span class="token punctuation">'</span></span><span class="token punctuation">&gt;</span></span>这是一个div<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>{#content#}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span></code></pre></li><li><p>效果：</p><p><img src="/images/2020/10/image-20201020102811027.png" alt="image-20201020102811027" loading="lazy"></p></li><li><p>特别说明：</p><p>若 <code>#aa{width: 200px;height: 200px;background: red;}</code>。</p><p>则报错：</p><blockquote><p><strong>Fatal error</strong>: Uncaught --&gt; Smarty Compiler: Syntax error in template "file:E:\software\php\php-page\Smarty\templates\test5.html" on line 8 "#aa{width: ;height: ;background: ;}" - Unexpected ": ", expected one of: "}" &lt;-- thrown in <strong>E:\software\php\php-page\Smarty\libs\sysplugins\smarty_internal_templatecompilerbase.php</strong> on line <strong>8</strong></p></blockquote><p>这是由于使用了 smarty 模板，所以在 html 的所有 {} 将会被 smarty 解析。</p><p>解决办法：</p><ol><li><p>更换定界符</p></li><li><p>在 <code>{</code> 前面加一个空格：<code>#aa{ width: </code></p></li><li><p>使用 {literal}{/literal}  literal: 原样的，原义的</p><pre class="language-html" data-language="html"><code class="language-html">{literal}#aa{width{/literal}: {#width#};height: {#height#};background: {#color#};}</code></pre><p><strong>{literal} 标签会影响变量的解析！</strong></p></li></ol></li></ol><h4 id="模板布局"><a href="#模板布局" class="headerlink" title="模板布局"></a>模板布局</h4><p>即是模板的继承问题。使用的关键字主要有 block、extends</p><ol><li><p>先在站点建立一个 layout 文件夹（主要用来存放父模板文件），在文件夹下建立一个模板文件 template.html</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>这个是模板文件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>这个是模板文件输出的<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">/&gt;</span></span>子输出一：{block name='first'}{/block}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">/&gt;</span></span>子输出二：{block name='second'}{/block}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>这个是模板文件输出的<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span></code></pre></li><li><p>再建立模板文件 test.html，此模板需要继承上面的父模板</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token punctuation">{</span><span class="token keyword">extends</span> <span class="token class-name">file</span><span class="token operator">=</span><span class="token single-quoted-string string">'layout/template.html'</span><span class="token punctuation">}</span><span class="token punctuation">{</span>block name<span class="token operator">=</span><span class="token single-quoted-string string">'first'</span><span class="token punctuation">}</span>这里是test中的first<span class="token punctuation">{</span><span class="token operator">/</span>block<span class="token punctuation">}</span><span class="token punctuation">{</span>block name<span class="token operator">=</span><span class="token single-quoted-string string">'second'</span><span class="token punctuation">}</span>这里是test中的second<span class="token punctuation">{</span><span class="token operator">/</span>block<span class="token punctuation">}</span></code></pre></li><li><p>php 逻辑文件调用 smarty</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">require</span> <span class="token single-quoted-string string">'./libs/Smarty.class.php'</span><span class="token punctuation">;</span><span class="token variable">$smarty</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Smarty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$smarty</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'./test6.html'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre></li><li><p>访问结果</p><p><img src="/images/2020/10/image-20201020103849371.png" alt="image-20201020103849371" loading="lazy"></p></li></ol><p>若含较多的公共部分，则采用布局文件；含公共部分较少，则采用包含文件 {include file=' 文件路径 '}</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;Smarty-介绍&quot;&gt;&lt;a href=&quot;#Smarty-介绍&quot; class=&quot;headerlink&quot; title=&quot;Smarty 介绍&quot;&gt;&lt;/a&gt;Smarty 介绍&lt;/h3&gt;&lt;p&gt;Smarty 是 PHP 的一个引擎模板，可以更好的进行逻辑与显示的分离，即我们常说的 MVC，这个引擎的作用就是将 C 分离出来。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.smarty.net/&quot;&gt;官网&lt;/a&gt;：&lt;a href=&quot;https://www.smarty.net/&quot;&gt;https://www.smarty.net/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.smarty.net/docs/zh_CN/&quot;&gt;中文手册&lt;/a&gt;：&lt;a href=&quot;https://www.smarty.net/docs/zh_CN/&quot;&gt;https://www.smarty.net/docs/zh_CN/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/smarty-php/smarty/&quot;&gt;GitHub&lt;/a&gt;：&lt;a href=&quot;https://github.com/smarty-php/smarty/&quot;&gt;https://github.com/smarty-php/smarty/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/smarty-php/smarty/releases&quot;&gt;下载&lt;/a&gt;：&lt;a href=&quot;https://github.com/smarty-php/smarty/releases&quot;&gt;https://github.com/smarty-php/smarty/releases&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="PHP" scheme="https://jueee.github.io/categories/PHP/"/>
    
    
    <category term="PHP" scheme="https://jueee.github.io/tags/PHP/"/>
    
    <category term="Smarty" scheme="https://jueee.github.io/tags/Smarty/"/>
    
  </entry>
  
  <entry>
    <title>github 连接报 “ssh connect to host github.com port 22 Connection timed out” 错误</title>
    <link href="https://jueee.github.io/2020/10/2020-10-19-github%E8%BF%9E%E6%8E%A5%E6%8A%A5ssh%20connect%20to%20host%20github.com%20port%2022%20Connection%20timed%20out%E9%94%99%E8%AF%AF/"/>
    <id>https://jueee.github.io/2020/10/2020-10-19-github%E8%BF%9E%E6%8E%A5%E6%8A%A5ssh%20connect%20to%20host%20github.com%20port%2022%20Connection%20timed%20out%E9%94%99%E8%AF%AF/</id>
    <published>2020-10-19T00:00:00.000Z</published>
    <updated>2020-10-19T08:18:38.772Z</updated>
    
    <content type="html"><![CDATA[<p>Git 在提交 代码时，报错：</p><pre class="language-none"><code class="language-none">ssh: connect to host github.com port 22: Connection timed outfatal: Could not read from remote repository.</code></pre><a id="more"></a><p>在连接 github 时，执行”ssh -T <span class="exturl" data-url="bWFpbHRvOmdpdEBnaXRodWIuY29t">git@github.com<i class="fa fa-external-link-alt"></i></span>” 命令时，出现：</p><pre class="language-none"><code class="language-none">$ ssh -T git@github.comssh: connect to host github.com port 22: Connection timed out</code></pre><p>在存放公钥私钥 (id_rsa 和 id_rsa.pub) 的同级文件夹中，新建 config 文本，内容如下：</p><pre class="language-none"><code class="language-none">Host github.comUser hellojue@foxmail.comHostname ssh.github.comPreferredAuthentications publickeyIdentityFile ~/.ssh/id_rsaPort 443</code></pre><p>其中 User 为登录 github 的账号名称。</p><p>再次执行”ssh -T <span class="exturl" data-url="bWFpbHRvOmdpdEBnaXRodWIuY29t">git@github.com<i class="fa fa-external-link-alt"></i></span>” 时，这时验证就可以通过。</p><pre class="language-none"><code class="language-none">$ ssh -T git@github.comHi Jueee! You've successfully authenticated, but GitHub does not provide shell access.</code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;Git 在提交 代码时，报错：&lt;/p&gt;
&lt;pre class=&quot;language-none&quot;&gt;&lt;code class=&quot;language-none&quot;&gt;ssh: connect to host github.com port 22: Connection timed out
fatal: Could not read from remote repository.&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="Git" scheme="https://jueee.github.io/categories/Git/"/>
    
    
    <category term="Git" scheme="https://jueee.github.io/tags/Git/"/>
    
    <category term="GitHub" scheme="https://jueee.github.io/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>PHP 之通过 PDO 操作 MySQL 数据库</title>
    <link href="https://jueee.github.io/2020/10/2020-10-18-PHP%E4%B9%8B%E9%80%9A%E8%BF%87PDO%E6%93%8D%E4%BD%9CMySQL%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>https://jueee.github.io/2020/10/2020-10-18-PHP%E4%B9%8B%E9%80%9A%E8%BF%87PDO%E6%93%8D%E4%BD%9CMySQL%E6%95%B0%E6%8D%AE%E5%BA%93/</id>
    <published>2020-10-18T00:00:00.000Z</published>
    <updated>2020-10-20T03:14:30.778Z</updated>
    
    <content type="html"><![CDATA[<h3 id="PDO介绍"><a href="#PDO介绍" class="headerlink" title="PDO介绍"></a>PDO 介绍</h3><p><strong>PDO (PHP Data Objects)</strong> 提供了 PHP 操作多种数据库的统一的接口。</p><h4 id="PDO特点"><a href="#PDO特点" class="headerlink" title="PDO特点"></a>PDO 特点</h4><ul><li><p><strong>编码的一致性</strong></p><p>由于 PHP 可用的各种数据库扩展是由不同发行者编写的，所以尽管所有的扩展都提供了基本相同的特性，却不 满 足编码的一致性。PDO 消除了这种不一致，提供了可用于各种数据库的单一接口；</p></li><li><p><strong>灵活性</strong></p></li></ul><p>  因为 PDO 在运行时加载必须的数据库驱动程序，所以不需要在每次使用不同数据库时重新配置和重新编译 PHP。例如，如果数据库需要从 SQL 切换到 MySQL，只需要加载 PDO_MYSQL 驱动程序就可以了。</p><ul><li><strong>面向对象特性</strong></li></ul><p>  PDO 利用 PHP5 的面向对象特性，可以获得更强大、更高效的数据库通信。</p><ul><li><strong>高性能</strong></li></ul><p>  PDO 是用 C 编写的，编译为 PHP，与用 PHP 编写的其他解决方案相比，虽然其他都相同，但提供了更高的性能。</p><a id="more"></a><h3 id="PDO安装"><a href="#PDO安装" class="headerlink" title="PDO安装"></a>PDO 安装</h3><p>For 安装详细信息，请查看： <span class="exturl" data-url="aHR0cDovL3BocC5uZXQvbWFudWFsL2VuL3Bkby5pbnN0YWxsYXRpb24ucGhw">http://php.net/manual/en/pdo.installation.php<i class="fa fa-external-link-alt"></i></span></p><p>可以通过 phpinfo () 查看是否安装成功：</p><p><img src="/images/2020/10/1603077433392.png" alt="1603077433392" loading="lazy"></p><h3 id="连接-MySQL"><a href="#连接-MySQL" class="headerlink" title="连接 MySQL"></a>连接 MySQL</h3><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$servername</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"localhost"</span><span class="token punctuation">;</span><span class="token variable">$username</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"username"</span><span class="token punctuation">;</span><span class="token variable">$password</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"password"</span><span class="token punctuation">;</span> <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PDO</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"mysql:host=<span class="token interpolation"><span class="token variable">$servername</span></span>;"</span><span class="token punctuation">,</span> <span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token double-quoted-string string">"连接成功"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>PDOException <span class="token variable">$e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token variable">$e</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter important">?&gt;</span></span></code></pre><h3 id="关闭连接"><a href="#关闭连接" class="headerlink" title="关闭连接"></a>关闭连接</h3><p>连接在脚本执行完后会自动关闭。你也可以使用以下代码来关闭连接：</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span></code></pre><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$servername</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"localhost"</span><span class="token punctuation">;</span><span class="token variable">$username</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"username"</span><span class="token punctuation">;</span><span class="token variable">$password</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"password"</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PDO</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"mysql:host=<span class="token interpolation"><span class="token variable">$servername</span></span>"</span><span class="token punctuation">,</span> <span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 设置 PDO 错误模式为异常</span>    <span class="token variable">$conn</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token constant">PDO</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">ATTR_ERRMODE</span><span class="token punctuation">,</span> <span class="token constant">PDO</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">ERRMODE_EXCEPTION</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"CREATE DATABASE myDBPDO"</span><span class="token punctuation">;</span>    <span class="token comment">// 使用 exec() ，因为没有结果返回</span>    <span class="token variable">$conn</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token double-quoted-string string">"数据库创建成功&lt;br&gt;"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>PDOException <span class="token variable">$e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token variable">$sql</span> <span class="token punctuation">.</span> <span class="token double-quoted-string string">"&lt;br&gt;"</span> <span class="token punctuation">.</span> <span class="token variable">$e</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span></code></pre><h3 id="创建-MySQL-表"><a href="#创建-MySQL-表" class="headerlink" title="创建 MySQL 表"></a>创建 MySQL 表</h3><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$servername</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"localhost"</span><span class="token punctuation">;</span><span class="token variable">$username</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"username"</span><span class="token punctuation">;</span><span class="token variable">$password</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"password"</span><span class="token punctuation">;</span><span class="token variable">$dbname</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"myDBPDO"</span><span class="token punctuation">;</span> <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PDO</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"mysql:host=<span class="token interpolation"><span class="token variable">$servername</span></span>;dbname=<span class="token interpolation"><span class="token variable">$dbname</span></span>"</span><span class="token punctuation">,</span> <span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 设置 PDO 错误模式，用于抛出异常</span>    <span class="token variable">$conn</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token constant">PDO</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">ATTR_ERRMODE</span><span class="token punctuation">,</span> <span class="token constant">PDO</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">ERRMODE_EXCEPTION</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 使用 sql 创建数据表</span>    <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"CREATE TABLE MyGuests (    id INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY,     firstname VARCHAR(30) NOT NULL,    lastname VARCHAR(30) NOT NULL,    email VARCHAR(50),    reg_date TIMESTAMP    )"</span><span class="token punctuation">;</span>     <span class="token comment">// 使用 exec() ，没有结果返回 </span>    <span class="token variable">$conn</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token double-quoted-string string">"数据表 MyGuests 创建成功"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>PDOException <span class="token variable">$e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token variable">$sql</span> <span class="token punctuation">.</span> <span class="token double-quoted-string string">"&lt;br&gt;"</span> <span class="token punctuation">.</span> <span class="token variable">$e</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span></code></pre><h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$servername</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"localhost"</span><span class="token punctuation">;</span><span class="token variable">$username</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"username"</span><span class="token punctuation">;</span><span class="token variable">$password</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"password"</span><span class="token punctuation">;</span><span class="token variable">$dbname</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"myDBPDO"</span><span class="token punctuation">;</span> <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PDO</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"mysql:host=<span class="token interpolation"><span class="token variable">$servername</span></span>;dbname=<span class="token interpolation"><span class="token variable">$dbname</span></span>"</span><span class="token punctuation">,</span> <span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 设置 PDO 错误模式，用于抛出异常</span>    <span class="token variable">$conn</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token constant">PDO</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">ATTR_ERRMODE</span><span class="token punctuation">,</span> <span class="token constant">PDO</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">ERRMODE_EXCEPTION</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"INSERT INTO MyGuests (firstname, lastname, email)    VALUES ('John', 'Doe', 'john@example.com')"</span><span class="token punctuation">;</span>    <span class="token comment">// 使用 exec() ，没有结果返回 </span>    <span class="token variable">$conn</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token double-quoted-string string">"新记录插入成功"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>PDOException <span class="token variable">$e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token variable">$sql</span> <span class="token punctuation">.</span> <span class="token double-quoted-string string">"&lt;br&gt;"</span> <span class="token punctuation">.</span> <span class="token variable">$e</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span></code></pre><h3 id="插入多条数据"><a href="#插入多条数据" class="headerlink" title="插入多条数据"></a>插入多条数据</h3><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$servername</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"localhost"</span><span class="token punctuation">;</span><span class="token variable">$username</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"username"</span><span class="token punctuation">;</span><span class="token variable">$password</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"password"</span><span class="token punctuation">;</span><span class="token variable">$dbname</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"myDBPDO"</span><span class="token punctuation">;</span> <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PDO</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"mysql:host=<span class="token interpolation"><span class="token variable">$servername</span></span>;dbname=<span class="token interpolation"><span class="token variable">$dbname</span></span>"</span><span class="token punctuation">,</span> <span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// set the PDO error mode to exception</span>    <span class="token variable">$conn</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token constant">PDO</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">ATTR_ERRMODE</span><span class="token punctuation">,</span> <span class="token constant">PDO</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">ERRMODE_EXCEPTION</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 开始事务</span>    <span class="token variable">$conn</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">beginTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// SQL 语句</span>    <span class="token variable">$conn</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"INSERT INTO MyGuests (firstname, lastname, email)     VALUES ('John', 'Doe', 'john@example.com')"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$conn</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"INSERT INTO MyGuests (firstname, lastname, email)     VALUES ('Mary', 'Moe', 'mary@example.com')"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$conn</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"INSERT INTO MyGuests (firstname, lastname, email)     VALUES ('Julie', 'Dooley', 'julie@example.com')"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 提交事务</span>    <span class="token variable">$conn</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token double-quoted-string string">"新记录插入成功"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>PDOException <span class="token variable">$e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">// 如果执行失败回滚</span>    <span class="token variable">$conn</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token variable">$sql</span> <span class="token punctuation">.</span> <span class="token double-quoted-string string">"&lt;br&gt;"</span> <span class="token punctuation">.</span> <span class="token variable">$e</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span></code></pre><h3 id="使用预处理语句"><a href="#使用预处理语句" class="headerlink" title="使用预处理语句"></a>使用预处理语句</h3><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$servername</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"localhost"</span><span class="token punctuation">;</span><span class="token variable">$username</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"username"</span><span class="token punctuation">;</span><span class="token variable">$password</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"password"</span><span class="token punctuation">;</span><span class="token variable">$dbname</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"myDBPDO"</span><span class="token punctuation">;</span> <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PDO</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"mysql:host=<span class="token interpolation"><span class="token variable">$servername</span></span>;dbname=<span class="token interpolation"><span class="token variable">$dbname</span></span>"</span><span class="token punctuation">,</span> <span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 设置 PDO 错误模式为异常</span>    <span class="token variable">$conn</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token constant">PDO</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">ATTR_ERRMODE</span><span class="token punctuation">,</span> <span class="token constant">PDO</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">ERRMODE_EXCEPTION</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 预处理 SQL 并绑定参数</span>    <span class="token variable">$stmt</span> <span class="token operator">=</span> <span class="token variable">$conn</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"INSERT INTO MyGuests (firstname, lastname, email)     VALUES (:firstname, :lastname, :email)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$stmt</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">bindParam</span><span class="token punctuation">(</span><span class="token single-quoted-string string">':firstname'</span><span class="token punctuation">,</span> <span class="token variable">$firstname</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$stmt</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">bindParam</span><span class="token punctuation">(</span><span class="token single-quoted-string string">':lastname'</span><span class="token punctuation">,</span> <span class="token variable">$lastname</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$stmt</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">bindParam</span><span class="token punctuation">(</span><span class="token single-quoted-string string">':email'</span><span class="token punctuation">,</span> <span class="token variable">$email</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 插入行</span>    <span class="token variable">$firstname</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"John"</span><span class="token punctuation">;</span>    <span class="token variable">$lastname</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"Doe"</span><span class="token punctuation">;</span>    <span class="token variable">$email</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"john@example.com"</span><span class="token punctuation">;</span>    <span class="token variable">$stmt</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 插入其他行</span>    <span class="token variable">$firstname</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"Mary"</span><span class="token punctuation">;</span>    <span class="token variable">$lastname</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"Moe"</span><span class="token punctuation">;</span>    <span class="token variable">$email</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"mary@example.com"</span><span class="token punctuation">;</span>    <span class="token variable">$stmt</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 插入其他行</span>    <span class="token variable">$firstname</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"Julie"</span><span class="token punctuation">;</span>    <span class="token variable">$lastname</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"Dooley"</span><span class="token punctuation">;</span>    <span class="token variable">$email</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"julie@example.com"</span><span class="token punctuation">;</span>    <span class="token variable">$stmt</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">echo</span> <span class="token double-quoted-string string">"新记录插入成功"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>PDOException <span class="token variable">$e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token double-quoted-string string">"Error: "</span> <span class="token punctuation">.</span> <span class="token variable">$e</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span></code></pre><h3 id="查询读取数据"><a href="#查询读取数据" class="headerlink" title="查询读取数据"></a>查询读取数据</h3><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;table style='border: solid 1px black;'&gt;"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;tr&gt;&lt;th&gt;Id&lt;/th&gt;&lt;th&gt;Firstname&lt;/th&gt;&lt;th&gt;Lastname&lt;/th&gt;&lt;/tr&gt;"</span><span class="token punctuation">;</span> <span class="token keyword">class</span> <span class="token class-name">TableRows</span> <span class="token keyword">extends</span> <span class="token class-name">RecursiveIteratorIterator</span> <span class="token punctuation">{</span>    <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$it</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">parent</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$it</span><span class="token punctuation">,</span> self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">LEAVES_ONLY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">function</span> <span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token double-quoted-string string">"&lt;td style='width:150px;border:1px solid black;'&gt;"</span> <span class="token punctuation">.</span> <span class="token keyword">parent</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span> <span class="token double-quoted-string string">"&lt;/td&gt;"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">function</span> <span class="token function">beginChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;tr&gt;"</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>      <span class="token keyword">function</span> <span class="token function">endChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;/tr&gt;"</span> <span class="token punctuation">.</span> <span class="token double-quoted-string string">"\n"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span>  <span class="token variable">$servername</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"localhost"</span><span class="token punctuation">;</span><span class="token variable">$username</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"username"</span><span class="token punctuation">;</span><span class="token variable">$password</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"password"</span><span class="token punctuation">;</span><span class="token variable">$dbname</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"myDBPDO"</span><span class="token punctuation">;</span> <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PDO</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"mysql:host=<span class="token interpolation"><span class="token variable">$servername</span></span>;dbname=<span class="token interpolation"><span class="token variable">$dbname</span></span>"</span><span class="token punctuation">,</span> <span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$conn</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token constant">PDO</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">ATTR_ERRMODE</span><span class="token punctuation">,</span> <span class="token constant">PDO</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">ERRMODE_EXCEPTION</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$stmt</span> <span class="token operator">=</span> <span class="token variable">$conn</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"SELECT id, firstname, lastname FROM MyGuests"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token variable">$stmt</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 设置结果集为关联数组</span>    <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$stmt</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">setFetchMode</span><span class="token punctuation">(</span><span class="token constant">PDO</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">FETCH_ASSOC</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TableRows</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RecursiveArrayIterator</span><span class="token punctuation">(</span><span class="token variable">$stmt</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">fetchAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token variable">$k</span><span class="token operator">=</span><span class="token operator">&gt;</span><span class="token variable">$v</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">echo</span> <span class="token variable">$v</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>PDOException <span class="token variable">$e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token double-quoted-string string">"Error: "</span> <span class="token punctuation">.</span> <span class="token variable">$e</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;/table&gt;"</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span></code></pre><p>结果如下：</p><p><img src="/images/2020/10/1603079266750.png" alt="1603079266750" loading="lazy"></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;PDO介绍&quot;&gt;&lt;a href=&quot;#PDO介绍&quot; class=&quot;headerlink&quot; title=&quot;PDO介绍&quot;&gt;&lt;/a&gt;PDO 介绍&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;PDO (PHP Data Objects)&lt;/strong&gt; 提供了 PHP 操作多种数据库的统一的接口。&lt;/p&gt;
&lt;h4 id=&quot;PDO特点&quot;&gt;&lt;a href=&quot;#PDO特点&quot; class=&quot;headerlink&quot; title=&quot;PDO特点&quot;&gt;&lt;/a&gt;PDO 特点&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;编码的一致性&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;由于 PHP 可用的各种数据库扩展是由不同发行者编写的，所以尽管所有的扩展都提供了基本相同的特性，却不 满 足编码的一致性。PDO 消除了这种不一致，提供了可用于各种数据库的单一接口；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;灵活性&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;  因为 PDO 在运行时加载必须的数据库驱动程序，所以不需要在每次使用不同数据库时重新配置和重新编译 PHP。例如，如果数据库需要从 SQL 切换到 MySQL，只需要加载 PDO_MYSQL 驱动程序就可以了。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;面向对象特性&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;  PDO 利用 PHP5 的面向对象特性，可以获得更强大、更高效的数据库通信。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;高性能&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;  PDO 是用 C 编写的，编译为 PHP，与用 PHP 编写的其他解决方案相比，虽然其他都相同，但提供了更高的性能。&lt;/p&gt;</summary>
    
    
    
    <category term="MySQL" scheme="https://jueee.github.io/categories/MySQL/"/>
    
    <category term="PHP" scheme="https://jueee.github.io/categories/PHP/"/>
    
    
    <category term="MySQL" scheme="https://jueee.github.io/tags/MySQL/"/>
    
    <category term="PHP" scheme="https://jueee.github.io/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>PHP 之通过 MySQLi 操作 MySQL 数据库</title>
    <link href="https://jueee.github.io/2020/10/2020-10-17-PHP%E4%B9%8B%E9%80%9A%E8%BF%87MySQLi%E6%93%8D%E4%BD%9CMySQL%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>https://jueee.github.io/2020/10/2020-10-17-PHP%E4%B9%8B%E9%80%9A%E8%BF%87MySQLi%E6%93%8D%E4%BD%9CMySQL%E6%95%B0%E6%8D%AE%E5%BA%93/</id>
    <published>2020-10-17T00:00:00.000Z</published>
    <updated>2020-10-20T03:14:47.016Z</updated>
    
    <content type="html"><![CDATA[<h3 id="MySQLi-介绍"><a href="#MySQLi-介绍" class="headerlink" title="MySQLi 介绍"></a>MySQLi 介绍</h3><p>MySQLi 扩展使得用户可以利用 MySQL 4.1 及其更高版本的新功能，与 mysql 扩展相比，MySQLi 扩展在以下方面有了明显的提高。</p><ul><li><p><strong>兼容性与维护性</strong>：</p><p>MySQLi 扩展可以很容易地使用 MySQL 的新功能，所以 MySQLi 拥有与 MySQL 更高的兼容性。即使 MySQL 的新版本又出现了更多功能，MySQLi 扩展也可以很容易的支持。</p></li><li><p><strong>面向对象</strong>：</p><p>MySQLi 扩展已封装到一个类中，从而可使用面向对象的方式编程。即使对面向对象不了解，MySQLi 扩展也提供了面向过程的编程方式来供用户选择。</p></li><li><p><strong>速度和安全性</strong>：</p><p>MySQLi 扩展执行的速度要比之前版本的 mysql 扩展快了很多。MySQLi 扩展支持 MySQL 新版本的密码杂凑（Password Hashes）和验证程序，更加提高了应用程序的安全性。</p></li><li><p><strong>预准备语句</strong>：</p><p>预准备语句可提高重复使用的语句的性能，MySQLi 扩展提供了对预准备语句的支持。</p></li><li><p><strong>调试功能</strong>：</p><p>MySQLi 扩展进一步改进了调试功能，提高了开发效率。</p></li></ul><a id="more"></a><h3 id="MySQLi-安装"><a href="#MySQLi-安装" class="headerlink" title="MySQLi 安装"></a>MySQLi 安装</h3><p>Linux 和 Windows: 在 php7 mysql 包安装时 MySQLi 扩展多数情况下是自动安装的。</p><p>安装详细信息，请查看： <span class="exturl" data-url="aHR0cDovL3BocC5uZXQvbWFudWFsL2VuL215c3FsaS5pbnN0YWxsYXRpb24ucGhw">http://php.net/manual/en/mysqli.installation.php<i class="fa fa-external-link-alt"></i></span></p><p>可以通过 phpinfo () 查看是否安装成功：</p><p><img src="/images/2020/10/1603075261487.png" alt="1603075261487" loading="lazy"></p><h3 id="连接-MySQL"><a href="#连接-MySQL" class="headerlink" title="连接 MySQL"></a>连接 MySQL</h3><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$servername</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"localhost"</span><span class="token punctuation">;</span><span class="token variable">$username</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"user"</span><span class="token punctuation">;</span><span class="token variable">$password</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"password"</span><span class="token punctuation">;</span> <span class="token comment">// 创建连接</span><span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token function">mysqli_connect</span><span class="token punctuation">(</span><span class="token variable">$servername</span><span class="token punctuation">,</span> <span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 检测连接</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$conn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"Connection failed: "</span> <span class="token punctuation">.</span> <span class="token function">mysqli_connect_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">echo</span> <span class="token double-quoted-string string">"连接成功"</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span></code></pre><h3 id="关闭连接"><a href="#关闭连接" class="headerlink" title="关闭连接"></a>关闭连接</h3><p>连接在脚本执行完后会自动关闭。你也可以使用以下代码来关闭连接：</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token function">mysqli_close</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$servername</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"localhost"</span><span class="token punctuation">;</span><span class="token variable">$username</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"username"</span><span class="token punctuation">;</span><span class="token variable">$password</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"password"</span><span class="token punctuation">;</span> <span class="token comment">// 创建连接</span><span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token function">mysqli_connect</span><span class="token punctuation">(</span><span class="token variable">$servername</span><span class="token punctuation">,</span> <span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 检测连接</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$conn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"连接失败: "</span> <span class="token punctuation">.</span> <span class="token function">mysqli_connect_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment">// 创建数据库</span><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"CREATE DATABASE myDB"</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span> <span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token double-quoted-string string">"数据库创建成功"</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token double-quoted-string string">"Error creating database: "</span> <span class="token punctuation">.</span> <span class="token function">mysqli_error</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token function">mysqli_close</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span></code></pre><h3 id="创建-MySQL-表"><a href="#创建-MySQL-表" class="headerlink" title="创建 MySQL 表"></a>创建 MySQL 表</h3><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$servername</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"localhost"</span><span class="token punctuation">;</span><span class="token variable">$username</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"username"</span><span class="token punctuation">;</span><span class="token variable">$password</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"password"</span><span class="token punctuation">;</span><span class="token variable">$dbname</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"myDB"</span><span class="token punctuation">;</span> <span class="token comment">// 创建连接</span><span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token function">mysqli_connect</span><span class="token punctuation">(</span><span class="token variable">$servername</span><span class="token punctuation">,</span> <span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">,</span> <span class="token variable">$dbname</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 检测连接</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$conn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"连接失败: "</span> <span class="token punctuation">.</span> <span class="token function">mysqli_connect_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment">// 使用 sql 创建数据表</span><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"CREATE TABLE MyGuests (id INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY, firstname VARCHAR(30) NOT NULL,lastname VARCHAR(30) NOT NULL,email VARCHAR(50),reg_date TIMESTAMP)"</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span> <span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token double-quoted-string string">"数据表 MyGuests 创建成功"</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token double-quoted-string string">"创建数据表错误: "</span> <span class="token punctuation">.</span> <span class="token function">mysqli_error</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token function">mysqli_close</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span></code></pre><h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$servername</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"localhost"</span><span class="token punctuation">;</span><span class="token variable">$username</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"username"</span><span class="token punctuation">;</span><span class="token variable">$password</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"password"</span><span class="token punctuation">;</span><span class="token variable">$dbname</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"myDB"</span><span class="token punctuation">;</span> <span class="token comment">// 创建连接</span><span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token function">mysqli_connect</span><span class="token punctuation">(</span><span class="token variable">$servername</span><span class="token punctuation">,</span> <span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">,</span> <span class="token variable">$dbname</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 检测连接</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$conn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"Connection failed: "</span> <span class="token punctuation">.</span> <span class="token function">mysqli_connect_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"INSERT INTO MyGuests (firstname, lastname, email)VALUES ('John', 'Doe', 'john@example.com')"</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span> <span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token double-quoted-string string">"新记录插入成功"</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token double-quoted-string string">"Error: "</span> <span class="token punctuation">.</span> <span class="token variable">$sql</span> <span class="token punctuation">.</span> <span class="token double-quoted-string string">"&lt;br&gt;"</span> <span class="token punctuation">.</span> <span class="token function">mysqli_error</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token function">mysqli_close</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span></code></pre><p><code>mysqli_multi_query()</code> 函数可用来执行多条 SQL 语句。</p><h3 id="使用预处理语句"><a href="#使用预处理语句" class="headerlink" title="使用预处理语句"></a>使用预处理语句</h3><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$servername</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"localhost"</span><span class="token punctuation">;</span><span class="token variable">$username</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"username"</span><span class="token punctuation">;</span><span class="token variable">$password</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"password"</span><span class="token punctuation">;</span><span class="token variable">$dbname</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"myDB"</span><span class="token punctuation">;</span> <span class="token comment">// 创建连接</span><span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">mysqli</span><span class="token punctuation">(</span><span class="token variable">$servername</span><span class="token punctuation">,</span> <span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">,</span> <span class="token variable">$dbname</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 检测连接</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">connect_error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"连接失败: "</span> <span class="token punctuation">.</span> <span class="token variable">$conn</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">connect_error</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"INSERT INTO MyGuests(firstname, lastname, email)  VALUES(?, ?, ?)"</span><span class="token punctuation">;</span>     <span class="token comment">// 为 mysqli_stmt_prepare() 初始化 statement 对象</span>    <span class="token variable">$stmt</span> <span class="token operator">=</span> <span class="token function">mysqli_stmt_init</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//预处理语句</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">mysqli_stmt_prepare</span><span class="token punctuation">(</span><span class="token variable">$stmt</span><span class="token punctuation">,</span> <span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 绑定参数</span>        <span class="token function">mysqli_stmt_bind_param</span><span class="token punctuation">(</span><span class="token variable">$stmt</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'sss'</span><span class="token punctuation">,</span> <span class="token variable">$firstname</span><span class="token punctuation">,</span> <span class="token variable">$lastname</span><span class="token punctuation">,</span> <span class="token variable">$email</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 设置参数并执行</span>        <span class="token variable">$firstname</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'John'</span><span class="token punctuation">;</span>        <span class="token variable">$lastname</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'Doe'</span><span class="token punctuation">;</span>        <span class="token variable">$email</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'john@example.com'</span><span class="token punctuation">;</span>        <span class="token function">mysqli_stmt_execute</span><span class="token punctuation">(</span><span class="token variable">$stmt</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token variable">$firstname</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'Mary'</span><span class="token punctuation">;</span>        <span class="token variable">$lastname</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'Moe'</span><span class="token punctuation">;</span>        <span class="token variable">$email</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'mary@example.com'</span><span class="token punctuation">;</span>        <span class="token function">mysqli_stmt_execute</span><span class="token punctuation">(</span><span class="token variable">$stmt</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token variable">$firstname</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'Julie'</span><span class="token punctuation">;</span>        <span class="token variable">$lastname</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'Dooley'</span><span class="token punctuation">;</span>        <span class="token variable">$email</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'julie@example.com'</span><span class="token punctuation">;</span>        <span class="token function">mysqli_stmt_execute</span><span class="token punctuation">(</span><span class="token variable">$stmt</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token delimiter important">?&gt;</span></span></code></pre><p>注意参数的绑定。让我们看下 mysqli_stmt_bind_param () 中的代码：</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token function">mysqli_stmt_bind_param</span><span class="token punctuation">(</span><span class="token variable">$stmt</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'sss'</span><span class="token punctuation">,</span> <span class="token variable">$firstname</span><span class="token punctuation">,</span> <span class="token variable">$lastname</span><span class="token punctuation">,</span> <span class="token variable">$email</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>该函数绑定参数查询并将参数传递给数据库。第二个参数是 "sss" 。以下列表展示了参数的类型。 s 字符告诉 mysql 参数是字符串。</p><p>可以是以下四种参数:</p><ul><li>i - 整数</li><li> d - 双精度浮点数</li><li> s - 字符串</li><li> b - 布尔值</li></ul><p>每个参数必须指定类型，来保证数据的安全性。</p><p>通过类型的判断可以减少 SQL 注入漏洞带来的风险。</p><h3 id="查询读取数据"><a href="#查询读取数据" class="headerlink" title="查询读取数据"></a>查询读取数据</h3><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$servername</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"localhost"</span><span class="token punctuation">;</span><span class="token variable">$username</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"user"</span><span class="token punctuation">;</span><span class="token variable">$password</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"password"</span><span class="token punctuation">;</span><span class="token variable">$dbname</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"myDB"</span><span class="token punctuation">;</span> <span class="token comment">// 创建连接</span><span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token function">mysqli_connect</span><span class="token punctuation">(</span><span class="token variable">$servername</span><span class="token punctuation">,</span> <span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">,</span> <span class="token variable">$dbname</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Check connection</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$conn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"连接失败: "</span> <span class="token punctuation">.</span> <span class="token function">mysqli_connect_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"SELECT id, firstname, lastname FROM MyGuests"</span><span class="token punctuation">;</span><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span> <span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">mysqli_num_rows</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 输出数据</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token variable">$row</span> <span class="token operator">=</span> <span class="token function">mysqli_fetch_assoc</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token double-quoted-string string">"id: "</span> <span class="token punctuation">.</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"id"</span><span class="token punctuation">]</span><span class="token punctuation">.</span> <span class="token double-quoted-string string">" - Name: "</span> <span class="token punctuation">.</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"firstname"</span><span class="token punctuation">]</span><span class="token punctuation">.</span> <span class="token double-quoted-string string">" "</span> <span class="token punctuation">.</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"lastname"</span><span class="token punctuation">]</span><span class="token punctuation">.</span> <span class="token double-quoted-string string">"&lt;br&gt;"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token double-quoted-string string">"0 结果"</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token function">mysqli_close</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;MySQLi-介绍&quot;&gt;&lt;a href=&quot;#MySQLi-介绍&quot; class=&quot;headerlink&quot; title=&quot;MySQLi 介绍&quot;&gt;&lt;/a&gt;MySQLi 介绍&lt;/h3&gt;&lt;p&gt;MySQLi 扩展使得用户可以利用 MySQL 4.1 及其更高版本的新功能，与 mysql 扩展相比，MySQLi 扩展在以下方面有了明显的提高。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;兼容性与维护性&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;MySQLi 扩展可以很容易地使用 MySQL 的新功能，所以 MySQLi 拥有与 MySQL 更高的兼容性。即使 MySQL 的新版本又出现了更多功能，MySQLi 扩展也可以很容易的支持。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;面向对象&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;MySQLi 扩展已封装到一个类中，从而可使用面向对象的方式编程。即使对面向对象不了解，MySQLi 扩展也提供了面向过程的编程方式来供用户选择。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;速度和安全性&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;MySQLi 扩展执行的速度要比之前版本的 mysql 扩展快了很多。MySQLi 扩展支持 MySQL 新版本的密码杂凑（Password Hashes）和验证程序，更加提高了应用程序的安全性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;预准备语句&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;预准备语句可提高重复使用的语句的性能，MySQLi 扩展提供了对预准备语句的支持。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;调试功能&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;MySQLi 扩展进一步改进了调试功能，提高了开发效率。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="MySQL" scheme="https://jueee.github.io/categories/MySQL/"/>
    
    <category term="PHP" scheme="https://jueee.github.io/categories/PHP/"/>
    
    
    <category term="MySQL" scheme="https://jueee.github.io/tags/MySQL/"/>
    
    <category term="PHP" scheme="https://jueee.github.io/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>Windows 系统下 PHP 环境搭建</title>
    <link href="https://jueee.github.io/2020/10/2020-10-16-Windows%E7%B3%BB%E7%BB%9F%E4%B8%8BPHP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>https://jueee.github.io/2020/10/2020-10-16-Windows%E7%B3%BB%E7%BB%9F%E4%B8%8BPHP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</id>
    <published>2020-10-16T00:00:00.000Z</published>
    <updated>2020-10-22T10:32:18.690Z</updated>
    
    <content type="html"><![CDATA[<h3 id="下载-PHP"><a href="#下载-PHP" class="headerlink" title="下载 PHP"></a>下载 PHP</h3><p>下载地址：<span class="exturl" data-url="aHR0cDovL3BocC5uZXQvZG93bmxvYWRzLnBocA==">http://php.net/downloads.php<i class="fa fa-external-link-alt"></i></span></p><p>Windows 下载：<span class="exturl" data-url="aHR0cHM6Ly93aW5kb3dzLnBocC5uZXQvZG93bmxvYWQv">https://windows.php.net/download/<i class="fa fa-external-link-alt"></i></span></p><p>版本选择：</p><ul><li>如果是与 Apache 搭配，建议选择 Thread Safe 版本（有 php7apache2_4.dll）。</li><li>如果是与 CGI 或者 FAST-CGI 搭配，建议选择 Non Thread Safe 版本。</li></ul><a id="more"></a><h3 id="安装Apache-服务器"><a href="#安装Apache-服务器" class="headerlink" title="安装Apache 服务器"></a>安装 Apache 服务器</h3><p>PHP 环境搭建的前提是 Apache HTTP Server （Apache 服务器）已经安装部署成功，并可以正常访问到服务器的主页面。</p><p>Apache HTTP Server 的安装部署可以点击 “ <a href="https://jueee.github.io/2020/10/2020-10-15-Windows%E7%B3%BB%E7%BB%9F%E4%B8%8B%E5%AE%89%E8%A3%85Apache%E6%9C%8D%E5%8A%A1%E5%99%A8">Windows 系统下安装 Apache 服务器</a>” 查看具体操作。</p><h3 id="配置-PHP"><a href="#配置-PHP" class="headerlink" title="配置 PHP"></a>配置 PHP</h3><p>将 PHP 的根目录下的 php.ini-development 或者 php.ini-production 复制一份并改名为 php.ini，作为 PHP 的配置文件。</p><h4 id="修改扩展文件的路径"><a href="#修改扩展文件的路径" class="headerlink" title="修改扩展文件的路径"></a>修改扩展文件的路径</h4><pre class="language-ini" data-language="ini"><code class="language-ini"><span class="token comment">; extension_dir = "ext" </span></code></pre><p>取消注释，或者改为： </p><pre class="language-ini" data-language="ini"><code class="language-ini"><span class="token constant">extension_dir</span> <span class="token attr-value"><span class="token punctuation">=</span> "${phphome}\ext"</span></code></pre><p>注意：如果是与 Apache 搭配，建议将扩展文件路径改为绝对路径，因为有可能加载不了。</p><h4 id="设置默认的时区"><a href="#设置默认的时区" class="headerlink" title="设置默认的时区"></a>设置默认的时区</h4><pre class="language-ini" data-language="ini"><code class="language-ini"><span class="token selector">[Date]</span><span class="token comment">; https://www.php.net/manual/zh/timezones.php 选择时区列表网址</span><span class="token constant">date.timezone</span> <span class="token attr-value"><span class="token punctuation">=</span> Asia/Shanghai</span></code></pre><h4 id="设置-ssl"><a href="#设置-ssl" class="headerlink" title="设置 ssl"></a>设置 ssl</h4><pre class="language-ini" data-language="ini"><code class="language-ini"><span class="token selector">[openssl]</span><span class="token constant">openssl.cafile</span><span class="token attr-value"><span class="token punctuation">=</span> cacert.pem</span></code></pre><h3 id="修改-Apache服务器"><a href="#修改-Apache服务器" class="headerlink" title="修改 Apache服务器"></a>修改 Apache 服务器</h3><p>修改 Apache24\conf\ 目录下的 httpd.conf 配置 Apache ，让 Apache 和 PHP 协同工作。</p><h4 id="DocumentRoot-设置"><a href="#DocumentRoot-设置" class="headerlink" title="DocumentRoot 设置"></a>DocumentRoot 设置</h4><p>修改前：默认的是 Apache24 下的 htdocs 目录：</p><p><img src="/images/2020/10/1602831496444.png" alt="1602831496444" loading="lazy"></p><p>修改后：指定到自定义的路径，但是要记住这个路径。</p><pre class="language-none"><code class="language-none">DocumentRoot "E:/software/php/php-page"&lt;Directory "E:/software/php/php-page"&gt;</code></pre><h4 id="默认索引"><a href="#默认索引" class="headerlink" title="默认索引"></a>默认索引</h4><p>修改默认的索引，以支持 PHP 。</p><p>修改前：</p><pre class="language-conf" data-language="conf"><code class="language-conf">&lt;IfModule dir_module&gt;    DirectoryIndex index.html&lt;/IfModule&gt;</code></pre><p>修改后：</p><pre class="language-conf" data-language="conf"><code class="language-conf">&lt;IfModule dir_module&gt;    DirectoryIndex index.html  index.php index.htm&lt;/IfModule&gt;</code></pre><h4 id="开启-rewrite-功能"><a href="#开启-rewrite-功能" class="headerlink" title="开启 rewrite 功能"></a>开启 rewrite 功能</h4><p>将下面这行代码前面的 # 去掉：</p><pre class="language-conf" data-language="conf"><code class="language-conf">LoadModule rewrite_module modules/mod_rewrite.so</code></pre><h4 id="加载-PHP-模块"><a href="#加载-PHP-模块" class="headerlink" title="加载 PHP 模块"></a>加载 PHP 模块</h4><p>如果是 PHP 7，则相应的更改，示例如下（<strong>注意绝对路径</strong>）：</p><pre class="language-none"><code class="language-none">#php7LoadModule php7_module E:/software/php/php-7.4.11/php7apache2_4.dll&lt;IfModule php7_module&gt;     PHPIniDir "D:/soft/php-7.x.x/"     AddType application/x-httpd-php .php    AddType application/x-httpd-php-source .phps&lt;/IfModule&gt;</code></pre><h4 id="dll-复制"><a href="#dll-复制" class="headerlink" title="dll 复制"></a>dll 复制</h4><p>如果安装的 PHP x64 位版本，Apache 也需要是 x64 位版本的。</p><p>然后还要将 php 目录下的 libeay32.dll、ssleay32.dll、libssh2.dll 以及 ext 目录下的 php_curl.dll 等四个文件，都复制放到 System32 目录下。否则 curl 扩展无法使用。</p><p>参考链接：<span class="exturl" data-url="aHR0cDovL215Lm9zY2hpbmEubmV0L2xzZm9wL2Jsb2cvNDk2MTgx">http://my.oschina.net/lsfop/blog/496181<i class="fa fa-external-link-alt"></i></span> 。</p><h3 id="启动运行测试"><a href="#启动运行测试" class="headerlink" title="启动运行测试"></a>启动运行测试</h3><p>在 <code>E:\software\php\php-page</code> 目录下，创建 index.php 文件，文本内容如下：</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">echo</span> <span class="token function">phpinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span></code></pre><p>打开浏览地址栏输入： localhost:80/index.php 或者 127.0.0.1:80/index.php , 就可以打开 PHP 页面。</p><p><img src="/images/2020/10/1602831917955.png" alt="1602831917955" loading="lazy"></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;下载-PHP&quot;&gt;&lt;a href=&quot;#下载-PHP&quot; class=&quot;headerlink&quot; title=&quot;下载 PHP&quot;&gt;&lt;/a&gt;下载 PHP&lt;/h3&gt;&lt;p&gt;下载地址：&lt;a href=&quot;http://php.net/downloads.php&quot;&gt;http://php.net/downloads.php&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Windows下载：&lt;a href=&quot;https://windows.php.net/download/&quot;&gt;https://windows.php.net/download/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;版本选择：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果是与 Apache 搭配，建议选择 Thread Safe 版本（有 php7apache2_4.dll）。&lt;/li&gt;
&lt;li&gt;如果是与 CGI 或者 FAST-CGI 搭配，建议选择 Non Thread Safe 版本。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="软件" scheme="https://jueee.github.io/categories/%E8%BD%AF%E4%BB%B6/"/>
    
    <category term="PHP" scheme="https://jueee.github.io/categories/PHP/"/>
    
    <category term="Windows" scheme="https://jueee.github.io/categories/%E8%BD%AF%E4%BB%B6/Windows/"/>
    
    
    <category term="软件" scheme="https://jueee.github.io/tags/%E8%BD%AF%E4%BB%B6/"/>
    
    <category term="PHP" scheme="https://jueee.github.io/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>Windows 系统下安装 Apache 服务器</title>
    <link href="https://jueee.github.io/2020/10/2020-10-15-Windows%E7%B3%BB%E7%BB%9F%E4%B8%8B%E5%AE%89%E8%A3%85Apache%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>https://jueee.github.io/2020/10/2020-10-15-Windows%E7%B3%BB%E7%BB%9F%E4%B8%8B%E5%AE%89%E8%A3%85Apache%E6%9C%8D%E5%8A%A1%E5%99%A8/</id>
    <published>2020-10-15T00:00:00.000Z</published>
    <updated>2020-10-22T10:32:18.688Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Apache-amp-Tomcat"><a href="#Apache-amp-Tomcat" class="headerlink" title="Apache &amp; Tomcat"></a>Apache &amp; Tomcat</h3><p>Apache 与 Tomcat 都是 Apache 开源组织开发的用于处理 HTTP 服务的项目，两者都是免费的，都可以做为独立的 Web 服务器运行。</p><p>Apache 是 Web 服务器而 Tomcat 是 Java 应用服务器。</p><a id="more"></a><h4 id="Apache"><a href="#Apache" class="headerlink" title="Apache"></a>Apache</h4><p>Apache：是 C 语言实现的，专门用来提供 HTTP 服务。</p><p>特性：简单、速度快、性能稳定、可配置（代理）</p><ol><li>主要用于解析静态文本，并发性能高，侧重于 HTTP 服务；</li><li>支持静态页（HTML），不支持动态请求如：CGI、Servlet/JSP、PHP、ASP 等；</li><li>具有很强的可扩展性，可以通过插件支持 PHP，还可以单向 Apache 连接 Tomcat 实现连通；</li><li>Apache 是世界使用排名第一的 Web 服务器。</li></ol><h4 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h4><p>Tomcat：是 Java 开发的一个符合 JavaEE 的 Servlet 规范的 JSP 服务器（Servlet 容器），是 Apache 的扩展。</p><p>特性：免费的 Java 应用服务器。</p><ol><li>主要用于解析 JSP/Servlet，侧重于 Servlet 引擎；</li><li>支持静态页，但效率没有 Apache 高；支持 Servlet、JSP 请求；</li><li>Tomcat 本身也内置了一个 HTTP 服务器用于支持静态内容，可以通过 Tomcat 的配置管理工具实现与 Apache 整合。</li></ol><h4 id="Apache-Tomcat"><a href="#Apache-Tomcat" class="headerlink" title="Apache + Tomcat"></a>Apache + Tomcat</h4><p>Apache + Tomcat 两者整合后优点：<br>如果请求是静态网页则由 Apache 处理，并将结果返回；如果是动态请求，Apache 会将解析工作转发给 Tomcat 处理，Tomcat 处理后将结果通过 Apache 返回。这样可以达到分工合作，实现负载远衡，提高系统的性能。</p><h3 id="下载Apache服务器"><a href="#下载Apache服务器" class="headerlink" title="下载Apache服务器"></a>下载 Apache 服务器</h3><p>Apache HTTP Servcer 下载地址：<span class="exturl" data-url="aHR0cHM6Ly9odHRwZC5hcGFjaGUub3JnLw==">https://httpd.apache.org/<i class="fa fa-external-link-alt"></i></span></p><p>Windows 版本下载：<span class="exturl" data-url="aHR0cHM6Ly9odHRwZC5hcGFjaGUub3JnL2RvY3MvY3VycmVudC9wbGF0Zm9ybS93aW5kb3dzLmh0bWwjZG93bg==">https://httpd.apache.org/docs/current/platform/windows.html#down<i class="fa fa-external-link-alt"></i></span></p><h3 id="配置Apache服务器"><a href="#配置Apache服务器" class="headerlink" title="配置Apache服务器"></a>配置 Apache 服务器</h3><p>打开 Apache24\conf 目录下的 httpd.conf，修改配置信息。</p><h4 id="修改-ServerRoot-路径"><a href="#修改-ServerRoot-路径" class="headerlink" title="修改 ServerRoot 路径"></a>修改 ServerRoot 路径</h4><pre class="language-conf" data-language="conf"><code class="language-conf">Define SRVROOT "E:\software\php\Apache24"ServerRoot "${SRVROOT}"</code></pre><p>如果不修改会出现如下错误：</p><blockquote><p>httpd.exe: Syntax error on line 39 of E:/software/php/Apache24/conf/httpd.conf: ServerRoot must be a valid directory</p></blockquote><h4 id="修改端口号"><a href="#修改端口号" class="headerlink" title="修改端口号"></a>修改端口号</h4><p>默认的是 80 端口，但是多数情况下，80 端口被占用，所以需要修改 80 端口。如果确定 80 端口未被占用则可以不修改。</p><pre class="language-conf" data-language="conf"><code class="language-conf">Listen 80ServerName localhost:80</code></pre><p>如果不修改可能会提示错误：</p><blockquote><p>(OS 10048) 通常每个套接字地址 (协议 / 网络地址 / 端口) 只允许使用一次。: AH00072: make_sock: could not bind to address [::]:8081</p><p>(OS 10048) 通常每个套接字地址 (协议 / 网络地址 / 端口) 只允许使用一次。 : AH00072: make_sock: could not bind to address 0.0.0.0:8081<br>AH00451: no listening sockets available, shutting down<br>AH00015: Unable to open logs</p></blockquote><h4 id="443-端口被占用"><a href="#443-端口被占用" class="headerlink" title="443 端口被占用"></a>443 端口被占用</h4><p>如果 443 端口被占用，会有如下报错信息：</p><blockquote><p>(OS 10048) 通常每个套接字地址 (协议 / 网络地址 / 端口) 只允许使用一次。  : AH00072: make_sock: could not bind to address [::]:443</p><p>(OS 10048) 通常每个套接字地址 (协议 / 网络地址 / 端口) 只允许使用一次。  : AH00072: make_sock: could not bind to address 0.0.0.0:443 AH00451: no listening sockets available, shutting down</p></blockquote><p>解决 443 端口被占用的问题：</p><p>在 httpd.conf 中，找到加载 ssl_module 的那一行，加 #号注释掉就好了：</p><pre class="language-conf" data-language="conf"><code class="language-conf"># LoadModule ssl_module modules/mod_ssl.so</code></pre><h3 id="安装Apache服务器"><a href="#安装Apache服务器" class="headerlink" title="安装Apache服务器"></a>安装 Apache 服务器</h3><h4 id="常见的dos操作命令"><a href="#常见的dos操作命令" class="headerlink" title="常见的dos操作命令"></a>常见的 dos 操作命令</h4><ol><li>把 apache24 安装成系统服务：httpd -k install</li><li> 启动服务 apcache24 服务 ：httpd -k star</li><li> 停止服务 apcache24 服务 ：httpd -k stop</li><li> 重启服务 apcache24 服务 ：httpd -k restart</li><li> 卸载 apcache24 服务 ：httpd -k uninstall</li><li> 测试 apache24 配置语法 ：httpd -t</li><li> 版本信息 ：httpd -V</li><li> 查看 cmd 命令：httpd -h</li></ol><h4 id="安装成系统服务"><a href="#安装成系统服务" class="headerlink" title="安装成系统服务"></a>安装成系统服务</h4><p>以管理员身份运行：<code>.\httpd.exe  -k install</code></p><p><img src="/images/2020/10/1602828782266.png" alt="1602828782266" loading="lazy"></p><h3 id="启动Apache服务器"><a href="#启动Apache服务器" class="headerlink" title="启动Apache服务器"></a>启动 Apache 服务器</h3><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p>双击 <code>Apache24\bin\httpd.exe</code> 即可启动 Apache 服务器。</p><h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><p>打开系统服务窗口，找到 Apache2.4，选择启动或停止。</p><p><img src="/images/2020/10/1602828954797.png" alt="1602828954797" loading="lazy"></p><h4 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h4><p>打开 Apache24\bin 找到 ApacheMonitor.exe 双击打开 Apache24 启停管理器。</p><p><img src="/images/2020/10/1602829021497.png" alt="1602829021497" loading="lazy"></p><h4 id="访问页面"><a href="#访问页面" class="headerlink" title="访问页面"></a>访问页面</h4><p>然后打开浏览器在地址栏输入 <span class="exturl" data-url="aHR0cDovL2xvY2FsaG9zdC8=">http://localhost:80/<i class="fa fa-external-link-alt"></i></span> 就可以访问页面，页面如下：</p><p><img src="/images/2020/10/1602828320892.png" alt="1602828320892" loading="lazy"></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;Apache-amp-Tomcat&quot;&gt;&lt;a href=&quot;#Apache-amp-Tomcat&quot; class=&quot;headerlink&quot; title=&quot;Apache &amp;amp; Tomcat&quot;&gt;&lt;/a&gt;Apache &amp;amp; Tomcat&lt;/h3&gt;&lt;p&gt;Apache与Tomcat都是Apache开源组织开发的用于处理HTTP服务的项目，两者都是免费的，都可以做为独立的Web服务器运行。&lt;/p&gt;
&lt;p&gt;Apache是Web服务器而Tomcat是Java应用服务器。&lt;/p&gt;</summary>
    
    
    
    <category term="软件" scheme="https://jueee.github.io/categories/%E8%BD%AF%E4%BB%B6/"/>
    
    <category term="Windows" scheme="https://jueee.github.io/categories/%E8%BD%AF%E4%BB%B6/Windows/"/>
    
    
    <category term="Apache" scheme="https://jueee.github.io/tags/Apache/"/>
    
    <category term="软件" scheme="https://jueee.github.io/tags/%E8%BD%AF%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>k8s 配置使用 NFS 动态存储</title>
    <link href="https://jueee.github.io/2020/10/2020-10-14-k8s%E9%85%8D%E7%BD%AE%E4%BD%BF%E7%94%A8NFS%E5%8A%A8%E6%80%81%E5%AD%98%E5%82%A8/"/>
    <id>https://jueee.github.io/2020/10/2020-10-14-k8s%E9%85%8D%E7%BD%AE%E4%BD%BF%E7%94%A8NFS%E5%8A%A8%E6%80%81%E5%AD%98%E5%82%A8/</id>
    <published>2020-10-14T00:00:00.000Z</published>
    <updated>2020-10-16T07:27:21.744Z</updated>
    
    <content type="html"><![CDATA[<h3 id="部署nfs服务"><a href="#部署nfs服务" class="headerlink" title="部署nfs服务"></a>部署 nfs 服务</h3><p>1、主机安装 nfs 服务器</p><pre class="language-none"><code class="language-none">sudo apt-get install nfs-kernel-serversudo apt-get install nfs-common</code></pre><a id="more"></a><p>2、主机共享 NFS 文件夹</p><p>编辑  /etc/exports 文件</p><p>sudo vi /etc/exports<br>在文件末尾添加（nfs 共享目录，它可以作为开发板的根文件系统通过 nfs 挂载。）：</p><pre class="language-none"><code class="language-none">/home/vmuser/Share                *(insecure,rw,sync,no_root_squash)</code></pre><p>修改完成后，保存。 </p><p>该目录必须存在<br>然后启动或重启 NFS 服务。</p><p>在终端中执行如下命令，可以启动 NFS 服务：</p><pre class="language-none"><code class="language-none">$ sudo /etc/init.d/nfs-kernel-server start</code></pre><p>执行如下命令则可以重新启动 NFS 服务：</p><pre class="language-none"><code class="language-none">$ sudo /etc/init.d/nfs-kernel-server restart</code></pre><p>3、其他设备挂载 NFS 服务器</p><pre class="language-none"><code class="language-none">$ sudo mount -t nfs 192.168.12.123:/home/vmuser/Share    /mnt/nfsdata -o nolock  </code></pre><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><ul><li><p>共享 NFS 文件夹权限必须为 777 ，<code>chmod 777 Share</code></p></li><li><p>配置文件 /etc/exports，需要加入 insecure 选项。否则其他机器挂载失败。</p><pre class="language-none"><code class="language-none">mount.nfs: access denied by server while mounting 10.110.10.10:/mnt/dfs/3/k8snfs</code></pre></li></ul><h3 id="新建-PV"><a href="#新建-PV" class="headerlink" title="新建 PV"></a>新建 PV</h3><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> PersistentVolume<span class="token key atrule">metadata</span><span class="token punctuation">:</span>   <span class="token key atrule">name</span><span class="token punctuation">:</span> nfs<span class="token punctuation">-</span>mysqldata<span class="token key atrule">spec</span><span class="token punctuation">:</span>   <span class="token key atrule">capacity</span><span class="token punctuation">:</span>      <span class="token key atrule">storage</span><span class="token punctuation">:</span> 50Gi   <span class="token key atrule">accessModes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ReadWriteOnce   <span class="token key atrule">persistentVolumeReclaimPolicy</span><span class="token punctuation">:</span> Retain   <span class="token key atrule">storageClassName</span><span class="token punctuation">:</span> mysqldata   <span class="token key atrule">nfs</span><span class="token punctuation">:</span>      <span class="token key atrule">path</span><span class="token punctuation">:</span> /mnt/dfs/3/k8snfs/mysqldata      <span class="token key atrule">server</span><span class="token punctuation">:</span> hostname1</code></pre><h3 id="新建-PVC"><a href="#新建-PVC" class="headerlink" title="新建 PVC"></a>新建 PVC</h3><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> PersistentVolumeClaim<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> mysqldata  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> manti<span class="token punctuation">-</span>infra<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">accessModes</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> ReadWriteOnce  <span class="token key atrule">resources</span><span class="token punctuation">:</span>    <span class="token key atrule">requests</span><span class="token punctuation">:</span>      <span class="token key atrule">storage</span><span class="token punctuation">:</span> 50Gi  <span class="token key atrule">storageClassName</span><span class="token punctuation">:</span> mysqldata</code></pre><h3 id="新建-Deployment"><a href="#新建-Deployment" class="headerlink" title="新建 Deployment"></a>新建 Deployment</h3><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment<span class="token key atrule">metadata</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> mysql    <span class="token key atrule">namespace</span><span class="token punctuation">:</span> manti<span class="token punctuation">-</span>infra<span class="token key atrule">spec</span><span class="token punctuation">:</span>    <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">1</span>    <span class="token key atrule">selector</span><span class="token punctuation">:</span>        <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>            <span class="token key atrule">app</span><span class="token punctuation">:</span> mysql    <span class="token key atrule">template</span><span class="token punctuation">:</span>        <span class="token key atrule">metadata</span><span class="token punctuation">:</span>            <span class="token key atrule">labels</span><span class="token punctuation">:</span>                <span class="token key atrule">app</span><span class="token punctuation">:</span> mysql        <span class="token key atrule">spec</span><span class="token punctuation">:</span>            <span class="token key atrule">imagePullSecrets</span><span class="token punctuation">:</span>              <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> harborsecret            <span class="token key atrule">containers</span><span class="token punctuation">:</span>              <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> mysql                <span class="token key atrule">image</span><span class="token punctuation">:</span> mysql<span class="token punctuation">:</span>v1.0.7                <span class="token key atrule">imagePullPolicy</span><span class="token punctuation">:</span> IfNotPresent                <span class="token key atrule">ports</span><span class="token punctuation">:</span>                  <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">3306</span>                <span class="token key atrule">env</span><span class="token punctuation">:</span>                  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> MYSQL_ROOT_PASSWORD                    <span class="token key atrule">value</span><span class="token punctuation">:</span> Test321                <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>                  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> mysqldata                    <span class="token key atrule">subPath</span><span class="token punctuation">:</span> mysql                    <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /var/lib/mysql            <span class="token key atrule">volumes</span><span class="token punctuation">:</span>              <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> mysqldata                <span class="token key atrule">persistentVolumeClaim</span><span class="token punctuation">:</span>                    <span class="token key atrule">claimName</span><span class="token punctuation">:</span> mysqldata            <span class="token key atrule">initContainers</span><span class="token punctuation">:</span>              <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> increase<span class="token punctuation">-</span>fd<span class="token punctuation">-</span>ulimit                <span class="token key atrule">image</span><span class="token punctuation">:</span> qz<span class="token punctuation">-</span>nis<span class="token punctuation">-</span>harbor.netease.com/ftd<span class="token punctuation">-</span>phishing/busybox                <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"sh"</span><span class="token punctuation">,</span> <span class="token string">"-c"</span><span class="token punctuation">,</span> <span class="token string">"ulimit -n 65536"</span><span class="token punctuation">]</span>                <span class="token key atrule">securityContext</span><span class="token punctuation">:</span>                    <span class="token key atrule">privileged</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></code></pre><p>新建 </p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Service<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> mysql<span class="token punctuation">-</span>out  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> manti<span class="token punctuation">-</span>infra  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> mysql<span class="token punctuation">-</span>out<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> NodePort  <span class="token key atrule">ports</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> mysql<span class="token punctuation">-</span>out      <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">3306</span>      <span class="token key atrule">nodePort</span><span class="token punctuation">:</span> <span class="token number">30102</span>      <span class="token key atrule">targetPort</span><span class="token punctuation">:</span> <span class="token number">3306</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> mysql<span class="token punctuation">---</span><span class="token key atrule">kind</span><span class="token punctuation">:</span> Service<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> mysql  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> manti<span class="token punctuation">-</span>infra  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> mysql<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> mysql  <span class="token key atrule">clusterIP</span><span class="token punctuation">:</span> None  <span class="token key atrule">ports</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">3306</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> client</code></pre>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;部署nfs服务&quot;&gt;&lt;a href=&quot;#部署nfs服务&quot; class=&quot;headerlink&quot; title=&quot;部署nfs服务&quot;&gt;&lt;/a&gt;部署 nfs 服务&lt;/h3&gt;&lt;p&gt;1、主机安装 nfs 服务器&lt;/p&gt;
&lt;pre class=&quot;language-none&quot;&gt;&lt;code class=&quot;language-none&quot;&gt;sudo apt-get install nfs-kernel-server
sudo apt-get install nfs-common&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://jueee.github.io/categories/Linux/"/>
    
    <category term="软件" scheme="https://jueee.github.io/categories/Linux/%E8%BD%AF%E4%BB%B6/"/>
    
    <category term="k8s" scheme="https://jueee.github.io/categories/k8s/"/>
    
    
    <category term="k8s" scheme="https://jueee.github.io/tags/k8s/"/>
    
    <category term="NFS" scheme="https://jueee.github.io/tags/NFS/"/>
    
  </entry>
  
  <entry>
    <title>Eclipse 安装反编译插件 Decompiler</title>
    <link href="https://jueee.github.io/2020/10/2020-10-13-Eclipse%E5%AE%89%E8%A3%85%E5%8F%8D%E7%BC%96%E8%AF%91%E6%8F%92%E4%BB%B6Decompiler/"/>
    <id>https://jueee.github.io/2020/10/2020-10-13-Eclipse%E5%AE%89%E8%A3%85%E5%8F%8D%E7%BC%96%E8%AF%91%E6%8F%92%E4%BB%B6Decompiler/</id>
    <published>2020-10-13T00:00:00.000Z</published>
    <updated>2020-10-21T09:51:02.411Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Decompiler-插件介绍"><a href="#Decompiler-插件介绍" class="headerlink" title="Decompiler 插件介绍"></a>Decompiler 插件介绍</h3><p>增强的类反编译器将 JD，Jad，FernFlower，CFR，Procyon 与 Eclipse 无缝集成，并允许 Java 开发人员直接调试类文件而无需源代码。</p><p>插件官网：<span class="exturl" data-url="aHR0cDovL21hcmtldHBsYWNlLmVjbGlwc2Uub3JnL2NvbnRlbnQvZW5oYW5jZWQtY2xhc3MtZGVjb21waWxlcg==">http://marketplace.eclipse.org/content/enhanced-class-decompiler<i class="fa fa-external-link-alt"></i></span></p><a id="more"></a><h3 id="Decompiler-插件安装"><a href="#Decompiler-插件安装" class="headerlink" title="Decompiler 插件安装"></a>Decompiler 插件安装</h3><ol><li><p>打开：Help——Eclipse Marketplace</p></li><li><p>搜索 jad、Decompiler 、或者反编译：</p><p><img src="/images/2020/10/image-20201021172812160.png" alt="image-20201021172812160" loading="lazy"></p></li><li><p>点击 Installed，进行安装。</p></li><li><p>安装完成后，重启 Eclipse。插件安装完成。</p><p><img src="/images/2020/10/image-20201021173703398.png" alt="image-20201021173703398" loading="lazy"></p></li></ol><h3 id="Decompiler-插件配置"><a href="#Decompiler-插件配置" class="headerlink" title="Decompiler 插件配置"></a>Decompiler 插件配置</h3><ol><li><p>设置 *.class 文件类型默认打开方式，如图所示：</p><p><img src="/images/2020/10/image-20201021173142275.png" alt="image-20201021173142275" loading="lazy"></p></li><li><p>设置 *.class without source 文件类型打开方式，如图所示</p><p><img src="/images/2020/10/image-20201021173203007.png" alt="image-20201021173203007" loading="lazy"></p></li><li><p>最后，点击 Apply and Close。就可以直接打开.class 文件进行查看了。</p></li><li><p>插件提供了系统菜单，工具栏，当打开了插件提供的类反编译查看器后，会激活菜单和工具栏选项，可以方便的进行首选项配置，切换反编译工具重新反编译，以及导出反编译结果。</p><p>菜单：</p><p><img src="/images/2020/10/image-20201021174246707.png" alt="image-20201021174246707" loading="lazy"></p><p>工具栏选项：</p><p><img src="/images/2020/10/image-20201021174505200.png" alt="image-20201021174505200" loading="lazy"></p></li></ol>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;Decompiler-插件介绍&quot;&gt;&lt;a href=&quot;#Decompiler-插件介绍&quot; class=&quot;headerlink&quot; title=&quot;Decompiler 插件介绍&quot;&gt;&lt;/a&gt;Decompiler 插件介绍&lt;/h3&gt;&lt;p&gt;增强的类反编译器将 JD，Jad，FernFlower，CFR，Procyon 与 Eclipse 无缝集成，并允许 Java 开发人员直接调试类文件而无需源代码。&lt;/p&gt;
&lt;p&gt;插件官网：&lt;a href=&quot;http://marketplace.eclipse.org/content/enhanced-class-decompiler&quot;&gt;http://marketplace.eclipse.org/content/enhanced-class-decompiler&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="软件" scheme="https://jueee.github.io/categories/%E8%BD%AF%E4%BB%B6/"/>
    
    <category term="IDE" scheme="https://jueee.github.io/categories/%E8%BD%AF%E4%BB%B6/IDE/"/>
    
    
    <category term="Java" scheme="https://jueee.github.io/tags/Java/"/>
    
    <category term="软件" scheme="https://jueee.github.io/tags/%E8%BD%AF%E4%BB%B6/"/>
    
    <category term="IDE" scheme="https://jueee.github.io/tags/IDE/"/>
    
    <category term="Eclipse" scheme="https://jueee.github.io/tags/Eclipse/"/>
    
  </entry>
  
  <entry>
    <title>Apache 数据库工具 commons-dbutils 的使用</title>
    <link href="https://jueee.github.io/2020/10/2020-10-12-Apache%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B7%A5%E5%85%B7commons-dbutils%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://jueee.github.io/2020/10/2020-10-12-Apache%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B7%A5%E5%85%B7commons-dbutils%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2020-10-12T00:00:00.000Z</published>
    <updated>2020-10-21T09:51:02.408Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Jar引入"><a href="#Jar引入" class="headerlink" title="Jar引入"></a>Jar 引入</h3><p>官网：<span class="exturl" data-url="aHR0cDovL2NvbW1vbnMuYXBhY2hlLm9yZy9wcm9wZXIvY29tbW9ucy1kYnV0aWxzLw==">http://commons.apache.org/proper/commons-dbutils/<i class="fa fa-external-link-alt"></i></span></p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>commons-dbutils<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>commons-dbutils<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>8.0.22<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></code></pre><h3 id="Jar介绍"><a href="#Jar介绍" class="headerlink" title="Jar介绍"></a>Jar 介绍</h3><p>Apache Commons DbUtils 库是一个相当小的一组类，它们被设计用来在没有资源泄漏的情况下简化 JDBC 调用处理，并且具有更简洁的代码。</p><p>由于 JDBC 资源清理非常繁琐且容易出错，因此 DBUtils 类有助于抽取出重复代码，以便开发人员只专注于与数据库相关的操作。</p><a id="more"></a><h4 id="使用优点"><a href="#使用优点" class="headerlink" title="使用优点"></a>使用优点</h4><ul><li><strong>无资源泄漏</strong> - DBUtils 类确保不会发生资源泄漏。</li><li><strong>清理和清除代码</strong> - DBUtils 类提供干净清晰的代码来执行数据库操作，而无需编写任何清理或资源泄漏防护代码。</li><li><strong>Bean 映射</strong> - DBUtils 类支持从结果集中自动填充 javabeans。</li></ul><h4 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h4><ul><li><strong>小</strong> - DBUtils 库的体积很小，只有较少的类，因此易于理解和使用。</li><li><strong>透明</strong> - DBUtils 库在后台没有做太多工作，它只需查询并执行。</li><li><strong>快速</strong> - DBUtils 库类不会创建许多背景对象，并且在数据库操作执行中速度非常快。</li></ul><h3 id="连接测试"><a href="#连接测试" class="headerlink" title="连接测试"></a>连接测试</h3><h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">Connection</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">DriverManager</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">SQLException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>dbutils<span class="token punctuation">.</span></span><span class="token class-name">DbUtils</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>dbutils<span class="token punctuation">.</span></span><span class="token class-name">QueryRunner</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>dbutils<span class="token punctuation">.</span></span><span class="token class-name">ResultSetHandler</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>dbutils<span class="token punctuation">.</span>handlers<span class="token punctuation">.</span></span><span class="token class-name">BeanHandler</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainApp</span> <span class="token punctuation">{</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> JDBC_DRIVER <span class="token operator">=</span> <span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> DB_URL <span class="token operator">=</span> <span class="token string">"jdbc:mysql://localhost:3306/test?serverTimezone=UTC"</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> USER <span class="token operator">=</span> <span class="token string">"user"</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> PASS <span class="token operator">=</span> <span class="token string">"password"</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span><span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token class-name">QueryRunner</span> queryRunner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryRunner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>conn <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>DB_URL<span class="token punctuation">,</span> USER<span class="token punctuation">,</span> PASS<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ResultSetHandler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span> resultHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BeanHandler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">Employee</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token class-name">Employee</span> emp <span class="token operator">=</span> queryRunner<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> <span class="token string">"SELECT * FROM employees WHERE first=?"</span><span class="token punctuation">,</span> resultHandler<span class="token punctuation">,</span> <span class="token string">"Sumit"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Display values</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"ID: "</span> <span class="token operator">+</span> emp<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", Age: "</span> <span class="token operator">+</span> emp<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", First: "</span> <span class="token operator">+</span> emp<span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", Last: "</span> <span class="token operator">+</span> emp<span class="token punctuation">.</span><span class="token function">getLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span><span class="token class-name">DbUtils</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h4><p><strong>异常一</strong>：连接报错：</p><blockquote><p>Exception in thread "main" java.sql.SQLException: The server time zone value '�й���׼ʱ��' is unrecognized or represents more than one time zone. You must configure either the server or JDBC driver (via the 'serverTimezone' configuration property) to use a more specific time zone value if you want to utilize time zone support.</p></blockquote><p><strong>解决</strong>：在连接字符串后面加上 <code>?serverTimezone=UTC</code>，其中 UTC 是统一标准世界时间。如下所示：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> DB_URL <span class="token operator">=</span> <span class="token string">"jdbc:mysql://localhost:3306/test?serverTimezone=UTC"</span><span class="token punctuation">;</span></code></pre><p><strong>异常二</strong>：若使用驱动 <code>com.mysql.jdbc.Driver</code> ，则虽然程序正常运行，但提示：</p><blockquote><p>Loading class <code>com.mysql.jdbc.Driver'. This is deprecated. The new driver class is </code>com.mysql.cj.jdbc.Driver'. The driver is automatically registered via the SPI and manual loading of the driver class is generally unnecessary.</p></blockquote><p><strong>解决</strong>：解决方案有两种：</p><ol><li><p>切换驱动 <code>com.mysql.jdbc.Driver</code> 为 <code>com.mysql.cj.jdbc.Driver</code>。</p></li><li><p>删除驱动连接。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> JDBC_DRIVER <span class="token operator">=</span> <span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">;</span><span class="token class-name">DbUtils</span><span class="token punctuation">.</span><span class="token function">loadDriver</span><span class="token punctuation">(</span>JDBC_DRIVER<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>此时，通过 SPI 自动注册驱动程序，不需要手动加载驱动程序类。</p></li></ol><h3 id="数据操作"><a href="#数据操作" class="headerlink" title="数据操作"></a>数据操作</h3><h4 id="新增数据"><a href="#新增数据" class="headerlink" title="新增数据"></a>新增数据</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> insertQuery <span class="token operator">=</span><span class="token string">"INSERT INTO employees(id,age,first,last)  VALUES (?,?,?,?)"</span><span class="token punctuation">;</span><span class="token keyword">int</span> insertedRecords <span class="token operator">=</span> queryRunner<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> insertQuery<span class="token punctuation">,</span> <span class="token number">104</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token string">"Sohan"</span><span class="token punctuation">,</span><span class="token string">"Kumar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="读取数据"><a href="#读取数据" class="headerlink" title="读取数据"></a>读取数据</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">ResultSetHandler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span> resultHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BeanHandler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">Employee</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Employee</span> emp <span class="token operator">=</span> queryRunner<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> <span class="token string">"SELECT * FROM employees WHERE first=?"</span><span class="token punctuation">,</span> resultHandler<span class="token punctuation">,</span> <span class="token string">"Sumit"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>其中，</p><ul><li><em>resultHandler</em>  − <code>ResultSetHandler</code> 对象将结果集映射到 <code>Employee</code> 对象。</li><li><em>queryRunner</em> − <code>QueryRunner</code> 对象在数据库中插入 <code>Employee</code> 对象。</li></ul><h4 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> updateQuery <span class="token operator">=</span> <span class="token string">"UPDATE employees SET age=? WHERE id=?"</span><span class="token punctuation">;</span><span class="token keyword">int</span> updatedRecords <span class="token operator">=</span> queryRunner<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> updateQuery<span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">104</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>其中，</p><ul><li><em>updateQuery</em> − 更新包含占位符的查询。</li><li><em>queryRunner</em> − QueryRunner 对象更新数据库中的员工对象。</li></ul><h4 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> deleteQuery <span class="token operator">=</span> <span class="token string">"DELETE FROM employees WHERE id=?"</span><span class="token punctuation">;</span><span class="token keyword">int</span> deletedRecords <span class="token operator">=</span> queryRunner<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> deleteQuery<span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span><span class="token number">104</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Java</span></code></pre><p>其中，</p><ul><li><em>deleteQuery</em> − 删除包含占位符的查询。</li><li><em>queryRunner</em> − <code>QueryRunner</code> 对象删除数据库中的员工对象。</li></ul><h3 id="DBUtils-核心类"><a href="#DBUtils-核心类" class="headerlink" title="DBUtils 核心类"></a>DBUtils 核心类</h3><h4 id="QueryRunner"><a href="#QueryRunner" class="headerlink" title="QueryRunner"></a>QueryRunner</h4><p><code>org.apache.commons.dbutils.QueryRunner</code> 类是 DBUtils 库中的中心类。 </p><p>它执行带有可插入策略的 SQL 查询来处理 <code>ResultSets</code>。 这个类是线程安全的。</p><h4 id="AsyncQueryRunner"><a href="#AsyncQueryRunner" class="headerlink" title="AsyncQueryRunner"></a>AsyncQueryRunner</h4><p><code>org.apache.commons.dbutils.AsyncQueryRunner</code> 类有助于执行具有异步支持的长时间运行的 SQL 查询。 这个类是线程安全的。 </p><p>该类支持与 <code>QueryRunner</code> 相同的方法，但它返回 <code>Callable</code> 对象，在之后可以使用它来检索结果。</p><h4 id="ResultSetHandler"><a href="#ResultSetHandler" class="headerlink" title="ResultSetHandler"></a>ResultSetHandler</h4><p><code>org.apache.commons.dbutils.ResultSetHandler</code> 接口负责将 ResultSets 转换为对象。</p><h4 id="BeanHandler"><a href="#BeanHandler" class="headerlink" title="BeanHandler"></a>BeanHandler</h4><p><code>org.apache.commons.dbutils.BeanHandler</code> 是 <code>ResultSetHandler</code> 接口的实现，负责将第一个 <code>ResultSet</code> 行转换为 <code>JavaBean</code>。 这个类是线程安全的。</p><h4 id="BeanListHandler"><a href="#BeanListHandler" class="headerlink" title="BeanListHandler"></a>BeanListHandler</h4><p><code>org.apache.commons.dbutils.BeanListHandler</code> 是 <code>ResultSetHandler</code> 接口的实现，负责将 <code>ResultSet</code> 行转换为 Java Bean 列表。 这个类是线程安全的。</p><h4 id="ArrayListHandler"><a href="#ArrayListHandler" class="headerlink" title="ArrayListHandler"></a>ArrayListHandler</h4><p><code>org.apache.commons.dbutils.ArrayListHandler</code> 是 <code>ResultSetHandler</code> 接口的实现，负责将 <code>ResultSet</code> 行转换为 <code>object[]</code>。 这个类是线程安全的。</p><h4 id="MapListHandler"><a href="#MapListHandler" class="headerlink" title="MapListHandler"></a>MapListHandler</h4><p><code>org.apache.commons.dbutils.MapListHandler</code> 是 <code>ResultSetHandler</code> 接口的实现，负责将 <code>ResultSet</code> 行转换为 Maps 列表。 这个类是线程安全的。</p><h3 id="自定义DBUtils"><a href="#自定义DBUtils" class="headerlink" title="自定义DBUtils"></a>自定义 DBUtils</h3><h4 id="自定义处理程序"><a href="#自定义处理程序" class="headerlink" title="自定义处理程序"></a>自定义处理程序</h4><p>可以通过实现 <code>ResultSetHandler</code> 接口或扩展任何现有的 <code>ResultSetHandler</code> 实现来创建自己的自定义处理程序。</p><p>在下面的示例中，我们通过扩展 <code>BeanHandler</code> 类创建了自定义处理程序 <code>EmployeeHandler</code>。</p><p>EmployeeHandler.java</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">ResultSet</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">SQLException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>dbutils<span class="token punctuation">.</span>handlers<span class="token punctuation">.</span></span><span class="token class-name">BeanHandler</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmployeeHandler</span> <span class="token keyword">extends</span> <span class="token class-name">BeanHandler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token class-name">EmployeeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">super</span><span class="token punctuation">(</span><span class="token class-name">Employee</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">Employee</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name">ResultSet</span> rs<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span><span class="token class-name">Employee</span> employee <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span>rs<span class="token punctuation">)</span><span class="token punctuation">;</span>employee<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>employee<span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> employee<span class="token punctuation">.</span><span class="token function">getLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> employee<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>MyHandlerMain.java</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">Connection</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">DriverManager</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">SQLException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>dbutils<span class="token punctuation">.</span></span><span class="token class-name">DbUtils</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>dbutils<span class="token punctuation">.</span></span><span class="token class-name">QueryRunner</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyHandlerMain</span> <span class="token punctuation">{</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> DB_URL <span class="token operator">=</span> <span class="token string">"jdbc:mysql://localhost:3306/test?serverTimezone=UTC"</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> USER <span class="token operator">=</span> <span class="token string">"user"</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> PASS <span class="token operator">=</span> <span class="token string">"password"</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span><span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token class-name">QueryRunner</span> queryRunner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryRunner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>conn <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>DB_URL<span class="token punctuation">,</span> USER<span class="token punctuation">,</span> PASS<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">EmployeeHandler</span> employeeHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EmployeeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token class-name">Employee</span> emp <span class="token operator">=</span> queryRunner<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> <span class="token string">"SELECT * FROM employees WHERE first=?"</span><span class="token punctuation">,</span> employeeHandler<span class="token punctuation">,</span> <span class="token string">"Sumit"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"ID: "</span> <span class="token operator">+</span> emp<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", Age: "</span> <span class="token operator">+</span> emp<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", Name: "</span> <span class="token operator">+</span> emp<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span><span class="token class-name">DbUtils</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="自定义行处理器"><a href="#自定义行处理器" class="headerlink" title="自定义行处理器"></a>自定义行处理器</h4><p>如果数据库表中的列名和等价的 javabean 对象名称不相似，那么我们可以通过使用自定义的 <code>BasicRowProcessor</code> 对象来映射它们。</p><p>EmployeeHandler2.java</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">ResultSet</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">SQLException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>dbutils<span class="token punctuation">.</span></span><span class="token class-name">BasicRowProcessor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>dbutils<span class="token punctuation">.</span></span><span class="token class-name">BeanProcessor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>dbutils<span class="token punctuation">.</span>handlers<span class="token punctuation">.</span></span><span class="token class-name">BeanHandler</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmployeeHandler2</span> <span class="token keyword">extends</span> <span class="token class-name">BeanHandler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token class-name">EmployeeHandler2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token class-name">Employee</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BasicRowProcessor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BeanProcessor</span><span class="token punctuation">(</span><span class="token function">mapColumnsToFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token annotation punctuation">@Override</span>   <span class="token keyword">public</span> <span class="token class-name">Employee</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name">ResultSet</span> rs<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>      <span class="token class-name">Employee</span> employee <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span>rs<span class="token punctuation">)</span><span class="token punctuation">;</span>      employee<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>employee<span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">", "</span> <span class="token operator">+</span> employee<span class="token punctuation">.</span><span class="token function">getLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> employee<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">mapColumnsToFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> columnsToFieldsMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      columnsToFieldsMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"ID"</span><span class="token punctuation">,</span> <span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      columnsToFieldsMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"AGE"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">return</span> columnsToFieldsMap<span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>MyHandlerMain2.java</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">Connection</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">DriverManager</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">SQLException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>dbutils<span class="token punctuation">.</span></span><span class="token class-name">DbUtils</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>dbutils<span class="token punctuation">.</span></span><span class="token class-name">QueryRunner</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyHandlerMain2</span> <span class="token punctuation">{</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> DB_URL <span class="token operator">=</span> <span class="token string">"jdbc:mysql://localhost:3306/test?serverTimezone=UTC"</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> USER <span class="token operator">=</span> <span class="token string">"user"</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> PASS <span class="token operator">=</span> <span class="token string">"password"</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span><span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token class-name">QueryRunner</span> queryRunner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryRunner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>conn <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>DB_URL<span class="token punctuation">,</span> USER<span class="token punctuation">,</span> PASS<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">EmployeeHandler</span> employeeHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EmployeeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token class-name">Employee</span> emp <span class="token operator">=</span> queryRunner<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> <span class="token string">"SELECT * FROM employees WHERE first=?"</span><span class="token punctuation">,</span> employeeHandler<span class="token punctuation">,</span> <span class="token string">"Sumit"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"ID: "</span> <span class="token operator">+</span> emp<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", Name: "</span> <span class="token operator">+</span> emp<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span><span class="token class-name">DbUtils</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="使用DataSource"><a href="#使用DataSource" class="headerlink" title="使用DataSource"></a>使用 DataSource</h4><p> 以下示例将演示如何在 <code>QueryRunner</code> 和数据源的帮助下使用查询读取记录。 </p><p><strong>语法</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">QueryRunner</span> queryRunner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryRunner</span><span class="token punctuation">(</span> dataSource <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Employee</span> emp <span class="token operator">=</span> queryRunner<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">"SELECT * FROM employees WHERE first=?"</span><span class="token punctuation">,</span> resultHandler<span class="token punctuation">,</span> <span class="token string">"Sumit"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>其中，</p><ul><li><code>dataSource</code> - 配置了 <code>DataSource</code> 对象。</li><li><code>resultHandler</code> - <code>ResultSetHandler</code> 对象将结果集映射到 <code>Employee</code> 对象。</li><li><code>queryRunner</code> - 用于从数据库读取 <code>Employee</code> 对象的 <code>QueryRunner</code> 对象。</li></ul><p>需要引入 Jar 包：</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>commons-dbutils<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>commons-dbutils<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></code></pre><p>CustomDataSource.java：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">DataSource</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>dbcp2<span class="token punctuation">.</span></span><span class="token class-name">BasicDataSource</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomDataSource</span> <span class="token punctuation">{</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> JDBC_DRIVER <span class="token operator">=</span> <span class="token string">"com.mysql.cj.jdbc.Driver"</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> DB_URL <span class="token operator">=</span> <span class="token string">"jdbc:mysql://localhost:3306/test?serverTimezone=UTC"</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> USER <span class="token operator">=</span> <span class="token string">"user"</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> PASS <span class="token operator">=</span> <span class="token string">"password"</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">BasicDataSource</span> basicDataSource<span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token punctuation">{</span>basicDataSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BasicDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>basicDataSource<span class="token punctuation">.</span><span class="token function">setDriverClassName</span><span class="token punctuation">(</span>JDBC_DRIVER<span class="token punctuation">)</span><span class="token punctuation">;</span>basicDataSource<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span>USER<span class="token punctuation">)</span><span class="token punctuation">;</span>basicDataSource<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>PASS<span class="token punctuation">)</span><span class="token punctuation">;</span>basicDataSource<span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span>DB_URL<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">DataSource</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> basicDataSource<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>MyHandlerMain3.java</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">SQLException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>dbutils<span class="token punctuation">.</span></span><span class="token class-name">QueryRunner</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>dbutils<span class="token punctuation">.</span></span><span class="token class-name">ResultSetHandler</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>dbutils<span class="token punctuation">.</span>handlers<span class="token punctuation">.</span></span><span class="token class-name">BeanHandler</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyHandlerMain3</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span><span class="token class-name">QueryRunner</span> queryRunner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryRunner</span><span class="token punctuation">(</span><span class="token class-name">CustomDataSource</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ResultSetHandler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span> resultHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BeanHandler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">Employee</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Employee</span> emp <span class="token operator">=</span> queryRunner<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">"SELECT * FROM employees WHERE id=?"</span><span class="token punctuation">,</span> resultHandler<span class="token punctuation">,</span> <span class="token number">103</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"ID: "</span> <span class="token operator">+</span> emp<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", Age: "</span> <span class="token operator">+</span> emp<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", First: "</span> <span class="token operator">+</span> emp<span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", Last: "</span> <span class="token operator">+</span> emp<span class="token punctuation">.</span><span class="token function">getLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cueWlpYmFpLmNvbS9kYnV0aWxz">https://www.yiibai.com/dbutils<i class="fa fa-external-link-alt"></i></span></li></ul>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;Jar引入&quot;&gt;&lt;a href=&quot;#Jar引入&quot; class=&quot;headerlink&quot; title=&quot;Jar引入&quot;&gt;&lt;/a&gt;Jar 引入&lt;/h3&gt;&lt;p&gt;官网：&lt;a href=&quot;http://commons.apache.org/proper/commons-dbutils/&quot;&gt;http://commons.apache.org/proper/commons-dbutils/&lt;/a&gt;&lt;/p&gt;
&lt;pre class=&quot;language-xml&quot; data-language=&quot;xml&quot;&gt;&lt;code class=&quot;language-xml&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;dependency&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;groupId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;commons-dbutils&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;groupId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;artifactId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;commons-dbutils&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;artifactId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;version&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;1.7&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;version&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;dependency&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;dependency&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;groupId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;mysql&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;groupId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;artifactId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;mysql-connector-java&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;artifactId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;version&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;8.0.22&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;version&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;dependency&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;Jar介绍&quot;&gt;&lt;a href=&quot;#Jar介绍&quot; class=&quot;headerlink&quot; title=&quot;Jar介绍&quot;&gt;&lt;/a&gt;Jar 介绍&lt;/h3&gt;&lt;p&gt;Apache Commons DbUtils 库是一个相当小的一组类，它们被设计用来在没有资源泄漏的情况下简化 JDBC 调用处理，并且具有更简洁的代码。&lt;/p&gt;
&lt;p&gt;由于 JDBC 资源清理非常繁琐且容易出错，因此 DBUtils 类有助于抽取出重复代码，以便开发人员只专注于与数据库相关的操作。&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://jueee.github.io/categories/Java/"/>
    
    <category term="MySQL" scheme="https://jueee.github.io/categories/MySQL/"/>
    
    <category term="JavaJar" scheme="https://jueee.github.io/categories/Java/JavaJar/"/>
    
    
    <category term="Apache" scheme="https://jueee.github.io/tags/Apache/"/>
    
    <category term="Java" scheme="https://jueee.github.io/tags/Java/"/>
    
    <category term="MySQL" scheme="https://jueee.github.io/tags/MySQL/"/>
    
    <category term="JavaJar" scheme="https://jueee.github.io/tags/JavaJar/"/>
    
  </entry>
  
  <entry>
    <title>Apache 集合工具 commons-collections4 的使用</title>
    <link href="https://jueee.github.io/2020/10/2020-10-11-Apache%E9%9B%86%E5%90%88%E5%B7%A5%E5%85%B7commons-collections4%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://jueee.github.io/2020/10/2020-10-11-Apache%E9%9B%86%E5%90%88%E5%B7%A5%E5%85%B7commons-collections4%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2020-10-11T00:00:00.000Z</published>
    <updated>2020-10-21T09:51:02.405Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Jar引入"><a href="#Jar引入" class="headerlink" title="Jar引入"></a>Jar 引入</h3><p>官网：<span class="exturl" data-url="aHR0cDovL2NvbW1vbnMuYXBhY2hlLm9yZy9wcm9wZXIvY29tbW9ucy1jb2xsZWN0aW9ucy8=">http://commons.apache.org/proper/commons-collections/<i class="fa fa-external-link-alt"></i></span></p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>commons-collections4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></code></pre><h3 id="Jar介绍"><a href="#Jar介绍" class="headerlink" title="Jar介绍"></a>Jar 介绍</h3><p>Commons Collections 增强了 Java 集合框架。 它提供了几个功能来简化收集处理。 它提供了许多新的接口，实现和实用程序。 </p><a id="more"></a><p>Commons Collections 的主要特点如下 -</p><ul><li><strong>Bag</strong> - <code>Bag</code> 接口简化了每个对象具有多个副本的集合。</li><li><strong>BidiMap</strong>- <code>BidiMap</code> 接口提供双向映射，可用于使用键或键使用的值来查找值。</li><li><strong>MapIterator</strong> - <code>MapIterator</code> 接口为映射提供了简单和易于迭代方法。</li><li><strong>转换装饰器</strong> - 转换装饰器 (<code>Transforming Decorators</code>) 可以在集合添加到集合时改变集合的每个对象。</li><li><strong>复合集合</strong> - 复合集合用于要求统一处理多个集合的情况。</li><li><strong>有序映射</strong> - 有序映射保留元素添加的顺序。</li><li><strong>有序集</strong> - 有序集保留元素添加的顺序。</li><li><strong>参考映射</strong> - 参考映射允许在密切控制下对键 / 值进行垃圾收集。</li><li><strong>比较器实现</strong> - 许多比较器实现都可用。</li><li><strong>迭代器实现</strong> - 许多迭代器实现都可用。</li><li><strong>适配器类</strong> - 适配器类可用于将数组和枚举转换为集合。</li><li><strong>实用程序</strong> - 实用程序可用于测试测试或创建集合的典型集合理论属性，如联合，交集。 支持关闭。</li></ul><h3 id="通用集合Bag"><a href="#通用集合Bag" class="headerlink" title="通用集合Bag"></a>通用集合 Bag</h3><p><code>Bag</code> 接口定义了一个集合，它可以计算一个对象出现在集合中的次数。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections4<span class="token punctuation">.</span></span><span class="token class-name">Bag</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections4<span class="token punctuation">.</span>bag<span class="token punctuation">.</span></span><span class="token class-name">HashBag</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BagTester</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">Bag</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> bag <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashBag</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      bag<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"a"</span> <span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      bag<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      bag<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      bag<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      bag<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bag<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 3</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bag<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// [2:a,1:b,2:c,3:d]</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bag<span class="token punctuation">.</span><span class="token function">uniqueSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// [a, b, c, d]</span>      bag<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bag<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// [2:a,1:b,2:c,1:d]</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bag<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 1</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bag<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// [2:a,1:b,2:c,1:d]</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bag<span class="token punctuation">.</span><span class="token function">uniqueSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// [a, b, c, d]</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="通用集合BidiMap"><a href="#通用集合BidiMap" class="headerlink" title="通用集合BidiMap"></a>通用集合 BidiMap</h3><p>BidiMap 接口被添加到支持双向映射。 使用双向映射，可以使用值查找键，并且可以使用键轻松查找值。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections4<span class="token punctuation">.</span></span><span class="token class-name">BidiMap</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections4<span class="token punctuation">.</span>bidimap<span class="token punctuation">.</span></span><span class="token class-name">TreeBidiMap</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BidiMapTester</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">BidiMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> bidi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeBidiMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      bidi<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"One"</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      bidi<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"Two"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      bidi<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"Three"</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bidi<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"One"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bidi<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// One</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bidi<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {One=1, Three=3, Two=2}</span>      bidi<span class="token punctuation">.</span><span class="token function">removeValue</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bidi<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {Three=3, Two=2}</span>      <span class="token class-name">BidiMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> inversedMap <span class="token operator">=</span> bidi<span class="token punctuation">.</span><span class="token function">inverseBidiMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>inversedMap<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {2=Two, 3=Three}</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="通用集合MapIterator"><a href="#通用集合MapIterator" class="headerlink" title="通用集合MapIterator"></a>通用集合 MapIterator</h3><p>JDK Map 接口很难作为迭代在 <code>EntrySet</code> 或 <code>KeySet</code> 对象上迭代。 <code>MapIterator</code> 提供了对 <code>Map</code> 的简单迭代。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections4<span class="token punctuation">.</span></span><span class="token class-name">IterableMap</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections4<span class="token punctuation">.</span></span><span class="token class-name">MapIterator</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections4<span class="token punctuation">.</span>map<span class="token punctuation">.</span></span><span class="token class-name">HashedMap</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MapIteratorTester</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">IterableMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashedMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"One"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"Two"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">,</span> <span class="token string">"Three"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">,</span> <span class="token string">"Four"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"5"</span><span class="token punctuation">,</span> <span class="token string">"Five"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">MapIterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> iterator <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">mapIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token class-name">Object</span> key <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">Object</span> value <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"key: "</span> <span class="token operator">+</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Value: "</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>         iterator<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>value <span class="token operator">+</span> <span class="token string">"_"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// {3=Three_, 5=Five_, 2=Two_, 4=Four_, 1=One_}</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="通用集合OrderedMap"><a href="#通用集合OrderedMap" class="headerlink" title="通用集合OrderedMap"></a>通用集合 OrderedMap</h3><p><code>OrderedMap</code> 是映射的新接口，用于保留添加元素的顺序。 <code>LinkedMap</code> 和 <code>ListOrderedMap</code> 是两种可用的实现。 此接口支持 <code>Map</code> 的迭代器，并允许在 Map 中向前或向后两个方向进行迭代。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections4<span class="token punctuation">.</span></span><span class="token class-name">OrderedMap</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections4<span class="token punctuation">.</span>map<span class="token punctuation">.</span></span><span class="token class-name">LinkedMap</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderedMapTester</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">OrderedMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"One"</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"Two"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"Three"</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">firstKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// One</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">lastKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Three</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">nextKey</span><span class="token punctuation">(</span><span class="token string">"One"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Two</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">nextKey</span><span class="token punctuation">(</span><span class="token string">"Two"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Three</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">previousKey</span><span class="token punctuation">(</span><span class="token string">"One"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// null</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">previousKey</span><span class="token punctuation">(</span><span class="token string">"Two"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// One</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="集合工具类CollectionUtils"><a href="#集合工具类CollectionUtils" class="headerlink" title="集合工具类CollectionUtils"></a>集合工具类 CollectionUtils</h3><p>Apache Commons Collections 库的 <code>CollectionUtils</code> 类提供各种实用方法，用于覆盖广泛用例的常见操作。 它有助于避免编写样板代码。 这个库在 jdk 8 之前是非常有用的，但现在 Java 8 的 Stream API 提供了类似的功能。</p><h4 id="检查是否为空元素"><a href="#检查是否为空元素" class="headerlink" title="检查是否为空元素"></a>检查是否为空元素</h4><p>CollectionUtils 的 <code>addIgnoreNull()</code> 方法可用于确保只有非空 (<code>null</code>) 值被添加到集合中。</p><p><strong>返回值</strong>：如果集合已更改，则返回为 <code>True</code>。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> result1 <span class="token operator">=</span> <span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">addIgnoreNull</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span class="token keyword">boolean</span> result2 <span class="token operator">=</span> <span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">addIgnoreNull</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [a]</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [a, null]</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></code></pre><h4 id="合并两个排序列表"><a href="#合并两个排序列表" class="headerlink" title="合并两个排序列表"></a>合并两个排序列表</h4><p>CollectionUtils 的 <code>collate()</code> 方法可用于合并两个已排序的列表。</p><p><strong>返回值</strong>：一个新的排序列表，其中包含集合 <code>a</code> 和 <code>b</code> 的元素。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> sortedList1 <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">,</span> <span class="token string">"E"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> sortedList2 <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token string">"D"</span><span class="token punctuation">,</span> <span class="token string">"F"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> mergedList <span class="token operator">=</span> <span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">collate</span><span class="token punctuation">(</span>sortedList1<span class="token punctuation">,</span> sortedList2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mergedList<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [A, B, C, D, E, F]</span></code></pre><h4 id="转换列表"><a href="#转换列表" class="headerlink" title="转换列表"></a>转换列表</h4><p><code>CollectionUtils</code> 的 <code>collect()</code> 方法可用于将一种类型的对象列表转换为不同类型的对象列表。</p><p><strong>返回值</strong>：转换结果 (新列表)。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> stringList <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> integerList <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> <span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>stringList<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Transformer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">transform</span><span class="token punctuation">(</span><span class="token class-name">String</span> input<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>integerList<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3]</span></code></pre><h4 id="过滤列表"><a href="#过滤列表" class="headerlink" title="过滤列表"></a>过滤列表</h4><p>CollectionUtils 的 <code>filter()</code> 方法可用于过滤列表以移除不满足由谓词传递提供的条件的对象。</p><p><strong>返回值</strong>：如果通过此调用修改了集合，则返回 <code>true</code>，否则返回 <code>false</code>。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> integerList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>integerList<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>integerList<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3, 4, 5, 6, 7, 8]</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>integerList<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> input<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>integerList<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [2, 4, 6, 8]</span></code></pre><h4 id="检查非空列表"><a href="#检查非空列表" class="headerlink" title="检查非空列表"></a>检查非空列表</h4><p>CollectionUtils 的 <code>isNotEmpty()</code> 方法可用于检查列表是否为 null 而不用担心 null 列表。 因此，在检查列表大小之前，不需要将无效检查放在任何地方。</p><p><strong>返回值</strong>：如果非空且非 null，则返回为:true。</p><h4 id="检查空的列表"><a href="#检查空的列表" class="headerlink" title="检查空的列表"></a>检查空的列表</h4><p>CollectionUtils 的 <code>isEmpty()</code> 方法可用于检查列表是否为空。</p><p><strong>返回值</strong>：如果为空或为 <code>null</code>，则返回为 <code>true</code>。</p><h4 id="检查子列表"><a href="#检查子列表" class="headerlink" title="检查子列表"></a>检查子列表</h4><p>CollectionUtils 的 isSubCollection () 方法可用于检查集合是否包含给定集合。</p><p><strong>参数</strong></p><ul><li><code>a</code> - 第一个 (子) 集合不能为空。</li><li><code>b</code> - 第二个 (超集) 集合不能为空。</li></ul><p>当且仅当 <code>a</code> 是 <code>b</code> 的子集合时才为 <code>true</code>。</p><h4 id="检查相交"><a href="#检查相交" class="headerlink" title="检查相交"></a>检查相交</h4><p>CollectionUtils 的 <code>intersection()</code> 方法可用于获取两个集合 (交集) 之间的公共对象部分。</p><p><strong>参数</strong></p><ul><li><code>a</code> - 第一个 (子) 集合不能为 <code>null</code>。</li><li><code>b</code> - 第二个 (超集) 集合不能为 <code>null</code>。</li></ul><p><strong>返回值</strong>：两个集合的交集。</p><h4 id="求差集"><a href="#求差集" class="headerlink" title="求差集"></a>求差集</h4><p>CollectionUtils 的 <code>subtract()</code> 方法可用于通过从其他集合中减去一个集合的对象来获取新集合。</p><p><strong>参数</strong></p><ul><li><code>a</code> - 要从中减去的集合，不能为 <code>null</code>。</li><li><code>b</code> - 要减去的集合，不能为 <code>null</code>。</li></ul><p><strong>返回值</strong>：两个集合的差集 (新集合)。</p><h4 id="求联合集"><a href="#求联合集" class="headerlink" title="求联合集"></a>求联合集</h4><p>CollectionUtils 的 <code>union()</code> 方法可用于获取两个集合的联合。</p><p><strong>参数</strong></p><ul><li><code>a</code> - 第一个集合，不能为 <code>null</code>。</li><li><code>b</code> - 第二个集合，不能为 <code>null</code>。</li></ul><p><strong>返回值</strong>：两个集合的联合。</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cueWlpYmFpLmNvbS9jb21tb25zX2NvbGxlY3Rpb25z">https://www.yiibai.com/commons_collections<i class="fa fa-external-link-alt"></i></span></li></ul>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;Jar引入&quot;&gt;&lt;a href=&quot;#Jar引入&quot; class=&quot;headerlink&quot; title=&quot;Jar引入&quot;&gt;&lt;/a&gt;Jar 引入&lt;/h3&gt;&lt;p&gt;官网：&lt;a href=&quot;http://commons.apache.org/proper/commons-collections/&quot;&gt;http://commons.apache.org/proper/commons-collections/&lt;/a&gt;&lt;/p&gt;
&lt;pre class=&quot;language-xml&quot; data-language=&quot;xml&quot;&gt;&lt;code class=&quot;language-xml&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;dependency&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;groupId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;org.apache.commons&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;groupId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;artifactId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;commons-collections4&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;artifactId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;version&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;4.4&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;version&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;dependency&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;Jar介绍&quot;&gt;&lt;a href=&quot;#Jar介绍&quot; class=&quot;headerlink&quot; title=&quot;Jar介绍&quot;&gt;&lt;/a&gt;Jar 介绍&lt;/h3&gt;&lt;p&gt;Commons Collections 增强了 Java 集合框架。 它提供了几个功能来简化收集处理。 它提供了许多新的接口，实现和实用程序。 &lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://jueee.github.io/categories/Java/"/>
    
    <category term="JavaJar" scheme="https://jueee.github.io/categories/Java/JavaJar/"/>
    
    
    <category term="Apache" scheme="https://jueee.github.io/tags/Apache/"/>
    
    <category term="Java" scheme="https://jueee.github.io/tags/Java/"/>
    
    <category term="JavaJar" scheme="https://jueee.github.io/tags/JavaJar/"/>
    
  </entry>
  
  <entry>
    <title>Python 转化文件编码为 UTF8</title>
    <link href="https://jueee.github.io/2020/10/2020-10-10-Python%E8%BD%AC%E5%8C%96%E6%96%87%E4%BB%B6%E7%BC%96%E7%A0%81%E4%B8%BAUTF8/"/>
    <id>https://jueee.github.io/2020/10/2020-10-10-Python%E8%BD%AC%E5%8C%96%E6%96%87%E4%BB%B6%E7%BC%96%E7%A0%81%E4%B8%BAUTF8/</id>
    <published>2020-10-10T00:00:00.000Z</published>
    <updated>2020-10-10T09:27:42.694Z</updated>
    
    <content type="html"><![CDATA[<p>使用编译器若遇到文件编码问题，当文件中有中文时，则会出现乱码，会因为编码问题导致各种错误。</p><p>所以写了个 python 脚本来检测原文件编码并转换为目标编码，以下代码以目标编码为 utf-8 为例：</p><p>需要安装 chardet，详情：<span class="exturl" data-url="aHR0cHM6Ly9weXBpLnB5dGhvbi5vcmcvcHlwaS9jaGFyZGV0">https://pypi.python.org/pypi/chardet<i class="fa fa-external-link-alt"></i></span> </p><a id="more"></a><h3 id="Python2"><a href="#Python2" class="headerlink" title="Python2"></a>Python2</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> codecs<span class="token keyword">import</span> os<span class="token keyword">import</span> sys<span class="token keyword">import</span> shutil<span class="token keyword">import</span> re<span class="token keyword">import</span> chardetconvertdir <span class="token operator">=</span> <span class="token string">"E:\\code\\GitCode\\test-demo\\src\\main\\java"</span>convertfiletypes <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token string">".java"</span><span class="token punctuation">,</span>  <span class="token string">".h"</span><span class="token punctuation">,</span>  <span class="token string">".hpp"</span>  <span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">convert_encoding</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> target_encoding<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># Backup the origin file.</span>    <span class="token comment"># convert file from the source encoding to target encoding</span>    content <span class="token operator">=</span> codecs<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    source_encoding <span class="token operator">=</span> chardet<span class="token punctuation">.</span>detect<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'encoding'</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> source_encoding <span class="token operator">!=</span> <span class="token string">'utf-8'</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> source_encoding<span class="token punctuation">,</span> filename        content <span class="token operator">=</span> content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span>source_encoding<span class="token punctuation">,</span> <span class="token string">'ignore'</span><span class="token punctuation">)</span> <span class="token comment">#.encode(source_encoding)</span>        codecs<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span>target_encoding<span class="token punctuation">)</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> root<span class="token punctuation">,</span> dirs<span class="token punctuation">,</span> files <span class="token keyword">in</span> os<span class="token punctuation">.</span>walk<span class="token punctuation">(</span>convertdir<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> f <span class="token keyword">in</span> files<span class="token punctuation">:</span>            <span class="token keyword">for</span> filetype <span class="token keyword">in</span> convertfiletypes<span class="token punctuation">:</span>                <span class="token keyword">if</span> f<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>endswith<span class="token punctuation">(</span>filetype<span class="token punctuation">)</span><span class="token punctuation">:</span>                    filename <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>root<span class="token punctuation">,</span> f<span class="token punctuation">)</span>                    <span class="token keyword">try</span><span class="token punctuation">:</span>                        convert_encoding<span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span>                    <span class="token keyword">except</span> Exception<span class="token punctuation">,</span> e<span class="token punctuation">:</span>                        <span class="token keyword">print</span> filename<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> codecs<span class="token keyword">import</span> os<span class="token keyword">import</span> sys<span class="token keyword">import</span> shutil<span class="token keyword">import</span> re<span class="token keyword">import</span> chardetconvertdir <span class="token operator">=</span> <span class="token string">"E:\\code\\GitCode\\test-demo\\src\\main\\java"</span>convertfiletypes <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token string">".java"</span><span class="token punctuation">,</span>  <span class="token string">".h"</span><span class="token punctuation">,</span>  <span class="token string">".hpp"</span>  <span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">convert_encoding</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> target_encoding<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># Backup the origin file.</span>    <span class="token comment"># convert file from the source encoding to target encoding</span>    content <span class="token operator">=</span> codecs<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    source_encoding <span class="token operator">=</span> chardet<span class="token punctuation">.</span>detect<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'encoding'</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> source_encoding <span class="token operator">!=</span> <span class="token string">'utf-8'</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>source_encoding<span class="token punctuation">,</span> filename<span class="token punctuation">)</span>        content <span class="token operator">=</span> content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span>source_encoding<span class="token punctuation">,</span> <span class="token string">'ignore'</span><span class="token punctuation">)</span> <span class="token comment">#.encode(source_encoding)</span>        codecs<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span>target_encoding<span class="token punctuation">)</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> root<span class="token punctuation">,</span> dirs<span class="token punctuation">,</span> files <span class="token keyword">in</span> os<span class="token punctuation">.</span>walk<span class="token punctuation">(</span>convertdir<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> f <span class="token keyword">in</span> files<span class="token punctuation">:</span>            <span class="token keyword">for</span> filetype <span class="token keyword">in</span> convertfiletypes<span class="token punctuation">:</span>                <span class="token keyword">if</span> f<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>endswith<span class="token punctuation">(</span>filetype<span class="token punctuation">)</span><span class="token punctuation">:</span>                    filename <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>root<span class="token punctuation">,</span> f<span class="token punctuation">)</span>                    <span class="token keyword">try</span><span class="token punctuation">:</span>                        convert_encoding<span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span>                    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>                        <span class="token keyword">print</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span>   </code></pre><h4 id="问题处理"><a href="#问题处理" class="headerlink" title="问题处理"></a>问题处理</h4><p>若报错：</p><blockquote><p>'gbk' codec can't decode byte 0xae in position 758: illegal multibyte sequence</p></blockquote><p>此种错误，可能是要处理的字符串本身不是 gbk 编码，但是却以 gbk 编码去解码 。比如，字符串本身是 utf-8 的，但是却用 gbk 去解码 utf-8 的字符串，所以结果不用说，则必然出错。</p><p>通过查阅资料，在读取文本的时候加入参数‘b’, 不会提示错误，通过输出读取的数据显示。</p><pre class="language-python" data-language="python"><code class="language-python">content <span class="token operator">=</span> codecs<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;使用编译器若遇到文件编码问题，当文件中有中文时，则会出现乱码，会因为编码问题导致各种错误。&lt;/p&gt;
&lt;p&gt;所以写了个 python 脚本来检测原文件编码并转换为目标编码，以下代码以目标编码为 utf-8 为例：&lt;/p&gt;
&lt;p&gt;需要安装 chardet，详情：&lt;a href=&quot;https://pypi.python.org/pypi/chardet&quot;&gt;https://pypi.python.org/pypi/chardet&lt;/a&gt; &lt;/p&gt;</summary>
    
    
    
    <category term="Python" scheme="https://jueee.github.io/categories/Python/"/>
    
    
    <category term="Python" scheme="https://jueee.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 博客添加 Live2D 看板娘</title>
    <link href="https://jueee.github.io/2020/10/2020-10-09-Hexo%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0Live2D%E7%9C%8B%E6%9D%BF%E5%A8%98/"/>
    <id>https://jueee.github.io/2020/10/2020-10-09-Hexo%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0Live2D%E7%9C%8B%E6%9D%BF%E5%A8%98/</id>
    <published>2020-10-09T00:00:00.000Z</published>
    <updated>2020-10-10T01:36:48.078Z</updated>
    
    <content type="html"><![CDATA[<h3 id="资料汇总"><a href="#资料汇总" class="headerlink" title="资料汇总"></a>资料汇总</h3><ul><li>GitHub：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0VZSE4vaGV4by1oZWxwZXItbGl2ZTJk">https://github.com/EYHN/hexo-helper-live2d<i class="fa fa-external-link-alt"></i></span></li><li> 配置说明：<span class="exturl" data-url="aHR0cHM6Ly9sMmR3aWRnZXQuanMub3JnL2RvY3MvY2xhc3Mvc3JjL2luZGV4LmpzfkwyRHdpZGdldC5odG1s">https://l2dwidget.js.org/docs/class/src/index.js~L2Dwidget.html<i class="fa fa-external-link-alt"></i></span></li><li> 模型仓库：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3hpYXpleXUvbGl2ZTJkLXdpZGdldC1tb2RlbHM=">https://github.com/xiazeyu/live2d-widget-models<i class="fa fa-external-link-alt"></i></span></li><li> 模型预览：<span class="exturl" data-url="aHR0cHM6Ly9odWFqaTgudG9wL3Bvc3QvbGl2ZTJkLXBsdWdpbi0yLjAv">https://huaji8.top/post/live2d-plugin-2.0/<i class="fa fa-external-link-alt"></i></span></li></ul><a id="more"></a><h3 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h3><p>首先，安装 npm 包：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save hexo-helper-live2d</code></pre><p>然后在 hexo 的配置文件<code>_config.yml</code> 中添加如下配置，详细配置可以参考<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0VZSE4vaGV4by1oZWxwZXItbGl2ZTJkL2Jsb2IvbWFzdGVyL1JFQURNRS56aC1DTi5tZA==">文档<i class="fa fa-external-link-alt"></i></span>：</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">live2d</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">scriptFrom</span><span class="token punctuation">:</span> local  <span class="token key atrule">pluginRootPath</span><span class="token punctuation">:</span> live2dw/  <span class="token key atrule">pluginJsPath</span><span class="token punctuation">:</span> lib/  <span class="token key atrule">pluginModelPath</span><span class="token punctuation">:</span> assets/  <span class="token key atrule">tagMode</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">debug</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">model</span><span class="token punctuation">:</span>    <span class="token key atrule">use</span><span class="token punctuation">:</span> live2d<span class="token punctuation">-</span>widget<span class="token punctuation">-</span>model<span class="token punctuation">-</span>wanko  <span class="token key atrule">display</span><span class="token punctuation">:</span>    <span class="token key atrule">position</span><span class="token punctuation">:</span> right    <span class="token key atrule">width</span><span class="token punctuation">:</span> <span class="token number">150</span>    <span class="token key atrule">height</span><span class="token punctuation">:</span> <span class="token number">300</span>  <span class="token key atrule">mobile</span><span class="token punctuation">:</span>    <span class="token key atrule">show</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">react</span><span class="token punctuation">:</span>    <span class="token key atrule">opacity</span><span class="token punctuation">:</span> <span class="token number">0.7</span></code></pre><p>然后下载模型，模型名称可以到<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3hpYXpleXUvbGl2ZTJkLXdpZGdldC1tb2RlbHM=">这里<i class="fa fa-external-link-alt"></i></span>参考，一些模型的预览可以在<span class="exturl" data-url="aHR0cHM6Ly9odWFqaTgudG9wL3Bvc3QvbGl2ZTJkLXBsdWdpbi0yLjAv">这里<i class="fa fa-external-link-alt"></i></span>。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> live2d-widget-model-shizuku</code></pre><h3 id="效果预览"><a href="#效果预览" class="headerlink" title="效果预览"></a>效果预览</h3><p><img src="/images/2020/10/1602240328748.png" alt="1602240328748" loading="lazy"></p><h3 id="配置解释"><a href="#配置解释" class="headerlink" title="配置解释"></a>配置解释</h3><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Live2D</span><span class="token comment">## https://github.com/EYHN/hexo-helper-live2d</span><span class="token comment">## https://l2dwidget.js.org/docs/class/src/index.js~L2Dwidget.html#instance-method-init</span><span class="token key atrule">live2d</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment">#enable: false</span>  <span class="token key atrule">scriptFrom</span><span class="token punctuation">:</span> local <span class="token comment"># 默认</span>  <span class="token key atrule">pluginRootPath</span><span class="token punctuation">:</span> live2dw/ <span class="token comment"># 插件在站点上的根目录(相对路径)</span>  <span class="token key atrule">pluginJsPath</span><span class="token punctuation">:</span> lib/ <span class="token comment"># 脚本文件相对与插件根目录路径</span>  <span class="token key atrule">pluginModelPath</span><span class="token punctuation">:</span> assets/ <span class="token comment"># 模型文件相对与插件根目录路径</span>  <span class="token comment"># scriptFrom: jsdelivr # jsdelivr CDN</span>  <span class="token comment"># scriptFrom: unpkg # unpkg CDN</span>  <span class="token comment"># scriptFrom: https://cdn.jsdelivr.net/npm/live2d-widget@3.x/lib/L2Dwidget.min.js # 你的自定义 url</span>  <span class="token key atrule">tagMode</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 标签模式, 是否仅替换 live2d tag标签而非插入到所有页面中</span>  <span class="token key atrule">debug</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 调试, 是否在控制台输出日志</span>  <span class="token key atrule">model</span><span class="token punctuation">:</span>    <span class="token key atrule">use</span><span class="token punctuation">:</span> live2d<span class="token punctuation">-</span>widget<span class="token punctuation">-</span>model<span class="token punctuation">-</span>hibiki    <span class="token comment"># use: live2d-widget-model-wanko # npm-module package name</span>    <span class="token comment"># use: wanko # 博客根目录/live2d_models/ 下的目录名</span>    <span class="token comment"># use: ./wives/wanko # 相对于博客根目录的路径</span>    <span class="token comment"># use: https://cdn.jsdelivr.net/npm/live2d-widget-model-wanko@1.0.5/assets/wanko.model.json # 你的自定义 url</span>  <span class="token key atrule">display</span><span class="token punctuation">:</span>    <span class="token key atrule">position</span><span class="token punctuation">:</span> right    <span class="token key atrule">width</span><span class="token punctuation">:</span> <span class="token number">145</span>    <span class="token key atrule">height</span><span class="token punctuation">:</span> <span class="token number">315</span>  <span class="token key atrule">mobile</span><span class="token punctuation">:</span>    <span class="token key atrule">show</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 是否在移动设备上显示</span>    <span class="token key atrule">scale</span><span class="token punctuation">:</span> <span class="token number">0.5</span> <span class="token comment"># 移动设备上的缩放</span>  <span class="token key atrule">react</span><span class="token punctuation">:</span>    <span class="token key atrule">opacityDefault</span><span class="token punctuation">:</span> <span class="token number">0.7</span>    <span class="token key atrule">opacityOnHover</span><span class="token punctuation">:</span> <span class="token number">0.8</span></code></pre><h3 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h3><h4 id="position-left-不生效"><a href="#position-left-不生效" class="headerlink" title="position: left 不生效"></a>position: left 不生效</h4><blockquote><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0VZSE4vaGV4by1oZWxwZXItbGl2ZTJkL2lzc3Vlcy8xMDA=">https://github.com/EYHN/hexo-helper-live2d/issues/100<i class="fa fa-external-link-alt"></i></span></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;资料汇总&quot;&gt;&lt;a href=&quot;#资料汇总&quot; class=&quot;headerlink&quot; title=&quot;资料汇总&quot;&gt;&lt;/a&gt;资料汇总&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;GitHub：&lt;a href=&quot;https://github.com/EYHN/hexo-helper-live2d&quot;&gt;https://github.com/EYHN/hexo-helper-live2d&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; 配置说明：&lt;a href=&quot;https://l2dwidget.js.org/docs/class/src/index.js~L2Dwidget.html&quot;&gt;https://l2dwidget.js.org/docs/class/src/index.js~L2Dwidget.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; 模型仓库：&lt;a href=&quot;https://github.com/xiazeyu/live2d-widget-models&quot;&gt;https://github.com/xiazeyu/live2d-widget-models&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; 模型预览：&lt;a href=&quot;https://huaji8.top/post/live2d-plugin-2.0/&quot;&gt;https://huaji8.top/post/live2d-plugin-2.0/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Blog" scheme="https://jueee.github.io/categories/Blog/"/>
    
    
    <category term="Blog" scheme="https://jueee.github.io/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>Neo4j 的安装和基本使用</title>
    <link href="https://jueee.github.io/2020/10/2020-10-08-Neo4j%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>https://jueee.github.io/2020/10/2020-10-08-Neo4j%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</id>
    <published>2020-10-08T00:00:00.000Z</published>
    <updated>2020-10-26T02:27:56.038Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Neo4j-介绍"><a href="#Neo4j-介绍" class="headerlink" title="Neo4j 介绍"></a>Neo4j 介绍</h3><p>Neo4j 是一个世界领先的开源图形数据库。 </p><p>图形数据库是以图形结构的形式存储数据的数据库。 它以节点，关系和属性的形式存储应用程序的数据。 正如 RDBMS 以表的 “行，列” 的形式存储数据，GDBMS 以 “图形” 的形式存储数据。</p><p>官网：<span class="exturl" data-url="aHR0cHM6Ly9uZW80ai5jb20v">https://neo4j.com/<i class="fa fa-external-link-alt"></i></span></p><a id="more"></a><h3 id="Neo4j-安装"><a href="#Neo4j-安装" class="headerlink" title="Neo4j 安装"></a>Neo4j 安装</h3><p>下载地址：<span class="exturl" data-url="aHR0cHM6Ly9uZW80ai5jb20vZG93bmxvYWQtY2VudGVyLyNyZWxlYXNlcw==">https://neo4j.com/download-center/#releases<i class="fa fa-external-link-alt"></i></span></p><p>安装：</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">wget</span> http://dist.neo4j.org/neo4j-community-3.5.13-unix.tar.gz$ <span class="token function">tar</span> -xvf neo4j-community-3.5.13-unix.tar.gz$ <span class="token function">mv</span> neo4j-community-3.5.13/ neo4j-3.5.13</code></pre><p>启动：</p><pre class="language-bash" data-language="bash"><code class="language-bash">~/neo4j-3.5.13/bin$ ./neo4j start</code></pre><p>neo4j 支持的参数如下：</p><pre class="language-none"><code class="language-none">$ ./neo4jUsage: neo4j { console | start | stop | restart | status | version }</code></pre><h3 id="Neo4j-配置"><a href="#Neo4j-配置" class="headerlink" title="Neo4j 配置"></a>Neo4j 配置</h3><p>配置文件位于：<code>neo4j-3.5.13/conf/neo4j.conf</code></p><h4 id="远程访问"><a href="#远程访问" class="headerlink" title="远程访问"></a>远程访问</h4><p>修改 54 行，去掉改行的 #，可以远程通过 ip 访问 neo4j 数据库</p><pre class="language-none"><code class="language-none">dbms.connectors.default_listen_address=0.0.0.0</code></pre><h3 id="初始化密码"><a href="#初始化密码" class="headerlink" title="初始化密码"></a>初始化密码</h3><h4 id="Web-浏览器修改密码"><a href="#Web-浏览器修改密码" class="headerlink" title="Web 浏览器修改密码"></a>Web 浏览器修改密码</h4><p>Web 浏览器访问：<span class="exturl" data-url="aHR0cDovL2lwOjc0NzQv">http://IP:7474/<i class="fa fa-external-link-alt"></i></span></p><p>连接 URL 为 ：bolt://IP:7687，初始用户名、密码为 neo4j，如下图所示：</p><p><img src="/images/2020/10/1595919253202.png" alt="1595919253202" loading="lazy"></p><p>初始化登录成功后，会要求重置 neo4j 密码，修改并确认新密码。</p><p><img src="/images/2020/10/1595919258228.png" alt="1595919258228" loading="lazy"></p><h4 id="命令行更改密码"><a href="#命令行更改密码" class="headerlink" title="命令行更改密码"></a>命令行更改密码</h4><ol><li>进入 neo4j 安装目录， 并进入 bin 目录；</li><li>运行 <code>./cypher-shell</code> 命令， 输入用户名，密码（初始默认用户名和密码为 neo4j）</li><li>输入命令: <code>CALL dbms.security.changePassword('123456');</code> 输入命令  <code>:exit;</code> 退出</li></ol><p>此时，neo4j 即可连接成功。</p><h3 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h3><p>节点总数：</p><pre class="language-cypher" data-language="cypher"><code class="language-cypher">neo4j<span class="token operator">&gt;</span> <span class="token keyword">match</span> <span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">count</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>关系总数：</p><pre class="language-cypher" data-language="cypher"><code class="language-cypher">neo4j<span class="token operator">&gt;</span> <span class="token keyword">match</span> p<span class="token operator">=</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token operator">-&gt;</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">count</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;Neo4j-介绍&quot;&gt;&lt;a href=&quot;#Neo4j-介绍&quot; class=&quot;headerlink&quot; title=&quot;Neo4j 介绍&quot;&gt;&lt;/a&gt;Neo4j 介绍&lt;/h3&gt;&lt;p&gt;Neo4j 是一个世界领先的开源图形数据库。 &lt;/p&gt;
&lt;p&gt;图形数据库是以图形结构的形式存储数据的数据库。 它以节点，关系和属性的形式存储应用程序的数据。 正如 RDBMS 以表的 “行，列” 的形式存储数据，GDBMS 以 “图形” 的形式存储数据。&lt;/p&gt;
&lt;p&gt;官网：&lt;a href=&quot;https://neo4j.com/&quot;&gt;https://neo4j.com/&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://jueee.github.io/categories/Linux/"/>
    
    <category term="Neo4j" scheme="https://jueee.github.io/categories/Neo4j/"/>
    
    <category term="软件" scheme="https://jueee.github.io/categories/Linux/%E8%BD%AF%E4%BB%B6/"/>
    
    
    <category term="Neo4j" scheme="https://jueee.github.io/tags/Neo4j/"/>
    
  </entry>
  
  <entry>
    <title>FastDFS 容器化安装实践</title>
    <link href="https://jueee.github.io/2020/09/2020-09-24-FastDFS%E5%AE%B9%E5%99%A8%E5%8C%96%E5%AE%89%E8%A3%85%E5%AE%9E%E8%B7%B5/"/>
    <id>https://jueee.github.io/2020/09/2020-09-24-FastDFS%E5%AE%B9%E5%99%A8%E5%8C%96%E5%AE%89%E8%A3%85%E5%AE%9E%E8%B7%B5/</id>
    <published>2020-09-24T00:00:00.000Z</published>
    <updated>2020-09-24T10:56:48.043Z</updated>
    
    <content type="html"><![CDATA[<h3 id="FastDFS-容器化安装"><a href="#FastDFS-容器化安装" class="headerlink" title="FastDFS 容器化安装"></a>FastDFS 容器化安装</h3><h4 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h4><p>新增 .env 文件如下：</p><pre class="language-none"><code class="language-none">HOSTNAME_COMMAND=xxx.xxx.xxx.xxx</code></pre><p>其中，<code>xxx.xxx.xxx.xxx&nbsp;</code>为 服务器 IP 地址。</p><h4 id="nginx-conf-配置"><a href="#nginx-conf-配置" class="headerlink" title="nginx.conf&nbsp;配置"></a>nginx.conf&nbsp;配置</h4><p><code>nginx.conf</code> 文件增加配置如下：</p><pre class="language-none"><code class="language-none">location /group1/M00 {root /fastdfs/storage/data;ngx_fastdfs_module;}</code></pre><h4 id="docker-compose"><a href="#docker-compose" class="headerlink" title="docker-compose"></a>docker-compose</h4><p><code>docker-compose.yml</code> 文件如下：</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'2'</span><span class="token key atrule">services</span><span class="token punctuation">:</span>    <span class="token key atrule">fastdfs-tracker</span><span class="token punctuation">:</span>        <span class="token key atrule">hostname</span><span class="token punctuation">:</span> fastdfs<span class="token punctuation">-</span>tracker        <span class="token key atrule">container_name</span><span class="token punctuation">:</span> fastdfs<span class="token punctuation">-</span>tracker        <span class="token key atrule">image</span><span class="token punctuation">:</span> season/fastdfs<span class="token punctuation">:</span><span class="token number">1.2</span>        <span class="token key atrule">network_mode</span><span class="token punctuation">:</span> <span class="token string">"host"</span>        <span class="token key atrule">command</span><span class="token punctuation">:</span> tracker        <span class="token key atrule">volumes</span><span class="token punctuation">:</span>          <span class="token punctuation">-</span> ./data/tracker_data<span class="token punctuation">:</span>/fastdfs/tracker/data    <span class="token key atrule">fastdfs-storage</span><span class="token punctuation">:</span>        <span class="token key atrule">hostname</span><span class="token punctuation">:</span> fastdfs<span class="token punctuation">-</span>storage        <span class="token key atrule">container_name</span><span class="token punctuation">:</span> fastdfs<span class="token punctuation">-</span>storage        <span class="token key atrule">image</span><span class="token punctuation">:</span> season/fastdfs<span class="token punctuation">:</span><span class="token number">1.2</span>        <span class="token key atrule">network_mode</span><span class="token punctuation">:</span> <span class="token string">"host"</span>        <span class="token key atrule">volumes</span><span class="token punctuation">:</span>          <span class="token punctuation">-</span> ./data/storage_data<span class="token punctuation">:</span>/fastdfs/storage/data          <span class="token punctuation">-</span> ./data/store_path<span class="token punctuation">:</span>/fastdfs/store_path        <span class="token key atrule">environment</span><span class="token punctuation">:</span>          <span class="token punctuation">-</span> TRACKER_SERVER=$<span class="token punctuation">{</span>HOSTNAME_COMMAND<span class="token punctuation">}</span><span class="token punctuation">:</span><span class="token number">22122</span>        <span class="token key atrule">command</span><span class="token punctuation">:</span> storage        <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>          <span class="token punctuation">-</span> fastdfs<span class="token punctuation">-</span>tracker    <span class="token key atrule">fastdfs-nginx</span><span class="token punctuation">:</span>        <span class="token key atrule">hostname</span><span class="token punctuation">:</span> fastdfs<span class="token punctuation">-</span>nginx        <span class="token key atrule">container_name</span><span class="token punctuation">:</span> fastdfs<span class="token punctuation">-</span>nginx        <span class="token key atrule">image</span><span class="token punctuation">:</span> season/fastdfs<span class="token punctuation">:</span><span class="token number">1.2</span>        <span class="token key atrule">network_mode</span><span class="token punctuation">:</span> <span class="token string">"host"</span>        <span class="token key atrule">volumes</span><span class="token punctuation">:</span>          <span class="token punctuation">-</span> ./nginx.conf<span class="token punctuation">:</span>/etc/nginx/conf/nginx.conf          <span class="token punctuation">-</span> ./data/store_path<span class="token punctuation">:</span>/fastdfs/store_path        <span class="token key atrule">environment</span><span class="token punctuation">:</span>          <span class="token punctuation">-</span> TRACKER_SERVER=$<span class="token punctuation">{</span>HOSTNAME_COMMAND<span class="token punctuation">}</span><span class="token punctuation">:</span><span class="token number">22122</span>        <span class="token key atrule">command</span><span class="token punctuation">:</span> nginx</code></pre><p>需要注意：</p><ul><li>network_mode 必须是 host, 原因是当上传文件时，tracker 会把 storage 的 IP 和端口发给 client，如果是 bridge 模式，则发送的是内网 IP，client 无法访问到。</li><li>image 采用 season/fastdfs:1.2 ，不要用 lastest, 因为 lastest 不包含 nginx 服务，其他 fasdfs 镜像均没有 season 的精简。</li></ul><h3 id="测试-FastDFS"><a href="#测试-FastDFS" class="headerlink" title="测试 FastDFS"></a>测试 FastDFS</h3><p>命令行测试上传</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ fdfs_upload_file /etc/fdfs/client.conf /home/ant/test group1/M00/00/00/CqD3YF3kwS-ACYbMAAAAHDDhFHI6820520</code></pre><p>命令行测试下载：</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ fdfs_download_file /etc/fdfs/client.conf group1/M00/00/00/CqD3YF3kwS-ACYbMAAAAHDDhFHI6820520</code></pre><p>http 测试下载：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> http://xxx.xxx.xxx.xxx/group1/M00/00/00/CmmIP19sbZ6ABzkBAAAXTnaiWqo2684096?filename<span class="token operator">=</span>testfile</code></pre><h3 id="访问-FastDFS"><a href="#访问-FastDFS" class="headerlink" title="访问 FastDFS"></a>访问 FastDFS</h3><p>其他容器如需按照域名访问 FastDFS，可增加配置：</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">web-admin</span><span class="token punctuation">:</span>   <span class="token key atrule">container_name</span><span class="token punctuation">:</span> web<span class="token punctuation">-</span>admin   <span class="token key atrule">extra_hosts</span><span class="token punctuation">:</span>       <span class="token punctuation">-</span> <span class="token string">"fastdfs.manti-infra.svc:${HOSTNAME_COMMAND}"</span></code></pre><h3 id="问题处理"><a href="#问题处理" class="headerlink" title="问题处理"></a>问题处理</h3><h4 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h4><p>报错问题：</p><pre class="language-none"><code class="language-none">[error] 13#0: *1 open() "/etc/nginx/html/group1/M00/00/00/CmmIP19sbZ6ABzkBAAAXTnaiWqo2684096" failed (2: No such file or directory)</code></pre><p>修复：修改 nginx.conf 中的 location 配置为：</p><pre class="language-none"><code class="language-none">location/group1/M00/ {alias /fastdfs/store_path/data;ngx_fastdfs_module;}</code></pre><h4 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h4><p>报错问题：</p><pre class="language-none"><code class="language-none">ERROR - file: ../common/fdfs_global.c, line:52, the format of filename"group1/M00/00/00/wKgAA1cLh12AI0kfAAAADzbdjmQ50_big.html"is invalid</code></pre><p>原因：nginx 的 fdfs 的 MOD 里面默认没有开启 url_have_group_name</p><p>修复：开启 mod_fastdfs.conf 文件中的 url_have_group_name 选项，后重启 nginx</p><h4 id="问题三"><a href="#问题三" class="headerlink" title="问题三"></a>问题三</h4><pre class="language-none"><code class="language-none">/usr/src/fastdfs-nginx-module/src/common.c:21:25:致命错误：fdfs_define.h：没有那个文件或目录#include "fdfs_define.h" 编译中断。</code></pre><p>原因：编译安装 nginx 的 fastdfs 插件的头文件没有找到，由于编译 nginx 时候系统会到／usr/local/include，而编译安装 fastdfs-nginx-module 时则默认保存在了 /usr/include 目录。</p><p>修复：ln -s /usr/include/fast* /usr/local/include/</p><h4 id="问题四"><a href="#问题四" class="headerlink" title="问题四"></a>问题四</h4><p>Nginx 启动后 error.log 日志报错</p><pre class="language-none"><code class="language-none">ERROR - file:../storage/trunk_mgr/trunk_shared.c, line: 177, "No such file ordirectory" can't be accessed, error info: /data/fastdfs</code></pre><p>原因：nginx 的 fdfs 插件没有在 /etc/fdfs 目录中找到 http.conf 和 mime.types。</p><p>修复：复制或者创建对应文件的软连接<br>cp/usr/local/FastDFS/conf/http.conf /etc/fdfs/<br>cp/usr/local/FastDFS/conf/mime.types /etc/fdfs/</p><h4 id="问题五"><a href="#问题五" class="headerlink" title="问题五"></a>问题五</h4><p>页面访问动态缩略图返回 415</p><p>原因：</p><ul><li>首先需要排除文件类型的问题，image_filter 只支持 jpg、git 和 png 三种格式的图片文件，调用其他格式的 图片文件 会返回 415。</li><li>其次要确认设置的 image_filter 缓存是否小于上传的图片大小，如果小于同样会报 415 错误。</li></ul><p>如果排除以上两种可能性，那么出现的问题应该是没有在 Nginx 页面的 DocumentRoot 目录创建 FastDFS 数据存储的软连接。</p><p>修复：执行下列命令创建软连接：</p><pre class="language-none"><code class="language-none"># mkdir -pv/usr/local/nginx/html/group1# ln -s /data/fastdfs_store/data/usr/local/nginx/html/group1/M00</code></pre><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20veWxvdmVkL3AvMTI2NDk1NjkuaHRtbA==">https://www.cnblogs.com/yloved/p/12649569.html<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYWxpeXVuLmNvbS9hcnRpY2xlLzU0NTAxNg==">https://developer.aliyun.com/article/545016<i class="fa fa-external-link-alt"></i></span></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;FastDFS-容器化安装&quot;&gt;&lt;a href=&quot;#FastDFS-容器化安装&quot; class=&quot;headerlink&quot; title=&quot;FastDFS 容器化安装&quot;&gt;&lt;/a&gt;FastDFS 容器化安装&lt;/h3&gt;&lt;h4 id=&quot;环境变量&quot;&gt;&lt;a href=&quot;#环境变量&quot;</summary>
      
    
    
    
    <category term="Linux" scheme="https://jueee.github.io/categories/Linux/"/>
    
    <category term="软件" scheme="https://jueee.github.io/categories/Linux/%E8%BD%AF%E4%BB%B6/"/>
    
    <category term="Docker" scheme="https://jueee.github.io/categories/Docker/"/>
    
    
    <category term="Docker" scheme="https://jueee.github.io/tags/Docker/"/>
    
    <category term="FastDFS" scheme="https://jueee.github.io/tags/FastDFS/"/>
    
  </entry>
  
</feed>
