<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小决的专栏</title>
  
  <subtitle>进一寸有一寸的欢喜</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://jueee.github.io/"/>
  <updated>2020-08-27T10:30:28.386Z</updated>
  <id>https://jueee.github.io/</id>
  
  <author>
    <name>小决</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java 字节码操纵框架 ASM</title>
    <link href="https://jueee.github.io/2020/08/2020-08-27-Java%E5%AD%97%E8%8A%82%E7%A0%81%E6%93%8D%E7%BA%B5%E6%A1%86%E6%9E%B6ASM/"/>
    <id>https://jueee.github.io/2020/08/2020-08-27-Java%E5%AD%97%E8%8A%82%E7%A0%81%E6%93%8D%E7%BA%B5%E6%A1%86%E6%9E%B6ASM/</id>
    <published>2020-08-27T00:00:00.000Z</published>
    <updated>2020-08-27T10:30:28.386Z</updated>
    
    <content type="html"><![CDATA[<h3 id="ASM-介绍"><a href="#ASM-介绍" class="headerlink" title="ASM 介绍"></a>ASM 介绍</h3><p>ASM 是一个 java 字节码操纵框架，它能被用来动态生成类或者增强既有类的功能。</p><p>ASM 可以直接产生二进制 class 文件，也可以在类被加载入 Java 虚拟机之前动态改变类行为。Java class 被存储在严格格式定义的 .class 文件里，这些类文件拥有足够的元数据来解析类中的所有元素：类名称、方法、属性以及 Java 字节码（指令）。ASM 从类文件中读入信息后，能够改变类行为，分析类信息，甚至能够根据用户要求生成新类。</p><a id="more"></a><p>官网：<span class="exturl" data-url="aHR0cHM6Ly9hc20ub3cyLmlvLw==">https://asm.ow2.io/<i class="fa fa-external-link-alt"></i></span></p><p>文档：<span class="exturl" data-url="aHR0cHM6Ly9hc20ub3cyLmlvL2phdmFkb2Mvb3ZlcnZpZXctc3VtbWFyeS5odG1s">https://asm.ow2.io/javadoc/overview-summary.html<i class="fa fa-external-link-alt"></i></span></p><p>下载：<span class="exturl" data-url="aHR0cHM6Ly9tdm5yZXBvc2l0b3J5LmNvbS9hcnRpZmFjdC9vcmcub3cyLmFzbS9hc20=">https://mvnrepository.com/artifact/org.ow2.asm/asm<i class="fa fa-external-link-alt"></i></span></p><p>使用 ASM 框架需要导入 asm 的 jar 包：</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.ow2.asm<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>asm<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>8.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></code></pre><p>ASM 框架中的核心类有以下几个：</p><ul><li><strong>ClassReader</strong>：该类用来解析编译过的 class 字节码文件。</li><li><strong>ClassWriter</strong>：该类用来重新构建编译后的类，比如说修改类名、属性以及方法，甚至可以生成新的类的字节码文件。</li><li><strong>ClassAdapter</strong>：该类也实现了 ClassVisitor 接口，它将对它的方法调用委托给另一个 ClassVisitor 对象。</li></ul><h3 id="ASM动态操作方法"><a href="#ASM动态操作方法" class="headerlink" title="ASM动态操作方法"></a>ASM 动态操作方法</h3><p>示例代码 <code>com.demo.Foo</code>：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>demo</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"test changed method name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">changeMethodContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"test changed method"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><code>com.asm.MethodChangeClassAdapter</code>：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>asm</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>objectweb<span class="token punctuation">.</span>asm<span class="token punctuation">.</span></span><span class="token class-name">ClassVisitor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>objectweb<span class="token punctuation">.</span>asm<span class="token punctuation">.</span></span><span class="token class-name">MethodVisitor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>objectweb<span class="token punctuation">.</span>asm<span class="token punctuation">.</span></span><span class="token class-name">Opcodes</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MethodChangeClassAdapter</span> <span class="token keyword">extends</span> <span class="token class-name">ClassVisitor</span> <span class="token keyword">implements</span> <span class="token class-name">Opcodes</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">MethodChangeClassAdapter</span><span class="token punctuation">(</span><span class="token class-name">ClassVisitor</span> cv<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token class-name">Opcodes</span><span class="token punctuation">.</span>ASM4<span class="token punctuation">,</span> cv<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visit</span><span class="token punctuation">(</span><span class="token keyword">int</span> version<span class="token punctuation">,</span> <span class="token keyword">int</span> access<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> signature<span class="token punctuation">,</span> <span class="token class-name">String</span> superName<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> interfaces<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cv <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            cv<span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span>version<span class="token punctuation">,</span> access<span class="token punctuation">,</span> name<span class="token punctuation">,</span> signature<span class="token punctuation">,</span> superName<span class="token punctuation">,</span> interfaces<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">MethodVisitor</span> <span class="token function">visitMethod</span><span class="token punctuation">(</span><span class="token keyword">int</span> access<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> desc<span class="token punctuation">,</span> <span class="token class-name">String</span> signature<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> exceptions<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 当方法名为execute时，修改方法名为execute1</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cv <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token string">"execute"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> cv<span class="token punctuation">.</span><span class="token function">visitMethod</span><span class="token punctuation">(</span>access<span class="token punctuation">,</span> name <span class="token operator">+</span> <span class="token string">"1"</span><span class="token punctuation">,</span> desc<span class="token punctuation">,</span> signature<span class="token punctuation">,</span> exceptions<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 此处的changeMethodContent即为需要修改的方法 ，修改方法內容</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"changeMethodContent"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 先得到原始的方法</span>            <span class="token class-name">MethodVisitor</span> mv <span class="token operator">=</span> cv<span class="token punctuation">.</span><span class="token function">visitMethod</span><span class="token punctuation">(</span>access<span class="token punctuation">,</span> name<span class="token punctuation">,</span> desc<span class="token punctuation">,</span> signature<span class="token punctuation">,</span> exceptions<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">MethodVisitor</span> newMethod <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token comment">// 访问需要修改的方法</span>            newMethod <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AsmMethodVisit</span><span class="token punctuation">(</span>mv<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> newMethod<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cv <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> cv<span class="token punctuation">.</span><span class="token function">visitMethod</span><span class="token punctuation">(</span>access<span class="token punctuation">,</span> name<span class="token punctuation">,</span> desc<span class="token punctuation">,</span> signature<span class="token punctuation">,</span> exceptions<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><code>com.asm.AsmMethodVisit</code>：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>asm</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>objectweb<span class="token punctuation">.</span>asm<span class="token punctuation">.</span></span><span class="token class-name">MethodVisitor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>objectweb<span class="token punctuation">.</span>asm<span class="token punctuation">.</span></span><span class="token class-name">Opcodes</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AsmMethodVisit</span> <span class="token keyword">extends</span> <span class="token class-name">MethodVisitor</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">AsmMethodVisit</span><span class="token punctuation">(</span><span class="token class-name">MethodVisitor</span> mv<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token class-name">Opcodes</span><span class="token punctuation">.</span>ASM4<span class="token punctuation">,</span> mv<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visitMethodInsn</span><span class="token punctuation">(</span><span class="token keyword">int</span> opcode<span class="token punctuation">,</span> <span class="token class-name">String</span> owner<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> desc<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">visitMethodInsn</span><span class="token punctuation">(</span>opcode<span class="token punctuation">,</span> owner<span class="token punctuation">,</span> name<span class="token punctuation">,</span> desc<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visitCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 此方法在访问方法的头部时被访问到，仅被访问一次</span>        <span class="token comment">// 此处可插入新的指令</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">visitCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visitInsn</span><span class="token punctuation">(</span><span class="token keyword">int</span> opcode<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 此方法可以获取方法中每一条指令的操作类型，被访问多次</span>        <span class="token comment">// 如应在方法结尾处添加新指令，则应判断：</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>opcode <span class="token operator">==</span> <span class="token class-name">Opcodes</span><span class="token punctuation">.</span>RETURN<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// pushes the 'out' field (of type PrintStream) of the System class</span>            mv<span class="token punctuation">.</span><span class="token function">visitFieldInsn</span><span class="token punctuation">(</span><span class="token class-name">Opcodes</span><span class="token punctuation">.</span>GETSTATIC<span class="token punctuation">,</span> <span class="token string">"java/lang/System"</span><span class="token punctuation">,</span> <span class="token string">"out"</span><span class="token punctuation">,</span> <span class="token string">"Ljava/io/PrintStream;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// pushes the "Hello World!" String constant</span>            mv<span class="token punctuation">.</span><span class="token function">visitLdcInsn</span><span class="token punctuation">(</span><span class="token string">"this is a modify method!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// invokes the 'println' method (defined in the PrintStream class)</span>            mv<span class="token punctuation">.</span><span class="token function">visitMethodInsn</span><span class="token punctuation">(</span><span class="token class-name">Opcodes</span><span class="token punctuation">.</span>INVOKEVIRTUAL<span class="token punctuation">,</span> <span class="token string">"java/io/PrintStream"</span><span class="token punctuation">,</span> <span class="token string">"println"</span><span class="token punctuation">,</span> <span class="token string">"(Ljava/lang/String;)V"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">visitInsn</span><span class="token punctuation">(</span>opcode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>测试类 <code>com.asm.AsmExample</code>：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>asm</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileOutputStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">InvocationTargetException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>objectweb<span class="token punctuation">.</span>asm<span class="token punctuation">.</span></span><span class="token class-name">ClassReader</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>objectweb<span class="token punctuation">.</span>asm<span class="token punctuation">.</span></span><span class="token class-name">ClassVisitor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>objectweb<span class="token punctuation">.</span>asm<span class="token punctuation">.</span></span><span class="token class-name">ClassWriter</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>objectweb<span class="token punctuation">.</span>asm<span class="token punctuation">.</span></span><span class="token class-name">MethodVisitor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>objectweb<span class="token punctuation">.</span>asm<span class="token punctuation">.</span></span><span class="token class-name">Opcodes</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>demo<span class="token punctuation">.</span></span><span class="token class-name">Foo</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AsmExample</span> <span class="token keyword">extends</span> <span class="token class-name">ClassLoader</span> <span class="token keyword">implements</span> <span class="token class-name">Opcodes</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">,</span> <span class="token class-name">SecurityException</span><span class="token punctuation">,</span>            <span class="token class-name">IllegalAccessException</span><span class="token punctuation">,</span> <span class="token class-name">InvocationTargetException</span><span class="token punctuation">,</span> <span class="token class-name">InstantiationException</span> <span class="token punctuation">{</span>        <span class="token class-name">ClassReader</span> cr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassReader</span><span class="token punctuation">(</span><span class="token class-name">Foo</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ClassWriter</span> cw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassWriter</span><span class="token punctuation">(</span>cr<span class="token punctuation">,</span> <span class="token class-name">ClassWriter</span><span class="token punctuation">.</span>COMPUTE_MAXS<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ClassVisitor</span> cv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MethodChangeClassAdapter</span><span class="token punctuation">(</span>cw<span class="token punctuation">)</span><span class="token punctuation">;</span>        cr<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>cv<span class="token punctuation">,</span> <span class="token class-name">Opcodes</span><span class="token punctuation">.</span>ASM4<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 新增加一个方法</span>        <span class="token class-name">MethodVisitor</span> mw <span class="token operator">=</span> cw<span class="token punctuation">.</span><span class="token function">visitMethod</span><span class="token punctuation">(</span>ACC_PUBLIC <span class="token operator">+</span> ACC_STATIC<span class="token punctuation">,</span> <span class="token string">"add"</span><span class="token punctuation">,</span> <span class="token string">"([Ljava/lang/String;)V"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mw<span class="token punctuation">.</span><span class="token function">visitFieldInsn</span><span class="token punctuation">(</span>GETSTATIC<span class="token punctuation">,</span> <span class="token string">"java/lang/System"</span><span class="token punctuation">,</span> <span class="token string">"out"</span><span class="token punctuation">,</span> <span class="token string">"Ljava/io/PrintStream;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mw<span class="token punctuation">.</span><span class="token function">visitLdcInsn</span><span class="token punctuation">(</span><span class="token string">"this is add method print!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mw<span class="token punctuation">.</span><span class="token function">visitMethodInsn</span><span class="token punctuation">(</span>INVOKEVIRTUAL<span class="token punctuation">,</span> <span class="token string">"java/io/PrintStream"</span><span class="token punctuation">,</span> <span class="token string">"println"</span><span class="token punctuation">,</span> <span class="token string">"(Ljava/lang/String;)V"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mw<span class="token punctuation">.</span><span class="token function">visitInsn</span><span class="token punctuation">(</span>RETURN<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// this code uses a maximum of two stack elements and two local</span>        <span class="token comment">// variables</span>        mw<span class="token punctuation">.</span><span class="token function">visitMaxs</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mw<span class="token punctuation">.</span><span class="token function">visitEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> code <span class="token operator">=</span> cw<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">AsmExample</span> loader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AsmExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> exampleClass <span class="token operator">=</span> loader<span class="token punctuation">.</span><span class="token function">defineClass</span><span class="token punctuation">(</span><span class="token class-name">Foo</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> code<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> code<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Method</span> method <span class="token operator">:</span> exampleClass<span class="token punctuation">.</span><span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"***************************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// uses the dynamically generated class to print 'Helloworld'</span>        <span class="token comment">// 調用changeMethodContent，修改方法內容</span>        exampleClass<span class="token punctuation">.</span><span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>exampleClass<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"***************************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 調用execute,修改方法名</span>        exampleClass<span class="token punctuation">.</span><span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>exampleClass<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// gets the bytecode of the Example class, and loads it dynamically</span>        <span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"e:\\Example.class"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>        fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>输出结果：</p><pre class="language-none"><code class="language-none">public static void com.demo.Foo.add(java.lang.String[])public void com.demo.Foo.changeMethodContent()public void com.demo.Foo.execute1()public final void java.lang.Object.wait() throws java.lang.InterruptedExceptionpublic final void java.lang.Object.wait(long,int) throws java.lang.InterruptedExceptionpublic final native void java.lang.Object.wait(long) throws java.lang.InterruptedExceptionpublic boolean java.lang.Object.equals(java.lang.Object)public java.lang.String java.lang.Object.toString()public native int java.lang.Object.hashCode()public final native java.lang.Class java.lang.Object.getClass()public final native void java.lang.Object.notify()public final native void java.lang.Object.notifyAll()***************************test changed methodthis is a modify method!***************************test changed method name</code></pre><p>通过反编译软件，查看 E 盘生成的 Example.class，结果如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>demo</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"test changed method name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">changeMethodContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"test changed method"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"this is a modify method!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrstring<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"this is add method print!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;ASM-介绍&quot;&gt;&lt;a href=&quot;#ASM-介绍&quot; class=&quot;headerlink&quot; title=&quot;ASM 介绍&quot;&gt;&lt;/a&gt;ASM 介绍&lt;/h3&gt;&lt;p&gt;ASM 是一个 java 字节码操纵框架，它能被用来动态生成类或者增强既有类的功能。&lt;/p&gt;
&lt;p&gt;ASM 可以直接产生二进制 class 文件，也可以在类被加载入 Java 虚拟机之前动态改变类行为。Java class 被存储在严格格式定义的 .class 文件里，这些类文件拥有足够的元数据来解析类中的所有元素：类名称、方法、属性以及 Java 字节码（指令）。ASM 从类文件中读入信息后，能够改变类行为，分析类信息，甚至能够根据用户要求生成新类。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://jueee.github.io/categories/Java/"/>
    
      <category term="JavaJar" scheme="https://jueee.github.io/categories/Java/JavaJar/"/>
    
    
      <category term="Java" scheme="https://jueee.github.io/tags/Java/"/>
    
      <category term="JavaJar" scheme="https://jueee.github.io/tags/JavaJar/"/>
    
  </entry>
  
  <entry>
    <title>Java 的 JIT 知识整理</title>
    <link href="https://jueee.github.io/2020/08/2020-08-27-Java%E7%9A%84JIT%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/"/>
    <id>https://jueee.github.io/2020/08/2020-08-27-Java%E7%9A%84JIT%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/</id>
    <published>2020-08-27T00:00:00.000Z</published>
    <updated>2020-08-27T11:13:14.950Z</updated>
    
    <content type="html"><![CDATA[<h3 id="JIT-介绍"><a href="#JIT-介绍" class="headerlink" title="JIT 介绍"></a>JIT 介绍</h3><p>JIT 编译器（just in time 即时编译器），当虚拟机发现某个方法或代码块运行特别频繁时，就会把这些代码认定为 热点代码（Hot Spot Code），为了提高热点代码的执行效率，在运行时，虚拟机将会把这些代码编译成与本地平台相关的机器码，并进行各层次的优化，完成这项任务的正是 <strong>JIT 编译器</strong>。</p><a id="more"></a><h3 id="JIT的工作原理"><a href="#JIT的工作原理" class="headerlink" title="JIT的工作原理"></a>JIT 的工作原理</h3><p><img src="/images/2020/08/1598525622168.png" alt="1598525622168" loading="lazy"></p><h3 id="JIT编译"><a href="#JIT编译" class="headerlink" title="JIT编译"></a>JIT 编译</h3><p>对于 Java 代码，刚开始都是<code>被编译器编译成字节码文件</code>，<code>然后字节码文件会被交由 JVM 解释执行</code>，所以可以说 Java 本身是一种<strong>半编译半解释执行的语言</strong>。</p><p>当 JIT 编译启用时（默认是启用的），JVM 读入<code>.class文件解释后</code>，将其<code>发给JIT编译器</code>。JIT 编译器<code>将字节码编译成本机机器代码</code>。</p><p>通常 <code>Javac将程序源码编译</code>，<code>转换成java字节码</code>，<code>JVM通过解释字节码将其翻译成相应的机器指令</code>，逐条读入，逐条解释翻译。<br> 经过解释运行，其运行速度必定会比可运行的二进制字节码程序慢。为了提高运行速度，引入了 JIT 技术。</p><p>在执行时 JIT 会把翻译过的机器码保存起来，已备下次使用，因此从理论上来说，采用该 JIT 技术能够，能够接近曾经纯编译技术。</p><p>运行过程中会被即时编译器编译的<code>热点代码</code>有两类：<strong>被多次调用的方法</strong>、<strong>被多次调用的循环体</strong>。<br>这两种情况，编译器都是以<strong>整个方法作为编译对象</strong>，这种编译也是虚拟机中标准的编译方式。要知道一段代码或方法是不是热点代码，是不是需要触发即时编译，需要进行 <code>Hot Spot Detection（热点探测）</code>。</p><h3 id="热点判定方式"><a href="#热点判定方式" class="headerlink" title="热点判定方式"></a>热点判定方式</h3><p>目前主要的热点 判定方式有以下两种：</p><ol><li><strong>基于采样的热点探测</strong>：<br> 采用这种方法的虚拟机会周期性地检查各个线程的栈顶，如果发现某些方法经常出现在栈顶，那这段方法代码就是 “热点代码”。这种探测方法的好处是实现简单高效，还可以很容易地获取方法调用关系，缺点是很难精确地确认一个方法的热度，容易因为受到线程阻塞或别的外界因素的影响而扰乱热点探测。</li><li><strong>基于计数器的热点探测</strong>：<br> 采用这种方法的虚拟机会为每个方法，甚至是代码块建立计数器，统计方法的执行次数，如果执行次数超过一定的阀值，就认为它是 “热点方法”。这种统计方法实现复杂一些，需要为每个方法建立并维护计数器，而且不能直接获取到方法的调用关系，但是它的统计结果相对更加精确严谨。</li></ol><p>HotSpot 虚拟机中使用的是第二种: <strong>基于计数器的热点探测方法</strong>，因此它为每个方法准备了两个计数器：<code>方法调用计数器和回边计数器</code>。</p><ul><li><p><strong>方法调用计数器</strong></p><p>方法调用计数器用来统计方法调用的次数，在默认设置下，方法调用计数器统计的并不是方法被调用的绝对次数，而是一个相对的执行频率，即一段时间内方法被调用的次数。</p></li><li><p><strong>回边计数器</strong></p><p>用于统计一个方法中循环体代码执行的次数（准确地说，应该是回边的次数，因为并非所有的循环都是回边），在字节码中遇到控制流向后跳转的指令就称为 “回边”。</p></li></ul><p>方法调用计数器触发即时编译的流程：</p><p><img src="/images/2020/08/1598525962562.png" alt="1598525962562" loading="lazy"></p><h3 id="设置热点阈值"><a href="#设置热点阈值" class="headerlink" title="设置热点阈值"></a>设置热点阈值</h3><p>一段代码需要执行多少次才会触发 JIT 优化呢？通常这个值由 <code>-XX:CompileThreshold</code> 参数进行设置：</p><ol><li><p>使用 client 编译器时，默认为 1500。</p></li><li><p>使用 server 编译器时，默认为 10000。</p></li></ol><h3 id="JIT优化"><a href="#JIT优化" class="headerlink" title="JIT优化"></a>JIT 优化</h3><ol><li><p><strong>开启服务端模式</strong></p><p>开启服务端模式以后就有即时编译器和解释器两种执行引擎，执行效率最高的是即时编译器，所以我们做 JIT 优化的目的是尽量使代码使用即时编译器</p><p>参数设置：<code>-server</code></p></li><li><p><strong>增加内联函数的可能性</strong></p><p>增加函数内联的可能性能减少栈帧的创建，节约内存空间</p><p>参数设置：</p><p>使用 final 修饰函数向编译器建议可以内联，启动参数不宜设置，注意只是建议，具体是否内联看 JVM 决定</p></li><li><p><strong>提高使用即时编译器的可能性</strong></p><p>小方法：写方法时尽量不要写得太大，让 JVM 尽可能使用即时编译器编译代码</p><p>在启动项配置参数 - XX:CompileThreshold=10000，使得一个方法被调用超过 10000 次以后使用即时编译器编译为机器码</p><p><strong>OSR 编译阈值</strong></p><ul><li><strong>调用计数器</strong>，即方法被调用的次数，CompileThreshold，该值是指当方法被调用多少次后，就编译为机器码，client 模式默认为 1500 次，server 模式默认为 1 万次，可以在启动时添加 - XX:CompileThreshold=10000 来设置该值。</li><li><strong>回边计数器</strong>，即方法中循环执行部分代码的执行次数，OnStackReplacePercentage，该值用于 / 参与计算是否触发 OSR 编译的阈值，client 默认为 933，sever 默认为 140，可以通过 - XX:OnStackReplacePercentage=140 来设置。</li></ul><p>client 模式下的计算规则为：</p><pre class="language-none"><code class="language-none">CompileThreshold*OnStackReplacePercentage/100</code></pre><p>server 模式下计算规则为：</p><pre class="language-none"><code class="language-none">CompileThreshold *（OnStackReplacePercentage-InterpreterProfilePercentage）/100</code></pre><p>InterpreterProfilePercentage，默认为 33。</p></li><li><p><strong>降低线程优先级</strong></p><p>Linux 不能设置，需要 root 权限</p></li><li><p><strong>热度衰减与半衰周期</strong></p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;JIT-介绍&quot;&gt;&lt;a href=&quot;#JIT-介绍&quot; class=&quot;headerlink&quot; title=&quot;JIT 介绍&quot;&gt;&lt;/a&gt;JIT 介绍&lt;/h3&gt;&lt;p&gt;JIT 编译器（just in time 即时编译器），当虚拟机发现某个方法或代码块运行特别频繁时，就会把这些代码认定为 热点代码（Hot Spot Code），为了提高热点代码的执行效率，在运行时，虚拟机将会把这些代码编译成与本地平台相关的机器码，并进行各层次的优化，完成这项任务的正是 &lt;strong&gt;JIT 编译器&lt;/strong&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://jueee.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://jueee.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Arthas 之热更新原理，并实现简易版热更新功能</title>
    <link href="https://jueee.github.io/2020/08/2020-08-26-Arthas%E4%B9%8B%E7%83%AD%E6%9B%B4%E6%96%B0%E5%8E%9F%E7%90%86%EF%BC%8C%E5%B9%B6%E5%AE%9E%E7%8E%B0%E7%AE%80%E6%98%93%E7%89%88%E7%83%AD%E6%9B%B4%E6%96%B0%E5%8A%9F%E8%83%BD/"/>
    <id>https://jueee.github.io/2020/08/2020-08-26-Arthas%E4%B9%8B%E7%83%AD%E6%9B%B4%E6%96%B0%E5%8E%9F%E7%90%86%EF%BC%8C%E5%B9%B6%E5%AE%9E%E7%8E%B0%E7%AE%80%E6%98%93%E7%89%88%E7%83%AD%E6%9B%B4%E6%96%B0%E5%8A%9F%E8%83%BD/</id>
    <published>2020-08-26T00:00:00.000Z</published>
    <updated>2020-08-27T10:30:28.385Z</updated>
    
    <content type="html"><![CDATA[<h3 id="热更新原理"><a href="#热更新原理" class="headerlink" title="热更新原理"></a>热更新原理</h3><p>Arthas 热更新功能看起来很神奇，实际上离不开 JDK 一些 API，分别为 instrument API 与 attach API。</p><a id="more"></a><h4 id="Instrumentation"><a href="#Instrumentation" class="headerlink" title="Instrumentation"></a>Instrumentation</h4><p>Java Instrumentation 是 JDK5 之后提供接口。使用这组接口，我们可以获取到正在运行 JVM 相关信息，使用这些信息我们构建相关监控程序检测 JVM。另外， 最重要我们可以<strong>替换</strong>和<strong>修改</strong>类的，这样就实现了热更新。</p><p>Instrumentation 存在两种使用方式，一种为 <code>pre-main</code> 方式，这种方式需要在虚拟机参数指定 Instrumentation 程序，然后程序启动之前将会完成修改或替换类。使用方式如下:</p><pre class="language-shell" data-language="shell"><code class="language-shell">java -javaagent:jar Instrumentation_jar -jar xxx.jar</code></pre><p>这种方式只能在应用启动之前生效，存在一定的局限性。</p><p>JDK6 针对这种情况作出了改进，增加 <code>agent-main</code> 方式。我们可以在应用启动之后，再运行 <code>Instrumentation</code> 程序。启动之后，只有连接上相应的应用，我们才能做出相应改动，这里我们就需要使用 Java 提供 attach API。</p><h4 id="Attach-API"><a href="#Attach-API" class="headerlink" title="Attach API"></a>Attach API</h4><p>Attach API 位于 tools.jar 包，可以用来连接目标 JVM。Attach API 非常简单，内部只有两个主要的类，<code>VirtualMachine</code> 与 <code>VirtualMachineDescriptor</code>。</p><p><code>VirtualMachine</code> 代表一个 JVM 实例， 使用它提供 <code>attach</code> 方法，我们就可以连接上目标 JVM。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">VirtualMachine</span> vm <span class="token operator">=</span> <span class="token class-name">VirtualMachine</span><span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span>pid<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>VirtualMachineDescriptor</code> 则是一个描述虚拟机的容器类，通过该实例我们可以获取到 JVM PID (进程 ID), 该实例主要通过  <code>VirtualMachine#list</code> 方法获取。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">VirtualMachineDescriptor</span> descriptor <span class="token operator">:</span> <span class="token class-name">VirtualMachine</span><span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><p>介绍完热更新涉及的相关原理，接下去使用上面 API 实现热更新功能。</p><h3 id="实现热更新功能"><a href="#实现热更新功能" class="headerlink" title="实现热更新功能"></a>实现热更新功能</h3><h4 id="实现-agent-main"><a href="#实现-agent-main" class="headerlink" title="实现 agent-main"></a>实现 agent-main</h4><p>首先需要编写一个类，包含以下两个方法：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> agentmain <span class="token punctuation">(</span><span class="token class-name">String</span> agentArgs<span class="token punctuation">,</span> <span class="token class-name">Instrumentation</span> inst<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> agentmain <span class="token punctuation">(</span><span class="token class-name">String</span> agentArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span></code></pre><blockquote><p>上面的方法只需要实现一个即可。若两个都实现，  [1] 优先级大于 [2]，将会被优先执行。</p></blockquote><p>接着读取外部传入 class 文件，调用 <code>Instrumentation#redefineClasses</code>，这个方法将会使用新 class 替换当前正在运行的 class，这样我们就完成了类的修改。</p><p><code>com.agent.AgentMain</code> 的代码如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>agent</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">RandomAccessFile</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>instrument<span class="token punctuation">.</span></span><span class="token class-name">ClassDefinition</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>instrument<span class="token punctuation">.</span></span><span class="token class-name">Instrumentation</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>instrument<span class="token punctuation">.</span></span><span class="token class-name">UnmodifiableClassException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>objectweb<span class="token punctuation">.</span>asm<span class="token punctuation">.</span></span><span class="token class-name">ClassReader</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AgentMain</span>  <span class="token punctuation">{</span>    <span class="token comment">/**     * @param agentArgs 外部传入的参数，类似于 main 函数 args     * @param inst     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">agentmain</span><span class="token punctuation">(</span><span class="token class-name">String</span> agentArgs<span class="token punctuation">,</span> <span class="token class-name">Instrumentation</span> inst<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 从 agentArgs 获取外部参数</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"start agentmain."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 这里将会传入 class 文件路径</span>        <span class="token class-name">String</span> path <span class="token operator">=</span> agentArgs<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment">// 读取 class 文件字节码</span>            <span class="token class-name">RandomAccessFile</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RandomAccessFile</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> f<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            f<span class="token punctuation">.</span><span class="token function">readFully</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 使用 asm 框架获取类名</span>            <span class="token keyword">final</span> <span class="token class-name">String</span> clazzName <span class="token operator">=</span> <span class="token function">readClassName</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// inst.getAllLoadedClasses 方法将会获取所有已加载的 class</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Class</span> clazz <span class="token operator">:</span> inst<span class="token punctuation">.</span><span class="token function">getAllLoadedClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// 匹配需要替换 class</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>clazz<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>clazzName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token class-name">ClassDefinition</span> definition <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassDefinition</span><span class="token punctuation">(</span>clazz<span class="token punctuation">,</span> bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// 使用指定的 class 替换当前系统正在使用 class</span>                    inst<span class="token punctuation">.</span><span class="token function">redefineClasses</span><span class="token punctuation">(</span>definition<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"agentmain error."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/**      *  使用 asm 读取类名     * @param bytes     * @return     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">readClassName</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ClassReader</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>其中，<code>ClassReader</code> 类需要引入 Jar 包：</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>asm<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>asm<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></code></pre><h4 id="配置-MANIFEST-MF"><a href="#配置-MANIFEST-MF" class="headerlink" title="配置 MANIFEST.MF"></a>配置 MANIFEST.MF</h4><p>完成代码之后，我们还需要往 jar 包 <code>MANIFEST.MF</code> 写入以下属性。</p><pre class="language-none"><code class="language-none">## 指定 agent-main 全名Agent-Class: com.agent.AgentMain## 设置权限，默认为 false，没有权限替换 classCan-Redefine-Classes: true</code></pre><p>使用 <code>maven-assembly-plugin</code>，将上面的属性写入文件中：</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>maven-assembly-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>finalName</span><span class="token punctuation">&gt;</span></span>hotswap-jdk<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>finalName</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appendAssemblyId</span><span class="token punctuation">&gt;</span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appendAssemblyId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>descriptorRefs</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>descriptorRef</span><span class="token punctuation">&gt;</span></span>jar-with-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>descriptorRef</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>descriptorRefs</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>archive</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>manifestEntries</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Agent-Class</span><span class="token punctuation">&gt;</span></span>com.agent.AgentMain<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Agent-Class</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Can-Redefine-Classes</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Can-Redefine-Classes</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Can-Retransform-Classes</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Can-Retransform-Classes</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>manifestEntries</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>manifest</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mainClass</span><span class="token punctuation">&gt;</span></span>com.main.JvmAttachMain<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mainClass</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>manifest</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>archive</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executions</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>make-assembly<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>phase</span><span class="token punctuation">&gt;</span></span>package<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>phase</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">&gt;</span></span>single<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executions</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span></code></pre><h4 id="使用-Attach-API"><a href="#使用-Attach-API" class="headerlink" title="使用 Attach API"></a>使用 Attach API</h4><p>以上完成热更新主要代码，接着使用 Attach API，连接目标虚拟机，触发热更新的代码。</p><p>在这个启动类，我们最终调用 <code>VirtualMachine#loadAgent</code>，JVM 将会使用上面 AgentMain 方法使用传入 class 文件替换正在运行 class。</p><p><code>com.main.JvmAttachMain</code> 的代码如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>main</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>tools<span class="token punctuation">.</span>attach<span class="token punctuation">.</span></span><span class="token class-name">VirtualMachine</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JvmAttachMain</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">String</span> pid <span class="token operator">=</span> <span class="token string">"41556"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> classPath <span class="token operator">=</span> <span class="token string">"E:\\RedefineSuccess.class"</span><span class="token punctuation">;</span>        <span class="token comment">// 获取 Agent jar 路径</span>        <span class="token class-name">String</span> jarPath <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"user.dir"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token class-name">File</span><span class="token punctuation">.</span>separator <span class="token operator">+</span> <span class="token string">"target"</span> <span class="token operator">+</span> <span class="token class-name">File</span><span class="token punctuation">.</span>separator <span class="token operator">+</span> <span class="token string">"hotswap-jdk.jar"</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"this redefine jar path:"</span> <span class="token operator">+</span> jarPath<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">VirtualMachine</span> vm <span class="token operator">=</span> <span class="token class-name">VirtualMachine</span><span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span>pid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 待绑定的jvm进程的pid号</span>            <span class="token comment">// 运行最终 AgentMain 中方法</span>            vm<span class="token punctuation">.</span><span class="token function">loadAgent</span><span class="token punctuation">(</span>jarPath<span class="token punctuation">,</span>classPath<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ERROR:"</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h4><ol><li>将 <code>com.agent.AgentMain</code> 打包成 <code>hotswap-jdk.jar</code></li><li>运行测试类 RedefineSuccess.java</li><li> 通过 <code>jps</code> 获取到进程 ID</li><li> 将进程 ID 和反编译生成的 class 文件传入 <code>com.main.JvmAttachMain</code> </li><li>运行 <code>com.main.JvmAttachMain</code> </li></ol><p><img src="/images/2020/08/1598497095868.png" alt="1598497095868" loading="lazy"></p><h3 id="相关问题"><a href="#相关问题" class="headerlink" title="相关问题"></a>相关问题</h3><h4 id="编译引入-tools-jar"><a href="#编译引入-tools-jar" class="headerlink" title="编译引入 tools.jar"></a>编译引入 tools.jar</h4><p>由于 Attach API 位于 tools.jar 中，而在 JDK8 之前 tools.jar 与我们常用 JDK jar 包并不在同一个位置，所以编译与运行过程可能找不到该 jar 包，从而导致报错。</p><p>则需要 Maven 引入：</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.sun<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>tools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${java.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>system<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>systemPath</span><span class="token punctuation">&gt;</span></span>${java.home}/../lib/tools.jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>systemPath</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></code></pre><h4 id="程序运行中-tools-jar"><a href="#程序运行中-tools-jar" class="headerlink" title="程序运行中 tools.jar"></a>程序运行中 tools.jar</h4><p>运行程序时抛出 <code>java.lang.NoClassDefFoundError</code>，主要原因还是系统未找到 tools.jar 导致。</p><p><img src="/images/2020/08/1598497278943.png" alt="1598497278943" loading="lazy"></p><p>在运行参数加入 <code>-Xbootclasspath/a:${java_home}/lib/tools.jar</code>，完整运行命令如下：</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">java <span class="token operator">-</span>Xbootclasspath<span class="token operator">/</span>a:$<span class="token punctuation">{</span>java_home<span class="token punctuation">}</span>\lib\tools<span class="token punctuation">.</span>jar <span class="token operator">-</span>jar hotswap<span class="token operator">-</span>jdk<span class="token punctuation">.</span>jar 22132 E:\RedefineSuccess<span class="token punctuation">.</span><span class="token keyword">class</span></code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;热更新原理&quot;&gt;&lt;a href=&quot;#热更新原理&quot; class=&quot;headerlink&quot; title=&quot;热更新原理&quot;&gt;&lt;/a&gt;热更新原理&lt;/h3&gt;&lt;p&gt;Arthas 热更新功能看起来很神奇，实际上离不开 JDK 一些 API，分别为 instrument API 与 attach API。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://jueee.github.io/categories/Java/"/>
    
      <category term="Arthas" scheme="https://jueee.github.io/categories/Java/Arthas/"/>
    
    
      <category term="Java" scheme="https://jueee.github.io/tags/Java/"/>
    
      <category term="Java诊断" scheme="https://jueee.github.io/tags/Java%E8%AF%8A%E6%96%AD/"/>
    
      <category term="Arthas" scheme="https://jueee.github.io/tags/Arthas/"/>
    
  </entry>
  
  <entry>
    <title>使用 lambda 表达式进行集合类型转换</title>
    <link href="https://jueee.github.io/2020/08/2020-08-24-%E4%BD%BF%E7%94%A8lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%BF%9B%E8%A1%8C%E9%9B%86%E5%90%88%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"/>
    <id>https://jueee.github.io/2020/08/2020-08-24-%E4%BD%BF%E7%94%A8lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%BF%9B%E8%A1%8C%E9%9B%86%E5%90%88%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</id>
    <published>2020-08-24T00:00:00.000Z</published>
    <updated>2020-08-27T03:09:26.819Z</updated>
    
    <content type="html"><![CDATA[<h3 id="目标类型-List"><a href="#目标类型-List" class="headerlink" title="目标类型 List"></a>目标类型 List</h3><h4 id="转-List"><a href="#转-List" class="headerlink" title="转 List"></a>转 List</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list1 <span class="token operator">=</span> <span class="token class-name">Lists</span><span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list2 <span class="token operator">=</span> list1<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>string <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"stream().map()处理之后："</span> <span class="token operator">+</span> string<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;目标类型-List&quot;&gt;&lt;a href=&quot;#目标类型-List&quot; class=&quot;headerlink&quot; title=&quot;目标类型 List&quot;&gt;&lt;/a&gt;目标类型 List&lt;/h3&gt;&lt;h4 id=&quot;转-List&quot;&gt;&lt;a href=&quot;#转-List&quot; class=&quot;head
      
    
    </summary>
    
    
      <category term="Java" scheme="https://jueee.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://jueee.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>通过 UnxUtils 在 Windows 上使用 Unix 命令</title>
    <link href="https://jueee.github.io/2020/08/2020-08-21-%E9%80%9A%E8%BF%87UnxUtils%E5%9C%A8Windows%E4%B8%8A%E4%BD%BF%E7%94%A8Unix%E5%91%BD%E4%BB%A4/"/>
    <id>https://jueee.github.io/2020/08/2020-08-21-%E9%80%9A%E8%BF%87UnxUtils%E5%9C%A8Windows%E4%B8%8A%E4%BD%BF%E7%94%A8Unix%E5%91%BD%E4%BB%A4/</id>
    <published>2020-08-21T00:00:00.000Z</published>
    <updated>2020-08-24T01:41:31.578Z</updated>
    
    <content type="html"><![CDATA[<p>UnxUtils 是一个可以支持<strong>在 Windows 下使用 linux 命令的工具</strong>，用习惯了 linux 之后，感觉 Windows 的 dos 命令实在是太难用了，发现了这个工具，非常的小，装了它之后，把路径加入到环境变量中就支持常用的 linux 命令了。</p><a id="more"></a><p>介绍：<span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvVW54VXRpbHM=">https://en.wikipedia.org/wiki/UnxUtils<i class="fa fa-external-link-alt"></i></span></p><p>下载：<span class="exturl" data-url="aHR0cHM6Ly9zb3VyY2Vmb3JnZS5uZXQvcHJvamVjdHMvdW54dXRpbHMv">https://sourceforge.net/projects/unxutils/<i class="fa fa-external-link-alt"></i></span></p><p>下载完成后，解压 UnxUtils.zip，然后把 UnxUtils 这个目录下的 \usr\local\wbin 加入到环境变量里面就可以了。</p><p><img src="/images/2020/08/1598008019072.png" alt="1598008019072" loading="lazy"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;UnxUtils 是一个可以支持&lt;strong&gt;在 Windows 下使用 linux 命令的工具&lt;/strong&gt;，用习惯了 linux 之后，感觉 Windows 的 dos 命令实在是太难用了，发现了这个工具，非常的小，装了它之后，把路径加入到环境变量中就支持常用的 linux 命令了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="软件" scheme="https://jueee.github.io/categories/%E8%BD%AF%E4%BB%B6/"/>
    
    
      <category term="软件" scheme="https://jueee.github.io/tags/%E8%BD%AF%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>Arthas 之查看和修改日志级别</title>
    <link href="https://jueee.github.io/2020/08/2020-08-20-Arthas%E4%B9%8B%E6%9F%A5%E7%9C%8B%E5%92%8C%E4%BF%AE%E6%94%B9%E6%97%A5%E5%BF%97%E7%BA%A7%E5%88%AB/"/>
    <id>https://jueee.github.io/2020/08/2020-08-20-Arthas%E4%B9%8B%E6%9F%A5%E7%9C%8B%E5%92%8C%E4%BF%AE%E6%94%B9%E6%97%A5%E5%BF%97%E7%BA%A7%E5%88%AB/</id>
    <published>2020-08-20T00:00:00.000Z</published>
    <updated>2020-08-20T10:48:58.154Z</updated>
    
    <content type="html"><![CDATA[<h3 id="logger-命令"><a href="#logger-命令" class="headerlink" title="logger 命令"></a>logger 命令</h3><h4 id="方法介绍"><a href="#方法介绍" class="headerlink" title="方法介绍"></a>方法介绍</h4><p>查看 logger 信息，更新 logger level。</p><p>官方文档：<span class="exturl" data-url="aHR0cHM6Ly9hbGliYWJhLmdpdGh1Yi5pby9hcnRoYXMvbG9nZ2VyLmh0bWw=">https://alibaba.github.io/arthas/logger.html<i class="fa fa-external-link-alt"></i></span></p><p>帮助信息：</p><p><img src="/images/2020/08/1597912401412.png" alt="1597912401412" loading="lazy"></p><h3 id="使用-logger-命令"><a href="#使用-logger-命令" class="headerlink" title="使用 logger 命令"></a>使用 logger 命令</h3><h4 id="修改默认日志级别"><a href="#修改默认日志级别" class="headerlink" title="修改默认日志级别"></a>修改默认日志级别</h4><p>使用 <code>logger</code> 命令打印的结果是（默认 <code> --name ROOT</code>）：</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[arthas@23176]</span>$ logger name                ROOT <span class="token keyword">class</span>               ch<span class="token punctuation">.</span>qos<span class="token punctuation">.</span>logback<span class="token punctuation">.</span>classic<span class="token punctuation">.</span>Logger classLoader         sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span>Launcher<span class="token variable">$AppClassLoader</span>@73d16e93 classLoaderHash     73d16e93 level               INFO effectiveLevel      INFO additivity          true codeSource          file:<span class="token operator">/</span>E:<span class="token operator">/</span>code<span class="token operator">/</span>Java<span class="token operator">/</span>repository<span class="token operator">/</span>ch<span class="token operator">/</span>qos<span class="token operator">/</span>logback<span class="token operator">/</span>logback<span class="token operator">-</span>classic<span class="token operator">/</span>1<span class="token punctuation">.</span>2<span class="token punctuation">.</span>3<span class="token operator">/</span>logback<span class="token operator">-</span>classic<span class="token operator">-</span>1<span class="token punctuation">.</span>2<span class="token punctuation">.</span>3<span class="token punctuation">.</span>jar appenders           name            CONSOLE                     <span class="token keyword">class</span>           ch<span class="token punctuation">.</span>qos<span class="token punctuation">.</span>logback<span class="token punctuation">.</span>core<span class="token punctuation">.</span>ConsoleAppender                     classLoader     sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span>Launcher<span class="token variable">$AppClassLoader</span>@73d16e93                     classLoaderHash 73d16e93                     target          System<span class="token punctuation">.</span>out                     name            FILE                     <span class="token keyword">class</span>           ch<span class="token punctuation">.</span>qos<span class="token punctuation">.</span>logback<span class="token punctuation">.</span>core<span class="token punctuation">.</span>rolling<span class="token punctuation">.</span>RollingFileAppender                     classLoader     sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span>Launcher<span class="token variable">$AppClassLoader</span>@73d16e93                     classLoaderHash 73d16e93                     file            C:\Users\HZWEIY~1\AppData\Local\Temp\<span class="token operator">/</span>spring<span class="token punctuation">.</span>log                     name            INFO_FILE                     <span class="token keyword">class</span>           ch<span class="token punctuation">.</span>qos<span class="token punctuation">.</span>logback<span class="token punctuation">.</span>core<span class="token punctuation">.</span>rolling<span class="token punctuation">.</span>RollingFileAppender                     classLoader     sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span>Launcher<span class="token variable">$AppClassLoader</span>@73d16e93                     classLoaderHash 73d16e93                     file            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>log<span class="token operator">/</span>info<span class="token punctuation">.</span>log                     name            ERROR_FILE                     <span class="token keyword">class</span>           ch<span class="token punctuation">.</span>qos<span class="token punctuation">.</span>logback<span class="token punctuation">.</span>core<span class="token punctuation">.</span>rolling<span class="token punctuation">.</span>RollingFileAppender                     classLoader     sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span>Launcher<span class="token variable">$AppClassLoader</span>@73d16e93                     classLoaderHash 73d16e93                     file            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>log<span class="token operator">/</span>error<span class="token punctuation">.</span>log</code></pre><p>修改日志级别为 <code>debug</code>：</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[arthas@23176]</span>$ logger <span class="token operator">--</span>name ROOT <span class="token operator">--</span>level debugUpdate logger level success<span class="token punctuation">.</span></code></pre><h4 id="修改方法日志级别"><a href="#修改方法日志级别" class="headerlink" title="修改方法日志级别"></a>修改方法日志级别</h4><p>查看指定类的 logger 信息：</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[arthas@23176]</span>$ logger  <span class="token operator">-</span>n sample<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span>CompanyMapper name                sample<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span>CompanyMapper <span class="token keyword">class</span>               ch<span class="token punctuation">.</span>qos<span class="token punctuation">.</span>logback<span class="token punctuation">.</span>classic<span class="token punctuation">.</span>Logger classLoader         sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span>Launcher<span class="token variable">$AppClassLoader</span>@73d16e93 classLoaderHash     73d16e93 level               null effectiveLevel      DEBUG additivity          true codeSource          file:<span class="token operator">/</span>E:<span class="token operator">/</span>code<span class="token operator">/</span>Java<span class="token operator">/</span>repository<span class="token operator">/</span>ch<span class="token operator">/</span>qos<span class="token operator">/</span>logback<span class="token operator">/</span>logback<span class="token operator">-</span>classic<span class="token operator">/</span>1<span class="token punctuation">.</span>2<span class="token punctuation">.</span>3<span class="token operator">/</span>logback<span class="token operator">-</span>classic<span class="token operator">-</span>1<span class="token punctuation">.</span>2<span class="token punctuation">.</span>3<span class="token punctuation">.</span>jar</code></pre><p>修改日志级别：</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[arthas@23176]</span>$ logger  <span class="token operator">-</span>n sample<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span>CompanyMapper <span class="token operator">-</span>l debugUpdate logger level success<span class="token punctuation">.</span></code></pre><h3 id="使用-ongl-命令"><a href="#使用-ongl-命令" class="headerlink" title="使用 ongl 命令"></a>使用 ongl 命令</h3><h4 id="修改默认日志级别-1"><a href="#修改默认日志级别-1" class="headerlink" title="修改默认日志级别"></a>修改默认日志级别</h4><p>获取默认日志级别：</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[arthas@23176]</span>$ ognl <span class="token string">'@org.slf4j.LoggerFactory@getLogger("root")'</span>@Logger<span class="token punctuation">[</span>    serialVersionUID=@Long<span class="token punctuation">[</span>5454405123156820674<span class="token punctuation">]</span><span class="token punctuation">,</span>    FQCN=@String<span class="token namespace">[ch.qos.logback.classic.Logger]</span><span class="token punctuation">,</span>    name=@String<span class="token namespace">[ROOT]</span><span class="token punctuation">,</span>    level=@Level<span class="token namespace">[INFO]</span><span class="token punctuation">,</span>    effectiveLevelInt=@Integer<span class="token punctuation">[</span>20000<span class="token punctuation">]</span><span class="token punctuation">,</span>    parent=null<span class="token punctuation">,</span>    childrenList=@CopyOnWriteArrayList<span class="token namespace">[isEmpty=false;size=3]</span><span class="token punctuation">,</span>    aai=@AppenderAttachableImpl<span class="token namespace">[ch.qos.logback.core.spi.AppenderAttachableImpl@3a0771d0]</span><span class="token punctuation">,</span>    additive=@Boolean<span class="token namespace">[true]</span><span class="token punctuation">,</span>    loggerContext=@LoggerContext<span class="token namespace">[ch.qos.logback.classic.LoggerContext[default]]</span><span class="token punctuation">,</span><span class="token punctuation">]</span></code></pre><p>修改日志级别为 <code>debug</code>：</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[arthas@23176]</span>$ ognl <span class="token string">'@org.slf4j.LoggerFactory@getLogger("root").setLevel(@ch.qos.logback.classic.Level@DEBUG)'</span>null</code></pre><h4 id="修改方法日志级别-1"><a href="#修改方法日志级别-1" class="headerlink" title="修改方法日志级别"></a>修改方法日志级别</h4><p>获取方法日志级别：</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[arthas@23176]</span>$ ognl <span class="token string">'@sample.mybatis.SampleXmlApplication@log'</span>@Logger<span class="token punctuation">[</span>    serialVersionUID=@Long<span class="token punctuation">[</span>5454405123156820674<span class="token punctuation">]</span><span class="token punctuation">,</span>    FQCN=@String<span class="token namespace">[ch.qos.logback.classic.Logger]</span><span class="token punctuation">,</span>    name=@String<span class="token namespace">[sample.mybatis.SampleXmlApplication]</span><span class="token punctuation">,</span>    level=null<span class="token punctuation">,</span>    effectiveLevelInt=@Integer<span class="token punctuation">[</span>20000<span class="token punctuation">]</span><span class="token punctuation">,</span>    parent=@Logger<span class="token namespace">[Logger[sample.mybatis]]</span><span class="token punctuation">,</span>    childrenList=null<span class="token punctuation">,</span>    aai=null<span class="token punctuation">,</span>    additive=@Boolean<span class="token namespace">[true]</span><span class="token punctuation">,</span>    loggerContext=@LoggerContext<span class="token namespace">[ch.qos.logback.classic.LoggerContext[default]]</span><span class="token punctuation">,</span><span class="token punctuation">]</span></code></pre><p>修改日志级别：</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[arthas@23176]</span>$ ognl <span class="token string">'@sample.mybatis.SampleXmlApplication@log.setLevel(@ch.qos.logback.classic.Level@DEBUG)'</span>null</code></pre><h4 id="查看日志配置"><a href="#查看日志配置" class="headerlink" title="查看日志配置"></a>查看日志配置</h4><pre class="language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[arthas@23176]</span>$ ognl <span class="token string">'@org.slf4j.LoggerFactory@getLogger("root").loggerContext.objectMap'</span>@HashMap<span class="token punctuation">[</span>    @String<span class="token namespace">[EVALUATOR_MAP]</span>:@HashMap<span class="token namespace">[isEmpty=true;size=0]</span><span class="token punctuation">,</span>    @String<span class="token namespace">[RFA_FILENAME_PATTERN_COLLISION_MAP]</span>:@HashMap<span class="token namespace">[isEmpty=false;size=3]</span><span class="token punctuation">,</span>    @String<span class="token namespace">[PATTERN_RULE_REGISTRY]</span>:@HashMap<span class="token namespace">[isEmpty=false;size=3]</span><span class="token punctuation">,</span>    @String<span class="token namespace">[CONFIGURATION_WATCH_LIST]</span>:@ConfigurationWatchList<span class="token namespace">[ch.qos.logback.core.joran.spi.ConfigurationWatchList@68ec0e24]</span><span class="token punctuation">,</span>    @String<span class="token namespace">[org.springframework.boot.logging.LoggingSystem]</span>:@Object<span class="token namespace">[java.lang.Object@5336a68d]</span><span class="token punctuation">,</span>    @String<span class="token namespace">[RECONFIGURE_ON_CHANGE_TASK]</span>:@ReconfigureOnChangeTask<span class="token namespace">[ReconfigureOnChangeTask(born:1597910258119)]</span><span class="token punctuation">,</span>    @String<span class="token namespace">[FA_FILENAME_COLLISION_MAP]</span>:@HashMap<span class="token namespace">[isEmpty=false;size=3]</span><span class="token punctuation">,</span>    @String<span class="token namespace">[SAFE_JORAN_CONFIGURATION]</span>:@ArrayList<span class="token namespace">[isEmpty=false;size=135]</span><span class="token punctuation">,</span><span class="token punctuation">]</span></code></pre><p>查看日志配置文件加载位置：</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[arthas@23176]</span>$ ognl <span class="token string">'#map1=@org.slf4j.LoggerFactory@getLogger("root").loggerContext.objectMap, #map1.get("CONFIGURATION_WATCH_LIST")'</span>@ConfigurationWatchList<span class="token punctuation">[</span>    mainURL=@URL<span class="token namespace">[file:/C:/Codes/JavaWorkSpace/workspace48/arthas-demo/target/classes/logback.xml]</span><span class="token punctuation">,</span>    fileWatchList=@ArrayList<span class="token namespace">[isEmpty=false;size=1]</span><span class="token punctuation">,</span>    lastModifiedList=@ArrayList<span class="token namespace">[isEmpty=false;size=1]</span><span class="token punctuation">,</span>    noContextWarning=@Integer<span class="token punctuation">[</span>0<span class="token punctuation">]</span><span class="token punctuation">,</span>    context=@LoggerContext<span class="token namespace">[ch.qos.logback.classic.LoggerContext[default]]</span><span class="token punctuation">,</span>    declaredOrigin=@ConfigurationWatchList<span class="token namespace">[ch.qos.logback.core.joran.spi.ConfigurationWatchList@68ec0e24]</span><span class="token punctuation">,</span><span class="token punctuation">]</span></code></pre>]]></content>
    
    <summary type="html">
    
      介绍 Arthas 的 logger 命令的基本使用。并分别使用 logger 命令和ongl表达式，演示查看和修改日志级别的方法。
    
    </summary>
    
    
      <category term="Java" scheme="https://jueee.github.io/categories/Java/"/>
    
      <category term="Arthas" scheme="https://jueee.github.io/categories/Java/Arthas/"/>
    
    
      <category term="Java" scheme="https://jueee.github.io/tags/Java/"/>
    
      <category term="Java诊断" scheme="https://jueee.github.io/tags/Java%E8%AF%8A%E6%96%AD/"/>
    
      <category term="Arthas" scheme="https://jueee.github.io/tags/Arthas/"/>
    
  </entry>
  
  <entry>
    <title>为博客新增评论系统</title>
    <link href="https://jueee.github.io/2020/08/2020-08-19-%E4%B8%BA%E5%8D%9A%E5%AE%A2%E6%96%B0%E5%A2%9E%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/"/>
    <id>https://jueee.github.io/2020/08/2020-08-19-%E4%B8%BA%E5%8D%9A%E5%AE%A2%E6%96%B0%E5%A2%9E%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/</id>
    <published>2020-08-19T00:00:00.000Z</published>
    <updated>2020-08-20T02:07:20.022Z</updated>
    
    <content type="html"><![CDATA[<h3 id="开启多个评论系统"><a href="#开启多个评论系统" class="headerlink" title="开启多个评论系统"></a>开启多个评论系统</h3><p><span class="exturl" data-url="aHR0cHM6Ly90aGVtZS1uZXh0LmpzLm9yZy9kb2NzL3RoaXJkLXBhcnR5LXNlcnZpY2VzL2NvbW1lbnRzLmh0bWw=">配置参考<i class="fa fa-external-link-alt"></i></span>：</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">comments</span><span class="token punctuation">:</span>  <span class="token key atrule">lazyload</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">active</span><span class="token punctuation">:</span> gitalk  <span class="token key atrule">nav</span><span class="token punctuation">:</span>    <span class="token key atrule">gitalk</span><span class="token punctuation">:</span>      <span class="token key atrule">text</span><span class="token punctuation">:</span> 登录 GitHub 评论      <span class="token key atrule">order</span><span class="token punctuation">:</span> <span class="token number">1</span>    <span class="token key atrule">valine</span><span class="token punctuation">:</span>      <span class="token key atrule">text</span><span class="token punctuation">:</span> 不登录进行评论      <span class="token key atrule">order</span><span class="token punctuation">:</span> <span class="token number">2</span></code></pre><p>效果如下：</p><p><img src="/images/2020/08/1597888806112.png" alt="1597888806112" loading="lazy"></p><h3 id="添加-Valine-评论系统"><a href="#添加-Valine-评论系统" class="headerlink" title="添加 Valine 评论系统"></a>添加 Valine 评论系统</h3><p>Valine 是基于 Leancloud 的快速，简单和高效的无后端评论系统。</p><h4 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h4><p>创建一个帐户或登录 <span class="exturl" data-url="aHR0cHM6Ly9sZWFuY2xvdWQuY24vZGFzaGJvYXJkL2xvZ2luLmh0bWwjL3NpZ25pbg==">LeanCloud<i class="fa fa-external-link-alt"></i></span>，然后单击左下角以<span class="exturl" data-url="aHR0cHM6Ly9sZWFuY2xvdWQuY24vZGFzaGJvYXJkL2FwcGxpc3QuaHRtbCMvbmV3YXBw">创建应用程序<i class="fa fa-external-link-alt"></i></span>在<span class="exturl" data-url="aHR0cHM6Ly9sZWFuY2xvdWQuY24vZGFzaGJvYXJkL2FwcGxpc3QuaHRtbCMvYXBwcw==">仪表板中<i class="fa fa-external-link-alt"></i></span>.</p><p>转到您刚创建的应用程序，<code>Settings → App Keys</code> 在左下角选择，您将看到您的 APP ID 和 APP Key。</p><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>将值设置 <code>enable</code> 为 <code>true</code>，添加获得的 APP ID（<code>appId</code>）和 APP Key（<code>appKey</code>），然后 <code>valine</code> 在主题配置文件 如下：</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">valine</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">appId</span><span class="token punctuation">:</span>  <span class="token comment"># your leancloud application appid</span>  <span class="token key atrule">appKey</span><span class="token punctuation">:</span>  <span class="token comment"># your leancloud application appkey</span>  <span class="token key atrule">placeholder</span><span class="token punctuation">:</span> Just go go <span class="token comment"># comment box placeholder</span>  <span class="token key atrule">avatar</span><span class="token punctuation">:</span> mm <span class="token comment"># gravatar style</span>  <span class="token key atrule">meta</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>nick<span class="token punctuation">,</span> mail<span class="token punctuation">,</span> link<span class="token punctuation">]</span> <span class="token comment"># Custom comment header</span>  <span class="token key atrule">pageSize</span><span class="token punctuation">:</span> <span class="token number">10</span> <span class="token comment"># pagination size</span>  <span class="token key atrule">visitor</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># leancloud-counter-security is not supported for now. When visitor is set to be true, appid and appkey are recommended to be the same as leancloud_visitors' for counter compatibility. Article reading statistic https://valine.js.org/visitor.html</span>  <span class="token key atrule">comment_count</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># If false, comment count will only be displayed in post page, not in home page</span>  <span class="token key atrule">recordIP</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># Whether to record the commenter IP</span>  <span class="token key atrule">serverURLs</span><span class="token punctuation">:</span> <span class="token comment"># When the custom domain name is enabled, fill it in here (it will be detected automatically by default, no need to fill in)</span></code></pre><h4 id="评论效果"><a href="#评论效果" class="headerlink" title="评论效果"></a>评论效果</h4><p>评论输入框：</p><p><img src="/images/2020/08/1597836434746.png" alt="1597836434746" loading="lazy"></p><p>评论效果：</p><p><img src="/images/2020/08/1597888723132.png" alt="1597888723132" loading="lazy"></p><h3 id="添加-Gitalk-评论系统"><a href="#添加-Gitalk-评论系统" class="headerlink" title="添加 Gitalk 评论系统"></a>添加 Gitalk 评论系统</h3><p>Gitalk 是一个基于 Github issues 的评论系统。使用之前需要确保你指定的 Github 仓库是公开的，并开启了 issues 功能。如果你遇到了问题，请查看 Gitalk 的文档：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2dpdGFsay9naXRhbGslRTMlODAlODI=">https://github.com/gitalk/gitalk。<i class="fa fa-external-link-alt"></i></span></p><h4 id="注册-Gitalk"><a href="#注册-Gitalk" class="headerlink" title="注册 Gitalk"></a>注册 Gitalk</h4><p>首先，你需要注册一个新的 <strong>GitHub Application</strong> 来授权，点击<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NldHRpbmdzL2FwcGxpY2F0aW9ucy9uZXc=">这里<i class="fa fa-external-link-alt"></i></span>注册。这样可以获取所需的 <code>client ID</code> 和 <code>client secret</code>。</p><p><img src="/images/2020/08/1597836162033.png" alt="1597836162033" loading="lazy"></p><p>注册成功后，可以在 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NldHRpbmdzL2RldmVsb3BlcnM=">开发者页面<i class="fa fa-external-link-alt"></i></span> 看到如下配置：</p><p><img src="/images/2020/08/1597836277711.png" alt="1597836277711" loading="lazy"></p><h4 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h4><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">gitalk</span><span class="token punctuation">:</span>  <span class="token comment"># 是否启用</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment"># Github 用户名</span>  <span class="token key atrule">github_id</span><span class="token punctuation">:</span> jueee  <span class="token comment"># Github 仓库名（需要是公开的仓库）</span>  <span class="token key atrule">repo</span><span class="token punctuation">:</span> jueee.github.io  <span class="token comment"># Github 应用程序客户端 ID</span>  <span class="token key atrule">client_id</span><span class="token punctuation">:</span> e61b622bb2d41a9820db  <span class="token comment"># Github 应用程序客户端密钥</span>  <span class="token key atrule">client_secret</span><span class="token punctuation">:</span> 23dafd8976002c89a46d97d426ea8e5a253dba40  <span class="token comment"># GitHub 仓库所有者和合作者，只有这些人可以初始化 Gitalk</span>  <span class="token key atrule">admin_user</span><span class="token punctuation">:</span> jueee  <span class="token comment"># 类似于 B 站的关灯模式</span>  <span class="token key atrule">distraction_free_mode</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment"># 如果你想让每一个参观你网站的人看到统一的语言，你可以在这里设置，</span>  <span class="token comment"># 可选值：en, zh-CN, es-ES, fr, ru, zh-TW</span>  <span class="token key atrule">language</span><span class="token punctuation">:</span> zh<span class="token punctuation">-</span>CN</code></pre><p>【注】以上配置的 <code>github_id</code>，<code>client_id</code>，<code>client_secret</code>，<code>distraction_free_mode</code> 等配置，与官方文档不一致，需特别注意！</p><h4 id="评论效果-1"><a href="#评论效果-1" class="headerlink" title="评论效果"></a>评论效果</h4><p>评论输入框：</p><p><img src="/images/2020/08/1597888405578.png" alt="1597888405578" loading="lazy"></p><p>评论效果：</p><p><img src="/images/2020/08/1597888454984.png" alt="1597888454984" loading="lazy"></p><p>GitHub 的 issues：</p><p><img src="/images/2020/08/1597888501799.png" alt="1597888501799" loading="lazy"></p>]]></content>
    
    <summary type="html">
    
      为博客系统新增 gitalk、valine 评论系统。
    
    </summary>
    
    
      <category term="Blog" scheme="https://jueee.github.io/categories/Blog/"/>
    
    
      <category term="Blog" scheme="https://jueee.github.io/tags/Blog/"/>
    
      <category term="HTML" scheme="https://jueee.github.io/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>Robots.txt 文件介绍及生成</title>
    <link href="https://jueee.github.io/2020/08/2020-08-18-Robots.txt%E6%96%87%E4%BB%B6%E4%BB%8B%E7%BB%8D%E5%8F%8A%E7%94%9F%E6%88%90/"/>
    <id>https://jueee.github.io/2020/08/2020-08-18-Robots.txt%E6%96%87%E4%BB%B6%E4%BB%8B%E7%BB%8D%E5%8F%8A%E7%94%9F%E6%88%90/</id>
    <published>2020-08-18T00:00:00.000Z</published>
    <updated>2020-08-19T03:26:36.065Z</updated>
    
    <content type="html"><![CDATA[<p>Robots.txt 是存放在站点根目录下的一个纯文本文件。虽然它的设置很简单，但是作用却很强大。它可以指定搜索引擎蜘蛛只抓取指定的内容，或者是禁止搜索引擎蜘蛛抓取网站的部分或全部内容。</p><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p>Robots.txt 文件应该放在网站根目录下，并且该文件是可以通过互联网进行访问的。</p><p>例如：如果您的网站地址是 <code>http://www.yourdomain.com/</code>。那么，该文件必须能够通过 <code>http://www.yourdomain.com/robots.txt</code> 打开并看到里面的内容。</p><p>例如：<a href="https://jueee.github.io/robots.txt">https://jueee.github.io/robots.txt</a></p><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><h4 id="User-agent"><a href="#User-agent" class="headerlink" title="User-agent"></a>User-agent</h4><p>用于描述搜索引擎蜘蛛的名字，在 "Robots.txt" 文件中，如果有多条 User-agent 记录说明有多个搜索引擎蜘蛛会受到该协议的限制，对该文件来说，至少要有一条 User-agent 记录。</p><p>如果该项的值设为 <code>*</code>，则该协议对任何搜索引擎蜘蛛均有效，在 "Robots.txt" 文件中，"<code>User-agent:*</code>" 这样的记录只能有一条。</p><h4 id="Disallow"><a href="#Disallow" class="headerlink" title="Disallow"></a>Disallow</h4><p>用于描述不希望被访问到的一个 URL，这个 URL 可以是一条完整的路径，也可以是部分的，任何以 Disallow 开头的 URL 均不会被 Robot 访问到。</p><p>举例：</p><p>例一："Disallow:/help" 是指 /help.html 和 /help/index.html 都不允许搜索引擎蜘蛛抓取。</p><p>例二："Disallow:/help/" 是指允许搜索引擎蜘蛛抓取 /help.html，而不能抓取 /help/index.html。</p><p>例三：Disallow 记录为空说明该网站的所有页面都允许被搜索引擎抓取，在 "/robots.txt" 文件中，至少要有一条 Disallow 记录。如果 "/robots.txt" 是一个空文件，则对于所有的搜索引擎蜘蛛，该网站都是开放的可以被抓取的。</p><h4 id="注释符"><a href="#注释符" class="headerlink" title="注释符"></a>注释符</h4><p><code>#</code> 是 Robots.txt 协议中的注释符。</p><h3 id="综合例子"><a href="#综合例子" class="headerlink" title="综合例子"></a>综合例子</h3><p>例一：通过 "/robots.txt" 禁止所有搜索引擎蜘蛛抓取 "/bin/cgi/" 目录，以及 "/tmp/" 目录和 /foo.html 文件，设置方法如下：</p><pre class="language-none"><code class="language-none">User-agent: *Disallow: /bin/cgi/Disallow: /tmp/Disallow: /foo.html</code></pre><p>例二：通过 "/robots.txt" 只允许某个搜索引擎抓取，而禁止其他的搜索引擎抓取。如：只允许名为 "slurp" 的搜索引擎蜘蛛抓取，而拒绝其他的搜索引擎蜘蛛抓取 "/cgi/" 目录下的内容，设置方法如下：</p><pre class="language-none"><code class="language-none">User-agent: *Disallow: /cgi/User-agent: slurpDisallow:</code></pre><p>例三：禁止任何搜索引擎抓取我的网站，设置方法如下：</p><pre class="language-none"><code class="language-none">User-agent: *Disallow: /</code></pre><p>例四：只禁止某个搜索引擎抓取我的网站如：只禁止名为 “slurp” 的搜索引擎蜘蛛抓取，设置方法如下：</p><pre class="language-none"><code class="language-none">User-agent: slurpDisallow: /</code></pre>]]></content>
    
    <summary type="html">
    
      Robots.txt 是存放在站点根目录下的一个纯文本文件。虽然它的设置很简单，但是作用却很强大。它可以指定搜索引擎蜘蛛只抓取指定的内容，或者是禁止搜索引擎蜘蛛抓取网站的部分或全部内容。
    
    </summary>
    
    
      <category term="Blog" scheme="https://jueee.github.io/categories/Blog/"/>
    
    
      <category term="Blog" scheme="https://jueee.github.io/tags/Blog/"/>
    
      <category term="SEO" scheme="https://jueee.github.io/tags/SEO/"/>
    
  </entry>
  
  <entry>
    <title>博客网站管理员工具</title>
    <link href="https://jueee.github.io/2020/08/2020-08-18-%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E7%AE%A1%E7%90%86%E5%91%98%E5%B7%A5%E5%85%B7/"/>
    <id>https://jueee.github.io/2020/08/2020-08-18-%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E7%AE%A1%E7%90%86%E5%91%98%E5%B7%A5%E5%85%B7/</id>
    <published>2020-08-18T00:00:00.000Z</published>
    <updated>2020-08-20T02:07:20.015Z</updated>
    
    <content type="html"><![CDATA[<p>网站管理员工具需要对网站域名所有权进行验证，通常是通过上传指定文件、增加 META 或者修改网站 DNS 来验证管理员身份，通过验证后，网站管理员可以查询到自己网站的各类统计信息。</p><a id="more"></a><h3 id="网站管理员工具"><a href="#网站管理员工具" class="headerlink" title="网站管理员工具"></a>网站管理员工具</h3><h4 id="Google网站管理员工具"><a href="#Google网站管理员工具" class="headerlink" title="Google网站管理员工具"></a>Google 网站管理员工具</h4><p>设置 <span class="exturl" data-url="aHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS93ZWJtYXN0ZXJzL3Rvb2xz">Google 网站站长工具<i class="fa fa-external-link-alt"></i></span>的验证字符串 用于提交站点地图。</p><p>登录到 Google 网站站长工具，然后转到验证方法并选择 <code>HTML Tag</code>，您将获得一些代码：</p><pre class="language-none"><code class="language-none">&lt;meta name="google-site-verification" content="XXXXXXXXXXXXXXXXXXXXXXX"&gt;</code></pre><p>复制 <code>XXXXXXXXXXXXXXXXXXXXXXX</code> 的价值 <code>content</code> 的关键。<br>编辑主题配置文件并添加或更改 <code>google_site_verification</code> 部分：</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">google_site_verification</span><span class="token punctuation">:</span> XXXXXXXXXXXXXXXXXXXXXXX</code></pre><h4 id="Bing网站管理员工具"><a href="#Bing网站管理员工具" class="headerlink" title="Bing网站管理员工具"></a>Bing 网站管理员工具</h4><p>设置 <span class="exturl" data-url="aHR0cHM6Ly93d3cuYmluZy5jb20vd2VibWFzdGVyLw==">Bing 网站管理员工具<i class="fa fa-external-link-alt"></i></span>的验证字符串 用于提交站点地图。</p><p>登录到 Bing 网站管理员工具，然后转到验证方法并选择 <code>HTML Tag</code>，您将获得一些代码：</p><pre class="language-none"><code class="language-none">&lt;meta name="msvalidate.01" content="XXXXXXXXXXXXXXXXXXXXXXX"&gt;</code></pre><p>复制 <code>XXXXXXXXXXXXXXXXXXXXXXX</code> 的价值 <code>content</code> 的关键。<br>编辑主题配置文件并添加或更改 <code>bing_site_verification</code> 部分：</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">bing_site_verification</span><span class="token punctuation">:</span> XXXXXXXXXXXXXXXXXXXXXXX</code></pre><h4 id="Yandex网站管理员工具"><a href="#Yandex网站管理员工具" class="headerlink" title="Yandex网站管理员工具"></a>Yandex 网站管理员工具</h4><p>设置 <span class="exturl" data-url="aHR0cHM6Ly93ZWJtYXN0ZXIueWFuZGV4LnJ1Lw==">Yandex 网站管理员工具<i class="fa fa-external-link-alt"></i></span>的验证字符串 用于提交站点地图。</p><p>登录到 Yandex 网站管理员工具，然后转到验证方法并选择 <code>Meta Tag</code>，您将获得一些代码：</p><pre class="language-none"><code class="language-none">&lt;meta name="yandex-verification" content="XXXXXXXXXXXXXXXXXXXXXXX"&gt;</code></pre><p>复制 <code>XXXXXXXXXXXXXXXXXXXXXXX</code> 的价值 <code>content</code> 的关键。<br>编辑主题配置文件并添加或更改 <code>yandex_site_verification</code> 部分：</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">yandex_site_verification</span><span class="token punctuation">:</span> XXXXXXXXXXXXXXXXXXXXXXX</code></pre><h4 id="百度网站管理员工具"><a href="#百度网站管理员工具" class="headerlink" title="百度网站管理员工具"></a>百度网站管理员工具</h4><p>设置<span class="exturl" data-url="aHR0cHM6Ly96aXl1YW4uYmFpZHUuY29tL3NpdGUv">百度网站管理员工具<i class="fa fa-external-link-alt"></i></span>的验证字符串 用于提交站点地图。</p><p>登录百度网站管理员工具，转到验证方法并选择 <code>HTML Tag</code>，您将获得一些代码：</p><pre class="language-none"><code class="language-none">&lt;meta name="baidu-site-verification" content="XXXXXXXXXXXXXXXXXXXXXXX"&gt;</code></pre><p>复制 <code>XXXXXXXXXXXXXXXXXXXXXXX</code> 的价值 <code>content</code> 的关键。<br>编辑主题配置文件并添加或更改 <code>baidu_site_verification</code> 部分：</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">baidu_site_verification</span><span class="token punctuation">:</span> XXXXXXXXXXXXXXXXXXXXXXX</code></pre><p>NexT 还支持百度推送，以便博客将 URL 自动推送到百度，这对于 SEO 非常有用。您可以通过将值设置 <code>baidu_push</code> 为 <code>true</code>in 来启用它主题配置文件。</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">baidu_push</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></code></pre><h3 id="网站管理员工具优化"><a href="#网站管理员工具优化" class="headerlink" title="网站管理员工具优化"></a>网站管理员工具优化</h3><h4 id="多个-h1-标记"><a href="#多个-h1-标记" class="headerlink" title="多个 h1 标记"></a>多个 h1 标记</h4><p>通过 Bing 的 <span class="exturl" data-url="aHR0cHM6Ly93d3cuYmluZy5jb20vd2VibWFzdGVycy91cmxpbnNwZWN0aW9uP3NpdGVVcmw9aHR0cDovL2p1ZWVlLmdpdGh1Yi5pby8=">URL 检查<i class="fa fa-external-link-alt"></i></span>，可以发现” 多个 h1 标记 “ 的问题：</p><p><img src="/images/2020/08/1597744034857.png" alt="1597744034857" loading="lazy"></p><p>发现是由于站点标题和博客标题都采用了 h1 标记导致的。</p><p>H1 标签是用来修饰主标题的，如果用多个 H1 标签，就可能会让搜索引擎不知道你这个网站的主要标题内容是什么，然后就可能会淡化标题关键词的排名。</p><p>需要修改 <code>node_modules\hexo-theme-next\layout\_partials\header\brand.njk</code> 的 <code>site-title</code> 为 h2：</p><p><img src="/images/2020/08/1597744215606.png" alt="1597744215606" loading="lazy"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;网站管理员工具需要对网站域名所有权进行验证，通常是通过上传指定文件、增加 META 或者修改网站 DNS 来验证管理员身份，通过验证后，网站管理员可以查询到自己网站的各类统计信息。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Blog" scheme="https://jueee.github.io/categories/Blog/"/>
    
    
      <category term="Blog" scheme="https://jueee.github.io/tags/Blog/"/>
    
      <category term="SEO" scheme="https://jueee.github.io/tags/SEO/"/>
    
  </entry>
  
  <entry>
    <title>Arthas 之根据输入查找命令执行类</title>
    <link href="https://jueee.github.io/2020/08/2020-08-17-Arthas%E4%B9%8B%E6%A0%B9%E6%8D%AE%E8%BE%93%E5%85%A5%E6%9F%A5%E6%89%BE%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%B1%BB/"/>
    <id>https://jueee.github.io/2020/08/2020-08-17-Arthas%E4%B9%8B%E6%A0%B9%E6%8D%AE%E8%BE%93%E5%85%A5%E6%9F%A5%E6%89%BE%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%B1%BB/</id>
    <published>2020-08-17T00:00:00.000Z</published>
    <updated>2020-08-19T03:26:36.063Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍 Arthas 命令路由的整个过程，包括如何注册命令、如何读取客户端的输入、如何根据输入找到对应的命令执行类。最后以一个基础命令 help 为例，简要介绍命令执行类是如何执行，如何接收参数，以及如何向客户端返回数据的。</p><h3 id="在ShellServer中注册命令"><a href="#在ShellServer中注册命令" class="headerlink" title="在ShellServer中注册命令"></a>在 ShellServer 中注册命令</h3><p>ShellServer 是与命令行交互的服务端的核心类，启动 Arthas 服务端的整个过程（<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvYXJ0aGFzL2Jsb2IvbWFzdGVyL2NvcmUvc3JjL21haW4vamF2YS9jb20vdGFvYmFvL2FydGhhcy9jb3JlL3NlcnZlci9BcnRoYXNCb290c3RyYXAuamF2YQ==">com.taobao.arthas.core.server.ArthasBootstrap<i class="fa fa-external-link-alt"></i></span> 类的 bind () 方法）都是围绕着 ShellServer 进行的。</p><p>ShellServer 是开源项目 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2VjbGlwc2UtdmVydHgvdmVydC54">vert.x<i class="fa fa-external-link-alt"></i></span> 提供的，Arthas 仅在此之上进行了少量的二次开发。</p><p>在<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvYXJ0aGFzL2Jsb2IvbWFzdGVyL2NvcmUvc3JjL21haW4vamF2YS9jb20vdGFvYmFvL2FydGhhcy9jb3JlL3NlcnZlci9BcnRoYXNCb290c3RyYXAuamF2YQ=="> ArthasBootstrap<i class="fa fa-external-link-alt"></i></span>&nbsp;类的 bind () 方法中，首先通过一个自建的类 <code>BuiltinCommandPack</code> 来读取所有的命令类：</p><p><img src="/images/2020/08/1597663881528.png" alt="1597663881528" loading="lazy"></p><p>而这个 <code>BuiltinCommandPack</code> 是怎样运转的呢？非常简单，仅仅是将一个个类添加到一个 list 里而已。</p><p>见 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvYXJ0aGFzL2Jsb2IvbWFzdGVyL2NvcmUvc3JjL21haW4vamF2YS9jb20vdGFvYmFvL2FydGhhcy9jb3JlL2NvbW1hbmQvQnVpbHRpbkNvbW1hbmRQYWNrLmphdmE=">BuiltinCommandPack.java<i class="fa fa-external-link-alt"></i></span>：</p><p><img src="/images/2020/08/1597663968735.png" alt="1597663968735" loading="lazy"></p><p>接着将所有的 CommandResolver 都调用 ShellServer 的 registerCommandResolver () 方法注册进 ShellServer，整个命令注册的过程就完成了：</p><p><img src="/images/2020/08/1597664133197.png" alt="1597664133197" loading="lazy"></p><h3 id="读取客户端的输入"><a href="#读取客户端的输入" class="headerlink" title="读取客户端的输入"></a>读取客户端的输入</h3><p>真正接收客户端输入的是 ShellServer 中注册的 TermServer，Arthas 默认注册了两个 TermServer：</p><ul><li>提供 Telnet 客户端的<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvYXJ0aGFzL2Jsb2IvbWFzdGVyL2NvcmUvc3JjL21haW4vamF2YS9jb20vdGFvYmFvL2FydGhhcy9jb3JlL3NoZWxsL3Rlcm0vaW1wbC9UZWxuZXRUZXJtU2VydmVyLmphdmE="> TelnetTermServer<i class="fa fa-external-link-alt"></i></span></li><li>提供 WebSocket 客户端的<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvYXJ0aGFzL2Jsb2IvbWFzdGVyL2NvcmUvc3JjL21haW4vamF2YS9jb20vdGFvYmFvL2FydGhhcy9jb3JlL3NoZWxsL3Rlcm0vaW1wbC9IdHRwVGVybVNlcnZlci5qYXZh"> HttpTermServer<i class="fa fa-external-link-alt"></i></span></li></ul><p>见 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvYXJ0aGFzL2Jsb2IvbWFzdGVyL2NvcmUvc3JjL21haW4vamF2YS9jb20vdGFvYmFvL2FydGhhcy9jb3JlL3NlcnZlci9BcnRoYXNCb290c3RyYXAuamF2YQ==">ArthasBootstrap<i class="fa fa-external-link-alt"></i></span> 类的 bind () 方法：</p><p><img src="/images/2020/08/1597664402161.png" alt="1597664402161" loading="lazy"></p><p>这两个 TermServer 的实现在读取客户端输入的部分是一样的：</p><p><img src="/images/2020/08/1597664489423.png" alt="1597664489423" loading="lazy"></p><p>客户端的输入到来时，通过 TermServer 来 handle，而这个 TermServer 是哪儿来的呢？是从<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvYXJ0aGFzL2Jsb2IvbWFzdGVyL2NvcmUvc3JjL21haW4vamF2YS9jb20vdGFvYmFvL2FydGhhcy9jb3JlL3NoZWxsL3Rlcm0vaW1wbC9IdHRwVGVybVNlcnZlci5qYXZh"> ShellServerImpl<i class="fa fa-external-link-alt"></i></span> 中传来的 TermServerTermHandler。</p><p>而这个<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvYXJ0aGFzL2Jsb2IvbWFzdGVyL2NvcmUvc3JjL21haW4vamF2YS9jb20vdGFvYmFvL2FydGhhcy9jb3JlL3NoZWxsL2hhbmRsZXJzL3NlcnZlci9UZXJtU2VydmVyVGVybUhhbmRsZXIuamF2YQ=="> TermServerTermHandler<i class="fa fa-external-link-alt"></i></span>是怎样 handle 的呢？调用 ShellServer 的 handleTerm () 方法。</p><p><img src="/images/2020/08/1597665051394.png" alt="1597665051394" loading="lazy"></p><p>在这里，一个 session 就是一个客户端的连接（这很容易理解），而 ShellImpl 的 readline () 方法，就是读取客户端输入的方法。见：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvYXJ0aGFzL2Jsb2IvbWFzdGVyL2NvcmUvc3JjL21haW4vamF2YS9jb20vdGFvYmFvL2FydGhhcy9jb3JlL3NoZWxsL2ltcGwvU2hlbGxJbXBsLmphdmE=">ShellImpl<i class="fa fa-external-link-alt"></i></span></p><p><img src="/images/2020/08/1597665260376.png" alt="1597665260376" loading="lazy"></p><h3 id="查找对应的命令执行类"><a href="#查找对应的命令执行类" class="headerlink" title="查找对应的命令执行类"></a>查找对应的命令执行类</h3><p>ShellImpl 的 readline () 方法，最终将客户端的输入转换为 String，交给 ShellLineHandler 的 handle () 方法来处理。</p><p>在<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvYXJ0aGFzL2Jsb2IvbWFzdGVyL2NvcmUvc3JjL21haW4vamF2YS9jb20vdGFvYmFvL2FydGhhcy9jb3JlL3NoZWxsL2hhbmRsZXJzL3NoZWxsL1NoZWxsTGluZUhhbmRsZXIuamF2YQ=="> ShellLineHandler<i class="fa fa-external-link-alt"></i></span>的 handle () 方法中，首先把 String 类型的输入转换为第三方组件 CLI 中的 CliToken 的 List：</p><p><img src="/images/2020/08/1597665436179.png" alt="1597665436179" loading="lazy"></p><p>在 List<clitoken> 中，first 是输入的命令，而剩余部分则是命令的参数。在拿到输入的命令后，先做一些判断，处理几个内建命令：</clitoken></p><p><img src="/images/2020/08/1597665536086.png" alt="1597665536086" loading="lazy"></p><ul><li>输入的是 exit、logout 或 quit，将会直接关闭客户端。</li><li>输入的是 jobs，将会返回当前正在后台执行的异步任务。</li><li>输入的是 fg，将会将暂停的异步任务拉到前台执行。</li><li>输入的是 bg，将会将暂停的异步任务放到后台执行。</li><li>输入的是 kill，将会强制终止所有<span class="exturl" data-url="aHR0cHM6Ly9hbGliYWJhLmdpdGh1Yi5pby9hcnRoYXMvYXN5bmMuaHRtbA==">异步任务<i class="fa fa-external-link-alt"></i></span>。</li></ul><p>如果输入的不是这些关键词，则开始创建 Job。</p><p>创建 Job 又是一个非常绕的过程，从 ShellLineHandler.createJob () 走到 ShellImpl.createJob () 再走到 JobControllerImpl.createJob ()。</p><p>见：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvYXJ0aGFzL2Jsb2IvbWFzdGVyL2NvcmUvc3JjL21haW4vamF2YS9jb20vdGFvYmFvL2FydGhhcy9jb3JlL3NoZWxsL3N5c3RlbS9pbXBsL0pvYkNvbnRyb2xsZXJJbXBsLmphdmE=">JobControllerImpl.java<i class="fa fa-external-link-alt"></i></span></p><p><img src="/images/2020/08/1597665729558.png" alt="1597665729558" loading="lazy"></p><p>主要是调用 createProcess () 方法创建 Process，判断是在前台执行还是在后台执行，然后用 Process 生成 Job。</p><p>核心的 createProcess () 方法：</p><p><img src="/images/2020/08/1597665851789.png" alt="1597665851789" loading="lazy"></p><p>然后到了将输入路由到命令执行类的地方了！</p><p>开始看<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvYXJ0aGFzL2Jsb2IvbWFzdGVyL2NvcmUvc3JjL21haW4vamF2YS9jb20vdGFvYmFvL2FydGhhcy9jb3JlL3NoZWxsL3N5c3RlbS9pbXBsL0ludGVybmFsQ29tbWFuZE1hbmFnZXIuamF2YQ=="> InternalCommandManager<i class="fa fa-external-link-alt"></i></span>的 getCommand () 方法：</p><p><img src="/images/2020/08/1597665933730.png" alt="1597665933730" loading="lazy"></p><p>到这里，根据客户端的输入寻找对应的命令执行类的整个流程终于结束了，接下来就是各个命令执行类自己发挥的时刻了。</p><h3 id="help命令的执行过程"><a href="#help命令的执行过程" class="headerlink" title="help命令的执行过程"></a>help 命令的执行过程</h3><p>下面我以基础命令 help 为例，简要介绍命令执行类是如何执行，如何接收参数，以及如何向客户端返回数据的。</p><p>help 命令对应的命令执行类是<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvYXJ0aGFzL2Jsb2IvbWFzdGVyL2NvcmUvc3JjL21haW4vamF2YS9jb20vdGFvYmFvL2FydGhhcy9jb3JlL2NvbW1hbmQvYmFzaWMxMDAwL0hlbHBDb21tYW5kLmphdmE="> HelpCommand<i class="fa fa-external-link-alt"></i></span>，其中 process () 方法是命令执行类的核心方法：</p><p><img src="/images/2020/08/1597666134279.png" alt="1597666134279" loading="lazy"></p><p>可以看到，help 命令的 process () 方法非常简单，就是获取所有的命令，生成 String 类型的文本。</p><p>不过这里有一点特殊之处，help 指令可以输入参数。根据参数中传来的命令生成的命令帮助内容。</p><ul><li>如果参数是空，返回 mainHelp () 方法生成的全局帮助内容</li><li>如果参数不为空，则返回 commandHelp () 方法</li></ul><p>那么，help 指令是如何接收参数的呢？奥妙就在下面的这个方法里了：</p><p><img src="/images/2020/08/1597666365077.png" alt="1597666365077" loading="lazy"></p><p>使用 @Argument 注解的方法用来接收参数，在这里就是把输入的内容放到 cmd 这个变量里，然后 findCommand () 方法去判断 cmd 变量的内容是否有命令与之相匹配：</p><p><img src="/images/2020/08/1597666394962.png" alt="1597666394962" loading="lazy"></p><p>另外，输出到客户端的内容并不是简单的文本，而是通过淘宝的 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvdGV4dC11aQ==">text-ui<i class="fa fa-external-link-alt"></i></span> 包进行了排版。</p><p>见 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvYXJ0aGFzL2Jsb2IvbWFzdGVyL2NvcmUvc3JjL21haW4vamF2YS9jb20vdGFvYmFvL2FydGhhcy9jb3JlL2NvbW1hbmQvdmlldy9IZWxwVmlldy5qYXZh">HelpView.java<i class="fa fa-external-link-alt"></i></span>：</p><p><img src="/images/2020/08/1597666484624.png" alt="1597666484624" loading="lazy"></p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3M/X19iaXo9TXpVNE9EYzBPVGsyTmc9PSZtaWQ9MjI0NzQ4MzkwNyZpZHg9MSZzbj0wNmIwZGU1YjY0OTU1ZGZkMzlmNjA1YjZjMjJlMzMxZSZjaGtzbT1mZGQ5NGZlMmNhYWVjNmY0YzhlZmUzNjUzZWY0M2NhMzg3MzJlMGY4YTdjZWYwNjA5Nzg1ZGRkMjAzZDExZDM4ZjQ2NWJlZGZlYzdkJm1wc2hhcmU9MSZzY2VuZT0xJnNyY2lkPTA4MTVpY3NRYWtuVDNWMFRjcWNXZmR3UyZzaGFyZXJfc2hhcmV0aW1lPTE1OTc0MjExODkwMjEmc2hhcmVyX3NoYXJlaWQ9NDljNjExMjFmOTIwMDQ5MDJiZWNlYTcwNTcxNmNjYTcma2V5PWRlODc5ZDFkMDllMmE4YjcyODQ2ZjgzMDg5MDc1OGRhZjc2NzdkNGI4M2U5ZTViZmQ3OTIwYjBhZTY0N2U3MjRmZDkyYjIyODUyNTA0OWEyMDc2MjMwZWI2YzA1YWI2ZGZlZTE4MDI4NjUyZGZmOTFjOTI4OWU1M2JjNjk0OTYzNmM3ZGVhNGE4OTUzMzAzNjdmNmYyYzY0OTZjZTQ2N2ZjNDZmMGNiNzBlZWQ2ZDhiYmEyNjAzY2EwZTEwZWZkMzZlZDMyZWU3ZTM3NTYwMDEzYTgyNmI5NTc0YmZhYzM4MmE4NTY4MDZhMjg1NTMxOTRhN2E2ZjE4NjMxYjQzMDUmYXNjZW5lPTEmdWluPU1UZzBORGsxTlRjd01nPT0mZGV2aWNldHlwZT1XaW5kb3dzKzEwK3g2NCZ2ZXJzaW9uPTYyMDkwNTI5Jmxhbmc9emhfQ04mZXhwb3J0a2V5PUFkNXh6QU5jVmVNeDJ4T2s2Q3plajZFPSZwYXNzX3RpY2tldD12bXFmejVvZ1IxL3dnQXZqdXhraklxOWxwRGtzcnhVdDVEbEJPelhyZ0QyaXRSUEtBcE9zL3A4R3VybGx2Ynpv">参考<i class="fa fa-external-link-alt"></i></span></li></ul>]]></content>
    
    <summary type="html">
    
      介绍 Arthas命令路由的整个过程，包括如何注册命令、如何读取客户端的输入、如何根据输入找到对应的命令执行类。最后以一个基础命令help为例，简要介绍命令执行类是如何执行，如何接收参数，以及如何向客户端返回数据的。
    
    </summary>
    
    
      <category term="Java" scheme="https://jueee.github.io/categories/Java/"/>
    
      <category term="Arthas" scheme="https://jueee.github.io/categories/Java/Arthas/"/>
    
    
      <category term="Java" scheme="https://jueee.github.io/tags/Java/"/>
    
      <category term="Java诊断" scheme="https://jueee.github.io/tags/Java%E8%AF%8A%E6%96%AD/"/>
    
      <category term="Arthas" scheme="https://jueee.github.io/tags/Arthas/"/>
    
  </entry>
  
  <entry>
    <title>Ognl 表达式的基本使用方法</title>
    <link href="https://jueee.github.io/2020/08/2020-08-15-Ognl%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <id>https://jueee.github.io/2020/08/2020-08-15-Ognl%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</id>
    <published>2020-08-15T00:00:00.000Z</published>
    <updated>2020-08-19T03:26:36.061Z</updated>
    
    <content type="html"><![CDATA[<p>OGNL 是 <code>Object-Graph Navigation Language</code>（<strong>对象导航图语言</strong>）的缩写，它是一种功能强大的表达式语言，通过它简单一致的表达式语法，可以存取对象的任意属性，调用对象的方法，遍历整个对象的结构图，实现字段类型转化等功能。它使用相同的表达式去存取对象的属性。这样可以更好的取得数据。</p><h3 id="Ognl-语言介绍"><a href="#Ognl-语言介绍" class="headerlink" title="Ognl 语言介绍"></a>Ognl 语言介绍</h3><p>OGNL 表达式官方指南：<span class="exturl" data-url="aHR0cHM6Ly9jb21tb25zLmFwYWNoZS5vcmcvcHJvcGVyL2NvbW1vbnMtb2dubC9sYW5ndWFnZS1ndWlkZS5odG1s">https://commons.apache.org/proper/commons-ognl/language-guide.html<i class="fa fa-external-link-alt"></i></span></p><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>Ognl 是一个功能强大的表达式语言，用来获取和设置 java 对象的属性 ，它旨在提供一个更高抽象度语法来对 java 对象图进行导航。</p><p>另外，java 中很多可以做的事情，也可以使用 OGNL 来完成，例如：列表映射和选择。</p><p>对于开发者来说，使用 OGNL，可以用简洁的语法来完成对 java 对象的导航。通常来说：通过一个 “路径” 来完成对象信息的导航，这个 “路径” 可以是到 java bean 的某个属性，或者集合中的某个索引的对象，等等，而不是直接使用 get 或者 set 方法来完成。</p><h4 id="三要素"><a href="#三要素" class="headerlink" title="三要素"></a>三要素</h4><p><strong>首先来介绍下 OGNL 的三要素：</strong></p><ul><li><p><strong>表达式（Expression）</strong>：</p><p>表达式是整个 OGNL 的核心内容，所有的 OGNL 操作都是针对表达式解析后进行的。通过表达式来告诉 OGNL 操作到底要干些什么。因此，表达式其实是一个带有语法含义的字符串，整个字符串将规定操作的类型和内容。OGNL 表达式支持大量的表达式，如 “链式访问对象”、表达式计算、甚至还支持 Lambda 表达式。</p></li><li><p><strong>Root 对象</strong>：</p><p>OGNL 的 Root 对象可以理解为 OGNL 的操作对象。当我们指定了一个表达式的时候，我们需要指定这个表达式针对的是哪个具体的对象。而这个具体的对象就是 Root 对象，这就意味着，如果有一个 OGNL 表达式，那么我们需要针对 Root 对象来进行 OGNL 表达式的计算并且返回结果。</p></li><li><p><strong>上下文环境</strong>：</p><p>有个 Root 对象和表达式，我们就可以使用 OGNL 进行简单的操作了，如对 Root 对象的赋值与取值操作。但是，实际上在 OGNL 的内部，所有的操作都会在一个特定的数据环境中运行。这个数据环境就是上下文环境（Context）。OGNL 的上下文环境是一个 Map 结构，称之为 OgnlContext。Root 对象也会被添加到上下文环境当中去。</p><p>说白了上下文就是一个 MAP 结构，它实现了 java.utils.Map 的接口。</p></li></ul><h3 id="使用-Ognl"><a href="#使用-Ognl" class="headerlink" title="使用 Ognl"></a>使用 Ognl</h3><p>引入 Maven：</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>ognl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>ognl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.1.19<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></code></pre><p>示例代码：</p><p>示例类：<code>sample.ognl.Address</code></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Address</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> port<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> address<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Address</span><span class="token punctuation">(</span><span class="token class-name">String</span> port<span class="token punctuation">,</span><span class="token class-name">String</span> address<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>port <span class="token operator">=</span> port<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> address<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>示例类 <code>sample.ognl.User</code>：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Address</span> address<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="Ognl-的基本语法"><a href="#Ognl-的基本语法" class="headerlink" title="Ognl 的基本语法"></a>Ognl 的基本语法</h3><h4 id="对Root对象的访问"><a href="#对Root对象的访问" class="headerlink" title="对Root对象的访问"></a>对 Root 对象的访问</h4><p>OGNL 使用的是一种链式的风格进行对象的访问。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Address</span> address <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Address</span><span class="token punctuation">(</span><span class="token string">"330108"</span><span class="token punctuation">,</span> <span class="token string">"杭州市滨江区"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>user<span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Ognl</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// test</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Ognl</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token string">"name.length"</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 4</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Ognl</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token string">"address"</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Address(port=330108, address=杭州市滨江区)</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Ognl</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token string">"address.port"</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 110003</span></code></pre><h4 id="对上下文对象的访问"><a href="#对上下文对象的访问" class="headerlink" title="对上下文对象的访问"></a>对上下文对象的访问</h4><p>使用 OGNL 的时候如果不设置上下文对象，系统会自动创建一个上下文对象，如果传入的参数当中包含了上下文对象则会使用传入的上下文对象。</p><p>** 当访问上下文环境当中的参数时候，需要在表达式前面加上 '#'**，表示了与访问 Root 对象的区别。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">demo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">OgnlException</span> <span class="token punctuation">{</span>    <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Address</span> address <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Address</span><span class="token punctuation">(</span><span class="token string">"330108"</span><span class="token punctuation">,</span> <span class="token string">"杭州市滨江区"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    context<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"init"</span><span class="token punctuation">,</span> <span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    context<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Ognl</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token string">"#init"</span><span class="token punctuation">,</span> context<span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// hello</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Ognl</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token string">"#user.name"</span><span class="token punctuation">,</span> context<span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// test</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Ognl</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> context<span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// test</span>    <span class="token keyword">return</span> <span class="token string">"this is demo2 method"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="对静态变量的访问"><a href="#对静态变量的访问" class="headerlink" title="对静态变量的访问"></a>对静态变量的访问</h4><p>在 OGNL 表达式当中也可以访问静态变量或者调用静态方法，** 格式如 @[class]@[field/method ()]**。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> ONE <span class="token operator">=</span> <span class="token string">"one"</span><span class="token punctuation">;</span><span class="token comment">// 对静态变量的访问（@[class]@[field/method()]）</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">demo3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">OgnlException</span> <span class="token punctuation">{</span>    <span class="token class-name">Object</span> object1 <span class="token operator">=</span> <span class="token class-name">Ognl</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token string">"@sample.ognl.OgnlDemo@ONE"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Object</span> object2 <span class="token operator">=</span> <span class="token class-name">Ognl</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token string">"@sample.ognl.OgnlDemo@demo2()"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// hello、test、test</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>object1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// one    </span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>object2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// this is demo2 method</span><span class="token punctuation">}</span></code></pre><h4 id="方法的调用"><a href="#方法的调用" class="headerlink" title="方法的调用"></a>方法的调用</h4><p>如果需要调用 Root 对象或者上下文对象当中的方法也可以使用.+ 方法的方式来调用。甚至可以传入参数。</p><p>赋值的时候可以选择上下文当中的元素进行给 Root 对象的 name 属性赋值。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>context<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"rcx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>context<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">,</span> <span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Ognl</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token string">"getName()"</span><span class="token punctuation">,</span> context<span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// null</span><span class="token class-name">Ognl</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token string">"setName(#name)"</span><span class="token punctuation">,</span> context<span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Ognl</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token string">"getName()"</span><span class="token punctuation">,</span> context<span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// rcx</span></code></pre><h4 id="对数组和集合的访问"><a href="#对数组和集合的访问" class="headerlink" title="对数组和集合的访问"></a>对数组和集合的访问</h4><p>OGNL 支持对数组按照数组下标的顺序进行访问。此方式也适用于对集合的访问，对于 Map 支持使用键进行访问。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> strings  <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"aa"</span><span class="token punctuation">,</span> <span class="token string">"bb"</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"aa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"bb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">,</span> <span class="token string">"value1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"key2"</span><span class="token punctuation">,</span> <span class="token string">"value2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>context<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"list"</span><span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>context<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"strings"</span><span class="token punctuation">,</span> strings<span class="token punctuation">)</span><span class="token punctuation">;</span>context<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"map"</span><span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Ognl</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token string">"#strings[0]"</span><span class="token punctuation">,</span> context<span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// aa</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Ognl</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token string">"#list[0]"</span><span class="token punctuation">,</span> context<span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// aa</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Ognl</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token string">"#list[0 + 1]"</span><span class="token punctuation">,</span> context<span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// bb</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Ognl</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token string">"#map['key1']"</span><span class="token punctuation">,</span> context<span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// value1</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Ognl</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token string">"#map['key' + '2']"</span><span class="token punctuation">,</span> context<span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// value2</span></code></pre><p>从上面代码不仅看到了访问数组与集合的方式同时也可以看出来 OGNL 表达式当中支持操作符的简单运算。有如下所示：</p><ul><li>2 + 4 // 整数相加（同时也支持减法、乘法、除法、取余 [% /mod]、）</li><li>"hell" + "lo" // 字符串相加</li><li> i++ // 递增、递减</li><li> i == j // 判断</li><li> var in list // 是否在容器当中</li></ul><h4 id="投影与选择"><a href="#投影与选择" class="headerlink" title="投影与选择"></a>投影与选择</h4><p>OGNL 支持类似数据库当中的选择与投影功能。</p><ul><li><p><strong>投影</strong>：选出集合当中的相同属性组合成一个新的集合。语法为 collection.{XXX}，XXX 就是集合中每个元素的公共属性。</p></li><li><p><strong>选择</strong>：选择就是选择出集合当中符合条件的元素组合成新的集合。语法为 collection.{Y XXX}，其中 Y 是一个选择操作符，XXX 是选择用的逻辑表达式。</p><p>选择操作符有 3 种：</p><ul><li>? ：选择满足条件的所有元素</li><li> ^：选择满足条件的第一个元素</li><li> $：选择满足条件的最后一个元素 </li></ul></li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">User</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"name1"</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">User</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"name2"</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">User</span> p3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"name3"</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">User</span> p4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"name4"</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>p3<span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>p4<span class="token punctuation">)</span><span class="token punctuation">;</span>context<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"list"</span><span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Ognl</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token string">"#list.{age}"</span><span class="token punctuation">,</span> context<span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// [11, 22, 33, 44]</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Ognl</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token string">"#list.{age + '-' + name}"</span><span class="token punctuation">,</span> context<span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// [11-name1, 22-name2, 33-name3, 44-name4]</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Ognl</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token string">"#list.{? #this.age &gt; 22}"</span><span class="token punctuation">,</span> context<span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// [User(name=name3, age=33, address=null), User(name=name4, age=44, address=null)]</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Ognl</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token string">"#list.{^ #this.age &gt; 22}"</span><span class="token punctuation">,</span> context<span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// [User(name=name3, age=33, address=null)]</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Ognl</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token string">"#list.{$ #this.age &gt; 22}"</span><span class="token punctuation">,</span> context<span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// [User(name=name4, age=44, address=null)]</span></code></pre><h4 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h4><p>OGNL 支持直接使用表达式来创建对象。主要有三种情况：</p><ul><li>构造 List 对象：使用 {}, 中间使用 ',' 进行分割如 {"aa", "bb", "cc"}</li><li> 构造 Map 对象：使用 #{}，中间使用 ', 进行分割键值对，键值对使用 ':' 区分，如 #{"key1" : "value1", "key2" : "value2"}</li><li> 构造任意对象：直接使用已知的对象的构造方法进行构造。</li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Ognl</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token string">"#{'key1':'value1'}"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// {key1=value1}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Ognl</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token string">"{'key1','value1'}"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// [key1, value1]</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Ognl</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token string">"new sample.ognl.User()"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// User(name=null, age=0, address=null)</span></code></pre><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
    
    <summary type="html">
    
      OGNL是Object-Graph Navigation Language的缩写，它是一种功能强大的表达式语言，通过它简单一致的表达式语法，可以存取对象的任意属性，调用对象的方法，遍历整个对象的结构图，实现字段类型转化等功能。它使用相同的表达式去存取对象的属性。这样可以更好的取得数据。
    
    </summary>
    
    
      <category term="Java" scheme="https://jueee.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://jueee.github.io/tags/Java/"/>
    
      <category term="Ognl" scheme="https://jueee.github.io/tags/Ognl/"/>
    
  </entry>
  
  <entry>
    <title>Arthas 之定位方法调用问题</title>
    <link href="https://jueee.github.io/2020/08/2020-08-14-Arthas%E4%B9%8B%E5%AE%9A%E4%BD%8D%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8%E9%97%AE%E9%A2%98/"/>
    <id>https://jueee.github.io/2020/08/2020-08-14-Arthas%E4%B9%8B%E5%AE%9A%E4%BD%8D%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8%E9%97%AE%E9%A2%98/</id>
    <published>2020-08-14T00:00:00.000Z</published>
    <updated>2020-08-19T03:26:36.050Z</updated>
    
    <content type="html"><![CDATA[<p>通过 Arthas 中的 trace/monitor/watch/stack/tt 等命令，可以查看方法内部调用信息，从而定位定位方法调用问题。</p><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><p>Spring Boot 启动类 <code>sample.demo.ServerDemoApplication</code>：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServerDemoApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">ServerDemoApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>控制类 <code>sample.demo.controller.UserController</code>：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">UserService</span> userService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/user"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> uid<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token comment">// 模拟用户查询</span>        userService<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>uid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> hashMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"uid"</span><span class="token punctuation">,</span> uid<span class="token punctuation">)</span><span class="token punctuation">;</span>        hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"name"</span> <span class="token operator">+</span> uid<span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>hashMap<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> hashMap<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Service 类：<code>sample.demo.service.UserService</code>：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> uid<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token function">check</span><span class="token punctuation">(</span>uid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">service</span><span class="token punctuation">(</span>uid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">redis</span><span class="token punctuation">(</span>uid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">mysql</span><span class="token punctuation">(</span>uid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> uid<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            count <span class="token operator">+=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"service  end {}"</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">redis</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> uid<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            count <span class="token operator">+=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"redis  end {}"</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mysql</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> uid<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token keyword">long</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            count <span class="token operator">+=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"mysql end {}"</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> uid<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>uid <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> uid <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"uid不正确，uid:{}"</span><span class="token punctuation">,</span> uid<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"uid不正确"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="trace（内部调用路径）"><a href="#trace（内部调用路径）" class="headerlink" title="trace（内部调用路径）"></a>trace（内部调用路径）</h3><h4 id="方法介绍"><a href="#方法介绍" class="headerlink" title="方法介绍"></a>方法介绍</h4><p>通过 Arthas 中的 trace 命令，可以查看方法内部调用路径，并输出方法路径上的每个节点上耗时。</p><p>官方文档：</p><blockquote><p><span class="exturl" data-url="aHR0cHM6Ly9hbGliYWJhLmdpdGh1Yi5pby9hcnRoYXMvdHJhY2UuaHRtbA==">https://alibaba.github.io/arthas/trace.html<i class="fa fa-external-link-alt"></i></span></p></blockquote><h4 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h4><p>使用 <code>thread --help</code> 获取 thread 命令的帮助信息：</p><p><img src="/images/2020/08/1597393992311.png" alt="1597393992311" loading="lazy"></p><p>主要参数说明如下：</p><table><thead><tr><th>参数名称</th><th>参数说明</th></tr></thead><tbody><tr><td><em> class-pattern</em></td><td> 类名表达式匹配</td></tr><tr><td><em> method-pattern</em></td><td> 方法名表达式匹配</td></tr><tr><td><em> condition-express</em></td><td> 条件表达式</td></tr><tr><td> [E]</td><td> 开启正则表达式匹配，默认为通配符匹配</td></tr><tr><td><code>[n:]</code></td><td>命令执行次数</td></tr><tr><td><code>#cost</code></td><td>方法执行耗时</td></tr></tbody></table><h4 id="定位耗时问题"><a href="#定位耗时问题" class="headerlink" title="定位耗时问题"></a>定位耗时问题</h4><p>使用 **trace ** 命令开始检测耗时情况。</p><pre class="language-none"><code class="language-none">trace sample.demo.controller.UserController getUser</code></pre><p>结果如下：</p><p><img src="/images/2020/08/1597402146114.png" alt="1597402146114" loading="lazy"></p><p>继续跟踪耗时高的方法，然后再次访问。</p><pre class="language-none"><code class="language-none">trace sample.demo.TraceService get</code></pre><p>结果如下：</p><p><img src="/images/2020/08/1597402247630.png" alt="1597402247630" loading="lazy"></p><p>很清楚的看到是 <code>TraceService</code> 的 <code>mysql</code> 方法耗时是最高的。</p><h3 id="monitor（方法调用监控）"><a href="#monitor（方法调用监控）" class="headerlink" title="monitor（方法调用监控）"></a>monitor（方法调用监控）</h3><h4 id="方法介绍-1"><a href="#方法介绍-1" class="headerlink" title="方法介绍"></a>方法介绍</h4><p>monitor 命令可以对匹配 <code>class-pattern</code>／<code>method-pattern</code> 的类、方法的调用进行监控。</p><p>官方文档：</p><blockquote><p><span class="exturl" data-url="aHR0cHM6Ly9hbGliYWJhLmdpdGh1Yi5pby9hcnRoYXMvbW9uaXRvci5odG1s">https://alibaba.github.io/arthas/monitor.html<i class="fa fa-external-link-alt"></i></span></p></blockquote><h4 id="参数说明-1"><a href="#参数说明-1" class="headerlink" title="参数说明"></a>参数说明</h4><p>使用 <code>monitor --help</code> 获取 monitor 命令的帮助信息：</p><p><img src="/images/2020/08/1597402367532.png" alt="1597402367532" loading="lazy"></p><p>方法拥有一个命名参数 <code>[c:]</code>，意思是统计周期（cycle of output），拥有一个整型的参数值</p><table><thead><tr><th>参数名称</th><th>参数说明</th></tr></thead><tbody><tr><td><em> class-pattern</em></td><td> 类名表达式匹配</td></tr><tr><td><em> method-pattern</em></td><td> 方法名表达式匹配</td></tr><tr><td> [E]</td><td> 开启正则表达式匹配，默认为通配符匹配</td></tr><tr><td><code>[c:]</code></td><td>统计周期，默认值为 120 秒</td></tr></tbody></table><h4 id="监控的维度说明"><a href="#监控的维度说明" class="headerlink" title="监控的维度说明"></a>监控的维度说明</h4><table><thead><tr><th>监控项</th><th>说明</th></tr></thead><tbody><tr><td> timestamp</td><td> 时间戳</td></tr><tr><td> class</td><td>Java 类</td></tr><tr><td> method</td><td> 方法（构造方法、普通方法）</td></tr><tr><td>total</td><td> 调用次数</td></tr><tr><td> success</td><td> 成功次数</td></tr><tr><td> fail</td><td> 失败次数</td></tr><tr><td> rt</td><td> 平均 RT</td></tr><tr><td>fail-rate</td><td> 失败率</td></tr></tbody></table><h4 id="统计方法耗时"><a href="#统计方法耗时" class="headerlink" title="统计方法耗时"></a>统计方法耗时</h4><p>使用 <strong>monitor</strong> 命令监控统计方法的执行情况。</p><p>每 10 秒统计一次 <code>com.UserServiceImpl</code> 类的 <code>get</code> 方法执行情况。</p><pre class="language-none"><code class="language-none">monitor -c 10 sample.demo.controller.UserController getUser</code></pre><p><img src="/images/2020/08/1597402331522.png" alt="1597402331522" loading="lazy"></p><h3 id="watch（观察方法信息）"><a href="#watch（观察方法信息）" class="headerlink" title="watch（观察方法信息）"></a>watch（观察方法信息）</h3><h4 id="方法介绍-2"><a href="#方法介绍-2" class="headerlink" title="方法介绍"></a>方法介绍</h4><p>watch 让你能方便的观察到指定方法的调用情况。能观察到的范围为：<code>返回值</code>、<code>抛出异常</code>、<code>入参</code>，通过编写 <code>OGNL</code> 表达式进行对应变量的查看。</p><p>官方文档：</p><blockquote><p><span class="exturl" data-url="aHR0cHM6Ly9hbGliYWJhLmdpdGh1Yi5pby9hcnRoYXMvd2F0Y2guaHRtbA==">https://alibaba.github.io/arthas/watch.html<i class="fa fa-external-link-alt"></i></span></p></blockquote><h4 id="参数说明-2"><a href="#参数说明-2" class="headerlink" title="参数说明"></a>参数说明</h4><p>使用 <code>watch --help</code> 获取 watch 命令的帮助信息：</p><p><img src="/images/2020/08/1597402622041.png" alt="1597402622041" loading="lazy"></p><p>watch 的参数比较多，主要是因为它能在 4 个不同的场景观察对象：</p><table><thead><tr><th>参数名称</th><th>参数说明</th></tr></thead><tbody><tr><td><em> class-pattern</em></td><td> 类名表达式匹配</td></tr><tr><td><em> method-pattern</em></td><td> 方法名表达式匹配</td></tr><tr><td><em> express</em></td><td> 观察表达式</td></tr><tr><td><em> condition-express</em></td><td> 条件表达式</td></tr><tr><td> [b]</td><td> 在<strong>方法调用之前</strong>观察</td></tr><tr><td> [e]</td><td> 在<strong>方法异常之后</strong>观察</td></tr><tr><td> [s]</td><td> 在<strong>方法返回之后</strong>观察</td></tr><tr><td> [f]</td><td> 在<strong>方法结束之后</strong> (正常返回和异常返回) 观察【默认】</td></tr><tr><td>[E]</td><td> 开启正则表达式匹配，默认为通配符匹配</td></tr><tr><td> [x:]</td><td> 指定输出结果的属性遍历深度，默认为 1</td></tr></tbody></table><h4 id="观察表达式"><a href="#观察表达式" class="headerlink" title="观察表达式"></a>观察表达式</h4><p>观察表达式的构成主要由 ognl 表达式组成，所以你可以这样写 <code>"{params,returnObj}"</code>，只要是一个合法的 ognl 表达式，都能被正常支持。</p><p>观察的维度也比较多，主要体现在参数 <code>advice</code> 的数据结构上。<code>Advice</code> 参数最主要是封装了通知节点的所有信息。请参考<span class="exturl" data-url="aHR0cHM6Ly9hbGliYWJhLmdpdGh1Yi5pby9hcnRoYXMvYWR2aWNlLWNsYXNzLmh0bWw=">表达式核心变量<i class="fa fa-external-link-alt"></i></span>中关于该节点的描述。</p><ul><li>特殊用法请参考：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvYXJ0aGFzL2lzc3Vlcy83MQ==">https://github.com/alibaba/arthas/issues/71<i class="fa fa-external-link-alt"></i></span></li><li>OGNL 表达式官网：<span class="exturl" data-url="aHR0cHM6Ly9jb21tb25zLmFwYWNoZS5vcmcvcHJvcGVyL2NvbW1vbnMtb2dubC9sYW5ndWFnZS1ndWlkZS5odG1s">https://commons.apache.org/proper/commons-ognl/language-guide.html<i class="fa fa-external-link-alt"></i></span></li></ul><h4 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h4><ul><li>watch 命令定义了 4 个观察事件点，即 <code>-b</code> 方法调用前，<code>-e</code> 方法异常后，<code>-s</code> 方法返回后，<code>-f</code> 方法结束后</li><li> 4 个观察事件点 <code>-b</code>、<code>-e</code>、<code>-s</code> 默认关闭，<code>-f</code> 默认打开，当指定观察点被打开后，在相应事件点会对观察表达式进行求值并输出</li><li>这里要注意<code>方法入参</code>和<code>方法出参</code>的区别，有可能在中间被修改导致前后不一致，除了 <code>-b</code> 事件点 <code>params</code> 代表方法入参外，其余事件都代表方法出参</li><li>当使用 <code>-b</code> 时，由于观察事件点是在方法调用前，此时返回值或异常均不存在</li></ul><h4 id="观察方法信息"><a href="#观察方法信息" class="headerlink" title="观察方法信息"></a>观察方法信息</h4><p><strong>查看入参和出参</strong></p><pre class="language-none"><code class="language-none">$ watch sample.demo.controller.UserController getUser '{params[0],returnObj}'</code></pre><p><img src="/images/2020/08/1597402871452.png" alt="1597402871452" loading="lazy"></p><p><strong>查看入参和出参大小</strong></p><pre class="language-none"><code class="language-none">$ watch sample.demo.controller.UserController getUser '{params[0],returnObj.size}'</code></pre><p><img src="/images/2020/08/1597402936287.png" alt="1597402936287" loading="lazy"></p><p><strong>查看入参和出参 String</strong></p><pre class="language-none"><code class="language-none">$ watch sample.demo.controller.UserController getUser '{params[0],returnObj.toString()}'</code></pre><p><img src="/images/2020/08/1597402988837.png" alt="1597402988837" loading="lazy"></p><p><strong>查看方法异常之后</strong></p><pre class="language-none"><code class="language-none">$ watch sample.demo.controller.UserController getUser '{params[0],returnObj}' -e</code></pre><p><img src="/images/2020/08/1597403442198.png" alt="1597403442198" loading="lazy"></p><h3 id="stack（方法调用路径）"><a href="#stack（方法调用路径）" class="headerlink" title="stack（方法调用路径）"></a>stack（方法调用路径）</h3><h4 id="方法介绍-3"><a href="#方法介绍-3" class="headerlink" title="方法介绍"></a>方法介绍</h4><p>stack 输出当前方法被调用的调用路径。</p><p>官方文档：<span class="exturl" data-url="aHR0cHM6Ly9hbGliYWJhLmdpdGh1Yi5pby9hcnRoYXMvc3RhY2suaHRtbA==">https://alibaba.github.io/arthas/stack.html<i class="fa fa-external-link-alt"></i></span></p><h4 id="参数说明-3"><a href="#参数说明-3" class="headerlink" title="参数说明"></a>参数说明</h4><p>使用 <code>stack --help</code> 获取 stack 命令的帮助信息：</p><p><img src="/images/2020/08/1597403694320.png" alt="1597403694320" loading="lazy"></p><p>主要参数如下：</p><table><thead><tr><th>参数名称</th><th>参数说明</th></tr></thead><tbody><tr><td><em> class-pattern</em></td><td> 类名表达式匹配</td></tr><tr><td><em> method-pattern</em></td><td> 方法名表达式匹配</td></tr><tr><td><em> condition-express</em></td><td> 条件表达式</td></tr><tr><td> [E]</td><td> 开启正则表达式匹配，默认为通配符匹配</td></tr><tr><td><code>[n:]</code></td><td>执行次数限制</td></tr></tbody></table><h4 id="方法调用路径"><a href="#方法调用路径" class="headerlink" title="方法调用路径"></a>方法调用路径</h4><pre class="language-none"><code class="language-none">$ stack sample.demo.controller.UserController getUser</code></pre><p><img src="/images/2020/08/1597403757289.png" alt="1597403757289" loading="lazy"></p><h3 id="tt（方法调用时空隧道）"><a href="#tt（方法调用时空隧道）" class="headerlink" title="tt（方法调用时空隧道）"></a>tt（方法调用时空隧道）</h3><h4 id="方法介绍-4"><a href="#方法介绍-4" class="headerlink" title="方法介绍"></a>方法介绍</h4><p>tt 方法执行数据的时空隧道，记录下指定方法每次调用的入参和返回信息，并能对这些不同的时间下调用进行观测。</p><p>官方文档：<span class="exturl" data-url="aHR0cHM6Ly9hbGliYWJhLmdpdGh1Yi5pby9hcnRoYXMvdHQuaHRtbA==">https://alibaba.github.io/arthas/tt.html<i class="fa fa-external-link-alt"></i></span></p><h4 id="参数说明-4"><a href="#参数说明-4" class="headerlink" title="参数说明"></a>参数说明</h4><ul><li><p><code>-t</code></p><p>tt 命令有很多个主参数，<code>-t</code> 就是其中之一。这个参数的表明希望记录下类 <code>*Test</code> 的 <code>print</code> 方法的每次执行情况。</p></li><li><p><code>-n 3</code></p><p>当你执行一个调用量不高的方法时可能你还能有足够的时间用 <code>CTRL+C</code> 中断 tt 命令记录的过程，但如果遇到调用量非常大的方法，瞬间就能将你的 JVM 内存撑爆。</p><p>此时你可以通过 <code>-n</code> 参数指定你需要记录的次数，当达到记录次数时 Arthas 会主动中断 tt 命令的记录过程，避免人工操作无法停止的情况。</p></li></ul><h4 id="返回结果说明"><a href="#返回结果说明" class="headerlink" title="返回结果说明"></a>返回结果说明</h4><table><thead><tr><th>表格字段</th><th>字段解释</th></tr></thead><tbody><tr><td> INDEX</td><td> 时间片段记录编号，每一个编号代表着一次调用，后续 tt 还有很多命令都是基于此编号指定记录操作，非常重要。</td></tr><tr><td>TIMESTAMP</td><td> 方法执行的本机时间，记录了这个时间片段所发生的本机时间</td></tr><tr><td> COST(ms)</td><td> 方法执行的耗时</td></tr><tr><td> IS-RET</td><td> 方法是否以正常返回的形式结束</td></tr><tr><td> IS-EXP</td><td> 方法是否以抛异常的形式结束</td></tr><tr><td> OBJECT</td><td> 执行对象的 <code>hashCode()</code>，注意，曾经有人误认为是对象在 JVM 中的内存地址，但很遗憾他不是。但他能帮助你简单的标记当前执行方法的类实体</td></tr><tr><td> CLASS</td><td> 执行的类名</td></tr><tr><td> METHOD</td><td> 执行的方法名</td></tr></tbody></table><h4 id="方法调用时空隧道"><a href="#方法调用时空隧道" class="headerlink" title="方法调用时空隧道"></a>方法调用时空隧道</h4><p><strong>记录方法调用信息</strong></p><pre class="language-none"><code class="language-none">$ tt -t sample.demo.controller.UserController getUser</code></pre><p><img src="/images/2020/08/1597403958714.png" alt="1597403958714" loading="lazy"></p><p><strong>查看记录的调用信息</strong></p><pre class="language-none"><code class="language-none">tt -l</code></pre><p><img src="/images/2020/08/1597404208135.png" alt="1597404208135" loading="lazy"></p><p><strong>查看记录的详细信息</strong></p><pre class="language-none"><code class="language-none">tt -i 1001</code></pre><p><img src="/images/2020/08/1597404218381.png" alt="1597404218381" loading="lazy"></p><p><strong>重新发起调用</strong></p><pre class="language-none"><code class="language-none">tt -i 1001 -p</code></pre><p><img src="/images/2020/08/1597404320236.png" alt="1597404320236" loading="lazy"></p>]]></content>
    
    <summary type="html">
    
      通过Arthas中的trace/monitor/watch/stack/tt等命令，可以查看方法内部调用信息，从而定位方法调用问题。
    
    </summary>
    
    
      <category term="Java" scheme="https://jueee.github.io/categories/Java/"/>
    
      <category term="Arthas" scheme="https://jueee.github.io/categories/Java/Arthas/"/>
    
    
      <category term="Java" scheme="https://jueee.github.io/tags/Java/"/>
    
      <category term="Java诊断" scheme="https://jueee.github.io/tags/Java%E8%AF%8A%E6%96%AD/"/>
    
      <category term="Arthas" scheme="https://jueee.github.io/tags/Arthas/"/>
    
  </entry>
  
  <entry>
    <title>kafka-manager 的安装和使用</title>
    <link href="https://jueee.github.io/2020/08/2020-08-14-kafka-manager%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
    <id>https://jueee.github.io/2020/08/2020-08-14-kafka-manager%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/</id>
    <published>2020-08-14T00:00:00.000Z</published>
    <updated>2020-08-19T03:26:36.059Z</updated>
    
    <content type="html"><![CDATA[<h3 id="kafka-manager地址"><a href="#kafka-manager地址" class="headerlink" title="kafka-manager地址"></a>kafka-manager 地址</h3><p>GitHub 地址：</p><blockquote><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3lhaG9vL0NNQUs=">https://github.com/yahoo/CMAK<i class="fa fa-external-link-alt"></i></span></p></blockquote><p>下载地址：</p><blockquote><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3lhaG9vL0NNQUsvcmVsZWFzZXM=">https://github.com/yahoo/CMAK/releases<i class="fa fa-external-link-alt"></i></span></p></blockquote><h3 id="kafka-manager简介"><a href="#kafka-manager简介" class="headerlink" title="kafka-manager简介"></a>kafka-manager 简介</h3><p>kafka-manager 是目前最受欢迎的 kafka 集群管理工具，最早由雅虎开源，用户可以在 Web 界面执行一些简单的集群管理操作。具体支持以下内容：</p><ul><li>管理多个集群</li><li>轻松检查群集状态（主题，消费者，偏移，代理，副本分发，分区分发）</li><li>运行首选副本选举</li><li>使用选项生成分区分配以选择要使用的代理</li><li>运行分区重新分配（基于生成的分配）</li><li>使用可选主题配置创建主题（0.8.1.1 具有与 0.8.2 + 不同的配置）</li><li>删除主题（仅支持 0.8.2 + 并记住在代理配置中设置 delete.topic.enable = true）</li><li>主题列表现在指示标记为删除的主题（仅支持 0.8.2+）</li><li>批量生成多个主题的分区分配，并可选择要使用的代理</li><li>批量运行重新分配多个主题的分区</li><li>将分区添加到现有主题</li><li>更新现有主题的配置</li></ul><h3 id="安装kafka-manager"><a href="#安装kafka-manager" class="headerlink" title="安装kafka-manager"></a>安装 kafka-manager</h3><h4 id="普通安装"><a href="#普通安装" class="headerlink" title="普通安装"></a>普通安装</h4><h5 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h5><pre class="language-none"><code class="language-none">wget 'https://github.com/yahoo/CMAK/releases/download/3.0.0.5/cmak-3.0.0.5.zip'unzip cmak-3.0.0.5.zipcd cmak-3.0.0.5</code></pre><h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><p>修改  <code>conf/application.conf</code> 文件：</p><pre class="language-conf" data-language="conf"><code class="language-conf">kafka-manager.zkhosts="127.0.0.1:2181"kafka-manager.zkhosts=${?ZK_HOSTS}cmak.zkhosts="127.0.0.1:2181"cmak.zkhosts=${?ZK_HOSTS}</code></pre><h5 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h5><pre class="language-none"><code class="language-none">$ bin/cmak &amp;</code></pre><h4 id="docker-安装"><a href="#docker-安装" class="headerlink" title="docker 安装"></a>docker 安装</h4><p>DockerHub：<span class="exturl" data-url="aHR0cHM6Ly9odWIuZG9ja2VyLmNvbS9yL3NoZWVwa2lsbGVyL2thZmthLW1hbmFnZXI=">https://hub.docker.com/r/sheepkiller/kafka-manager<i class="fa fa-external-link-alt"></i></span></p><p>安装命令：</p><pre class="language-shell" data-language="shell"><code class="language-shell">docker run -it <span class="token punctuation">\</span>    --name kafka-manager <span class="token punctuation">\</span>    -p <span class="token number">9000</span>:9000 <span class="token punctuation">\</span>    -e <span class="token assign-left variable">ZK_HOSTS</span><span class="token operator">=</span><span class="token number">127.0</span>.0.1:2181 <span class="token punctuation">\</span>    -e <span class="token assign-left variable">KAFKA_MANAGER_AUTH_ENABLED</span><span class="token operator">=</span>true <span class="token punctuation">\</span>    -e <span class="token assign-left variable">KAFKA_MANAGER_USERNAME</span><span class="token operator">=</span>admin <span class="token punctuation">\</span>    -e <span class="token assign-left variable">KAFKA_MANAGER_PASSWORD</span><span class="token operator">=</span>admin <span class="token punctuation">\</span>    -d sheepkiller/kafka-manager:latest</code></pre><h3 id="配置-kafka-manager"><a href="#配置-kafka-manager" class="headerlink" title="配置 kafka-manager"></a>配置 kafka-manager</h3><p>kafka-manager 默认的端口是 9000。</p><ol><li><p>添加集群</p><p><img src="/images/2020/08/1597386588682.png" alt="1597386588682" loading="lazy"></p></li><li><p>配置集群</p><p><img src="/images/2020/08/1597386711921.png" alt="1597386711921" loading="lazy"></p></li></ol><h3 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h3><p>如果使用 kafka-manager 监控，需要开启 JMX，则需要勾选：</p><p><img src="/images/2020/08/1597405340838.png" alt="1597405340838" loading="lazy"></p><p>否则会有以下报错：</p><pre class="language-none"><code class="language-none">2020-08-14 17:30:58,236 - [ERROR] k.m.j.KafkaJMX$ - Failed to connect to service:jmx:rmi:///jndi/rmi://dm161.bjth.163.org:-1/jmxrmijava.lang.IllegalArgumentException: requirement failed: No jmx port but jmx polling enabled!</code></pre><p>启动 kafka 服务时指定 <code>JMX_PORT</code> 值:</p><pre class="language-none"><code class="language-none">JMX_PORT=9999 nohup bin/kafka-server-start.sh config/server.properties &amp;</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;kafka-manager地址&quot;&gt;&lt;a href=&quot;#kafka-manager地址&quot; class=&quot;headerlink&quot; title=&quot;kafka-manager地址&quot;&gt;&lt;/a&gt;kafka-manager 地址&lt;/h3&gt;&lt;p&gt;GitHub 地址：&lt;/p&gt;
&lt;b
      
    
    </summary>
    
    
      <category term="Linux" scheme="https://jueee.github.io/categories/Linux/"/>
    
      <category term="软件" scheme="https://jueee.github.io/categories/Linux/%E8%BD%AF%E4%BB%B6/"/>
    
    
      <category term="Linux" scheme="https://jueee.github.io/tags/Linux/"/>
    
      <category term="软件" scheme="https://jueee.github.io/tags/%E8%BD%AF%E4%BB%B6/"/>
    
      <category term="Kafka" scheme="https://jueee.github.io/tags/Kafka/"/>
    
  </entry>
  
  <entry>
    <title>Arthas 之通过 thread 命令定位线程问题</title>
    <link href="https://jueee.github.io/2020/08/2020-08-13-Arthas%E4%B9%8B%E9%80%9A%E8%BF%87thread%E5%91%BD%E4%BB%A4%E5%AE%9A%E4%BD%8D%E7%BA%BF%E7%A8%8B%E9%97%AE%E9%A2%98/"/>
    <id>https://jueee.github.io/2020/08/2020-08-13-Arthas%E4%B9%8B%E9%80%9A%E8%BF%87thread%E5%91%BD%E4%BB%A4%E5%AE%9A%E4%BD%8D%E7%BA%BF%E7%A8%8B%E9%97%AE%E9%A2%98/</id>
    <published>2020-08-13T00:00:00.000Z</published>
    <updated>2020-08-19T03:26:36.045Z</updated>
    
    <content type="html"><![CDATA[<p>通过 Arthas 中的 thread 命令，可以查看当前线程信息及线程的堆栈。从而可以定位线程问题。</p><h3 id="thread-命令介绍"><a href="#thread-命令介绍" class="headerlink" title="thread 命令介绍"></a>thread 命令介绍</h3><p>官方文档：</p><blockquote><p><span class="exturl" data-url="aHR0cHM6Ly9hbGliYWJhLmdpdGh1Yi5pby9hcnRoYXMvdGhyZWFkLmh0bWw=">https://alibaba.github.io/arthas/thread.html<i class="fa fa-external-link-alt"></i></span></p></blockquote><h4 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h4><p>使用 <code>thread --help</code> 获取 thread 命令的帮助信息：</p><p><img src="/images/2020/08/1597314852787.png" alt="1597314852787" loading="lazy"></p><p>主要参数说明如下：</p><table><thead><tr><th>参数名称</th><th>参数说明</th></tr></thead><tbody><tr><td><em> id</em></td><td> 线程 id</td></tr><tr><td>[n:]</td><td> 指定最忙的前 N 个线程并打印堆栈</td></tr><tr><td> [b]</td><td> 找出当前阻塞其他线程的线程</td></tr><tr><td> [i <code>&lt;value&gt;</code>]</td><td> 指定 cpu 占比统计的采样间隔，单位为毫秒</td></tr></tbody></table><h4 id="线程常见状态"><a href="#线程常见状态" class="headerlink" title="线程常见状态"></a>线程常见状态</h4><p>定位线程问题之前，先回顾一下线程的几种常见状态：</p><ul><li><p><strong>RUNNABLE</strong> 运行中</p></li><li><p><strong>TIMED_WAITIN</strong> 调用了以下方法的线程会进入 <strong>TIMED_WAITING</strong>：</p><ol><li>Thread#sleep()</li><li>Object#wait () 并加了超时参数</li><li> Thread#join () 并加了超时参数</li><li> LockSupport#parkNanos()</li><li>LockSupport#parkUntil()</li></ol></li><li><p><strong>WAITING</strong> 当线程调用以下方法时会进入 WAITING 状态：</p><ol><li>Object#wait () 而且不加超时参数</li><li> Thread#join () 而且不加超时参数</li><li> LockSupport#park()</li></ol></li><li><p><strong>BLOCKED</strong> 阻塞，等待锁</p></li></ul><h4 id="cpu占比的统计"><a href="#cpu占比的统计" class="headerlink" title="cpu占比的统计"></a>cpu 占比的统计</h4><blockquote><p>这里的 cpu 统计的是，一段采样间隔内，当前 JVM 里各个线程所占用的 cpu 时间占总 cpu 时间的百分比。</p><p>其计算方法为： 首先进行一次采样，获得所有线程的 cpu 的使用时间 (调用的是 <code>java.lang.management.ThreadMXBean#getThreadCpuTime</code> 这个接口)，然后睡眠一段时间，默认 100ms，可以通过 <code>-i</code> 参数指定，然后再采样一次，最后得出这段时间内各个线程消耗的 cpu 时间情况，最后算出百分比。</p></blockquote><blockquote><p>注意： 这个统计也会产生一定的开销（JDK 这个接口本身开销比较大），因此会看到 as 的线程占用一定的百分比，为了降低统计自身的开销带来的影响，可以把采样间隔拉长一些，比如 5000 毫秒。</p></blockquote><blockquote><p>如果想看从 Java 进程启动开始到现在的 cpu 占比情况：可以使用<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL29sZHJhdGxlZS91c2VmdWwtc2NyaXB0cy9ibG9iL21hc3Rlci9kb2NzL2phdmEubWQjLXNob3ctYnVzeS1qYXZhLXRocmVhZHM="> show-busy-java-threads<i class="fa fa-external-link-alt"></i></span>这个脚本</p></blockquote><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><p>首先编写一个有各种情况的测试类运行起来，再使用 <strong>Arthas</strong> 进行问题定位：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> hashSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">ExecutorService</span> executorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">addHashSetThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 不断的向 hashSet 集合增加数据</span>        <span class="token function">cpuHigh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 模拟 CPU 过高</span>        <span class="token function">cpuNormal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 模拟线程阻塞</span>        <span class="token function">deadThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 模拟线程死锁</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 极度消耗CPU的线程     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">cpuHigh</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"cpu start 100"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 添加到线程</span>        executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 普通消耗CPU的线程     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">cpuNormal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"cpu start"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 模拟线程阻塞,向已经满了的线程池提交线程     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"thread start"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 添加到线程</span>        executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 死锁     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">deadThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">/** 创建资源 */</span>        <span class="token class-name">Object</span> resourceA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> resourceB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 创建线程</span>        <span class="token class-name">Thread</span> threadA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>resourceA<span class="token punctuation">)</span> <span class="token punctuation">{</span>                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" get ResourceA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"waiting get resourceB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>resourceB<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" get resourceB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> threadB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>resourceB<span class="token punctuation">)</span> <span class="token punctuation">{</span>                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" get ResourceB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"waiting get resourceA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>resourceA<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" get resourceA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        threadA<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        threadB<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 不断的向 hashSet 集合添加数据     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">addHashSetThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 初始化常量</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    hashSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"count"</span> <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    count<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="定位-CPU-使用较高的线程"><a href="#定位-CPU-使用较高的线程" class="headerlink" title="定位 CPU 使用较高的线程"></a>定位 CPU 使用较高的线程</h3><p>上面的代码例子有一个 <code>CPU</code> 空转的死循环，非常的消耗 <code>CPU性能</code>，那么怎么找出来呢？</p><p>使用 <strong>thread</strong> 查看<strong>所有</strong>线程信息，同时会列出每个线程的 <code>CPU</code> 使用率，可以看到图里 ID 为 12 的线程 CPU 使用 100%。</p><p><img src="/images/2020/08/1597314558126.png" alt="1597314558126" loading="lazy"></p><p>使用命令 <strong>thread 12</strong> 查看 CPU 消耗较高的 12 号线程信息，可以看到 CPU 使用较高的方法和行数。</p><p><img src="/images/2020/08/1597314597613.png" alt="1597314597613" loading="lazy"></p><p>如果只是为了寻找 CPU 使用较高的线程，可以直接使用命令 <strong>thread -n [显示的线程个数]</strong> ，就可以排列出 CPU 使用率 <strong>Top N</strong> 的线程。</p><p><img src="/images/2020/08/1597314636547.png" alt="1597314636547" loading="lazy"></p><p>定位到的 CPU 使用最高的方法：</p><p><img src="/images/2020/08/1597314662083.png" alt="1597314662083" loading="lazy"></p><h3 id="定位线程阻塞"><a href="#定位线程阻塞" class="headerlink" title="定位线程阻塞"></a>定位线程阻塞</h3><p>上面的模拟代码里，定义了线程池大小为 1 的线程池，然后在 <code>cpuHigh</code> 方法里提交了一个线程，在 <code>thread</code> 方法再次提交了一个线程，后面的这个线程因为线程池已满，会阻塞下来。</p><p>使用 <strong>thread | grep pool</strong> 命令查看线程池里线程信息。</p><p><img src="/images/2020/08/1597314720720.png" alt="1597314720720" loading="lazy"></p><p>可以看到线程池有 <strong>WAITING</strong> 的线程：</p><p><img src="/images/2020/08/1597314739701.png" alt="1597314739701" loading="lazy"></p><h3 id="定位线程死锁"><a href="#定位线程死锁" class="headerlink" title="定位线程死锁"></a>定位线程死锁</h3><p>上面的模拟代码里 <code>deadThread</code> 方法实现了一个死锁，使用 <strong>thread -b</strong> 命令查看直接定位到死锁信息。</p><p><img src="/images/2020/08/1597314791433.png" alt="1597314791433" loading="lazy"></p>]]></content>
    
    <summary type="html">
    
      通过Arthas中的thread命令，可以查看当前线程信息及线程的堆栈。从而可以定位线程问题。
    
    </summary>
    
    
      <category term="Java" scheme="https://jueee.github.io/categories/Java/"/>
    
      <category term="Arthas" scheme="https://jueee.github.io/categories/Java/Arthas/"/>
    
    
      <category term="Java" scheme="https://jueee.github.io/tags/Java/"/>
    
      <category term="Java诊断" scheme="https://jueee.github.io/tags/Java%E8%AF%8A%E6%96%AD/"/>
    
      <category term="Arthas" scheme="https://jueee.github.io/tags/Arthas/"/>
    
  </entry>
  
  <entry>
    <title>Git 每次都需要输入用户名密码的问题解决</title>
    <link href="https://jueee.github.io/2020/08/2020-08-13-Git%E6%AF%8F%E6%AC%A1%E9%83%BD%E9%9C%80%E8%A6%81%E8%BE%93%E5%85%A5%E7%94%A8%E6%88%B7%E5%90%8D%E5%AF%86%E7%A0%81%E7%9A%84%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
    <id>https://jueee.github.io/2020/08/2020-08-13-Git%E6%AF%8F%E6%AC%A1%E9%83%BD%E9%9C%80%E8%A6%81%E8%BE%93%E5%85%A5%E7%94%A8%E6%88%B7%E5%90%8D%E5%AF%86%E7%A0%81%E7%9A%84%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</id>
    <published>2020-08-13T00:00:00.000Z</published>
    <updated>2020-08-19T03:26:36.046Z</updated>
    
    <content type="html"><![CDATA[<h3 id="提交GitHub"><a href="#提交GitHub" class="headerlink" title="提交GitHub"></a>提交 GitHub</h3><p>使用 git 提交文件到 github, 每次都要输入用户名和密码，操作起来很麻烦，以下方法可解决，记录以下。</p><h4 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h4><p>在 clone 项目的时候，使用了 https 方式，而不是 ssh 方式。默认 clone 方式是：https。</p><p><img src="/images/2020/08/1597317084639.png" alt="1597317084639" loading="lazy"></p><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><ol><li><p>查看 clone 地址：<code>git remote -v</code></p><p><img src="/images/2020/08/1597317130019.png" alt="1597317130019" loading="lazy"></p><p>说明是 https 方式，现在换成 ssh 方式。</p></li><li><p>移除 https 的方式：<code>git remote rm origin</code></p><p><img src="/images/2020/08/1597317256891.png" alt="1597317256891" loading="lazy"></p><p>再次查看 clone 地址：<code>git remote -v</code>，显示没有地址。</p></li><li><p>查看 ssh 方式地址，在 github 上，切换到 ssh 方式，然后复制地址。</p><p><img src="/images/2020/08/1597317342069.png" alt="1597317342069" loading="lazy"></p></li><li><p>添加新的 git 方式： <code>git remote add origin git 地址</code></p><p><img src="/images/2020/08/1597317394906.png" alt="1597317394906" loading="lazy"></p></li><li><p>重新 push：<code>git push origin master</code>。</p></li></ol><h3 id="提交普通-Git"><a href="#提交普通-Git" class="headerlink" title="提交普通 Git"></a>提交普通 Git</h3><h4 id="解决办法1"><a href="#解决办法1" class="headerlink" title="解决办法1"></a>解决办法 1</h4><p>在 <code>C:\Users\Administrator</code> 中的<code>.gitconfig</code> 文件，文本编辑器打开，记事本就可以，添加一行</p><pre class="language-none"><code class="language-none">[credential]    helper = store</code></pre><h4 id="解决方法2"><a href="#解决方法2" class="headerlink" title="解决方法2"></a>解决方法 2</h4><p>git bash 进入你的项目目录，输入：</p><pre class="language-none"><code class="language-none">git config --global credential.helper store</code></pre><p>然后会修改 <code>C:\Users\Administrator</code> 中的<code>.gitconfig</code> 文件。</p>]]></content>
    
    <summary type="html">
    
      使用git提交文件到github,每次都要输入用户名和密码，操作起来很麻烦，以下方法可解决。
    
    </summary>
    
    
      <category term="Git" scheme="https://jueee.github.io/categories/Git/"/>
    
    
      <category term="Git" scheme="https://jueee.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>使用 Jrebel，实现热部署</title>
    <link href="https://jueee.github.io/2020/08/2020-08-13-%E4%BD%BF%E7%94%A8Jrebel%EF%BC%8C%E5%AE%9E%E7%8E%B0%E7%83%AD%E9%83%A8%E7%BD%B2/"/>
    <id>https://jueee.github.io/2020/08/2020-08-13-%E4%BD%BF%E7%94%A8Jrebel%EF%BC%8C%E5%AE%9E%E7%8E%B0%E7%83%AD%E9%83%A8%E7%BD%B2/</id>
    <published>2020-08-13T00:00:00.000Z</published>
    <updated>2020-08-19T03:26:36.048Z</updated>
    
    <content type="html"><![CDATA[<p>JRebel 是一套 JavaEE 开发工具。JRebel 允许开发团队在有限的时间内完成更多的任务修正更多的问题，发布更高质量的软件产品。 </p><h3 id="什么是热部署？"><a href="#什么是热部署？" class="headerlink" title="什么是热部署？"></a>什么是热部署？</h3><p>所谓热部署，就是在应用正在运行的时候升级软件，却不需要重新启动应用。对于 Java 应用程序来说，热部署就是在运行时更新 Java 类文件。</p><p>在基于 Java 的应用服务器实现热部署的过程中，类装入器扮演着重要的角色。大多数基于 Java 的应用服务器，包括 EJB 服务器和 Servlet 容器，都支持热部署。类装入器不能重新装入一个已经装入的类，但只要使用一个新的类装入器实例，就可以将类再次装入一个正在运行的应用程序。</p><h3 id="Jrebel-介绍"><a href="#Jrebel-介绍" class="headerlink" title="Jrebel 介绍"></a>Jrebel 介绍</h3><p>官网：<span class="exturl" data-url="aHR0cHM6Ly9tYW51YWxzLmpyZWJlbC5jb20vanJlYmVsLw==">https://manuals.jrebel.com/jrebel/<i class="fa fa-external-link-alt"></i></span></p><p>JRebel 是一个 JVM Java 代理，它与应用程序服务器集成，从而使类可以使用现有的类加载器<strong>重新</strong>加载。只有更改的类会重新编译并立即重新加载到正在运行的应用程序中。</p><h3 id="Jrebel-功能"><a href="#Jrebel-功能" class="headerlink" title="Jrebel 功能"></a>Jrebel 功能</h3><p>Jrebel 可以实现基于类、XML 文件的增删查改，也能够实现方法体的增删查改的热部署。</p><p>JRebel 工作在与 HotSwap 不同的一个抽象层面上。鉴于 HotSwap 是工作在虚拟机层面上，且依赖于 JVM 的内部运作，JRebel 用到了 JVM 的两个显著的功能特征 —— 抽象的字节码和类加载器。类加载器允许 JRebel 辨别出类被加载的时刻，然后实时地翻译字节码，用以在虚拟机和可执行代码之间创建另一个抽象层。</p><table><thead><tr><th align="left">支持类别</th><th align="left"> Jrebel</th><th align="left">JVM Hot Swap</th></tr></thead><tbody><tr><td align="left"> 方法体内代码的修改</td><td align="left">支持</td><td align="left">支持</td></tr><tr><td align="left">方法参数、名称、返回值的变动</td><td align="left">支持</td><td align="left">不支持</td></tr><tr><td align="left">方法体注解的变动</td><td align="left">支持</td><td align="left">不支持</td></tr><tr><td align="left">新增、删除 N (N&gt;0) 个方法</td><td align="left">支持</td><td align="left">不支持</td></tr><tr><td align="left">类的增删查改，其他类对此新增类的引用</td><td align="left">支持</td><td align="left">不支持</td></tr><tr><td align="left">新增接口，以及它的实现类</td><td align="left">支持</td><td align="left">不支持</td></tr><tr><td align="left">改变静态字段值（仅 static）</td><td align="left">不支持</td><td align="left">不支持</td></tr><tr><td align="left">改变常量字段值（final static or final）</td><td align="left">支持</td><td align="left">不支持</td></tr><tr><td align="left">枚举类 / 值（增删查改），并对它调用</td><td align="left">支持</td><td align="left">不支持</td></tr></tbody></table><h3 id="Jrebel-安装"><a href="#Jrebel-安装" class="headerlink" title="Jrebel 安装"></a>Jrebel 安装</h3><h4 id="安装-Jrebel"><a href="#安装-Jrebel" class="headerlink" title="安装 Jrebel"></a>安装 Jrebel</h4><p>参考：<span class="exturl" data-url="aHR0cHM6Ly9tYW51YWxzLmpyZWJlbC5jb20vanJlYmVsL2lkZS9pbmRleC5odG1s">https://manuals.jrebel.com/jrebel/ide/index.html<i class="fa fa-external-link-alt"></i></span></p><p><img src="/images/2020/08/1597297821144.png" alt="1597297821144" loading="lazy"></p><h4 id="破解Jrebel"><a href="#破解Jrebel" class="headerlink" title="破解Jrebel"></a>破解 Jrebel</h4><ol><li>点击打开网站：<span class="exturl" data-url="aHR0cDovL215bmlnaHQudG9wOjEwMDg2Lw==">http://mynight.top:10086<i class="fa fa-external-link-alt"></i></span>，复制第二行链接</li><li><img src="/images/2020/08/1597297837282.png" alt="1597297837282" loading="lazy"></li><li><img src="/images/2020/08/1597297849629.png" alt="1597297849629" loading="lazy"></li><li><img src="/images/2020/08/1597297856954.png" alt="1597297856954" loading="lazy"></li><li><img src="/images/2020/08/1597297962755.png" alt="1597297962755" loading="lazy"></li><li>至此 Jrebel 全部破解完毕。</li></ol><h3 id="Jrebel-注意事项"><a href="#Jrebel-注意事项" class="headerlink" title="Jrebel 注意事项"></a>Jrebel 注意事项</h3><ol><li><p>每次重新编译加载 classes 文件的时候，控制台 console 都会输出一段文字：</p><p>（2018-03-30 10:49:53 JRebel: Reloading class “包名。类名.class”.）</p><p>这段文字代表该类已经重加载完毕，请确保这段文字输出以后，再调试。</p></li><li><p>以 Spring boot，启动的项目需要注意：<br>执行重新编译（recompile）类的时候，需要注意 被编译类 的依赖顺序。</p><p>例如：A 类实现了 B 接口（类 A 和接口 B 都被修改的前提下），那么需要先重新编译（recompile）B 接口<br>再重新编译（recompile）A 类。</p><p>当然，如果只修改了类 A 的内容，接口 B 未做修改，则只需要重新编译（recompile）类 A</p></li></ol>]]></content>
    
    <summary type="html">
    
      JRebel是一套JavaEE开发工具。JRebel允许开发团队在有限的时间内完成更多的任务修正更多的问题，发布更高质量的软件产品。
    
    </summary>
    
    
      <category term="软件" scheme="https://jueee.github.io/categories/%E8%BD%AF%E4%BB%B6/"/>
    
      <category term="IDE" scheme="https://jueee.github.io/categories/%E8%BD%AF%E4%BB%B6/IDE/"/>
    
    
      <category term="软件" scheme="https://jueee.github.io/tags/%E8%BD%AF%E4%BB%B6/"/>
    
      <category term="IDE" scheme="https://jueee.github.io/tags/IDE/"/>
    
  </entry>
  
  <entry>
    <title>Git 的 .gitconfig 文件配置汇总</title>
    <link href="https://jueee.github.io/2020/08/2020-08-22-Git%20%E7%9A%84%20.gitconfig%20%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE%E6%B1%87%E6%80%BB/"/>
    <id>https://jueee.github.io/2020/08/2020-08-22-Git%20%E7%9A%84%20.gitconfig%20%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE%E6%B1%87%E6%80%BB/</id>
    <published>2020-08-13T00:00:00.000Z</published>
    <updated>2020-08-27T11:13:14.943Z</updated>
    
    <content type="html"><![CDATA[<h3 id="http-postBuffer"><a href="#http-postBuffer" class="headerlink" title="http.postBuffer"></a>http.postBuffer</h3><p>在使用 git 推送项目时候出现 "<strong>fatal: The remote end hung up unexpectedly</strong> " 原因是推送的文件太大。</p><pre class="language-none"><code class="language-none">Connection reset by 140.82.113.4fatal: The remote end hung up unexpectedlyfatal: The remote end hung up unexpectedly[41mFATAL[49m {  err: Error: Spawn failed      at ChildProcess.&lt;anonymous&gt; (E:\code\GitHub\Jueee\jueee-blog\node_modules\hexo-deployer-git\node_modules\hexo-util\lib\spawn.js:51:21)      at ChildProcess.emit (events.js:315:20)      at ChildProcess.cp.emit (E:\code\GitHub\Jueee\jueee-blog\node_modules\cross-spawn\lib\enoent.js:34:29)      at Process.ChildProcess._handle.onexit (internal/child_process.js:275:12) {    code: 128  }} Something's wrong. Maybe you can find the solution here: %s [4mhttps://hexo.io/docs/troubleshooting.html[24m</code></pre><p>解决方案</p><p>在克隆 / 创建版本库生成的 .git 目录下面修改生成的 config 文件或者 <code>.gitconfig</code>  文件增加如下：</p><pre class="language-none"><code class="language-none">[http]postBuffer = 524288000</code></pre><p>即修改提交缓存大小为 500M。</p>]]></content>
    
    <summary type="html">
    
      Git 的 .gitconfig 文件配置汇总
    
    </summary>
    
    
      <category term="Git" scheme="https://jueee.github.io/categories/Git/"/>
    
    
      <category term="Git" scheme="https://jueee.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>浏览器提速软件 SpeedyFox</title>
    <link href="https://jueee.github.io/2020/08/2020-08-12-%E6%B5%8F%E8%A7%88%E5%99%A8%E6%8F%90%E9%80%9F%E8%BD%AF%E4%BB%B6SpeedyFox/"/>
    <id>https://jueee.github.io/2020/08/2020-08-12-%E6%B5%8F%E8%A7%88%E5%99%A8%E6%8F%90%E9%80%9F%E8%BD%AF%E4%BB%B6SpeedyFox/</id>
    <published>2020-08-12T00:00:00.000Z</published>
    <updated>2020-08-24T01:38:25.917Z</updated>
    
    <content type="html"><![CDATA[<h3 id="软件介绍"><a href="#软件介绍" class="headerlink" title="软件介绍"></a>软件介绍</h3><p>SpeedyFox 是一个超级简单的工具，一个单窗口，没有选项的工具来优化浏览器的性能。</p><p>SpeedyFox 声称通过对 SQLITE 数据库进行碎片整理来加速浏览器。它说，这些数据库随着时间的推移而变得变形，减慢了启动速度，并推迟了使用 Cookie 和历史记录的操作。</p><h3 id="下载网址"><a href="#下载网址" class="headerlink" title="下载网址"></a>下载网址</h3><blockquote><p><span class="exturl" data-url="aHR0cHM6Ly9jcnlzdGFsaWRlYS5jb20vc3BlZWR5Zm94">https://crystalidea.com/speedyfox<i class="fa fa-external-link-alt"></i></span></p></blockquote><h3 id="使用软件"><a href="#使用软件" class="headerlink" title="使用软件"></a>使用软件</h3><p>Edge 浏览器，Chrome、Firefox 等浏览器，以及大部分国产浏览器，都可以使用。SpeedyFox 能自动识别，浏览器的配置文件路径。</p><p>所以，打开软件，只要直接点击 Optimize 按钮就行了，不需要复杂的配置。</p><p>优化过程可能需要 5 秒钟到一分钟，具体取决于数据库的大小。整个优化过程很安全，因为它不会影响您的历史记录，书签，密码等。</p><p>根据您的浏览活动，建议每 1-2 周对您的个人资料进行一次优化。</p><p>如下图所示：</p><p><img src="/images/2020/08/1597286104064.png" alt="1597286104064" loading="lazy"></p>]]></content>
    
    <summary type="html">
    
      SpeedyFox是一个超级简单的工具，一个单窗口，没有选项的工具来优化浏览器的性能。
    
    </summary>
    
    
      <category term="软件" scheme="https://jueee.github.io/categories/%E8%BD%AF%E4%BB%B6/"/>
    
    
      <category term="软件" scheme="https://jueee.github.io/tags/%E8%BD%AF%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 中 DBlink 的使用</title>
    <link href="https://jueee.github.io/2020/08/2020-08-11-MySQL%E4%B8%ADDBlink%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://jueee.github.io/2020/08/2020-08-11-MySQL%E4%B8%ADDBlink%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2020-08-11T00:00:00.000Z</published>
    <updated>2020-08-19T03:26:36.042Z</updated>
    
    <content type="html"><![CDATA[<p>在实际工作中，我们可能会遇到需要操作其他数据库实例的部分表，但又不想系统连接多库。此时我们就需要用到数据表映射。</p><p>如同 Oracle 中的 DBlink 一般，使用过 Oracle DBlink 数据库链接的人都知道可以跨实例来进行数据查询，同样的，Mysql 自带的 FEDERATED 引擎完美的帮我们解决了该问题。</p><h3 id="检查引擎"><a href="#检查引擎" class="headerlink" title="检查引擎"></a>检查引擎</h3><p>查看 target 端是否安装了 FEDERATED 存储引擎：</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; show engines ;</code></pre><p>例如：</p><p><img src="/images/2020/08/1597126521400.png" alt="1597126521400" loading="lazy"></p><h3 id="安装引擎"><a href="#安装引擎" class="headerlink" title="安装引擎"></a>安装引擎</h3><p>注意：如果没有安装 <strong>FEDERATED 引擎</strong>，执行：</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">install plugin federated soname 'ha_federated.so';</code></pre><p>例如：</p><p><img src="/images/2020/08/1597126538702.png" alt="1597126538702" loading="lazy"></p><p>再次检查引擎：</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; show engines ;</code></pre><p>例如：</p><p><img src="/images/2020/08/1597126564647.png" alt="1597126564647" loading="lazy"></p><h3 id="开启引擎"><a href="#开启引擎" class="headerlink" title="开启引擎"></a>开启引擎</h3><p>将 federated 添加到 my.cnf 重启数据库</p><pre class="language-cnf" data-language="cnf"><code class="language-cnf">vi /etc/my.cnf[mysqld]federated</code></pre><p>再次检查引擎，例如：</p><p><img src="/images/2020/08/1597126649766.png" alt="1597126649766" loading="lazy"></p><h3 id="建表访问"><a href="#建表访问" class="headerlink" title="建表访问"></a>建表访问</h3><p>使用 CONNECTION 创建 FEDERATED 引擎表通用模型：</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE (......) ENGINE =FEDERATED CONNECTION='mysql://username:password@hostname:port/database/tablename'</code></pre><p>注意 ENGINE=FEDERATED CONNECTION 后为源端地址 避免使用带 @的密码</p><h3 id="使用总结"><a href="#使用总结" class="headerlink" title="使用总结"></a>使用总结</h3><p>基于 MySQL5.7.23 版本，笔者在源端及目标端实验了多种 DDL 及 DML，现简单总结如下，有兴趣的同学可以试试看。</p><ul><li>目标端建表结构可以与源端不一样 推荐与源端结构一致</li><li>源端 DDL (CREATE、ALTER、DROP 等语句) 语句更改表结构 目标端不会变化</li><li>源端 DML（SELECT、UPDATE、INSERT、DELETEt 等语句）语句目标端查询会同步</li><li>源端 drop 表 目标端结构还在但无法查询</li><li>目标端不能执行 DDL 语句</li><li>目标端执行 DML 语句 源端数据也会变化</li><li>目标端 truncate 表 源端表数据也会被清空</li><li>目标端 drop 表对源端无影响</li></ul><h3 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h3><p>目前 FEDERATED 引擎使用范围还不多，若确实有跨实例访问的需求，建议做好规范，个人总结最佳实践如下：</p><ol><li>源端专门创建只读权限的用户来供目标端使用。</li><li>目标端建议用 CREATE SERVER 方式创建 FEDERATED 表。</li><li>FEDERATED 表不宜太多，迁移时要特别注意。</li><li>目标端应该只做查询使用，禁止在目标端更改 FEDERATED 表。</li><li>建议目标端表名及结构和源端保持一致。</li><li>源端表结构变更后 目标端要及时删除重建。</li></ol>]]></content>
    
    <summary type="html">
    
      在实际工作中，我们可能会遇到需要操作其他数据库实例的部分表，但又不想系统连接多库。此时我们就需要用到数据表映射。如同Oracle中的DBlink一般，使用过Oracle DBlink数据库链接的人都知道可以跨实例来进行数据查询，同样的，Mysql自带的FEDERATED引擎完美的帮我们解决了该问题。
    
    </summary>
    
    
      <category term="MySQL" scheme="https://jueee.github.io/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="https://jueee.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Neo4j 初始化密码</title>
    <link href="https://jueee.github.io/2020/08/2020-08-10-Neo4j%E5%88%9D%E5%A7%8B%E5%8C%96%E5%AF%86%E7%A0%81/"/>
    <id>https://jueee.github.io/2020/08/2020-08-10-Neo4j%E5%88%9D%E5%A7%8B%E5%8C%96%E5%AF%86%E7%A0%81/</id>
    <published>2020-08-10T00:00:00.000Z</published>
    <updated>2020-08-19T03:26:36.041Z</updated>
    
    <content type="html"><![CDATA[<h3 id="初始化Neo4j"><a href="#初始化Neo4j" class="headerlink" title="初始化Neo4j"></a>初始化 Neo4j</h3><p>Web 浏览器访问：<code>http://IP:7474/</code></p><p>连接 URL 为 ：<code>bolt://IP:7687</code>，初始用户名、密码为 <code>neo4j</code>，如下图所示：</p><p><img src="/images/2020/08/1597130874884.png" alt="1597130874884" loading="lazy"></p><p>初始化登录成功后，会要求重置 neo4j 密码，修改并确认新密码。</p><p><img src="/images/2020/08/1597130933055.png" alt="1597130933055" loading="lazy"></p><h3 id="浏览器下更改密码"><a href="#浏览器下更改密码" class="headerlink" title="浏览器下更改密码"></a>浏览器下更改密码</h3><p>Web 浏览器访问：<code>http://IP:7474/</code>，登录成功后，输入命令：</p><pre class="language-none"><code class="language-none">:server change-password</code></pre><h3 id="命令行更改密码"><a href="#命令行更改密码" class="headerlink" title="命令行更改密码"></a>命令行更改密码</h3><ol><li>进入 neo4j 安装目录， 并进入 bin 目录；</li><li>运行 <code>./cypher-shell</code> 命令， 输入用户名，密码（初始默认用户名和密码为 neo4j）</li><li>输入命令: <code>CALL dbms.security.changePassword('123456');</code> 输入命令  <code>:exit;</code> 退出</li></ol><p>例如：</p><p><img src="/images/2020/08/1597132382397.png" alt="1597132382397" loading="lazy"></p><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p>neo4j 设置项：<span class="exturl" data-url="aHR0cHM6Ly9uZW80ai5jb20vZG9jcy9vcGVyYXRpb25zLW1hbnVhbC9jdXJyZW50L3JlZmVyZW5jZS9wcm9jZWR1cmVzLw==">https://neo4j.com/docs/operations-manual/current/reference/procedures/<i class="fa fa-external-link-alt"></i></span></p><p>设置初始化密码：<span class="exturl" data-url="aHR0cHM6Ly9uZW80ai5jb20vZG9jcy9vcGVyYXRpb25zLW1hbnVhbC9jdXJyZW50L2NvbmZpZ3VyYXRpb24vc2V0LWluaXRpYWwtcGFzc3dvcmQv">https://neo4j.com/docs/operations-manual/current/configuration/set-initial-password/<i class="fa fa-external-link-alt"></i></span></p><p>密码和用户恢复：<span class="exturl" data-url="aHR0cHM6Ly9uZW80ai5jb20vZG9jcy9vcGVyYXRpb25zLW1hbnVhbC9jdXJyZW50L2NvbmZpZ3VyYXRpb24vcGFzc3dvcmQtYW5kLXVzZXItcmVjb3Zlcnkv">https://neo4j.com/docs/operations-manual/current/configuration/password-and-user-recovery/<i class="fa fa-external-link-alt"></i></span></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;初始化Neo4j&quot;&gt;&lt;a href=&quot;#初始化Neo4j&quot; class=&quot;headerlink&quot; title=&quot;初始化Neo4j&quot;&gt;&lt;/a&gt;初始化 Neo4j&lt;/h3&gt;&lt;p&gt;Web 浏览器访问：&lt;code&gt;http://IP:7474/&lt;/code&gt;&lt;/p&gt;
&lt;p
      
    
    </summary>
    
    
      <category term="Neo4j" scheme="https://jueee.github.io/categories/Neo4j/"/>
    
    
      <category term="Neo4j" scheme="https://jueee.github.io/tags/Neo4j/"/>
    
  </entry>
  
</feed>
