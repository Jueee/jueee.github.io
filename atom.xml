<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小决的专栏</title>
  
  <subtitle>进一寸有一寸的欢喜</subtitle>
  <link href="https://jueee.github.io/atom.xml" rel="self"/>
  
  <link href="https://jueee.github.io/"/>
  <updated>2020-11-27T07:58:48.103Z</updated>
  <id>https://jueee.github.io/</id>
  
  <author>
    <name>小决</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ElasticSearch 集成 Spring 之 ElasticsearchTemplate 示例</title>
    <link href="https://jueee.github.io/2020/11/2020-11-27-ElasticSearch%E9%9B%86%E6%88%90Spring%E4%B9%8BElasticsearchTemplate%E7%A4%BA%E4%BE%8B/"/>
    <id>https://jueee.github.io/2020/11/2020-11-27-ElasticSearch%E9%9B%86%E6%88%90Spring%E4%B9%8BElasticsearchTemplate%E7%A4%BA%E4%BE%8B/</id>
    <published>2020-11-27T00:00:00.000Z</published>
    <updated>2020-11-27T07:58:48.103Z</updated>
    
    <content type="html"><![CDATA[<h3 id="ElasticsearchTemplate"><a href="#ElasticsearchTemplate" class="headerlink" title="ElasticsearchTemplate"></a>ElasticsearchTemplate</h3><p>ElasticsearchTemplate 是 Spring 对 ElasticSearch 的 Java api 进行的封装，提供了大量的相关的类来完成各种各样的查询。</p><h4 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h4><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.data/spring-data-elasticsearch --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.data<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-data-elasticsearch<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.2.1.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></code></pre><h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><p><strong>索引是否存在</strong></p><pre class="language-java" data-language="java"><code class="language-java">elasticsearchTemplate<span class="token punctuation">.</span><span class="token function">indexExists</span><span class="token punctuation">(</span><span class="token class-name">Test</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span></code></pre><p><strong>创建索引并初始化 Mapping</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">boolean</span> createResult <span class="token operator">=</span> elasticsearchTemplate<span class="token punctuation">.</span><span class="token function">createIndex</span><span class="token punctuation">(</span><span class="token class-name">Test</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"[createResult]"</span><span class="token operator">+</span>createResult<span class="token punctuation">)</span><span class="token punctuation">;</span>elasticsearchTemplate<span class="token punctuation">.</span><span class="token function">putMapping</span><span class="token punctuation">(</span><span class="token class-name">Test</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>elasticsearchTemplate<span class="token punctuation">.</span><span class="token function">refresh</span><span class="token punctuation">(</span><span class="token class-name">Test</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;ElasticsearchTemplate&quot;&gt;&lt;a href=&quot;#ElasticsearchTemplate&quot; class=&quot;headerlink&quot; title=&quot;ElasticsearchTemplate&quot;&gt;&lt;/a&gt;ElasticsearchTemplate&lt;/</summary>
      
    
    
    
    <category term="Java" scheme="https://jueee.github.io/categories/Java/"/>
    
    <category term="JavaJar" scheme="https://jueee.github.io/categories/Java/JavaJar/"/>
    
    <category term="ElasticSearch" scheme="https://jueee.github.io/categories/ElasticSearch/"/>
    
    
    <category term="Java" scheme="https://jueee.github.io/tags/Java/"/>
    
    <category term="JavaJar" scheme="https://jueee.github.io/tags/JavaJar/"/>
    
    <category term="ElasticSearch" scheme="https://jueee.github.io/tags/ElasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>RAID 管理工具 MegaCli 的安装使用</title>
    <link href="https://jueee.github.io/2020/11/2020-11-26-RAID%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7MegaCli%E7%9A%84%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/"/>
    <id>https://jueee.github.io/2020/11/2020-11-26-RAID%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7MegaCli%E7%9A%84%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/</id>
    <published>2020-11-26T00:00:00.000Z</published>
    <updated>2020-11-24T09:45:48.681Z</updated>
    
    <content type="html"><![CDATA[<h3 id="MegaCli-介绍"><a href="#MegaCli-介绍" class="headerlink" title="MegaCli 介绍"></a>MegaCli 介绍</h3><p>MegaCli 是一款管理维护硬件 RAID 软件，可以通过它来了解当前 raid 卡的所有信息，包括 raid 卡的型号，raid 的阵列类型，raid 上各磁盘状态，等等。</p><a id="more"></a><h3 id="MegaCli-安装"><a href="#MegaCli-安装" class="headerlink" title="MegaCli 安装"></a>MegaCli 安装</h3><h4 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h4><p>方案一</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt-get</span> <span class="token function">install</span> alien<span class="token function">wget</span> --user<span class="token operator">=</span>hetzner --password<span class="token operator">=</span>download http://download.hetzner.de/tools/LSI/tools/MegaCLI/8.07.14_MegaCLI.zip<span class="token function">unzip</span> <span class="token number">8.07</span>.14_MegaCLI.zip -d megacli<span class="token builtin class-name">cd</span> megacli/Linux<span class="token function">sudo</span> alien MegaCli-8.07.14-1.noarch.rpm<span class="token function">sudo</span> dpkg -i megacli_8.07.14-2_all.deb<span class="token function">ln</span> -s /opt/MegaRAID/MegaCli/MegaCli64 /usr/bin/megacli</code></pre><p>方案二</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt-get</span> -y <span class="token function">install</span>  rpm2cpio libsysfs2 libsysfs-dev <span class="token function">unzip</span><span class="token function">unzip</span> <span class="token number">8.00</span>.48_Linux_MegaCLI.zip<span class="token function">unzip</span> MegaCliLin.ziprpm2cpio Lib_Utils-1.00-09.noarch.rpm <span class="token operator">|</span> cpio -idmvrpm2cpio MegaCli-8.00.48-1.i386.rpm <span class="token operator">|</span> cpio -idmv<span class="token function">ln</span> -s opt/MegaRAID/MegaCli/MegaCli64 /usr/bin/megacli64<span class="token function">ln</span> -s opt/MegaRAID/MegaCli/MegaCli /usr/bin/megacli</code></pre><h4 id="验证安装"><a href="#验证安装" class="headerlink" title="验证安装"></a>验证安装</h4><pre class="language-bash" data-language="bash"><code class="language-bash">$  megacli -v      MegaCLI SAS RAID Management Tool  Ver <span class="token number">8.07</span>.14 Dec <span class="token number">16</span>, <span class="token number">2013</span>    <span class="token punctuation">(</span>c<span class="token punctuation">)</span>Copyright <span class="token number">2013</span>, LSI Corporation, All Rights Reserved.Exit Code: 0x00</code></pre><h4 id="安装异常"><a href="#安装异常" class="headerlink" title="安装异常"></a>安装异常</h4><p>问题：</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ megaclimegacli: error <span class="token keyword">while</span> loading shared libraries: libncurses.so.5: cannot <span class="token function">open</span> shared object file: No such <span class="token function">file</span> or directory</code></pre><p>解决</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">apt-get</span> <span class="token function">install</span> libncurses5</code></pre><h3 id="命令汇总"><a href="#命令汇总" class="headerlink" title="命令汇总"></a>命令汇总</h3><ul><li><p>查看 raid 卡日志</p><p>megacli -FwTermLog -Dsply -aALL</p></li><li><p>显示适配器个数</p><p>megacli -adpCount</p></li><li><p>显示适配器时间</p><p>megacli -AdpGetTime –aALL</p></li><li><p>显示所有适配器信息</p><p>megacli -AdpAllInfo -aAll</p></li><li><p>显示所有逻辑磁盘组信息</p><p>megacli -LDInfo -LALL -aAll</p></li><li><p>查 raid 卡信息 (生产商、电池信息及所支持的 raid 级别)</p><p>megacli -AdpAllInfo -aALL |grep -E "Product Name|BBU|Memory Size|RAID Level Supported"</p></li><li><p>查看虚拟化 (vd) 和物理盘 (pd) 的信息，比如查看物理硬盘数，是否有硬盘 offline 或者 degraded</p><p>megacli -AdpAllInfo -aALL |grep -E "Device Present" -A9</p></li><li><p>查看硬盘是否 online</p><p>megacli -PDList -aALL |grep "Firmware state"</p></li><li><p>查看硬盘是否存在物理错误 (error 不为 0，可能会有硬盘故障即将发生)</p><p>megacli -PDList -aALL |grep -i error</p></li><li><p>查看电池信息 (电池类型、电池状态、充电状态、温度等)</p><p>megacli -AdpBbuCmd -aAll</p></li><li><p>raid 卡个数</p><p>megacli –adpCount</p></li><li><p>检测磁盘 ID 注意，该 ID 值用于标注磁盘</p><p>megacli -PDlist -aALL | grep "ID" | uniq</p></li><li><p>显示所有逻辑磁盘组信息 (做了几组 raid，raid cache 的默认和当前策略，做好 raid 后的虚拟盘容量)</p><p>megacli -LDInfo -LALL -aAll</p></li><li><p>显示所有物理盘 (物理磁盘个数、大小、是否存在 error)</p><p>megacli -PDList -aAll</p></li><li><p>显示所有物理盘物理错误</p><p>megacli -PDList -aAll |grep -i error</p></li><li><p>查看充电状态</p><p>megacli -AdpBbuCmd -GetBbuStatus -aALL |grep 'Charger Status'</p></li><li><p>显示 BBU 状态信息，比如电池是否，如果 issohgood 为 Yes 为正常，No 为异常</p></li></ul><p>  megacli -AdpBbuCmd -GetBbuStatus -aALL|grep -i issohgood</p><ul><li><p>显示 BBU 状态信息</p><p>megacli -AdpBbuCmd -GetBbuStatus -aALL</p></li><li><p>显示 BBU 容量信息</p><p>megacli -AdpBbuCmd -GetBbuCapacityInfo -aALL</p></li><li><p>显示 BBU 设计参数</p><p>megacli -AdpBbuCmd -GetBbuDesignInfo -aALL</p></li><li><p>显示当前 BBU 属性</p><p>megacli -AdpBbuCmd -GetBbuProperties -aALL</p></li><li><p>显示 Raid 卡型号，cache 大小、Raid 设置，cache 策略、Disk 相关信息</p><p>megacli -cfgdsply -aALL |egrep "PDs|VDs|Product Name|Memory|BBU:"</p></li><li><p>查看磁盘缓存策略 (查看 vd 的)</p><p>megacli -LDGetProp -Cache -LALL -aALL</p></li><li><p>查看磁盘缓存策略 (查看 pd 的)</p><p>megacli -LDGetProp -DskCache -LALL -aALL</p></li><li><p>查看物理磁盘重建进度</p><p>megacli -PDRbld -ShowProg -PhysDrv [1:5] -a0</p></li><li><p>以动态可视化文字界面显示</p><p>megacli -PDRbld -ProgDsply -PhysDrv [1:5] -a0</p></li><li><p>关闭缓存</p><p>megacli -LDSetProp -DisDskCache -L0 -a0</p></li><li><p>显示 Rebuid 进度</p><p>megacli -PDRbld -ShowProg -physdrv[20:2] -aALL</p></li><li><p>查看 E S</p><p>megacli -PDList -aAll -NoLog | grep -Ei "(enclosure|slot)"</p></li><li><p>查看所有硬盘的状态</p><p>megacli -PDList -aAll -NoLog</p></li><li><p>查看所有 Virtual Disk 的状态</p><p>megacli -LdPdInfo -aAll -NoLog</p></li><li><p>在线做 Raid</p><p>megacli -CfgLdAdd -r0[0:11] WB NORA Direct CachedBadBBU -strpsz64 -a0 -NoLog</p><p>megacli -CfgLdAdd -r5 [12:2,12:3,12:4,12:5,12:6,12:7] WB Direct -a0</p></li><li><p>点亮指定硬盘 (定位)</p><p>megacli -PdLocate -start -physdrv[252:2] -a0</p></li><li><p>清除 Foreign 状态</p><p>megacli -CfgForeign -Clear -a0</p></li><li><p>查看 RAID 阵列中掉线的盘</p><p>megacli -pdgetmissing -a0</p></li><li><p>替换坏掉的模块</p><p>megacli -pdreplacemissing -physdrv[12:10] -Array5 -row0 -a0</p></li><li><p>手动开启 rebuid</p><p>megacli -pdrbld -start -physdrv[12:10] -a0</p></li><li><p>查看 Megacli 的 log</p><p>megacli -FwTermLog dsply -a0 &gt; adp2.log</p></li><li><p>设置 HotSpare</p><p>megacli -pdhsp -set [-Dedicated [-Array2]] [-EnclAffinity] [-nonRevertible] -PhysDrv[4:11] -a0</p><p>megacli -pdhsp -set [-EnclAffinity] [-nonRevertible] -PhysDrv[32：1}] -a0</p></li><li><p>关闭 Rebuild</p><p>megacli -AdpAutoRbld -Dsbl -a0</p></li><li><p>设置 rebuild 的速率</p><p>megacli -AdpSetProp RebuildRate -30 -a0</p></li><li><p>创建一个 raid5 阵列，由物理盘 2,3 4 构成，该阵列的热备盘是物理盘 5</p><p>megacli-CfgLdA d -r5 [1:2,1:3,1:4] WB Direct -Hsp[1:5] -a0</p></li><li><p>创建阵列，不指定热备</p><p>megacli-CfgLdA d -r5 [1:2,1:3,1:4] WB Direct -a0</p></li><li><p>删除阵列</p><p>megacli-CfgLdDel -L1 -a0</p></li><li><p>在线添加磁盘</p><p>megacli-LDRecon -Star - 5 Ad -PhysDrv[1:4] -L1 -a0</p></li><li><p>阵列创建完后，会有一个初始化同步块的过程，可以看 其进度。</p><p>megacli-LDInit -ShowProg -LA L -aAL</p></li><li><p>以动态可视化文字界面显示</p><p>megacli-LDInit -ProgDsply -LA L -aAL</p></li><li><p>查看阵列后台初始化进度</p><p>megacli-LDBI -ShowProg -LA L -aAL</p></li><li><p>或者以动态可视化文字界面显示</p><p>megacli-LDBI -ProgDsply -LA L -aAL</p></li><li><p>指定第 5 块盘作为全局热备</p><p>megacli-PDHSP -Set [-EnclAf in ty] [-no Rev rtible] -PhysDrv[1:5] -a0</p></li><li><p>指定为某个阵列的专用热备</p><p>megacli-PDHSP -Set [-Dedicated [-Ar ay1] [-EnclAf in ty] [-no Rev rtible] -PhysDrv[1:5] -a0</p></li><li><p>删除全局热备</p><p>megacli-PDHSP -Rmv -PhysDrv[1:5] -a0</p></li><li><p>将某块物理盘下线 / 上线</p><p>megacli -PDOffline -PhysDrv [1:4] -a0</p><p>megacli -PDOnline -PhysDrv [1:4] -a0</p></li><li><p>查看物理磁盘重建进度</p><p>megacli-PDRbld -ShowProg -PhysDrv [1:5] -a0</p></li><li><p>或者以动态可视化文字界面显示</p><p>megacli -PDRbld -ProgDsply -PhysDrv [1:5] -a0</p></li><li><p>查看做 raid 的情况</p><p>megacli -LDInfo -Lal -aAL | grep -E "RAID Lev l|Strip Size|NumberOf Drives|Span Depth|^Size"</p></li><li><p>取 Enclosure Device ID</p><p>uiqnum=<code> megacli -PDlist -aAL | grep "ID" | uniq |awk -F: '{print $2}' | awk '{print $1}'</code></p></li><li><p>取 Slot Number</p><p>disknum=<code>megacli -PDList -aAL | grep -E "DISK GROUP|Slot Number|postion:|Firmware sta e:" | grep Slot | awk -F[: ] '{print $NF}'</code></p></li><li><p>算出总数</p><p>diskto al=<code>megacli -PDList -aAL | grep -E "DISK GROUP|Slot Number|postion:|Firmware sta e:" | grep Slot | awk -F[: ] '{print $NF}' | wc -l</code><br>ar ay=($disknum)</p></li><li><p>查看当前 raid 缓存状态，raid 缓存状态设置为 wb 的话要注意电池放电事宜，设置电池放电模式为自动学习模式</p><p>megacli   -ldgetprop  -dskcache -lall  -aall</p></li><li><p>raid 电池设置相关</p><ul><li><p>查看电池状态信息 (Display BBU Status Information)</p><p>megacli -AdpBbuCmd -GetBbuStatus -aN|-a0,1,2|-aALL</p><p>megacli -AdpBbuCmd -GetBbuStatus -aALL</p></li><li><p>查看电池容量（Display BBU Capacity Information）</p><p>megacli -AdpBbuCmd -GetBbuCapacityInfo -aN|-a0,1,2|-aALL</p><p>megacli -AdpBbuCmd -GetBbuCapacityInfo –aALL</p></li><li><p>查看电池设计参数 (Display BBU Design Parameters)</p><p>megacli -AdpBbuCmd -GetBbuDesignInfo -aN|-a0,1,2|-aALL</p><p>megacli -AdpBbuCmd -GetBbuDesignInfo –aALL</p></li><li><p>查看电池属性（Display Current BBU Properties）</p><p>megacli -AdpBbuCmd -GetBbuProperties -aN|-a0,1,2|-aALL</p><p>megacli -AdpBbuCmd -GetBbuProperties –aALL</p></li><li><p>设置电池为学习模式为循环模式（Start BBU Learning Cycle）</p><p>megacli -AdpBbuCmd -BbuLearn -aN|-a0,1,2|-aALL</p></li></ul></li><li><p>查询 raid 级别，磁盘数量，容量，条带大小。</p><p>megacli -cfgdsply -aALL |grep Policy</p></li><li><p>查询控制器 cache 策略</p><p>megacli -LDSetProp WB -L0 -a0</p></li><li><p>设置 write back 功能</p><p>megacli -LDSetProp CachedBadBBU -L0 -a0</p></li><li><p>设置即使电池坏了还是保持 WB 功能</p><p>megacli -AdpBbuCmd -BbuLearn a0</p></li><li><p>手动充电</p><p>megacli -FwTermLog -Dsply -aALL</p></li><li><p>显示适配器个数： </p><p>megacli -adpCount</p></li><li><p>显示所有适配器信息： </p><p>megacli -AdpAllInfo -aAll</p></li><li><p>显示所有逻辑磁盘组信息： </p><p>megacli -LDInfo -LALL -aAll</p></li><li><p>显示所有的物理信息： </p><p>megacli -PDList -aAll<br>Media</p></li><li><p>查看充电状态： </p><p>megacli -AdpBbuCmd -GetBbuStatus -aALL</p></li><li><p>显示 BBU (后备电池) 状态信息： </p><p>megacli -AdpBbuCmd -GetBbuStatus -aALL</p></li><li><p>显示 BBU 容量信息： </p><p>megacli -AdpBbuCmd -GetBbuCapacityInfo -aALL</p></li><li><p>显示 BBU 设计参数： </p><p>megacli -AdpBbuCmd -GetBbuDesignInfo -aALL</p></li><li><p>显示当前 BBU 属性： </p><p>megacli -AdpBbuCmd -GetBbuProperties -aALL</p></li><li><p>显示 Raid 卡型号，Raid 设置，Disk 相关信息： </p><p>megacli -cfgdsply -aALL</p></li><li><p>查看 Cache 策略设置： </p><p>megacli -cfgdsply -aALL |grep -i Policy</p></li><li><p>查看充电进度百分比： </p><p>megacli -AdpBbuCmd -GetBbuStatus -aALL</p></li></ul><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><span class="exturl" data-url="aHR0cHM6Ly9pZGMud2FueXVuc2h1anUuY29tL2N5bS82NDYuaHRtbA==">https://idc.wanyunshuju.com/cym/646.html<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vZnhrcmF1cy81OTVhYjgyZTA3Y2Q2ZjhlMDU3ZDMxYmMwYmM1ZTc3OQ==">https://gist.github.com/fxkraus/595ab82e07cd6f8e057d31bc0bc5e779<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpbnFpZGlhbl94aWFvL2FydGljbGUvZGV0YWlscy84MDk0MDMwNg==">https://blog.csdn.net/xinqidian_xiao/article/details/80940306<i class="fa fa-external-link-alt"></i></span></li></ul>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;MegaCli-介绍&quot;&gt;&lt;a href=&quot;#MegaCli-介绍&quot; class=&quot;headerlink&quot; title=&quot;MegaCli 介绍&quot;&gt;&lt;/a&gt;MegaCli 介绍&lt;/h3&gt;&lt;p&gt;MegaCli 是一款管理维护硬件 RAID 软件，可以通过它来了解当前 raid 卡的所有信息，包括 raid 卡的型号，raid 的阵列类型，raid 上各磁盘状态，等等。&lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://jueee.github.io/categories/Linux/"/>
    
    <category term="软件" scheme="https://jueee.github.io/categories/Linux/%E8%BD%AF%E4%BB%B6/"/>
    
    
    <category term="Linux" scheme="https://jueee.github.io/tags/Linux/"/>
    
    <category term="软件" scheme="https://jueee.github.io/tags/%E8%BD%AF%E4%BB%B6/"/>
    
    <category term="RAID" scheme="https://jueee.github.io/tags/RAID/"/>
    
  </entry>
  
  <entry>
    <title>Excel 文件导入导出工具 ExcelKit</title>
    <link href="https://jueee.github.io/2020/11/2020-11-25-Excel%E6%96%87%E4%BB%B6%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA%E5%B7%A5%E5%85%B7ExcelKit/"/>
    <id>https://jueee.github.io/2020/11/2020-11-25-Excel%E6%96%87%E4%BB%B6%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA%E5%B7%A5%E5%85%B7ExcelKit/</id>
    <published>2020-11-25T00:00:00.000Z</published>
    <updated>2020-11-24T03:46:49.940Z</updated>
    
    <content type="html"><![CDATA[<h3 id="ExcelKit-介绍"><a href="#ExcelKit-介绍" class="headerlink" title="ExcelKit 介绍"></a>ExcelKit 介绍</h3><p>ExcelKit 是简单、好用且轻量级的海量 Excel 文件导入导出解决方案。</p><ul><li>GitHub：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3dlbnpld29vL0V4Y2VsS2l0">https://github.com/wenzewoo/ExcelKit<i class="fa fa-external-link-alt"></i></span></li><li>Gitee：<span class="exturl" data-url="aHR0cHM6Ly9naXRlZS5jb20vd3V3ZW56ZS9FeGNlbEtpdC8=">https://gitee.com/wuwenze/ExcelKit/<i class="fa fa-external-link-alt"></i></span></li></ul><a id="more"></a><h4 id="ExcelKit-引入"><a href="#ExcelKit-引入" class="headerlink" title="ExcelKit 引入"></a>ExcelKit 引入</h4><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.wuwenze<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>ExcelKit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.0.72<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></code></pre><h3 id="ExcelKit-示例"><a href="#ExcelKit-示例" class="headerlink" title="ExcelKit 示例"></a>ExcelKit 示例</h3><h4 id="ExcelMapping"><a href="#ExcelMapping" class="headerlink" title="ExcelMapping"></a>ExcelMapping</h4><p>ExcelMapping (配置 Excel 与实体之间的映射关系)</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@Excel</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"tb_user"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Id</span>    <span class="token annotation punctuation">@ExcelField</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"编号"</span><span class="token punctuation">,</span> width <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ExcelField</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"用户名"</span><span class="token punctuation">,</span> width <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ExcelField</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"昵称"</span><span class="token punctuation">,</span> width <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> nickname<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ExcelField</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"邮箱"</span><span class="token punctuation">,</span> width <span class="token operator">=</span> <span class="token number">150</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ExcelField</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"电话号码"</span><span class="token punctuation">,</span> width <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> phoneNumber<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> status<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ExcelField</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"创建时间"</span><span class="token punctuation">,</span> dateFormat <span class="token operator">=</span> <span class="token string">"yyyy年MM月dd日 HH:mm:ss"</span><span class="token punctuation">,</span> width <span class="token operator">=</span> <span class="token number">180</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Date</span> createTime<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ExcelField</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"修改时间"</span><span class="token punctuation">,</span> dateFormat <span class="token operator">=</span> <span class="token string">"yyyy年MM月dd日 HH:mm:ss"</span><span class="token punctuation">,</span>width <span class="token operator">=</span> <span class="token number">180</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Date</span> modifiedTime<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ExcelField</span><span class="token punctuation">(</span><span class="token comment">//</span>            value <span class="token operator">=</span> <span class="token string">"性别"</span><span class="token punctuation">,</span>            readConverterExp <span class="token operator">=</span> <span class="token string">"男=1,女=0"</span><span class="token punctuation">,</span>            writeConverterExp <span class="token operator">=</span> <span class="token string">"1=男,0=女"</span>            <span class="token punctuation">,</span>width <span class="token operator">=</span> <span class="token number">50</span>    <span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> sex<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ExcelField</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"密码盐值"</span><span class="token punctuation">,</span> width <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> salt<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ExcelField</span><span class="token punctuation">(</span><span class="token comment">//</span>            value <span class="token operator">=</span> <span class="token string">"用户类型"</span><span class="token punctuation">,</span>            readConverterExp <span class="token operator">=</span> <span class="token string">"超级管理员=0,普通用户=1"</span><span class="token punctuation">,</span>            writeConverterExp <span class="token operator">=</span> <span class="token string">"0=超级管理员,1=普通用户"</span>            <span class="token punctuation">,</span>width <span class="token operator">=</span> <span class="token number">80</span>    <span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> type<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ExcelField</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"用户密码"</span><span class="token punctuation">,</span> width <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ExcelField</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"出生日期"</span><span class="token punctuation">,</span> dateFormat <span class="token operator">=</span> <span class="token string">"yyyy/MM/dd"</span><span class="token punctuation">,</span>width <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Date</span> birth<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> departmentId<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ExcelField</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"头像url"</span><span class="token punctuation">,</span> width <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> avatar<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> is_corp<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="下载-Controller"><a href="#下载-Controller" class="headerlink" title="下载 Controller"></a>下载 Controller</h4><p>使用 ExcelKit 提供的 API 构建导入模板，会根据配置生成批注，下拉框等</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">UserService</span> userService<span class="token punctuation">;</span>        <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/excel"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">export</span><span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> users <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>userService<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ExcelKit</span><span class="token punctuation">.</span>$<span class="token class-name">Export</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">downXlsx</span><span class="token punctuation">(</span>users<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="下载-HEML"><a href="#下载-HEML" class="headerlink" title="下载 HEML"></a>下载 HEML</h4><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>downExcel<span class="token punctuation">"</span></span> <span class="token attr-name">icon</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>el-icon-download<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>导出<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">&gt;</span></span></code></pre><h4 id="下载-Script"><a href="#下载-Script" class="headerlink" title="下载 Script"></a>下载 Script</h4><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">downExcel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> $<span class="token keyword">this</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> res <span class="token operator">=</span> axios    <span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        url<span class="token operator">:</span> <span class="token string">"/user/excel"</span><span class="token punctuation">,</span>        method<span class="token operator">:</span> <span class="token string">"post"</span><span class="token punctuation">,</span>        responseType<span class="token operator">:</span> <span class="token string">"blob"</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">"content-type"</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">"application/json"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> $<span class="token keyword">this</span><span class="token punctuation">.</span>$message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>                <span class="token string">"Subject does not have permission [user:export]"</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">const</span> data <span class="token operator">=</span> res<span class="token punctuation">.</span>data<span class="token punctuation">;</span>        <span class="token keyword">let</span> url <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将二进制文件转化为可访问的url</span>        <span class="token keyword">var</span> a <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token punctuation">.</span>href <span class="token operator">=</span> url<span class="token punctuation">;</span>        a<span class="token punctuation">.</span>download <span class="token operator">=</span> <span class="token string">"用户列表.xls"</span><span class="token punctuation">;</span>        a<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        window<span class="token punctuation">.</span><span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">revokeObjectURL</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="下载效果"><a href="#下载效果" class="headerlink" title="下载效果"></a>下载效果</h4><p>下载文件：</p><p><img src="/images/2020/11/image-20201124114137155.png" alt="image-20201124114137155" loading="lazy"></p><p>打开效果：</p><p><img src="/images/2020/11/image-20201124114254144.png" alt="image-20201124114254144" loading="lazy"></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;ExcelKit-介绍&quot;&gt;&lt;a href=&quot;#ExcelKit-介绍&quot; class=&quot;headerlink&quot; title=&quot;ExcelKit 介绍&quot;&gt;&lt;/a&gt;ExcelKit 介绍&lt;/h3&gt;&lt;p&gt;ExcelKit 是简单、好用且轻量级的海量 Excel 文件导入导出解决方案。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GitHub：&lt;a href=&quot;https://github.com/wenzewoo/ExcelKit&quot;&gt;https://github.com/wenzewoo/ExcelKit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Gitee：&lt;a href=&quot;https://gitee.com/wuwenze/ExcelKit/&quot;&gt;https://gitee.com/wuwenze/ExcelKit/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Java" scheme="https://jueee.github.io/categories/Java/"/>
    
    <category term="JavaJar" scheme="https://jueee.github.io/categories/Java/JavaJar/"/>
    
    
    <category term="Java" scheme="https://jueee.github.io/tags/Java/"/>
    
    <category term="JavaJar" scheme="https://jueee.github.io/tags/JavaJar/"/>
    
    <category term="Excel" scheme="https://jueee.github.io/tags/Excel/"/>
    
  </entry>
  
  <entry>
    <title>Shell 中 kill 掉指定名称的进程</title>
    <link href="https://jueee.github.io/2020/11/2020-11-24-Shell%E4%B8%ADkill%E6%8E%89%E6%8C%87%E5%AE%9A%E5%90%8D%E7%A7%B0%E7%9A%84%E8%BF%9B%E7%A8%8B/"/>
    <id>https://jueee.github.io/2020/11/2020-11-24-Shell%E4%B8%ADkill%E6%8E%89%E6%8C%87%E5%AE%9A%E5%90%8D%E7%A7%B0%E7%9A%84%E8%BF%9B%E7%A8%8B/</id>
    <published>2020-11-24T00:00:00.000Z</published>
    <updated>2020-11-24T03:43:50.192Z</updated>
    
    <content type="html"><![CDATA[<p>在 Linux 开发中我们时常会遇到对于之前进程 kill 掉，然后再运行当前进程或程序的情况，此时我们是不知道需要 kill 的进程号的，那么就需要通过一个 shell 命令组合来实现这个需求。</p><a id="more"></a><h3 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h3><p>如下命令可以实现：</p><pre class="language-shell" data-language="shell"><code class="language-shell">ps a | grep -w nameprocess | grep -v grep| cut -c 1-5 | xargs kill -9</code></pre><p>说明：</p><ul><li>管道符 “|” 用来隔开两个命令，管道符左边命令的输出会作为管道符右边命令的输入。 </li><li>“ps a” 是查看所有进程的命令。这时检索出的进程将作为下一条命令 “grep“的输入，注意要结束其它程序时，请将上面命令中的 nameprocess 替换成其它程序名，-w 'nameprocess' 强制 PATTERN 仅完全匹配字词。</li><li>“grep -v grep” 是在列出的进程中去除含有关键字 “grep” 的进程。</li><li>“cut -c 1-5” 是截取输入行的第 1 个字符到第 5 个字符，而这正好是进程号 PID，或者根据自己实际的情况可以调整字符的截取位置。</li><li>“xargs kill -9” 中的 xargs 命令是用来把前面命令的输出结果（PID）作为 “kill -9” 命令的参数，并执行该命令。</li><li>“kill -9” 会强行杀掉指定进程，这样就成功清除了同名进程。</li></ul><h3 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h3><pre class="language-shell" data-language="shell"><code class="language-shell">ps axu|grep nameprocess | awk '{print "kill -9 "}'</code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;在 Linux 开发中我们时常会遇到对于之前进程 kill 掉，然后再运行当前进程或程序的情况，此时我们是不知道需要 kill 的进程号的，那么就需要通过一个 shell 命令组合来实现这个需求。&lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://jueee.github.io/categories/Linux/"/>
    
    <category term="Shell" scheme="https://jueee.github.io/categories/Linux/Shell/"/>
    
    
    <category term="Linux" scheme="https://jueee.github.io/tags/Linux/"/>
    
    <category term="Shell" scheme="https://jueee.github.io/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>安装 debian 无法启动的解决办法</title>
    <link href="https://jueee.github.io/2020/11/2020-11-19-%E5%AE%89%E8%A3%85debian%E6%97%A0%E6%B3%95%E5%90%AF%E5%8A%A8%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <id>https://jueee.github.io/2020/11/2020-11-19-%E5%AE%89%E8%A3%85debian%E6%97%A0%E6%B3%95%E5%90%AF%E5%8A%A8%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</id>
    <published>2020-11-24T00:00:00.000Z</published>
    <updated>2020-11-24T11:23:15.031Z</updated>
    
    <content type="html"><![CDATA[<p>安装了几次 debian，一直无法启动。一直闪烁光标。后来发现是默认的问题。</p><a id="more"></a><h3 id="Debian-安装"><a href="#Debian-安装" class="headerlink" title="Debian 安装"></a>Debian 安装</h3><p>关键在于最后的 GRUB 的选择。如下图：</p><p><img src="/images/2020/11/image-20201124185648813.png" alt="image-20201124185648813" loading="lazy"></p><p><img src="/images/2020/11/image-20201124185711361.png" alt="image-20201124185711361" loading="lazy"></p><h3 id="Debian-发行版本"><a href="#Debian-发行版本" class="headerlink" title="Debian 发行版本"></a>Debian 发行版本</h3><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuZGViaWFuLm9yZy9yZWxlYXNlcy8=">https://www.debian.org/releases/<i class="fa fa-external-link-alt"></i></span></li></ul><h3 id="Debian-官网下载"><a href="#Debian-官网下载" class="headerlink" title="Debian 官网下载"></a>Debian 官网下载</h3><ul><li>Debian 5（lenny）：<span class="exturl" data-url="aHR0cHM6Ly93d3cuZGViaWFuLm9yZy9yZWxlYXNlcy9sZW5ueS9kZWJpYW4taW5zdGFsbGVyLw==">https://www.debian.org/releases/lenny/debian-installer/<i class="fa fa-external-link-alt"></i></span></li><li>Debian 6（squeeze）：<span class="exturl" data-url="aHR0cHM6Ly93d3cuZGViaWFuLm9yZy9yZWxlYXNlcy9zcXVlZXplL2RlYmlhbi1pbnN0YWxsZXIv">https://www.debian.org/releases/squeeze/debian-installer/<i class="fa fa-external-link-alt"></i></span></li><li>Debian 7（wheezy）：<span class="exturl" data-url="aHR0cHM6Ly93d3cuZGViaWFuLm9yZy9yZWxlYXNlcy93aGVlenkvZGViaWFuLWluc3RhbGxlci8=">https://www.debian.org/releases/wheezy/debian-installer/<i class="fa fa-external-link-alt"></i></span></li><li>Debian 8（jessie）：<span class="exturl" data-url="aHR0cHM6Ly93d3cuZGViaWFuLm9yZy9yZWxlYXNlcy9qZXNzaWUvZGViaWFuLWluc3RhbGxlci8=">https://www.debian.org/releases/jessie/debian-installer/<i class="fa fa-external-link-alt"></i></span></li><li>Debian 9（stretch）：<span class="exturl" data-url="aHR0cHM6Ly93d3cuZGViaWFuLm9yZy9yZWxlYXNlcy9zdHJldGNoL2RlYmlhbi1pbnN0YWxsZXIv">https://www.debian.org/releases/stretch/debian-installer/<i class="fa fa-external-link-alt"></i></span></li><li>Debian 10（buster）：<span class="exturl" data-url="aHR0cHM6Ly93d3cuZGViaWFuLm9yZy9yZWxlYXNlcy9idXN0ZXIvZGViaWFuLWluc3RhbGxlci8=">https://www.debian.org/releases/buster/debian-installer/<i class="fa fa-external-link-alt"></i></span></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;安装了几次 debian，一直无法启动。一直闪烁光标。后来发现是默认的问题。&lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://jueee.github.io/categories/Linux/"/>
    
    
    <category term="Linux" scheme="https://jueee.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Docker 使用 Supervisor 来管理进程</title>
    <link href="https://jueee.github.io/2020/11/2020-11-23-Docker%E4%BD%BF%E7%94%A8Supervisor%E6%9D%A5%E7%AE%A1%E7%90%86%E8%BF%9B%E7%A8%8B/"/>
    <id>https://jueee.github.io/2020/11/2020-11-23-Docker%E4%BD%BF%E7%94%A8Supervisor%E6%9D%A5%E7%AE%A1%E7%90%86%E8%BF%9B%E7%A8%8B/</id>
    <published>2020-11-23T00:00:00.000Z</published>
    <updated>2020-11-23T06:08:49.616Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Docker</strong> 容器在启动的时候开启单个进程。但我们经常需要在一个机器上开启多个服务，这可以有很多方法，最简单的就是把多个启动命令放到一个启动脚本里面，启动的时候直接启动这个脚本，另外就是安装进程管理工具。</p><p>本小节将使用进程管理工具 supervisor 来管理容器中的多个进程。使用 Supervisor 可以更好的控制、管理、重启我们希望运行的进程。</p><a id="more"></a><h3 id="配置方法"><a href="#配置方法" class="headerlink" title="配置方法"></a>配置方法</h3><h4 id="Dockerfile-配置"><a href="#Dockerfile-配置" class="headerlink" title="Dockerfile 配置"></a>Dockerfile 配置</h4><p>执行 apt 安装时注意加入 <code>-y --no-install-recommends</code>，并且在安装完成后执行 <code>rm -rf /var/lib/apt/lists/* &amp;&amp; apt-get clean</code> 命令，可以有效减小镜像的体积。</p><pre class="language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">COPY sources.list /etc/apt/RUN apt-get update &amp;&amp; \    apt-get install -y --no-install-recommends \    cron supervisor &amp;&amp; \    rm -rf /var/lib/apt/lists/* &amp;&amp; \    apt-get cleanCOPY run-cron /etc/cron.d/run-cronRUN chmod 0644 /etc/cron.d/run-cronRUN crontab /etc/cron.d/run-cronCOPY supervisord.conf /etc/supervisor/conf.d/supervisord.confCMD ["/usr/bin/supervisord"]</code></pre><p>其中，run-cron 文件内容如下：</p><pre class="language-none"><code class="language-none">PATH="/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"* * * * * echo `date` &gt;&gt; /tmp/crontab-date* * * * * /java-app-dir/healthCheck.sh</code></pre><p>这样安装完 cron 服务后，crontab 服务并不会自启动，还需要 <code>/etc/init.d/cron start</code> 的启动命令。</p><pre class="language-none"><code class="language-none"># 保存环境变量，开启crontab服务env &gt;&gt; /etc/default/locale/etc/init.d/cron start</code></pre><p><code>/etc/init.d/cron start</code> 用于启动 crontab 服务，但这样启动的 crontab 服务中配置的定时命令是没有 Dockerfile 中设置的环境变量的。</p><p>因此还需要在这之前执行 <code>env &gt;&gt; /etc/default/locale</code>，这样有 Dockerfile 中通过 <code>ENV</code> 设置的环境变量在 crontab 中就可以正常读取了。</p><h4 id="supervisor配置"><a href="#supervisor配置" class="headerlink" title="supervisor配置"></a>supervisor 配置</h4><p>supervisor 配置文件内容</p><pre class="language-ini" data-language="ini"><code class="language-ini"><span class="token selector">[supervisord]</span><span class="token constant">nodaemon</span><span class="token attr-value"><span class="token punctuation">=</span>true</span><span class="token selector">[program:cron]</span><span class="token constant">command</span><span class="token attr-value"><span class="token punctuation">=</span>/etc/init.d/cron start</span><span class="token selector">[program:javaapp]</span><span class="token constant">command</span><span class="token attr-value"><span class="token punctuation">=</span>/bin/bash -c "/java-app-dir/appCtrl.sh start &amp;&amp; tail -f /dev/null"</span></code></pre><p>配置文件包含目录和进程：</p><ul><li>第一段 supervsord 配置软件本身，使用 nodaemon 参数来运行。</li><li>第二段包含要控制的 2 个服务。每一段包含一个服务的目录和启动这个服务的命令。</li></ul><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p>创建镜像。</p><pre class="language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">sudo</span> docker build -t test/supervisord <span class="token builtin class-name">.</span></code></pre><p>启动 supervisor 容器。</p><pre class="language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">sudo</span> docker run -t -i test/supervisords<span class="token number">2020</span>-11-23 <span class="token number">13</span>:48:53,271 INFO Included extra <span class="token function">file</span> <span class="token string">"/etc/supervisor/conf.d/supervisord.conf"</span> during parsing<span class="token number">2020</span>-11-23 <span class="token number">13</span>:48:53,282 INFO RPC interface <span class="token string">'supervisor'</span> initialized<span class="token number">2020</span>-11-23 <span class="token number">13</span>:48:53,282 CRIT Server <span class="token string">'unix_http_server'</span> running without any HTTP authentication checking<span class="token number">2020</span>-11-23 <span class="token number">13</span>:48:53,282 INFO supervisord started with pid <span class="token number">1</span><span class="token number">2020</span>-11-23 <span class="token number">13</span>:48:54,284 INFO spawned: <span class="token string">'cron'</span> with pid <span class="token number">8</span><span class="token number">2020</span>-11-23 <span class="token number">13</span>:48:54,286 INFO spawned: <span class="token string">'javaapp'</span> with pid <span class="token number">9</span></code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;Docker&lt;/strong&gt; 容器在启动的时候开启单个进程。但我们经常需要在一个机器上开启多个服务，这可以有很多方法，最简单的就是把多个启动命令放到一个启动脚本里面，启动的时候直接启动这个脚本，另外就是安装进程管理工具。&lt;/p&gt;
&lt;p&gt;本小节将使用进程管理工具 supervisor 来管理容器中的多个进程。使用 Supervisor 可以更好的控制、管理、重启我们希望运行的进程。&lt;/p&gt;</summary>
    
    
    
    <category term="Docker" scheme="https://jueee.github.io/categories/Docker/"/>
    
    
    <category term="Docker" scheme="https://jueee.github.io/tags/Docker/"/>
    
    <category term="Supervisor" scheme="https://jueee.github.io/tags/Supervisor/"/>
    
  </entry>
  
  <entry>
    <title>Debian 下配置网络的方法</title>
    <link href="https://jueee.github.io/2020/11/2020-11-20-Debian%E4%B8%8B%E9%85%8D%E7%BD%AE%E7%BD%91%E7%BB%9C%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>https://jueee.github.io/2020/11/2020-11-20-Debian%E4%B8%8B%E9%85%8D%E7%BD%AE%E7%BD%91%E7%BB%9C%E7%9A%84%E6%96%B9%E6%B3%95/</id>
    <published>2020-11-20T00:00:00.000Z</published>
    <updated>2020-11-23T08:40:14.241Z</updated>
    
    <content type="html"><![CDATA[<h3 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h3><h4 id="配置网卡"><a href="#配置网卡" class="headerlink" title="配置网卡"></a>配置网卡</h4><p>修改 /etc/network/interfaces 添加如下</p><pre class="language-none"><code class="language-none"># #号后面是备注，不要添加哦！ auto eth0 #开机自动激活iface eth0 inte static #静态IPaddress 192.168.0.56 #本机IPnetmask 255.255.255.0 #子网掩码gateway 192.168.0.254 #路由网关 #因为我是通过路由上网的，所以配置为静态IP和网关</code></pre><p>如果是用 DHCP 自动获取，请在配置文件里添加如下：</p><pre class="language-none"><code class="language-none">iface eth0 inet dhcp</code></pre><h4 id="设置DNS"><a href="#设置DNS" class="headerlink" title="设置DNS"></a>设置 DNS</h4><pre class="language-none"><code class="language-none">echo "nameserver 202.96.128.86" &gt;&gt; /etc/resolv.conf#请设置为你当地的DNS</code></pre><p>到这里配置好以后，重启一下网络。</p><h4 id="重启网络"><a href="#重启网络" class="headerlink" title="重启网络"></a>重启网络</h4><pre class="language-none"><code class="language-none">/etc/init.d/networking restart</code></pre><h3 id="网卡配置"><a href="#网卡配置" class="headerlink" title="网卡配置"></a>网卡配置</h3><p><strong>ifup 命令</strong> 用于激活指定的网络接口。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 启动网卡eth1</span><span class="token function">ifup</span> eth1</code></pre><p><strong>ifdown 命令</strong> 用于禁用指定的网络接口。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 停止网卡eth1</span><span class="token function">ifdown</span> eth1</code></pre><h3 id="问题处理"><a href="#问题处理" class="headerlink" title="问题处理"></a>问题处理</h3><p>问题描述：</p><p>配置完 /etc/networking/interfaces 后，使用 /etc/init.d/networking restart 出现启动失败，根据提示输入 systemctl status networking.service 发现不认识 /etc/networking/interfaces 中配置的虚拟网卡 (或者是因为虚拟机的重新移动导致的设备不匹配问题等)</p><p>解决方法：</p><p>首先可以查看 etc/udev/rules.d/70-persistent-net.rules 是否存在，如果存在，则删除 rm etc/udev/rules.d/70-persistent-net.rules，重启即可</p><p>如果 etc/udev/rules.d/70-persistent-net.rules 不存在，则 ifconfig -a 查看全部网卡，修改 /etc/networking/interfaces 中的网卡名和 ifconfig -a 命令显示的网卡名匹配，重启网络即可。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;网络配置&quot;&gt;&lt;a href=&quot;#网络配置&quot; class=&quot;headerlink&quot; title=&quot;网络配置&quot;&gt;&lt;/a&gt;网络配置&lt;/h3&gt;&lt;h4 id=&quot;配置网卡&quot;&gt;&lt;a href=&quot;#配置网卡&quot; class=&quot;headerlink&quot; title=&quot;配置网卡&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="Linux" scheme="https://jueee.github.io/categories/Linux/"/>
    
    
    <category term="Linux" scheme="https://jueee.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis 分页插件 PageHelper</title>
    <link href="https://jueee.github.io/2020/11/2020-11-18-MyBatis%E5%88%86%E9%A1%B5%E6%8F%92%E4%BB%B6PageHelper/"/>
    <id>https://jueee.github.io/2020/11/2020-11-18-MyBatis%E5%88%86%E9%A1%B5%E6%8F%92%E4%BB%B6PageHelper/</id>
    <published>2020-11-18T00:00:00.000Z</published>
    <updated>2020-11-18T09:29:12.854Z</updated>
    
    <content type="html"><![CDATA[<h3 id="PageHelper-介绍"><a href="#PageHelper-介绍" class="headerlink" title="PageHelper 介绍"></a>PageHelper 介绍</h3><p>PageHelper 是 Github 上开源的 MyBatis 分页插件，使用起来非常的简单，方便，并且支持任何复杂的单表、多表分页。</p><ul><li>官网：<span class="exturl" data-url="aHR0cHM6Ly9wYWdlaGVscGVyLmdpdGh1Yi5pby8=">https://pagehelper.github.io/<i class="fa fa-external-link-alt"></i></span></li><li> 文档：<span class="exturl" data-url="aHR0cHM6Ly9wYWdlaGVscGVyLmdpdGh1Yi5pby9kb2NzL2hvd3RvdXNlLw==">https://pagehelper.github.io/docs/howtouse/<i class="fa fa-external-link-alt"></i></span></li></ul><a id="more"></a><h4 id="普通-maven"><a href="#普通-maven" class="headerlink" title="普通 maven"></a>普通 maven</h4><ul><li>GitHub：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BhZ2VoZWxwZXIvTXliYXRpcy1QYWdlSGVscGVy">https://github.com/pagehelper/Mybatis-PageHelper<i class="fa fa-external-link-alt"></i></span></li><li>Gitee：<span class="exturl" data-url="aHR0cHM6Ly9naXRlZS5jb20vZnJlZS9NeWJhdGlzX1BhZ2VIZWxwZXI=">https://gitee.com/free/Mybatis_PageHelper<i class="fa fa-external-link-alt"></i></span></li></ul><p>引入 PageHelper </p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/com.github.pagehelper/pagehelper --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.github.pagehelper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>pagehelper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></code></pre><h4 id="Springboot"><a href="#Springboot" class="headerlink" title="Springboot"></a>Springboot</h4><ul><li>GitHub：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BhZ2VoZWxwZXIvcGFnZWhlbHBlci1zcHJpbmctYm9vdA==">https://github.com/pagehelper/pagehelper-spring-boot<i class="fa fa-external-link-alt"></i></span></li></ul><p>引入 PageHelper </p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.github.pagehelper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>pagehelper-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.3.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></code></pre><h3 id="类说明"><a href="#类说明" class="headerlink" title="类说明"></a>类说明</h3><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BhZ2VoZWxwZXIvTXliYXRpcy1QYWdlSGVscGVyL2Jsb2IvbWFzdGVyL3NyYy9tYWluL2phdmEvY29tL2dpdGh1Yi9wYWdlaGVscGVyL1BhZ2VJbmZvLmphdmE=">com.github.pagehelper.PageInfo<i class="fa fa-external-link-alt"></i></span> 类的常用属性：</p><ul><li>pageNum：当前为第几页</li><li> pageSize：每页的数据行数</li><li> startRow：当前页数据从第几条开始</li><li> endRow：当前页数据从第几条结束</li><li> pages：总页数</li><li> prePage：上一页页数</li><li> nextPage：下一页页数</li><li> isFirstPage：是否第一页</li><li> isLastPage：是否最后一页</li><li> hasPreviousPage：是否有上一页</li><li> hasNextPage：是否有下一页</li><li> navigatePages：导航页码数</li><li> navigatepageNums：所有页码的数组</li><li> navigateFirstPage：导航条上的第一页</li><li> navigateLastPage：导航条上的最后一页</li></ul><p>示例如下：</p><p><img src="/images/2020/11/image-20201118172445823.png" alt="image-20201118172445823" loading="lazy"></p><h3 id="调用方式"><a href="#调用方式" class="headerlink" title="调用方式"></a>调用方式</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//第一种，RowBounds方式的调用</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Country</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span><span class="token string">"x.y.selectIf"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">RowBounds</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//第二种，Mapper接口方式的调用，推荐这种使用方式。</span><span class="token class-name">PageHelper</span><span class="token punctuation">.</span><span class="token function">startPage</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Country</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> countryMapper<span class="token punctuation">.</span><span class="token function">selectIf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//第三种，Mapper接口方式的调用，推荐这种使用方式。</span><span class="token class-name">PageHelper</span><span class="token punctuation">.</span><span class="token function">offsetPage</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Country</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> countryMapper<span class="token punctuation">.</span><span class="token function">selectIf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//第四种，参数方法调用</span><span class="token comment">//存在以下 Mapper 接口方法，你不需要在 xml 处理后两个参数</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CountryMapper</span> <span class="token punctuation">{</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Country</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectByPageNumSize</span><span class="token punctuation">(</span>            <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span> <span class="token class-name">User</span> user<span class="token punctuation">,</span>            <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"pageNum"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> pageNum<span class="token punctuation">,</span>            <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"pageSize"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> pageSize<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//配置supportMethodsArguments=true</span><span class="token comment">//在代码中直接调用：</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Country</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> countryMapper<span class="token punctuation">.</span><span class="token function">selectByPageNumSize</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//第五种，参数对象</span><span class="token comment">//如果 pageNum 和 pageSize 存在于 User 对象中，只要参数有值，也会被分页</span><span class="token comment">//有如下 User 对象</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token comment">//其他fields</span>    <span class="token comment">//下面两个参数名和 params 配置的名字一致</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> pageNum<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> pageSize<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//存在以下 Mapper 接口方法，你不需要在 xml 处理后两个参数</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CountryMapper</span> <span class="token punctuation">{</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Country</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectByPageNumSize</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//当 user 中的 pageNum!= null &amp;&amp; pageSize!= null 时，会自动分页</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Country</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> countryMapper<span class="token punctuation">.</span><span class="token function">selectByPageNumSize</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//第六种，ISelect 接口方式</span><span class="token comment">//jdk6,7用法，创建接口</span><span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Country</span><span class="token punctuation">&gt;</span></span> page <span class="token operator">=</span> <span class="token class-name">PageHelper</span><span class="token punctuation">.</span><span class="token function">startPage</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doSelectPage</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ISelect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSelect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        countryMapper<span class="token punctuation">.</span><span class="token function">selectGroupBy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//jdk8 lambda用法</span><span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Country</span><span class="token punctuation">&gt;</span></span> page <span class="token operator">=</span> <span class="token class-name">PageHelper</span><span class="token punctuation">.</span><span class="token function">startPage</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doSelectPage</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span> countryMapper<span class="token punctuation">.</span><span class="token function">selectGroupBy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//也可以直接返回PageInfo，注意doSelectPageInfo方法和doSelectPage</span>pageInfo <span class="token operator">=</span> <span class="token class-name">PageHelper</span><span class="token punctuation">.</span><span class="token function">startPage</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doSelectPageInfo</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ISelect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSelect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        countryMapper<span class="token punctuation">.</span><span class="token function">selectGroupBy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//对应的lambda用法</span>pageInfo <span class="token operator">=</span> <span class="token class-name">PageHelper</span><span class="token punctuation">.</span><span class="token function">startPage</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doSelectPageInfo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> countryMapper<span class="token punctuation">.</span><span class="token function">selectGroupBy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//count查询，返回一个查询语句的count数</span><span class="token keyword">long</span> total <span class="token operator">=</span> <span class="token class-name">PageHelper</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ISelect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSelect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        countryMapper<span class="token punctuation">.</span><span class="token function">selectLike</span><span class="token punctuation">(</span>country<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//lambda</span>total <span class="token operator">=</span> <span class="token class-name">PageHelper</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span>countryMapper<span class="token punctuation">.</span><span class="token function">selectLike</span><span class="token punctuation">(</span>country<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><p>简单分页</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 获取第pageNum页，pageSize条内容</span><span class="token class-name">PageHelper</span><span class="token punctuation">.</span><span class="token function">startPage</span><span class="token punctuation">(</span>pageNum<span class="token punctuation">,</span>pageSize<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 条件查询相关</span><span class="token class-name">Example</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Example</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Example</span><span class="token punctuation">.</span><span class="token class-name">Criteria</span> criteria <span class="token operator">=</span> o<span class="token punctuation">.</span><span class="token function">createCriteria</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>o<span class="token punctuation">.</span><span class="token function">setOrderByClause</span><span class="token punctuation">(</span><span class="token string">"id desc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNoneBlank</span><span class="token punctuation">(</span>userVO<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    criteria<span class="token punctuation">.</span><span class="token function">andLike</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span><span class="token string">"%"</span><span class="token operator">+</span>userVO<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"%"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 紧跟着的第一个select方法会被分页</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> userList <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectAll</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//分页时，实际返回的结果list类型是Page&lt;E&gt;</span><span class="token class-name">PageInfo</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> info<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">PageInfo</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>userList<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><div class="note info"><p> <strong>重要提示</strong></p><p>只有紧跟在 <code>PageHelper.startPage</code> 方法后的 <strong>第一个</strong> Mybatis 的 <strong>查询（Select）</strong>方法会被分页。</p></div>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;PageHelper-介绍&quot;&gt;&lt;a href=&quot;#PageHelper-介绍&quot; class=&quot;headerlink&quot; title=&quot;PageHelper 介绍&quot;&gt;&lt;/a&gt;PageHelper 介绍&lt;/h3&gt;&lt;p&gt;PageHelper 是 Github 上开源的 MyBatis 分页插件，使用起来非常的简单，方便，并且支持任何复杂的单表、多表分页。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;官网：&lt;a href=&quot;https://pagehelper.github.io/&quot;&gt;https://pagehelper.github.io/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; 文档：&lt;a href=&quot;https://pagehelper.github.io/docs/howtouse/&quot;&gt;https://pagehelper.github.io/docs/howtouse/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Java" scheme="https://jueee.github.io/categories/Java/"/>
    
    <category term="JavaJar" scheme="https://jueee.github.io/categories/Java/JavaJar/"/>
    
    
    <category term="Java" scheme="https://jueee.github.io/tags/Java/"/>
    
    <category term="JavaJar" scheme="https://jueee.github.io/tags/JavaJar/"/>
    
    <category term="MyBatis" scheme="https://jueee.github.io/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>在 Vue 中格式化表格中的时间</title>
    <link href="https://jueee.github.io/2020/11/2020-11-13-%E5%9C%A8Vue%E4%B8%AD%E6%A0%BC%E5%BC%8F%E5%8C%96%E8%A1%A8%E6%A0%BC%E4%B8%AD%E7%9A%84%E6%97%B6%E9%97%B4/"/>
    <id>https://jueee.github.io/2020/11/2020-11-13-%E5%9C%A8Vue%E4%B8%AD%E6%A0%BC%E5%BC%8F%E5%8C%96%E8%A1%A8%E6%A0%BC%E4%B8%AD%E7%9A%84%E6%97%B6%E9%97%B4/</id>
    <published>2020-11-13T00:00:00.000Z</published>
    <updated>2020-11-12T11:26:46.514Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Vue-基础表格"><a href="#Vue-基础表格" class="headerlink" title="Vue 基础表格"></a>Vue 基础表格</h3><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table</span> <span class="token attr-name">:data</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tableData<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span> 100%</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>date<span class="token punctuation">"</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>日期<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>180<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>姓名<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>180<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table</span><span class="token punctuation">&gt;</span></span></code></pre><a id="more"></a><h3 id="定义过滤器"><a href="#定义过滤器" class="headerlink" title="定义过滤器"></a>定义过滤器</h3><h4 id="过滤器文件"><a href="#过滤器文件" class="headerlink" title="过滤器文件"></a>过滤器文件</h4><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// filters/index.js</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">formatDate</span><span class="token punctuation">(</span><span class="token parameter">date<span class="token punctuation">,</span> fmt</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>fmt<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">"undefined"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        fmt <span class="token operator">=</span> <span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex">/(y+)/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>fmt<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        fmt <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>RegExp<span class="token punctuation">.</span>$<span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">-</span> RegExp<span class="token punctuation">.</span>$<span class="token number">1.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> o <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'M+'</span><span class="token operator">:</span> date<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token string">'d+'</span><span class="token operator">:</span> date<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string">'H+'</span><span class="token operator">:</span> date<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string">'m+'</span><span class="token operator">:</span> date<span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string">'s+'</span><span class="token operator">:</span> date<span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> k <span class="token keyword">in</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>k<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>fmt<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">let</span> str <span class="token operator">=</span> o<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">''</span>            fmt <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>RegExp<span class="token punctuation">.</span>$<span class="token number">1</span><span class="token punctuation">,</span> RegExp<span class="token punctuation">.</span>$<span class="token number">1.</span>length <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">?</span> str <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token string">'00'</span> <span class="token operator">+</span> str<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> fmt<span class="token punctuation">}</span></code></pre><h4 id="全局注册"><a href="#全局注册" class="headerlink" title="全局注册"></a>全局注册</h4><p>在 main.js 中全局注册所有自定义的过滤器</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> filters <span class="token keyword">from</span> <span class="token string">'./filters'</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>filters<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">key</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  Vue<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> filters<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="使用过滤器的写法"><a href="#使用过滤器的写法" class="headerlink" title="使用过滤器的写法"></a>使用过滤器的写法</h3><p>默认格式</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table</span> <span class="token attr-name">:data</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tableData<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span> 100%</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>日期<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>180<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot-scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>scope<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>{{ scope.row.date | formatDate() }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>姓名<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>180<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table</span><span class="token punctuation">&gt;</span></span></code></pre><p>把时间转换成 时：分: 秒 格式</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table</span> <span class="token attr-name">:data</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tableData<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span> 100%</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>日期<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>180<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot-scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>scope<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>{{ scope.row.date | formatDate('HH:mm:ss') }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>姓名<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>180<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table</span><span class="token punctuation">&gt;</span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;Vue-基础表格&quot;&gt;&lt;a href=&quot;#Vue-基础表格&quot; class=&quot;headerlink&quot; title=&quot;Vue 基础表格&quot;&gt;&lt;/a&gt;Vue 基础表格&lt;/h3&gt;&lt;pre class=&quot;language-html&quot; data-language=&quot;html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;el-table&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;:data&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;tableData&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token style-attr language-css&quot;&gt;&lt;span class=&quot;token attr-name&quot;&gt; &lt;span class=&quot;token attr-name&quot;&gt;style&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&quot;&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 100%&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
   &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;el-table-column&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;prop&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;date&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;日期&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;180&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;el-table-column&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
   &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;el-table-column&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;prop&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;姓名&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;180&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;el-table-column&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;  
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;el-table&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="Vue" scheme="https://jueee.github.io/categories/Vue/"/>
    
    
    <category term="Vue" scheme="https://jueee.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>vue-admin-template 开启顶部导航</title>
    <link href="https://jueee.github.io/2020/11/2020-11-12-vue-admin-template%E5%BC%80%E5%90%AF%E9%A1%B6%E9%83%A8%E5%AF%BC%E8%88%AA/"/>
    <id>https://jueee.github.io/2020/11/2020-11-12-vue-admin-template%E5%BC%80%E5%90%AF%E9%A1%B6%E9%83%A8%E5%AF%BC%E8%88%AA/</id>
    <published>2020-11-12T00:00:00.000Z</published>
    <updated>2020-11-12T06:39:51.917Z</updated>
    
    <content type="html"><![CDATA[<p>vue-admin-template 默认没有开启 <span class="exturl" data-url="aHR0cHM6Ly9wYW5qaWFjaGVuLmdpdGVlLmlvL3Z1ZS1lbGVtZW50LWFkbWluLXNpdGUvemgvZ3VpZGUvZXNzZW50aWFscy90YWdzLXZpZXcuaHRtbA==">顶部导航<i class="fa fa-external-link-alt"></i></span>，可通过如下步骤进行开启。</p><a id="more"></a><h3 id="开启步骤"><a href="#开启步骤" class="headerlink" title="开启步骤"></a>开启步骤</h3><ol><li><p>复制 vue-element-admin 必要组件，到 template 对应的目录下。</p><p><code>@/layout/components/TagsView</code> 文件夹</p><p><code>@/store/modules/tagsView.js</code> 文件</p></li><li><p>添加标签<br>@/layout/components/AppMain.vue 添加：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app-main<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fade-transform<span class="token punctuation">"</span></span> <span class="token attr-name">mode</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>out-in<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>keep-alive</span> <span class="token attr-name">:include</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cachedViews<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>   <span class="token comment">&lt;!-- 新增  --&gt;</span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>key<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>keep-alive</span><span class="token punctuation">&gt;</span></span>           <span class="token comment">&lt;!-- 新增 --&gt;</span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span></code></pre></li><li><p>修改 @store/index.js</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token keyword">import</span> getters <span class="token keyword">from</span> <span class="token string">'./getters'</span><span class="token keyword">import</span> app <span class="token keyword">from</span> <span class="token string">'./modules/app'</span><span class="token keyword">import</span> settings <span class="token keyword">from</span> <span class="token string">'./modules/settings'</span><span class="token keyword">import</span> user <span class="token keyword">from</span> <span class="token string">'./modules/user'</span><span class="token keyword">import</span> tagsView <span class="token keyword">from</span> <span class="token string">'./modules/tagsView'</span>  <span class="token comment">//新增</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  modules<span class="token operator">:</span> <span class="token punctuation">{</span>    app<span class="token punctuation">,</span>    settings<span class="token punctuation">,</span>    user<span class="token punctuation">,</span>    tagsView  <span class="token comment">//新增</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  getters<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> store</code></pre></li><li><p>修改 /src/store/getters.js</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> getters <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token function-variable function">sidebar</span><span class="token operator">:</span> <span class="token parameter">state</span> <span class="token operator">=&gt;</span> state<span class="token punctuation">.</span>app<span class="token punctuation">.</span>sidebar<span class="token punctuation">,</span>  <span class="token function-variable function">device</span><span class="token operator">:</span> <span class="token parameter">state</span> <span class="token operator">=&gt;</span> state<span class="token punctuation">.</span>app<span class="token punctuation">.</span>device<span class="token punctuation">,</span>  <span class="token function-variable function">token</span><span class="token operator">:</span> <span class="token parameter">state</span> <span class="token operator">=&gt;</span> state<span class="token punctuation">.</span>user<span class="token punctuation">.</span>token<span class="token punctuation">,</span>  <span class="token function-variable function">avatar</span><span class="token operator">:</span> <span class="token parameter">state</span> <span class="token operator">=&gt;</span> state<span class="token punctuation">.</span>user<span class="token punctuation">.</span>avatar<span class="token punctuation">,</span>  <span class="token function-variable function">name</span><span class="token operator">:</span> <span class="token parameter">state</span> <span class="token operator">=&gt;</span> state<span class="token punctuation">.</span>user<span class="token punctuation">.</span>name<span class="token punctuation">,</span>  <span class="token function-variable function">visitedViews</span><span class="token operator">:</span> <span class="token parameter">state</span> <span class="token operator">=&gt;</span> state<span class="token punctuation">.</span>tagsView<span class="token punctuation">.</span>visitedViews<span class="token punctuation">,</span>  <span class="token comment">//新增</span>  <span class="token function-variable function">cachedViews</span><span class="token operator">:</span> <span class="token parameter">state</span> <span class="token operator">=&gt;</span> state<span class="token punctuation">.</span>tagsView<span class="token punctuation">.</span>cachedViews  <span class="token comment">//新增</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> getters</code></pre></li><li><p>修改 /src/layout/components/index.js</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">export</span> <span class="token punctuation">{</span> <span class="token keyword">default</span> <span class="token keyword">as</span> Navbar <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./Navbar'</span><span class="token keyword">export</span> <span class="token punctuation">{</span> <span class="token keyword">default</span> <span class="token keyword">as</span> Sidebar <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./Sidebar'</span><span class="token keyword">export</span> <span class="token punctuation">{</span> <span class="token keyword">default</span> <span class="token keyword">as</span> AppMain <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./AppMain'</span><span class="token keyword">export</span> <span class="token punctuation">{</span> <span class="token keyword">default</span> <span class="token keyword">as</span> TagsView <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./TagsView/index.vue'</span>   <span class="token comment">//新增</span></code></pre></li><li><p>修改 /src/store/modules/setting.js</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token punctuation">{</span> showSettings<span class="token punctuation">,</span> tagsView<span class="token punctuation">,</span> fixedHeader<span class="token punctuation">,</span> sidebarLogo <span class="token punctuation">}</span> <span class="token operator">=</span> defaultSettings   <span class="token comment">//新增tagsView</span><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token punctuation">{</span>  tagsView<span class="token operator">:</span> tagsView<span class="token punctuation">,</span>   <span class="token comment">//新增</span>  showSettings<span class="token operator">:</span> showSettings<span class="token punctuation">,</span>  fixedHeader<span class="token operator">:</span> fixedHeader<span class="token punctuation">,</span>  sidebarLogo<span class="token operator">:</span> sidebarLogo<span class="token punctuation">}</span></code></pre></li><li><p>修改 /src/layout/index.vue</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>classObj<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app-wrapper<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>device===<span class="token punctuation">'</span>mobile<span class="token punctuation">'</span>&amp;&amp;sidebar.opened<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>drawer-bg<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>handleClickOutside<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sidebar</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sidebar-container<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>main-container<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{<span class="token punctuation">'</span>fixed-header<span class="token punctuation">'</span>:fixedHeader}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>navbar</span> <span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tags-view</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>needTagsView<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>   <span class="token comment">&lt;!-- 新增 --&gt;</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>app-main</span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> Navbar<span class="token punctuation">,</span> Sidebar<span class="token punctuation">,</span> AppMain <span class="token punctuation">,</span> TagsView<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./components'</span>   <span class="token comment">//新增 TagsView</span><span class="token keyword">import</span> ResizeMixin <span class="token keyword">from</span> <span class="token string">'./mixin/ResizeHandler'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token operator">:</span> <span class="token string">'Layout'</span><span class="token punctuation">,</span>  components<span class="token operator">:</span> <span class="token punctuation">{</span>    Navbar<span class="token punctuation">,</span>    Sidebar<span class="token punctuation">,</span>    AppMain<span class="token punctuation">,</span>    TagsView   <span class="token comment">//新增</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  mixins<span class="token operator">:</span> <span class="token punctuation">[</span>ResizeMixin<span class="token punctuation">]</span><span class="token punctuation">,</span>  computed<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token function">sidebar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>app<span class="token punctuation">.</span>sidebar    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">device</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>app<span class="token punctuation">.</span>device    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">fixedHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>settings<span class="token punctuation">.</span>fixedHeader    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">needTagsView</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment">//新增</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>settings<span class="token punctuation">.</span>tagsView   <span class="token comment">//新增</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">classObj</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        hideSidebar<span class="token operator">:</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>sidebar<span class="token punctuation">.</span>opened<span class="token punctuation">,</span>        openSidebar<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sidebar<span class="token punctuation">.</span>opened<span class="token punctuation">,</span>        withoutAnimation<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sidebar<span class="token punctuation">.</span>withoutAnimation<span class="token punctuation">,</span>        mobile<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>device <span class="token operator">===</span> <span class="token string">'mobile'</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token function">handleClickOutside</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'app/closeSideBar'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> withoutAnimation<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></code></pre></li><li><p>修改 /src/setting.js</p><pre class="language-js" data-language="js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  title<span class="token operator">:</span> <span class="token string">'Vue Admin Template'</span><span class="token punctuation">,</span>  <span class="token comment">/**   * @type {boolean} true | false   * @description Whether fix the header   */</span>  fixedHeader<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token comment">/**   * @type {boolean} true | false   * @description Whether show the logo in sidebar   */</span>  sidebarLogo<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token comment">/**   * @type {boolean} true | false   * @description Whether need tagsView   */</span>  tagsView<span class="token operator">:</span> <span class="token boolean">true</span>   <span class="token comment">//新增</span><span class="token punctuation">}</span></code></pre></li></ol><p>此时，配置完成。效果如下：</p><p><img src="/images/2020/11/image-20201111152609312.png" alt="image-20201111152609312" loading="lazy">   </p><h3 id="控制台报错"><a href="#控制台报错" class="headerlink" title="控制台报错"></a>控制台报错</h3><p>按照如下操作后，控制台报错如下：</p><p><img src="/images/2020/11/image-20201111152702537.png" alt="image-20201111152702537" loading="lazy"></p><p>这是因为拷贝的 TagsView 组件默认开启了权限<br>/src/layout/components/TagsView/index.js</p><p>修改如下，即可解决报错。</p><p>   <img src="/images/2020/11/image-20201111152858682.png" alt="image-20201111152858682" loading="lazy"></p><h3 id="Affix-固钉"><a href="#Affix-固钉" class="headerlink" title="Affix 固钉"></a>Affix 固钉</h3><p>当在声明路由上 添加了 Affix 属性，则当前 <code>tag</code> 会被固定在 <code>tags-view</code> 中（不可被删除）。</p><p>修改文件：@src\router\index.js</p><p><img src="/images/2020/11/image-20201111153454783.png" alt="image-20201111153454783" loading="lazy"></p><p>效果如下：</p><p><img src="/images/2020/11/image-20201111153535548.png" alt="image-20201111153535548" loading="lazy">   </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;vue-admin-template 默认没有开启 &lt;a href=&quot;https://panjiachen.gitee.io/vue-element-admin-site/zh/guide/essentials/tags-view.html&quot;&gt;顶部导航&lt;/a&gt;，可通过如下步骤进行开启。&lt;/p&gt;</summary>
    
    
    
    <category term="Vue" scheme="https://jueee.github.io/categories/Vue/"/>
    
    
    <category term="Vue" scheme="https://jueee.github.io/tags/Vue/"/>
    
    <category term="Element" scheme="https://jueee.github.io/tags/Element/"/>
    
  </entry>
  
  <entry>
    <title>RESTful 风格的 Web 服务框架 Swagger</title>
    <link href="https://jueee.github.io/2020/11/2020-11-11-RESTful%E9%A3%8E%E6%A0%BC%E7%9A%84Web%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6Swagger/"/>
    <id>https://jueee.github.io/2020/11/2020-11-11-RESTful%E9%A3%8E%E6%A0%BC%E7%9A%84Web%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6Swagger/</id>
    <published>2020-11-11T00:00:00.000Z</published>
    <updated>2020-11-11T07:40:06.623Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Swagger-介绍"><a href="#Swagger-介绍" class="headerlink" title="Swagger 介绍"></a>Swagger 介绍</h3><p>Swagger 是一个规范和完整的框架，用于生成、描述、调用和可视化 RESTful 风格的 Web 服务。</p><p>总体目标是使客户端和文件系统作为服务器以同样的速度来更新。文件的方法、参数和模型紧密集成到服务器端的代码，允许 API 来始终保持同步。</p><ul><li>官网：<span class="exturl" data-url="aHR0cHM6Ly9zd2FnZ2VyLmlvLw==">https://swagger.io/<i class="fa fa-external-link-alt"></i></span></li><li>GitHub：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3N3YWdnZXItYXBp">https://github.com/swagger-api<i class="fa fa-external-link-alt"></i></span></li></ul><a id="more"></a><h4 id="Swagger-依赖"><a href="#Swagger-依赖" class="headerlink" title="Swagger 依赖"></a>Swagger 依赖</h4><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>springfox-swagger2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.6.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>springfox-swagger-ui<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.6.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></code></pre><h3 id="Swagger-UI"><a href="#Swagger-UI" class="headerlink" title="Swagger UI"></a>Swagger UI</h3><p>添加依赖 <code>springfox-swagger-ui</code> 之后，该文档将在此处自动提供：</p><blockquote><p><span class="exturl" data-url="aHR0cDovL2xvY2FsaG9zdDo4MDgwL3N3YWdnZXItdWkuaHRtbA==">http://localhost:8080/swagger-ui.html<i class="fa fa-external-link-alt"></i></span></p></blockquote><p>Swagger 布局分为四部分：</p><ol><li><strong>API 分组</strong>：如果没有配置分组默认是 default。通过 Swagger 实例 Docket 的 <code>groupName()</code> 方法即可配置分组。</li><li><strong>基本描述</strong>：可以通过 Swagger 实例 Docket 的 <code>apiInfo()</code> 方法中的 ApiInfo 实例参数配置文档信息。</li><li><strong>请求接口列表</strong>：在组范围内，只要被 Swagger2 扫描匹配到的请求都会在这里出现。</li><li><strong>实体列表</strong>：只要实体在请求接口的返回值上（即使是泛型），都能映射到实体项中！</li></ol><blockquote><p>实体列表部分注意：并不是因为 @ApiModel 注解让实体显示在 Models 列表里，而是只要出现在接口方法的返回值上的实体都会显示在这里，而 @ApiModel 和 @ApiModelProperty 这两个注解只是为实体添加注释的。前者为类添加注释，后者为类属性添加注释。</p></blockquote><h3 id="swagger2-注解"><a href="#swagger2-注解" class="headerlink" title="swagger2 注解"></a>swagger2 注解</h3><h4 id="注解整体说明"><a href="#注解整体说明" class="headerlink" title="注解整体说明"></a>注解整体说明</h4><p><strong>用于 controller 类上：</strong></p><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td> @Api</td><td> 对请求类的说明</td></tr></tbody></table><p><strong>用于方法上面（说明参数的含义）：</strong></p><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td> @ApiOperation</td><td> 方法的说明</td></tr><tr><td> @ApiImplicitParams、@ApiImplicitParam</td><td> 方法的参数的说明；@ApiImplicitParams 用于指定单个参数的说明</td></tr></tbody></table><p><strong>用于方法上面（返回参数或对象的说明）：</strong></p><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td> @ApiResponses、@ApiResponse</td><td> 方法返回值的说明 ；@ApiResponses 用于指定单个参数的说明</td></tr></tbody></table><p><strong>对象类：</strong></p><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td> @ApiModel</td><td> 用在 JavaBean 类上，说明 JavaBean 的 用途</td></tr><tr><td> @ApiModelProperty</td><td> 用在 JavaBean 类的属性上面，说明此属性的的含议</td></tr></tbody></table><h4 id="Api"><a href="#Api" class="headerlink" title="@Api"></a>@Api</h4><p>@Api：请求类的说明</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Api</span>：放在 请求的类上，与 <span class="token annotation punctuation">@Controller</span> 并列，说明类的作用，如用户模块，订单类等。tags<span class="token operator">=</span><span class="token string">"说明该类的作用"</span>value<span class="token operator">=</span><span class="token string">"该参数没什么意义，所以不需要配置"</span></code></pre><p><code>@Api</code> 其它属性配置：</p><table><thead><tr><th>属性名称</th><th>备注</th></tr></thead><tbody><tr><td> value</td><td>url 的路径值</td></tr><tr><td> tags</td><td> 如果设置这个值、value 的值会被覆盖</td></tr><tr><td> description</td><td> 对 api 资源的描述</td></tr><tr><td> basePath</td><td> 基本路径</td></tr><tr><td> position</td><td> 如果配置多个 Api 想改变显示的顺序位置</td></tr><tr><td> produces</td><td> 如，“application/json, application/xml”</td></tr><tr><td>consumes</td><td> 如，“application/json, application/xml”</td></tr><tr><td>protocols</td><td> 协议类型，如: http, https, ws, wss.</td></tr><tr><td>authorizations</td><td> 高级特性认证时配置</td></tr><tr><td> hidden</td><td> 配置为 true ，将在文档中隐藏</td></tr></tbody></table><h4 id="ApiOperation"><a href="#ApiOperation" class="headerlink" title="@ApiOperation"></a>@ApiOperation</h4><p>@ApiOperation：方法的说明</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ApiOperation</span>：<span class="token string">"用在请求的方法上，说明方法的作用"</span>value<span class="token operator">=</span><span class="token string">"说明方法的作用"</span>notes<span class="token operator">=</span><span class="token string">"方法的备注说明"</span></code></pre><p>@ApiImplicitParams、@ApiImplicitParam：方法参数的说明</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ApiImplicitParams</span>：用在请求的方法上，包含一组参数说明<span class="token annotation punctuation">@ApiImplicitParam</span>：对单个参数的说明        name：参数名    value：参数的说明、描述    required：参数是否必须必填    paramType：参数放在哪个地方        · query <span class="token operator">--</span><span class="token operator">&gt;</span> 请求参数的获取：<span class="token annotation punctuation">@RequestParam</span>        · header <span class="token operator">--</span><span class="token operator">&gt;</span> 请求参数的获取：<span class="token annotation punctuation">@RequestHeader</span>              · path（用于restful接口）<span class="token operator">--</span><span class="token operator">&gt;</span> 请求参数的获取：<span class="token annotation punctuation">@PathVariable</span>        · body（请求体）<span class="token operator">--</span><span class="token operator">&gt;</span>  <span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">User</span> user        · form（普通表单提交）       dataType：参数类型，默认<span class="token class-name">String</span>，其它值dataType<span class="token operator">=</span><span class="token string">"Integer"</span>       defaultValue：参数的默认值</code></pre><h4 id="ApiResponses"><a href="#ApiResponses" class="headerlink" title="@ApiResponses"></a>@ApiResponses</h4><p>@ApiResponses、@ApiResponse：方法返回值的状态码说明</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ApiResponses</span>：方法返回对象的说明<span class="token annotation punctuation">@ApiResponse</span>：每个参数的说明    code：数字，例如<span class="token number">400</span>    message：信息，例如<span class="token string">"请求参数没填好"</span>    response：抛出异常的类</code></pre><h4 id="ApiModel"><a href="#ApiModel" class="headerlink" title="@ApiModel"></a>@ApiModel</h4><p>@ApiModel：用于 JavaBean 上面，表示对 JavaBean 的功能描述</p><p><code>@ApiModel</code> 的用途有 2 个：</p><ol><li>当请求数据描述，即 <code>@RequestBody</code> 时， 用于封装请求（包括数据的各种校验）数据；</li><li>当响应值是对象时，即 <code>@ResponseBody</code> 时，用于返回值对象的描述。</li></ol><h4 id="ApiModelProperty"><a href="#ApiModelProperty" class="headerlink" title="@ApiModelProperty"></a>@ApiModelProperty</h4><p>@ApiModelProperty：用在 JavaBean 类的属性上面，说明属性的含义</p><h3 id="Swagger-示例"><a href="#Swagger-示例" class="headerlink" title="Swagger 示例"></a>Swagger 示例</h3><h4 id="API基本信息配置类"><a href="#API基本信息配置类" class="headerlink" title="API基本信息配置类"></a>API 基本信息配置类</h4><p>要想使用 Swagger，必须编写一个配置类来配置 Swagger，这里的配置类如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableSwagger2</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SwaggerConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">Docket</span> <span class="token function">docket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">// 构造函数传入初始化规范，这是swagger2规范</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span><span class="token class-name">DocumentationType</span><span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//apiInfo： 添加api详情信息，参数为ApiInfo类型的参数</span>                <span class="token punctuation">.</span><span class="token function">groupName</span><span class="token punctuation">(</span><span class="token string">"System"</span><span class="token punctuation">)</span> <span class="token comment">// 配置分组</span>                <span class="token punctuation">.</span><span class="token function">enable</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">// 配置是否启用Swagger，如果是false，在浏览器将无法访问，默认是true</span>                <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">apis</span><span class="token punctuation">(</span><span class="token class-name">RequestHandlerSelectors</span><span class="token punctuation">.</span><span class="token function">basePackage</span><span class="token punctuation">(</span><span class="token string">"com.system.controller"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//apis： 添加过滤条件,</span>                <span class="token punctuation">.</span><span class="token function">paths</span><span class="token punctuation">(</span><span class="token class-name">PathSelectors</span><span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//paths： 这里是控制哪些路径的api会被显示出来</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pathMapping</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">ApiInfo</span> <span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">Contact</span> contact<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Contact</span><span class="token punctuation">(</span><span class="token string">"xiaojue"</span><span class="token punctuation">,</span><span class="token string">"http://localhost:8181"</span><span class="token punctuation">,</span><span class="token string">"hellojue@foxmail.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ApiInfoBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">contact</span><span class="token punctuation">(</span>contact<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">"API文档"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">"系统API文档"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">termsOfServiceUrl</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">version</span><span class="token punctuation">(</span><span class="token string">"1.0"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>效果如下：</p><p><img src="/images/2020/11/image-20201111113952683.png" alt="image-20201111113952683" loading="lazy"></p><h5 id="配置API分组"><a href="#配置API分组" class="headerlink" title="配置API分组"></a>配置 API 分组</h5><p>通过 Swagger 实例 Docket 的 <code>groupName()</code> 方法即可配置分组，如果没有配置分组默认是 default，代码如下：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">@Bean<span class="token keyword">public</span> Docket <span class="token function">docket2</span><span class="token punctuation">(</span><span class="token parameter">Environment environment</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span><span class="token constant">SWAGGER_2</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 配置基本API信息</span>      <span class="token punctuation">.</span><span class="token function">groupName</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span> <span class="token comment">// 配置分组</span>       <span class="token comment">// 省略配置....</span><span class="token punctuation">}</span></code></pre><h5 id="配置多个分组"><a href="#配置多个分组" class="headerlink" title="配置多个分组"></a>配置多个分组</h5><p>很简单，配置多个分组只需要配置多个 docket 即可，代码如下：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">@Bean<span class="token keyword">public</span> Docket <span class="token function">docket1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span><span class="token constant">SWAGGER_2</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">groupName</span><span class="token punctuation">(</span><span class="token string">"组一"</span><span class="token punctuation">)</span>      <span class="token comment">// 省略配置....</span><span class="token punctuation">}</span>@Bean<span class="token keyword">public</span> Docket <span class="token function">docket2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span><span class="token constant">SWAGGER_2</span><span class="token punctuation">)</span>     <span class="token punctuation">.</span><span class="token function">groupName</span><span class="token punctuation">(</span><span class="token string">"组二"</span><span class="token punctuation">)</span>     <span class="token comment">// 省略配置....</span><span class="token punctuation">}</span>@Bean<span class="token keyword">public</span> Docket <span class="token function">docket3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span><span class="token constant">SWAGGER_2</span><span class="token punctuation">)</span>     <span class="token punctuation">.</span><span class="token function">groupName</span><span class="token punctuation">(</span><span class="token string">"组三"</span><span class="token punctuation">)</span>     <span class="token comment">// 省略配置....</span><span class="token punctuation">}</span></code></pre><h4 id="接口注解"><a href="#接口注解" class="headerlink" title="接口注解"></a>接口注解</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Api</span><span class="token punctuation">(</span>tags <span class="token operator">=</span> <span class="token string">"菜单权限接口"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/menu"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MenuController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">MenuService</span> menuService<span class="token punctuation">;</span>        <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"新增菜单"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/add"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">ResponseBean</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token annotation punctuation">@Validated</span> <span class="token class-name">MenuVO</span> menuVO<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Menu</span> node <span class="token operator">=</span> menuService<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>menuVO<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> node<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"menuName"</span><span class="token punctuation">,</span> node<span class="token punctuation">.</span><span class="token function">getMenuName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"children"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"icon"</span><span class="token punctuation">,</span> node<span class="token punctuation">.</span><span class="token function">getIcon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">ResponseBean</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>效果如下：</p><p><img src="/images/2020/11/image-20201111141157829.png" alt="image-20201111141157829" loading="lazy"></p><p><img src="/images/2020/11/image-20201111113642972.png" alt="image-20201111113642972" loading="lazy"></p><h4 id="模型类注解"><a href="#模型类注解" class="headerlink" title="模型类注解"></a>模型类注解</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ApiModel</span><span class="token punctuation">(</span><span class="token string">"菜单实体类"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MenuVO</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span><span class="token string">"编号"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span><span class="token string">"父级id"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> parentId<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span><span class="token string">"菜单名称"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> menuName<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>效果如下：</p><p><img src="/images/2020/11/image-20201111140618878.png" alt="image-20201111140618878" loading="lazy"></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;Swagger-介绍&quot;&gt;&lt;a href=&quot;#Swagger-介绍&quot; class=&quot;headerlink&quot; title=&quot;Swagger 介绍&quot;&gt;&lt;/a&gt;Swagger 介绍&lt;/h3&gt;&lt;p&gt;Swagger 是一个规范和完整的框架，用于生成、描述、调用和可视化 RESTful 风格的 Web 服务。&lt;/p&gt;
&lt;p&gt;总体目标是使客户端和文件系统作为服务器以同样的速度来更新。文件的方法、参数和模型紧密集成到服务器端的代码，允许 API 来始终保持同步。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;官网：&lt;a href=&quot;https://swagger.io/&quot;&gt;https://swagger.io/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;GitHub：&lt;a href=&quot;https://github.com/swagger-api&quot;&gt;https://github.com/swagger-api&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Java" scheme="https://jueee.github.io/categories/Java/"/>
    
    <category term="JavaJar" scheme="https://jueee.github.io/categories/Java/JavaJar/"/>
    
    
    <category term="Java" scheme="https://jueee.github.io/tags/Java/"/>
    
    <category term="JavaJar" scheme="https://jueee.github.io/tags/JavaJar/"/>
    
    <category term="RESTful" scheme="https://jueee.github.io/tags/RESTful/"/>
    
  </entry>
  
  <entry>
    <title>RESTful 架构的介绍和使用</title>
    <link href="https://jueee.github.io/2020/11/2020-11-10-RESTful%E6%9E%B6%E6%9E%84%E7%9A%84%E4%BB%8B%E7%BB%8D%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
    <id>https://jueee.github.io/2020/11/2020-11-10-RESTful%E6%9E%B6%E6%9E%84%E7%9A%84%E4%BB%8B%E7%BB%8D%E5%92%8C%E4%BD%BF%E7%94%A8/</id>
    <published>2020-11-10T00:00:00.000Z</published>
    <updated>2020-11-11T07:40:06.620Z</updated>
    
    <content type="html"><![CDATA[<h3 id="REST"><a href="#REST" class="headerlink" title="REST"></a>REST</h3><p>REST（Representational State Transfer）表象化状态转变（表述性状态转变），在 2000 年被提出，基于 HTTP、URI、XML、JSON 等标准和协议，支持轻量级、跨平台、跨语言的架构设计。</p><a id="more"></a><h3 id="RESTful-介绍"><a href="#RESTful-介绍" class="headerlink" title="RESTful 介绍"></a>RESTful 介绍</h3><h4 id="主要特点"><a href="#主要特点" class="headerlink" title="主要特点"></a>主要特点</h4><ul><li>每一个 URI 代表 1 种资源；</li><li>客户端使用 GET、POST、PUT、DELETE 4 个表示操作方式的动词对服务端资源进行操作<ul><li> GET 用来获取资源</li><li> POST 用来新建资源（也可以用于更新资源）</li><li>PUT 用来更新资源</li><li> DELETE 用来删除资源</li></ul></li><li>通过操作资源的表现形式来操作资源</li><li>资源的表现形式是 XML 或者 HTML</li><li> 客户端与服务端之间的交互在请求之间是无状态的，从客户端到服务端的每个请求都必须包含理解请求所必需的信息。</li></ul><p>符合上述 REST 原则的架构方式称为 RESTful。</p><div class="note info"><p> <strong>无状态性</strong></p><p>使得客户端和服务器端不必保存对方的详细信息，服务器只需要处理当前的请求，不需了解请求的历史。可以更容易的释放资源，让服务器利用 Pool（连接池）技术来提高稳定性和性能。</p></div><h4 id="资源操作"><a href="#资源操作" class="headerlink" title="资源操作"></a>资源操作</h4><table><thead><tr><th><strong>http 方法</strong></th><th><strong>资源操作</strong></th><th><strong>幂等</strong></th><th><strong>安全</strong></th></tr></thead><tbody><tr><td> GET</td><td>SELECT</td><td> 是</td><td>是</td></tr><tr><td> POST</td><td>INSERT</td><td> 否</td><td>否</td></tr><tr><td> PUT</td><td>UPDATE</td><td> 是</td><td>否</td></tr><tr><td> DELETE</td><td>DELETE</td><td> 是</td><td>否</td></tr></tbody></table><p><strong>幂等性</strong>：对同一 REST 接口的多次访问，得到的资源状态是相同的。</p><p><strong>安全性</strong>：对该 REST 接口访问，不会使服务器端资源的状态发生改变。</p><h3 id="RESTful-API-设计指南"><a href="#RESTful-API-设计指南" class="headerlink" title="RESTful API 设计指南"></a>RESTful API 设计指南</h3><h4 id="路径（Endpoint）"><a href="#路径（Endpoint）" class="headerlink" title="路径（Endpoint）"></a>路径（Endpoint）</h4><p>路径又称 "终点"（endpoint），表示 API 的具体网址。</p><p>在 RESTful 架构中，每个网址代表一种资源（resource），所以网址中不能有动词，只能有名词，而且所用的名词往往与数据库的表格名对应。</p><p>一般来说，数据库中的表都是同种记录的 "集合"（collection），所以 API 中的名词也应该使用复数。</p><h4 id="HTTP动词"><a href="#HTTP动词" class="headerlink" title="HTTP动词"></a>HTTP 动词</h4><p>对于资源的具体操作类型，由 HTTP 动词表示。</p><p>常用的 HTTP 动词有下面五个（括号里是对应的 SQL 命令）。</p><ul><li>GET（SELECT）：从服务器取出资源（一项或多项）。</li><li>POST（CREATE）：在服务器新建一个资源。</li><li>PUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）。</li><li>PATCH（UPDATE）：在服务器更新资源（客户端提供改变的属性）。</li><li>DELETE（DELETE）：从服务器删除资源。</li></ul><p>还有两个不常用的 HTTP 动词。</p><ul><li>HEAD：获取资源的元数据。</li><li>OPTIONS：获取信息，关于资源的哪些属性是客户端可以改变的。</li></ul><h4 id="过滤信息（Filtering）"><a href="#过滤信息（Filtering）" class="headerlink" title="过滤信息（Filtering）"></a>过滤信息（Filtering）</h4><p>如果记录数量很多，服务器不可能都将它们返回给用户。API 应该提供参数，过滤返回结果。</p><p>下面是一些常见的参数。</p><blockquote><ul><li>?limit=10：指定返回记录的数量</li><li> ?offset=10：指定返回记录的开始位置。</li><li>?page=2&amp;per_page=100：指定第几页，以及每页的记录数。</li><li>?sortby=name&amp;order=asc：指定返回结果按照哪个属性排序，以及排序顺序。</li><li>?animal_type_id=1：指定筛选条件</li></ul></blockquote><h4 id="状态码（Status-Codes）"><a href="#状态码（Status-Codes）" class="headerlink" title="状态码（Status Codes）"></a>状态码（Status Codes）</h4><p>服务器向用户返回的状态码和提示信息，常见的有以下一些（方括号中是该状态码对应的 HTTP 动词）。</p><blockquote><ul><li>200 OK - [GET]：服务器成功返回用户请求的数据，该操作是幂等的（Idempotent）。</li><li>201 CREATED - [POST/PUT/PATCH]：用户新建或修改数据成功。</li><li>202 Accepted - [*]：表示一个请求已经进入后台排队（异步任务）</li><li>204 NO CONTENT - [DELETE]：用户删除数据成功。</li><li>400 INVALID REQUEST - [POST/PUT/PATCH]：用户发出的请求有错误，服务器没有进行新建或修改数据的操作，该操作是幂等的。</li><li>401 Unauthorized - [*]：表示用户没有权限（令牌、用户名、密码错误）。</li><li>403 Forbidden - [*] 表示用户得到授权（与 401 错误相对），但是访问是被禁止的。</li><li>404 NOT FOUND - [*]：用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是幂等的。</li><li>406 Not Acceptable - [GET]：用户请求的格式不可得（比如用户请求 JSON 格式，但是只有 XML 格式）。</li><li>410 Gone -[GET]：用户请求的资源被永久删除，且不会再得到的。</li><li>422 Unprocesable entity - [POST/PUT/PATCH] 当创建一个对象时，发生一个验证错误。</li><li>500 INTERNAL SERVER ERROR - [*]：服务器发生错误，用户将无法判断发出的请求是否成功。</li></ul></blockquote><p>状态码的完全列表参见 <span class="exturl" data-url="aHR0cDovL3d3dy53My5vcmcvUHJvdG9jb2xzL3JmYzI2MTYvcmZjMjYxNi1zZWMxMC5odG1s">这里<i class="fa fa-external-link-alt"></i></span>。</p><h4 id="错误处理（Error-handling）"><a href="#错误处理（Error-handling）" class="headerlink" title="错误处理（Error handling）"></a>错误处理（Error handling）</h4><p>如果状态码是 4xx，就应该向用户返回出错信息。一般来说，返回的信息中将 error 作为键名，出错信息作为键值即可。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">{</span>    error<span class="token operator">:</span> <span class="token string">"Invalid API key"</span><span class="token punctuation">}</span></code></pre><h4 id="返回结果"><a href="#返回结果" class="headerlink" title="返回结果"></a>返回结果</h4><p>针对不同操作，服务器向用户返回的结果应该符合以下规范。</p><ul><li>GET /collection：返回资源对象的列表（数组）</li><li>GET /collection/resource：返回单个资源对象</li><li> POST /collection：返回新生成的资源对象</li><li> PUT /collection/resource：返回完整的资源对象</li><li> PATCH /collection/resource：返回完整的资源对象</li><li> DELETE /collection/resource：返回一个空文档</li></ul><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><span class="exturl" data-url="aHR0cDovL3Jlc3RmdWwucDJocC5jb20v">http://restful.p2hp.com/<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cDovL3d3dy5ydWFueWlmZW5nLmNvbS9ibG9nLzIwMTQvMDUvcmVzdGZ1bF9hcGkuaHRtbA==">http://www.ruanyifeng.com/blog/2014/05/restful_api.html<i class="fa fa-external-link-alt"></i></span></li></ul>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;REST&quot;&gt;&lt;a href=&quot;#REST&quot; class=&quot;headerlink&quot; title=&quot;REST&quot;&gt;&lt;/a&gt;REST&lt;/h3&gt;&lt;p&gt;REST（Representational State Transfer）表象化状态转变（表述性状态转变），在 2000 年被提出，基于 HTTP、URI、XML、JSON 等标准和协议，支持轻量级、跨平台、跨语言的架构设计。&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://jueee.github.io/categories/Java/"/>
    
    
    <category term="RESTful" scheme="https://jueee.github.io/tags/RESTful/"/>
    
  </entry>
  
  <entry>
    <title>基于 Vue+ElementUI 的后台集成方案 vue-element-admin</title>
    <link href="https://jueee.github.io/2020/11/2020-11-09-%E5%9F%BA%E4%BA%8EVue+ElementUI%E7%9A%84%E5%90%8E%E5%8F%B0%E9%9B%86%E6%88%90%E6%96%B9%E6%A1%88vue-element-admin/"/>
    <id>https://jueee.github.io/2020/11/2020-11-09-%E5%9F%BA%E4%BA%8EVue+ElementUI%E7%9A%84%E5%90%8E%E5%8F%B0%E9%9B%86%E6%88%90%E6%96%B9%E6%A1%88vue-element-admin/</id>
    <published>2020-11-09T00:00:00.000Z</published>
    <updated>2020-11-13T11:03:10.430Z</updated>
    
    <content type="html"><![CDATA[<h3 id="vue-element-admin"><a href="#vue-element-admin" class="headerlink" title="vue-element-admin"></a>vue-element-admin</h3><p>vue-element-admin 是一个后台前端解决方案，它基于 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3Z1ZQ==">vue<i class="fa fa-external-link-alt"></i></span> 和 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0VsZW1lRkUvZWxlbWVudA==">element-ui<i class="fa fa-external-link-alt"></i></span> 实现。</p><p>它使用了最新的前端技术栈，内置了 i18n 国际化解决方案，动态路由，权限验证，提炼了典型的业务模型，提供了丰富的功能组件，它可以帮助你快速搭建企业级中后台产品原型。</p><ul><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1BhbkppYUNoZW4vdnVlLWVsZW1lbnQtYWRtaW4=">GitHub<i class="fa fa-external-link-alt"></i></span>，<span class="exturl" data-url="aHR0cHM6Ly9wYW5qaWFjaGVuLmdpdGh1Yi5pby92dWUtZWxlbWVudC1hZG1pbi8=">在线预览<i class="fa fa-external-link-alt"></i></span>，<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1BhbkppYUNoZW4vdnVlLWVsZW1lbnQtYWRtaW4vd2lraQ==">Wiki<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9naXRlZS5jb20vcGFuamlhY2hlbi92dWUtZWxlbWVudC1hZG1pbg==">Gitee<i class="fa fa-external-link-alt"></i></span>，<span class="exturl" data-url="aHR0cHM6Ly9wYW5qaWFjaGVuLmdpdGVlLmlvL3Z1ZS1lbGVtZW50LWFkbWluLw==">在线预览<i class="fa fa-external-link-alt"></i></span>，<span class="exturl" data-url="aHR0cHM6Ly9wYW5qaWFjaGVuLmdpdGVlLmlvL3Z1ZS1lbGVtZW50LWFkbWluLXNpdGUvemgvZ3VpZGUv">使用文档<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cub3NjaGluYS5uZXQvcC92dWUtZWxlbWVudC1hZG1pbg==">OSChina<i class="fa fa-external-link-alt"></i></span></li></ul><a id="more"></a><p>vue-element-admin 的定位是后台集成方案，不适合当基础模板来开发。</p><h4 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h4><pre class="language-bash" data-language="bash"><code class="language-bash">├── build                      // 构建相关  ├── config                     // 配置相关├── src                        // 源代码│   ├── api                    // 所有请求│   ├── assets                 // 主题 字体等静态资源│   ├── components             // 全局公用组件│   ├── directive              // 全局指令│   ├── filtres                // 全局 filter│   ├── icons                  // 项目所有 svg icons│   ├── lang                   // 国际化 language│   ├── mock                   // 项目mock 模拟数据│   ├── router                 // 路由│   ├── store                  // 全局 store管理│   ├── styles                 // 全局样式│   ├── utils                  // 全局公用方法│   ├── vendor                 // 公用vendor│   ├── views                   // view│   ├── App.vue                // 入口页面│   ├── main.js                // 入口 加载组件 初始化等│   └── permission.js          // 权限管理├── static                     // 第三方不打包资源│   └── Tinymce                // 富文本├── .babelrc                   // babel-loader 配置├── eslintrc.js                // eslint 配置项├── .gitignore                 // <span class="token function">git</span> 忽略项├── favicon.ico                // favicon图标├── index.html                 // html模板└── package.json               // package.json</code></pre><h4 id="关联项目"><a href="#关联项目" class="headerlink" title="关联项目"></a>关联项目</h4><ul><li>基础模板： <span class="exturl" data-url="aHR0cHM6Ly9naXRlZS5jb20vcGFuamlhY2hlbi92dWUtYWRtaW4tdGVtcGxhdGU=">vueAdmin-template<i class="fa fa-external-link-alt"></i></span> </li><li> 桌面终端： <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1BhbkppYUNoZW4vZWxlY3Ryb24tdnVlLWFkbWlu">electron-vue-admin<i class="fa fa-external-link-alt"></i></span></li></ul><h3 id="vue-admin-template"><a href="#vue-admin-template" class="headerlink" title="vue-admin-template"></a>vue-admin-template</h3><ul><li>GitHub：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1BhbkppYUNoZW4vdnVlLWFkbWluLXRlbXBsYXRl">https://github.com/PanJiaChen/vue-admin-template<i class="fa fa-external-link-alt"></i></span></li><li> 演示地址：<span class="exturl" data-url="aHR0cHM6Ly9wYW5qaWFjaGVuLmdpdGh1Yi5pby92dWUtYWRtaW4tdGVtcGxhdGU=">https://panjiachen.github.io/vue-admin-template<i class="fa fa-external-link-alt"></i></span></li></ul><p><strong>vueAdmin-template</strong> 主要是基于 vue-cli webpack 模板为基础开发的，引入了如下 dependencies:</p><ul><li>element-ui 饿了么出品的 vue2.0 pc UI 框架</li><li> axios 一个现在主流并且很好用的请求库 支持 Promise</li><li>js-cookie 一个轻量的 JavaScript 库来处理 cookie</li><li>normalize.css 格式化 css</li><li>nprogress 轻量的全局进度条控制</li><li> vuex 官方状态管理</li><li> vue-router 官方路由</li></ul>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;vue-element-admin&quot;&gt;&lt;a href=&quot;#vue-element-admin&quot; class=&quot;headerlink&quot; title=&quot;vue-element-admin&quot;&gt;&lt;/a&gt;vue-element-admin&lt;/h3&gt;&lt;p&gt;vue-element-admin 是一个后台前端解决方案，它基于 &lt;a href=&quot;https://github.com/vuejs/vue&quot;&gt;vue&lt;/a&gt; 和 &lt;a href=&quot;https://github.com/ElemeFE/element&quot;&gt;element-ui&lt;/a&gt; 实现。&lt;/p&gt;
&lt;p&gt;它使用了最新的前端技术栈，内置了 i18n 国际化解决方案，动态路由，权限验证，提炼了典型的业务模型，提供了丰富的功能组件，它可以帮助你快速搭建企业级中后台产品原型。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/PanJiaChen/vue-element-admin&quot;&gt;GitHub&lt;/a&gt;，&lt;a href=&quot;https://panjiachen.github.io/vue-element-admin/&quot;&gt;在线预览&lt;/a&gt;，&lt;a href=&quot;https://github.com/PanJiaChen/vue-element-admin/wiki&quot;&gt;Wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://gitee.com/panjiachen/vue-element-admin&quot;&gt;Gitee&lt;/a&gt;，&lt;a href=&quot;https://panjiachen.gitee.io/vue-element-admin/&quot;&gt;在线预览&lt;/a&gt;，&lt;a href=&quot;https://panjiachen.gitee.io/vue-element-admin-site/zh/guide/&quot;&gt;使用文档&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.oschina.net/p/vue-element-admin&quot;&gt;OSChina&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Vue" scheme="https://jueee.github.io/categories/Vue/"/>
    
    
    <category term="Vue" scheme="https://jueee.github.io/tags/Vue/"/>
    
    <category term="Element" scheme="https://jueee.github.io/tags/Element/"/>
    
  </entry>
  
  <entry>
    <title>Java 安全框架 Apache Shiro 介绍</title>
    <link href="https://jueee.github.io/2020/11/2020-11-08-Java%E5%AE%89%E5%85%A8%E6%A1%86%E6%9E%B6ApacheShiro%E4%BB%8B%E7%BB%8D/"/>
    <id>https://jueee.github.io/2020/11/2020-11-08-Java%E5%AE%89%E5%85%A8%E6%A1%86%E6%9E%B6ApacheShiro%E4%BB%8B%E7%BB%8D/</id>
    <published>2020-11-08T00:00:00.000Z</published>
    <updated>2020-11-09T06:28:44.093Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Apache-Shiro-介绍"><a href="#Apache-Shiro-介绍" class="headerlink" title="Apache Shiro 介绍"></a>Apache Shiro 介绍</h3><p>Apache Shiro 是一个强大灵活的开源安全框架。</p><p>Apache Shiro 可以帮助我们完成：认证、授权、加密、会话管理、与 Web 集成、缓存等。</p><ul><li>官网：<span class="exturl" data-url="aHR0cHM6Ly9zaGlyby5hcGFjaGUub3JnLw==">https://shiro.apache.org/<i class="fa fa-external-link-alt"></i></span></li><li>GitHub：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FwYWNoZS9zaGlybw==">https://github.com/apache/shiro<i class="fa fa-external-link-alt"></i></span></li></ul><a id="more"></a><h4 id="Jar-引入"><a href="#Jar-引入" class="headerlink" title="Jar 引入"></a>Jar 引入</h4><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.shiro/shiro-spring --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.shiro<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>shiro-spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.7.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></code></pre><h4 id="基本功能点"><a href="#基本功能点" class="headerlink" title="基本功能点"></a>基本功能点</h4><p><img src="/images/2020/11/image-20201106155220875.png" alt="image-20201106155220875" loading="lazy"></p><ul><li><strong>Authentication</strong>：身份认证 / 登录，验证用户是不是拥有相应的身份；</li><li><strong>Authorization</strong>：授权，即权限验证，验证某个已认证的用户是否拥有某个权限；即判断用户是否能做事情，常见的如：验证某个用户是否拥有某个角色。或者细粒度的验证某个用户对某个资源是否具有某个权限；</li><li><strong>Session</strong> <strong>Management</strong>：会话管理，即用户登录后就是一次会话，在没有退出之前，它的所有信息都在会话中；会话可以是普通 JavaSE 环境的，也可以是如 Web 环境的；</li><li><strong>Cryptography</strong>：加密，保护数据的安全性，如密码加密存储到数据库，而不是明文存储；</li><li><strong>Web Support</strong>：Web 支持，可以非常容易的集成到 Web 环境；</li><li><strong>Caching</strong>：缓存，比如用户登录后，其用户信息、拥有的角色 / 权限不必每次去查，这样可以提高效率；</li><li><strong>Concurrency</strong>：shiro 支持多线程应用的并发验证，即如在一个线程中开启另一个线程，能把权限自动传播过去；</li><li><strong>Testing</strong>：提供测试支持；</li><li><strong>Run As</strong>：允许一个用户假装为另一个用户（如果他们允许）的身份进行访问；</li><li><strong>Remember Me</strong>：记住我，这个是非常常见的功能，即一次登录后，下次再来的话不用登录了。</li></ul><p><strong>记住一点，Shiro 不会去维护用户、维护权限；这些需要我们自己去设计 / 提供；然后通过相应的接口注入给 Shiro 即可。</strong></p><h3 id="Apache-Shiro-使用"><a href="#Apache-Shiro-使用" class="headerlink" title="Apache Shiro 使用"></a>Apache Shiro 使用</h3><h4 id="身份验证"><a href="#身份验证" class="headerlink" title="身份验证"></a>身份验证</h4><p><strong>身份验证</strong>，即在应用中谁能证明他就是他本人。一般提供如他们的身份 ID 一些标识信息来表明他就是他本人，如提供身份证，用户名 / 密码来证明。</p><p>在 shiro 中，用户需要提供 <code>principals</code> （身份）和 <code>credentials</code>（证明）给 shiro，从而应用能验证用户身份：</p><p><strong>principals</strong>：身份，即主体的标识属性，可以是任何东西，如用户名、邮箱等，唯一即可。一个主体可以有多个 <code>principals</code>，但只有一个 <code>Primary principals</code>，一般是用户名 / 密码 / 手机号。</p><p><strong>credentials</strong>：证明 / 凭证，即只有主体知道的安全值，如密码 / 数字证书等。</p><ol><li><p>首先准备一些用户身份 / 凭据（shiro.ini）</p><pre class="language-ini" data-language="ini"><code class="language-ini"><span class="token selector">[users]</span><span class="token constant">zhang</span><span class="token attr-value"><span class="token punctuation">=</span>123</span><span class="token constant">wang</span><span class="token attr-value"><span class="token punctuation">=</span>123</span></code></pre><p>此处使用 ini 配置文件，通过 [users] 指定了两个主体：zhang/123、wang/123。</p></li><li><p>示例：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//1、获取SecurityManager工厂，此处使用Ini配置文件初始化SecurityManager  </span><span class="token class-name">Factory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SecurityManager</span><span class="token punctuation">&gt;</span></span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IniSecurityManagerFactory</span><span class="token punctuation">(</span><span class="token string">"classpath:shiro.ini"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2、得到SecurityManager实例 并绑定给SecurityUtils</span><span class="token class-name">SecurityManager</span> securityManager <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">SecurityUtils</span><span class="token punctuation">.</span><span class="token function">setSecurityManager</span><span class="token punctuation">(</span>securityManager<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3、得到Subject及创建用户名/密码身份验证Token（即用户身份/凭证）</span><span class="token class-name">Subject</span> subject <span class="token operator">=</span> <span class="token class-name">SecurityUtils</span><span class="token punctuation">.</span><span class="token function">getSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">UsernamePasswordToken</span> token <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UsernamePasswordToken</span><span class="token punctuation">(</span><span class="token string">"zhang"</span><span class="token punctuation">,</span> <span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token comment">//4、登录，即身份验证</span>    subject<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//5、身份验证失败</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>subject<span class="token punctuation">.</span><span class="token function">isAuthenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//6、退出</span>subject<span class="token punctuation">.</span><span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ol><h4 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h4><p><strong>基于角色的访问控制（隐式角色）</strong></p><p>在 ini 配置文件配置用户拥有的角色（shiro-role.ini）</p><pre class="language-ini" data-language="ini"><code class="language-ini"><span class="token selector">[users]</span><span class="token constant">zhang</span><span class="token attr-value"><span class="token punctuation">=</span>123,role1,role2</span><span class="token constant">wang</span><span class="token attr-value"><span class="token punctuation">=</span>123,role1</span></code></pre><p>规则即：“用户名 = 密码，角色 1，角色 2”，如果需要在应用中判断用户是否有相应角色，就需要在相应的 Realm 中返回角色信息。</p><p><strong>基于资源的访问控制（显示角色）</strong></p><p>在 ini 配置文件配置用户拥有的角色及角色 - 权限关系</p><pre class="language-ini" data-language="ini"><code class="language-ini"><span class="token selector">[users]</span><span class="token constant">zhang</span><span class="token attr-value"><span class="token punctuation">=</span>123,role1,role2</span><span class="token constant">wang</span><span class="token attr-value"><span class="token punctuation">=</span>123,role1</span><span class="token selector">[roles]</span><span class="token constant">role1</span><span class="token attr-value"><span class="token punctuation">=</span>user:create,user:update</span><span class="token constant">role2</span><span class="token attr-value"><span class="token punctuation">=</span>user:create,user:delete</span></code></pre><p>规则：“用户名 = 密码，角色 1，角色 2”“角色 = 权限 1，权限 2”，即首先根据用户名找到角色，然后根据角色再找到权限</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;Apache-Shiro-介绍&quot;&gt;&lt;a href=&quot;#Apache-Shiro-介绍&quot; class=&quot;headerlink&quot; title=&quot;Apache Shiro 介绍&quot;&gt;&lt;/a&gt;Apache Shiro 介绍&lt;/h3&gt;&lt;p&gt;Apache Shiro 是一个强大灵活的开源安全框架。&lt;/p&gt;
&lt;p&gt;Apache Shiro 可以帮助我们完成：认证、授权、加密、会话管理、与 Web 集成、缓存等。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;官网：&lt;a href=&quot;https://shiro.apache.org/&quot;&gt;https://shiro.apache.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;GitHub：&lt;a href=&quot;https://github.com/apache/shiro&quot;&gt;https://github.com/apache/shiro&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Java" scheme="https://jueee.github.io/categories/Java/"/>
    
    <category term="JavaJar" scheme="https://jueee.github.io/categories/Java/JavaJar/"/>
    
    
    <category term="Apache" scheme="https://jueee.github.io/tags/Apache/"/>
    
    <category term="Java" scheme="https://jueee.github.io/tags/Java/"/>
    
    <category term="JavaJar" scheme="https://jueee.github.io/tags/JavaJar/"/>
    
  </entry>
  
  <entry>
    <title>Java 的 JWT 实现库 java-jwt 介绍</title>
    <link href="https://jueee.github.io/2020/11/2020-11-07-Java%E7%9A%84JWT%E5%AE%9E%E7%8E%B0%E5%BA%93java-jwt%E4%BB%8B%E7%BB%8D/"/>
    <id>https://jueee.github.io/2020/11/2020-11-07-Java%E7%9A%84JWT%E5%AE%9E%E7%8E%B0%E5%BA%93java-jwt%E4%BB%8B%E7%BB%8D/</id>
    <published>2020-11-07T00:00:00.000Z</published>
    <updated>2020-11-06T11:20:54.361Z</updated>
    
    <content type="html"><![CDATA[<h3 id="java-jwt-介绍"><a href="#java-jwt-介绍" class="headerlink" title="java-jwt 介绍"></a>java-jwt 介绍</h3><p>auth0 的 java-jwt 是一个 JSON WEB TOKEN（JWT）的一个实现。</p><p>GitHub：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2F1dGgwL2phdmEtand0">https://github.com/auth0/java-jwt<i class="fa fa-external-link-alt"></i></span></p><h4 id="依赖引入"><a href="#依赖引入" class="headerlink" title="依赖引入"></a>依赖引入</h4><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/com.auth0/java-jwt --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.auth0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>java-jwt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.11.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></code></pre><a id="more"></a><h3 id="已实现的算法"><a href="#已实现的算法" class="headerlink" title="已实现的算法"></a>已实现的算法</h3><p>该库使用以下算法实现 JWT 验证和签名:</p><table><thead><tr><th align="left">JWS</th><th align="left"> 算法</th><th align="left">介绍</th></tr></thead><tbody><tr><td align="left"> HS256</td><td align="left">HMAC256</td><td align="left">HMAC with SHA-256</td></tr><tr><td align="left">HS384</td><td align="left">HMAC384</td><td align="left">HMAC with SHA-384</td></tr><tr><td align="left">HS512</td><td align="left">HMAC512</td><td align="left">HMAC with SHA-512</td></tr><tr><td align="left">RS256</td><td align="left">RSA256</td><td align="left">RSASSA-PKCS1-v1_5 with SHA-256</td></tr><tr><td align="left">RS384</td><td align="left">RSA384</td><td align="left">RSASSA-PKCS1-v1_5 with SHA-384</td></tr><tr><td align="left">RS512</td><td align="left">RSA512</td><td align="left">RSASSA-PKCS1-v1_5 with SHA-512</td></tr><tr><td align="left">ES256</td><td align="left">ECDSA256</td><td align="left">ECDSA with curve P-256 and SHA-256</td></tr><tr><td align="left">ES384</td><td align="left">ECDSA384</td><td align="left">ECDSA with curve P-384 and SHA-384</td></tr><tr><td align="left">ES512</td><td align="left">ECDSA512</td><td align="left">ECDSA with curve P-521 and SHA-512</td></tr></tbody></table><h3 id="JWT-基本使用"><a href="#JWT-基本使用" class="headerlink" title="JWT 基本使用"></a>JWT 基本使用</h3><h4 id="产生加密Token"><a href="#产生加密Token" class="headerlink" title="产生加密Token"></a>产生加密 Token</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> token <span class="token operator">=</span> JWT<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withExpiresAt</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 设置过期时间</span><span class="token punctuation">.</span><span class="token function">withAudience</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span> <span class="token comment">// 设置接受方信息，一般时登录用户</span><span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span><span class="token class-name">Algorithm</span><span class="token punctuation">.</span><span class="token function">HMAC256</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 使用HMAC算法，123456作为密钥加密</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJyb290IiwiZXhwIjoxNjA0NjMyMTY0fQ.5JbpimPPzTnXSVX9LL6eekH7tkFc6ApRkhIUnTGt0BY</span></code></pre><h4 id="解密Token获取负载信息"><a href="#解密Token获取负载信息" class="headerlink" title="解密Token获取负载信息"></a>解密 Token 获取负载信息</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">DecodedJWT</span> jwt1 <span class="token operator">=</span> JWT<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> userId <span class="token operator">=</span> jwt1<span class="token punctuation">.</span><span class="token function">getAudience</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// root</span></code></pre><h4 id="验证Token是否有效"><a href="#验证Token是否有效" class="headerlink" title="验证Token是否有效"></a>验证 Token 是否有效</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Algorithm</span> algorithm <span class="token operator">=</span> <span class="token class-name">Algorithm</span><span class="token punctuation">.</span><span class="token function">HMAC256</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">JWTVerifier</span> jwtVerifier <span class="token operator">=</span> JWT<span class="token punctuation">.</span><span class="token function">require</span><span class="token punctuation">(</span>algorithm<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withIssuer</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">DecodedJWT</span> jwt2 <span class="token operator">=</span> jwtVerifier<span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jwt2<span class="token punctuation">.</span><span class="token function">getAudience</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// root</span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;java-jwt-介绍&quot;&gt;&lt;a href=&quot;#java-jwt-介绍&quot; class=&quot;headerlink&quot; title=&quot;java-jwt 介绍&quot;&gt;&lt;/a&gt;java-jwt 介绍&lt;/h3&gt;&lt;p&gt;auth0 的 java-jwt 是一个 JSON WEB TOKEN（JWT）的一个实现。&lt;/p&gt;
&lt;p&gt;GitHub：&lt;a href=&quot;https://github.com/auth0/java-jwt&quot;&gt;https://github.com/auth0/java-jwt&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;依赖引入&quot;&gt;&lt;a href=&quot;#依赖引入&quot; class=&quot;headerlink&quot; title=&quot;依赖引入&quot;&gt;&lt;/a&gt;依赖引入&lt;/h4&gt;&lt;pre class=&quot;language-xml&quot; data-language=&quot;xml&quot;&gt;&lt;code class=&quot;language-xml&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- https://mvnrepository.com/artifact/com.auth0/java-jwt --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;dependency&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;groupId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;com.auth0&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;groupId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;artifactId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;java-jwt&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;artifactId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;version&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;3.11.0&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;version&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;dependency&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="Java" scheme="https://jueee.github.io/categories/Java/"/>
    
    <category term="JavaJar" scheme="https://jueee.github.io/categories/Java/JavaJar/"/>
    
    
    <category term="Java" scheme="https://jueee.github.io/tags/Java/"/>
    
    <category term="JavaJar" scheme="https://jueee.github.io/tags/JavaJar/"/>
    
    <category term="JWT" scheme="https://jueee.github.io/tags/JWT/"/>
    
  </entry>
  
  <entry>
    <title>跨域认证解决方案 JWT 介绍</title>
    <link href="https://jueee.github.io/2020/11/2020-11-06-%E8%B7%A8%E5%9F%9F%E8%AE%A4%E8%AF%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88JWT%E4%BB%8B%E7%BB%8D/"/>
    <id>https://jueee.github.io/2020/11/2020-11-06-%E8%B7%A8%E5%9F%9F%E8%AE%A4%E8%AF%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88JWT%E4%BB%8B%E7%BB%8D/</id>
    <published>2020-11-06T00:00:00.000Z</published>
    <updated>2020-11-05T11:05:11.821Z</updated>
    
    <content type="html"><![CDATA[<h3 id="JWT-简介"><a href="#JWT-简介" class="headerlink" title="JWT 简介"></a>JWT 简介</h3><p>JSON Web Token（JWT）是目前最流行的跨域身份验证解决方案。是基于 Json 的一个公开规范，这个规范允许我们使用 JWT 在用户和服务器之间传递安全可靠的信息。</p><p>JWT 的两大使用场景是：认证和数据交换。使用起来就是，由服务端根据规范生成一个令牌（token），并且发放给客户端。此时客户端请求服务端的时候就可以携带者令牌，以令牌来证明自己的身份信息。</p><p><strong>作用</strong>：类似 session 保持登录状态 的办法，通过 token 来代表用户身份。</p><ul><li>官网：<span class="exturl" data-url="aHR0cHM6Ly9qd3QuaW8v">https://jwt.io/<i class="fa fa-external-link-alt"></i></span></li></ul><a id="more"></a><h3 id="跨域认证的问题"><a href="#跨域认证的问题" class="headerlink" title="跨域认证的问题"></a>跨域认证的问题</h3><p>互联网服务离不开用户认证。一般流程是下面这样。</p><blockquote><p>1、用户向服务器发送用户名和密码。</p><p>2、服务器验证通过后，在当前对话（session）里面保存相关数据，比如用户角色、登录时间等等。</p><p>3、服务器向用户返回一个 session_id，写入用户的 Cookie。</p><p>4、用户随后的每一次请求，都会通过 Cookie，将 session_id 传回服务器。</p><p>5、服务器收到 session_id，找到前期保存的数据，由此得知用户的身份。</p></blockquote><p>这种模式的问题在于，扩展性（scaling）不好。单机当然没有问题，如果是服务器集群，或者是跨域的服务导向架构，就要求 session 数据共享，每台服务器都能够读取 session。</p><p>举例来说，A 网站和 B 网站是同一家公司的关联服务。现在要求，用户只要在其中一个网站登录，再访问另一个网站就会自动登录，请问怎么实现？</p><ul><li>一种解决方案是 session 数据持久化，写入数据库或别的持久层。各种服务收到请求后，都向持久层请求数据。这种方案的优点是架构清晰，缺点是工程量比较大。另外，持久层万一挂了，就会单点失败。</li><li>另一种方案是服务器索性不保存 session 数据了，所有数据都保存在客户端，每次请求都发回服务器。JWT 就是这种方案的一个代表。</li></ul><h3 id="JWT-的原理"><a href="#JWT-的原理" class="headerlink" title="JWT 的原理"></a>JWT 的原理</h3><p>JWT 的原理是，服务器认证以后，生成一个 JSON 对象，发回给用户，就像下面这样。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">{</span>  <span class="token string">"姓名"</span><span class="token operator">:</span> <span class="token string">"张三"</span><span class="token punctuation">,</span>  <span class="token string">"角色"</span><span class="token operator">:</span> <span class="token string">"管理员"</span><span class="token punctuation">,</span>  <span class="token string">"到期时间"</span><span class="token operator">:</span> <span class="token string">"2018年7月1日0点0分"</span><span class="token punctuation">}</span></code></pre><p>以后，用户与服务端通信的时候，都要发回这个 JSON 对象。服务器完全只靠这个对象认定用户身份。</p><p>为了防止用户篡改数据，服务器在生成这个对象的时候，会加上签名（详见后文）。</p><p>这样服务器就不保存任何 session 数据了，也就是说，服务器变成无状态了，从而比较容易实现扩展。</p><h3 id="JWT-的数据结构"><a href="#JWT-的数据结构" class="headerlink" title="JWT 的数据结构"></a>JWT 的数据结构</h3><p>JSON Web Token 由三部分组成，它们之间用圆点 (.) 连接。这三部分分别是：</p><ul><li>Header：JWT 头</li><li> Payload：有效载荷</li><li> Signature：签名</li></ul><p>因此，一个典型的 JWT 看起来是这个样子的：</p><blockquote><p>xxxxx.yyyyy.zzzzz</p></blockquote><h4 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h4><p>Header 部分是一个 JSON 对象，描述 JWT 的元数据，通常是下面的样子。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">{</span>  <span class="token string">"alg"</span><span class="token operator">:</span> <span class="token string">"HS256"</span><span class="token punctuation">,</span>  <span class="token string">"typ"</span><span class="token operator">:</span> <span class="token string">"JWT"</span><span class="token punctuation">}</span></code></pre><p>上面代码中，<code>alg</code> 属性表示签名的算法（algorithm），默认是 HMAC SHA256（写成 HS256）；<code>typ</code> 属性表示这个令牌（token）的类型（type），JWT 令牌统一写为 <code>JWT</code>。</p><p>最后，将上面的 JSON 对象使用 Base64URL 算法转成字符串。</p><h4 id="Payload"><a href="#Payload" class="headerlink" title="Payload"></a>Payload</h4><p>Payload 部分也是一个 JSON 对象，用来存放实际需要传递的数据。</p><p>JWT 规定了 7 个官方字段，供选用。</p><ul><li>iss (issuer)：签发人</li><li> exp (expiration time)：过期时间</li><li> sub (subject)：主题</li><li> aud (audience)：受众</li><li> nbf (Not Before)：生效时间</li><li> iat (Issued At)：签发时间</li><li> jti (JWT ID)：编号</li></ul><p>除了官方字段，你还可以在这个部分定义私有字段，下面就是一个例子。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">{</span>  <span class="token string">"sub"</span><span class="token operator">:</span> <span class="token string">"1234567890"</span><span class="token punctuation">,</span>  <span class="token string">"name"</span><span class="token operator">:</span> <span class="token string">"John Doe"</span><span class="token punctuation">,</span>  <span class="token string">"admin"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span></code></pre><p>注意，JWT 默认是不加密的，任何人都可以读到，所以不要把秘密信息放在这个部分。</p><p>这个 JSON 对象也要使用 Base64URL 算法转成字符串。</p><h4 id="Signature"><a href="#Signature" class="headerlink" title="Signature"></a>Signature</h4><p>Signature 部分是对前两部分的签名，防止数据篡改。</p><p>首先，需要指定一个密钥（secret）。这个密钥只有服务器才知道，不能泄露给用户。然后，使用 Header 里面指定的签名算法（默认是 HMAC SHA256），按照下面的公式产生签名。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token constant">HMACSHA256</span><span class="token punctuation">(</span>  <span class="token function">base64UrlEncode</span><span class="token punctuation">(</span>header<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span>  <span class="token function">base64UrlEncode</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">,</span>  secret<span class="token punctuation">)</span></code></pre><p>算出签名以后，把 Header、Payload、Signature 三个部分拼成一个字符串，每个部分之间用 "点"（<code>.</code>）分隔，就可以返回给用户。</p><h4 id="Base64URL"><a href="#Base64URL" class="headerlink" title="Base64URL"></a>Base64URL</h4><p>Header 和 Payload 串型化的算法是 Base64URL。这个算法跟 Base64 算法基本类似，但有一些小的不同。</p><p>JWT 作为一个令牌（token），有些场合可能会放到 URL（比如 api.example.com/?token=xxx）。</p><p>Base64 有三个字符 <code>+</code>、<code>/</code> 和 <code>=</code>，在 URL 里面有特殊含义，所以要被替换掉：<code>=</code> 被省略、<code>+</code> 替换成 <code>-</code>，<code>/</code> 替换成<code>_</code> 。这就是 Base64URL 算法。</p><h3 id="JWT-的使用方式"><a href="#JWT-的使用方式" class="headerlink" title="JWT 的使用方式"></a>JWT 的使用方式</h3><p>客户端收到服务器返回的 JWT，可以储存在 Cookie 里面，也可以储存在 localStorage。</p><p>此后，客户端每次与服务器通信，都要带上这个 JWT。你可以把它放在 Cookie 里面自动发送，但是这样不能跨域，所以更好的做法是放在 HTTP 请求的头信息 <code>Authorization</code> 字段里面。</p><blockquote><pre class="language-javascript" data-language="javascript"><code class="language-javascript">Authorization<span class="token operator">:</span> Bearer <span class="token operator">&lt;</span>token<span class="token operator">&gt;</span></code></pre></blockquote><p>另一种做法是，跨域的时候，JWT 就放在 POST 请求的数据体里面。</p><h3 id="JWT-的几个特点"><a href="#JWT-的几个特点" class="headerlink" title="JWT 的几个特点"></a>JWT 的几个特点</h3><ol><li>JWT 默认是不加密，但也是可以加密的。生成原始 Token 以后，可以用密钥再加密一次。</li><li>JWT 不加密的情况下，不能将秘密数据写入 JWT。</li><li>JWT 不仅可以用于认证，也可以用于交换信息。有效使用 JWT，可以降低服务器查询数据库的次数。</li><li>JWT 的最大缺点是，由于服务器不保存 session 状态，因此无法在使用过程中废止某个 token，或者更改 token 的权限。也就是说，一旦 JWT 签发了，在到期之前就会始终有效，除非服务器部署额外的逻辑。</li><li>JWT 本身包含了认证信息，一旦泄露，任何人都可以获得该令牌的所有权限。为了减少盗用，JWT 的有效期应该设置得比较短。对于一些比较重要的权限，使用时应该再次对用户进行认证。</li><li>为了减少盗用，JWT 不应该使用 HTTP 协议明码传输，要使用 HTTPS 协议传输。</li></ol><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><span class="exturl" data-url="aHR0cHM6Ly9qd3QuaW8vaW50cm9kdWN0aW9uLw==">Introduction to JSON Web Tokens<i class="fa fa-external-link-alt"></i></span>， by Auth0</li><li><span class="exturl" data-url="aHR0cHM6Ly9tZWRpdW0uY29tL0Bicnlhbm1hbnVlbGUvc2Vzc2lvbmxlc3MtYXV0aGVudGljYXRpb24td2l0aGUtand0cy13aXRoLW5vZGUtZXhwcmVzcy1wYXNzcG9ydC1qcy02OWIwNTllNGIyMmM=">Sessionless Authentication using JWTs (with Node + Express + Passport JS)<i class="fa fa-external-link-alt"></i></span>, by Bryan Manuele</li><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2R3eWwvbGVhcm4tanNvbi13ZWItdG9rZW5zL2Jsb2IvbWFzdGVyL1JFQURNRS5tZA==">Learn how to use JSON Web Tokens<i class="fa fa-external-link-alt"></i></span>, by dwyl</li></ul>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;JWT-简介&quot;&gt;&lt;a href=&quot;#JWT-简介&quot; class=&quot;headerlink&quot; title=&quot;JWT 简介&quot;&gt;&lt;/a&gt;JWT 简介&lt;/h3&gt;&lt;p&gt;JSON Web Token（JWT）是目前最流行的跨域身份验证解决方案。是基于 Json 的一个公开规范，这个规范允许我们使用 JWT 在用户和服务器之间传递安全可靠的信息。&lt;/p&gt;
&lt;p&gt;JWT 的两大使用场景是：认证和数据交换。使用起来就是，由服务端根据规范生成一个令牌（token），并且发放给客户端。此时客户端请求服务端的时候就可以携带者令牌，以令牌来证明自己的身份信息。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;作用&lt;/strong&gt;：类似 session 保持登录状态 的办法，通过 token 来代表用户身份。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;官网：&lt;a href=&quot;https://jwt.io/&quot;&gt;https://jwt.io/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Node.js" scheme="https://jueee.github.io/categories/Node-js/"/>
    
    
    <category term="Json" scheme="https://jueee.github.io/tags/Json/"/>
    
    <category term="JWT" scheme="https://jueee.github.io/tags/JWT/"/>
    
  </entry>
  
  <entry>
    <title>Kafka 常用命令之 kafka-topics.sh</title>
    <link href="https://jueee.github.io/2020/11/2020-11-05-Kafka%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E4%B9%8Bkafka-topics.sh/"/>
    <id>https://jueee.github.io/2020/11/2020-11-05-Kafka%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E4%B9%8Bkafka-topics.sh/</id>
    <published>2020-11-05T00:00:00.000Z</published>
    <updated>2020-11-05T03:25:56.836Z</updated>
    
    <content type="html"><![CDATA[<p>kafka-topics.sh 脚本主要负责 topic 相关的操作。它的具体实现是通过 kafka-run-class 来调用 <code>TopicCommand</code> 类，并根据参数执行指定的功能。</p><a id="more"></a><h3 id="场景再现"><a href="#场景再现" class="headerlink" title="场景再现"></a>场景再现</h3><p>若程序报错：</p><blockquote><p> [Producer clientId=producer-1] Error while fetching metadata with correlation id 312 : {logger-channel=UNKNOWN_TOPIC_OR_PARTITION}</p></blockquote><p>可能原因：</p><p>topic 不存在，切自动创建失败</p><p>需要设置：</p><pre class="language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">auto.create.topics.enable</span><span class="token punctuation">=</span><span class="token attr-value">true</span></code></pre><p>如果不方便修改配置，则需要手动创建 topic。</p><h3 id="查看-topic"><a href="#查看-topic" class="headerlink" title="查看 topic"></a>查看 topic</h3><pre class="language-bash" data-language="bash"><code class="language-bash">bin/kafka-topics.sh --list --zookeeper <span class="token number">127.0</span>.0.1:2181/spacemanti</code></pre><h3 id="创建-topic"><a href="#创建-topic" class="headerlink" title="创建 topic"></a>创建 topic</h3><pre class="language-bash" data-language="bash"><code class="language-bash">bin/kafka-topics.sh --create --zookeeper <span class="token number">127.0</span>.0.1:2181/spacemanti --config max.message.bytes<span class="token operator">=</span><span class="token number">128000000</span> --config flush.messages<span class="token operator">=</span><span class="token number">1</span> --replication-factor <span class="token number">1</span> --partitions <span class="token number">1</span> --topic logger-channel</code></pre><h3 id="查看-topic-1"><a href="#查看-topic-1" class="headerlink" title="查看 topic"></a>查看 topic</h3><pre class="language-bash" data-language="bash"><code class="language-bash">bin/kafka-topics.sh --describe --zookeeper <span class="token number">127.0</span>.0.1:2181/spacemanti  --topic manti-logger-channel                    Topic:manti-logger-channel      PartitionCount:1        ReplicationFactor:1     Configs:max.message.bytes<span class="token operator">=</span><span class="token number">128000000</span>,flush.messages<span class="token operator">=</span><span class="token number">1</span>        Topic: manti-logger-channel     Partition: <span class="token number">0</span>    Leader: <span class="token number">2</span>       Replicas: <span class="token number">2</span>     Isr: <span class="token number">2</span></code></pre><ul><li><p><strong>PartitionCount</strong>：partition 个数。</p></li><li><p><strong>ReplicationFactor</strong>：副本个数。</p></li><li><p><strong>Partition</strong>：partition 编号，从 0 开始递增。</p></li><li><p><strong>Leader</strong>：当前 partition 起作用的 breaker.id。</p></li><li><p><strong>Replicas</strong>: 当前副本数据所在的 breaker.id，是一个列表，排在最前面的其作用。</p></li><li><p><strong>Isr</strong>：当前 kakfa 集群中可用的 breaker.id 列表。</p></li></ul><h3 id="删除-topic"><a href="#删除-topic" class="headerlink" title="删除 topic"></a>删除 topic</h3><pre class="language-bash" data-language="bash"><code class="language-bash">bin/kafka-topics.sh --describe --zookeeper <span class="token number">127.0</span>.0.1:2181/spacemanti  --topic logger-channel</code></pre><ul><li>若 delete.topic.enable=true：直接彻底删除该 Topic。</li><li>若 delete.topic.enable=false：如果当前 Topic 没有使用过即没有传输过信息：可以彻底删除。<br> 如果当前 Topic 有使用过即有过传输过信息：并没有真正删除 Topic 只是把这个 Topic 标记为删除 (marked for deletion)，重启 Kafka Server 后删除。</li></ul><p> <strong>注</strong>：delete.topic.enable=true 配置信息位于配置文件 config/server.properties 中 (较新的版本中无显式配置，默认为 true)。</p><h3 id="修改-Topic"><a href="#修改-Topic" class="headerlink" title="修改 Topic"></a>修改 Topic</h3><ul><li><p><strong>增加分区数</strong></p><pre class="language-shell" data-language="shell"><code class="language-shell">bin/kafka-topics.sh --alter --bootstrap-server node1:9092,node2:9092,node3:9092 --topic topicName --partitions <span class="token number">3</span><span class="token number">1</span></code></pre><p>修改分区数时，仅能增加分区个数。若是用其减少 partition 个数，则会报如下错误信息：</p><pre class="language-none"><code class="language-none">  org.apache.kafka.common.errors.InvalidPartitionsException: The number of partitions for a topic can only be increased. Topic hadoop currently has 3 partitions, 2 would not be an increase.1</code></pre><p>不能用来修改副本个数。(请使用 kafka-reassign-partitions.sh 脚本增加副本数)</p></li><li><p><strong>增加配置</strong></p><pre class="language-shell" data-language="shell"><code class="language-shell">bin/kafka-topics.sh --alter --bootstrap-server node1:9092,node2:9092,node3:9092 --topic topicName --config flush.messages<span class="token operator">=</span><span class="token number">1</span><span class="token number">1</span></code></pre></li><li><p><strong>删除配置</strong></p><pre class="language-shell" data-language="shell"><code class="language-shell">bin/kafka-topics.sh --alter --bootstrap-server node1:9092,node2:9092,node3:9092 --topic topicName --delete-config flush.messages</code></pre></li></ul><h3 id="配置属性"><a href="#配置属性" class="headerlink" title="配置属性"></a>配置属性</h3><p>当如下所示的属性配置到 Topic 上时，将会覆盖 server.properties 上对应的属性。</p><table><thead><tr><th>属性名</th><th>值类型</th><th>默认值</th><th>有效值</th><th>服务器默认属性</th><th>描述</th></tr></thead><tbody><tr><td> cleanup.policy</td><td>list</td><td>delete</td><td>delete compact</td><td>log.cleanup.policy</td><td> 过期或达到上限日志的清理策略。 delete：删除 compact：压缩</td></tr><tr><td> compression.type</td><td>string</td><td>producer</td><td>uncompressed snappy lz4 gzip producer</td><td>compression.type</td><td> 指定给该 topic 最终的压缩类型</td></tr><tr><td> delete.retention.ms</td><td>long</td><td>86400000</td><td>[0,…]</td><td>log.cleaner.delete.retention.ms</td><td> 压缩的日志保留的最长时间，也是客户端消费消息的最长时间。 与 log.retention.minutes 的区别在于：一个控制未压缩的数据，一个控制压缩后的数据。</td></tr><tr><td>file.delete.delay.ms</td><td>long</td><td>60000</td><td>[0,…]</td><td>log.segment.delete.delay.ms</td><td> 从文件系统中删除前所等待的时间</td></tr><tr><td> flush.messages</td><td>long</td><td>9223372036854775807</td><td>[0,…]</td><td>log.flush.interval.messages</td><td> 在消息刷到磁盘之前，日志分区收集的消息数</td></tr><tr><td> flush.ms</td><td>long</td><td>9223372036854775807</td><td>[0,…]</td><td>log.flush.interval.ms</td><td> 消息在刷到磁盘之前，保存在内存中的最长时间，单位是 ms</td></tr><tr><td>index.interval.bytes</td><td>int</td><td>4096</td><td>[0,…]</td><td>log.index.interval.bytes</td><td> 执行 fetch 操作后，扫描最近的 offset 运行空间的大小。 设置越大，代表扫描速度越快，但是也更耗内存。 （一般情况下不需要设置此参数）</td></tr><tr><td>message.max.bytes</td><td>int</td><td>1000012</td><td>[0,…]</td><td>message.max.bytes</td><td>log 中能够容纳消息的最大字节数</td></tr><tr><td> min.cleanable.dirty.ratio</td><td>double</td><td>0.5</td><td>[0,…,1]</td><td>log.cleaner.min.cleanable.ratio</td><td> 日志清理的频率控制，占该 log 的百分比。 越大意味着更高效的清理，同时会存在空间浪费问题</td></tr><tr><td> retention.bytes</td><td>long</td><td>-1</td><td></td><td>log.retention.bytes</td><td>topic 每个分区的最大文件大小。 一个 topic 的大小限制 = 分区数 * log.retention.bytes。 -1 表示没有大小限制。</td></tr><tr><td>retention.ms</td><td>int</td><td>604800000</td><td>[-1,…]</td><td>log.retention.minutes</td><td> 日志文件保留的分钟数。 数据存储的最大时间超过这个时间会根据 log.cleanup.policy 设置的策略处理数据</td></tr><tr><td> segment.bytes</td><td>int</td><td>1073741824</td><td>[14,…]</td><td>log.segment.bytes</td><td> 每个 segment 的大小 (默认为 1G)</td></tr><tr><td>segment.index.bytes</td><td>int</td><td>10485760</td><td>[0,…]</td><td>log.index.size.max.bytes</td><td> 对于 segment 日志的索引文件大小限制 (默认为 10M)</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;p&gt;kafka-topics.sh 脚本主要负责 topic 相关的操作。它的具体实现是通过 kafka-run-class 来调用 &lt;code&gt;TopicCommand&lt;/code&gt; 类，并根据参数执行指定的功能。&lt;/p&gt;</summary>
    
    
    
    <category term="Kafka" scheme="https://jueee.github.io/categories/Kafka/"/>
    
    
    <category term="Kafka" scheme="https://jueee.github.io/tags/Kafka/"/>
    
  </entry>
  
  <entry>
    <title>Vue 拼图验证（vue-puzzle-vcode）</title>
    <link href="https://jueee.github.io/2020/11/2020-11-05-Vue%E6%8B%BC%E5%9B%BE%E9%AA%8C%E8%AF%81%EF%BC%88vue-puzzle-vcode%EF%BC%89/"/>
    <id>https://jueee.github.io/2020/11/2020-11-05-Vue%E6%8B%BC%E5%9B%BE%E9%AA%8C%E8%AF%81%EF%BC%88vue-puzzle-vcode%EF%BC%89/</id>
    <published>2020-11-05T00:00:00.000Z</published>
    <updated>2020-11-05T09:45:51.667Z</updated>
    
    <content type="html"><![CDATA[<h3 id="插件介绍"><a href="#插件介绍" class="headerlink" title="插件介绍"></a>插件介绍</h3><p>Vue 纯前端的拼图人机验证、右滑拼图验证。</p><ul><li>插件网站：<span class="exturl" data-url="aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvdnVlLXB1enpsZS12Y29kZQ==">https://www.npmjs.com/package/vue-puzzle-vcode<i class="fa fa-external-link-alt"></i></span></li><li>Demo：<span class="exturl" data-url="aHR0cHM6Ly9pc2x1by5jb20vd29yay92dWUtcHV6emxlLXZjb2RlLyMv">https://isluo.com/work/vue-puzzle-vcode/#/<i class="fa fa-external-link-alt"></i></span></li></ul><a id="more"></a><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> vue-puzzle-vcode --save</code></pre><h3 id="使用依赖"><a href="#使用依赖" class="headerlink" title="使用依赖"></a>使用依赖</h3><pre class="language-html" data-language="html"><code class="language-html">import Vcode from "vue-puzzle-vcode"; <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Vcode</span> <span class="token attr-name">:show</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>isShow<span class="token punctuation">"</span></span> <span class="token attr-name">@success</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>success<span class="token punctuation">"</span></span> <span class="token attr-name">@close</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>close<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span></code></pre><h3 id="简单例子"><a href="#简单例子" class="headerlink" title="简单例子"></a>简单例子</h3><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Vcode</span> <span class="token attr-name">:show</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>isShow<span class="token punctuation">"</span></span> <span class="token attr-name">@success</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>success<span class="token punctuation">"</span></span> <span class="token attr-name">@close</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>close<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">import</span> Vcode <span class="token keyword">from</span> <span class="token string">"vue-puzzle-vcode"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      isShow<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 验证码模态框是否出现</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  components<span class="token operator">:</span> <span class="token punctuation">{</span>    Vcode<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>isShow <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment">// 用户通过了验证</span>    <span class="token function">success</span><span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>isShow <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// 通过验证后，需要手动隐藏模态框</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment">// 用户点击遮罩层，应该关闭模态框</span>    <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>isShow <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></code></pre><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><table><thead><tr><th align="left">字段</th><th align="left">类型</th><th align="left">默认值</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"> show</td><td align="left">Boolean</td><td align="left">false</td><td align="left"> 是否显示验证码弹框</td></tr><tr><td align="left"> canvasWidth</td><td align="left">Number</td><td align="left">310</td><td align="left"> 主图区域的宽度，单位 px</td></tr><tr><td align="left">canvasHeight</td><td align="left">Number</td><td align="left">160</td><td align="left"> 主图区域的高度，单位 px</td></tr><tr><td align="left">puzzleScale</td><td align="left">Number</td><td align="left">1</td><td align="left"> 拼图块 (小的拼图) 的大小比例，0.2 ～ 2 ，数字越大，拼图越大</td></tr><tr><td align="left"> sliderSize</td><td align="left">Number</td><td align="left">50</td><td align="left"> 左下角用户拖动的那个滑块的尺寸，单位 px</td></tr><tr><td align="left">range</td><td align="left">Number</td><td align="left">10</td><td align="left"> 判断成功的误差范围，单位 px, 滑动的距离和拼图的距离小于等于此值时，会判定重合</td></tr><tr><td align="left"> imgs</td><td align="left">Array</td><td align="left">null</td><td align="left"> 自定义图片，见下方例子</td></tr><tr><td align="left"> successText</td><td align="left">String</td><td align="left">"验证通过！"</td><td align="left"> 验证成功时的提示文字</td></tr><tr><td align="left"> failText</td><td align="left">String</td><td align="left">"验证失败，请重试"</td><td align="left"> 验证失败时的提示文字</td></tr><tr><td align="left"> sliderText</td><td align="left">String</td><td align="left">"拖动滑块完成拼图"</td><td align="left"> 下方滑动条里的文字</td></tr></tbody></table><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><table><thead><tr><th align="left">事件名</th><th align="left">返回值</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"> success</td><td align="left"> 偏差值</td><td align="left">验证通过时会触发，返回值是用户移动的距离跟目标距离的偏差值 px</td></tr><tr><td align="left">fail</td><td align="left"> 偏差值</td><td align="left">验证失败时会触发，返回值同上</td></tr><tr><td align="left"> close</td><td align="left">null</td><td align="left"> 用户点击遮罩层的回调</td></tr></tbody></table><h3 id="自定义图片"><a href="#自定义图片" class="headerlink" title="自定义图片"></a>自定义图片</h3><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Vcode</span> <span class="token attr-name">:imgs</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>[Img1, Img2]<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">import</span> Img1 <span class="token keyword">from</span> <span class="token string">"~/assets/img1.png"</span><span class="token punctuation">;</span><span class="token keyword">import</span> Img2 <span class="token keyword">from</span> <span class="token string">"~/assets/img2.png"</span><span class="token punctuation">;</span> <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      Img1<span class="token punctuation">,</span>      Img2<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></code></pre><ul><li>也可以是网络图片完整 URL 路径，但注意图片跨域问题，因为 canvas api 无法调用跨 域的图片</li></ul><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><ul><li>当不传递 imgs 字段或图片加载出错时，会自动生成随机图片</li><li>模态框的显示和隐藏完全由父级控制，所以用户通过验证后，需要手动隐藏模态框</li></ul><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvdnVlLXB1enpsZS12Y29kZQ==">https://www.npmjs.com/package/vue-puzzle-vcode<i class="fa fa-external-link-alt"></i></span></li></ul>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;插件介绍&quot;&gt;&lt;a href=&quot;#插件介绍&quot; class=&quot;headerlink&quot; title=&quot;插件介绍&quot;&gt;&lt;/a&gt;插件介绍&lt;/h3&gt;&lt;p&gt;Vue 纯前端的拼图人机验证、右滑拼图验证。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;插件网站：&lt;a href=&quot;https://www.npmjs.com/package/vue-puzzle-vcode&quot;&gt;https://www.npmjs.com/package/vue-puzzle-vcode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Demo：&lt;a href=&quot;https://isluo.com/work/vue-puzzle-vcode/#/&quot;&gt;https://isluo.com/work/vue-puzzle-vcode/#/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Vue" scheme="https://jueee.github.io/categories/Vue/"/>
    
    
    <category term="Vue" scheme="https://jueee.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Spring Data Jpa 实现分页查询</title>
    <link href="https://jueee.github.io/2020/11/2020-11-04-SpringDataJpa%E5%AE%9E%E7%8E%B0%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2/"/>
    <id>https://jueee.github.io/2020/11/2020-11-04-SpringDataJpa%E5%AE%9E%E7%8E%B0%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2/</id>
    <published>2020-11-04T00:00:00.000Z</published>
    <updated>2020-11-04T08:21:17.596Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Spring-Data-Jpa"><a href="#Spring-Data-Jpa" class="headerlink" title="Spring Data Jpa"></a>Spring Data Jpa</h3><h4 id="引入-Jar"><a href="#引入-Jar" class="headerlink" title="引入 Jar"></a>引入 Jar</h4><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-data-jpa<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></code></pre><a id="more"></a><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><p>SpringBoot 配置文件 <code>application.yml</code>：</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/vuedb<span class="token punctuation">?</span>useUnicode=true<span class="token important">&amp;characterEncoding=UTF-8&amp;serverTimezone=Asia/Shanghai</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> jue    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver  <span class="token key atrule">jpa</span><span class="token punctuation">:</span>    <span class="token key atrule">show-sql</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 日志打印 SQL</span>    <span class="token key atrule">properties</span><span class="token punctuation">:</span>      <span class="token key atrule">hibernate</span><span class="token punctuation">:</span>        <span class="token key atrule">format_sql</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 格式化日志 SQL</span></code></pre><h3 id="方法一：本地SQL查询"><a href="#方法一：本地SQL查询" class="headerlink" title="方法一：本地SQL查询"></a>方法一：本地 SQL 查询</h3><p>本地 sql 查询，注意表名啥的都用数据库中的名称，适用于特定数据库的查询。</p><p>缺点：无法识别参数为空的情况。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BookDAO</span> <span class="token keyword">extends</span> <span class="token class-name">JpaRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"SELECT * FROM Book WHERE name like %:name% and author like %:author%"</span><span class="token punctuation">,</span>            countQuery <span class="token operator">=</span> <span class="token string">"SELECT count(*) FROM Book WHERE name like %:name% and author like %:author%"</span><span class="token punctuation">,</span>            nativeQuery <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">&gt;</span></span> <span class="token function">findAll1</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"author"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> author<span class="token punctuation">,</span> <span class="token class-name">Pageable</span> pageable<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> <span class="token class-name">BookDAO</span> bookRepository<span class="token punctuation">;</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/findAll/{page}/{size}"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">&gt;</span></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"page"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> page<span class="token punctuation">,</span> <span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"size"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> size<span class="token punctuation">,</span><span class="token class-name">Book</span> book<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">Pageable</span>  request <span class="token operator">=</span> <span class="token class-name">PageRequest</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> bookRepository<span class="token punctuation">.</span><span class="token function">findAll1</span><span class="token punctuation">(</span>book<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>book<span class="token punctuation">.</span><span class="token function">getAuthor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="方法二：分页接口"><a href="#方法二：分页接口" class="headerlink" title="方法二：分页接口"></a>方法二：分页接口</h3><p>jpa 已经实现的分页接口，适用于简单的分页查询。</p><p>缺点，无法增加查询条件。</p><p>接口说明：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PagingAndSortingRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> ID <span class="token keyword">extends</span> <span class="token class-name">Serializable</span><span class="token punctuation">&gt;</span></span>  <span class="token keyword">extends</span> <span class="token class-name">CrudRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> ID<span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>  <span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token class-name">Sort</span> sort<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token class-name">Pageable</span> pageable<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">Accessing</span> the second page of <span class="token class-name">User</span> by a page size of <span class="token number">20</span> you could simply <span class="token keyword">do</span> something like <span class="token keyword">this</span><span class="token operator">:</span><span class="token class-name">PagingAndSortingRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> repository <span class="token operator">=</span> <span class="token comment">// … get access to a bean</span><span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> users <span class="token operator">=</span> repository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PageRequest</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>示例如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> <span class="token class-name">BookDAO</span> bookRepository<span class="token punctuation">;</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/findAll/{page}/{size}"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">&gt;</span></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"page"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> page<span class="token punctuation">,</span> <span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"size"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> size<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">Pageable</span>  request <span class="token operator">=</span> <span class="token class-name">PageRequest</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> bookRepository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="方法三：动态sql查询"><a href="#方法三：动态sql查询" class="headerlink" title="方法三：动态sql查询"></a>方法三：动态 sql 查询</h3><p>扩充 findAll，适用于动态 sql 查询</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BookDAO</span> <span class="token keyword">extends</span> <span class="token class-name">JpaRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">&gt;</span></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token class-name">Specification</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">&gt;</span></span> spec<span class="token punctuation">,</span> <span class="token class-name">Pageable</span> pageable<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> <span class="token class-name">BookDAO</span> bookRepository<span class="token punctuation">;</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/findAll/{page}/{size}"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">&gt;</span></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"page"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> page<span class="token punctuation">,</span> <span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"size"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> size<span class="token punctuation">,</span><span class="token class-name">Book</span> book<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">Specification</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">&gt;</span></span> specification <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Specification</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">Predicate</span> <span class="token function">toPredicate</span><span class="token punctuation">(</span><span class="token class-name">Root</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">&gt;</span></span> root<span class="token punctuation">,</span> <span class="token class-name">CriteriaQuery</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> query<span class="token punctuation">,</span> <span class="token class-name">CriteriaBuilder</span> cb<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Predicate</span><span class="token punctuation">&gt;</span></span> predicates <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//所有的断言</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>book<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//添加断言</span><span class="token class-name">Predicate</span> likeNickName <span class="token operator">=</span> cb<span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">as</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"%"</span><span class="token operator">+</span>book<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"%"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>predicates<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>likeNickName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>book<span class="token punctuation">.</span><span class="token function">getAuthor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//添加断言</span><span class="token class-name">Predicate</span> likeNickName <span class="token operator">=</span> cb<span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"author"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">as</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"%"</span><span class="token operator">+</span>book<span class="token punctuation">.</span><span class="token function">getAuthor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"%"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>predicates<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>likeNickName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> cb<span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span>predicates<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Predicate</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token class-name">Pageable</span>  request <span class="token operator">=</span> <span class="token class-name">PageRequest</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> bookRepository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span>specification<span class="token punctuation">,</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="方法四：动态sql查询"><a href="#方法四：动态sql查询" class="headerlink" title="方法四：动态sql查询"></a>方法四：动态 sql 查询</h3><p>使用 entityManager，适用于动态 sql 查询</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@PersistenceContext</span><span class="token class-name">EntityManager</span> entityManager<span class="token punctuation">;</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/findAll/{page}/{size}"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">&gt;</span></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"page"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> page<span class="token punctuation">,</span> <span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"size"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> size<span class="token punctuation">,</span><span class="token class-name">Book</span> book<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">StringBuilder</span> whereSql <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>book<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>whereSql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" and name like :name "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>params<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"%"</span><span class="token operator">+</span>book<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"%"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>book<span class="token punctuation">.</span><span class="token function">getAuthor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>whereSql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" and author like :author "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>params<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"author"</span><span class="token punctuation">,</span><span class="token string">"%"</span><span class="token operator">+</span>book<span class="token punctuation">.</span><span class="token function">getAuthor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"%"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">StringBuilder</span> countSelectSql <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>countSelectSql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"select count(*) from Book where 1=1 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> countSql <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>countSelectSql<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>whereSql<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Query</span> countQuery <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>entityManager<span class="token punctuation">.</span><span class="token function">createQuery</span><span class="token punctuation">(</span>countSql<span class="token punctuation">,</span><span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setParameters</span><span class="token punctuation">(</span>countQuery<span class="token punctuation">,</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Long</span> count <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">)</span> countQuery<span class="token punctuation">.</span><span class="token function">getSingleResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">StringBuilder</span> selectSql <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>selectSql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"from Book where 1=1 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> querySql <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>selectSql<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>whereSql<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Query</span> query <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>entityManager<span class="token punctuation">.</span><span class="token function">createQuery</span><span class="token punctuation">(</span>querySql<span class="token punctuation">,</span> <span class="token class-name">Book</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setParameters</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">PageRequest</span> pageParam <span class="token operator">=</span> <span class="token class-name">PageRequest</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>query<span class="token punctuation">.</span><span class="token function">setFirstResult</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>pageParam<span class="token punctuation">.</span><span class="token function">getOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>query<span class="token punctuation">.</span><span class="token function">setMaxResults</span><span class="token punctuation">(</span>pageParam<span class="token punctuation">.</span><span class="token function">getPageSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">&gt;</span></span> incomeDailyList <span class="token operator">=</span> query<span class="token punctuation">.</span><span class="token function">getResultList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Pageable</span> pageable <span class="token operator">=</span> <span class="token class-name">PageRequest</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">&gt;</span></span> incomeDailyPage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PageImpl</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>incomeDailyList<span class="token punctuation">,</span> pageable<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> incomeDailyPage<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">setParameters</span><span class="token punctuation">(</span><span class="token class-name">Query</span> query<span class="token punctuation">,</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> params<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> entry<span class="token operator">:</span>params<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>query<span class="token punctuation">.</span><span class="token function">setParameter</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;Spring-Data-Jpa&quot;&gt;&lt;a href=&quot;#Spring-Data-Jpa&quot; class=&quot;headerlink&quot; title=&quot;Spring Data Jpa&quot;&gt;&lt;/a&gt;Spring Data Jpa&lt;/h3&gt;&lt;h4 id=&quot;引入-Jar&quot;&gt;&lt;a href=&quot;#引入-Jar&quot; class=&quot;headerlink&quot; title=&quot;引入 Jar&quot;&gt;&lt;/a&gt;引入 Jar&lt;/h4&gt;&lt;pre class=&quot;language-xml&quot; data-language=&quot;xml&quot;&gt;&lt;code class=&quot;language-xml&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;dependency&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;groupId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;groupId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;artifactId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;spring-boot-starter-data-jpa&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;artifactId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;dependency&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="Java" scheme="https://jueee.github.io/categories/Java/"/>
    
    <category term="JavaJar" scheme="https://jueee.github.io/categories/Java/JavaJar/"/>
    
    
    <category term="Java" scheme="https://jueee.github.io/tags/Java/"/>
    
    <category term="JavaJar" scheme="https://jueee.github.io/tags/JavaJar/"/>
    
  </entry>
  
  <entry>
    <title>基于 Vue 组件库 Element 搭建管理系统</title>
    <link href="https://jueee.github.io/2020/11/2020-11-03-%E5%9F%BA%E4%BA%8EVue%E7%BB%84%E4%BB%B6%E5%BA%93Element%E6%90%AD%E5%BB%BA%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
    <id>https://jueee.github.io/2020/11/2020-11-03-%E5%9F%BA%E4%BA%8EVue%E7%BB%84%E4%BB%B6%E5%BA%93Element%E6%90%AD%E5%BB%BA%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</id>
    <published>2020-11-03T00:00:00.000Z</published>
    <updated>2020-11-04T08:10:27.882Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Element-介绍"><a href="#Element-介绍" class="headerlink" title="Element 介绍"></a>Element 介绍</h3><p>Element，一套为开发者、设计师和产品经理准备的基于 Vue 2.0 的桌面端组件库。</p><p>Element 提供了配套设计资源，帮助你的网站快速成型。</p><p>是由饿了么公司前端团队开源的。</p><ul><li>官网：<span class="exturl" data-url="aHR0cHM6Ly9lbGVtZW50LmVsZW1lLmNuLw==">https://element.eleme.cn/<i class="fa fa-external-link-alt"></i></span></li><li>GitHub：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0VsZW1lRkUvZWxlbWVudC8=">https://github.com/ElemeFE/element/<i class="fa fa-external-link-alt"></i></span></li></ul><a id="more"></a><h3 id="安装-Element"><a href="#安装-Element" class="headerlink" title="安装 Element"></a>安装 Element</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i element-ui -S</code></pre><h3 id="引入-Element"><a href="#引入-Element" class="headerlink" title="引入 Element"></a>引入 Element</h3><p>在 main.js 中写入以下内容：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">import</span> ElementUI <span class="token keyword">from</span> <span class="token string">'element-ui'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'element-ui/lib/theme-chalk/index.css'</span><span class="token punctuation">;</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App.vue'</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>ElementUI<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  <span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token parameter">h</span> <span class="token operator">=&gt;</span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>若报错：</p><p><img src="/images/2020/11/image-20201102153341973.png" alt="image-20201102153341973" loading="lazy"></p><p>原因：缺少匹配规则</p><p>解决办法：在 webpack.config.js 文件中的 module 中增加如下 json</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>   test<span class="token operator">:</span> /\.(eot|svg|ttf|woff|woff2)(\?\S*)?$/<span class="token punctuation">,</span>   loader<span class="token operator">:</span> 'file-loader'<span class="token punctuation">}</span></code></pre><p>如下图所示：</p><p><img src="/images/2020/11/image-20201102153601127.png" alt="image-20201102153601127" loading="lazy"></p><h3 id="Element-警告处理"><a href="#Element-警告处理" class="headerlink" title="Element 警告处理"></a>Element 警告处理</h3><h4 id="explicit-keys"><a href="#explicit-keys" class="headerlink" title="explicit keys"></a>explicit keys</h4><p>Element for 循环报如下异常：</p><blockquote><p>component lists rendered with v-for should have explicit keys</p></blockquote><p>处理方案：加上 <code>:key="index"</code></p><p>v-for 列表渲染时，组件或元素中还要添加一个 :key="xxx"，这里可以看一下 item 有没有唯一标识 id，如果有，可以设置为 :key="item.id"</p><p>如果没有唯一标识，可以考虑 v-for="(item, idx) in items"，然后设置 :key="idx"</p><h3 id="增删改查示例"><a href="#增删改查示例" class="headerlink" title="增删改查示例"></a>增删改查示例</h3><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mini<span class="token punctuation">"</span></span> <span class="token attr-name">:inline</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">:model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>queryMap<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>demo-form-inline<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>图书名<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span> <span class="token attr-name">clearable</span> <span class="token attr-name">@clear</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>search<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>queryMap.name<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>图书名<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-input</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>作者<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span> <span class="token attr-name">clearable</span> <span class="token attr-name">@clear</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>search<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>queryMap.author<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>作者<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-input</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">icon</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>el-icon-search<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>search<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>查询<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>success<span class="token punctuation">"</span></span> <span class="token attr-name">icon</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>el-icon-circle-plus-outline<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>openAdd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>添加<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table</span>                <span class="token attr-name">:data</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tableData<span class="token punctuation">"</span></span>                <span class="token attr-name">border</span><span class="token style-attr language-css"><span class="token attr-name">                <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span> 70%</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span>                     <span class="token attr-name">fixed</span>                    <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span>                    <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>编号<span class="token punctuation">"</span></span>                    <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>150<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span>                    <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span>                    <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>图书名<span class="token punctuation">"</span></span>                    <span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span>                    <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>author<span class="token punctuation">"</span></span>                    <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>作者<span class="token punctuation">"</span></span>                    <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>120<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span>                    <span class="token attr-name">fixed</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span>                    <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>操作<span class="token punctuation">"</span></span>                    <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot-scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>scope<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>edit(scope.row)<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>small<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>修改<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>deleteBook(scope.row)<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>small<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>删除<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-pagination</span>                <span class="token attr-name">background</span>                <span class="token attr-name">layout</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prev, pager, next<span class="token punctuation">"</span></span>                <span class="token attr-name">:page-size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pageSize<span class="token punctuation">"</span></span>                <span class="token attr-name">:total</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>total<span class="token punctuation">"</span></span>                <span class="token attr-name">@current-change</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>page<span class="token punctuation">"</span></span>                <span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-pagination</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-dialog</span>        <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>添加物资去处<span class="token punctuation">"</span></span>        <span class="token attr-name">:visible.sync</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>addDialogVisible<span class="token punctuation">"</span></span>        <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>30%<span class="token punctuation">"</span></span>        <span class="token attr-name">@close</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>closeAddDialog<span class="token punctuation">"</span></span>      <span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form</span>            <span class="token attr-name">:model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>addRuleForm<span class="token punctuation">"</span></span>            <span class="token attr-name">:rules</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>addRules<span class="token punctuation">"</span></span>            <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>addRuleFormRef<span class="token punctuation">"</span></span>            <span class="token attr-name">label-width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100px<span class="token punctuation">"</span></span>            <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>demo-ruleForm<span class="token punctuation">"</span></span>          <span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>图书名称<span class="token punctuation">"</span></span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>addRuleForm.name<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-input</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>作者<span class="token punctuation">"</span></span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>author<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>addRuleForm.author<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-input</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dialog-footer<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>addDialogVisible = false<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>取 消<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>add<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>确 定<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-dialog</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>        methods<span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token function">deleteBook</span><span class="token punctuation">(</span><span class="token parameter">row</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">const</span> _this <span class="token operator">=</span> <span class="token keyword">this</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>$axios<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">'book/deleteById/'</span><span class="token operator">+</span>row<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resp</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    _this<span class="token punctuation">.</span><span class="token function">$alert</span><span class="token punctuation">(</span><span class="token string">'《'</span><span class="token operator">+</span>row<span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">'》删除成功！'</span><span class="token punctuation">,</span> <span class="token string">'消息'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>                        confirmButtonText<span class="token operator">:</span> <span class="token string">'确定'</span><span class="token punctuation">,</span>                        <span class="token function-variable function">callback</span><span class="token operator">:</span> <span class="token parameter">action</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                            window<span class="token punctuation">.</span>location<span class="token punctuation">.</span><span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function">edit</span><span class="token punctuation">(</span><span class="token parameter">row</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                    path<span class="token operator">:</span> <span class="token string">'/update'</span><span class="token punctuation">,</span>                    query<span class="token operator">:</span><span class="token punctuation">{</span>                        id<span class="token operator">:</span>row<span class="token punctuation">.</span>id                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function">page</span><span class="token punctuation">(</span><span class="token parameter">currentPage</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>queryMap<span class="token punctuation">.</span>pageNum <span class="token operator">=</span> currentPage<span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getConsumerList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token comment">//搜索</span>            <span class="token function">search</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">this</span><span class="token punctuation">.</span>queryMap<span class="token punctuation">.</span>pageNum <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>              <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getConsumerList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token keyword">async</span> <span class="token function">getConsumerList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">const</span> _this <span class="token operator">=</span> <span class="token keyword">this</span>              <span class="token keyword">this</span><span class="token punctuation">.</span>$axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'book/findAll/'</span><span class="token operator">+</span><span class="token punctuation">(</span>_this<span class="token punctuation">.</span>queryMap<span class="token punctuation">.</span>pageNum<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'/6'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>                  params<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>queryMap                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resp</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>resp<span class="token punctuation">)</span>                  _this<span class="token punctuation">.</span>tableData <span class="token operator">=</span> resp<span class="token punctuation">.</span>data<span class="token punctuation">.</span>content                  _this<span class="token punctuation">.</span>pageSize <span class="token operator">=</span> resp<span class="token punctuation">.</span>data<span class="token punctuation">.</span>size                  _this<span class="token punctuation">.</span>total <span class="token operator">=</span> resp<span class="token punctuation">.</span>data<span class="token punctuation">.</span>totalElements              <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function">openAdd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">this</span><span class="token punctuation">.</span>addDialogVisible <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token comment">//关闭弹出框</span>            <span class="token function">closeAddDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>addRuleFormRef<span class="token punctuation">.</span><span class="token function">clearValidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">this</span><span class="token punctuation">.</span>addRuleForm <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token comment">//添加</span>            <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>addRuleFormRef<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token parameter">valid</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>valid<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>addRuleForm<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                  <span class="token keyword">const</span> _this <span class="token operator">=</span> <span class="token keyword">this</span>                  <span class="token keyword">this</span><span class="token punctuation">.</span>$axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'book/save'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>addRuleForm<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resp</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                      <span class="token keyword">if</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>data <span class="token operator">==</span> <span class="token string">'success'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                          _this<span class="token punctuation">.</span>addDialogVisible <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                          _this<span class="token punctuation">.</span>$message<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token string">"添加成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                          _this<span class="token punctuation">.</span>addRuleForm <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>                          _this<span class="token punctuation">.</span><span class="token function">getConsumerList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"添加失败:"</span> <span class="token operator">+</span> res<span class="token punctuation">.</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token punctuation">}</span>                  <span class="token punctuation">}</span><span class="token punctuation">)</span>                                <span class="token punctuation">}</span>              <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span>                addDialogVisible<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">//添加弹框是否显示</span>                queryMap<span class="token operator">:</span> <span class="token punctuation">{</span> pageNum<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> pageSize<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">""</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">//查询对象</span>                pageSize<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                total<span class="token operator">:</span> <span class="token number">11</span><span class="token punctuation">,</span>                tableData<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>                    id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                    name<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>                    author<span class="token operator">:</span> <span class="token string">''</span>                <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                addRuleForm<span class="token operator">:</span> <span class="token punctuation">{</span>                    name<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>                    author<span class="token operator">:</span> <span class="token string">''</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                addRules<span class="token operator">:</span> <span class="token punctuation">{</span>                    name<span class="token operator">:</span> <span class="token punctuation">[</span>                        <span class="token punctuation">{</span> required<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> message<span class="token operator">:</span> <span class="token string">'图书名称不能为空'</span><span class="token punctuation">,</span> trigger<span class="token operator">:</span> <span class="token string">'blur'</span> <span class="token punctuation">}</span>                    <span class="token punctuation">]</span><span class="token punctuation">,</span>                    author<span class="token operator">:</span><span class="token punctuation">[</span>                        <span class="token punctuation">{</span> required<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> message<span class="token operator">:</span> <span class="token string">'作者不能为空'</span><span class="token punctuation">,</span> trigger<span class="token operator">:</span> <span class="token string">'blur'</span> <span class="token punctuation">}</span>                    <span class="token punctuation">]</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getConsumerList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></code></pre><p>效果如下：</p><p><img src="/images/2020/11/image-20201104161014813.png" alt="image-20201104161014813" loading="lazy"></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;Element-介绍&quot;&gt;&lt;a href=&quot;#Element-介绍&quot; class=&quot;headerlink&quot; title=&quot;Element 介绍&quot;&gt;&lt;/a&gt;Element 介绍&lt;/h3&gt;&lt;p&gt;Element，一套为开发者、设计师和产品经理准备的基于 Vue 2.0 的桌面端组件库。&lt;/p&gt;
&lt;p&gt;Element 提供了配套设计资源，帮助你的网站快速成型。&lt;/p&gt;
&lt;p&gt;是由饿了么公司前端团队开源的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;官网：&lt;a href=&quot;https://element.eleme.cn/&quot;&gt;https://element.eleme.cn/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;GitHub：&lt;a href=&quot;https://github.com/ElemeFE/element/&quot;&gt;https://github.com/ElemeFE/element/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Vue" scheme="https://jueee.github.io/categories/Vue/"/>
    
    
    <category term="Vue" scheme="https://jueee.github.io/tags/Vue/"/>
    
    <category term="Element" scheme="https://jueee.github.io/tags/Element/"/>
    
  </entry>
  
</feed>
