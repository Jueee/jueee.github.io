<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小决的专栏</title>
  
  <subtitle>进一寸有一寸的欢喜</subtitle>
  <link href="https://jueee.github.io/atom.xml" rel="self"/>
  
  <link href="https://jueee.github.io/"/>
  <updated>2022-06-30T09:49:22.899Z</updated>
  <id>https://jueee.github.io/</id>
  
  <author>
    <name>小决</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用 curl 命令分析请求的耗时情况</title>
    <link href="https://jueee.github.io/2022/06/2022-06-23-%E4%BD%BF%E7%94%A8curl%E5%91%BD%E4%BB%A4%E5%88%86%E6%9E%90%E8%AF%B7%E6%B1%82%E7%9A%84%E8%80%97%E6%97%B6%E6%83%85%E5%86%B5/"/>
    <id>https://jueee.github.io/2022/06/2022-06-23-%E4%BD%BF%E7%94%A8curl%E5%91%BD%E4%BB%A4%E5%88%86%E6%9E%90%E8%AF%B7%E6%B1%82%E7%9A%84%E8%80%97%E6%97%B6%E6%83%85%E5%86%B5/</id>
    <published>2022-06-23T00:00:00.000Z</published>
    <updated>2022-06-30T09:49:22.899Z</updated>
    
    <content type="html"><![CDATA[<p>最近工作中遇到一个问题，某个请求的响应特别慢，因此我就希望有一种方法能够分析到底请求的哪一步耗时比较长，好进一步找到问题的原因。</p><p>在网络上搜索了一下，发现了一个非常好用的方法，<code>curl</code> 命令就能帮助分析请求的各个部分耗时情况。</p><h3 id="curl-参数"><a href="#curl-参数" class="headerlink" title="curl 参数"></a>curl 参数</h3><p>curl 命令提供了 -w 参数，这个参数在 manpage 是这样解释的：</p><pre class="language-none"><code class="language-none">-w, --write-out &lt;format&gt;              Make curl display information on stdout after a completed transfer. The format is a string that may contain plain text mixed with any number of variables. The  format              can  be  specified  as  a literal "string", or you can have curl read the format from a file with "@filename" and to tell curl to read the format from stdin you write              "@-".              The variables present in the output format will be substituted by the value or text that curl thinks fit, as described below. All variables are specified  as  %{vari‐              able_name} and to output a normal % you just write them as %%. You can output a newline by using \n, a carriage return with \r and a tab space with \t.</code></pre><p>它能够按照指定的格式打印某些信息，里面可以使用某些特定的变量，而且支持 \n、\t 和 \r 转义字符。提供的变量很多，比如 status_code、local_port、size_download 等等，这篇文章我们只关注和请求时间有关的变量（以 time_ 开头的变量）。</p><h3 id="试用"><a href="#试用" class="headerlink" title="试用"></a>试用</h3><pre class="language-none"><code class="language-none">$ curl -o /dev/null -s -w "time_connect: %{time_connect}\ntime_starttransfer: %{time_starttransfer}\ntime_nslookup:%{time_namelookup}\ntime_total: %{time_total}\n" "https://www.baidu.com"time_connect: 0.009time_starttransfer: 0.065time_nslookup:0.007time_total: 0.065</code></pre><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p>先往文本文件 curl.txt 写入下面的内容：</p><pre class="language-none"><code class="language-none">   time_namelookup:  %{time_namelookup}\n      time_connect:  %{time_connect}\n   time_appconnect:  %{time_appconnect}\n     time_redirect:  %{time_redirect}\n  time_pretransfer:  %{time_pretransfer}\ntime_starttransfer:  %{time_starttransfer}\n                   ----------\n        time_total:  %{time_total}\n</code></pre><p>每个变量的解释如下：</p><pre class="language-none"><code class="language-none">time_namelookup：DNS 域名解析的时候，就是把 https://baidu.com 转换成 ip 地址的过程time_connect：TCP 连接建立的时间，就是三次握手的时间time_appconnect：SSL/SSH 等上层协议建立连接的时间，比如 connect/handshake 的时间time_redirect：从开始到最后一个请求事务的时间time_pretransfer：从请求开始到响应开始传输的时间time_starttransfer：从请求开始到第一个字节将要传输的时间time_total：这次请求花费的全部时间</code></pre><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>例子：</p><pre class="language-none"><code class="language-none">$ curl -w "@curl.txt" -o /dev/null -s -L  'http://www.baidu.com'time_namelookup:  0.004       time_connect:  0.015    time_appconnect:  0.000      time_redirect:  0.000   time_pretransfer:  0.015 time_starttransfer:  0.027                    ----------         time_total:  0.027</code></pre><p>可以看到这次请求各个步骤的时间都打印出来了，每个数字的单位都是秒（seconds），这样可以分析哪一步比较耗时，方便定位问题。这个命令各个参数的意义：</p><pre class="language-none"><code class="language-none">-w：从文件中读取要打印信息的格式-o /dev/null：把响应的内容丢弃，因为我们这里并不关心它，只关心请求的耗时情况-s：不要打印进度条从这个输出，我们可以算出各个步骤的时间：DNS 查询：4msTCP 连接时间：pretransfter(15) - namelookup(4) = 11ms服务器处理时间：starttransfter(27) - pretransfer(15) = 12ms内容传输时间：total(27) - starttransfer(27) = 0ms</code></pre><h3 id="w-参数详解"><a href="#w-参数详解" class="headerlink" title="-w 参数详解"></a>-w 参数详解</h3><p>以下是 - w 参数对应的一些变量以及对应的解释：</p><ul><li><strong>url_effective</strong> 最终获取的 url 地址，尤其是当你指定给 curl 的地址存在 301 跳转，且通过 - L 继续追踪的情形。</li><li><strong>http_code</strong> http 状态码，如 200 成功，301 转向，404 未找到，500 服务器错误等。(The numerical response code that was found in the last retrieved HTTP (S) or FTP (s) transfer. In 7.18.2 the alias response_code was added to show the same info.)</li><li><strong>http_connect</strong> The numerical code that was found in the last response (from a proxy) to a curl CONNECT request. (Added in 7.12.4)</li><li><strong>time_total</strong> 总时间，按秒计。精确到小数点后三位。 （The total time, in seconds, that the full operation lasted. The time will be displayed with millisecond resolution.）</li><li><strong>time_namelookup</strong> DNS 解析时间，从请求开始到 DNS 解析完毕所用时间。(The time, in seconds, it took from the start until the name resolving was completed.)</li><li><strong>time_connect</strong> 连接时间，从开始到建立 TCP 连接完成所用时间，包括前边 DNS 解析时间，如果需要单纯的得到连接时间，用这个 time_connect 时间减去前边 time_namelookup 时间。以下同理，不再赘述。(The time, in seconds, it took from the start until the TCP connect to the remote host (or proxy) was completed.)</li><li><strong>time_appconnect</strong> 连接建立完成时间，如 SSL/SSH 等建立连接或者完成三次握手时间。(The time, in seconds, it took from the start until the SSL/SSH/etc connect/handshake to the remote host was completed. (Added in 7.19.0))</li><li><strong>time_pretransfer</strong> 从开始到准备传输的时间。(The time, in seconds, it took from the start until the file transfer was just about to begin. This includes all pre-transfer commands and negotiations that are specific to the particular protocol (s) involved.)</li><li><strong>time_redirect</strong> 重定向时间，包括到最后一次传输前的几次重定向的 DNS 解析，连接，预传输，传输时间。(The time, in seconds, it took for all redirection steps include name lookup, connect, pretransfer and transfer before the final transaction was started. time_redirect shows the complete execution time for multiple redirections. (Added in 7.12.3))</li><li><strong>time_starttransfer</strong> 开始传输时间。在发出请求之后，Web 服务器返回数据的第一个字节所用的时间 (The time, in seconds, it took from the start until the first byte was just about to be transferred. This includes time_pretransfer and also the time the server needed to calculate the result.)</li><li><strong>size_download</strong> 下载大小。(The total amount of bytes that were downloaded.)</li><li><strong>size_upload</strong> 上传大小。(The total amount of bytes that were uploaded.)<br>size_header 下载的 header 的大小 (The total amount of bytes of the downloaded headers.)</li><li><strong>size_request</strong> 请求的大小。(The total amount of bytes that were sent in the HTTP request.)</li><li><strong>speed_download</strong> 下载速度，单位 - 字节每秒。(The average download speed that curl measured for the complete download. Bytes per second.)</li><li><strong>speed_upload</strong> 上传速度，单位 - 字节每秒。(The average upload speed that curl measured for the complete upload. Bytes per second.)</li><li><strong>content_type</strong> 就是 content-Type，不用多说了，这是一个访问我博客首页返回的结果示例 (text/html; charset=UTF-8)；(The Content-Type of the requested document, if there was any.)</li><li><strong>num_connects</strong> 最近的的一次传输中创建的连接数目。Number of new connects made in the recent transfer. (Added in 7.12.3)</li><li><strong>num_redirects</strong> 在请求中跳转的次数。Number of redirects that were followed in the request. (Added in 7.12.3)<br>redirect_url When a HTTP request was made without -L to follow redirects, this variable will show the actual URL a redirect would take you to. (Added in 7.18.2)</li><li><strong>ftp_entry_path</strong> 当连接到远程的 ftp 服务器时的初始路径。The initial path libcurl ended up in when logging on to the remote FTP server. (Added in 7.15.4)</li><li><strong>ssl_verify_result</strong> ssl 认证结果，返回 0 表示认证成功。(The result of the SSL peer certificate verification that was requested. 0 means the verification was successful. (Added in 7.19.0))</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近工作中遇到一个问题，某个请求的响应特别慢，因此我就希望有一种方法能够分析到底请求的哪一步耗时比较长，好进一步找到问题的原因。&lt;/p&gt;
&lt;p&gt;在网络上搜索了一下，发现了一个非常好用的方法，&lt;code&gt;curl&lt;/code&gt; 命令就能帮助分析请求的各个部分耗时情况。&lt;/p&gt;</summary>
      
    
    
    
    <category term="Blog" scheme="https://jueee.github.io/categories/Blog/"/>
    
    
    <category term="Blog" scheme="https://jueee.github.io/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>Linux 中安装使用 OpenVPN 客户端</title>
    <link href="https://jueee.github.io/2022/06/2022-06-16-Linux%E4%B8%AD%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8OpenVPN%E5%AE%A2%E6%88%B7%E7%AB%AF/"/>
    <id>https://jueee.github.io/2022/06/2022-06-16-Linux%E4%B8%AD%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8OpenVPN%E5%AE%A2%E6%88%B7%E7%AB%AF/</id>
    <published>2022-06-16T00:00:00.000Z</published>
    <updated>2022-06-30T09:49:22.897Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装-OpenVPN"><a href="#安装-OpenVPN" class="headerlink" title="安装 OpenVPN"></a>安装 OpenVPN</h3><pre class="language-none"><code class="language-none">apt-get install openvpn -y</code></pre><h3 id="使用-OpenVPN"><a href="#使用-OpenVPN" class="headerlink" title="使用 OpenVPN"></a>使用 OpenVPN</h3><pre class="language-none"><code class="language-none">openvpn  --config /etc/openvpn/config/vpn.ovpn --daemon --log-append /var/log/openvpn.log</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;安装-OpenVPN&quot;&gt;&lt;a href=&quot;#安装-OpenVPN&quot; class=&quot;headerlink&quot; title=&quot;安装 OpenVPN&quot;&gt;&lt;/a&gt;安装 OpenVPN&lt;/h3&gt;&lt;pre class=&quot;language-none&quot;&gt;&lt;code class=&quot;l</summary>
      
    
    
    
    <category term="软件" scheme="https://jueee.github.io/categories/%E8%BD%AF%E4%BB%B6/"/>
    
    <category term="Linux" scheme="https://jueee.github.io/categories/%E8%BD%AF%E4%BB%B6/Linux/"/>
    
    
    <category term="Linux" scheme="https://jueee.github.io/tags/Linux/"/>
    
    <category term="软件" scheme="https://jueee.github.io/tags/%E8%BD%AF%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>java 中排序报：Comparison method violates its general contract 异常的解决</title>
    <link href="https://jueee.github.io/2022/06/2022-06-08-Java%E4%B8%AD%E6%8E%92%E5%BA%8F%E6%8A%A5%EF%BC%9AComparison%20method%20violates%20its%20general%20contract%E5%BC%82%E5%B8%B8%E7%9A%84%E8%A7%A3%E5%86%B3/"/>
    <id>https://jueee.github.io/2022/06/2022-06-08-Java%E4%B8%AD%E6%8E%92%E5%BA%8F%E6%8A%A5%EF%BC%9AComparison%20method%20violates%20its%20general%20contract%E5%BC%82%E5%B8%B8%E7%9A%84%E8%A7%A3%E5%86%B3/</id>
    <published>2022-06-08T00:00:00.000Z</published>
    <updated>2022-06-30T09:49:22.895Z</updated>
    
    <content type="html"><![CDATA[<p>使用 <code>Collections.sort</code> 排序时，可能出现如下报错：</p><p><img src="/images/2022/06/image-20220608142210621.png" alt="image-20220608142210621" loading="lazy"></p><h3 id="问题复现"><a href="#问题复现" class="headerlink" title="问题复现"></a>问题复现</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>                   <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> o1<span class="token punctuation">,</span> <span class="token class-name">Integer</span> o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> o1 <span class="token operator">&gt;</span> o2 <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">// 错误的方式</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h3><p>Collections.sort () 在 JDK6 和 JDK7 中实现的底层排序算法变了，在 JDK6 中使用的时 MergeSort 排序，而在 JDK7 中使用的是 TimSort。</p><p>Timsort 结合了归并排序和插入排序。这个算法在实现过程中明确需要：严格的单调递增或者递减来保证算法的稳定性。</p><p><img src="/images/2022/06/image-20220608142704366.png" alt="image-20220608142704366" loading="lazy"></p><ul><li><code>sgn(compare(x, y)) == -sgn(compare(y, x))</code></li><li><code>((compare(x, y)&gt;0) &amp;&amp; (compare(y, z)&gt;0)) implies compare(x, z)&gt;0</code></li><li><code>compare(x, y)==0 implies that sgn(compare(x, z))==sgn(compare(y, z)) for all z</code></li></ul><p>说明：</p><ul><li>自反性：x，y 的比较结果和 y，x 的比较结果相反。</li><li>传递性：x&gt;y,y&gt;z, 则 x&gt;z。</li><li>对称性：x=y, 则 x,z 比较结果和 y，z 比较结果相同。（也叫可逆比较）</li></ul><h3 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h3><h4 id="方式一：使用-compareTo"><a href="#方式一：使用-compareTo" class="headerlink" title="方式一：使用 compareTo"></a>方式一：使用 compareTo</h4><p>官方推荐使用该方式。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> o1<span class="token punctuation">,</span> <span class="token class-name">Integer</span> o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> o1<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>o2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="方式二：判断相等"><a href="#方式二：判断相等" class="headerlink" title="方式二：判断相等"></a>方式二：判断相等</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> o1<span class="token punctuation">,</span> <span class="token class-name">Integer</span> o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o1 <span class="token operator">&gt;</span> o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>o1 <span class="token operator">&lt;</span> o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="方式三：增加-JVM-参数"><a href="#方式三：增加-JVM-参数" class="headerlink" title="方式三：增加 JVM 参数"></a>方式三：增加 JVM 参数</h4><p>给 jvm 添加启动参数：</p><pre class="language-none"><code class="language-none">-Djava.util.Arrays.useLegacyMergeSort=true</code></pre><p>但是不建议使用这种方式。这种的弊端在于会导致无法使用 jdk1.7 里面的新特性，对后期的升级是有不可知的影响的。</p><h3 id="需要注意"><a href="#需要注意" class="headerlink" title="需要注意"></a>需要注意</h3><p>并不一定你的集合中存在相等的元素，并且比较函数不符合上面的严谨定义，就一定会稳定浮现此异常。</p><p>实际上我们在生产环境出现此异常的概率很小，毕竟 java 并不会蠢到先去把整个数组都校验一遍，实际上它是在排序的过程中发现你不符合此条件的。</p><p>所以有可能某种集合顺序让你刚好绕过了此判断。</p><p>一个会引发该异常的 Case：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>                   <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;使用 &lt;code&gt;Collections.sort&lt;/code&gt; 排序时，可能出现如下报错：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2022/06/image-20220608142210621.png&quot; alt=&quot;image-20220608142210621</summary>
      
    
    
    
    <category term="Java" scheme="https://jueee.github.io/categories/Java/"/>
    
    <category term="JavaError" scheme="https://jueee.github.io/categories/Java/JavaError/"/>
    
    
    <category term="Java" scheme="https://jueee.github.io/tags/Java/"/>
    
    <category term="JavaError" scheme="https://jueee.github.io/tags/JavaError/"/>
    
  </entry>
  
  <entry>
    <title>使用 Maven 构建多模块项目及问题处理</title>
    <link href="https://jueee.github.io/2022/05/2022-05-27-%E4%BD%BF%E7%94%A8Maven%E6%9E%84%E5%BB%BA%E5%A4%9A%E6%A8%A1%E5%9D%97%E9%A1%B9%E7%9B%AE%E5%8F%8A%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86/"/>
    <id>https://jueee.github.io/2022/05/2022-05-27-%E4%BD%BF%E7%94%A8Maven%E6%9E%84%E5%BB%BA%E5%A4%9A%E6%A8%A1%E5%9D%97%E9%A1%B9%E7%9B%AE%E5%8F%8A%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86/</id>
    <published>2022-05-27T00:00:00.000Z</published>
    <updated>2022-06-08T06:37:04.322Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题处理"><a href="#问题处理" class="headerlink" title="问题处理"></a>问题处理</h3><h4 id="循环依赖"><a href="#循环依赖" class="headerlink" title="循环依赖"></a>循环依赖</h4><p>构建时报错：</p><pre class="language-none"><code class="language-none">[exec] [ERROR] The projects in the reactor contain a cyclic reference: Edge between 'Vertex{label='com.xxx.xxx:aaa:0.0.49'}' and 'Vertex{label='com.xxx.xxx:bbb:0.0.49'}' introduces to cycle in the graph com.xxx.xxx:bbb:0.0.49 --&gt; com.com.xxx.xxx:aaa:0.0.49 --&gt; com.xxx.xxx:bbb:0.0.49 -&gt; [Help 1]</code></pre><p>解决方案：</p><p>夫工程的依赖 <strong>dependencies</strong> 加上 <strong>dependencyManagement</strong>&nbsp;标签。</p><pre class="language-none"><code class="language-none">&lt;dependencyManagement&gt;    &lt;dependencies&gt;    &lt;/dependencies&gt;&lt;/dependencyManagement&gt;</code></pre><p>Maven 通过 dependencyManagement 元素来管理 jar 包的版本，让⼦项⽬中引⽤⼀个依赖，⽽不⽤显⽰的列出版本号。Maven 会沿着⽗⼦层次向上⾛，直到找到⼀个拥有 dependencyManagement 元素的项⽬，然后它就会使⽤在<br>这个 dependencyManagement 元素中指定的版本号。<br>这样做的好处：统⼀管理项⽬的版本号，确保应⽤的各个项⽬的依赖和版本⼀致，才能保证测试的和发布的是相同的成果，因此，在顶层<br>pom 中定义共同的依赖关系。同时可以避免在每个使⽤的⼦项⽬中都声明⼀个版本号，这样想升级或者切换到另⼀个版本时，只需要在⽗类<br>容器⾥更新，不需要任何⼀个⼦项⽬的修改；如果某个⼦项⽬需要另外⼀个版本号时，只需要在 dependencies 中声明⼀个版本号即可。⼦<br>类就会使⽤⼦类声明的版本号，不继承于⽗类版本号。</p><p>在最顶级的项⽬中才需要配置 <dependencymanagement>标签，其⼦项⽬在<parent>标签中继承该顶级项⽬的 pom.xml ⽂件即可。</parent></dependencymanagement></p><p>继承后⼦项⽬中的 jar 包的版本就跟顶级项⽬ pom.xml ⽂件中规定的⼀致。</p><p>dependencies 和 dependencyManagement 的区别在于：</p><ul><li>前者，即使在⼦项⽬中不写该依赖项，那么⼦项⽬仍然会从⽗项⽬中继承该依赖项。</li><li>后者，如果在⼦项⽬中不写该依赖项，那么⼦项⽬中是不会从⽗项⽬继承该依赖项的；只有在⼦项⽬中写了该依赖项，才会从⽗项⽬中继承该项，并且 version 和 scope 都读取⾃ ⽗ pom。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;问题处理&quot;&gt;&lt;a href=&quot;#问题处理&quot; class=&quot;headerlink&quot; title=&quot;问题处理&quot;&gt;&lt;/a&gt;问题处理&lt;/h3&gt;&lt;h4 id=&quot;循环依赖&quot;&gt;&lt;a href=&quot;#循环依赖&quot; class=&quot;headerlink&quot; title=&quot;循环依赖&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="Blog" scheme="https://jueee.github.io/categories/Blog/"/>
    
    
    <category term="Blog" scheme="https://jueee.github.io/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>dubbo 多注册中心的配置和使用</title>
    <link href="https://jueee.github.io/2022/05/2022-05-11-dubbo%E5%A4%9A%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E7%9A%84%E9%85%8D%E7%BD%AE%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
    <id>https://jueee.github.io/2022/05/2022-05-11-dubbo%E5%A4%9A%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E7%9A%84%E9%85%8D%E7%BD%AE%E5%92%8C%E4%BD%BF%E7%94%A8/</id>
    <published>2022-05-11T00:00:00.000Z</published>
    <updated>2022-06-08T06:37:04.275Z</updated>
    
    <content type="html"><![CDATA[<p>Dubbo 支持同一服务向多注册中心同时注册，或者不同服务分别注册到不同的注册中心上去，甚至可以同时引用注册在不同注册中心上的同名服务。另外，注册中心是支持自定义扩展的。</p><p>本文介绍 Dubbo 多注册中心的配置和使用。</p><a id="more"></a><h3 id="XML-方式配置"><a href="#XML-方式配置" class="headerlink" title="XML 方式配置"></a>XML 方式配置</h3><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>dubbo</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://dubbo.apache.org/schema/dubbo<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>application</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>demo<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>registry</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>zk1<span class="token punctuation">"</span></span> <span class="token attr-name">protocol</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>zookeeper<span class="token punctuation">"</span></span> <span class="token attr-name">address</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>127.X.X.11:2181,127.X.X.12:2181,127.X.X.13:2181<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>registry</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>zk2<span class="token punctuation">"</span></span> <span class="token attr-name">protocol</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>zookeeper<span class="token punctuation">"</span></span>                    <span class="token attr-name">address</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>zookeeper://127.X.X.21:2181?backup=127.X.X.22:2181,127.X.X.23:2181<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>protocol</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dubbo<span class="token punctuation">"</span></span> <span class="token attr-name">port</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>21992<span class="token punctuation">"</span></span> <span class="token attr-name">threads</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>200<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>service</span> <span class="token attr-name">protocol</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dubbo<span class="token punctuation">"</span></span> <span class="token attr-name">interface</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.test.api.TestService<span class="token punctuation">"</span></span>                   <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>testService<span class="token punctuation">"</span></span> <span class="token attr-name">registry</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>zk1,zk2<span class="token punctuation">"</span></span> <span class="token attr-name">timeout</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2000<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>testService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.test.api.TestServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span></code></pre><h3 id="Properties-方式配置"><a href="#Properties-方式配置" class="headerlink" title="Properties 方式配置"></a>Properties 方式配置</h3><pre class="language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">dubbo.scan.basePackages</span>  <span class="token punctuation">=</span> <span class="token attr-value">com.test.api</span><span class="token attr-name">dubbo.application.id</span> <span class="token punctuation">=</span> <span class="token attr-value">demo</span><span class="token attr-name">dubbo.application.name</span> <span class="token punctuation">=</span> <span class="token attr-value">demo</span><span class="token attr-name">dubbo.application.qos-enable</span><span class="token punctuation">=</span><span class="token attr-value">false</span><span class="token attr-name">dubbo.application.qos-port</span><span class="token punctuation">=</span><span class="token attr-value">10882</span><span class="token attr-name">dubbo.application.logger</span> <span class="token punctuation">=</span> <span class="token attr-value">slf4j</span><span class="token attr-name">dubbo.application.dump.directory</span><span class="token punctuation">=</span><span class="token attr-value">logs</span><span class="token attr-name">dubbo.registries.zk1.address</span><span class="token punctuation">=</span><span class="token attr-value">127.X.X.11:2181,127.X.X.12:2181,127.X.X.13:2181</span><span class="token attr-name">dubbo.registries.zk2.address</span><span class="token punctuation">=</span><span class="token attr-value">zookeeper://127.X.X.21:2181?backup=127.X.X.22:2181,127.X.X.23:2181</span><span class="token attr-name">dubbo.registry.client</span> <span class="token punctuation">=</span> <span class="token attr-value">curator</span><span class="token attr-name">dubbo.registry.wait</span> <span class="token punctuation">=</span> <span class="token attr-value">10000</span><span class="token attr-name">dubbo.protocol.id</span> <span class="token punctuation">=</span> <span class="token attr-value">dubbo</span><span class="token attr-name">dubbo.protocol.name</span> <span class="token punctuation">=</span> <span class="token attr-value">dubbo</span><span class="token attr-name">dubbo.protocol.port</span> <span class="token punctuation">=</span> <span class="token attr-value">-1</span><span class="token attr-name">dubbo.provider.threadpool</span> <span class="token punctuation">=</span> <span class="token attr-value">fixed</span><span class="token attr-name">dubbo.provider.threads</span> <span class="token punctuation">=</span> <span class="token attr-value">800</span><span class="token attr-name">dubbo.provider.accepts</span> <span class="token punctuation">=</span> <span class="token attr-value">1000</span><span class="token attr-name">dubbo.provider.connections</span> <span class="token punctuation">=</span> <span class="token attr-value">10</span><span class="token attr-name">dubbo.metadata-report.cycle-report</span><span class="token punctuation">=</span><span class="token attr-value">false</span><span class="token attr-name">dubbo.provider.filter</span><span class="token punctuation">=</span><span class="token attr-value">logTimeout</span><span class="token attr-name">demo.version</span> <span class="token punctuation">=</span> <span class="token attr-value">1.0.0</span></code></pre><h4 id="提供者配置使用"><a href="#提供者配置使用" class="headerlink" title="提供者配置使用"></a>提供者配置使用</h4><p>同时将服务注册到多个注册中心：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">DubboService</span><span class="token punctuation">;</span><span class="token annotation punctuation">@DubboService</span><span class="token punctuation">(</span>version <span class="token operator">=</span> <span class="token string">"${demo.version}"</span><span class="token punctuation">,</span> application <span class="token operator">=</span> <span class="token string">"${dubbo.application.id}"</span><span class="token punctuation">,</span> protocol <span class="token operator">=</span> <span class="token string">"${dubbo.protocol.id}"</span><span class="token punctuation">,</span> registry <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"zk1"</span><span class="token punctuation">,</span><span class="token string">"zk2"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> delay <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">TestService</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h4 id="消费者配置使用"><a href="#消费者配置使用" class="headerlink" title="消费者配置使用"></a>消费者配置使用</h4><p>客户端调用不同注册中心的同一接口：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">DubboReference</span><span class="token punctuation">;</span><span class="token annotation punctuation">@DubboReference</span><span class="token punctuation">(</span>version <span class="token operator">=</span> <span class="token string">"${demo.version}"</span><span class="token punctuation">,</span> application <span class="token operator">=</span> <span class="token string">"${dubbo.application.id}"</span><span class="token punctuation">,</span> registry <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"zk1"</span><span class="token punctuation">,</span><span class="token string">"zk2"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> timeout <span class="token operator">=</span> <span class="token number">100000</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token class-name">TestServiceImpl</span> testService<span class="token punctuation">;</span></code></pre><h3 id="Yaml-方式配置"><a href="#Yaml-方式配置" class="headerlink" title="Yaml 方式配置"></a>Yaml 方式配置</h3><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">dubbo</span><span class="token punctuation">:</span>  <span class="token key atrule">config</span><span class="token punctuation">:</span>    <span class="token key atrule">multiple</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">protocols</span><span class="token punctuation">:</span>    <span class="token key atrule">thpro</span><span class="token punctuation">:</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> dubbo      <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">-1</span>    <span class="token key atrule">zwpro</span><span class="token punctuation">:</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> dubbo      <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">-1</span>  <span class="token key atrule">provider</span><span class="token punctuation">:</span>    <span class="token key atrule">accepts</span><span class="token punctuation">:</span> <span class="token number">1500</span>    <span class="token key atrule">connections</span><span class="token punctuation">:</span> <span class="token number">10</span>    <span class="token key atrule">threadpool</span><span class="token punctuation">:</span> fixed    <span class="token key atrule">threads</span><span class="token punctuation">:</span> <span class="token number">1000</span>  <span class="token key atrule">registries</span><span class="token punctuation">:</span>    <span class="token key atrule">zk1</span><span class="token punctuation">:</span>      <span class="token key atrule">address</span><span class="token punctuation">:</span> 127.X.X.11<span class="token punctuation">:</span><span class="token number">2181</span><span class="token punctuation">,</span>127.X.X.12<span class="token punctuation">:</span><span class="token number">2181</span><span class="token punctuation">,</span>127.X.X.13<span class="token punctuation">:</span><span class="token number">2181</span>      <span class="token key atrule">client</span><span class="token punctuation">:</span> zkclient    <span class="token key atrule">zk2</span><span class="token punctuation">:</span>      <span class="token key atrule">address</span><span class="token punctuation">:</span> zookeeper<span class="token punctuation">:</span>//127.X.X.21<span class="token punctuation">:</span>2181<span class="token punctuation">?</span>backup=127.X.X.22<span class="token punctuation">:</span><span class="token number">2181</span><span class="token punctuation">,</span>127.X.X.23<span class="token punctuation">:</span><span class="token number">2181</span>      <span class="token key atrule">client</span><span class="token punctuation">:</span> zkclient    <span class="token key atrule">zk3</span><span class="token punctuation">:</span>      <span class="token key atrule">address</span><span class="token punctuation">:</span> zookeeper<span class="token punctuation">:</span>//127.X.X.31<span class="token punctuation">:</span>2181<span class="token punctuation">?</span>backup=127.X.X.32<span class="token punctuation">:</span><span class="token number">2181</span><span class="token punctuation">,</span>127.X.X.33<span class="token punctuation">:</span><span class="token number">2181</span>      <span class="token key atrule">client</span><span class="token punctuation">:</span> zkclient  <span class="token key atrule">scan</span><span class="token punctuation">:</span>    <span class="token key atrule">basePackages</span><span class="token punctuation">:</span> com.test.api      <span class="token key atrule">demo</span><span class="token punctuation">:</span>  <span class="token key atrule">version</span><span class="token punctuation">:</span> 1.0.0      </code></pre><h4 id="配置使用"><a href="#配置使用" class="headerlink" title="配置使用"></a>配置使用</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Reference</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Service</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span>version <span class="token operator">=</span> <span class="token string">"${demo.version}"</span><span class="token punctuation">,</span> application <span class="token operator">=</span> <span class="token string">"zw"</span><span class="token punctuation">,</span> protocol <span class="token operator">=</span> <span class="token string">"zwpro"</span><span class="token punctuation">,</span> registry <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"zk1"</span><span class="token punctuation">,</span> <span class="token string">"zk2"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        filter <span class="token operator">=</span> <span class="token string">"tracing"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">TestService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Reference</span><span class="token punctuation">(</span>application <span class="token operator">=</span> <span class="token string">"th"</span><span class="token punctuation">,</span> registry <span class="token operator">=</span> <span class="token string">"zk1"</span><span class="token punctuation">,</span> connections <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> retries <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">HbaseDataServer</span> hbaseDataServer<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">DroolsChecker</span> droolsChecker<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;Dubbo 支持同一服务向多注册中心同时注册，或者不同服务分别注册到不同的注册中心上去，甚至可以同时引用注册在不同注册中心上的同名服务。另外，注册中心是支持自定义扩展的。&lt;/p&gt;
&lt;p&gt;本文介绍 Dubbo 多注册中心的配置和使用。&lt;/p&gt;</summary>
    
    
    
    <category term="Apache" scheme="https://jueee.github.io/categories/Apache/"/>
    
    <category term="Dubbo" scheme="https://jueee.github.io/categories/Apache/Dubbo/"/>
    
    
    <category term="Apache" scheme="https://jueee.github.io/tags/Apache/"/>
    
    <category term="Dubbo" scheme="https://jueee.github.io/tags/Dubbo/"/>
    
  </entry>
  
  <entry>
    <title>Go 语言开发环境配置</title>
    <link href="https://jueee.github.io/2022/05/2022-05-09-Go%20%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <id>https://jueee.github.io/2022/05/2022-05-09-Go%20%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</id>
    <published>2022-05-09T00:00:00.000Z</published>
    <updated>2022-06-08T06:37:04.258Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍 Go 语言的开发环境配置和基本使用。</p><a id="more"></a><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><blockquote><p><span class="exturl" data-url="aHR0cHM6Ly9nby5kZXYvZGwv">https://go.dev/dl/<i class="fa fa-external-link-alt"></i></span></p></blockquote><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>Windows 环境下载  <strong>.msi</strong> 文件，并一路 Next 安装即可。</p><p>默认情况下 <strong>.msi</strong> 文件会安装在 <strong>C:\Program Files\Go</strong> 目录下。并将 <strong>C:\Program Files\Go\bin</strong> 目录添加到 <strong>Path</strong> 环境变量中。</p><h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><h5 id="查看版本"><a href="#查看版本" class="headerlink" title="查看版本"></a>查看版本</h5><pre class="language-none"><code class="language-none">$ go versiongo version go1.18.1 windows/amd64</code></pre><h5 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h5><p>新建 <strong>test.go</strong> 文件夹：</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Hello, World!"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>运行：</p><pre class="language-none"><code class="language-none">$ go run test.goHello, World!</code></pre><h4 id="环境变量配置"><a href="#环境变量配置" class="headerlink" title="环境变量配置"></a>环境变量配置</h4><pre class="language-none"><code class="language-none">go env -w GOPROXY=https://goproxy.cn,directgo env -w GO111MODULE=on</code></pre><h3 id="相关解释"><a href="#相关解释" class="headerlink" title="相关解释"></a>相关解释</h3><h4 id="go-module介绍"><a href="#go-module介绍" class="headerlink" title="go module介绍"></a>go module 介绍</h4><ul><li>go module 是 go 官方自带的 go 依赖管理库，在 1.13 版本正式推荐使用</li><li> go module 可以将某个项目 (文件夹) 下的所有依赖整理成一个 go.mod 文件，里面写入了依赖的版本等 使用 go module 之后我们可不用将代码放置在 src 下<br>使用 </li><li>go module 管理依赖后会在项目根目录下生成两个文件 go.mod（会记录当前项目的所依赖）和 go.sum（记录每个依赖库的版本和哈希值）</li></ul><h4 id="GO111MODULE"><a href="#GO111MODULE" class="headerlink" title="GO111MODULE"></a>GO111MODULE</h4><p>GO111MODULE 是 go modules 功能的开关</p><ul><li>GO111MODULE=off，无模块支持，go 命令行将不会支持 module 功能，寻找依赖包的方式将会沿用旧版本那种通过 vendor 目录或者 GOPATH 模式来查找。</li><li>GO111MODULE=on，模块支持，go 命令行会使用 modules，而一点也不会去 GOPATH 目录下查找。</li><li>GO111MODULE=auto，默认值，go 命令行将会根据当前目录来决定是否启用 module 功能。这种情况下可以分为两种情形：<ul><li>当前目录在 GOPATH/src 之外且该目录包含 go.mod 文件，开启模块支持。</li><li>当前文件在包含 go.mod 文件的目录下面。</li></ul></li></ul><h3 id="Go-mod使用方法"><a href="#Go-mod使用方法" class="headerlink" title="Go mod使用方法"></a>Go mod 使用方法</h3><pre class="language-none"><code class="language-none">//初始化模块：Go mod init &lt;项目模块名称&gt;//依赖关系处理，根据go.mod文件Go mod tidy//将依赖包复制到项目的vendor目录Go mod vendor//显示依赖关系Go list -m all//显示详细依赖关系Go list -m -json all//下载依赖Go mod download [path@version]</code></pre><h3 id="问题处理"><a href="#问题处理" class="headerlink" title="问题处理"></a>问题处理</h3><p>go: go.mod file not found in current directory or any parent directory</p><p>配置环境变量，开启 go modules 功能：</p><pre class="language-none"><code class="language-none">go env -w GO111MODULE=on</code></pre><p>在该项目目录下，初始化 Go moudle，运行下面命令</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">go</span> mod init xxx <span class="token comment">//xxx代表文件夹名</span></code></pre><p><img src="/images/2022/05/image-20220509170928322.png" alt="image-20220509170928322" loading="lazy"></p><h3 id="VSCode-开发环境"><a href="#VSCode-开发环境" class="headerlink" title="VSCode 开发环境"></a>VSCode 开发环境</h3><p>安装插件：</p><p><img src="/images/2022/05/image-20220509164952227.png" alt="image-20220509164952227" loading="lazy"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文介绍 Go 语言的开发环境配置和基本使用。&lt;/p&gt;</summary>
    
    
    
    <category term="Go" scheme="https://jueee.github.io/categories/Go/"/>
    
    
    <category term="Go" scheme="https://jueee.github.io/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>IDEA 打包项目为 Jar 包</title>
    <link href="https://jueee.github.io/2022/04/2022-04-29-IDEA%20%E6%89%93%E5%8C%85%E9%A1%B9%E7%9B%AE%E4%B8%BAJar%E5%8C%85/"/>
    <id>https://jueee.github.io/2022/04/2022-04-29-IDEA%20%E6%89%93%E5%8C%85%E9%A1%B9%E7%9B%AE%E4%B8%BAJar%E5%8C%85/</id>
    <published>2022-04-29T00:00:00.000Z</published>
    <updated>2022-05-06T03:19:54.502Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍通过 IDEA 打包项目为 Jar 包的方法。</p><a id="more"></a><h3 id="打包步骤"><a href="#打包步骤" class="headerlink" title="打包步骤"></a>打包步骤</h3><p>打开 Project Structure（快捷键 ctrl+alt+shift+s），进行如下操作：</p><ol><li><p>选择 Artifacts, 点击 + 号，新建一个空的 jar 包文件</p><p><img src="/images/2022/04/image-20220428170100441.png" alt="image-20220428170100441" loading="lazy"></p></li><li><p>如果有主类，在弹出框中配置 Main Class 信息。</p><p><img src="/images/2022/04/image-20220428170827039.png" alt="image-20220428170827039" loading="lazy"></p></li><li><p>给 Jar 文件命名（英文），并把你要打包成 Jar 包的工程，拖到刚命名的 Jar 包上。</p><p><img src="/images/2022/04/image-20220428171136197.png" alt="image-20220428171136197" loading="lazy"></p></li><li><p>由于刚才我们更改了 Artifacts 的设置，现在我们需要 Build Artifacts。点击 Buid-Buid Artifacts。</p><p><img src="/images/2022/04/image-20220428171302234.png" alt="image-20220428171302234" loading="lazy"></p></li><li><p>选择对应的打包项即可。</p><p><img src="/images/2022/04/image-20220428171337900.png" alt="image-20220428171337900" loading="lazy"></p></li><li><p>回到前面的 Project Structure 中找到导出的 jar 包的路径，然后在我们的电脑对应的路径下，就可以找到我们导出的 jar 包了。</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文介绍通过 IDEA 打包项目为 Jar 包的方法。&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://jueee.github.io/categories/Java/"/>
    
    <category term="JavaJar" scheme="https://jueee.github.io/categories/Java/JavaJar/"/>
    
    
    <category term="Java" scheme="https://jueee.github.io/tags/Java/"/>
    
    <category term="JavaJar" scheme="https://jueee.github.io/tags/JavaJar/"/>
    
  </entry>
  
  <entry>
    <title>IDEA 反编译出整个 Jar 包源码</title>
    <link href="https://jueee.github.io/2022/04/2022-04-28-IDEA%20%E5%8F%8D%E7%BC%96%E8%AF%91%E5%87%BA%E6%95%B4%E4%B8%AAJar%E5%8C%85%E6%BA%90%E7%A0%81/"/>
    <id>https://jueee.github.io/2022/04/2022-04-28-IDEA%20%E5%8F%8D%E7%BC%96%E8%AF%91%E5%87%BA%E6%95%B4%E4%B8%AAJar%E5%8C%85%E6%BA%90%E7%A0%81/</id>
    <published>2022-04-28T00:00:00.000Z</published>
    <updated>2022-05-06T03:19:54.493Z</updated>
    
    <content type="html"><![CDATA[<p>对一些历史遗留的老项目，在只有 Jar 包、而缺少对应源码的情况下，我们需要通过反编译的方式，来获取 Java 源代码。</p><p>下面介绍 InteliJ IDEA 反编译 Jar 包的方法。</p><a id="more"></a><h3 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h3><p>保证您的 idea 配置有如下插件 Java Bytecode Decomplier。File–&gt;Settings–&gt;Plugins，在搜索框内搜出后勾选，并应用。</p><p><img src="/images/2022/04/image-20220428164232075.png" alt="image-20220428164232075" loading="lazy"></p><h3 id="反编译"><a href="#反编译" class="headerlink" title="反编译"></a>反编译</h3><p>在您需要编译的 jar 包的目录下，打开命令行界面，输入以下命令：</p><pre class="language-none"><code class="language-none">java -cp "C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2020.3.3\plugins\java-decompiler\lib\java-decompiler.jar" org.jetbrains.java.decompiler.main.decompiler.ConsoleDecompiler -dgs=true dbTool.jar mysrc</code></pre><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><h4 id="JDK-版本不一致"><a href="#JDK-版本不一致" class="headerlink" title="JDK 版本不一致"></a>JDK 版本不一致</h4><p>可能出现报错如下：</p><pre class="language-none"><code class="language-none">Error: A JNI error has occurred, please check your installation and try againException in thread "main" java.lang.UnsupportedClassVersionError: org/jetbrains/java/decompiler/main/decompiler/ConsoleDecompiler has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0        at java.lang.ClassLoader.defineClass1(Native Method)        at java.lang.ClassLoader.defineClass(ClassLoader.java:763)        at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)        at java.net.URLClassLoader.defineClass(URLClassLoader.java:468)        at java.net.URLClassLoader.access$100(URLClassLoader.java:74)        at java.net.URLClassLoader$1.run(URLClassLoader.java:369)        at java.net.URLClassLoader$1.run(URLClassLoader.java:363)        at java.security.AccessController.doPrivileged(Native Method)        at java.net.URLClassLoader.findClass(URLClassLoader.java:362)        at java.lang.ClassLoader.loadClass(ClassLoader.java:424)        at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:349)        at java.lang.ClassLoader.loadClass(ClassLoader.java:357)        at sun.launcher.LauncherHelper.checkAndLoadMain(LauncherHelper.java:495)</code></pre><p>这是由于本地默认的 Java 版本与 InteliJ IDEA 插件版本的 JDK 不一致导致的，使用对应的 JDK 版本即可。</p><p>如下所示：</p><pre class="language-none"><code class="language-none">E:\software\Java\jdk-11.0.1\bin\java.exe -cp "C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2020.3.3\plugins\java-decompiler\lib\java-decompiler.jar" org.jetbrains.java.decompiler.main.decompiler.ConsoleDecompiler -dgs=true dbTool.jar mysrc</code></pre><h4 id="缺少目标文件夹"><a href="#缺少目标文件夹" class="headerlink" title="缺少目标文件夹"></a>缺少目标文件夹</h4><p>可能出现报错如下：</p><pre class="language-none"><code class="language-none">error: destination 'mysrc' is not a directory</code></pre><p>在执行目录下新建对应的文件夹即可。</p><h3 id="解压反编译结果"><a href="#解压反编译结果" class="headerlink" title="解压反编译结果"></a>解压反编译结果</h3><p>等指令运行完毕之后，会在您所制定的目录（示例是 mysrc）中生成的打包好的源码，一般是 jar 格式的压缩文件。您可以进行解压查看。</p><h4 id="底层实现"><a href="#底层实现" class="headerlink" title="底层实现"></a>底层实现</h4><p>底层是使用 fernflower 实现的：</p><blockquote><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2Zlc2gwci9mZXJuZmxvd2Vy">https://github.com/fesh0r/fernflower<i class="fa fa-external-link-alt"></i></span></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;对一些历史遗留的老项目，在只有 Jar 包、而缺少对应源码的情况下，我们需要通过反编译的方式，来获取 Java 源代码。&lt;/p&gt;
&lt;p&gt;下面介绍 InteliJ IDEA 反编译 Jar 包的方法。&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://jueee.github.io/categories/Java/"/>
    
    <category term="JavaJar" scheme="https://jueee.github.io/categories/Java/JavaJar/"/>
    
    
    <category term="Java" scheme="https://jueee.github.io/tags/Java/"/>
    
    <category term="JavaJar" scheme="https://jueee.github.io/tags/JavaJar/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch 设置用户名密码</title>
    <link href="https://jueee.github.io/2022/04/2022-04-18-ElasticSearch%E8%AE%BE%E7%BD%AE%E7%94%A8%E6%88%B7%E5%90%8D%E5%AF%86%E7%A0%81/"/>
    <id>https://jueee.github.io/2022/04/2022-04-18-ElasticSearch%E8%AE%BE%E7%BD%AE%E7%94%A8%E6%88%B7%E5%90%8D%E5%AF%86%E7%A0%81/</id>
    <published>2022-04-18T00:00:00.000Z</published>
    <updated>2022-04-20T08:45:57.561Z</updated>
    
    <content type="html"><![CDATA[<p>Elasticsearch 从 6.8 开始， 允许免费用户使用 X-Pack 的安全功能， 以前安装 es 都是裸奔。接下来记录配置安全认证的方法。</p><a id="more"></a><h3 id="设置密码步骤"><a href="#设置密码步骤" class="headerlink" title="设置密码步骤"></a>设置密码步骤</h3><h4 id="开启x-pack验证"><a href="#开启x-pack验证" class="headerlink" title="开启x-pack验证"></a>开启 x-pack 验证</h4><p>需要在配置文件中开启 x-pack 验证，修改 config 。</p><p>一般是在 /usr/share/elasticsearch 目录下面的 elasticsearch.yml 文件。</p><p>在里面添加如下内容，并重启：</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">xpack.security.enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">xpack.license.self_generated.type</span><span class="token punctuation">:</span> basic<span class="token key atrule">xpack.security.transport.ssl.enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></code></pre><h4 id="设置密码"><a href="#设置密码" class="headerlink" title="设置密码"></a>设置密码</h4><p>执行设置用户名和密码的命令，这里需要为 4 个用户分别设置密码，elastic, kibana, logstash_system,beats_system</p><pre class="language-none"><code class="language-none">bin/elasticsearch-setup-passwords interactive</code></pre><p>结果如下：</p><pre class="language-none"><code class="language-none">Initiating the setup of passwords for reserved users elastic,kibana,logstash_system,beats_system.You will be prompted to enter passwords as the process progresses.Please confirm that you would like to continue [y/N]yEnter password for [elastic]: passwords must be at least [6] characters longTry again.Enter password for [elastic]: Reenter password for [elastic]: Passwords do not match.Try again.Enter password for [elastic]: Reenter password for [elastic]: Enter password for [kibana]: Reenter password for [kibana]: Enter password for [logstash_system]: Reenter password for [logstash_system]: Enter password for [beats_system]: Reenter password for [beats_system]: Changed password for user [kibana]Changed password for user [logstash_system]Changed password for user [beats_system]Changed password for user [elastic]</code></pre><p>如图所示：</p><p><img src="/images/2022/04/image-20220418143221516.png" alt="image-20220418143221516" loading="lazy"></p><h4 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h4><p>修改密码命令如下：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> -H <span class="token string">"Content-Type:application/json"</span> -XPOST -u elastic <span class="token string">'http://127.0.0.1:9200/_xpack/security/user/elastic/_password'</span> -d <span class="token string">'{ "password" : "123456" }'</span></code></pre><h3 id="忘记密码"><a href="#忘记密码" class="headerlink" title="忘记密码"></a>忘记密码</h3><p>进入 es 的机器</p><pre class="language-none"><code class="language-none">docker exec -it elasticsearch /bin/bash</code></pre><p>创建一个临时的超级用户 RyanMiao 用这个用户去修改 elastic 用户的密码：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> -XPUT -u ryan:ryan123 http://localhost:9200/_xpack/security/user/elastic/_password -H <span class="token string">"Content-Type: application/json"</span> -d <span class="token string">'{  "password": "q5f2qNfUJQyvZPIz57MZ"}'</span></code></pre><h3 id="生成证书"><a href="#生成证书" class="headerlink" title="生成证书"></a>生成证书</h3><p>es 提供了生成证书的工具 <code>elasticsearch-certutil</code>，我们可以生成它，然后复制出来，后面统一使用。</p><p>生成 ca: elastic-stack-ca.p12</p><pre class="language-none"><code class="language-none"># ./bin/elasticsearch-certutil ca</code></pre><p>生成 cert: elastic-certificates.p12</p><pre class="language-none"><code class="language-none"># ./bin/elasticsearch-certutil cert --ca elastic-stack-ca.p12</code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;Elasticsearch 从 6.8 开始， 允许免费用户使用 X-Pack 的安全功能， 以前安装 es 都是裸奔。接下来记录配置安全认证的方法。&lt;/p&gt;</summary>
    
    
    
    <category term="Database" scheme="https://jueee.github.io/categories/Database/"/>
    
    <category term="ElasticSearch" scheme="https://jueee.github.io/categories/Database/ElasticSearch/"/>
    
    
    <category term="ElasticSearch" scheme="https://jueee.github.io/tags/ElasticSearch/"/>
    
    <category term="Database" scheme="https://jueee.github.io/tags/Database/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 将一列值进行分隔实现行转列</title>
    <link href="https://jueee.github.io/2022/04/2022-04-15-MySQL%E5%B0%86%E4%B8%80%E5%88%97%E5%80%BC%E8%BF%9B%E8%A1%8C%E5%88%86%E9%9A%94%E5%AE%9E%E7%8E%B0%E8%A1%8C%E8%BD%AC%E5%88%97/"/>
    <id>https://jueee.github.io/2022/04/2022-04-15-MySQL%E5%B0%86%E4%B8%80%E5%88%97%E5%80%BC%E8%BF%9B%E8%A1%8C%E5%88%86%E9%9A%94%E5%AE%9E%E7%8E%B0%E8%A1%8C%E8%BD%AC%E5%88%97/</id>
    <published>2022-04-15T00:00:00.000Z</published>
    <updated>2022-04-20T08:45:57.548Z</updated>
    
    <content type="html"><![CDATA[<p>主要介绍了 MySQL 中将一列以逗号分隔的值行转列的实现。</p><a id="more"></a><h3 id="原始数据"><a href="#原始数据" class="headerlink" title="原始数据"></a>原始数据</h3><pre class="language-mysql" data-language="mysql"><code class="language-mysql">select name from user where id=8;&gt;&gt; Alice,Bob,Cindy,Dale,Eric</code></pre><h3 id="分隔行转列"><a href="#分隔行转列" class="headerlink" title="分隔行转列"></a>分隔行转列</h3><pre class="language-mysql" data-language="mysql"><code class="language-mysql">select distinct(substring_index(substring_index(a.col,',',b.help_topic_id+1),',',-1)) as valfrom (select name as col from user where id=8) as ajoin mysql.help_topic as b on b.help_topic_id  &lt; (char_length(a.col) - char_length(replace(a.col,',',''))+1);</code></pre><p>输出结果：</p><p><img src="/images/2022/04/image-20220415112523058.png" alt="image-20220415112523058" loading="lazy"></p><h3 id="思路解析"><a href="#思路解析" class="headerlink" title="思路解析"></a>思路解析</h3><ol><li>通过 group_concat 函数将 value 列的值拼接成一个逗号隔开的字符串，然后通过 substring_index 函数对字符串进行截取。</li><li>通过 substring_index 函数特性，我们就需要知道字符串有多少个逗号，并且要告诉每个逗号的位置。</li><li>逗号个数 = char_length (字符串)-char_length (replace (字符串，',',''))。</li><li>逗号位置 = mysql.help_topic.id &lt;逗号个数 [+1]<br>。</li><li>最后通过 distinct 函数将截取后的单个值进行去重。</li></ol><p><strong>注意：</strong></p><ol><li><p>mysql.help_topic 表的自增 id 是从 0 开始，所以在进行截取时要对 id 进行 + 1。</p><p>见：substring_index (a.col,',',b.help_topic_id+1)</p></li><li><p>value 列最后一个字符不是逗号时：逗号个数 + 1 是为了截取时不漏掉最后一个逗号后的值，即：char_length (a.col) - char_length (replace (a.col,',',''))+1；</p><p>value 列最后一个字符是逗号时：逗号个数就不需要 + 1 了，直接：char_length (a.col) - char_length (replace (a.col,',',''))。</p></li><li><p>因为截取时 id 要 + 1，所以在连接时取的 &lt; ，而不是 &lt;= 。</p><p>见：b.help_topic_id &lt;(char_length (a.col) - char_length (replace (a.col,',',''))[+1])。</p></li><li><p>mysql.help_topic (mysql version: 5.7.21-1) 表的自增 id，最大值为 636。如果 group_concat 后的字符串中逗号个数大于该值，需要自己单独处理自增 id 的值。</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;主要介绍了 MySQL 中将一列以逗号分隔的值行转列的实现。&lt;/p&gt;</summary>
    
    
    
    <category term="Database" scheme="https://jueee.github.io/categories/Database/"/>
    
    <category term="MySQL" scheme="https://jueee.github.io/categories/Database/MySQL/"/>
    
    
    <category term="MySQL" scheme="https://jueee.github.io/tags/MySQL/"/>
    
    <category term="Database" scheme="https://jueee.github.io/tags/Database/"/>
    
  </entry>
  
  <entry>
    <title>Java 中 Tuple 类的创建使用</title>
    <link href="https://jueee.github.io/2022/04/2022-04-11-Java%E4%B8%ADTuple%E7%B1%BB%E7%9A%84%E5%88%9B%E5%BB%BA%E4%BD%BF%E7%94%A8/"/>
    <id>https://jueee.github.io/2022/04/2022-04-11-Java%E4%B8%ADTuple%E7%B1%BB%E7%9A%84%E5%88%9B%E5%BB%BA%E4%BD%BF%E7%94%A8/</id>
    <published>2022-04-11T00:00:00.000Z</published>
    <updated>2022-04-20T08:45:57.542Z</updated>
    
    <content type="html"><![CDATA[<p>Scala 中的 Tuple 相关类是非常实用的，但是在 Java 中并没有原生支持。</p><p>下面介绍如何简单创建 Tuple 相关类并使用。</p><a id="more"></a><h3 id="Tuple2"><a href="#Tuple2" class="headerlink" title="Tuple2"></a>Tuple2</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Serializable</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function<span class="token punctuation">.</span></span><span class="token class-name">Function</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Tuple2</span> <span class="token generics"><span class="token punctuation">&lt;</span>T1<span class="token punctuation">,</span> T2<span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token class-name">T1</span> t1<span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token class-name">T2</span> t2<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Tuple2</span><span class="token punctuation">(</span><span class="token class-name">T1</span> t1<span class="token punctuation">,</span> <span class="token class-name">T2</span> t2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>t1 <span class="token operator">=</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>t1<span class="token punctuation">,</span> <span class="token string">"t1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>t2 <span class="token operator">=</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>t2<span class="token punctuation">,</span> <span class="token string">"t2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">T1</span> <span class="token function">getT1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>t1<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">T2</span> <span class="token function">getT2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>t2<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Tuple2</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">,</span> T2<span class="token punctuation">&gt;</span></span> <span class="token function">mapT1</span><span class="token punctuation">(</span><span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span>T1<span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">&gt;</span></span> mapper<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Tuple2</span><span class="token punctuation">(</span>mapper<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>t1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>t2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Tuple2</span><span class="token generics"><span class="token punctuation">&lt;</span>T1<span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">&gt;</span></span> <span class="token function">mapT2</span><span class="token punctuation">(</span><span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span>T2<span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">&gt;</span></span> mapper<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Tuple2</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>t1<span class="token punctuation">,</span> mapper<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>t2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">switch</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>t1<span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>t2<span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>t1<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>t2<span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">unmodifiableList</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> o<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Tuple2</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">&gt;</span></span> tuple2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Tuple2</span><span class="token punctuation">)</span>o<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>t1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>tuple2<span class="token punctuation">.</span>t1<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>t2<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>tuple2<span class="token punctuation">.</span>t2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result <span class="token operator">=</span> <span class="token number">31</span> <span class="token operator">*</span> result <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>t1<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result <span class="token operator">=</span> <span class="token number">31</span> <span class="token operator">*</span> result <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>t2<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"[t1]"</span><span class="token operator">+</span>t1<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"[t2]"</span><span class="token operator">+</span>t2<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="Tuple3"><a href="#Tuple3" class="headerlink" title="Tuple3"></a>Tuple3</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Objects</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function<span class="token punctuation">.</span></span><span class="token class-name">Function</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Tuple3</span><span class="token generics"><span class="token punctuation">&lt;</span>T1<span class="token punctuation">,</span> T2<span class="token punctuation">,</span> T3<span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">Tuple2</span><span class="token generics"><span class="token punctuation">&lt;</span>T1<span class="token punctuation">,</span> T2<span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token class-name">T3</span> t3<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Tuple3</span><span class="token punctuation">(</span><span class="token class-name">T1</span> t1<span class="token punctuation">,</span> <span class="token class-name">T2</span> t2<span class="token punctuation">,</span> <span class="token class-name">T3</span> t3<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>t1<span class="token punctuation">,</span> t2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>t3 <span class="token operator">=</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>t3<span class="token punctuation">,</span> <span class="token string">"t3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">T3</span> <span class="token function">getT3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>t3<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Tuple3</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">,</span> T2<span class="token punctuation">,</span> T3<span class="token punctuation">&gt;</span></span> <span class="token function">mapT1</span><span class="token punctuation">(</span><span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span>T1<span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">&gt;</span></span> mapper<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Tuple3</span><span class="token punctuation">(</span>mapper<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>t1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>t2<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>t3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Tuple3</span><span class="token generics"><span class="token punctuation">&lt;</span>T1<span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">,</span> T3<span class="token punctuation">&gt;</span></span> <span class="token function">mapT2</span><span class="token punctuation">(</span><span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span>T2<span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">&gt;</span></span> mapper<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Tuple3</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>t1<span class="token punctuation">,</span> mapper<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>t2<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>t3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Tuple3</span><span class="token generics"><span class="token punctuation">&lt;</span>T1<span class="token punctuation">,</span> T2<span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">&gt;</span></span> <span class="token function">mapT3</span><span class="token punctuation">(</span><span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span>T3<span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">&gt;</span></span> mapper<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Tuple3</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>t1<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>t2<span class="token punctuation">,</span> mapper<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>t3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">switch</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>t1<span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>t2<span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>t3<span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>t1<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>t2<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>t3<span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">Tuple3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token class-name">Tuple3</span> tuple3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Tuple3</span><span class="token punctuation">)</span>o<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>t3<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>tuple3<span class="token punctuation">.</span>t3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result <span class="token operator">=</span> <span class="token number">31</span> <span class="token operator">*</span> result <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>t3<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;Scala 中的 Tuple 相关类是非常实用的，但是在 Java 中并没有原生支持。&lt;/p&gt;
&lt;p&gt;下面介绍如何简单创建 Tuple 相关类并使用。&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://jueee.github.io/categories/Java/"/>
    
    <category term="JavaClass" scheme="https://jueee.github.io/categories/Java/JavaClass/"/>
    
    
    <category term="JavaClass" scheme="https://jueee.github.io/tags/JavaClass/"/>
    
    <category term="Java" scheme="https://jueee.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot 通过 AOP 增加 Web 接口请求日志</title>
    <link href="https://jueee.github.io/2022/03/2022-03-28-SpringBoot%E9%80%9A%E8%BF%87AOP%E5%A2%9E%E5%8A%A0Web%E6%8E%A5%E5%8F%A3%E8%AF%B7%E6%B1%82%E6%97%A5%E5%BF%97/"/>
    <id>https://jueee.github.io/2022/03/2022-03-28-SpringBoot%E9%80%9A%E8%BF%87AOP%E5%A2%9E%E5%8A%A0Web%E6%8E%A5%E5%8F%A3%E8%AF%B7%E6%B1%82%E6%97%A5%E5%BF%97/</id>
    <published>2022-03-28T00:00:00.000Z</published>
    <updated>2022-04-20T08:45:44.011Z</updated>
    
    <content type="html"><![CDATA[<p>在使用 SpringBoot 开发 Web 接口时，时常需要对接口的访问情况进行统计和追踪溯源。</p><p>下面介绍通过 AOP 实现接口请求日志的功能。</p><a id="more"></a><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--引入AOP依赖--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-aop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></code></pre><h3 id="日志切面"><a href="#日志切面" class="headerlink" title="日志切面"></a>日志切面</h3><ul><li>使用 @Aspect 注解将一个 java 类定义为切面类</li><li>使用 @Pointcut 定义一个切入点，可以是一个规则表达式，比如下例中某个 package 下的所有函数，也可以是一个注解等。</li><li>根据需要在切入点不同位置的切入内容<ul><li>使用 @Before 在切入点开始处切入内容</li><li>使用 @After 在切入点结尾处切入内容</li><li>使用 @AfterReturning 在切入点 return 内容之后切入内容（可以用来对处理返回值做一些加工处理）</li><li>使用 @Around 在切入点前后切入内容，并自己控制何时执行切入点自身的内容</li><li>使用 @AfterThrowing 用来处理当切入内容部分抛出异常之后的处理逻辑</li></ul></li></ul><h3 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">ProceedingJoinPoint</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Around</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Aspect</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Pointcut</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">MethodSignature</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>context<span class="token punctuation">.</span>request<span class="token punctuation">.</span></span><span class="token class-name">RequestContextHolder</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>context<span class="token punctuation">.</span>request<span class="token punctuation">.</span></span><span class="token class-name">ServletRequestAttributes</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Enumeration</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Slf4j</span> <span class="token comment">// 日志打印</span><span class="token annotation punctuation">@Component</span> <span class="token comment">// 将对象交由spring进行管理</span><span class="token annotation punctuation">@Aspect</span> <span class="token comment">// 代表此类为一个切面类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ControllerAopInterceptor</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"execution(public * com.jue.*.controller.*.*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">privilege</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>     <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"privilege()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">around</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> pjp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> className <span class="token operator">=</span> pjp<span class="token punctuation">.</span><span class="token function">getTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取类名</span>        <span class="token class-name">String</span> methodName <span class="token operator">=</span> pjp<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取执行的方法名称</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> parameterNamesArgs <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">MethodSignature</span><span class="token punctuation">)</span> pjp<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getParameterNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取参数名称</span>        <span class="token class-name">Object</span> result <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// 定义返回参数</span>        <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> pjp<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取方法参数</span>        <span class="token class-name">HttpServletRequest</span> request <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ServletRequestAttributes</span><span class="token punctuation">)</span> <span class="token class-name">RequestContextHolder</span><span class="token punctuation">.</span><span class="token function">getRequestAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 请求的URL</span>        <span class="token class-name">String</span> requestURL <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getRequestURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> ip <span class="token operator">=</span> <span class="token function">getIpAddr</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">StringBuffer</span> paramsBuf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取请求参数集合并进行遍历拼接</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> args<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>paramsBuf<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                paramsBuf<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"|"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            paramsBuf<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>parameterNamesArgs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" = "</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">StringBuffer</span> headerBuf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Enumeration</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> headerNames <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeaderNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>headerNames<span class="token punctuation">.</span><span class="token function">hasMoreElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> headerNames<span class="token punctuation">.</span><span class="token function">nextElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> value <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>headerBuf<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                headerBuf<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"|"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            headerBuf<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>         <span class="token comment">// 打印请求参数参数</span>        <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 记录开始时间</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"请求| ip:{} | 请求接口:{} | 请求类:{} | 方法 :{} | 参数:{} | 请求header:{}|请求时间 :{}"</span><span class="token punctuation">,</span> ip<span class="token punctuation">,</span> requestURL<span class="token punctuation">,</span> className<span class="token punctuation">,</span> methodName<span class="token punctuation">,</span> paramsBuf<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> headerBuf<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> start<span class="token punctuation">)</span><span class="token punctuation">;</span>        result <span class="token operator">=</span> pjp<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 执行目标方法</span>        <span class="token comment">// 获取执行完的时间 打印返回报文</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"返回| 请求接口:{}| 方法 :{} | 请求时间:{} | 处理时间:{} 毫秒 | 返回结果 :{}"</span><span class="token punctuation">,</span> requestURL<span class="token punctuation">,</span> methodName<span class="token punctuation">,</span> start<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token comment">/**     * @Description: 获取ip     */</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getIpAddr</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> ipAddress <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        ipAddress <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"x-forwarded-for"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ipAddress <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> ipAddress<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token string">"unknown"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>ipAddress<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ipAddress <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"Proxy-Client-IP"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ipAddress <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> ipAddress<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token string">"unknown"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>ipAddress<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ipAddress <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"WL-Proxy-Client-IP"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ipAddress <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> ipAddress<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token string">"unknown"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>ipAddress<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ipAddress <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getRemoteAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 对于通过多个代理的情况，第一个IP为客户端真实IP,多个IP按照','分割</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ipAddress <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> ipAddress<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">15</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// "***.***.***.***".length()</span>            <span class="token comment">// = 15</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ipAddress<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                ipAddress <span class="token operator">=</span> ipAddress<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> ipAddress<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment">// 或者这样也行,对于通过多个代理的情况，第一个IP为客户端真实IP,多个IP按照','分割</span>        <span class="token keyword">return</span> ipAddress<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;在使用 SpringBoot 开发 Web 接口时，时常需要对接口的访问情况进行统计和追踪溯源。&lt;/p&gt;
&lt;p&gt;下面介绍通过 AOP 实现接口请求日志的功能。&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://jueee.github.io/categories/Java/"/>
    
    <category term="SpringBoot" scheme="https://jueee.github.io/categories/Java/SpringBoot/"/>
    
    
    <category term="Java" scheme="https://jueee.github.io/tags/Java/"/>
    
    <category term="SpringBoot" scheme="https://jueee.github.io/tags/SpringBoot/"/>
    
    <category term="AOP" scheme="https://jueee.github.io/tags/AOP/"/>
    
  </entry>
  
  <entry>
    <title>Freemarker 生成 HTML 静态页面</title>
    <link href="https://jueee.github.io/2022/03/2022-03-22-Freemarker%E7%94%9F%E6%88%90HTML%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2/"/>
    <id>https://jueee.github.io/2022/03/2022-03-22-Freemarker%E7%94%9F%E6%88%90HTML%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2/</id>
    <published>2022-03-22T00:00:00.000Z</published>
    <updated>2022-04-20T08:45:43.978Z</updated>
    
    <content type="html"><![CDATA[<p>有时为了减轻了服务器的压力和提高页面的响应速度，需要静态页面。</p><p>下面介绍使用 Freemarker 生成 HTML 静态页面的方法。</p><a id="more"></a><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-freemarker<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></code></pre><h3 id="配置-Freemarker"><a href="#配置-Freemarker" class="headerlink" title="配置 Freemarker"></a>配置 Freemarker</h3><pre class="language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">spring.freemarker.enabled</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token attr-name">spring.freemarker.cache</span><span class="token punctuation">=</span><span class="token attr-value">false</span><span class="token attr-name">spring.freemarker.template-loader-path</span><span class="token punctuation">=</span><span class="token attr-value">classpath:/templates/</span><span class="token attr-name">spring.freemarker.settings.template_update_delay</span><span class="token punctuation">=</span><span class="token attr-value">0</span><span class="token attr-name">spring.freemarker.charset</span><span class="token punctuation">=</span><span class="token attr-value">UTF-8</span><span class="token attr-name">spring.freemarker.check-template-location</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token attr-name">spring.freemarker.content-type</span><span class="token punctuation">=</span><span class="token attr-value">text/html</span><span class="token attr-name">spring.freemarker.expose-request-attributes</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token attr-name">spring.freemarker.expose-session-attributes</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token attr-name">spring.freemarker.request-context-attribute</span><span class="token punctuation">=</span><span class="token attr-value">request</span><span class="token attr-name">spring.freemarker.suffix</span><span class="token punctuation">=</span><span class="token attr-value">.ftl</span></code></pre><h3 id="调试-HTML-方法"><a href="#调试-HTML-方法" class="headerlink" title="调试 HTML 方法"></a>调试 HTML 方法</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InfoController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span>  <span class="token class-name">String</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"redirect:/info"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/info"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span>  <span class="token class-name">String</span> <span class="token function">info</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">ModelMap</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Info</span> info <span class="token operator">=</span> <span class="token comment">// 获取注入对象值</span>        m<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"info"</span><span class="token punctuation">,</span> info<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"view/info"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="保存-HTML-方法"><a href="#保存-HTML-方法" class="headerlink" title="保存 HTML 方法"></a>保存 HTML 方法</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">saveHtmlFile</span><span class="token punctuation">(</span><span class="token class-name">File</span> emlFile<span class="token punctuation">,</span><span class="token class-name">String</span> htmlIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> ftlPath <span class="token operator">=</span> <span class="token string">"src\\main\\resources\\templates\\view"</span><span class="token punctuation">;</span>        <span class="token class-name">Configuration</span> configuration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Configuration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        configuration<span class="token punctuation">.</span><span class="token function">setDirectoryForTemplateLoading</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>ftlPath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        configuration<span class="token punctuation">.</span><span class="token function">setDefaultEncoding</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取或创建一个模版。</span>        <span class="token class-name">Template</span> template <span class="token operator">=</span> configuration<span class="token punctuation">.</span><span class="token function">getTemplate</span><span class="token punctuation">(</span><span class="token string">"info.ftl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置文件输入流编码，不然生成的html文件会中文乱码</span>        <span class="token class-name">FileWriterWithEncoding</span> out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriterWithEncoding</span><span class="token punctuation">(</span>htmlIndex<span class="token punctuation">,</span> <span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 将页面中要展示的数据放入一个map中</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> dataMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Info</span> info <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取对象值</span>        dataMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"info"</span><span class="token punctuation">,</span> info<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//将map中的数据输入到个模板文件中并遍历出来，最后再将整个模板的数据写入到html中。</span>        template<span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span>dataMap<span class="token punctuation">,</span> out<span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"--"</span><span class="token operator">+</span>emlFile<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;有时为了减轻了服务器的压力和提高页面的响应速度，需要静态页面。&lt;/p&gt;
&lt;p&gt;下面介绍使用 Freemarker 生成 HTML 静态页面的方法。&lt;/p&gt;</summary>
    
    
    
    <category term="Apache" scheme="https://jueee.github.io/categories/Apache/"/>
    
    <category term="FreeMarker" scheme="https://jueee.github.io/categories/Apache/FreeMarker/"/>
    
    
    <category term="FreeMarker" scheme="https://jueee.github.io/tags/FreeMarker/"/>
    
    <category term="Apache" scheme="https://jueee.github.io/tags/Apache/"/>
    
  </entry>
  
  <entry>
    <title>tk.mybatis 中 delete () 和 deleteByPrimaryKey () 的区别及源码解析</title>
    <link href="https://jueee.github.io/2022/02/2022-02-14-tk.mybatis%E4%B8%ADdelete()%E5%92%8CdeleteByPrimaryKey()%E7%9A%84%E5%8C%BA%E5%88%AB%E5%8F%8A%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    <id>https://jueee.github.io/2022/02/2022-02-14-tk.mybatis%E4%B8%ADdelete()%E5%92%8CdeleteByPrimaryKey()%E7%9A%84%E5%8C%BA%E5%88%AB%E5%8F%8A%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</id>
    <published>2022-02-14T00:00:00.000Z</published>
    <updated>2022-03-01T07:22:11.604Z</updated>
    
    <content type="html"><![CDATA[<h3 id="出现问题"><a href="#出现问题" class="headerlink" title="出现问题"></a>出现问题</h3><p>在使用 tk.mybatis 的过程中，在拿到对象后，需要删除时，贪图方便直接调用了 delete () 删除方法，而当对象为空时，缺失判断导致删除了全表，在此对问题进行排查分析。</p><a id="more"></a><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><h4 id="删除接口-DeleteMapper"><a href="#删除接口-DeleteMapper" class="headerlink" title="删除接口 DeleteMapper"></a>删除接口 DeleteMapper</h4><p>tk.mybatis 中删除接口如下所示：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">tk<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span>common<span class="token punctuation">.</span>base<span class="token punctuation">.</span>delete</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">DeleteProvider</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">tk<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RegisterMapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">tk<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span>provider<span class="token punctuation">.</span>base<span class="token punctuation">.</span></span><span class="token class-name">BaseDeleteProvider</span><span class="token punctuation">;</span><span class="token comment">/** * 通用Mapper接口,删除 * * @param &lt;T&gt; 不能为空 * @author liuzh */</span><span class="token annotation punctuation">@RegisterMapper</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">DeleteMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 根据实体属性作为条件进行删除，查询条件使用等号     *     * @param record     * @return     */</span>    <span class="token annotation punctuation">@DeleteProvider</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">BaseDeleteProvider</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token string">"dynamicSQL"</span><span class="token punctuation">)</span>    <span class="token keyword">int</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token class-name">T</span> <span class="token keyword">record</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在 DeleteMapper 接口中，@DeleteProvider 注解的 type 属性指定了 BaseDeleteProvider 类。</p><h4 id="删除实现-DeleteProvider"><a href="#删除实现-DeleteProvider" class="headerlink" title="删除实现 DeleteProvider"></a>删除实现 DeleteProvider</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">tk<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span>provider<span class="token punctuation">.</span>base</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>mapping<span class="token punctuation">.</span></span><span class="token class-name">MappedStatement</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>mapping<span class="token punctuation">.</span></span><span class="token class-name">SqlCommandType</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">tk<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span>mapperhelper<span class="token punctuation">.</span></span><span class="token class-name">EntityHelper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">tk<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span>mapperhelper<span class="token punctuation">.</span></span><span class="token class-name">MapperHelper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">tk<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span>mapperhelper<span class="token punctuation">.</span></span><span class="token class-name">MapperTemplate</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">tk<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span>mapperhelper<span class="token punctuation">.</span></span><span class="token class-name">SqlHelper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">tk<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">MetaObjectUtil</span><span class="token punctuation">;</span><span class="token comment">/** * BaseDeleteMapper实现类，基础方法实现类 * * @author liuzh */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BaseDeleteProvider</span> <span class="token keyword">extends</span> <span class="token class-name">MapperTemplate</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">BaseDeleteProvider</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> mapperClass<span class="token punctuation">,</span> <span class="token class-name">MapperHelper</span> mapperHelper<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>mapperClass<span class="token punctuation">,</span> mapperHelper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 通过条件删除     *     * @param ms     * @return     */</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token class-name">MappedStatement</span> ms<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> entityClass <span class="token operator">=</span> <span class="token function">getEntityClass</span><span class="token punctuation">(</span>ms<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">StringBuilder</span> sql <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//如果设置了安全删除，就不允许执行不带查询条件的 delete 方法</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isSafeDelete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            sql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">SqlHelper</span><span class="token punctuation">.</span><span class="token function">notAllNullParameterCheck</span><span class="token punctuation">(</span><span class="token string">"_parameter"</span><span class="token punctuation">,</span> <span class="token class-name">EntityHelper</span><span class="token punctuation">.</span><span class="token function">getColumns</span><span class="token punctuation">(</span>entityClass<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 如果是逻辑删除，则修改为更新表，修改逻辑删除字段的值</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">SqlHelper</span><span class="token punctuation">.</span><span class="token function">hasLogicDeleteColumn</span><span class="token punctuation">(</span>entityClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            sql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">SqlHelper</span><span class="token punctuation">.</span><span class="token function">updateTable</span><span class="token punctuation">(</span>entityClass<span class="token punctuation">,</span> <span class="token function">tableName</span><span class="token punctuation">(</span>entityClass<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;set&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">SqlHelper</span><span class="token punctuation">.</span><span class="token function">logicDeleteColumnEqualsValue</span><span class="token punctuation">(</span>entityClass<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;/set&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">MetaObjectUtil</span><span class="token punctuation">.</span><span class="token function">forObject</span><span class="token punctuation">(</span>ms<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token string">"sqlCommandType"</span><span class="token punctuation">,</span> <span class="token class-name">SqlCommandType</span><span class="token punctuation">.</span>UPDATE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            sql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">SqlHelper</span><span class="token punctuation">.</span><span class="token function">deleteFromTable</span><span class="token punctuation">(</span>entityClass<span class="token punctuation">,</span> <span class="token function">tableName</span><span class="token punctuation">(</span>entityClass<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        sql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">SqlHelper</span><span class="token punctuation">.</span><span class="token function">whereAllIfColumns</span><span class="token punctuation">(</span>entityClass<span class="token punctuation">,</span> <span class="token function">isNotEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sql<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 通过主键删除     *     * @param ms     */</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">deleteByPrimaryKey</span><span class="token punctuation">(</span><span class="token class-name">MappedStatement</span> ms<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> entityClass <span class="token operator">=</span> <span class="token function">getEntityClass</span><span class="token punctuation">(</span>ms<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">StringBuilder</span> sql <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">SqlHelper</span><span class="token punctuation">.</span><span class="token function">hasLogicDeleteColumn</span><span class="token punctuation">(</span>entityClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            sql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">SqlHelper</span><span class="token punctuation">.</span><span class="token function">updateTable</span><span class="token punctuation">(</span>entityClass<span class="token punctuation">,</span> <span class="token function">tableName</span><span class="token punctuation">(</span>entityClass<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;set&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">SqlHelper</span><span class="token punctuation">.</span><span class="token function">logicDeleteColumnEqualsValue</span><span class="token punctuation">(</span>entityClass<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;/set&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">MetaObjectUtil</span><span class="token punctuation">.</span><span class="token function">forObject</span><span class="token punctuation">(</span>ms<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token string">"sqlCommandType"</span><span class="token punctuation">,</span> <span class="token class-name">SqlCommandType</span><span class="token punctuation">.</span>UPDATE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            sql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">SqlHelper</span><span class="token punctuation">.</span><span class="token function">deleteFromTable</span><span class="token punctuation">(</span>entityClass<span class="token punctuation">,</span> <span class="token function">tableName</span><span class="token punctuation">(</span>entityClass<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        sql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">SqlHelper</span><span class="token punctuation">.</span><span class="token function">wherePKColumns</span><span class="token punctuation">(</span>entityClass<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sql<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>可以看出，在 DeleteProvider 类中，分为两个实现方法：</p><ul><li>delete ()：通过条件删除</li><li> deleteByPrimaryKey ()：通过主键删除</li></ul><p>以上两个方法均使用 deleteFromTable () 方法进行了表名解析：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * delete tableName - 动态表名 * * @param entityClass * @param defaultTableName * @return */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">deleteFromTable</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> entityClass<span class="token punctuation">,</span> <span class="token class-name">String</span> defaultTableName<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">StringBuilder</span> sql <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"DELETE FROM "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token function">getDynamicTableName</span><span class="token punctuation">(</span>entityClass<span class="token punctuation">,</span> defaultTableName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> sql<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="delete-条件判断"><a href="#delete-条件判断" class="headerlink" title="delete() 条件判断"></a>delete () 条件判断</h4><p>其中，delete () 方法会判断对象中的所有字段。</p><p>位于 tk.mybatis.mapper.mapperhelper.SqlHelper 中的 whereAllIfColumns () 方法：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * where所有列的条件，会判断是否!=null * * @param entityClass * @param empty * @param useVersion * @return */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">whereAllIfColumns</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> entityClass<span class="token punctuation">,</span> <span class="token keyword">boolean</span> empty<span class="token punctuation">,</span> <span class="token keyword">boolean</span> useVersion<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">StringBuilder</span> sql <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> hasLogicDelete <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    sql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;where&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//获取全部列</span>    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">EntityColumn</span><span class="token punctuation">&gt;</span></span> columnSet <span class="token operator">=</span> <span class="token class-name">EntityHelper</span><span class="token punctuation">.</span><span class="token function">getColumns</span><span class="token punctuation">(</span>entityClass<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">EntityColumn</span> logicDeleteColumn <span class="token operator">=</span> <span class="token class-name">SqlHelper</span><span class="token punctuation">.</span><span class="token function">getLogicDeleteColumn</span><span class="token punctuation">(</span>entityClass<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//当某个列有主键策略时，不需要考虑他的属性是否为空，因为如果为空，一定会根据主键策略给他生成一个值</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">EntityColumn</span> column <span class="token operator">:</span> columnSet<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>useVersion <span class="token operator">||</span> <span class="token operator">!</span>column<span class="token punctuation">.</span><span class="token function">getEntityField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span><span class="token class-name">Version</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 逻辑删除，后面拼接逻辑删除字段的未删除条件</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>logicDeleteColumn <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> logicDeleteColumn <span class="token operator">==</span> column<span class="token punctuation">)</span> <span class="token punctuation">{</span>                hasLogicDelete <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            sql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token function">getIfNotNull</span><span class="token punctuation">(</span>column<span class="token punctuation">,</span> <span class="token string">" AND "</span> <span class="token operator">+</span> column<span class="token punctuation">.</span><span class="token function">getColumnEqualsHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> empty<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>useVersion<span class="token punctuation">)</span> <span class="token punctuation">{</span>        sql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token function">whereVersion</span><span class="token punctuation">(</span>entityClass<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>hasLogicDelete<span class="token punctuation">)</span> <span class="token punctuation">{</span>        sql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token function">whereLogicDelete</span><span class="token punctuation">(</span>entityClass<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    sql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;/where&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> sql<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="deleteByPrimaryKey-条件判断"><a href="#deleteByPrimaryKey-条件判断" class="headerlink" title="deleteByPrimaryKey() 条件判断"></a>deleteByPrimaryKey () 条件判断</h4><p>其中，deleteByPrimaryKey () 方法会判断对象中的主键字段。</p><p>位于 tk.mybatis.mapper.mapperhelper.SqlHelper 中的 wherePKColumns () 方法：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * where主键条件 * * @param entityClass * @param entityName * @param useVersion * @return */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">wherePKColumns</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> entityClass<span class="token punctuation">,</span> <span class="token class-name">String</span> entityName<span class="token punctuation">,</span> <span class="token keyword">boolean</span> useVersion<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">StringBuilder</span> sql <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> hasLogicDelete <span class="token operator">=</span> <span class="token function">hasLogicDeleteColumn</span><span class="token punctuation">(</span>entityClass<span class="token punctuation">)</span><span class="token punctuation">;</span>    sql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;where&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//获取全部列</span>    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">EntityColumn</span><span class="token punctuation">&gt;</span></span> columnSet <span class="token operator">=</span> <span class="token class-name">EntityHelper</span><span class="token punctuation">.</span><span class="token function">getPKColumns</span><span class="token punctuation">(</span>entityClass<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//当某个列有主键策略时，不需要考虑他的属性是否为空，因为如果为空，一定会根据主键策略给他生成一个值</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">EntityColumn</span> column <span class="token operator">:</span> columnSet<span class="token punctuation">)</span> <span class="token punctuation">{</span>        sql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" AND "</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>column<span class="token punctuation">.</span><span class="token function">getColumnEqualsHolder</span><span class="token punctuation">(</span>entityName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>useVersion<span class="token punctuation">)</span> <span class="token punctuation">{</span>        sql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token function">whereVersion</span><span class="token punctuation">(</span>entityClass<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>hasLogicDelete<span class="token punctuation">)</span> <span class="token punctuation">{</span>        sql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token function">whereLogicDelete</span><span class="token punctuation">(</span>entityClass<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    sql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;/where&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> sql<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>以上会在项目启动时生成对应的 SQL 模板。</p><h3 id="实际示例"><a href="#实际示例" class="headerlink" title="实际示例"></a>实际示例</h3><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><p>新建表名</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">delimiter $$CREATE TABLE `book` (  `id` bigint(20) NOT NULL AUTO_INCREMENT,  `author` varchar(50) NOT NULL,  `description` varchar(1000) NOT NULL,  `isbn` varchar(10) NOT NULL,  `title` varchar(250) NOT NULL,  PRIMARY KEY (`id`)) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=latin1$$</code></pre><p>对象类：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"book"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Book</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Id</span>    <span class="token annotation punctuation">@GeneratedValue</span><span class="token punctuation">(</span>generator <span class="token operator">=</span> <span class="token string">"JDBC"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> author<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> description<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> title<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="删除模板"><a href="#删除模板" class="headerlink" title="删除模板"></a>删除模板</h4><p>则在项目启动时生成对应的 SQL 删除模板。</p><p>通过断点我们可以得到如下结果。</p><p>delete () 删除模板如下：</p><pre class="language-xml" data-language="xml"><code class="language-xml">DELETE FROM book <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id != null<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> AND id = #{id}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>author != null<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> AND author = #{author}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>description != null<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> AND description = #{description}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title != null<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> AND title = #{title}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">&gt;</span></span></code></pre><p>deleteByPrimaryKey () 删除模板如下：</p><pre class="language-xml" data-language="xml"><code class="language-xml">DELETE FROM book <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">&gt;</span></span>    AND id = #{id}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">&gt;</span></span></code></pre><h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><p>从源码和运行结果可知：</p><ul><li>delete () 在参数全 null 的情况下回删除全表！在使用时需要特别注意！</li><li>deleteByPrimaryKey () 方法在传入空参数时，则不存在该问题。</li></ul><p>deleteByPrimaryKey 执行空参数日志如下：</p><pre class="language-none"><code class="language-none">c.j.m.BookMapper.deleteByPrimaryKey      : ==&gt;  Preparing: DELETE FROM book WHERE id = ?c.j.m.BookMapper.deleteByPrimaryKey      : ==&gt; Parameters: nullc.j.m.BookMapper.deleteByPrimaryKey      : &lt;==    Updates: 0</code></pre>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;出现问题&quot;&gt;&lt;a href=&quot;#出现问题&quot; class=&quot;headerlink&quot; title=&quot;出现问题&quot;&gt;&lt;/a&gt;出现问题&lt;/h3&gt;&lt;p&gt;在使用 tk.mybatis 的过程中，在拿到对象后，需要删除时，贪图方便直接调用了 delete () 删除方法，而当对象为空时，缺失判断导致删除了全表，在此对问题进行排查分析。&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://jueee.github.io/categories/Java/"/>
    
    <category term="JavaJar" scheme="https://jueee.github.io/categories/Java/JavaJar/"/>
    
    
    <category term="Java" scheme="https://jueee.github.io/tags/Java/"/>
    
    <category term="JavaJar" scheme="https://jueee.github.io/tags/JavaJar/"/>
    
  </entry>
  
  <entry>
    <title>使用 SpringBoot Security 登录 Web 页面</title>
    <link href="https://jueee.github.io/2022/02/2022-02-12-%E4%BD%BF%E7%94%A8SpringBoot%20Security%E7%99%BB%E5%BD%95Web%E9%A1%B5%E9%9D%A2/"/>
    <id>https://jueee.github.io/2022/02/2022-02-12-%E4%BD%BF%E7%94%A8SpringBoot%20Security%E7%99%BB%E5%BD%95Web%E9%A1%B5%E9%9D%A2/</id>
    <published>2022-02-12T00:00:00.000Z</published>
    <updated>2022-03-01T07:22:11.553Z</updated>
    
    <content type="html"><![CDATA[<p>使用 SpringBoot 开发简单 Web 页面时，如果没有身份验证是非常不安全的。</p><p>此时，可以考虑使用 Spring Security 进行身份验证的登录。</p><a id="more"></a><h3 id="Spring-Security"><a href="#Spring-Security" class="headerlink" title="Spring Security"></a>Spring Security</h3><p>Spring Security 是一个功能强大且高度可定制的身份验证和访问控制框架。</p><p>提供了完善的<strong>认证机制</strong>和方法级的<strong>授权功能</strong>。是一款非常优秀的权限管理框架。它的核心是一组过滤器链，不同的功能经由不同的过滤器。</p><h4 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h4><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-security<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></code></pre><h3 id="配置用户和密码登录"><a href="#配置用户和密码登录" class="headerlink" title="配置用户和密码登录"></a>配置用户和密码登录</h3><p>可以在 application.properteis 中配置对应的用户和密码：</p><pre class="language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">spring.security.user.name</span><span class="token punctuation">=</span><span class="token attr-value">admin</span><span class="token attr-name">spring.security.user.password</span><span class="token punctuation">=</span><span class="token attr-value">password</span></code></pre><p><img src="/images/2022/02/image-20220214184538321.png" alt="image-20220214184538321" loading="lazy"></p><h3 id="自定义登录页面"><a href="#自定义登录页面" class="headerlink" title="自定义登录页面"></a>自定义登录页面</h3><p>如果觉得默认登录页面不太满意实际需要，那么可以自定义登录页面。</p><h4 id="登录-HTML"><a href="#登录-HTML" class="headerlink" title="登录 HTML"></a>登录 HTML</h4><p>页面命名为 <code>login.html</code>，需要放在 <code>\src\main\resources\resources\</code> 这个路径下（注意有两个 resources 文件夹）。</p><p>放在这个路径下呢，项目启动起来之后可以直接访问到我们的 html 文件，这是 spring boot 默认配置。</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1, shrink-to-fit=no<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>description<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>author<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Please sign in<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta/css/bootstrap.min.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span>          <span class="token attr-name">crossorigin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>anonymous<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://getbootstrap.com/docs/4.0/examples/signin/signin.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">crossorigin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>anonymous<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-signin<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/login<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-signin-heading<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>请登录：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sr-only<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>用户名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>请输入用户名<span class="token punctuation">"</span></span> <span class="token attr-name">required</span>                   <span class="token attr-name">autofocus</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sr-only<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>密码<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>请输入密码<span class="token punctuation">"</span></span> <span class="token attr-name">required</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-lg btn-primary btn-block<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Sign in<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span></code></pre><p>为方便演示，以上只是把默认的登录页面 HTML，进行了中文翻译。</p><h4 id="配置-Spring-Security"><a href="#配置-Spring-Security" class="headerlink" title="配置 Spring Security"></a>配置 Spring Security</h4><p>配置 Spring Security 需要写一个类，继承 <code>WebSecurityConfigurerAdapter</code>，然后根据自己的需求重写一些方法。</p><p>我们自定义登录页面这个需求只需要重写 <code>void configure(HttpSecurity http)</code> 这个方法即可。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>web<span class="token punctuation">.</span>builders<span class="token punctuation">.</span></span><span class="token class-name">HttpSecurity</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>web<span class="token punctuation">.</span>configuration<span class="token punctuation">.</span></span><span class="token class-name">WebSecurityConfigurerAdapter</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecurityConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebSecurityConfigurerAdapter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">HttpSecurity</span> http<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        http<span class="token punctuation">.</span><span class="token function">formLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">loginPage</span><span class="token punctuation">(</span><span class="token string">"/login.html"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">loginProcessingUrl</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/login.html"</span><span class="token punctuation">,</span> <span class="token string">"/login"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">anyRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">csrf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>配置大概解释一下：</p><ul><li><p><code>.formLogin()</code>，表示 Spring Security 使用 form 表单登录的方式（另外还有一种登录的方式是 Basic 登录）。</p></li><li><p><code>.loginPage("/login.html")</code>，表示 spring security 默认的登录页路径为 <code>/login.html</code>，就是我们上面写的 html 文件的名字。</p></li><li><p><code>.loginProcessingUrl("/login")</code>，表示处理登录请求的接口为 <code>/login</code>，就是我们上面写的 form 表单 <code>action</code> 属性的值。</p></li><li><p><code>.and().authorizeRequests().anyRequest().authenticated()</code> 三行配置表示所有的请求都需要认证。</p></li><li><p><code>.antMatchers("/login.html", "/login").permitAll()</code> 表示将登录页面配置为不需要认证。</p></li><li><p><code>.csrf().disable()</code> 是关闭 csrf。</p></li></ul><h4 id="csrf-防护"><a href="#csrf-防护" class="headerlink" title="csrf 防护"></a>csrf 防护</h4><p>Spring Security 默认开启了 csrf 防护，只要在请求中带上 csrf token 就可以了。</p><p>这个 token 在返回登录页面的时候 Spring Security 已经帮我们准备好了，只是我们没有使用模板引擎，所以取到 token 比较困难。</p><p><img src="/images/2022/02/image-20220214185645015.png" alt="image-20220214185645015" loading="lazy"></p><h4 id="页面效果"><a href="#页面效果" class="headerlink" title="页面效果"></a>页面效果</h4><p><img src="/images/2022/02/image-20220215095848804.png" alt="image-20220215095848804" loading="lazy"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;使用 SpringBoot 开发简单 Web 页面时，如果没有身份验证是非常不安全的。&lt;/p&gt;
&lt;p&gt;此时，可以考虑使用 Spring Security 进行身份验证的登录。&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://jueee.github.io/categories/Java/"/>
    
    <category term="SpringBoot" scheme="https://jueee.github.io/categories/Java/SpringBoot/"/>
    
    
    <category term="Java" scheme="https://jueee.github.io/tags/Java/"/>
    
    <category term="SpringBoot" scheme="https://jueee.github.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>Java 使用 JSONPath 解析 JSON 内容</title>
    <link href="https://jueee.github.io/2022/02/2022-02-10-Java%E4%BD%BF%E7%94%A8JSONPath%E8%A7%A3%E6%9E%90JSON%E5%86%85%E5%AE%B9/"/>
    <id>https://jueee.github.io/2022/02/2022-02-10-Java%E4%BD%BF%E7%94%A8JSONPath%E8%A7%A3%E6%9E%90JSON%E5%86%85%E5%AE%B9/</id>
    <published>2022-02-10T00:00:00.000Z</published>
    <updated>2022-03-01T07:22:11.524Z</updated>
    
    <content type="html"><![CDATA[<h3 id="JSONPath"><a href="#JSONPath" class="headerlink" title="JSONPath"></a>JSONPath</h3><p>用来解析多层嵌套的 json 数据；JsonPath 是一种信息抽取类库，是从 JSON 文档中抽取指定信息的工具。</p><a id="more"></a><h4 id="JSONPath-操作符"><a href="#JSONPath-操作符" class="headerlink" title="JSONPath 操作符"></a>JSONPath 操作符</h4><table><thead><tr><th>操作</th><th>说明</th></tr></thead><tbody><tr><td> $</td><td> 查询根元素。这将启动所有路径表达式。</td></tr><tr><td>@</td><td>当前节点由过滤谓词处理。</td></tr><tr><td>*</td><td> 通配符，必要时可用任何地方的名称或数字。</td></tr><tr><td>..</td><td> 深层扫描。 必要时在任何地方可以使用名称。</td></tr><tr><td>.<name></name></td><td> 点，表示子节点</td></tr><tr><td> ['<name>' (, '<name>')]</name></name></td><td> 括号表示子项</td></tr><tr><td> [<number> (, <number>)]</number></number></td><td> 数组索引或索引</td></tr><tr><td> [start:end]</td><td> 数组切片操作</td></tr><tr><td> [?(<expression>)]</expression></td><td> 过滤表达式。 表达式必须求值为一个布尔值。</td></tr></tbody></table><h4 id="JSONPath-函数"><a href="#JSONPath-函数" class="headerlink" title="JSONPath 函数"></a>JSONPath 函数</h4><p>函数可以在路径的尾部调用，函数的输出是路径表达式的输出，该函数的输出是由函数本身所决定的。</p><table><thead><tr><th align="left">函数</th><th align="left">描述</th><th align="left">输出</th></tr></thead><tbody><tr><td align="left"><code>min()</code></td><td align="left">提供数字数组的最小值</td><td align="left"><code>Double</code></td></tr><tr><td align="left"><code>max()</code></td><td align="left">提供数字数组的最大值</td><td align="left"><code>Double</code></td></tr><tr><td align="left"><code>avg()</code></td><td align="left">提供数字数组的平均值</td><td align="left"><code>Double</code></td></tr><tr><td align="left"><code>stddev()</code></td><td align="left">提供数字数组的标准偏差值</td><td align="left"><code>Double</code></td></tr><tr><td align="left"><code>length()</code></td><td align="left">提供数组的长度</td><td align="left"> Integer</td></tr></tbody></table><h4 id="过滤器运算符"><a href="#过滤器运算符" class="headerlink" title="过滤器运算符"></a>过滤器运算符</h4><p>过滤器是用于筛选数组的逻辑表达式。一个典型的过滤器将是 [?(@.age&gt; 18)]，其中 @表示正在处理的当前项目。 可以使用逻辑运算符 &amp;&amp; 和 || 创建更复杂的过滤器。 字符串文字必须用单引号或双引号括起来 ([?(@.color == 'blue')] 或者 [?(@.color == "blue")]).</p><table><thead><tr><th align="left">操作符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>==</code></td><td align="left">left 等于 right（注意 1 不等于 '1'）</td></tr><tr><td align="left"><code>!=</code></td><td align="left">不等于</td></tr><tr><td align="left"><code>&lt;</code></td><td align="left">小于</td></tr><tr><td align="left"><code>&lt;=</code></td><td align="left">小于等于</td></tr><tr><td align="left"><code>&gt;</code></td><td align="left">大于</td></tr><tr><td align="left"><code>&gt;=</code></td><td align="left">大于等于</td></tr><tr><td align="left"><code>=~</code></td><td align="left">匹配正则表达式 [?(@.name =~ /foo.*?/i)]</td></tr><tr><td align="left"><code>in</code></td><td align="left">左边存在于右边 [?(@.size in ['S', 'M'])]</td></tr><tr><td align="left"><code>nin</code></td><td align="left">左边不存在于右边</td></tr><tr><td align="left"><code>size</code></td><td align="left">（数组或字符串）长度</td></tr><tr><td align="left"><code>empty</code></td><td align="left">（数组或字符串）为空</td></tr></tbody></table><h3 id="使用-fastjson-解析"><a href="#使用-fastjson-解析" class="headerlink" title="使用 fastjson 解析"></a>使用 fastjson 解析</h3><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><ul><li>GitHub：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvZmFzdGpzb24=">https://github.com/alibaba/fastjson<i class="fa fa-external-link-alt"></i></span></li></ul><h4 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">JSONPath</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>示例：JsonObject</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> jsonString <span class="token operator">=</span> <span class="token string">"{\"name\":\"jue\",\"age\":30}"</span><span class="token punctuation">;</span><span class="token class-name">JSONPath</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">,</span> <span class="token string">"$.name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// jue</span><span class="token class-name">JSONObject</span> jsonObject <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">JSONPath</span><span class="token punctuation">.</span><span class="token function">eval</span><span class="token punctuation">(</span>jsonObject<span class="token punctuation">,</span> <span class="token string">"$.name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// jue</span></code></pre><p>示例：JsonArray</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> jsonString <span class="token operator">=</span> <span class="token string">"[{\"name\":\"jue\",\"age\":30},{\"name\":\"kai\",\"age\":12}]"</span><span class="token punctuation">;</span><span class="token class-name">JSONPath</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">,</span><span class="token string">"$.name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// ["jue","kai"]</span><span class="token class-name">JSONPath</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">,</span><span class="token string">"$.name[0]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// jue</span><span class="token class-name">JSONPath</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">,</span><span class="token string">"$[*].name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ["jue","kai"]</span><span class="token class-name">JSONPath</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">,</span><span class="token string">"$[0].name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// jue</span><span class="token class-name">JSONPath</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">,</span> <span class="token string">"$[*][?(@.age &gt; 20)]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// [{"name":"jue","age":30}]</span><span class="token class-name">JSONPath</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">,</span> <span class="token string">"$[*][?(@.age &gt; 20)].age"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [30]</span><span class="token class-name">String</span> jsonString <span class="token operator">=</span> <span class="token string">"[{\"name\":\"jue\",\"age\":30},{\"name\":\"kai\",\"age\":12}]"</span><span class="token punctuation">;</span><span class="token class-name">JSONArray</span> jsonArray <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parseArray</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">JSONPath</span><span class="token punctuation">.</span><span class="token function">eval</span><span class="token punctuation">(</span>jsonArray<span class="token punctuation">,</span> <span class="token string">"$.name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// ["jue","kai"]</span><span class="token class-name">JSONPath</span><span class="token punctuation">.</span><span class="token function">eval</span><span class="token punctuation">(</span>jsonArray<span class="token punctuation">,</span> <span class="token string">"$.name[0]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// jue</span><span class="token class-name">JSONPath</span><span class="token punctuation">.</span><span class="token function">eval</span><span class="token punctuation">(</span>jsonArray<span class="token punctuation">,</span> <span class="token string">"$[*].name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ["jue","kai"]</span><span class="token class-name">JSONPath</span><span class="token punctuation">.</span><span class="token function">eval</span><span class="token punctuation">(</span>jsonArray<span class="token punctuation">,</span> <span class="token string">"$[0].name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// jue</span><span class="token class-name">JSONPath</span><span class="token punctuation">.</span><span class="token function">eval</span><span class="token punctuation">(</span>jsonArray<span class="token punctuation">,</span> <span class="token string">"$[*][?(@.age &gt; 20)]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// [{"name":"jue","age":30}]</span><span class="token class-name">JSONPath</span><span class="token punctuation">.</span><span class="token function">eval</span><span class="token punctuation">(</span>jsonArray<span class="token punctuation">,</span> <span class="token string">"$[*][?(@.age &gt; 20)].age"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [30]</span></code></pre><h3 id="使用-json-path-解析"><a href="#使用-json-path-解析" class="headerlink" title="使用 json-path 解析"></a>使用 json-path 解析</h3><h4 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h4><ul><li>GitHub：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2pzb24tcGF0aC9Kc29uUGF0aA==">https://github.com/json-path/JsonPath<i class="fa fa-external-link-alt"></i></span></li></ul><h4 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h4><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.jayway.jsonpath<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>json-path<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.7.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></code></pre><h4 id="用法一"><a href="#用法一" class="headerlink" title="用法一"></a>用法一</h4><p>每次获取都需要再解析整个文档：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">JsonPath</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span>path<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>示例：JsonObject</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> jsonString <span class="token operator">=</span> <span class="token string">"{\"name\":\"jue\",\"age\":30}"</span><span class="token punctuation">;</span><span class="token class-name">JsonPath</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">,</span><span class="token string">"$.name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// jue</span></code></pre><p>示例：JsonArray</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> jsonString <span class="token operator">=</span> <span class="token string">"[{\"name\":\"jue\",\"age\":30},{\"name\":\"kai\",\"age\":12}]"</span><span class="token punctuation">;</span><span class="token class-name">JsonPath</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">,</span> <span class="token string">"$.name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 异常，不支持该解析</span><span class="token class-name">JsonPath</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">,</span> <span class="token string">"$.name[0]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 异常，不支持该解析</span><span class="token class-name">JsonPath</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">,</span> <span class="token string">"$[*].name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ["jue","kai"]</span><span class="token class-name">JsonPath</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">,</span> <span class="token string">"$[0].name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// jue</span><span class="token class-name">JsonPath</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">,</span> <span class="token string">"$[*][?(@.age &gt; 20)]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// [{"name":"jue","age":30}]</span><span class="token class-name">JsonPath</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">,</span> <span class="token string">"$[*][?(@.age &gt; 20)].age"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [30]</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token class-name">JsonPath</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">,</span> <span class="token string">"$[*].name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ["jue","kai"]</span></code></pre><h4 id="用法二"><a href="#用法二" class="headerlink" title="用法二"></a>用法二</h4><p>先解析整个文档，再选择调用路径。</p><pre class="language-none"><code class="language-none">Object document = Configuration.defaultConfiguration().jsonProvider().parse(jsonString);JsonPath.read(document, path);</code></pre><p>示例：JsonObject</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> jsonString <span class="token operator">=</span> <span class="token string">"{\"name\":\"jue\",\"age\":30}"</span><span class="token punctuation">;</span><span class="token class-name">Object</span> document <span class="token operator">=</span> <span class="token class-name">Configuration</span><span class="token punctuation">.</span><span class="token function">defaultConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">jsonProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">JsonPath</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>document<span class="token punctuation">,</span><span class="token string">"$.name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// jue</span></code></pre><p>示例：JsonArray</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> jsonString <span class="token operator">=</span> <span class="token string">"[{\"name\":\"jue\",\"age\":30},{\"name\":\"kai\",\"age\":12}]"</span><span class="token punctuation">;</span><span class="token class-name">Object</span> document <span class="token operator">=</span> <span class="token class-name">Configuration</span><span class="token punctuation">.</span><span class="token function">defaultConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">jsonProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">JsonPath</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>document<span class="token punctuation">,</span><span class="token string">"$[*].name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ["jue","kai"]</span><span class="token class-name">JsonPath</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>document<span class="token punctuation">,</span><span class="token string">"$[0].name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// jue</span><span class="token class-name">JsonPath</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>document<span class="token punctuation">,</span><span class="token string">"$[*][?(@.age &gt; 20)]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// [{"name":"jue","age":30}]</span><span class="token class-name">JsonPath</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>document<span class="token punctuation">,</span><span class="token string">"$[*][?(@.age &gt; 20)].age"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [30]</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token class-name">JsonPath</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>document<span class="token punctuation">,</span> <span class="token string">"$[*].name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ["jue","kai"]</span></code></pre><h4 id="用法三"><a href="#用法三" class="headerlink" title="用法三"></a>用法三</h4><p>先解析整个文档，再选择调用路径。</p><pre class="language-none"><code class="language-none">Object document = Configuration.defaultConfiguration().jsonProvider().parse(jsonString);JsonPath.read(document, path);</code></pre><p>示例：JsonObject</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> jsonString <span class="token operator">=</span> <span class="token string">"{\"name\":\"jue\",\"age\":30}"</span><span class="token punctuation">;</span><span class="token class-name">ReadContext</span> context <span class="token operator">=</span> <span class="token class-name">JsonPath</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">)</span><span class="token punctuation">;</span>context<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token string">"$.name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// jue</span></code></pre><p>示例：JsonArray</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> jsonString <span class="token operator">=</span> <span class="token string">"[{\"name\":\"jue\",\"age\":30},{\"name\":\"kai\",\"age\":12}]"</span><span class="token punctuation">;</span><span class="token class-name">ReadContext</span> context <span class="token operator">=</span> <span class="token class-name">JsonPath</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">)</span><span class="token punctuation">;</span>context<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token string">"$[*].name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ["jue","kai"]</span>context<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token string">"$[0].name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// jue</span>context<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token string">"$[*][?(@.age &gt; 20)]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// [{"name":"jue","age":30}]</span>context<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token string">"$[*][?(@.age &gt; 20)].age"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [30]</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token string">"$[*].name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ["jue","kai"]</span></code></pre><h3 id="使用-Snack3-解析"><a href="#使用-Snack3-解析" class="headerlink" title="使用 Snack3 解析"></a>使用 Snack3 解析</h3><p>Snack3 是一个轻量的 JSON + JSONPath 框架。</p><h4 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h4><ul><li>GitHub：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL25vZWFyL3NuYWNrMw==">https://github.com/noear/snack3<i class="fa fa-external-link-alt"></i></span></li></ul><h4 id="依赖-1"><a href="#依赖-1" class="headerlink" title="依赖"></a>依赖</h4><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.noear<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>snack3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.2.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></code></pre><h4 id="用法-1"><a href="#用法-1" class="headerlink" title="用法"></a>用法</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">ONode</span> o <span class="token operator">=</span> <span class="token class-name">ONode</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ONode</span> oNode <span class="token operator">=</span> o<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>示例：JsonObject</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> jsonString <span class="token operator">=</span> <span class="token string">"{\"name\":\"jue\",\"age\":30}"</span><span class="token punctuation">;</span><span class="token class-name">ONode</span> o <span class="token operator">=</span> <span class="token class-name">ONode</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">)</span><span class="token punctuation">;</span>o<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">"$.name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// jue</span></code></pre><p>示例：JsonArray</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> jsonString <span class="token operator">=</span> <span class="token string">"[{\"name\":\"jue\",\"age\":30},{\"name\":\"kai\",\"age\":12}]"</span><span class="token punctuation">;</span><span class="token class-name">ONode</span> o <span class="token operator">=</span> <span class="token class-name">ONode</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">)</span><span class="token punctuation">;</span>o<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">"$.name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// ["jue","kai"]</span>o<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">"$.name[0]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// jue</span>o<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">"$[*].name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ["jue","kai"]</span>o<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">"$[0].name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// jue</span>o<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">"$[*][?(@.age &gt; 20)]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// [{"name":"jue","age":30}]</span>o<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">"$[*][?(@.age &gt; 20)].age"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [30]</span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;JSONPath&quot;&gt;&lt;a href=&quot;#JSONPath&quot; class=&quot;headerlink&quot; title=&quot;JSONPath&quot;&gt;&lt;/a&gt;JSONPath&lt;/h3&gt;&lt;p&gt;用来解析多层嵌套的 json 数据；JsonPath 是一种信息抽取类库，是从 JSON 文档中抽取指定信息的工具。&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://jueee.github.io/categories/Java/"/>
    
    <category term="JavaJar" scheme="https://jueee.github.io/categories/Java/JavaJar/"/>
    
    
    <category term="Java" scheme="https://jueee.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java 通过多种方式格式化 JSON 字符串</title>
    <link href="https://jueee.github.io/2022/02/2022-02-09-Java%E9%80%9A%E8%BF%87%E5%A4%9A%E7%A7%8D%E6%96%B9%E5%BC%8F%E6%A0%BC%E5%BC%8F%E5%8C%96JSON%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>https://jueee.github.io/2022/02/2022-02-09-Java%E9%80%9A%E8%BF%87%E5%A4%9A%E7%A7%8D%E6%96%B9%E5%BC%8F%E6%A0%BC%E5%BC%8F%E5%8C%96JSON%E5%AD%97%E7%AC%A6%E4%B8%B2/</id>
    <published>2022-02-09T00:00:00.000Z</published>
    <updated>2022-03-01T07:22:11.462Z</updated>
    
    <content type="html"><![CDATA[<p>通过以下方式格式化 JSON 字符串。</p><ul><li>Google Gson</li><li>Alibaba fastjson</li><li>Jackson</li></ul><a id="more"></a><h3 id="Google-Gson"><a href="#Google-Gson" class="headerlink" title="Google Gson"></a>Google Gson</h3><p>说明：Gson 使用 2 个空格作为换行后的格式转换。</p><h4 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h4><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.google.code.gson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>gson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.8.9<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></code></pre><h4 id="JSON-格式化"><a href="#JSON-格式化" class="headerlink" title="JSON 格式化"></a>JSON 格式化</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">jsonFormat</span><span class="token punctuation">(</span><span class="token class-name">String</span> jsonString<span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token keyword">return</span> jsonString<span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token keyword">try</span> <span class="token punctuation">{</span>           <span class="token keyword">return</span> <span class="token function">toPrettyFormat</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token keyword">try</span> <span class="token punctuation">{</span>               <span class="token keyword">return</span> <span class="token function">toPrettyFormatArray</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e1<span class="token punctuation">)</span><span class="token punctuation">{</span>               <span class="token keyword">return</span> jsonString<span class="token punctuation">;</span>           <span class="token punctuation">}</span>       <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">toPrettyFormat</span><span class="token punctuation">(</span><span class="token class-name">String</span> json<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">JsonParser</span> jsonParser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JsonParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">JsonObject</span> jsonObject <span class="token operator">=</span> jsonParser<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAsJsonObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Gson</span> gson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GsonBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setPrettyPrinting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> gson<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>jsonObject<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">toPrettyFormatArray</span><span class="token punctuation">(</span><span class="token class-name">String</span> json<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">JsonParser</span> jsonParser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JsonParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">JsonArray</span> jsonArray <span class="token operator">=</span> jsonParser<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAsJsonArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Gson</span> gson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GsonBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setPrettyPrinting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> gson<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>jsonArray<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="结果示例"><a href="#结果示例" class="headerlink" title="结果示例"></a>结果示例</h4><p>JSON Object</p><pre class="language-none"><code class="language-none">&gt;&gt; {"name":"jue","age":30}{  "name": "jue",  "age": 30}</code></pre><p>JSON Array</p><pre class="language-none"><code class="language-none">&gt;&gt; [{"name":"jue","age":30},{"name":"kai","age":12}][  {    "name": "jue",    "age": 30  },  {    "name": "kai",    "age": 12  }]</code></pre><h3 id="Alibaba-fastjson"><a href="#Alibaba-fastjson" class="headerlink" title="Alibaba fastjson"></a>Alibaba fastjson</h3><p>说明：FastJson 通过 Tab 键 进行换行后的格式化。</p><h4 id="引入依赖-1"><a href="#引入依赖-1" class="headerlink" title="引入依赖"></a>引入依赖</h4><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>fastjson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.2.78<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></code></pre><h4 id="JSON-格式化-1"><a href="#JSON-格式化-1" class="headerlink" title="JSON 格式化"></a>JSON 格式化</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">jsonFormat</span><span class="token punctuation">(</span><span class="token class-name">String</span> jsonString<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">toPrettyFormat</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> jsonString<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">toPrettyFormat</span><span class="token punctuation">(</span><span class="token class-name">String</span> jsonString<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token class-name">JSONObject</span> jsonObject <span class="token operator">=</span> <span class="token class-name">JSONObject</span><span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">JSONObject</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>jsonObject<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">JSONException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">toPrettyFormatArray</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">toPrettyFormatArray</span><span class="token punctuation">(</span><span class="token class-name">String</span> json<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">JSONArray</span> jsonArray <span class="token operator">=</span> <span class="token class-name">JSONArray</span><span class="token punctuation">.</span><span class="token function">parseArray</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">JSONArray</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>jsonArray<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="结果示例-1"><a href="#结果示例-1" class="headerlink" title="结果示例"></a>结果示例</h4><p>JSON Object</p><pre class="language-none"><code class="language-none">&gt;&gt; {"name":"jue","age":30}{"name":"jue","age":30}</code></pre><p>JSON Array</p><pre class="language-none"><code class="language-none">&gt;&gt; [{"name":"jue","age":30},{"name":"kai","age":12}][{"name":"jue","age":30},{"name":"kai","age":12}]</code></pre><h3 id="Jackson"><a href="#Jackson" class="headerlink" title="Jackson"></a>Jackson</h3><p>说明：Jackson 使用 2 个空格作为换行后的格式转换。</p><h4 id="引入依赖-2"><a href="#引入依赖-2" class="headerlink" title="引入依赖"></a>引入依赖</h4><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jackson-databind<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.13.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></code></pre><h4 id="JSON-格式化-2"><a href="#JSON-格式化-2" class="headerlink" title="JSON&nbsp;格式化"></a>JSON&nbsp;格式化</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">jsonFormat</span><span class="token punctuation">(</span><span class="token class-name">String</span> jsonString<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token class-name">ObjectMapper</span> mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> obj <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> mapper<span class="token punctuation">.</span><span class="token function">writerWithDefaultPrettyPrinter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> jsonString<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>普通输出：</p><pre class="language-java" data-language="java"><code class="language-java">mapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>格式化 / 美化 / 优雅的输出：</p><pre class="language-java" data-language="java"><code class="language-java">mapper<span class="token punctuation">.</span><span class="token function">writerWithDefaultPrettyPrinter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="结果示例-2"><a href="#结果示例-2" class="headerlink" title="结果示例"></a>结果示例</h4><p>JSON Object</p><pre class="language-none"><code class="language-none">&gt;&gt; {"name":"jue","age":30}{  "name" : "jue",  "age" : 30}</code></pre><p>JSON Array</p><pre class="language-none"><code class="language-none">&gt;&gt; [{"name":"jue","age":30},{"name":"kai","age":12}][ {  "name" : "jue",  "age" : 30}, {  "name" : "kai",  "age" : 12} ]</code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;通过以下方式格式化 JSON 字符串。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Google Gson&lt;/li&gt;
&lt;li&gt;Alibaba fastjson&lt;/li&gt;
&lt;li&gt;Jackson&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Java" scheme="https://jueee.github.io/categories/Java/"/>
    
    <category term="JavaClass" scheme="https://jueee.github.io/categories/Java/JavaClass/"/>
    
    
    <category term="Java" scheme="https://jueee.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 的时间处理函数</title>
    <link href="https://jueee.github.io/2022/01/2022-01-21-MySQL%E7%9A%84%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0/"/>
    <id>https://jueee.github.io/2022/01/2022-01-21-MySQL%E7%9A%84%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0/</id>
    <published>2022-01-21T00:00:00.000Z</published>
    <updated>2022-02-18T07:19:51.010Z</updated>
    
    <content type="html"><![CDATA[<p>MySQL 的时间处理相关函数汇总。</p><p>参考文档：<span class="exturl" data-url="aHR0cHM6Ly9kZXYubXlzcWwuY29tL2RvYy9yZWZtYW4vOC4wL2VuL2RhdGUtYW5kLXRpbWUtZnVuY3Rpb25zLmh0bWw=">https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html<i class="fa fa-external-link-alt"></i></span></p><a id="more"></a><h3 id="当前时间"><a href="#当前时间" class="headerlink" title="当前时间"></a>当前时间</h3><p>now () 以 '<em><code>YYYY-MM-DD hh:mm:ss</code></em>' 格式返回当前时间。</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">&gt;&gt; select now()2022-01-21 12:21:04</code></pre><h3 id="时间戳"><a href="#时间戳" class="headerlink" title="时间戳"></a>时间戳</h3><h4 id="unix-timestamp"><a href="#unix-timestamp" class="headerlink" title="unix_timestamp"></a>unix_timestamp</h4><p>将时间转换为时间戳格式：</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">&gt;&gt; SELECT unix_timestamp()&gt;&gt; SELECT unix_timestamp(now())&gt;&gt; SELECT unix_timestamp('2022-01-21 12:21:04')1642738864</code></pre><h4 id="from-unixtime"><a href="#from-unixtime" class="headerlink" title="from_unixtime"></a>from_unixtime</h4><p>将时间戳转为时间格式：</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">&gt;&gt; SELECT from_unixtime(1642738864)2022-01-21 12:21:04</code></pre><p>进行 <span class="exturl" data-url="aHR0cHM6Ly9kZXYubXlzcWwuY29tL2RvYy9yZWZtYW4vOC4wL2VuL2RhdGUtYW5kLXRpbWUtZnVuY3Rpb25zLmh0bWwjZnVuY3Rpb25fZGF0ZS1mb3JtYXQ=">格式化<i class="fa fa-external-link-alt"></i></span>：</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">&gt;&gt; SELECT from_unixtime(1642738864,'%Y-%m-%d %H.%i.%s')2022-01-21 12.21.04</code></pre><h3 id="时间格式化"><a href="#时间格式化" class="headerlink" title="时间格式化"></a>时间格式化</h3><pre class="language-mysql" data-language="mysql"><code class="language-mysql">select date_format(now(),'%Y-%m-%d')</code></pre><h3 id="时间计算"><a href="#时间计算" class="headerlink" title="时间计算"></a>时间计算</h3><h4 id="DATE-ADD-增加时间"><a href="#DATE-ADD-增加时间" class="headerlink" title="DATE_ADD 增加时间"></a>DATE_ADD 增加时间</h4><pre class="language-mysql" data-language="mysql"><code class="language-mysql">set @dt = now();select date_add(@dt, interval 1 day); -- 加1天select date_add(@dt, interval 1 hour); -- 加1小时select date_add(@dt, interval 1 minute); --  加1分钟select date_add(@dt, interval 1 second); -- 加1秒select date_add(@dt, interval 1 microsecond);-- 加1毫秒select date_add(@dt, interval 1 week);-- 加1周select date_add(@dt, interval 1 month);-- 加1月select date_add(@dt, interval 1 quarter);-- 加1季select date_add(@dt, interval 1 year);-- 加1年</code></pre><h4 id="DATE-SUB-减少时间"><a href="#DATE-SUB-减少时间" class="headerlink" title="DATE_SUB 减少时间"></a>DATE_SUB 减少时间</h4><pre class="language-mysql" data-language="mysql"><code class="language-mysql">set @dt = now();select date_sub(@dt, interval 1 day); -- 减1天select date_sub(@dt, interval 1 hour); -- 减1小时select date_sub(@dt, interval 1 minute); --  减1分钟select date_sub(@dt, interval 1 second); -- 减1秒select date_sub(@dt, interval 1 microsecond);-- 减1毫秒select date_sub(@dt, interval 1 week);-- 减1周select date_sub(@dt, interval 1 month);-- 减1月select date_sub(@dt, interval 1 quarter);-- 减1季select date_sub(@dt, interval 1 year);-- 减1年</code></pre><h4 id="DATEDIFF-间隔天数"><a href="#DATEDIFF-间隔天数" class="headerlink" title="DATEDIFF 间隔天数"></a>DATEDIFF 间隔天数</h4><p>格式：DATEDIFF (expr1,expr2)</p><p>返回：从一个日期到另一个日期的天数，即 *<code>expr1</code>*- *<code>expr2</code>*。</p><p><em><code>expr1</code></em> 和 *<code>expr2</code>* 是日期或日期和时间表达式。计算中仅使用值的日期部分。</p><pre class="language-none"><code class="language-none">&gt;&gt; SELECT DATEDIFF('2021-12-31 23:59:59','2021-01-01')364</code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;MySQL 的时间处理相关函数汇总。&lt;/p&gt;
&lt;p&gt;参考文档：&lt;a href=&quot;https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html&quot;&gt;https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Database" scheme="https://jueee.github.io/categories/Database/"/>
    
    <category term="MySQL" scheme="https://jueee.github.io/categories/Database/MySQL/"/>
    
    
    <category term="MySQL" scheme="https://jueee.github.io/tags/MySQL/"/>
    
    <category term="Database" scheme="https://jueee.github.io/tags/Database/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 的 IP 处理函数</title>
    <link href="https://jueee.github.io/2022/01/2022-01-20-MySQL%E7%9A%84IP%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0/"/>
    <id>https://jueee.github.io/2022/01/2022-01-20-MySQL%E7%9A%84IP%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0/</id>
    <published>2022-01-20T00:00:00.000Z</published>
    <updated>2022-01-26T09:13:18.432Z</updated>
    
    <content type="html"><![CDATA[<p>当前很多应用都适用字符串 char (15) 来存储 IP 地址（占用 16 个字节），利用 inet_aton () 和 inet_ntoa () 函数，来存储 IP 地址效率很高，适用 unsigned int 就可以满足需求，不需要使用 bigint，只需要 4 个字节，节省存储空间，同时效率也高很多。</p><a id="more"></a><h3 id="inet-aton"><a href="#inet-aton" class="headerlink" title="inet_aton()"></a>inet_aton()</h3><p>将 ip 地址转换成数字型。</p><p>给出一个作为字符串的网络地址的 "点地址"(如 127.0.0.1) 表示，返回一个代表该地址数值的整数。地址可以是 4 或 8 比特地址。</p><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>网络地址：<br><strong>192.168.33.123</strong>，<br>每一个值最大不会越过 255，也就是十六进制的 FF，两个 Byte 刚好表示的最大值是 255，<br>这样子，就可以用一个 32 位的整形来保存这个地址：</p><pre class="language-none"><code class="language-none">      192       168        33       1231100 0000 1010 1000 0010 0001 0111 1011</code></pre><p>把这些二进制合在一起就是 32 位的数 11000000101010000010000101111011 了，<br>十进制为<br>3232244091。</p><p>即算法：<strong>第一位乘 256 三次方 + 第二位乘 256 二次方 + 第三位乘 256 + 第四位</strong></p><pre class="language-none"><code class="language-none">&gt;&gt; select inet_aton('192.168.33.123')3232244091</code></pre><p>如果是错误的 IP 格式，则该函数会返回 null。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><pre class="language-none"><code class="language-none">&gt;&gt; select inet_aton('101.102.103.104') 1701209960</code></pre><p>即：</p><pre class="language-none"><code class="language-none">101*256*256*256 + 102*256*256 + 103*256 + 104 = 1701209960</code></pre><p>错误解析：</p><pre class="language-none"><code class="language-none">&gt;&gt; select inet_aton('101.102.103.284') NULL</code></pre><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>在存储由 inet_aton () 产生的值时，推荐你使用 INT UNSIGNED 列。假如你使用 (带符号) INT 列，则相应的第一个八位组大于 127 的 IP 地址值会被截至 2147483647 (即  INET_ATON ('127.255.255.255') 所返回的值)。</p><h3 id="inet-ntoa"><a href="#inet-ntoa" class="headerlink" title="inet_ntoa()"></a>inet_ntoa()</h3><p>将数字型转换成 ip 地址。</p><p>给定一个数字网络地址 (4 或 8 比特)，返回作为字符串的该地址的 ipV4 表示。</p><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h4><pre class="language-none"><code class="language-none">&gt;&gt; select inet_ntoa(1701209960)101.102.103.104</code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;当前很多应用都适用字符串 char (15) 来存储 IP 地址（占用 16 个字节），利用 inet_aton () 和 inet_ntoa () 函数，来存储 IP 地址效率很高，适用 unsigned int 就可以满足需求，不需要使用 bigint，只需要 4 个字节，节省存储空间，同时效率也高很多。&lt;/p&gt;</summary>
    
    
    
    <category term="Database" scheme="https://jueee.github.io/categories/Database/"/>
    
    <category term="MySQL" scheme="https://jueee.github.io/categories/Database/MySQL/"/>
    
    
    <category term="MySQL" scheme="https://jueee.github.io/tags/MySQL/"/>
    
    <category term="Database" scheme="https://jueee.github.io/tags/Database/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式之环视边界匹配</title>
    <link href="https://jueee.github.io/2022/01/2022-01-19-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%B9%8B%E7%8E%AF%E8%A7%86%E8%BE%B9%E7%95%8C%E5%8C%B9%E9%85%8D/"/>
    <id>https://jueee.github.io/2022/01/2022-01-19-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%B9%8B%E7%8E%AF%E8%A7%86%E8%BE%B9%E7%95%8C%E5%8C%B9%E9%85%8D/</id>
    <published>2022-01-19T00:00:00.000Z</published>
    <updated>2022-01-19T08:47:35.644Z</updated>
    
    <content type="html"><![CDATA[<p>正则表达式大家都比较熟悉了，基础的语法就不多介绍了。今天主要分享下一种叫做 “环视边界” 的匹配规则，在特定场景下，是一个非常有用的技巧。</p><a id="more"></a><h3 id="环视边界匹配规则"><a href="#环视边界匹配规则" class="headerlink" title="环视边界匹配规则"></a>环视边界匹配规则</h3><p>顾名思义，环视边界匹配仍然是一种边界匹配。而环视的字面意思就是左右看看，需要左右符合一些条件，本质上，它也是匹配边界，对边界有一些要求，这个要求是针对左边或右边的字符串的。</p><p>根据要求不同，分为 4 种环视：</p><ol><li>肯定顺序环视，语法是 (? =...)，要求右边的字符串匹配指定的表达式。比如表达式 abc (? =def), (? =def) 在字符 c 右面，即匹配 c 右面的边界。对这个边界的要求是：它的右边有 def，比如 abcdef，如果没有，比如 abcd，则不匹配。</li><li>否定顺序环视，语法是 (? ! ...)，要求右边的字符串不能匹配指定的表达式。比如表达式 s (? ! ing)，匹配一般的 s，但不匹配后面有 ing 的 s。注意：避免与排除型字符组混淆，比如 <code>s[^ing]</code>,<code>s[^ing]</code>&nbsp;匹配的是两个字符，第一个是 s，第二个是 i、n、g 以外的任意一个字符。</li><li>肯定逆序环视，语法是 (? &lt;=...)，要求左边的字符串匹配指定的表达式。比如表达式 (? &lt;=\s) abc, (? &lt;=\s) 在字符 a 左边，即匹配 a 左边的边界。对这个边界的要求是：它的左边必须是空白字符。</li><li>否定逆序环视，语法是 (? &lt;! ...)，要求左边的字符串不能匹配指定的表达式。比如表达式 (? &lt;! \w) cat, (? &lt;! \w) 在字符 c 左边，即匹配 c 左边的边界。对这个边界的要求是：它的左边不能是单词字符。</li></ol><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><h4 id="邮编"><a href="#邮编" class="headerlink" title="邮编"></a>邮编</h4><p>国内的邮编为 6 位数字，那么最简单的规则就是</p><blockquote><p>[0-9]{6}</p></blockquote><p>这个规则可用于判断给定的一个字符串是否是邮编，但是这个正则用于查找是不够的，比如输入 1234567，7 个字符，同样也满足这个表达式，但这肯定不是一个邮编。这怎么办呢？可以使用环视边界匹配，对于左边界，它前面的字符不能是数字，环视表达式为：</p><blockquote><p>(?&lt;![0-9])</p></blockquote><p>对于右边界，它右边的字符不能是数字，环视表达式为：</p><blockquote><p>(?![0-9])</p></blockquote><p>那么完整的表达式就是：</p><blockquote><p>(?&lt;![0-9])[0-9]{6}(?![0-9])</p></blockquote><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>邮编是相对比较简单的例子，对于其他复杂的表达式，我们都可以按照这个方法，在原有的表达式基础上，加上环视边界规则，这样，我们的正则表达式不仅可以用于判断，也可以用于查找。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;正则表达式大家都比较熟悉了，基础的语法就不多介绍了。今天主要分享下一种叫做 “环视边界” 的匹配规则，在特定场景下，是一个非常有用的技巧。&lt;/p&gt;</summary>
    
    
    
    <category term="Blog" scheme="https://jueee.github.io/categories/Blog/"/>
    
    
    <category term="Blog" scheme="https://jueee.github.io/tags/Blog/"/>
    
  </entry>
  
</feed>
