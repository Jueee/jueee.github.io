<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小决的专栏</title>
  
  <subtitle>进一寸有一寸的欢喜</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://jueee.github.io/"/>
  <updated>2020-08-13T10:49:50.472Z</updated>
  <id>https://jueee.github.io/</id>
  
  <author>
    <name>小决</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用 Jrebel，实现热部署</title>
    <link href="https://jueee.github.io/2020/08/2020-08-13-%E4%BD%BF%E7%94%A8Jrebel%EF%BC%8C%E5%AE%9E%E7%8E%B0%E7%83%AD%E9%83%A8%E7%BD%B2/"/>
    <id>https://jueee.github.io/2020/08/2020-08-13-%E4%BD%BF%E7%94%A8Jrebel%EF%BC%8C%E5%AE%9E%E7%8E%B0%E7%83%AD%E9%83%A8%E7%BD%B2/</id>
    <published>2020-08-13T00:00:00.000Z</published>
    <updated>2020-08-13T10:49:50.472Z</updated>
    
    <content type="html"><![CDATA[<p>JRebel 是一套 JavaEE 开发工具。JRebel 允许开发团队在有限的时间内完成更多的任务修正更多的问题，发布更高质量的软件产品。 </p><h3 id="什么是热部署？"><a href="#什么是热部署？" class="headerlink" title="什么是热部署？"></a>什么是热部署？</h3><p>所谓热部署，就是在应用正在运行的时候升级软件，却不需要重新启动应用。对于 Java 应用程序来说，热部署就是在运行时更新 Java 类文件。</p><p>在基于 Java 的应用服务器实现热部署的过程中，类装入器扮演着重要的角色。大多数基于 Java 的应用服务器，包括 EJB 服务器和 Servlet 容器，都支持热部署。类装入器不能重新装入一个已经装入的类，但只要使用一个新的类装入器实例，就可以将类再次装入一个正在运行的应用程序。</p><h3 id="Jrebel-介绍"><a href="#Jrebel-介绍" class="headerlink" title="Jrebel 介绍"></a>Jrebel 介绍</h3><p>官网：<span class="exturl" data-url="aHR0cHM6Ly9tYW51YWxzLmpyZWJlbC5jb20vanJlYmVsLw==">https://manuals.jrebel.com/jrebel/<i class="fa fa-external-link-alt"></i></span></p><p>JRebel 是一个 JVM Java 代理，它与应用程序服务器集成，从而使类可以使用现有的类加载器<strong>重新</strong>加载。只有更改的类会重新编译并立即重新加载到正在运行的应用程序中。</p><h3 id="Jrebel-功能"><a href="#Jrebel-功能" class="headerlink" title="Jrebel 功能"></a>Jrebel 功能</h3><p>Jrebel 可以实现基于类、XML 文件的增删查改，也能够实现方法体的增删查改的热部署。</p><p>JRebel 工作在与 HotSwap 不同的一个抽象层面上。鉴于 HotSwap 是工作在虚拟机层面上，且依赖于 JVM 的内部运作，JRebel 用到了 JVM 的两个显著的功能特征 —— 抽象的字节码和类加载器。类加载器允许 JRebel 辨别出类被加载的时刻，然后实时地翻译字节码，用以在虚拟机和可执行代码之间创建另一个抽象层。</p><table><thead><tr><th align="left">支持类别</th><th align="left"> Jrebel</th><th align="left">JVM Hot Swap</th></tr></thead><tbody><tr><td align="left"> 方法体内代码的修改</td><td align="left">支持</td><td align="left">支持</td></tr><tr><td align="left">方法参数、名称、返回值的变动</td><td align="left">支持</td><td align="left">不支持</td></tr><tr><td align="left">方法体注解的变动</td><td align="left">支持</td><td align="left">不支持</td></tr><tr><td align="left">新增、删除 N (N&gt;0) 个方法</td><td align="left">支持</td><td align="left">不支持</td></tr><tr><td align="left">类的增删查改，其他类对此新增类的引用</td><td align="left">支持</td><td align="left">不支持</td></tr><tr><td align="left">新增接口，以及它的实现类</td><td align="left">支持</td><td align="left">不支持</td></tr><tr><td align="left">改变静态字段值（仅 static）</td><td align="left">不支持</td><td align="left">不支持</td></tr><tr><td align="left">改变常量字段值（final static or final）</td><td align="left">支持</td><td align="left">不支持</td></tr><tr><td align="left">枚举类 / 值（增删查改），并对它调用</td><td align="left">支持</td><td align="left">不支持</td></tr></tbody></table><h3 id="Jrebel-安装"><a href="#Jrebel-安装" class="headerlink" title="Jrebel 安装"></a>Jrebel 安装</h3><h4 id="安装-Jrebel"><a href="#安装-Jrebel" class="headerlink" title="安装 Jrebel"></a>安装 Jrebel</h4><p>参考：<span class="exturl" data-url="aHR0cHM6Ly9tYW51YWxzLmpyZWJlbC5jb20vanJlYmVsL2lkZS9pbmRleC5odG1s">https://manuals.jrebel.com/jrebel/ide/index.html<i class="fa fa-external-link-alt"></i></span></p><p><img src="/images/2020/08/1597297821144.png" alt="1597297821144" loading="lazy"></p><h4 id="破解Jrebel"><a href="#破解Jrebel" class="headerlink" title="破解Jrebel"></a>破解 Jrebel</h4><ol><li>点击打开网站：<span class="exturl" data-url="aHR0cDovL215bmlnaHQudG9wOjEwMDg2Lw==">http://mynight.top:10086<i class="fa fa-external-link-alt"></i></span>，复制第二行链接</li><li><img src="/images/2020/08/1597297837282.png" alt="1597297837282" loading="lazy"></li><li><img src="/images/2020/08/1597297849629.png" alt="1597297849629" loading="lazy"></li><li><img src="/images/2020/08/1597297856954.png" alt="1597297856954" loading="lazy"></li><li><img src="/images/2020/08/1597297962755.png" alt="1597297962755" loading="lazy"></li><li>至此 Jrebel 全部破解完毕。</li></ol><h3 id="Jrebel-注意事项"><a href="#Jrebel-注意事项" class="headerlink" title="Jrebel 注意事项"></a>Jrebel 注意事项</h3><ol><li><p>每次重新编译加载 classes 文件的时候，控制台 console 都会输出一段文字：</p><p>（2018-03-30 10:49:53 JRebel: Reloading class “包名。类名.class”.）</p><p>这段文字代表该类已经重加载完毕，请确保这段文字输出以后，再调试。</p></li><li><p>以 Spring boot，启动的项目需要注意：<br>执行重新编译（recompile）类的时候，需要注意 被编译类 的依赖顺序。</p><p>例如：A 类实现了 B 接口（类 A 和接口 B 都被修改的前提下），那么需要先重新编译（recompile）B 接口<br>再重新编译（recompile）A 类。</p><p>当然，如果只修改了类 A 的内容，接口 B 未做修改，则只需要重新编译（recompile）类 A</p></li></ol>]]></content>
    
    <summary type="html">
    
      JRebel是一套JavaEE开发工具。JRebel允许开发团队在有限的时间内完成更多的任务修正更多的问题，发布更高质量的软件产品。
    
    </summary>
    
    
      <category term="软件" scheme="https://jueee.github.io/categories/%E8%BD%AF%E4%BB%B6/"/>
    
      <category term="IDE" scheme="https://jueee.github.io/categories/%E8%BD%AF%E4%BB%B6/IDE/"/>
    
    
      <category term="软件" scheme="https://jueee.github.io/tags/%E8%BD%AF%E4%BB%B6/"/>
    
      <category term="IDE" scheme="https://jueee.github.io/tags/IDE/"/>
    
  </entry>
  
  <entry>
    <title>Arthas 之通过 thread 命令定位线程问题</title>
    <link href="https://jueee.github.io/2020/08/2020-08-13-Arthas%E4%B9%8B%E9%80%9A%E8%BF%87thread%E5%91%BD%E4%BB%A4%E5%AE%9A%E4%BD%8D%E7%BA%BF%E7%A8%8B%E9%97%AE%E9%A2%98/"/>
    <id>https://jueee.github.io/2020/08/2020-08-13-Arthas%E4%B9%8B%E9%80%9A%E8%BF%87thread%E5%91%BD%E4%BB%A4%E5%AE%9A%E4%BD%8D%E7%BA%BF%E7%A8%8B%E9%97%AE%E9%A2%98/</id>
    <published>2020-08-13T00:00:00.000Z</published>
    <updated>2020-08-13T10:46:10.080Z</updated>
    
    <content type="html"><![CDATA[<p>通过 Arthas 中的 thread 命令，可以查看当前线程信息及线程的堆栈。从而可以定位线程问题。</p><h3 id="thread-命令介绍"><a href="#thread-命令介绍" class="headerlink" title="thread 命令介绍"></a>thread 命令介绍</h3><p>官方文档：</p><blockquote><p><span class="exturl" data-url="aHR0cHM6Ly9hbGliYWJhLmdpdGh1Yi5pby9hcnRoYXMvdGhyZWFkLmh0bWw=">https://alibaba.github.io/arthas/thread.html<i class="fa fa-external-link-alt"></i></span></p></blockquote><h4 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h4><p>使用 <code>thread --help</code> 获取 thread 命令的帮助信息：</p><p><img src="/images/2020/08/1597314852787.png" alt="1597314852787" loading="lazy"></p><p>主要参数说明如下：</p><table><thead><tr><th>参数名称</th><th>参数说明</th></tr></thead><tbody><tr><td><em> id</em></td><td> 线程 id</td></tr><tr><td>[n:]</td><td> 指定最忙的前 N 个线程并打印堆栈</td></tr><tr><td> [b]</td><td> 找出当前阻塞其他线程的线程</td></tr><tr><td> [i <code>&lt;value&gt;</code>]</td><td> 指定 cpu 占比统计的采样间隔，单位为毫秒</td></tr></tbody></table><h4 id="线程常见状态"><a href="#线程常见状态" class="headerlink" title="线程常见状态"></a>线程常见状态</h4><p>定位线程问题之前，先回顾一下线程的几种常见状态：</p><ul><li><p><strong>RUNNABLE</strong> 运行中</p></li><li><p><strong>TIMED_WAITIN</strong> 调用了以下方法的线程会进入 <strong>TIMED_WAITING</strong>：</p><ol><li>Thread#sleep()</li><li>Object#wait () 并加了超时参数</li><li> Thread#join () 并加了超时参数</li><li> LockSupport#parkNanos()</li><li>LockSupport#parkUntil()</li></ol></li><li><p><strong>WAITING</strong> 当线程调用以下方法时会进入 WAITING 状态：</p><ol><li>Object#wait () 而且不加超时参数</li><li> Thread#join () 而且不加超时参数</li><li> LockSupport#park()</li></ol></li><li><p><strong>BLOCKED</strong> 阻塞，等待锁</p></li></ul><h4 id="cpu占比的统计"><a href="#cpu占比的统计" class="headerlink" title="cpu占比的统计"></a>cpu 占比的统计</h4><blockquote><p>这里的 cpu 统计的是，一段采样间隔内，当前 JVM 里各个线程所占用的 cpu 时间占总 cpu 时间的百分比。</p><p>其计算方法为： 首先进行一次采样，获得所有线程的 cpu 的使用时间 (调用的是 <code>java.lang.management.ThreadMXBean#getThreadCpuTime</code> 这个接口)，然后睡眠一段时间，默认 100ms，可以通过 <code>-i</code> 参数指定，然后再采样一次，最后得出这段时间内各个线程消耗的 cpu 时间情况，最后算出百分比。</p></blockquote><blockquote><p>注意： 这个统计也会产生一定的开销（JDK 这个接口本身开销比较大），因此会看到 as 的线程占用一定的百分比，为了降低统计自身的开销带来的影响，可以把采样间隔拉长一些，比如 5000 毫秒。</p></blockquote><blockquote><p>如果想看从 Java 进程启动开始到现在的 cpu 占比情况：可以使用 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL29sZHJhdGxlZS91c2VmdWwtc2NyaXB0cy9ibG9iL21hc3Rlci9kb2NzL2phdmEubWQjLXNob3ctYnVzeS1qYXZhLXRocmVhZHM=">show-busy-java-threads<i class="fa fa-external-link-alt"></i></span> 这个脚本</p></blockquote><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><p>首先编写一个有各种情况的测试类运行起来，再使用 <strong>Arthas</strong> 进行问题定位：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> hashSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">ExecutorService</span> executorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">addHashSetThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 不断的向 hashSet 集合增加数据</span>        <span class="token function">cpuHigh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 模拟 CPU 过高</span>        <span class="token function">cpuNormal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 模拟线程阻塞</span>        <span class="token function">deadThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 模拟线程死锁</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 极度消耗CPU的线程     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">cpuHigh</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"cpu start 100"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 添加到线程</span>        executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 普通消耗CPU的线程     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">cpuNormal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"cpu start"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 模拟线程阻塞,向已经满了的线程池提交线程     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"thread start"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 添加到线程</span>        executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 死锁     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">deadThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">/** 创建资源 */</span>        <span class="token class-name">Object</span> resourceA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> resourceB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 创建线程</span>        <span class="token class-name">Thread</span> threadA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>resourceA<span class="token punctuation">)</span> <span class="token punctuation">{</span>                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" get ResourceA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"waiting get resourceB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>resourceB<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" get resourceB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> threadB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>resourceB<span class="token punctuation">)</span> <span class="token punctuation">{</span>                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" get ResourceB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"waiting get resourceA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>resourceA<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" get resourceA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        threadA<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        threadB<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 不断的向 hashSet 集合添加数据     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">addHashSetThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 初始化常量</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    hashSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"count"</span> <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    count<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="定位-CPU-使用较高的线程"><a href="#定位-CPU-使用较高的线程" class="headerlink" title="定位 CPU 使用较高的线程"></a>定位 CPU 使用较高的线程</h3><p>上面的代码例子有一个 <code>CPU</code> 空转的死循环，非常的消耗 <code>CPU性能</code>，那么怎么找出来呢？</p><p>使用 <strong>thread</strong> 查看<strong>所有</strong>线程信息，同时会列出每个线程的 <code>CPU</code> 使用率，可以看到图里 ID 为 12 的线程 CPU 使用 100%。</p><p><img src="/images/2020/08/1597314558126.png" alt="1597314558126" loading="lazy"></p><p>使用命令 <strong>thread 12</strong> 查看 CPU 消耗较高的 12 号线程信息，可以看到 CPU 使用较高的方法和行数。</p><p><img src="/images/2020/08/1597314597613.png" alt="1597314597613" loading="lazy"></p><p>如果只是为了寻找 CPU 使用较高的线程，可以直接使用命令 <strong>thread -n [显示的线程个数]</strong> ，就可以排列出 CPU 使用率 <strong>Top N</strong> 的线程。</p><p><img src="/images/2020/08/1597314636547.png" alt="1597314636547" loading="lazy"></p><p>定位到的 CPU 使用最高的方法：</p><p><img src="/images/2020/08/1597314662083.png" alt="1597314662083" loading="lazy"></p><h3 id="定位线程阻塞"><a href="#定位线程阻塞" class="headerlink" title="定位线程阻塞"></a>定位线程阻塞</h3><p>上面的模拟代码里，定义了线程池大小为 1 的线程池，然后在 <code>cpuHigh</code> 方法里提交了一个线程，在 <code>thread</code> 方法再次提交了一个线程，后面的这个线程因为线程池已满，会阻塞下来。</p><p>使用 <strong>thread | grep pool</strong> 命令查看线程池里线程信息。</p><p><img src="/images/2020/08/1597314720720.png" alt="1597314720720" loading="lazy"></p><p>可以看到线程池有 <strong>WAITING</strong> 的线程：</p><p><img src="/images/2020/08/1597314739701.png" alt="1597314739701" loading="lazy"></p><h3 id="定位线程死锁"><a href="#定位线程死锁" class="headerlink" title="定位线程死锁"></a>定位线程死锁</h3><p>上面的模拟代码里 <code>deadThread</code> 方法实现了一个死锁，使用 <strong>thread -b</strong> 命令查看直接定位到死锁信息。</p><p><img src="/images/2020/08/1597314791433.png" alt="1597314791433" loading="lazy"></p>]]></content>
    
    <summary type="html">
    
      通过Arthas中的thread命令，可以查看当前线程信息及线程的堆栈。从而可以定位线程问题。
    
    </summary>
    
    
      <category term="Java" scheme="https://jueee.github.io/categories/Java/"/>
    
      <category term="Java诊断" scheme="https://jueee.github.io/categories/Java/Java%E8%AF%8A%E6%96%AD/"/>
    
    
      <category term="Java诊断" scheme="https://jueee.github.io/tags/Java%E8%AF%8A%E6%96%AD/"/>
    
      <category term="Arthas" scheme="https://jueee.github.io/tags/Arthas/"/>
    
  </entry>
  
  <entry>
    <title>浏览器提速软件 SpeedyFox</title>
    <link href="https://jueee.github.io/2020/08/2020-08-12-%E6%B5%8F%E8%A7%88%E5%99%A8%E6%8F%90%E9%80%9F%E8%BD%AF%E4%BB%B6SpeedyFox/"/>
    <id>https://jueee.github.io/2020/08/2020-08-12-%E6%B5%8F%E8%A7%88%E5%99%A8%E6%8F%90%E9%80%9F%E8%BD%AF%E4%BB%B6SpeedyFox/</id>
    <published>2020-08-12T00:00:00.000Z</published>
    <updated>2020-08-13T06:07:28.402Z</updated>
    
    <content type="html"><![CDATA[<h3 id="软件介绍"><a href="#软件介绍" class="headerlink" title="软件介绍"></a>软件介绍</h3><p>SpeedyFox 是一个超级简单的工具，一个单窗口，没有选项的工具来优化浏览器的性能。</p><p>SpeedyFox 声称通过对 SQLITE 数据库进行碎片整理来加速浏览器。它说，这些数据库随着时间的推移而变得变形，减慢了启动速度，并推迟了使用 Cookie 和历史记录的操作。</p><h3 id="下载网址"><a href="#下载网址" class="headerlink" title="下载网址"></a>下载网址</h3><blockquote><p><span class="exturl" data-url="aHR0cHM6Ly9jcnlzdGFsaWRlYS5jb20vc3BlZWR5Zm94">https://crystalidea.com/speedyfox<i class="fa fa-external-link-alt"></i></span></p></blockquote><h3 id="使用软件"><a href="#使用软件" class="headerlink" title="使用软件"></a>使用软件</h3><p>Edge 浏览器，Chrome、Firefox 等浏览器，以及大部分国产浏览器，都可以使用。SpeedyFox 能自动识别，浏览器的配置文件路径。</p><p>所以，打开软件，只要直接点击 Optimize 按钮就行了，不需要复杂的配置。</p><p>优化过程可能需要 5 秒钟到一分钟，具体取决于数据库的大小。整个优化过程很安全，因为它不会影响您的历史记录，书签，密码等。</p><p>根据您的浏览活动，建议每 1-2 周对您的个人资料进行一次优化。</p><p>如下图所示：</p><p><img src="/images/2020/08/1597286104064.png" alt="1597286104064" loading="lazy"></p>]]></content>
    
    <summary type="html">
    
      SpeedyFox是一个超级简单的工具，一个单窗口，没有选项的工具来优化浏览器的性能。
    
    </summary>
    
    
      <category term="Windows" scheme="https://jueee.github.io/categories/Windows/"/>
    
      <category term="软件" scheme="https://jueee.github.io/categories/Windows/%E8%BD%AF%E4%BB%B6/"/>
    
    
      <category term="Windows" scheme="https://jueee.github.io/tags/Windows/"/>
    
      <category term="软件" scheme="https://jueee.github.io/tags/%E8%BD%AF%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 中 DBlink 的使用</title>
    <link href="https://jueee.github.io/2020/08/2020-08-11-MySQL%E4%B8%ADDBlink%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://jueee.github.io/2020/08/2020-08-11-MySQL%E4%B8%ADDBlink%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2020-08-11T00:00:00.000Z</published>
    <updated>2020-08-13T06:47:53.554Z</updated>
    
    <content type="html"><![CDATA[<p>在实际工作中，我们可能会遇到需要操作其他数据库实例的部分表，但又不想系统连接多库。此时我们就需要用到数据表映射。</p><p>如同 Oracle 中的 DBlink 一般，使用过 Oracle DBlink 数据库链接的人都知道可以跨实例来进行数据查询，同样的，Mysql 自带的 FEDERATED 引擎完美的帮我们解决了该问题。</p><h3 id="检查引擎"><a href="#检查引擎" class="headerlink" title="检查引擎"></a>检查引擎</h3><p>查看 target 端是否安装了 FEDERATED 存储引擎：</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; show engines ;</code></pre><p>例如：</p><p><img src="/images/2020/08/1597126521400.png" alt="1597126521400" loading="lazy"></p><h3 id="安装引擎"><a href="#安装引擎" class="headerlink" title="安装引擎"></a>安装引擎</h3><p>注意：如果没有安装 <strong>FEDERATED 引擎</strong>，执行：</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">install plugin federated soname 'ha_federated.so';</code></pre><p>例如：</p><p><img src="/images/2020/08/1597126538702.png" alt="1597126538702" loading="lazy"></p><p>再次检查引擎：</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; show engines ;</code></pre><p>例如：</p><p><img src="/images/2020/08/1597126564647.png" alt="1597126564647" loading="lazy"></p><h3 id="开启引擎"><a href="#开启引擎" class="headerlink" title="开启引擎"></a>开启引擎</h3><p>将 federated 添加到 my.cnf 重启数据库</p><pre class="language-cnf" data-language="cnf"><code class="language-cnf">vi /etc/my.cnf[mysqld]federated</code></pre><p>再次检查引擎，例如：</p><p><img src="/images/2020/08/1597126649766.png" alt="1597126649766" loading="lazy"></p><h3 id="建表访问"><a href="#建表访问" class="headerlink" title="建表访问"></a>建表访问</h3><p>使用 CONNECTION 创建 FEDERATED 引擎表通用模型：</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE (......) ENGINE =FEDERATED CONNECTION='mysql://username:password@hostname:port/database/tablename'</code></pre><p>注意 ENGINE=FEDERATED CONNECTION 后为源端地址 避免使用带 @的密码</p><h3 id="使用总结"><a href="#使用总结" class="headerlink" title="使用总结"></a>使用总结</h3><p>基于 MySQL5.7.23 版本，笔者在源端及目标端实验了多种 DDL 及 DML，现简单总结如下，有兴趣的同学可以试试看。</p><ul><li>目标端建表结构可以与源端不一样 推荐与源端结构一致</li><li>源端 DDL (CREATE、ALTER、DROP 等语句) 语句更改表结构 目标端不会变化</li><li>源端 DML（SELECT、UPDATE、INSERT、DELETEt 等语句）语句目标端查询会同步</li><li>源端 drop 表 目标端结构还在但无法查询</li><li>目标端不能执行 DDL 语句</li><li>目标端执行 DML 语句 源端数据也会变化</li><li>目标端 truncate 表 源端表数据也会被清空</li><li>目标端 drop 表对源端无影响</li></ul><h3 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h3><p>目前 FEDERATED 引擎使用范围还不多，若确实有跨实例访问的需求，建议做好规范，个人总结最佳实践如下：</p><ol><li>源端专门创建只读权限的用户来供目标端使用。</li><li>目标端建议用 CREATE SERVER 方式创建 FEDERATED 表。</li><li>FEDERATED 表不宜太多，迁移时要特别注意。</li><li>目标端应该只做查询使用，禁止在目标端更改 FEDERATED 表。</li><li>建议目标端表名及结构和源端保持一致。</li><li>源端表结构变更后 目标端要及时删除重建。</li></ol>]]></content>
    
    <summary type="html">
    
      在实际工作中，我们可能会遇到需要操作其他数据库实例的部分表，但又不想系统连接多库。此时我们就需要用到数据表映射。如同Oracle中的DBlink一般，使用过Oracle DBlink数据库链接的人都知道可以跨实例来进行数据查询，同样的，Mysql自带的FEDERATED引擎完美的帮我们解决了该问题。
    
    </summary>
    
    
      <category term="MySQL" scheme="https://jueee.github.io/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="https://jueee.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Neo4j 初始化密码</title>
    <link href="https://jueee.github.io/2020/08/2020-08-10-Neo4j%E5%88%9D%E5%A7%8B%E5%8C%96%E5%AF%86%E7%A0%81/"/>
    <id>https://jueee.github.io/2020/08/2020-08-10-Neo4j%E5%88%9D%E5%A7%8B%E5%8C%96%E5%AF%86%E7%A0%81/</id>
    <published>2020-08-10T00:00:00.000Z</published>
    <updated>2020-08-13T10:42:42.984Z</updated>
    
    <content type="html"><![CDATA[<h3 id="初始化Neo4j"><a href="#初始化Neo4j" class="headerlink" title="初始化Neo4j"></a>初始化 Neo4j</h3><p>Web 浏览器访问：<code>http://IP:7474/</code></p><p>连接 URL 为 ：<code>bolt://IP:7687</code>，初始用户名、密码为 <code>neo4j</code>，如下图所示：</p><p><img src="/images/2020/08/1597130874884.png" alt="1597130874884" loading="lazy"></p><p>初始化登录成功后，会要求重置 neo4j 密码，修改并确认新密码。</p><p><img src="/images/2020/08/1597130933055.png" alt="1597130933055" loading="lazy"></p><h3 id="浏览器下更改密码"><a href="#浏览器下更改密码" class="headerlink" title="浏览器下更改密码"></a>浏览器下更改密码</h3><p>Web 浏览器访问：<code>http://IP:7474/</code>，登录成功后，输入命令：</p><pre class="language-none"><code class="language-none">:server change-password</code></pre><h3 id="命令行更改密码"><a href="#命令行更改密码" class="headerlink" title="命令行更改密码"></a>命令行更改密码</h3><ol><li>进入 neo4j 安装目录， 并进入 bin 目录；</li><li>运行 <code>./cypher-shell</code> 命令， 输入用户名，密码（初始默认用户名和密码为 neo4j）</li><li>输入命令: <code>CALL dbms.security.changePassword('123456');</code> 输入命令  <code>:exit;</code> 退出</li></ol><p>例如：</p><p><img src="/images/2020/08/1597132382397.png" alt="1597132382397" loading="lazy"></p><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p>neo4j 设置项：<span class="exturl" data-url="aHR0cHM6Ly9uZW80ai5jb20vZG9jcy9vcGVyYXRpb25zLW1hbnVhbC9jdXJyZW50L3JlZmVyZW5jZS9wcm9jZWR1cmVzLw==">https://neo4j.com/docs/operations-manual/current/reference/procedures/<i class="fa fa-external-link-alt"></i></span></p><p>设置初始化密码：<span class="exturl" data-url="aHR0cHM6Ly9uZW80ai5jb20vZG9jcy9vcGVyYXRpb25zLW1hbnVhbC9jdXJyZW50L2NvbmZpZ3VyYXRpb24vc2V0LWluaXRpYWwtcGFzc3dvcmQv">https://neo4j.com/docs/operations-manual/current/configuration/set-initial-password/<i class="fa fa-external-link-alt"></i></span></p><p>密码和用户恢复：<span class="exturl" data-url="aHR0cHM6Ly9uZW80ai5jb20vZG9jcy9vcGVyYXRpb25zLW1hbnVhbC9jdXJyZW50L2NvbmZpZ3VyYXRpb24vcGFzc3dvcmQtYW5kLXVzZXItcmVjb3Zlcnkv">https://neo4j.com/docs/operations-manual/current/configuration/password-and-user-recovery/<i class="fa fa-external-link-alt"></i></span></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;初始化Neo4j&quot;&gt;&lt;a href=&quot;#初始化Neo4j&quot; class=&quot;headerlink&quot; title=&quot;初始化Neo4j&quot;&gt;&lt;/a&gt;初始化 Neo4j&lt;/h3&gt;&lt;p&gt;Web 浏览器访问：&lt;code&gt;http://IP:7474/&lt;/code&gt;&lt;/p&gt;
&lt;p
      
    
    </summary>
    
    
      <category term="Neo4j" scheme="https://jueee.github.io/categories/Neo4j/"/>
    
    
      <category term="Neo4j" scheme="https://jueee.github.io/tags/Neo4j/"/>
    
  </entry>
  
  <entry>
    <title>博客网址增加站点分析</title>
    <link href="https://jueee.github.io/2020/08/2020-08-09-%E5%8D%9A%E5%AE%A2%E7%BD%91%E5%9D%80%E5%A2%9E%E5%8A%A0%E7%AB%99%E7%82%B9%E5%88%86%E6%9E%90/"/>
    <id>https://jueee.github.io/2020/08/2020-08-09-%E5%8D%9A%E5%AE%A2%E7%BD%91%E5%9D%80%E5%A2%9E%E5%8A%A0%E7%AB%99%E7%82%B9%E5%88%86%E6%9E%90/</id>
    <published>2020-08-09T00:00:00.000Z</published>
    <updated>2020-08-13T06:07:28.382Z</updated>
    
    <content type="html"><![CDATA[<h3 id="谷歌分析"><a href="#谷歌分析" class="headerlink" title="谷歌分析"></a>谷歌分析</h3><ol><li><p>创建一个帐户并登录 <span class="exturl" data-url="aHR0cHM6Ly9hbmFseXRpY3MuZ29vZ2xlLmNvbS8=">Google Analytics（分析）<i class="fa fa-external-link-alt"></i></span>。<span class="exturl" data-url="aHR0cHM6Ly9zdXBwb3J0Lmdvb2dsZS5jb20vYW5hbHl0aWNzLz9obD1lbiN0b3BpYz0zNTQ0OTA2">更详细的文档<i class="fa fa-external-link-alt"></i></span></p></li><li><p>编辑 主题配置文件并 <code>tracking_id</code> 在部分下填写 <code>google_analytics</code> 您的 Google 跟踪 ID。Google 曲目 ID 始终以开头 <code>UA-</code>。</p><pre class="language-yml" data-language="yml"><code class="language-yml"># Google Analyticsgoogle_analytics:tracking_id: UA-XXXXXXXX-Xonly_pageview: false</code></pre></li><li><p>当 field <code>only_pageview</code> 设置为 true 时，NexT 将仅向 <code>pageview</code>Google Analytics（分析）发送事件。<br>使用它而不是使用它的好处 <code>only_pageview: false</code> 是减少了站点上的外部脚本，这将为您提供更好的性能，但没有完整的分析功能。</p></li></ol><h3 id="百度分析"><a href="#百度分析" class="headerlink" title="百度分析"></a>百度分析</h3><ol><li><p>登录 <span class="exturl" data-url="aHR0cHM6Ly90b25namkuYmFpZHUuY29tLw==">百度分析<i class="fa fa-external-link-alt"></i></span> 并找到网站代码获取页面。</p></li><li><p>在后面复制脚本 ID <code>hm.js?</code>，如下图：</p><p><img src="/images/2020/08/1597041510807.png" alt="1597041510807" loading="lazy"></p></li><li><p>编辑 主题配置文件并将部分更改 <code>baidu_analytics</code> 为您的脚本 ID。</p><pre class="language-yml" data-language="yml"><code class="language-yml"># Baidu Analytics IDbaidu_analytics: your_id</code></pre></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;谷歌分析&quot;&gt;&lt;a href=&quot;#谷歌分析&quot; class=&quot;headerlink&quot; title=&quot;谷歌分析&quot;&gt;&lt;/a&gt;谷歌分析&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;创建一个帐户并登录 &lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9h
      
    
    </summary>
    
    
      <category term="Blog" scheme="https://jueee.github.io/categories/Blog/"/>
    
    
      <category term="Blog" scheme="https://jueee.github.io/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>博客网址增加站点地图 sitemap</title>
    <link href="https://jueee.github.io/2020/08/2020-08-09-%E5%8D%9A%E5%AE%A2%E7%BD%91%E5%9D%80%E5%A2%9E%E5%8A%A0%E7%AB%99%E7%82%B9%E5%9C%B0%E5%9B%BEsitemap/"/>
    <id>https://jueee.github.io/2020/08/2020-08-09-%E5%8D%9A%E5%AE%A2%E7%BD%91%E5%9D%80%E5%A2%9E%E5%8A%A0%E7%AB%99%E7%82%B9%E5%9C%B0%E5%9B%BEsitemap/</id>
    <published>2020-08-09T00:00:00.000Z</published>
    <updated>2020-08-13T06:07:28.391Z</updated>
    
    <content type="html"><![CDATA[<p>站点地图是一种文件，您可以通过该文件列出您网站上的网页，从而将您网站内容的组织架构告知 Google 和其他搜索引擎。Googlebot 等搜索引擎网页抓取工具会读取此文件，以便更加智能地抓取您的网站。</p><h3 id="站点地图"><a href="#站点地图" class="headerlink" title="站点地图"></a>站点地图</h3><p>站点地图是一个网站所有链接的容器。很多网站的连接层次比较深，爬虫很难抓取到，站点地图可以方便爬虫抓取网站页面，通过抓取网站页面，清晰了解网站的架构，网站地图一般存放在根目录下并命名 sitemap，为爬虫指路，增加网站重要内容页面的收录。</p><p>站点地图就是根据网站的结构、框架、内容，生成的导航网页文件。站点地图对于提高用户体验有好处，它们为网站访问者指明方向，并帮助迷失的访问者找到他们想看的页面。</p><h3 id="添加-sitemap"><a href="#添加-sitemap" class="headerlink" title="添加 sitemap"></a>添加 sitemap</h3><ol><li><p>安装插件：</p><pre class="language-none"><code class="language-none">npm install hexo-generator-sitemap --savenpm install hexo-generator-baidu-sitemap --save</code></pre></li><li><p>在博客目录的_config.yml 中添加如下代码：</p><pre class="language-yml" data-language="yml"><code class="language-yml"># 自动生成 sitemapsitemap: path: sitemap.xmlbaidusitemap: path: baidusitemap.xml</code></pre></li><li><p>编译博客</p><pre class="language-shell" data-language="shell"><code class="language-shell">npx hexo generate</code></pre></li><li><p>在你的博客根目录的 public 下面发现生成了 sitemap.xml 以及 baidusitemap.xml 就表示成功了。</p><p>如下图所示：</p><p><img src="/images/2020/08/1597229983009.png" alt="1597229983009" loading="lazy"></p></li></ol><h3 id="查看站点地图"><a href="#查看站点地图" class="headerlink" title="查看站点地图"></a>查看站点地图</h3><ul><li><a href="https://jueee.github.io/sitemap.xml">sitemap.xml</a></li><li><a href="https://jueee.github.io/baidusitemap.xml">baidusitemap.xml</a></li></ul>]]></content>
    
    <summary type="html">
    
      站点地图是一种文件，您可以通过该文件列出您网站上的网页，从而将您网站内容的组织架构告知Google和其他搜索引擎。
    
    </summary>
    
    
      <category term="Blog" scheme="https://jueee.github.io/categories/Blog/"/>
    
    
      <category term="Blog" scheme="https://jueee.github.io/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>hexo 博客个性化设置</title>
    <link href="https://jueee.github.io/2020/08/2020-08-08-hexo%E5%8D%9A%E5%AE%A2%E4%B8%AA%E6%80%A7%E5%8C%96%E8%AE%BE%E7%BD%AE/"/>
    <id>https://jueee.github.io/2020/08/2020-08-08-hexo%E5%8D%9A%E5%AE%A2%E4%B8%AA%E6%80%A7%E5%8C%96%E8%AE%BE%E7%BD%AE/</id>
    <published>2020-08-08T00:00:00.000Z</published>
    <updated>2020-08-13T06:07:28.380Z</updated>
    
    <content type="html"><![CDATA[<h3 id="创建-categories"><a href="#创建-categories" class="headerlink" title="创建 categories"></a>创建 categories</h3><ol><li><p>** 新建一个页面，命名为 categories。命令如下：**</p><pre class="language-none"><code class="language-none">npx hexo new page categories</code></pre><p>在 myBlog/source 下会新生成一个新的文件夹 categories<br>，在该文件夹下会有一个 index.md 文件。</p></li><li><p>** 编辑 categories 文件夹下的 index.md**</p><pre class="language-none"><code class="language-none">title: categoriesdate: 2020-08-07 10:29:47type: &quot;categories&quot;comments: false</code></pre></li><li><p>** 在菜单中添加链接。**</p><p>编辑主题的 <code>_config.next.yml</code>，将 menu 中的 categories: /categories 注释去掉，如下:</p><pre class="language-none"><code class="language-none">categories: &#x2F;categories&#x2F; || fa fa-fw fa-th</code></pre></li><li><p>** 安装依赖 **</p><pre class="language-none"><code class="language-none">npm install hexo-generator-index --savenpm install hexo-generator-archive --savenpm install hexo-generator-category --savenpm install hexo-generator-tag --save</code></pre></li></ol><p>参考：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL3dpa2kvTWlncmF0aW5nLWZyb20tMi54LXRvLTMuMA==">https://github.com/hexojs/hexo/wiki/Migrating-from-2.x-to-3.0<i class="fa fa-external-link-alt"></i></span></p><h3 id="添加-README-md"><a href="#添加-README-md" class="headerlink" title="添加 README.md"></a>添加 README.md</h3><h4 id="添加-README-md-1"><a href="#添加-README-md-1" class="headerlink" title="添加 README.md"></a>添加 README.md</h4><p>使用 Github Pages 和 Hexo 搭建的博客，如果在最开始建立仓库的时候没有创建 README.md 文件，那么在后期如何添加呢？</p><p>添加方法：在根目录 source 文件夹下新建 README.md 即可。</p><p>新增：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0p1ZWVlL2p1ZWVlLWJsb2cvYmxvYi9tYXN0ZXIvc291cmNlL1JFQURNRS5tZA==">source/README.md<i class="fa fa-external-link-alt"></i></span></p><p>效果：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0p1ZWVlL2p1ZWVlLmdpdGh1Yi5pbw==">https://github.com/Jueee/jueee.github.io<i class="fa fa-external-link-alt"></i></span></p><h4 id="显示异常"><a href="#显示异常" class="headerlink" title="显示异常"></a>显示异常</h4><p>当我们执行 <code>hexo g -d</code> 部署博客的时候会发现 README.md 变成了 README.html。</p><p>原因就在于当我们在执行 <code>hexo g -d</code> 命令时，.md 文件会被转化成 HTML 文件，并将这些文件放到 public 目录里，最后再提交到远程 GitHub 仓库。</p><p>而 Hexo 也提供了一个方法，让 md 文件不被转换成 HTML，在根目录的 _config.yml 配置文件里，找到 skip_render 关键字，添加 README.md，让解释器跳过渲染：</p><pre class="language-yml" data-language="yml"><code class="language-yml">skip_render:  - README.md</code></pre><h3 id="修改脚注"><a href="#修改脚注" class="headerlink" title="修改脚注"></a>修改脚注</h3><p>修改文件： <code>source\_data\footer.njk</code></p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>footer-custom<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>powered-by<span class="token punctuation">"</span></span><span class="token punctuation">></span></span > 由 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://github.com/next-theme/theme-next-docs<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>theme-link<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>noopener<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Hexo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span> v8.0.0 驱动 < span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post-meta-divider<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>|<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>theme-info<span class="token punctuation">"</span></span><span class="token punctuation">></span></span > 主题 – <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://github.com/next-theme/hexo-theme-next<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>theme-link<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>noopener<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Hexo.NexT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span> v8.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h3 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h3><p>由于 Hexo 自带的代码高亮主题显示不好看，所以主题中使用到了 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2VsZTgyOC9oZXhvLXByaXNtLXBsdWdpbg==">hexo-prism-plugin<i class="fa fa-external-link-alt"></i></span> 的 Hexo 插件来做代码高亮，安装命令如下：</p><p>bash</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i -S hexo-prism-plugin</code></pre><p>然后，修改 Hexo 根目录下 <code>_config.yml</code> 文件中 <code>highlight.enable</code> 的值为 <code>false</code>，并新增 <code>prism</code> 插件相关的配置，主要配置如下：</p><pre class="language-yml" data-language="yml"><code class="language-yml">highlight:  enable: falseprism_plugin:  mode: &#39;preprocess&#39;    # realtime&#x2F;preprocess  theme: &#39;tomorrow&#39;  line_number: false    # default false  custom_css:</code></pre><p>配置参考：<span class="exturl" data-url="aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvaGV4by1wcmlzbS1wbHVnaW4=">https://www.npmjs.com/package/hexo-prism-plugin<i class="fa fa-external-link-alt"></i></span></p><h3 id="修改菜单"><a href="#修改菜单" class="headerlink" title="修改菜单"></a>修改菜单</h3><p>将导航栏的 “归档” 修改为 “博客”。</p><p>修改文件： <code>source\_data\languages.yml</code></p><pre class="language-yml" data-language="yml"><code class="language-yml">zh-CN:  menu:    archives: 博客 </code></pre><h3 id="相关热门帖子"><a href="#相关热门帖子" class="headerlink" title="相关热门帖子"></a>相关热门帖子</h3><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RlYTMvaGV4by1yZWxhdGVkLXBvcHVsYXItcG9zdHM=">NexT<i class="fa fa-external-link-alt"></i></span> 根据 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RlYTMvaGV4by1yZWxhdGVkLXBvcHVsYXItcG9zdHM=">hexo-related-popular-posts<i class="fa fa-external-link-alt"></i></span> 支持相关的帖子功能.</p><p><code>hexo-related-popular-posts</code> 通过执行以下命令来安装网站根目录:</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> hexo-related-popular-posts$ npx hexo clean</code></pre><p>可以通过将值设置 <code>related_posts.enable</code> 为 <code>true</code>in 来启用它主题配置文件.</p><pre class="language-yml" data-language="yml"><code class="language-yml">related_posts:  enable: true</code></pre><h3 id="添加评论系统"><a href="#添加评论系统" class="headerlink" title="添加评论系统"></a>添加评论系统</h3><p>Valine 是基于 Leancloud 的快速，简单和高效的无后端评论系统。</p><ol><li><p>创建一个帐户或登录 <span class="exturl" data-url="aHR0cHM6Ly9sZWFuY2xvdWQuY24vZGFzaGJvYXJkL2xvZ2luLmh0bWwjL3NpZ25pbg==">LeanCloud<i class="fa fa-external-link-alt"></i></span>，然后单击左下角以 <span class="exturl" data-url="aHR0cHM6Ly9sZWFuY2xvdWQuY24vZGFzaGJvYXJkL2FwcGxpc3QuaHRtbCMvbmV3YXBw">创建应用程序<i class="fa fa-external-link-alt"></i></span> 在 <span class="exturl" data-url="aHR0cHM6Ly9sZWFuY2xvdWQuY24vZGFzaGJvYXJkL2FwcGxpc3QuaHRtbCMvYXBwcw==">仪表板中<i class="fa fa-external-link-alt"></i></span>.</p></li><li><p>转到您刚创建的应用程序，<code>Settings → App Keys</code> 在左下角选择，您将看到您的 APP ID 和 APP Key。</p></li><li><p>将值设置 <code>enable</code> 为 <code>true</code>，添加获得的 APP ID（<code>appId</code>）和 APP Key（<code>appKey</code>），然后 <code>valine</code> 在主题配置文件 如下：</p><pre class="language-none"><code class="language-none">valine:enable: falseappId:  # your leancloud application appidappKey:  # your leancloud application appkeyplaceholder: Just go go # comment box placeholderavatar: mm # gravatar stylemeta: [nick, mail, link] # Custom comment headerpageSize: 10 # pagination sizevisitor: false # leancloud-counter-security is not supported for now. When visitor is set to be true, appid and appkey are recommended to be the same as leancloud_visitors&#39; for counter compatibility. Article reading statistic https:&#x2F;&#x2F;valine.js.org&#x2F;visitor.htmlcomment_count: true # If false, comment count will only be displayed in post page, not in home pagerecordIP: false # Whether to record the commenter IPserverURLs: # When the custom domain name is enabled, fill it in here (it will be detected automatically by default, no need to fill in)</code></pre></li></ol><h3 id="更换网页图标"><a href="#更换网页图标" class="headerlink" title="更换网页图标"></a>更换网页图标</h3><h4 id="制作-favicon-图标"><a href="#制作-favicon-图标" class="headerlink" title="制作 favicon 图标"></a>制作 favicon 图标</h4><ol><li>准备好用作标签页 / 网页小图标 favicon 的图片</li><li>搜索 * favicon 在线 *，可以看到一些在线图片转 favicon 的工具<br>我用的是这个（link）： <span class="exturl" data-url="aHR0cDovL3d3dy5iaXRidWcubmV0Lw==">bitbug<i class="fa fa-external-link-alt"></i></span></li><li>利用工具做成图标。<br>我做了 16x16，与 32x32 的。</li></ol><h4 id="编辑配置文件"><a href="#编辑配置文件" class="headerlink" title="编辑配置文件"></a>编辑配置文件</h4><p>在 next 主题的 <strong>_config.yml</strong> 文件，修改新的图片作为 favicon 的对象：</p><pre class="language-yml" data-language="yml"><code class="language-yml">favicon:  small: &#x2F;images&#x2F;basic&#x2F;jue.ico  medium: &#x2F;images&#x2F;basic&#x2F;jue.ico</code></pre>]]></content>
    
    <summary type="html">
    
      Hexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Coding上，是搭建博客的首选框架。
    
    </summary>
    
    
      <category term="Blog" scheme="https://jueee.github.io/categories/Blog/"/>
    
    
      <category term="Blog" scheme="https://jueee.github.io/tags/Blog/"/>
    
      <category term="Node.js" scheme="https://jueee.github.io/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>搭建 hexo+github+next 主题博客</title>
    <link href="https://jueee.github.io/2020/08/2020-08-07-%E6%90%AD%E5%BB%BAhexo+github+next%E4%B8%BB%E9%A2%98%E5%8D%9A%E5%AE%A2/"/>
    <id>https://jueee.github.io/2020/08/2020-08-07-%E6%90%AD%E5%BB%BAhexo+github+next%E4%B8%BB%E9%A2%98%E5%8D%9A%E5%AE%A2/</id>
    <published>2020-08-07T00:00:00.000Z</published>
    <updated>2020-08-13T06:07:28.378Z</updated>
    
    <content type="html"><![CDATA[<h3 id="博客介绍"><a href="#博客介绍" class="headerlink" title="博客介绍"></a>博客介绍</h3><p>博客预览地址：<span class="exturl" data-url="aHR0cHM6Ly90aGVtZS1uZXh0LmpzLm9yZy8=">https://theme-next.js.org/<i class="fa fa-external-link-alt"></i></span></p><h3 id="搭建博客"><a href="#搭建博客" class="headerlink" title="搭建博客"></a>搭建博客</h3><p>GitHub：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL25leHQtdGhlbWUvdGhlbWUtbmV4dC1kb2Nz">https://github.com/next-theme/theme-next-docs<i class="fa fa-external-link-alt"></i></span></p><p>在本地安装：</p><pre class="language-shell" data-language="shell"><code class="language-shell"><span class="token function">git</span> clone https://github.com/next-theme/theme-next-docs<span class="token builtin class-name">cd</span> theme-next-docs<span class="token function">npm</span> <span class="token function">install</span></code></pre><p>生成：</p><pre class="language-none"><code class="language-none">npx hexo generate</code></pre><p>运行：</p><pre class="language-none"><code class="language-none">npx hexo server</code></pre><h3 id="博客主题"><a href="#博客主题" class="headerlink" title="博客主题"></a>博客主题</h3><p>GitHub：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL25leHQtdGhlbWUvaGV4by10aGVtZS1uZXh0">https://github.com/next-theme/hexo-theme-next<i class="fa fa-external-link-alt"></i></span></p><h3 id="发布到-github-io"><a href="#发布到-github-io" class="headerlink" title="发布到 github.io"></a>发布到 github.io</h3><p>在 hexo 下的_config.yml 文件中配置：</p><pre class="language-yml" data-language="yml"><code class="language-yml">deploy:  type: git  repository: git@github.com:Jueee&#x2F;jueee.github.io.git  branch: master</code></pre><p>安装插件：</p><pre class="language-none"><code class="language-none">npm install hexo-deployer-git --save</code></pre><p>打开你的 git bash，输入 <code>hexo d</code> 就会将本次有改动的代码全部提交，没有改动的不会：</p><pre class="language-none"><code class="language-none">$ npx hexo g -d</code></pre><p>【注】部署这个命令一定要用 git bash，否则会提示 <code>Permission denied (publickey).</code></p><p>此时，会在项目中生成 <code>.deploy_git</code> 文件夹。</p><p>打开 git bash，切换到 hexo/.deploy_git，执行</p><pre class="language-none"><code class="language-none">git init</code></pre><p>再绑定远程仓库</p><pre class="language-none"><code class="language-none">git remote add origin git@github.com:jueee&#x2F;jueee.github.io.git</code></pre><p>回到 cmd 命令行</p><pre class="language-none"><code class="language-none">$ npx hexo g -d</code></pre><p>搞定了，成功提交了正确的博客内容。</p><h3 id="常用-hexo-命令"><a href="#常用-hexo-命令" class="headerlink" title="常用 hexo 命令"></a>常用 hexo 命令</h3><p>常见命令</p><pre class="language-none"><code class="language-none">hexo new &quot;postName&quot; #新建文章hexo new page &quot;pageName&quot; #新建页面hexo generate #生成静态页面至 public 目录hexo server #开启预览访问端口（默认端口 4000，&#39;ctrl + c&#39; 关闭 server）hexo deploy #部署到 GitHubhexo help  # 查看帮助hexo version  #查看 Hexo 的版本 </code></pre><p>缩写：</p><pre class="language-none"><code class="language-none">hexo n &#x3D;&#x3D; hexo newhexo g &#x3D;&#x3D; hexo generatehexo s &#x3D;&#x3D; hexo serverhexo d &#x3D;&#x3D; hexo deploy</code></pre><p>组合命令：</p><pre class="language-none"><code class="language-none">hexo s -g #生成并本地预览hexo d -g #生成并上传 </code></pre><h3 id="问题处理"><a href="#问题处理" class="headerlink" title="问题处理"></a>问题处理</h3><pre class="language-none"><code class="language-none">PS E:\code\GitHub\Jueee\jueee-blog&gt; npx hexo clean(node:44956) ExperimentalWarning: The fs.promises API is experimentalERROR &#123; err:   E:\code\GitHub\Jueee\jueee-blog\node_modules\hexo-theme-next\package.json:2     &quot;_from&quot;: &quot;hexo-theme-next@8.0.0-rc.5&quot;,</code></pre><p>查看 node 版本</p><pre class="language-none"><code class="language-none">node -vv10.16.0npm -v6.9.0</code></pre><p>需要升级 node 到最新版。</p><p>下载地址：<span class="exturl" data-url="aHR0cHM6Ly9ub2RlanMub3JnL3poLWNuL2Rvd25sb2FkLw==">https://nodejs.org/zh-cn/download/<i class="fa fa-external-link-alt"></i></span></p>]]></content>
    
    <summary type="html">
    
      Hexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Coding上，是搭建博客的首选框架。
    
    </summary>
    
    
      <category term="Blog" scheme="https://jueee.github.io/categories/Blog/"/>
    
    
      <category term="Blog" scheme="https://jueee.github.io/tags/Blog/"/>
    
      <category term="Node.js" scheme="https://jueee.github.io/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>Arthas 之 jad 反编译原理</title>
    <link href="https://jueee.github.io/2020/08/2020-08-04-Arthas%E4%B9%8Bjad%E5%8F%8D%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
    <id>https://jueee.github.io/2020/08/2020-08-04-Arthas%E4%B9%8Bjad%E5%8F%8D%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/</id>
    <published>2020-08-04T00:00:00.000Z</published>
    <updated>2020-08-13T06:07:28.373Z</updated>
    
    <content type="html"><![CDATA[<h3 id="jad-命令介绍"><a href="#jad-命令介绍" class="headerlink" title="jad 命令介绍"></a>jad 命令介绍</h3><p>jad 即 java decompiler，把 JVM 已加载类的字节码反编译成 Java 代码。</p><blockquote><p><span class="exturl" data-url="aHR0cHM6Ly9hbGliYWJhLmdpdGh1Yi5pby9hcnRoYXMvamFkLmh0bWw=">https://alibaba.github.io/arthas/jad.html<i class="fa fa-external-link-alt"></i></span></p></blockquote><h3 id="获取到类的字节码"><a href="#获取到类的字节码" class="headerlink" title="获取到类的字节码"></a>获取到类的字节码</h3><p>反编译有两部分工作：</p><ol><li>获取到字节码</li><li>反编译为 Java 代码</li></ol><p>那么怎么从运行的 JVM 里获取到字节码？</p><p>最常见的思路是，在 <code>classpaths</code> 下面查找，比如 <code>ClassLoader.getResource (&quot;java/lang/String.class&quot;)</code>，但是这样子查找到的字节码不一定对。比如可能有多个冲突的 jar，或者有 Java Agent 修改了字节码。</p><h3 id="ClassFileTransformer-机制"><a href="#ClassFileTransformer-机制" class="headerlink" title="ClassFileTransformer 机制"></a>ClassFileTransformer 机制</h3><p>从 JDK 1.5 起，有一套 <code>ClassFileTransformer</code> 的机制，Java Agent 通过 <code>Instrumentation</code> 注册 <code>ClassFileTransformer</code>，那么在类加载或者 <code>retransform</code> 时就可以回调修改字节码。</p><p>显然，在 Arthas 里，要增强的类是已经被加载的，所以它们的字节码都是在 <code>retransform</code> 时被修改的。<br>通过显式调用 <code>Instrumentation.retransformClasses (Class&lt;?&gt;...)</code> 可以触发回调。</p><p>Arthas 里增强字节码的 <code>watch</code>/<code>trace</code>/<code>stack</code>/<code>tt</code> 等命令都是通过 <code>ClassFileTransformer</code> 来实现的。</p><p><code>java.lang.instrument.ClassFileTransformer</code> 的接口如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ClassFileTransformer</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token function">transform</span><span class="token punctuation">(</span>  <span class="token class-name">ClassLoader</span>         loader<span class="token punctuation">,</span>                <span class="token class-name">String</span>              className<span class="token punctuation">,</span>                <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span>            classBeingRedefined<span class="token punctuation">,</span>                <span class="token class-name">ProtectionDomain</span>    protectionDomain<span class="token punctuation">,</span>                <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span>              classfileBuffer<span class="token punctuation">)</span>        <span class="token keyword">throws</span> <span class="token class-name">IllegalClassFormatException</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>看到这里，读者应该猜到 <code>jad</code> 是怎么获取到字节码的了：</p><ol><li>注册一个 <code>ClassFileTransformer</code></li><li>通过 <code>Instrumentation.retransformClasses</code> 触发回调</li><li>在回调的 <code>transform</code> 函数里获取到字节码</li><li>删掉注册的 <code>ClassFileTransformer</code></li></ol><h3 id="使用-cfr-来反编译"><a href="#使用-cfr-来反编译" class="headerlink" title="使用 cfr 来反编译"></a>使用 cfr 来反编译</h3><p>获取到字节码之后，怎样转换为 Java 代码呢？</p><p>以前大家使用比较多的反编译软件可能是 <code>jd-gui</code>，但是它不支持 JDK8 的 lambda 语法和一些新版本 JDK 的特性。</p><p>后面比较成熟的反编译软件是 <code>cfr</code>，它以前是不开源的。直到最近的 <code>0.145</code> 版本，作者终于开源了，可喜可贺。地址是</p><blockquote><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xlaWJuaXR6MjcvY2Zy">https://github.com/leibnitz27/cfr<i class="fa fa-external-link-alt"></i></span></p></blockquote><p>在 Arthas <code>jad</code> 命令里，通过调用 <code>cfr</code> 来完成反编译。</p><h3 id="jad-命令的缺陷"><a href="#jad-命令的缺陷" class="headerlink" title="jad 命令的缺陷"></a>jad 命令的缺陷</h3><p>99% 的情况下，<code>jad</code> 命令 dump 下来的字节码是准确的，除了一些极端情况。</p><ol><li>因为 JVM 里注册的 <code>ClassFileTransformer</code> 可能有多个，那么在 JVM 里运行的字节码里，可能是被多个 <code>ClassFileTransformer</code> 处理过的。</li><li>触发了 <code>retransformClasses</code> 之后，这些注册的 <code>ClassFileTransformer</code> 会被依次回，上一个处理的字节码传递到下一个。<br>所以不能保证这些 <code>ClassFileTransformer</code> 第二次执行会返回同样的结果。</li><li>有可能一些 <code>ClassFileTransformer</code> 会被删掉，触发 <code>retransformClasses</code> 之后，之前的一些修改就会丢失掉。</li></ol><p>所以目前在 Arthas 里，如果开两个窗口，一个窗口执行 <code>watch</code>/<code>tt</code> 等命令，另一个窗口对这个类执行 <code>jad</code>，那么可以观察到 <code>watch</code>/<code>tt</code> 停止了输出，实际上是因为字节码在触发了 <code>retransformClasses</code> 之后，<code>watch</code>/<code>tt</code> 所做的修改丢失了。</p><h3 id="精确获取字节码"><a href="#精确获取字节码" class="headerlink" title="精确获取字节码"></a>精确获取字节码</h3><p>如果想精确获取到 JVM 内运行的 Java 字节码，可以使用这个 <code>dumpclass</code> 工具，它是通过 <code>sa-jdi.jar</code> 来实现的，保证 dump 下来的字节码是 JVM 内所运行的。</p><blockquote><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2hlbmd5dW5hYmMvZHVtcGNsYXNz">https://github.com/hengyunabc/dumpclass<i class="fa fa-external-link-alt"></i></span></p></blockquote><h3 id="cfr-反编译示例"><a href="#cfr-反编译示例" class="headerlink" title="cfr 反编译示例"></a>cfr 反编译示例</h3><p>参考 Arthas 代码：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvYXJ0aGFzL2Jsb2IvbWFzdGVyL2NvcmUvc3JjL21haW4vamF2YS9jb20vdGFvYmFvL2FydGhhcy9jb3JlL3V0aWwvRGVjb21waWxlci5qYXZh">com.taobao.arthas.core.util.Decompiler.java<i class="fa fa-external-link-alt"></i></span></p><h4 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h4><p>首先，需要引入 maven 依赖：</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.benf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>cfr<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.150<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h4 id="编写方法"><a href="#编写方法" class="headerlink" title="编写方法"></a>编写方法</h4><p>编写反编译类 <code>sample.utils.Decompiler</code>：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">decompile</span><span class="token punctuation">(</span><span class="token class-name">String</span> classFilePath<span class="token punctuation">,</span> <span class="token class-name">String</span> methodName<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">decompile</span><span class="token punctuation">(</span>classFilePath<span class="token punctuation">,</span> methodName<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * @param classFilePath * @param methodName * @param hideUnicode * @return */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">decompile</span><span class="token punctuation">(</span><span class="token class-name">String</span> classFilePath<span class="token punctuation">,</span> <span class="token class-name">String</span> methodName<span class="token punctuation">,</span> <span class="token keyword">boolean</span> hideUnicode<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">final</span> <span class="token class-name">StringBuilder</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token number">8192</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">OutputSinkFactory</span> mySink <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OutputSinkFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SinkClass</span><span class="token punctuation">></span></span> <span class="token function">getSupportedSinks</span><span class="token punctuation">(</span><span class="token class-name">SinkType</span> sinkType<span class="token punctuation">,</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SinkClass</span><span class="token punctuation">></span></span> collection<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token class-name">SinkClass</span><span class="token punctuation">.</span>STRING<span class="token punctuation">,</span> <span class="token class-name">SinkClass</span><span class="token punctuation">.</span>DECOMPILED<span class="token punctuation">,</span> <span class="token class-name">SinkClass</span><span class="token punctuation">.</span>DECOMPILED_MULTIVER<span class="token punctuation">,</span>                            <span class="token class-name">SinkClass</span><span class="token punctuation">.</span>EXCEPTION_MESSAGE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">Sink</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">getSink</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">SinkType</span> sinkType<span class="token punctuation">,</span> <span class="token class-name">SinkClass</span> sinkClass<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Sink</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">T</span> sinkable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">//skip message like: Analysing type demo.MathGame</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>sinkType <span class="token operator">==</span> <span class="token class-name">SinkType</span><span class="token punctuation">.</span>PROGRESS<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">return</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    result<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>sinkable<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> options <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * @see org.benf.cfr.reader.util.MiscConstants.Version.getVersion () Currently,     *      the cfr version is wrong. so disable show cfr version.     */</span>    options<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"showversion"</span><span class="token punctuation">,</span> <span class="token string">"false"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    options<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"hideutf"</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>hideUnicode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>methodName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        options<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"methodname"</span><span class="token punctuation">,</span> methodName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">CfrDriver</span> driver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CfrDriver</span><span class="token punctuation">.</span><span class="token class-name">Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withOptions</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withOutputSink</span><span class="token punctuation">(</span>mySink<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> toAnalyse <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    toAnalyse<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>classFilePath<span class="token punctuation">)</span><span class="token punctuation">;</span>    driver<span class="token punctuation">.</span><span class="token function">analyse</span><span class="token punctuation">(</span>toAnalyse<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><pre class="language-none"><code class="language-none">String className &#x3D; &quot;sample&#x2F;redefine&#x2F;RedefineSuccess.class&quot;;String classPath &#x3D; Thread.currentThread ().getContextClassLoader ().getResource (className).getFile ();System.out.println (classPath);String result &#x3D; decompile (classPath, null);System.out.println (result);String result2 &#x3D; decompile (classPath, &quot;printFlag&quot;);System.out.println (result2);</code></pre><h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token operator">/</span><span class="token class-name">C</span><span class="token operator">:</span><span class="token operator">/</span><span class="token class-name">Codes</span><span class="token operator">/</span><span class="token class-name">JavaWorkSpace</span><span class="token operator">/</span>workspace48<span class="token operator">/</span>arthas<span class="token operator">-</span>demo<span class="token operator">/</span>target<span class="token operator">/</span>classes<span class="token operator">/</span>sample<span class="token operator">/</span>redefine<span class="token operator">/</span><span class="token class-name">RedefineSuccess</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token comment">/* * Decompiled with CFR. */</span><span class="token keyword">package</span> <span class="token namespace">sample<span class="token punctuation">.</span>redefine</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedefineSuccess</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">RedefineSuccess</span><span class="token punctuation">.</span><span class="token function">printFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"flag is true."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"flag is false."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"flag is true."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"flag is false."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><blockquote><p><span class="exturl" data-url="aHR0cDovL2hlbmd5dW5hYmMuZ2l0aHViLmlvL2FydGhhcy1qYWQv">http://hengyunabc.github.io/arthas-jad/<i class="fa fa-external-link-alt"></i></span></p></blockquote>]]></content>
    
    <summary type="html">
    
      Arthas是阿里巴巴开源的Java应用诊断利器，本文介绍Arthas里jad命令的实现原理。
    
    </summary>
    
    
      <category term="Java" scheme="https://jueee.github.io/categories/Java/"/>
    
      <category term="Java诊断" scheme="https://jueee.github.io/categories/Java/Java%E8%AF%8A%E6%96%AD/"/>
    
    
      <category term="Java诊断" scheme="https://jueee.github.io/tags/Java%E8%AF%8A%E6%96%AD/"/>
    
      <category term="Arthas" scheme="https://jueee.github.io/tags/Arthas/"/>
    
  </entry>
  
  <entry>
    <title>Arthas 之源码简要分析</title>
    <link href="https://jueee.github.io/2020/08/2020-08-03-Arthas%E4%B9%8B%E6%BA%90%E7%A0%81%E7%AE%80%E8%A6%81%E5%88%86%E6%9E%90/"/>
    <id>https://jueee.github.io/2020/08/2020-08-03-Arthas%E4%B9%8B%E6%BA%90%E7%A0%81%E7%AE%80%E8%A6%81%E5%88%86%E6%9E%90/</id>
    <published>2020-08-03T00:00:00.000Z</published>
    <updated>2020-08-13T06:07:28.370Z</updated>
    
    <content type="html"><![CDATA[<h3 id="启动模块（boot）"><a href="#启动模块（boot）" class="headerlink" title="启动模块（boot）"></a>启动模块（boot）</h3><h4 id="启动-Arthas"><a href="#启动-Arthas" class="headerlink" title="启动 Arthas"></a>启动 Arthas</h4><pre class="language-shell" data-language="shell"><code class="language-shell"><span class="token function">wget</span> https://alibaba.github.io/arthas/arthas-boot.jarjava -jar arthas-boot.jar</code></pre><p>** 模块代码 **：</p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvYXJ0aGFzL3RyZWUvbWFzdGVyL2Jvb3Q=">GitHub Code by arthas-boot<i class="fa fa-external-link-alt"></i></span></p><h4 id="模块入口"><a href="#模块入口" class="headerlink" title="模块入口"></a>模块入口</h4><p>在 arthas-boot 模块的 pom.xml 文件中，找到启动类：</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>manifest</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mainClass</span><span class="token punctuation">></span></span>com.taobao.arthas.boot.Bootstrap<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mainClass</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>manifest</span><span class="token punctuation">></span></span></code></pre><p><code>com.taobao.arthas.boot.Bootstrap.main ()</code> 方法：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvYXJ0aGFzL2Jsb2IvbWFzdGVyL2Jvb3Qvc3JjL21haW4vamF2YS9jb20vdGFvYmFvL2FydGhhcy9ib290L0Jvb3RzdHJhcC5qYXZhI0wyNzM=">GitHub Code by Bootstrap.java<i class="fa fa-external-link-alt"></i></span></p><h4 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h4><h5 id="参数解析"><a href="#参数解析" class="headerlink" title="参数解析"></a>参数解析</h5><p>使用了阿里开源的组件 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvY2xp">cli<i class="fa fa-external-link-alt"></i></span>，对参数进行了解析。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">CLI</span> cli <span class="token operator">=</span> <span class="token class-name">CLIConfigurator</span><span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token class-name">Bootstrap</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">CommandLine</span> commandLine <span class="token operator">=</span> cli<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">CLIConfigurator</span><span class="token punctuation">.</span><span class="token function">inject</span><span class="token punctuation">(</span>commandLine<span class="token punctuation">,</span> bootstrap<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">usage</span><span class="token punctuation">(</span>cli<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="参数处理"><a href="#参数处理" class="headerlink" title="参数处理"></a>参数处理</h5><p>对传入的参数进行处理。</p><p>如调整日志级别，设置 RepoMirror 地址，Java 版本，telnet/http 的端口检查。</p><h5 id="检查-pid"><a href="#检查-pid" class="headerlink" title="检查 pid"></a>检查 pid</h5><p>如果在传入参数中没有 pid，则会调用本地 jps 命令，列出 java 进程（当然会排除本身）</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">long</span> pid <span class="token operator">=</span> bootstrap<span class="token punctuation">.</span><span class="token function">getPid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//select pid</span><span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        pid <span class="token operator">=</span> <span class="token class-name">ProcessUtils</span><span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span>bootstrap<span class="token punctuation">.</span><span class="token function">isVerbose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> telnetPortPid<span class="token punctuation">,</span> bootstrap<span class="token punctuation">.</span><span class="token function">getSelect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InputMismatchException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Please input an integer to select pid."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Please select an available pid."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvYXJ0aGFzL2Jsb2IvbWFzdGVyL2Jvb3Qvc3JjL21haW4vamF2YS9jb20vdGFvYmFvL2FydGhhcy9ib290L1Byb2Nlc3NVdGlscy5qYXZhI0wxMjM=">GitHub Code by ProcessUtils.java<i class="fa fa-external-link-alt"></i></span></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">listProcessByJps</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> jps <span class="token operator">=</span> <span class="token string">"jps"</span><span class="token punctuation">;</span>    <span class="token class-name">File</span> jpsFile <span class="token operator">=</span> <span class="token function">findJps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>jpsFile <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        jps <span class="token operator">=</span> jpsFile<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">AnsiLog</span><span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Try use jps to lis java process, jps:"</span> <span class="token operator">+</span> jps<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> command <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        command <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span> jps<span class="token punctuation">,</span> <span class="token string">"-v"</span><span class="token punctuation">,</span> <span class="token string">"-l"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        command <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span> jps<span class="token punctuation">,</span> <span class="token string">"-l"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> lines <span class="token operator">=</span> <span class="token class-name">ExecutingCommand</span><span class="token punctuation">.</span><span class="token function">runNative</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">AnsiLog</span><span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"jps result:"</span> <span class="token operator">+</span> lines<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> currentPid <span class="token operator">=</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">parseLong</span><span class="token punctuation">(</span><span class="token class-name">PidUtils</span><span class="token punctuation">.</span><span class="token function">currentPid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> line <span class="token operator">:</span> lines<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> strings <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\\s+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>strings<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">long</span> pid <span class="token operator">=</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">parseLong</span><span class="token punctuation">(</span>strings<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">==</span> currentPid<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>strings<span class="token punctuation">.</span>length <span class="token operator">>=</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isJpsProcess</span><span class="token punctuation">(</span>strings<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//skip jps</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            result<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>pid<span class="token punctuation">,</span> line<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//https://github.com/alibaba/arthas/issues/970</span>            <span class="token comment">//ignore</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="启动服务端"><a href="#启动服务端" class="headerlink" title="启动服务端"></a>启动服务端</h5><p>进入主逻辑，会在用户目录下建立 <code>.arthas</code> 目录，同时下载 <code>arthas-core</code> 和 <code>arthas-agent</code> 等 lib 文件，然后启动客户端和服务端。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>telnetPortPid <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> pid <span class="token operator">==</span> telnetPortPid<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">AnsiLog</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"The target process already listen port &#123;&#125;, skip attach."</span><span class="token punctuation">,</span> bootstrap<span class="token punctuation">.</span><span class="token function">getTelnetPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//double check telnet port and pid before attach</span>    telnetPortPid <span class="token operator">=</span> <span class="token function">findProcessByTelnetClient</span><span class="token punctuation">(</span>arthasHomeDir<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> bootstrap<span class="token punctuation">.</span><span class="token function">getTelnetPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">checkTelnetPortPid</span><span class="token punctuation">(</span>bootstrap<span class="token punctuation">,</span> telnetPortPid<span class="token punctuation">,</span> pid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//start arthas-core.jar</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> attachArgs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    attachArgs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"-jar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    attachArgs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>arthasHomeDir<span class="token punctuation">,</span> <span class="token string">"arthas-core.jar"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    attachArgs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"-pid"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    attachArgs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">""</span> <span class="token operator">+</span> pid<span class="token punctuation">)</span><span class="token punctuation">;</span>    attachArgs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"-target-ip"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    attachArgs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>bootstrap<span class="token punctuation">.</span><span class="token function">getTargetIp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    attachArgs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"-telnet-port"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    attachArgs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">""</span> <span class="token operator">+</span> bootstrap<span class="token punctuation">.</span><span class="token function">getTelnetPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    attachArgs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"-http-port"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    attachArgs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">""</span> <span class="token operator">+</span> bootstrap<span class="token punctuation">.</span><span class="token function">getHttpPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    attachArgs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"-core"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    attachArgs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>arthasHomeDir<span class="token punctuation">,</span> <span class="token string">"arthas-core.jar"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    attachArgs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"-agent"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    attachArgs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>arthasHomeDir<span class="token punctuation">,</span> <span class="token string">"arthas-agent.jar"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>bootstrap<span class="token punctuation">.</span><span class="token function">getSessionTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        attachArgs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"-session-timeout"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        attachArgs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">""</span> <span class="token operator">+</span> bootstrap<span class="token punctuation">.</span><span class="token function">getSessionTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>bootstrap<span class="token punctuation">.</span><span class="token function">getTunnelServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        attachArgs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"-tunnel-server"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        attachArgs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>bootstrap<span class="token punctuation">.</span><span class="token function">getTunnelServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>bootstrap<span class="token punctuation">.</span><span class="token function">getAgentId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        attachArgs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"-agent-id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        attachArgs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>bootstrap<span class="token punctuation">.</span><span class="token function">getAgentId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>bootstrap<span class="token punctuation">.</span><span class="token function">getStatUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        attachArgs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"-stat-url"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        attachArgs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>bootstrap<span class="token punctuation">.</span><span class="token function">getStatUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">AnsiLog</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Try to attach process"</span> <span class="token operator">+</span> pid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">AnsiLog</span><span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Start arthas-core.jar args:"</span> <span class="token operator">+</span> attachArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 启动服务端 </span>    <span class="token class-name">ProcessUtils</span><span class="token punctuation">.</span><span class="token function">startArthasCore</span><span class="token punctuation">(</span>pid<span class="token punctuation">,</span> attachArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">AnsiLog</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Attach process &#123;&#125; success."</span><span class="token punctuation">,</span> pid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="启动客户端"><a href="#启动客户端" class="headerlink" title="启动客户端"></a>启动客户端</h5><p>最后通过反射的方式来启动字符客户端，等待用户输入指令。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">URLClassLoader</span> classLoader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLClassLoader</span><span class="token punctuation">(</span>                <span class="token keyword">new</span> URL<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>arthasHomeDir<span class="token punctuation">,</span> <span class="token string">"arthas-client.jar"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> telnetConsoleClas <span class="token operator">=</span> classLoader<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token string">"com.taobao.arthas.client.TelnetConsole"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Method</span> mainMethod <span class="token operator">=</span> telnetConsoleClas<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"main"</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="服务端模块（core）"><a href="#服务端模块（core）" class="headerlink" title="服务端模块（core）"></a>服务端模块（core）</h3><p>** 模块代码 **：</p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvYXJ0aGFzL3RyZWUvbWFzdGVyL2NvcmU=">GitHub Code by arthas-core<i class="fa fa-external-link-alt"></i></span></p><h4 id="模块入口-1"><a href="#模块入口-1" class="headerlink" title="模块入口"></a>模块入口</h4><p>在 arthas-core 模块的 pom.xml 中，找到启动类：</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transformers</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transformer</span> <span class="token attr-name">implementation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.maven.plugins.shade.resource.ManifestResourceTransformer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mainClass</span><span class="token punctuation">></span></span>com.taobao.arthas.core.Arthas<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mainClass</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transformer</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transformers</span><span class="token punctuation">></span></span></code></pre><p><code>com.taobao.arthas.core.Arthas.main ()</code> 方法：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvYXJ0aGFzL2Jsb2IvbWFzdGVyL2NvcmUvc3JjL21haW4vamF2YS9jb20vdGFvYmFvL2FydGhhcy9jb3JlL0FydGhhcy5qYXZh">GitHub Code by Arthas.java<i class="fa fa-external-link-alt"></i></span></p><h4 id="源码分析-1"><a href="#源码分析-1" class="headerlink" title="源码分析"></a>源码分析</h4><h5 id="连接进程"><a href="#连接进程" class="headerlink" title="连接进程"></a>连接进程</h5><p>使用 <code>VirutalMachine.attach (pid)</code> 来连接进程，同时使用 <code>virtualMachine.loadAgent</code> 加载自定义的 agent.</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">attachAgent</span><span class="token punctuation">(</span><span class="token class-name">Configure</span> configure<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 省略部分代码 </span>    <span class="token comment">// 连接进程 </span>            virtualMachine <span class="token operator">=</span> <span class="token class-name">VirtualMachine</span><span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span><span class="token string">""</span> <span class="token operator">+</span> configure<span class="token punctuation">.</span><span class="token function">getJavaPid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 省略部分代码 </span>    <span class="token comment">// 动态加载 Agent</span>        virtualMachine<span class="token punctuation">.</span><span class="token function">loadAgent</span><span class="token punctuation">(</span>arthasAgentPath<span class="token punctuation">,</span>                configure<span class="token punctuation">.</span><span class="token function">getArthasCore</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">";"</span> <span class="token operator">+</span> configure<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="JavaAgent-代理（agent）"><a href="#JavaAgent-代理（agent）" class="headerlink" title="JavaAgent 代理（agent）"></a>JavaAgent 代理（agent）</h3><p>** 模块代码 **：</p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvYXJ0aGFzL3RyZWUvbWFzdGVyL2FnZW50">GitHub Code by arthas-agent<i class="fa fa-external-link-alt"></i></span></p><h4 id="模块入口-2"><a href="#模块入口-2" class="headerlink" title="模块入口"></a>模块入口</h4><p>在 arthas-core 模块的 pom.xml 中，找到启动类：</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>manifestEntries</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Premain-Class</span><span class="token punctuation">></span></span>com.taobao.arthas.agent334.AgentBootstrap<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Premain-Class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Agent-Class</span><span class="token punctuation">></span></span>com.taobao.arthas.agent334.AgentBootstrap<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Agent-Class</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>manifestEntries</span><span class="token punctuation">></span></span></code></pre><p><code>com.taobao.arthas.agent334.AgentBootstrap.main ()</code> 方法：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvYXJ0aGFzL2Jsb2IvbWFzdGVyL2FnZW50L3NyYy9tYWluL2phdmEvY29tL3Rhb2Jhby9hcnRoYXMvYWdlbnQzMzQvQWdlbnRCb290c3RyYXAuamF2YQ==">GitHub Code by AgentBootstrap.java<i class="fa fa-external-link-alt"></i></span></p><h4 id="源码分析-2"><a href="#源码分析-2" class="headerlink" title="源码分析"></a>源码分析</h4><p><code>main ()</code> 方法中对于 <code>arthas-spy</code>(简单理解为勾子类，类似于 spring aop 的前置方法，后置方法) 进行了加载。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token class-name">ClassLoader</span> agentLoader <span class="token operator">=</span> <span class="token function">getClassLoader</span><span class="token punctuation">(</span>inst<span class="token punctuation">,</span> arthasCoreJarFile<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>将 spyJar 添加到了 BootstrapClassLoader (启动类加载器)，优先加载启动类加载器，spy 可以在各个 ClassLoader 中使用。</p><pre class="language-none"><code class="language-none">private static ClassLoader getClassLoader (Instrumentation inst, File arthasCoreJarFile) throws Throwable &#123;    &#x2F;&#x2F; 构造自定义的类加载器，尽量减少 Arthas 对现有工程的侵蚀    return loadOrDefineClassLoader (arthasCoreJarFile);&#125;</code></pre><p>异步调用 bind () 方法，启动服务端，监听端口，和客户端进行通讯。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Thread</span> bindingThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token function">bind</span><span class="token punctuation">(</span>inst<span class="token punctuation">,</span> agentLoader<span class="token punctuation">,</span> agentArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> throwable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            throwable<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span>ps<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    <summary type="html">
    
      Arthas之源码简要分析。
    
    </summary>
    
    
      <category term="Java" scheme="https://jueee.github.io/categories/Java/"/>
    
      <category term="Java诊断" scheme="https://jueee.github.io/categories/Java/Java%E8%AF%8A%E6%96%AD/"/>
    
    
      <category term="Java诊断" scheme="https://jueee.github.io/tags/Java%E8%AF%8A%E6%96%AD/"/>
    
      <category term="Arthas" scheme="https://jueee.github.io/tags/Arthas/"/>
    
  </entry>
  
  <entry>
    <title>Arthas 之各模块简介</title>
    <link href="https://jueee.github.io/2020/08/2020-08-02-Arthas%E4%B9%8B%E5%90%84%E6%A8%A1%E5%9D%97%E7%AE%80%E4%BB%8B/"/>
    <id>https://jueee.github.io/2020/08/2020-08-02-Arthas%E4%B9%8B%E5%90%84%E6%A8%A1%E5%9D%97%E7%AE%80%E4%BB%8B/</id>
    <published>2020-08-02T00:00:00.000Z</published>
    <updated>2020-08-13T06:07:28.368Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Arthas"><a href="#Arthas" class="headerlink" title="Arthas"></a>Arthas</h3><h4 id="项目代码"><a href="#项目代码" class="headerlink" title="项目代码"></a>项目代码</h4><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvYXJ0aGFz">GitHub Code by arthas<i class="fa fa-external-link-alt"></i></span></p><h4 id="包含模块"><a href="#包含模块" class="headerlink" title="包含模块"></a>包含模块</h4><p><img src="/images/2020/08/1596679506644.png" alt="1596679506644" loading="lazy"></p><h3 id="模块简介"><a href="#模块简介" class="headerlink" title="模块简介"></a>模块简介</h3><ul><li>arthas-agent：基于 JavaAgent 技术的代理</li><li>bin：一些启动脚本</li><li>arthas-boot：Java 版本的一键安装启动脚本</li><li>arthas-client：telnet client 代码</li><li>arthas-common：一些共用的工具类和枚举类</li><li>arthas-core：核心库，各种 arthas 命令的交互和实现</li><li>arthas-demo：示例代码</li><li>arthas-memorycompiler：内存编绎器代码</li><li>arthas-packaging：maven 打包相关的</li><li>arthas-site：arthas 站点</li><li>arthas-spy：编织到目标类中的各个切面</li><li>static：静态资源</li><li>arthas-testcase：测试</li></ul><h3 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h3><p>Arthas 提供的功能主要可以分为以下三个方面：</p><ol><li>信息监控<ul><li>进程运行基本信息包括：内存、CPU 占用、线程信息、线程堆栈、线程数统计、环境变量信息。</li><li>对象信息：类对象静态属性、 Mbean 的属性信息、已加载类信息、类加载器、类方法信息。</li></ul></li><li>方法调用<ul><li>方法调用入参、返回值查看。</li><li>方法被调用的调用路径、调用耗时、方法调用次数、成功次数、失败次数等统计。</li><li>记录和重做方法调用。</li></ul></li><li>类文件处理<ul><li>dump 已加载类的字节码、字节码反编译、类编译、类重新热加载。</li></ul></li></ol><h3 id="模块关系"><a href="#模块关系" class="headerlink" title="模块关系"></a>模块关系</h3><p>整体宏观模块调用图：</p><p><img src="/images/2020/08/1596698216827.png" alt="1596698216827" loading="lazy"></p><p>模块描述：</p><p><img src="/images/2020/08/1596616373228.png" alt="1596616373228" loading="lazy"></p><h3 id="核心类描述"><a href="#核心类描述" class="headerlink" title="核心类描述"></a>核心类描述</h3><p>核心类描述：</p><p><img src="/images/2020/08/1596710846489.png" alt="1596710846489" loading="lazy"></p><p>核心类描述（精简版）</p><p><img src="/images/2020/08/1596700025625.png" alt="1596700025625" loading="lazy"></p><h3 id="常用命令汇总"><a href="#常用命令汇总" class="headerlink" title="常用命令汇总"></a>常用命令汇总</h3><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvYXJ0aGFzL2lzc3Vlcy8xMDAz">Arthas 常用命令汇总<i class="fa fa-external-link-alt"></i></span></p><p><img src="/images/2020/08/1596701687793.png" alt="1596701687793" loading="lazy"></p>]]></content>
    
    <summary type="html">
    
      Arthas之各模块简介。
    
    </summary>
    
    
      <category term="Java" scheme="https://jueee.github.io/categories/Java/"/>
    
      <category term="Java诊断" scheme="https://jueee.github.io/categories/Java/Java%E8%AF%8A%E6%96%AD/"/>
    
    
      <category term="Java诊断" scheme="https://jueee.github.io/tags/Java%E8%AF%8A%E6%96%AD/"/>
    
      <category term="Arthas" scheme="https://jueee.github.io/tags/Arthas/"/>
    
  </entry>
  
  <entry>
    <title>迁移 VMware 虚拟机至微软 Hyper-V</title>
    <link href="https://jueee.github.io/2020/07/2020-07-31-%E8%BF%81%E7%A7%BBVMware%E8%99%9A%E6%8B%9F%E6%9C%BA%E8%87%B3%E5%BE%AE%E8%BD%AFHyper-V/"/>
    <id>https://jueee.github.io/2020/07/2020-07-31-%E8%BF%81%E7%A7%BBVMware%E8%99%9A%E6%8B%9F%E6%9C%BA%E8%87%B3%E5%BE%AE%E8%BD%AFHyper-V/</id>
    <published>2020-07-31T00:00:00.000Z</published>
    <updated>2020-08-13T02:30:29.184Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Hyper-V-虚拟机"><a href="#Hyper-V-虚拟机" class="headerlink" title="Hyper-V 虚拟机"></a>Hyper-V 虚拟机</h3><p>Hyper-V 是微软的一款虚拟化产品，是微软第一个采用类似 Vmware ESXi 和 Citrix Xen 的基于 hypervisor 的技术。</p><h3 id="开启-Hyper-V"><a href="#开启-Hyper-V" class="headerlink" title="开启 Hyper-V"></a>开启 Hyper-V</h3><p>进入电脑的控制面板 -&gt; 程序 -&gt; 启用或关闭 Windows 功能 -&gt; 把 Hyper-v 勾上，启用后电脑会重启。</p><p><img src="/images/2020/07/1595925972986.png" alt="1595925972986" loading="lazy"></p><h3 id="迁移-VMware-虚拟机"><a href="#迁移-VMware-虚拟机" class="headerlink" title="迁移 VMware 虚拟机"></a>迁移 VMware 虚拟机</h3><h4 id="使用微软-MVMC-工具实现迁移"><a href="#使用微软-MVMC-工具实现迁移" class="headerlink" title="使用微软 MVMC 工具实现迁移"></a>使用微软 MVMC 工具实现迁移</h4><p>MVMC 工具可以直接由微软官网下载</p><blockquote><p><span class="exturl" data-url="aHR0cDovL3d3dy5taWNyb3NvZnQuY29tL2VuLXVzL2Rvd25sb2FkL2RldGFpbHMuYXNweD9pZD00MjQ5Nw==">下载链接<i class="fa fa-external-link-alt"></i></span></p></blockquote><p>下载完成后，将安装文件拷贝到要安装 MVMC 的服务器上。</p><h4 id="安装-StarWind-V2V-Converter"><a href="#安装-StarWind-V2V-Converter" class="headerlink" title="安装 StarWind V2V Converter"></a>安装 StarWind V2V Converter</h4><p>下载 StarWind V2V Converter 安装文件并执行安装，安装过程按照引导进行即可。</p><p>安装完成后，打开 <code>StarWind V2V Image Converter</code>。</p><p>选择 Local file：</p><p><img src="/images/2020/07/1596174987682.png" alt="1596174987682" loading="lazy"></p><p>Next，选择 VMware 虚拟机的 vmdk 文件：</p><p><img src="/images/2020/07/1596175078239.png" alt="1596175078239" loading="lazy"></p><p>再点击 Next，等待转换完成，即可。</p><p><img src="/images/2020/07/1596174902166.png" alt="1596174902166" loading="lazy"></p><h4 id="导入-vhd-文件"><a href="#导入-vhd-文件" class="headerlink" title="导入 vhd 文件"></a>导入 vhd 文件</h4><p>打开 Hyper-V，新建虚拟机。</p><p>指定名称和存储位置。</p><p><img src="/images/2020/07/1596175210979.png" alt="1596175210979" loading="lazy"></p><p>指定虚拟机的代数，选择第一代。</p><blockquote><p>Windows10 Hyper-V 支持的虚拟机文件格式有两代，第一代的文件后缀为.vhd；第二代的文件后缀为.vhdx。</p></blockquote><p><img src="/images/2020/07/1596175283830.png" alt="1596175283830" loading="lazy"></p><p>分配内存：</p><p><img src="/images/2020/07/1596175352095.png" alt="1596175352095" loading="lazy"></p><p>配置网络：</p><p><img src="/images/2020/07/1596175380895.png" alt="1596175380895" loading="lazy"></p><p>选择指定刚刚生成的.vhd 文件：</p><p><img src="/images/2020/07/1596175428931.png" alt="1596175428931" loading="lazy"></p><p>转换导入成功，接下来，虚拟机就可以运行了。</p><h3 id="Hyper-v-虚拟机联网配置"><a href="#Hyper-v-虚拟机联网配置" class="headerlink" title="Hyper-v 虚拟机联网配置"></a>Hyper-v 虚拟机联网配置</h3><h4 id="新建虚拟交换机"><a href="#新建虚拟交换机" class="headerlink" title="新建虚拟交换机"></a>新建虚拟交换机</h4><p>选择：</p><p><img src="/images/2020/07/1596175872059.png" alt="1596175872059" loading="lazy"></p><p>输入交换机名称和选择外部网络，可以看到外部网络的下拉框的选项，这里选择当前计算机的联网方式。</p><p>如何知道当前使用什么方式联网呢？--- 查看网络适配器。</p><p><img src="/images/2020/07/1596176082370.png" alt="1596176082370" loading="lazy"></p><p>** 如果主机切换了联网方式，只要去虚拟机里改下对应的下拉选项即可。**</p><p><img src="/images/2020/07/1596175973333.png" alt="1596175973333" loading="lazy"></p><p>点击确定，建立虚拟交换机。</p><h4 id="更改虚拟机的网络适配器"><a href="#更改虚拟机的网络适配器" class="headerlink" title="更改虚拟机的网络适配器"></a>更改虚拟机的网络适配器</h4><p>右键 --- 设置 --- 网络适配器：</p><p><img src="/images/2020/07/1596176189357.png" alt="1596176189357" loading="lazy"></p><h3 id="debian-设置网络"><a href="#debian-设置网络" class="headerlink" title="debian 设置网络"></a>debian 设置网络</h3><p>问题描述：</p><p>配置完 /etc/networking/interfaces 后，使用 /etc/init.d/networking restart 出现启动失败，根据提示输入 systemctl status networking.service 发现不认识 /etc/networking/interfaces 中配置的虚拟网卡 (或者是因为虚拟机的重新移动导致的设备不匹配问题等)</p><p>解决方法：</p><p>首先可以查看 etc/udev/rules.d/70-persistent-net.rules 是否存在，如果存在，则删除 rm etc/udev/rules.d/70-persistent-net.rules，重启即可</p><p>如果 etc/udev/rules.d/70-persistent-net.rules 不存在，则 ifconfig -a 查看全部网卡，修改 /etc/networking/interfaces 中的网卡名和 ifconfig -a 命令显示的网卡名匹配，重启网络即可。</p>]]></content>
    
    <summary type="html">
    
      介绍微软 Hyper-V 虚拟机的使用。
    
    </summary>
    
    
      <category term="Windows" scheme="https://jueee.github.io/categories/Windows/"/>
    
      <category term="软件" scheme="https://jueee.github.io/categories/Windows/%E8%BD%AF%E4%BB%B6/"/>
    
    
      <category term="Windows" scheme="https://jueee.github.io/tags/Windows/"/>
    
      <category term="软件" scheme="https://jueee.github.io/tags/%E8%BD%AF%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>idea 相关配置总结</title>
    <link href="https://jueee.github.io/2020/07/2020-08-06-idea%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE%E6%80%BB%E7%BB%93/"/>
    <id>https://jueee.github.io/2020/07/2020-08-06-idea%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE%E6%80%BB%E7%BB%93/</id>
    <published>2020-07-31T00:00:00.000Z</published>
    <updated>2020-08-13T06:07:28.374Z</updated>
    
    <content type="html"><![CDATA[<h3 id="对-maven-仓库建立快捷方式"><a href="#对-maven-仓库建立快捷方式" class="headerlink" title="对 maven 仓库建立快捷方式"></a>对 maven 仓库建立快捷方式</h3><p>对于 maven 仓库配置在其他磁盘的情况，建立快捷方式。</p><p>使用管理员权限执行如下命令：</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">cmd <span class="token operator">/</span>c mklink <span class="token operator">/</span>D C:\Users\hzweiyongqiang\<span class="token punctuation">.</span>m2\repository E:\code\Java\repository</code></pre><h3 id="配置阿里云中央仓库"><a href="#配置阿里云中央仓库" class="headerlink" title="配置阿里云中央仓库"></a>配置阿里云中央仓库</h3><p>进入到 idea 安装目录，找到 \plugins\maven\lib 目录，可以看到 maven 有几个</p><p><img src="/images/2020/08/1596678866870.png" alt="1596678866870" loading="lazy"></p><p>修改 maven3 下 conf 目录下的 settings.xml 。</p><p>找到 mirrors，添加以下内容：</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>alimaven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>aliyun maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://maven.aliyun.com/nexus/content/groups/public/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">></span></span>central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">></span></span></code></pre><p>修改后保存，打开 idea，菜单 file-settings, 搜索 maven，选择刚才修改的 maven：</p><p><img src="/images/2020/08/1596679064163.png" alt="1596679064163" loading="lazy"></p><p>设置好后保存，以后使用 maven 速度会提升很多倍。</p><h3 id="鼠标控制放大缩小"><a href="#鼠标控制放大缩小" class="headerlink" title="鼠标控制放大缩小"></a>鼠标控制放大缩小</h3><p>File -&gt; Setting -&gt; Editor -&gt; General</p><p><img src="/images/2020/08/1596680119868.png" alt="1596680119868" loading="lazy"></p>]]></content>
    
    <summary type="html">
    
      idea相关配置总结。
    
    </summary>
    
    
      <category term="软件" scheme="https://jueee.github.io/categories/%E8%BD%AF%E4%BB%B6/"/>
    
      <category term="IDE" scheme="https://jueee.github.io/categories/%E8%BD%AF%E4%BB%B6/IDE/"/>
    
    
      <category term="软件" scheme="https://jueee.github.io/tags/%E8%BD%AF%E4%BB%B6/"/>
    
      <category term="IDE" scheme="https://jueee.github.io/tags/IDE/"/>
    
      <category term="idea" scheme="https://jueee.github.io/tags/idea/"/>
    
  </entry>
  
  <entry>
    <title>为 Github 项目说明添加优美标签</title>
    <link href="https://jueee.github.io/2020/07/2020-07-30-%E4%B8%BAGithub%E9%A1%B9%E7%9B%AE%E8%AF%B4%E6%98%8E%E6%B7%BB%E5%8A%A0%E4%BC%98%E7%BE%8E%E6%A0%87%E7%AD%BE/"/>
    <id>https://jueee.github.io/2020/07/2020-07-30-%E4%B8%BAGithub%E9%A1%B9%E7%9B%AE%E8%AF%B4%E6%98%8E%E6%B7%BB%E5%8A%A0%E4%BC%98%E7%BE%8E%E6%A0%87%E7%AD%BE/</id>
    <published>2020-07-30T00:00:00.000Z</published>
    <updated>2020-08-07T03:15:48.543Z</updated>
    
    <content type="html"><![CDATA[<p>大家在 Github 上看项目的时候，是不是经常在项目介绍 README.md 里看到这种高大上的标签：</p><p> <img src="/images/2020/07/1596161123283.png" alt="1596161123283" loading="lazy"></p><p>** 接下来我们来制作这种标签 **。</p><h3 id="标签网站"><a href="#标签网站" class="headerlink" title="标签网站"></a>标签网站</h3><ul><li><span class="exturl" data-url="aHR0cHM6Ly9zaGllbGRzLmlvLw==">https://shields.io/<i class="fa fa-external-link-alt"></i></span></li></ul><h3 id="制作标签"><a href="#制作标签" class="headerlink" title="制作标签"></a>制作标签</h3><p>下拉，找到 Your Badge：</p><p><img src="/images/2020/07/1596160368983.png" alt="1596160368983" loading="lazy"></p><p>填写 <strong>subject、status、color</strong> 三个字段，点击 <strong>Make Badge</strong> 生成标签：</p><p><img src="/images/2020/07/1596160688666.png" alt="1596160688666" loading="lazy"></p><p>生成结果：</p><p><img src="/images/2020/07/1596160441795.png" alt="1596160441795" loading="lazy"></p><p>复制标签地址：<span class="exturl" data-url="aHR0cHM6Ly9pbWcuc2hpZWxkcy5pby9iYWRnZS9hdXRob3ItSnVlZWUtZ3JlZW4=">https://img.shields.io/badge/author-Jueee-green<i class="fa fa-external-link-alt"></i></span></p><p>在 README.md 里添加如下代码：</p><pre class="language-html" data-language="html"><code class="language-html">![](https://img.shields.io/badge/author-Jueee-green)</code></pre><p>可以看到如下显示：</p><p><img src="https://img.shields.io/badge/author-Jueee-green" loading="lazy"></p><p>这些图片 url 是有规律的：<code>文字 - 文字 - 颜色</code>。</p><h3 id="组合标签"><a href="#组合标签" class="headerlink" title="组合标签"></a>组合标签</h3><pre class="language-none"><code class="language-none">![](https:&#x2F;&#x2F;img.shields.io&#x2F;badge&#x2F;build-success-green) ![](https:&#x2F;&#x2F;img.shields.io&#x2F;badge&#x2F;version-1.0-orange) ![](https:&#x2F;&#x2F;img.shields.io&#x2F;badge&#x2F;author-Jueee-blue)</code></pre><p>效果如下：</p><p><img src="/images/2020/07/1596162573650.png" alt="1596162573650" loading="lazy"></p><h3 id="添加点击事件"><a href="#添加点击事件" class="headerlink" title="添加点击事件"></a>添加点击事件</h3><p>为标签添加点击事件，代码如下：</p><pre class="language-none"><code class="language-none">[![](https:&#x2F;&#x2F;img.shields.io&#x2F;badge&#x2F;author-Jueee-green)](点击跳转的链接)</code></pre><h4 id="为啥这么写？"><a href="#为啥这么写？" class="headerlink" title="为啥这么写？"></a>为啥这么写？</h4><p>我们知道，MarkDown 中 ** 链接 ** 显示语法为</p><pre class="language-csharp" data-language="csharp"><code class="language-csharp"><span class="token punctuation">[</span > 链接名称 < span class="token punctuation">]</span><span class="token punctuation">(</span > 链接地址 < span class="token punctuation">)</span></code></pre><p>** 图片 ** 显示语法为：</p><pre class="language-css" data-language="css"><code class="language-css">![图片名称]<span class="token punctuation">(</span > 图片地址 < span class="token punctuation">)</span></code></pre><p>那么带链接的图片就是将两者语法嵌套就行了，即 <code>[链接名称]</code> 部分变成图片显示语法，语法变成：</p><pre class="language-csharp" data-language="csharp"><code class="language-csharp"><span class="token punctuation">[</span><span class="token operator">!</span><span class="token punctuation">[</span > 图片名称 < span class="token punctuation">]</span><span class="token punctuation">(</span > 图片地址 < span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span > 链接地址 < span class="token punctuation">)</span></code></pre>]]></content>
    
    <summary type="html">
    
      制作项目介绍 README.md 里看到这种高大上的标签。
    
    </summary>
    
    
      <category term="Blog" scheme="https://jueee.github.io/categories/Blog/"/>
    
    
      <category term="Blog" scheme="https://jueee.github.io/tags/Blog/"/>
    
      <category term="HTML" scheme="https://jueee.github.io/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>为 GitLab 代码库配置 Specific Runner</title>
    <link href="https://jueee.github.io/2020/07/2020-07-25-%E4%B8%BAGitLab%E4%BB%A3%E7%A0%81%E5%BA%93%E9%85%8D%E7%BD%AESpecific%20Runner/"/>
    <id>https://jueee.github.io/2020/07/2020-07-25-%E4%B8%BAGitLab%E4%BB%A3%E7%A0%81%E5%BA%93%E9%85%8D%E7%BD%AESpecific%20Runner/</id>
    <published>2020-07-25T00:00:00.000Z</published>
    <updated>2020-08-11T11:15:30.916Z</updated>
    
    <content type="html"><![CDATA[<h3 id="添加-k8s-集群"><a href="#添加-k8s-集群" class="headerlink" title="添加 k8s 集群"></a>添加 k8s 集群</h3><p>单击 ** 添加现有集群 ** 选项卡，然后填写详细信息：</p><ul><li><p>**Kubernetes 集群名称 **（必填）- 您希望为 ** 集群指定 ** 的名称。</p></li><li><p>** 环境范围 **（必需）-  <a href="index.md#setting-the-environment-scope-premium">与</a> 此集群 <a href="index.md#setting-the-environment-scope-premium">相关的环境</a>。</p></li><li><p><strong>API URL</strong>（必填）- 这是 GitLab 用于访问 Kubernetes API 的 URL。Kubernetes 公开了几个 API，我们希望所有 API 都具有通用的 “基本” URL，例如，<code>https://kubernetes.example.com</code> 而不是 <code>https://kubernetes.example.com/api/v1</code>。</p><p>通过运行以下命令获取 API URL：</p><pre class="language-none"><code class="language-none">kubectl cluster-info | grep &#39;Kubernetes master&#39; | awk &#39;&#x2F;http&#x2F; &#123;print $NF&#125;&#39;</code></pre></li><li><p>**CA 证书 **（必需）- 需要有效的 Kubernetes 证书才能对集群进行身份验证。我们将使用默认创建的证书。</p><ul><li><p>用列出秘密 <code>kubectl get secrets</code>，并命名类似  <code>default-token-xxxxx</code>。复制该令牌名称以在下面使用。</p></li><li><p>通过运行以下命令获取证书：</p><pre class="language-none"><code class="language-none">kubectl get secret &lt;secret name&gt; -o jsonpath&#x3D;&quot;&#123;[&#39;data&#39;][&#39;ca\.crt&#39;]&#125;&quot; | base64 --decode</code></pre><p>注意：** 注意：**  如果命令返回整个证书链，则需要在证书链 底部复制 * root ca * 证书。</p></li></ul></li><li><p>** 令牌 ** -GitLab 使用服务令牌对 Kubernetes 进行身份验证，该服务令牌的范围仅限于特定的 <code>namespace</code>。 ** 使用的令牌应属于具有 cluster-admin 特权的服务帐户  。** 要创建此服务帐户：</p><ol><li><p>创建一个 <code>gitlab-admin-service-account.yaml</code> 包含内容的文件：</p><p>&lt;!--hexoPostRenderEscape:<pre class="language-none"><code class="language-none">apiVersion: v1<br>kind: ServiceAccount<br>metadata:<br>name: gitlab-admin<br>namespace: kube-system</p></li></ol></li></ul><hr><p>apiVersion: rbac.authorization.k8s.io&#x2F;v1beta1<br>kind: ClusterRoleBinding<br>metadata:<br>  name: gitlab-admin<br>roleRef:<br>  apiGroup: rbac.authorization.k8s.io<br>  kind: ClusterRole<br>  name: cluster-admin<br>subjects:</p><ul><li><p>kind: ServiceAccount<br>name: gitlab-admin<br>namespace: kube-system</code></pre>:hexoPostRenderEscape--&gt;</p><ol start="2"><li><p>将服务帐户和群集角色绑定应用于您的群集：</p><pre class="language-none"><code class="language-none">kubectl apply -f gitlab-admin-service-account.yaml</code></pre><p>您将需要 <code>container.clusterRoleBindings.create</code> 许可权才能创建集群级角色。如果您没有此权限，则可以选择启用基本身份验证，然后 <code>kubectl apply</code> 以管理员身份运行  命令：</p><pre class="language-none"><code class="language-none">kubectl apply -f gitlab-admin-service-account.yaml --username&#x3D;admin --password&#x3D;&lt;password&gt;</code></pre><p>注意：** 注意：**  可以打开基本身份验证，并可以使用 Google Cloud Console 获取密码凭据。</p><p>输出：</p><pre class="language-none"><code class="language-none">serviceaccount &quot;gitlab-admin&quot; createdclusterrolebinding &quot;gitlab-admin&quot; created</code></pre></li><li><p>检索 <code>gitlab-admin</code> 服务帐户的令牌：</p><pre class="language-none"><code class="language-none">kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | grep gitlab-admin | awk &#39;&#123;print $1&#125;&#39;)</code></pre><p>复制 <code>&lt;authentication_token&gt;</code> 输出中的值：</p><p>&lt;!--hexoPostRenderEscape:<pre class="language-none"><code class="language-none">Name:         gitlab-admin-token-b5zv4<br>Namespace:    kube-system<br>Labels:       &lt;none&gt;<br>Annotations:  kubernetes.io&#x2F;service-account.name&#x3D;gitlab-admin</p><pre><code>     kubernetes.io&amp;#x2F;service-account.uid&amp;#x3D;bcfe66ac-39be-11e8-97e8-026dce96b6e8</code></pre></li></ol></li></ul><p>Type:  kubernetes.io&#x2F;service-account-token</p><p>Data<br>&#x3D;&#x3D;&#x3D;&#x3D;<br>ca.crt:     1025 bytes<br>namespace:  11 bytes<br>token:      &lt;authentication_token&gt;</code></pre>:hexoPostRenderEscape--&gt;</p><h3 id="配置-Specific-Runner"><a href="#配置-Specific-Runner" class="headerlink" title="配置 Specific Runner"></a>配置 Specific Runner</h3><p>在 GitLab 的 CI/CD 流程中具体执行任务的节点叫做 <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmdpdGxhYi5jb20vcnVubmVyLw==">runner<i class="fa fa-external-link-alt"></i></span>。GitLab 中有两种类型的 runner：</p><ul><li><strong>Shared Runners</strong> 由 GitLab 管理员配置的公有 runner。多个项目公用。作为开发人员无需配置，可以直接使用。</li><li><strong>Specific Runners</strong> 开发人员为每个代码库单独配置的专属 runner。只能执行所属代码库的任务。需要开发人员手动搭建。</li></ul><p>由于我厂的 GitLab 并没有配置任何 Shared Runner。所以只能选择在自己的台式机上手动搭建。</p><h3 id="下载-runner-可执行文件"><a href="#下载-runner-可执行文件" class="headerlink" title="下载 runner 可执行文件"></a>下载 runner 可执行文件</h3><p>根据你的环境下载 <span class="exturl" data-url="aHR0cHM6Ly9naXRsYWItcnVubmVyLWRvd25sb2Fkcy5zMy5hbWF6b25hd3MuY29tL2xhdGVzdC9iaW5hcmllcy9naXRsYWItcnVubmVyLXdpbmRvd3MtMzg2LmV4ZQ==">x86<i class="fa fa-external-link-alt"></i></span> 或者 <span class="exturl" data-url="aHR0cHM6Ly9naXRsYWItcnVubmVyLWRvd25sb2Fkcy5zMy5hbWF6b25hd3MuY29tL2xhdGVzdC9iaW5hcmllcy9naXRsYWItcnVubmVyLXdpbmRvd3MtYW1kNjQuZXhl">amd64<i class="fa fa-external-link-alt"></i></span> 版本。</p><p>创建 <code>D:\GitLab-Runner</code> 目录，将刚刚下载好的文件复制到该目录并重命名为 <code>gitlab-runner.exe</code>。</p><h3 id="获取配置信息"><a href="#获取配置信息" class="headerlink" title="获取配置信息"></a>获取配置信息</h3><p>进入代码库主页，依次点击 <code>Settings</code> =&gt; <code>CI / CD</code> =&gt; <code>Runners settings</code>。</p><p><img src="/images/2020/07/1595562311495.png" alt="1595562311495" loading="lazy"></p><p>这里展开的信息中有两个字段需要我们记下来。分别是一个 URL 和一个 Token。</p><p><img src="/images/2020/07/1595562367478.png" alt="1595562367478" loading="lazy"></p><h3 id="注册-runner"><a href="#注册-runner" class="headerlink" title="注册 runner"></a>注册 runner</h3><h4 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h4><pre class="language-none"><code class="language-none">k exec -it runner-gitlab-runner-74cf6f794b-22vln gitlab-runner register -n gitlab-managed-apps</code></pre><h4 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h4><p>进入 <code>D:\GitLab-Runner</code> 目录执行命令：</p><pre class="language-yml" data-language="yml"><code class="language-yml">.&#x2F;gitlab-runner.exe register</code></pre><h4 id="进行注册"><a href="#进行注册" class="headerlink" title="进行注册"></a>进行注册</h4><p>执行完后会进入一个交互式的配置流程，你需要回答以下问题：</p><ul><li><code>Please enter the gitlab-ci coordinator URL</code>：填入上一步获取的 URL</li><li><code>Please enter the gitlab-ci token for this runner</code>：填入上一步获取的 Token</li><li><code>Please enter the gitlab-ci description for this runner</code>：给你的 runner 起一个名字</li><li><code>Please enter the gitlab-ci tags for this runner (comma separated)</code>：GitLab 允许我们给 runner 设置标签，设置好后该 runner 只会执行拥有相同标签的任务。由于我们的 runner 只为我们自己的代码库服务，所以此处不做过多配置。留空即可。</li><li><code>Whether to lock Runner to current project</code>：该 runner 是否应该锁定在当前项目上。由于我们是自己用，选 <code>true</code> 即可。</li><li><code>Please enter the executor: ssh, docker+machine, docker-ssh+machine, kubernetes, docker, parallels, virtualbox, docker-ssh, shell: docker</code>：选择任务执行环境，我们选择最简单的 <code>shell</code>。</li></ul><h3 id="验证服务已启动"><a href="#验证服务已启动" class="headerlink" title="验证服务已启动"></a>验证服务已启动</h3><p>进入代码库主页，依次点击 <code>Settings</code> =&gt; <code>CI / CD</code> =&gt; <code>Runners settings</code>。</p><p><img src="/images/2020/07/1595562200358.png" alt="1595562200358" loading="lazy"></p>]]></content>
    
    <summary type="html">
    
      在 GitLab 的 CI/CD 流程。
    
    </summary>
    
    
      <category term="Git" scheme="https://jueee.github.io/categories/Git/"/>
    
    
      <category term="Git" scheme="https://jueee.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>使用 GitBook 进行团队文档协作</title>
    <link href="https://jueee.github.io/2020/07/2020-07-24-%E4%BD%BF%E7%94%A8GitBook%E8%BF%9B%E8%A1%8C%E5%9B%A2%E9%98%9F%E6%96%87%E6%A1%A3%E5%8D%8F%E4%BD%9C/"/>
    <id>https://jueee.github.io/2020/07/2020-07-24-%E4%BD%BF%E7%94%A8GitBook%E8%BF%9B%E8%A1%8C%E5%9B%A2%E9%98%9F%E6%96%87%E6%A1%A3%E5%8D%8F%E4%BD%9C/</id>
    <published>2020-07-24T00:00:00.000Z</published>
    <updated>2020-08-07T03:16:22.518Z</updated>
    
    <content type="html"><![CDATA[<p><strong>GitBook 提供了 GitBook Editor ，GitBook cli 这两个工具，一个是编辑文档，一个可以生成文档。只要本地搭建一个 Git 服务就完全可以实现本地化了。</strong></p><h3 id="工具准备"><a href="#工具准备" class="headerlink" title="工具准备"></a>工具准备</h3><p>如果没有团队协作要求，只想生成电子书，只在自己机器上安装 GitBook CI 就可以，1，2 就可以省略了。</p><ol><li>GitLab 一键安装包 <span class="exturl" data-url="aHR0cHM6Ly9hYm91dC5naXRsYWIuY29tL2Rvd25sb2Fkcy8=">https://about.gitlab.com/downloads/<i class="fa fa-external-link-alt"></i></span> </li><li>GitLab Ci Runner <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2dpdGxhYmhxL2dpdGxhYi1jaS1ydW5uZXI=">https://github.com/gitlabhq/gitlab-ci-runner<i class="fa fa-external-link-alt"></i></span> </li><li>GitBook CI <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0dpdGJvb2tJTy9naXRib29rLWNsaQ==">https://github.com/GitbookIO/gitbook-cli<i class="fa fa-external-link-alt"></i></span> </li><li>GitBook Editor <span class="exturl" data-url="aHR0cHM6Ly93d3cuZ2l0Ym9vay5jb20vZWRpdG9y">https://www.gitbook.com/editor<i class="fa fa-external-link-alt"></i></span></li></ol><h3 id="GitLab-Runner-配置"><a href="#GitLab-Runner-配置" class="headerlink" title="GitLab Runner 配置"></a>GitLab Runner 配置</h3><h4 id="编辑-gitlab-ci-yml"><a href="#编辑-gitlab-ci-yml" class="headerlink" title="编辑 .gitlab-ci.yml"></a>编辑 .gitlab-ci.yml</h4><pre class="language-yml" data-language="yml"><code class="language-yml"># 定义 stagesstages:  - build# 定义 jobGenerateHTML:  stage: build  script:    - p&#x3D;&#96;pwd&#96;    - echo $p    - gitbook build</code></pre><p>gitlab 执行构建，会在文件夹下生成 _book 的目录。</p><p>手工执行 gitbook serve 启动。</p><p>打开 ip:4000 就可以查看文档了。</p><h3 id="相关命令"><a href="#相关命令" class="headerlink" title="相关命令"></a>相关命令</h3><pre class="language-ruby" data-language="ruby"><code class="language-ruby">$ gitbook init <span class="token comment"># 初始化一个仓库 </span>$ gitbook install <span class="token comment"># 安装插件 </span>$ gitbook serve <span class="token comment"># 本地预览 </span>$ gitbook serve <span class="token operator">--</span>port <span class="token number">8001</span> <span class="token comment"># 指定端口，默认 4000</span>$ gitbook build  <span class="token comment"># 输出一个静态网站 </span>$ gitbook pdf <span class="token comment"># 生成 pdf 文件 </span>$ gitbook help <span class="token comment"># 查看帮助 </span></code></pre><p>可以使用 <code>--log=debug</code> 和 <code>--debug</code> 来获得更详细的错误消息（堆栈跟踪）。例如：</p><pre class="language-none"><code class="language-none">$ gitbook build .&#x2F; --log&#x3D;debug --debug</code></pre><p>or</p><pre class="language-none"><code class="language-none">$ gitbook serve .&#x2F; --log&#x3D;debug --debug</code></pre><h3 id="Docker-容器化"><a href="#Docker-容器化" class="headerlink" title="Docker 容器化"></a>Docker 容器化</h3><p><code>Dockerfile</code> 文件如下：</p><pre class="language-none"><code class="language-none">From node:10LABEL version&#x3D;$VERSIONENV TZ&#x3D;Asia&#x2F;ShanghaiRUN ln -snf &#x2F;usr&#x2F;share&#x2F;zoneinfo&#x2F;$TZ &#x2F;etc&#x2F;localtime &amp;&amp; echo $TZ &gt; &#x2F;etc&#x2F;timezoneWORKDIR &#x2F;gitbookCOPY xxx_deploy &#x2F;gitbookRUN npm install gitbook-cli -g &amp;&amp; gitbook fetch $&#123;VERSION&#125; &amp;&amp; npm cache clear --force &amp;&amp; rm -rf &#x2F;tmp&#x2F;*RUN gitbook buildCMD [&quot;gitbook&quot;, &quot;serve&quot;,&quot;--port&quot;,&quot;4000&quot;]</code></pre><h3 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h3><h4 id="windows-更新报错"><a href="#windows-更新报错" class="headerlink" title="windows 更新报错"></a>windows 更新报错</h4><p>gitbook 的新版本，在 windows 下有个 bug，当文件内容发生更新时，gitbook 报错然后退出：</p><pre class="language-none"><code class="language-none">Error: EPERM: operation not permitted, open</code></pre><p>gitbook 官方已有 bug，存在半年了，一直没有 fix：</p><ul><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0dpdGJvb2tJTy9naXRib29rL2lzc3Vlcy8xMzc5">git serve can&#39;t restart when file changes<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0dpdGJvb2tJTy9naXRib29rLWNsaS9pc3N1ZXMvNTE=">gitbook-cli crashes with EPERM: operation not permitted on windows<i class="fa fa-external-link-alt"></i></span></li></ul><p>** 解决方法 **</p><p>在官方 bugfix 之前，暂时只能回避：</p><ol><li><p>不要在 windows 下使用 gitbook：linux 没有这个问题</p></li><li><p>不是办法的办法：</p><p>新建一个 <code>run.bat</code> ，内容如下：</p><pre class="language-bash" data-language="bash"><code class="language-bash">@Echo off:Startcall gitbook servegoto Start</code></pre><p>每次崩溃之后立即重新启动一次，凑合着用吧。</p></li></ol><h4 id="底部链接修改与隐藏"><a href="#底部链接修改与隐藏" class="headerlink" title="底部链接修改与隐藏"></a>底部链接修改与隐藏</h4><p>用 GitBook 生成的网页中，在左侧目录下方默认有一个 Published with GitBook 连接，可以将这个连接去掉，或者替换成其它连接。</p><p>在 GitBook 站点目录创建 <code>_layouts-&gt;website-&gt;summary.html</code></p><pre class="language-html" data-language="html"><code class="language-html">&#123;% raw %&#125;&#123;% macro articles (_articles) %&#125;    &#123;% for article in _articles %&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>chapter &#123;% if article.path == file.path and not article.anchor %&#125;active&#123;% endif %&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">data-level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;&#123; article.level &#125;&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">&#123;%</span> <span class="token attr-name">if</span> <span class="token attr-name">article.path</span> <span class="token attr-name">%&#125;data-path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;&#123; article.path|resolveFile &#125;&#125;<span class="token punctuation">"</span></span><span class="token attr-name">&#123;%</span> <span class="token attr-name">endif</span> <span class="token attr-name">%&#125;</span><span class="token punctuation">></span></span>            &#123;% if article.path and getPageByPath (article.path) %&#125;                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;&#123; article.path|resolveFile &#125;&#125;&#123;&#123; article.anchor &#125;&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            &#123;% elif article.url %&#125;                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;&#123; article.url &#125;&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            &#123;% else %&#125;                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>            &#123;% endif %&#125;                    &#123;% if article.level != "0" and config.pluginsConfig ['theme-default'].showLevel %&#125;                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span>&#123;&#123; article.level &#125;&#125;.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span>                    &#123;% endif %&#125;                    &#123;&#123; article.title &#125;&#125;            &#123;% if article.path  or article.url %&#125;                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            &#123;% else %&#125;                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>            &#123;% endif %&#125;            &#123;% if article.articles.length > 0 %&#125;            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>articles<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                &#123;&#123; articles (article.articles, file, config) &#125;&#125;            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>            &#123;% endif %&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    &#123;% endfor %&#125;&#123;% endmacro %&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>summary<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    &#123;% set _divider = false %&#125;    &#123;% if config.links.sidebar  %&#125;    &#123;% for linkTitle, link in config.links.sidebar  %&#125;        &#123;% set _divider = true %&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;&#123; link &#125;&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>custom-link<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123; linkTitle &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    &#123;% endfor %&#125;    &#123;% endif %&#125;    &#123;% if _divider %&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>divider<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    &#123;% endif %&#125;    &#123;% for part in summary.parts %&#125;        &#123;% if part.title %&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123; part.title &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        &#123;% elif not loop.first %&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>divider<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        &#123;% endif %&#125;        &#123;&#123; articles (part.articles, file, config) &#125;&#125;    &#123;% endfor %&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>divider<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--&lt;li>        &lt;a href="https://www.gitbook.com" target="blank" class="gitbook-link">            &#123;&#123; "GITBOOK_LINK"|t &#125;&#125;        &lt;/a>    &lt;/li>--></span><p><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span><br>&#123;% endraw %&#125;</code></pre>:hexoPostRenderEscape--&gt;</p>]]></content>
    
    <summary type="html">
    
      GitBook 提供了 GitBook Editor ，GitBook cli 这两个工具，一个是编辑文档，一个可以生成文档。只要本地搭建一个Git 服务就完全可以实现本地化了。
    
    </summary>
    
    
      <category term="Blog" scheme="https://jueee.github.io/categories/Blog/"/>
    
    
      <category term="Blog" scheme="https://jueee.github.io/tags/Blog/"/>
    
      <category term="GitBook" scheme="https://jueee.github.io/tags/GitBook/"/>
    
  </entry>
  
  <entry>
    <title>使用 Arthas 热更新 Java 代码</title>
    <link href="https://jueee.github.io/2020/07/2020-07-16-%E4%BD%BF%E7%94%A8Arthas%E7%83%AD%E6%9B%B4%E6%96%B0Java%E4%BB%A3%E7%A0%81/"/>
    <id>https://jueee.github.io/2020/07/2020-07-16-%E4%BD%BF%E7%94%A8Arthas%E7%83%AD%E6%9B%B4%E6%96%B0Java%E4%BB%A3%E7%A0%81/</id>
    <published>2020-07-16T00:00:00.000Z</published>
    <updated>2020-08-10T03:20:34.680Z</updated>
    
    <content type="html"><![CDATA[<p>Arthas（阿尔萨斯）是 Alibaba 开源的一款 Java 诊断工具，使用它我们可以监控和排查 Java 程序，然而它还提供了非常实用的 Java 热更新功能。</p><p>所谓的 Java 热更新是指在不重启项目的情况下实现代码的更新与替换。使用它可以实现不停机更新 Java 程序，尤其是对那些启动非常耗时的 Java 项目来说，更是效果显著。</p><h3 id="Arthas-使用"><a href="#Arthas-使用" class="headerlink" title="Arthas 使用"></a>Arthas 使用</h3><h4 id="Arthas-资料"><a href="#Arthas-资料" class="headerlink" title="Arthas 资料"></a>Arthas 资料</h4><p>Github 地址：</p><blockquote><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvYXJ0aGFz">https://github.com/alibaba/arthas<i class="fa fa-external-link-alt"></i></span></p></blockquote><p>Arthas<br>用户文档：</p><blockquote><p><span class="exturl" data-url="aHR0cHM6Ly9hbGliYWJhLmdpdGh1Yi5pby9hcnRoYXMv">https://alibaba.github.io/arthas/<i class="fa fa-external-link-alt"></i></span></p></blockquote><h4 id="下载-Arthas"><a href="#下载-Arthas" class="headerlink" title="下载 Arthas"></a>下载 Arthas</h4><p>首先，我们先把 Arthas 的 Jar 包下载到本地，它的下载地址是：</p><blockquote><p><span class="exturl" data-url="aHR0cHM6Ly9hbGliYWJhLmdpdGh1Yi5pby9hcnRoYXMvYXJ0aGFzLWJvb3QuamFy">https://alibaba.github.io/arthas/arthas-boot.jar<i class="fa fa-external-link-alt"></i></span></p></blockquote><h4 id="启动-Arthas"><a href="#启动-Arthas" class="headerlink" title="启动 Arthas"></a>启动 Arthas</h4><p>我们只需要使用普通的 jar 包启动命令：<code>java -jar arthas-boot.jar</code> 来启动 Arthas 即可。</p><h4 id="Windows-运行"><a href="#Windows-运行" class="headerlink" title="Windows 运行"></a>Windows 运行</h4><p>Windows 需要以管理员方式运行，bat 脚本如下：</p><pre class="language-bat" data-language="bat"><code class="language-bat">%1 mshta vbscript:CreateObject (&quot;Shell.Application&quot;).ShellExecute (&quot;cmd.exe&quot;,&quot;&#x2F;c %~s0 ::&quot;,&quot;&quot;,&quot;runas&quot;,1)(window.close)&amp;&amp;exitcd &#x2F;d &quot;%~dp0&quot;java -jar arthas-boot.jar</code></pre><h3 id="热更新-Java-代码"><a href="#热更新-Java-代码" class="headerlink" title="热更新 Java 代码"></a>热更新 Java 代码</h3><p>假如我们原来的代码是这样的：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">sample<span class="token punctuation">.</span>redefine</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedefineSuccess</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"flag is true."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"flag is false."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>我们现在想要把 <code>flag</code> 变量改为 <code>false</code> 就可以这样来做：</p><ol><li>使用 Arthas 的内存编译工具将新的 Java 代码编译为字节码；</li><li>使用 Arthas 的 <code>redefine</code> 命令实现热更新。</li></ol><h4 id="编译字节码"><a href="#编译字节码" class="headerlink" title="编译字节码"></a>编译字节码</h4><p>首先，我们需要将新的 Java 代码编译为字节码，我们可以通过 Arthas 提供的 <code>mc</code> 命令实现，<code>mc</code> 是 Memory Compiler（内存编译器）的缩写。</p><p>实现示例如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token punctuation">[</span>arthas<span class="token annotation punctuation">@10200</span><span class="token punctuation">]</span>$ mc <span class="token class-name">C</span><span class="token operator">:</span><span class="token operator">/</span>arthas<span class="token operator">-</span>demo<span class="token operator">/</span>src<span class="token operator">/</span>main<span class="token operator">/</span>java<span class="token operator">/</span>sample<span class="token operator">/</span>redefine<span class="token operator">/</span><span class="token class-name">RedefineSuccess</span><span class="token punctuation">.</span>java <span class="token operator">-</span>d  <span class="token class-name">E</span><span class="token operator">:</span><span class="token class-name">Memory</span> compiler output<span class="token operator">:</span><span class="token class-name">E</span><span class="token operator">:</span>\sample\redefine\<span class="token class-name">RedefineSuccess</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token class-name">Affect</span><span class="token punctuation">(</span>row<span class="token operator">-</span>cnt<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">)</span> cost in <span class="token number">500</span> ms<span class="token punctuation">.</span></code></pre><p>其中 <code>-d</code> 表示编译文件的存放位置。</p><blockquote><p>小贴士：我们也可以使用 javac App.java 生成的字节码，它与此步骤执行的结果相同。</p></blockquote><h4 id="执行热更新"><a href="#执行热更新" class="headerlink" title="执行热更新"></a>执行热更新</h4><p>有了字节码文件之后，我们就可以使用 <code>redefine</code> 命令来实现热更新了，实现示例如下：</p><pre class="language-none"><code class="language-none">[arthas@10200]$ redefine e:&#x2F;sample&#x2F;redefine&#x2F;RedefineSuccess.classredefine success, size: 1</code></pre><p>从上述结果可以看出，热更新执行成功，此时我们去控制台查看执行结果，如下图所示：</p><p><img src="/images/2020/07/1594883244673.png" alt="1594883244673" loading="lazy"></p><p>这说明热更新执行确实成功了。</p><h3 id="结合-jad-mc-命令使用"><a href="#结合-jad-mc-命令使用" class="headerlink" title="结合 jad/mc 命令使用"></a>结合 jad/mc 命令使用</h3><pre class="language-shell" data-language="shell"><code class="language-shell">jad --source-only com.example.demo.arthas.user.UserController &gt; &#x2F;tmp&#x2F;UserController.javamc &#x2F;tmp&#x2F;UserController.java -d &#x2F;tmpredefine &#x2F;tmp&#x2F;com&#x2F;example&#x2F;demo&#x2F;arthas&#x2F;user&#x2F;UserController.class</code></pre><ul><li>jad 命令反编译，然后可以用其它编译器，比如 vim 来修改源码</li><li>mc 命令来内存编译修改过的代码</li><li>用 redefine 命令加载新的字节码</li></ul><h3 id="热更新注意事项"><a href="#热更新注意事项" class="headerlink" title="热更新注意事项"></a>热更新注意事项</h3><h4 id="redefine-特别说明"><a href="#redefine-特别说明" class="headerlink" title="redefine 特别说明"></a>redefine 特别说明</h4><p><code>redefine</code> 命令和 <code>jad</code>/<code>watch</code>/<code>trace</code>/<code>monitor</code>/<code>tt</code> 等命令会冲突。</p><p>执行完 <code>redefine</code> 之后，如果再执行上面提到的命令，则会把 <code>redefine</code> 的字节码重置。 </p><p>原因是 jdk 本身 redefine 和 Retransform 是不同的机制，同时使用两种机制来更新字节码，只有最后修改的会生效。</p><h4 id="条件限制"><a href="#条件限制" class="headerlink" title="条件限制"></a>条件限制</h4><p>使用热更新功能有一些条件限制，我们只能用它来修改方法内部的一些业务代码，如果我们出现了以下任意一种情况，那么热更新就会执行失败：</p><ol><li>增加类属性（类字段）；</li><li>增加或删除方法；</li><li>替换正在运行的方法。</li></ol><p>最后一条我们需要单独说明一下，假如我们把上面的示例改为如下代码：</p> <pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">sample<span class="token punctuation">.</span>redefine</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedefineError</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"flag is true."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"flag is false."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>那么此时我们再进行热更新操作修改 <code>flag</code> 的值，那么就会执行失败，因为我们替换的是正在运行中的方法，而我们正常示例中的代码之所以能成功，是因为我们在 <code>while</code> 无线循环中调用了另一个方法，而那个方法是被间歇性使用的，因此可以替换成功。</p>]]></content>
    
    <summary type="html">
    
      所谓的 Java 热更新是指在不重启项目的情况下实现代码的更新与替换。使用它可以实现不停机更新 Java 程序，尤其是对那些启动非常耗时的 Java 项目来说，更是效果显著。
    
    </summary>
    
    
      <category term="Java" scheme="https://jueee.github.io/categories/Java/"/>
    
      <category term="Java诊断" scheme="https://jueee.github.io/categories/Java/Java%E8%AF%8A%E6%96%AD/"/>
    
    
      <category term="Java诊断" scheme="https://jueee.github.io/tags/Java%E8%AF%8A%E6%96%AD/"/>
    
      <category term="Arthas" scheme="https://jueee.github.io/tags/Arthas/"/>
    
  </entry>
  
  <entry>
    <title>使用 LFTP 进行 SFTP 文件上传与下载</title>
    <link href="https://jueee.github.io/2020/07/2020-07-14-%E4%BD%BF%E7%94%A8LFTP%E8%BF%9B%E8%A1%8CSFTP%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%B8%8E%E4%B8%8B%E8%BD%BD/"/>
    <id>https://jueee.github.io/2020/07/2020-07-14-%E4%BD%BF%E7%94%A8LFTP%E8%BF%9B%E8%A1%8CSFTP%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%B8%8E%E4%B8%8B%E8%BD%BD/</id>
    <published>2020-07-14T00:00:00.000Z</published>
    <updated>2020-08-13T01:37:58.650Z</updated>
    
    <content type="html"><![CDATA[<h3 id="工具介绍"><a href="#工具介绍" class="headerlink" title="工具介绍"></a>工具介绍</h3><p>LFTP 是一款非常著名的字符界面的文件传输工具。支持 FTP、HTTP、FISH、SFTP、HTTPS 和 FTPS 协议。</p><h3 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h3><pre class="language-shell" data-language="shell"><code class="language-shell">apt-cache search lftpapt-get install lftp -y</code></pre><h3 id="lftp-的使用"><a href="#lftp-的使用" class="headerlink" title="lftp 的使用"></a>lftp 的使用</h3><h4 id="使用语法"><a href="#使用语法" class="headerlink" title="使用语法"></a>使用语法</h4><ul><li><code>lftp -[fceup] user:passwd@host</code>：passwd 可选，此方式密码明文保存，history 可查看 </li><li><code>-f &lt;file&gt;</code>：执行文件中的命令后退出</li><li><code>-c &lt;cmd&gt;</code>：执行命令后退出 </li><li><code>-e &lt;cmd&gt;</code>：登录后后执行命令 </li><li><code>-u &lt;user&gt;[,&lt;pass&gt;]</code>：使用指定的用户名 / 口令进行验证 </li><li><code>-p &lt;port&gt;</code>：连接指定的端口，默认 21</li></ul><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><ul><li><code>cd</code>：切换 FTP 目录 </li><li><code>lcd</code>：切换本地目录</li><li><code>ls</code>：列出 FTP 目录文件</li><li><code>!ls</code>：列出本地目录文件 </li><li><code>find ./-name file</code>：查找文件</li><li><code>mv</code>：移动</li><li><code>rm</code>：删除</li><li><code>mkdir</code>：新建目录</li><li><code>rmdir</code>：删除目录</li></ul><h4 id="上传下载文件"><a href="#上传下载文件" class="headerlink" title="上传下载文件"></a>上传下载文件</h4><ul><li><p><code>get [cEaO] file -o newfilename</code>：下载文件</p></li><li><p><code>put [cEaO] file -o newfilename</code>：上传文件</p></li><li><p><code>pget -n</code>：多线程下载</p><p>可选参数：</p><ul><li><code>-c</code>：支持断点续传 </li><li><code>-E</code>：下载后删除远端文件</li><li><code>-a</code>：指定传输为 ascii 模式，默认为二进制模式 </li><li><code>-O</code>：指定存放目录</li></ul></li></ul><h4 id="上传下载目录"><a href="#上传下载目录" class="headerlink" title="上传下载目录"></a>上传下载目录</h4><ul><li><p><code>mirror [cRnr] remote [local]</code> </p><p>可选参数： </p><ul><li><code>-c</code>：支持断点续传 </li><li><code>-R</code>：上传整个目录 </li><li><code>-n</code>：只下载较新的档案，可用于增量备份 </li><li><code>-r</code>：只下载当前目录，不递归目录</li></ul></li></ul><h4 id="书签管理"><a href="#书签管理" class="headerlink" title="书签管理"></a>书签管理</h4><ul><li><code>bookmark add name</code>：保存当前连接为书签名字 name，下次打开可直接使用 lftp name</li><li><code>bookmark del name</code>：删除书签</li><li><code>bookmark list</code>：显示书签列表</li><li><code>bookmark edit</code>：编辑书签</li></ul><h4 id="编码设置"><a href="#编码设置" class="headerlink" title="编码设置"></a>编码设置</h4><ul><li><code>set ftp:charset&quot;gbk&quot;</code> </li><li><code>set file:charset&quot;UTF-8&quot;</code> </li><li>或加入配置文件 <code>.lftp/rc</code></li></ul><h4 id="主动-被动模式"><a href="#主动-被动模式" class="headerlink" title="主动 / 被动模式"></a>主动 / 被动模式</h4><p>默认为被动模式 。</p><p><code>set ftp:passive-mode no</code>：关闭被动模式转为主动模式</p><p>主动客户端开启数据传输端口，被动服务端开启数据传输端口。</p><h3 id="Shell-脚本"><a href="#Shell-脚本" class="headerlink" title="Shell 脚本"></a>Shell 脚本</h3><h4 id="批量上传"><a href="#批量上传" class="headerlink" title="批量上传"></a>批量上传</h4><pre class="language-shell" data-language="shell"><code class="language-shell">#!&#x2F;bin&#x2F;bash#SFTP 配置信息# 用户名USER&#x3D;root# 密码PASSWORD&#x3D;5EYS40T04BMF# 待上传文件根目录SRCDIR&#x3D;&#x2F;u02&#x2F;dab&#x2F;sftpFiles#FTP 目录DESDIR&#x3D;&#x2F;u01&#x2F;sftpFiles#IPIP&#x3D;192.168.10.11# 端口PORT&#x3D;22022# 获取文件cd $&#123;SRCDIR&#125; ;# 目录下的所有文件#FILES&#x3D;&#96;ls&#96; # 修改时间在执行时间五分钟之前的 xml 文件FILES&#x3D;&#96;find $&#123;SRCDIR&#125; -mmin -50 -name &#39;*.xml&#39;&#96;for FILE in $&#123;FILES&#125;do    echo $&#123;FILE&#125;# 发送文件 (关键部分）  复制出来，如有结尾有空格，请自行去掉lftp -u $&#123;USER&#125;,$&#123;PASSWORD&#125; sftp:&#x2F;&#x2F;$&#123;IP&#125;:$&#123;PORT&#125; &lt;&lt;EOFcd $&#123;DESDIR&#125;&#x2F;lcd $&#123;SRCDIR&#125;put $&#123;FILE&#125;byEOFdone</code></pre><h4 id="单文件下载"><a href="#单文件下载" class="headerlink" title="单文件下载"></a>单文件下载</h4><pre class="language-shell" data-language="shell"><code class="language-shell">#!&#x2F;bin&#x2F;bashUSER&#x3D;root# 密码PASSWORD&#x3D;5EYS40T04BMF# 下载文件目录SRCDIR&#x3D;&#x2F;u02&#x2F;dab#FTP 目录 (待下载文件目录)DESDIR&#x3D;&#x2F;u01&#x2F;sftpFiles# 银联 IPIP&#x3D;192.168.1.10# 端口PORT&#x3D;22022lftp -u $&#123;USER&#125;,$&#123;PASSWORD&#125; sftp:&#x2F;&#x2F;$&#123;IP&#125;:$&#123;PORT&#125;&lt;&lt;EOFcd $&#123;DESDIR&#125;lcd $&#123;SRCDIR&#125;# 需要下载的文件为 text.xmlget text.xmlbyEOF</code></pre>]]></content>
    
    <summary type="html">
    
      LFTP 是一款非常著名的字符界面的文件传输工具。支持FTP、HTTP、FISH、SFTP、HTTPS和FTPS协议。
    
    </summary>
    
    
      <category term="Linux" scheme="https://jueee.github.io/categories/Linux/"/>
    
      <category term="Shell" scheme="https://jueee.github.io/categories/Linux/Shell/"/>
    
    
      <category term="Linux" scheme="https://jueee.github.io/tags/Linux/"/>
    
      <category term="工具" scheme="https://jueee.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>使用不蒜子增加 Jekyll 博客访问量统计</title>
    <link href="https://jueee.github.io/2020/07/2020-07-09-%E4%BD%BF%E7%94%A8%E4%B8%8D%E8%92%9C%E5%AD%90%E5%A2%9E%E5%8A%A0Jekyll%E5%8D%9A%E5%AE%A2%E8%AE%BF%E9%97%AE%E9%87%8F%E7%BB%9F%E8%AE%A1/"/>
    <id>https://jueee.github.io/2020/07/2020-07-09-%E4%BD%BF%E7%94%A8%E4%B8%8D%E8%92%9C%E5%AD%90%E5%A2%9E%E5%8A%A0Jekyll%E5%8D%9A%E5%AE%A2%E8%AE%BF%E9%97%AE%E9%87%8F%E7%BB%9F%E8%AE%A1/</id>
    <published>2020-07-09T00:00:00.000Z</published>
    <updated>2020-08-07T02:01:19.226Z</updated>
    
    <content type="html"><![CDATA[<p>“不蒜子” 是一款极简的网页计数器，可以很方便的统计博客的总访问量和访问次数。</p><p>“不蒜子” 与百度统计谷歌分析等有区别：“不蒜子” 可直接将访问次数显示在您在网页上（也可不显示）；对于已经上线一段时间的网站，“不蒜子” 允许您初始化首次数据。</p><h3 id="不蒜子"><a href="#不蒜子" class="headerlink" title="不蒜子"></a>不蒜子</h3><p>官网介绍</p><blockquote><p><span class="exturl" data-url="aHR0cDovL2J1c3VhbnppLmlicnVjZS5pbmZvLw==">http://busuanzi.ibruce.info/<i class="fa fa-external-link-alt"></i></span></p></blockquote><p>两行代码 搞定计数</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">async</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>busuanzi_container_site_pv<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    本站总访问量 < span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>busuanzi_value_site_pv<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span > 次<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></code></pre><h3 id="安装标签"><a href="#安装标签" class="headerlink" title="安装标签"></a>安装标签</h3><p>只需要复制相应的 html 标签到你的网站要显示访问量的位置即可。</p><p>您可以随意更改不蒜子标签为自己喜欢的显示效果，内容参考第三部分 ** 扩展开发 **。</p><p>根据你要显示内容的不同，这分几种情况。</p><h4 id="显示站点总访问量"><a href="#显示站点总访问量" class="headerlink" title="显示站点总访问量"></a>显示站点总访问量</h4><p>要显示站点总访问量，复制以下代码添加到你需要显示的位置。</p><p>有两种算法可选：</p><p>算法 a：pv 的方式，单个用户连续点击 n 篇文章，记录 n 次访问量。</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>busuanzi_container_site_pv<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        本站总访问量 < span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>busuanzi_value_site_pv<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span > 次<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></code></pre><p>算法 b：uv 的方式，单个用户连续点击 n 篇文章，只记录 1 次访客数。</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>busuanzi_container_site_uv<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      本站访客数 < span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>busuanzi_value_site_uv<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span > 人次<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></code></pre><h4 id="显示单页面访问量"><a href="#显示单页面访问量" class="headerlink" title="显示单页面访问量"></a>显示单页面访问量</h4><p>要显示每篇文章的访问量，复制以下代码添加到你需要显示的位置。</p><p>算法：pv 的方式，单个用户点击 1 篇文章，本篇文章记录 1 次阅读量。</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>busuanzi_container_page_pv<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      本文总阅读量 < span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>busuanzi_value_page_pv<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span > 次<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></code></pre><h3 id="扩展开发"><a href="#扩展开发" class="headerlink" title="扩展开发"></a>扩展开发</h3><p>不蒜子之所以称为极客的算子，正是因为不蒜子自身只提供标签 + 数字，至于显示的 style 和 css 动画效果，任你发挥。</p><p><code>busuanzi_value_site_pv</code> 的作用是异步回填访问数，这个 id 一定要正确。</p><p><code>busuanzi_container_site_pv</code> 的作用是为防止计数服务访问出错或超时（3 秒）的情况下，使整个标签自动隐藏显示，带来更好的体验。这个 id 可以省略。</p><p>因此，你也可以使用极简模式：</p><pre class="language-html" data-language="html"><code class="language-html"> 本站总访问量 < span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>busuanzi_value_site_pv<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span > 次本站访客数 < span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>busuanzi_value_site_uv<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span > 人次本文总阅读量 < span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>busuanzi_value_page_pv<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span > 次 </code></pre><p>或者个性化一下：</p><pre class="language-html" data-language="html"><code class="language-html">Total <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>busuanzi_value_site_pv<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span> views.您是 xxx 的第 < span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>busuanzi_value_site_uv<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span > 个小伙伴<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>busuanzi_value_page_pv<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span> Hits</code></pre><h3 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h3><ol><li><p>我只要统计不显示？</p><p>只引入 busuanzi.js，不引入显示标签即可。</p></li><li><p>你的标签太丑了，我想美化一下可以么？</p><p>可以的，您可以用自己站点的 css 进行控制，只要内层 span 的 id 正确以便回填访问次数即可，甚至标签都可以不是 span。</p></li><li><p>中文字体太丑了，我的主题不适合？</p><p>您可以将本站总访问量 xxx 次改成 view xxx times 等英文以获得更和谐的显示效果。</p></li><li><p>在访问量数据未取回来之前，我不想让页面显示为诸如 “本站总访问量 次”，显得太 low，怎么办？</p><p>只需要如下 css，不蒜子执行完毕会自动将标签显示出来，其他以此类推：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>busuanzi_container_site_pv<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">='</span><span class="token attr-value"><span class="token property">display</span><span class="token punctuation">:</span>none</span><span class="token punctuation">'</span></span><span class="token punctuation">></span></span> 本站总访问量 < span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>busuanzi_value_site_pv<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span > 次<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></code></pre></li></ol><p>   上面的做法还是很 low？！可以在没加载出来前就显示个菊花转转转:<br>   首先，你要引入 font-awesome 字体：</p>   <pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>//maxcdn.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.min.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>或<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>//cdn.bootcss.com/font-awesome/4.3.0/css/font-awesome.min.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><p>   其次，修改不蒜子标签：</p>   <pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>busuanzi_value_page_pv<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fa fa-spinner<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span> Hits或（旋转效果）<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>busuanzi_value_page_pv<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fa fa-spinner fa-spin<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span> Hits</code></pre><p>   和谐多了！</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><span class="exturl" data-url="aHR0cDovL2licnVjZS5pbmZvLzIwMTUvMDQvMDQvYnVzdWFuemkv">http://ibruce.info/2015/04/04/busuanzi/<i class="fa fa-external-link-alt"></i></span></li></ul>]]></content>
    
    <summary type="html">
    
      “不蒜子”是一款极简的网页计数器，可以很方便的统计博客的总访问量和访问次数。
    
    </summary>
    
    
      <category term="Blog" scheme="https://jueee.github.io/categories/Blog/"/>
    
    
      <category term="Blog" scheme="https://jueee.github.io/tags/Blog/"/>
    
  </entry>
  
</feed>
