<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小决的专栏</title>
  
  <subtitle>进一寸有一寸的欢喜</subtitle>
  <link href="https://jueee.github.io/atom.xml" rel="self"/>
  
  <link href="https://jueee.github.io/"/>
  <updated>2022-10-21T03:41:37.053Z</updated>
  <id>https://jueee.github.io/</id>
  
  <author>
    <name>小决</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>力扣的 1024・马尔可夫链卡牌活动编程实现</title>
    <link href="https://jueee.github.io/2022/10/2022-10-24-%E5%8A%9B%E6%89%A3%E7%9A%841024%20%C2%B7%20%E9%A9%AC%E5%B0%94%E5%8F%AF%E5%A4%AB%E9%93%BE%E5%8D%A1%E7%89%8C%E6%B4%BB%E5%8A%A8%E7%BC%96%E7%A8%8B%E5%AE%9E%E7%8E%B0/"/>
    <id>https://jueee.github.io/2022/10/2022-10-24-%E5%8A%9B%E6%89%A3%E7%9A%841024%20%C2%B7%20%E9%A9%AC%E5%B0%94%E5%8F%AF%E5%A4%AB%E9%93%BE%E5%8D%A1%E7%89%8C%E6%B4%BB%E5%8A%A8%E7%BC%96%E7%A8%8B%E5%AE%9E%E7%8E%B0/</id>
    <published>2022-10-24T00:00:00.000Z</published>
    <updated>2022-10-21T03:41:37.053Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1024-·-马尔可夫链"><a href="#1024-·-马尔可夫链" class="headerlink" title="1024 · 马尔可夫链"></a>1024・马尔可夫链</h3><p>2022 年 10 月 17 日 18:00 - 2022 年 10 月 31 日 18:00，参与「1024・马尔可夫链」游戏，完成指定行为可以获得力扣 1024 活动奖励。</p><ul><li>活动介绍：<span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jbi9jaXJjbGUvZGlzY3Vzcy9KbVgzTTYv">https://leetcode.cn/circle/discuss/JmX3M6/<i class="fa fa-external-link-alt"></i></span></li></ul><a id="more"></a><h4 id="游戏规则"><a href="#游戏规则" class="headerlink" title="游戏规则"></a>游戏规则</h4><p>活动期间用户可以使用已经获得的 数字牌 和 运算符号牌 进行运算；<br>单次运算只能是 2 个数字之间的运算，且运算过程不可逆；<br>在 3 次运算后， 运算结果为 1024 时记为成功，否则记为失败。失败时，将返还全部用于计算的卡牌（包括 数字牌 及 运算符号牌）。<br>运算结果的取值范围为 32 位有符号整数，超过此范围将提示报错。</p><p>作者：力扣 (LeetCode)<br>链接：<span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jbi9jaXJjbGUvZGlzY3Vzcy9KbVgzTTYv">https://leetcode.cn/circle/discuss/JmX3M6/<i class="fa fa-external-link-alt"></i></span><br>来源：力扣（LeetCode）<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p><h3 id="运算符号"><a href="#运算符号" class="headerlink" title="运算符号"></a>运算符号</h3><table><thead><tr><th>运算操作</th><th>符号</th></tr></thead><tbody><tr><td>加法</td><td> +</td></tr><tr><td> 减法</td><td> -</td></tr><tr><td> 乘法</td><td> *</td></tr><tr><td> 幂运算</td><td> **</td></tr><tr><td> 取余</td><td> %</td></tr><tr><td> 整除</td><td> //</td></tr><tr><td> 或</td><td>｜</td></tr><tr><td>与</td><td> &amp;</td></tr><tr><td> 异或</td><td> ^</td></tr><tr><td> 左移</td><td> &lt;&lt;</td></tr><tr><td> 右移</td><td> &gt;&gt;</td></tr></tbody></table><h3 id="编程Python实现"><a href="#编程Python实现" class="headerlink" title="编程Python实现"></a>编程 Python 实现</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">calculate_res</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> ops<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        r1 <span class="token operator">=</span> my_op<span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ops<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        r2 <span class="token operator">=</span> my_op<span class="token punctuation">(</span>r1<span class="token punctuation">,</span> nums<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ops<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        r3 <span class="token operator">=</span> my_op<span class="token punctuation">(</span>r2<span class="token punctuation">,</span> nums<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ops<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> r3<span class="token operator">==</span><span class="token number">1024</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ops<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'='</span><span class="token punctuation">,</span>r1<span class="token punctuation">,</span><span class="token string">'\t'</span><span class="token punctuation">,</span>r1<span class="token punctuation">,</span> ops<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'='</span><span class="token punctuation">,</span>r2<span class="token punctuation">,</span><span class="token string">'\t'</span><span class="token punctuation">,</span>r2<span class="token punctuation">,</span> ops<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'='</span><span class="token punctuation">,</span>r3<span class="token punctuation">)</span>    <span class="token keyword">except</span> ZeroDivisionError<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token keyword">return</span> r3<span class="token keyword">def</span> <span class="token function">my_op</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> op<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> op <span class="token operator">==</span> <span class="token string">'+'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> x <span class="token operator">+</span> y    <span class="token keyword">elif</span> op <span class="token operator">==</span> <span class="token string">'-'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> x <span class="token operator">-</span> y    <span class="token keyword">elif</span> op <span class="token operator">==</span> <span class="token string">'*'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> x <span class="token operator">*</span> y    <span class="token keyword">elif</span> op <span class="token operator">==</span> <span class="token string">'//'</span><span class="token punctuation">:</span>    <span class="token comment"># 整除</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> x <span class="token operator">//</span> y        <span class="token keyword">except</span> ZeroDivisionError<span class="token punctuation">:</span>            <span class="token keyword">raise</span> ZeroDivisionError    <span class="token keyword">elif</span> op <span class="token operator">==</span> <span class="token string">'**'</span><span class="token punctuation">:</span>    <span class="token comment"># 幂运算</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token builtin">int</span><span class="token punctuation">(</span>x <span class="token operator">**</span> y<span class="token punctuation">)</span>        <span class="token keyword">except</span> ZeroDivisionError<span class="token punctuation">:</span>            <span class="token keyword">raise</span> ZeroDivisionError    <span class="token keyword">elif</span> op <span class="token operator">==</span> <span class="token string">'&amp;'</span><span class="token punctuation">:</span>     <span class="token comment"># 与</span>        <span class="token keyword">return</span> x <span class="token operator">&amp;</span> y    <span class="token keyword">elif</span> op <span class="token operator">==</span> <span class="token string">'|'</span><span class="token punctuation">:</span>     <span class="token comment"># 或</span>        <span class="token keyword">return</span> x <span class="token operator">|</span> y    <span class="token keyword">elif</span> op <span class="token operator">==</span> <span class="token string">'^'</span><span class="token punctuation">:</span>     <span class="token comment"># 异或</span>        <span class="token keyword">return</span> x <span class="token operator">^</span> y    <span class="token keyword">elif</span> op <span class="token operator">==</span> <span class="token string">'&gt;&gt;'</span><span class="token punctuation">:</span>    <span class="token comment"># 右移</span>        <span class="token keyword">return</span> x <span class="token operator">&gt;&gt;</span> y    <span class="token keyword">elif</span> op <span class="token operator">==</span> <span class="token string">'&lt;&lt;'</span><span class="token punctuation">:</span>    <span class="token comment"># 左移</span>        <span class="token keyword">return</span> x <span class="token operator">&lt;&lt;</span> y    <span class="token keyword">elif</span> op <span class="token operator">==</span> <span class="token string">'%'</span><span class="token punctuation">:</span>     <span class="token comment"># 取余</span>        <span class="token keyword">return</span> x <span class="token operator">%</span> y<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>  <span class="token comment"># 填拥有的数字卡</span>    ops <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"&gt;&gt;"</span><span class="token punctuation">,</span> <span class="token string">"**"</span><span class="token punctuation">,</span> <span class="token string">"//"</span><span class="token punctuation">]</span>  <span class="token comment"># 请填入拥有的符号卡</span>    <span class="token keyword">from</span> itertools <span class="token keyword">import</span> permutations <span class="token comment"># 全排列</span>    <span class="token keyword">for</span> n_perm <span class="token keyword">in</span> permutations<span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> o_perm <span class="token keyword">in</span> permutations<span class="token punctuation">(</span>ops<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                res <span class="token operator">=</span> calculate_res<span class="token punctuation">(</span>n_perm<span class="token punctuation">,</span> o_perm<span class="token punctuation">)</span>                <span class="token keyword">if</span> res <span class="token operator">==</span> <span class="token number">1024</span><span class="token punctuation">:</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span>n_perm<span class="token punctuation">,</span> o_perm<span class="token punctuation">,</span> n_perm<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>o_perm<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>n_perm<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">except</span> TypeError<span class="token punctuation">:</span>                <span class="token keyword">pass</span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;1024-·-马尔可夫链&quot;&gt;&lt;a href=&quot;#1024-·-马尔可夫链&quot; class=&quot;headerlink&quot; title=&quot;1024 · 马尔可夫链&quot;&gt;&lt;/a&gt;1024・马尔可夫链&lt;/h3&gt;&lt;p&gt;2022 年 10 月 17 日 18:00 - 2022 年 10 月 31 日 18:00，参与「1024・马尔可夫链」游戏，完成指定行为可以获得力扣 1024 活动奖励。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;活动介绍：&lt;a href=&quot;https://leetcode.cn/circle/discuss/JmX3M6/&quot;&gt;https://leetcode.cn/circle/discuss/JmX3M6/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Blog" scheme="https://jueee.github.io/categories/Blog/"/>
    
    
    <category term="Blog" scheme="https://jueee.github.io/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 设置时区 serverTimezone</title>
    <link href="https://jueee.github.io/2022/09/2022-09-26-MySQL%E8%AE%BE%E7%BD%AE%E6%97%B6%E5%8C%BAserverTimezone/"/>
    <id>https://jueee.github.io/2022/09/2022-09-26-MySQL%E8%AE%BE%E7%BD%AE%E6%97%B6%E5%8C%BAserverTimezone/</id>
    <published>2022-09-26T00:00:00.000Z</published>
    <updated>2022-09-26T02:07:44.337Z</updated>
    
    <content type="html"><![CDATA[<h3 id="UTC"><a href="#UTC" class="headerlink" title="UTC"></a>UTC</h3><p>UTC，简称世界统一时间，跟北京时间相比，比北京早 8 个小时。</p><p>如果你设置 serverTimezone=UTC，连接不报错，但是我们在用 java 代码插入到数据库时间的时候却出现了问题。</p><p>比如在 java 代码里面插入的时间为：2022-09-26 09:44:12</p><p>但是在数据库里面显示的时间却为：2022-09-26 01:44:12</p><p>有了 8 个小时的时差。</p><h3 id="设置国内时间"><a href="#设置国内时间" class="headerlink" title="设置国内时间"></a>设置国内时间</h3><p>东八区时间：</p><pre class="language-none"><code class="language-none">serverTimezone=GMT%2B8</code></pre><p>上海时间：</p><pre class="language-none"><code class="language-none">serverTimezone=Asia/Shanghai</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;UTC&quot;&gt;&lt;a href=&quot;#UTC&quot; class=&quot;headerlink&quot; title=&quot;UTC&quot;&gt;&lt;/a&gt;UTC&lt;/h3&gt;&lt;p&gt;UTC，简称世界统一时间，跟北京时间相比，比北京早 8 个小时。&lt;/p&gt;
&lt;p&gt;如果你设置 serverTimezone=UTC，连</summary>
      
    
    
    
    <category term="Database" scheme="https://jueee.github.io/categories/Database/"/>
    
    <category term="MySQL" scheme="https://jueee.github.io/categories/Database/MySQL/"/>
    
    
    <category term="MySQL" scheme="https://jueee.github.io/tags/MySQL/"/>
    
    <category term="Database" scheme="https://jueee.github.io/tags/Database/"/>
    
  </entry>
  
  <entry>
    <title>Bootstrap Multiselect 动态赋值</title>
    <link href="https://jueee.github.io/2022/09/2022-09-02-Bootstrap%20Multiselect%20%E5%8A%A8%E6%80%81%E8%B5%8B%E5%80%BC/"/>
    <id>https://jueee.github.io/2022/09/2022-09-02-Bootstrap%20Multiselect%20%E5%8A%A8%E6%80%81%E8%B5%8B%E5%80%BC/</id>
    <published>2022-09-02T00:00:00.000Z</published>
    <updated>2022-09-02T06:56:41.847Z</updated>
    
    <content type="html"><![CDATA[<p>记录在用 Bootstrap Multiselect 的时候，从后台传来的值，动态赋值的解决方法。</p><a id="more"></a><h3 id="动态赋值"><a href="#动态赋值" class="headerlink" title="动态赋值"></a>动态赋值</h3><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> newDatas <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>$<span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span>datas<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">index<span class="token punctuation">,</span> temp</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    obj <span class="token operator">=</span> <span class="token punctuation">{</span>        label <span class="token operator">:</span> temp<span class="token punctuation">.</span>text<span class="token punctuation">,</span>        value <span class="token operator">:</span> temp<span class="token punctuation">.</span>id    <span class="token punctuation">}</span><span class="token punctuation">;</span>    newDatas<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#dataId"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">multiselect</span><span class="token punctuation">(</span><span class="token string">'dataprovider'</span><span class="token punctuation">,</span> newDatas<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#dataId'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">multiselect</span><span class="token punctuation">(</span><span class="token string">'refresh'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>其中，<code>datas</code> 为动态赋值的键值对数组。</p><h3 id="FreeMarker"><a href="#FreeMarker" class="headerlink" title="FreeMarker"></a>FreeMarker</h3><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> newDatas <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>#list dataList <span class="token keyword">as</span> temp<span class="token operator">&gt;</span>    obj <span class="token operator">=</span> <span class="token punctuation">{</span>        label <span class="token operator">:</span> <span class="token string">'${temp.text}'</span><span class="token punctuation">,</span>        value <span class="token operator">:</span> <span class="token string">'${temp.id}'</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    newDatas<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span><span class="token operator">/</span>#list<span class="token operator">&gt;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#dataId"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">multiselect</span><span class="token punctuation">(</span><span class="token string">'dataprovider'</span><span class="token punctuation">,</span> newDatas<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#dataId'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">multiselect</span><span class="token punctuation">(</span><span class="token string">'refresh'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>其中，<code>dataList</code> 为后台返回的键值对数组。</p><h3 id="动态赋值后重新勾选"><a href="#动态赋值后重新勾选" class="headerlink" title="动态赋值后重新勾选"></a>动态赋值后重新勾选</h3><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> dataSearch <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#dataSearch"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>dataSearch<span class="token operator">!=</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#dataId'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">multiselect</span><span class="token punctuation">(</span><span class="token string">'select'</span><span class="token punctuation">,</span> dataSearch<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>其中，<code>dataSearch</code> 为动态赋值前的勾选值。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;记录在用 Bootstrap Multiselect 的时候，从后台传来的值，动态赋值的解决方法。&lt;/p&gt;</summary>
    
    
    
    <category term="JavaScript" scheme="https://jueee.github.io/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://jueee.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Debian 服务器安装初始化操作汇总</title>
    <link href="https://jueee.github.io/2022/08/2022-08-28-Debian%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85%E5%88%9D%E5%A7%8B%E5%8C%96%E6%93%8D%E4%BD%9C%E6%B1%87%E6%80%BB/"/>
    <id>https://jueee.github.io/2022/08/2022-08-28-Debian%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85%E5%88%9D%E5%A7%8B%E5%8C%96%E6%93%8D%E4%BD%9C%E6%B1%87%E6%80%BB/</id>
    <published>2022-08-28T00:00:00.000Z</published>
    <updated>2022-08-29T08:43:23.680Z</updated>
    
    <content type="html"><![CDATA[<p>整理一下 Debian 服务器安装初始化操作汇总。</p><a id="more"></a><h3 id="查看Debian版本"><a href="#查看Debian版本" class="headerlink" title="查看Debian版本"></a>查看 Debian 版本</h3><pre class="language-none"><code class="language-none">jue@debian:~$ uname -r4.9.0-12-amd64jue@debian:~$ lsb_release -crRelease:        9.12Codename:       stretch</code></pre><h3 id="初始化-vi-编辑器"><a href="#初始化-vi-编辑器" class="headerlink" title="初始化 vi 编辑器"></a>初始化 vi 编辑器</h3><p>执行以下命令再使用 vi 编辑器：</p><pre class="language-none"><code class="language-none">cp /etc/vim/vimrc ~/.vimrc</code></pre><h3 id="运行-dpkg-命令设置"><a href="#运行-dpkg-命令设置" class="headerlink" title="运行 dpkg 命令设置"></a>运行 dpkg 命令设置</h3><p>如果无法运行 dpkg 命令，提示：</p><blockquote><p>dpkg: warningL 'ldconfig' not found in PATH or not executable</p></blockquote><p>解决方案是添加环境变量，修改配置文件 <code>~/.bashrc</code>：</p><p>添加如下环境变量配置：</p><pre class="language-none"><code class="language-none">export PATH=PATH:/sbin:/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin</code></pre><p>保存退出编辑，然后执行 <code>source ~/.bashrc</code> 使配置生效。</p><h3 id="设置-IP-地址"><a href="#设置-IP-地址" class="headerlink" title="设置 IP 地址"></a>设置 IP 地址</h3><p>通过 <code>ifconfig</code> 或者 <code>ip addr</code> 查看网卡信息。</p><p>以下以网卡名称 eth0 为例进行说明。</p><h4 id="设置静态-IP"><a href="#设置静态-IP" class="headerlink" title="设置静态 IP"></a>设置静态 IP</h4><p>配置网卡文件 <code>/etc/network/inferfaces</code>：</p><pre class="language-none"><code class="language-none">auto eth0allow-hotplug eth0iface eth0 inet staticaddress 192.168.0.11netmask 255.255.255.0gateway 192.168.0.1</code></pre><h4 id="设置动态-IP"><a href="#设置动态-IP" class="headerlink" title="设置动态 IP"></a>设置动态 IP</h4><p>配置网卡文件 <code>/etc/network/inferfaces</code>：</p><pre class="language-none"><code class="language-none">auto eth0iface eth0 inet dhcp</code></pre><h4 id="重启网络配置"><a href="#重启网络配置" class="headerlink" title="重启网络配置"></a>重启网络配置</h4><pre class="language-none"><code class="language-none">/etc/init.d/networking restart</code></pre><h3 id="ssh-服务开机自启动"><a href="#ssh-服务开机自启动" class="headerlink" title="ssh 服务开机自启动"></a>ssh 服务开机自启动</h3><p>设置 ssh 服务开机自启动：</p><pre class="language-none"><code class="language-none">sudo systemctl enable ssh</code></pre><p>设置成功后，可以用 chkconfig 查看一下 ssh 的开机启动状态，on 表示已设置开机自启动。</p><p>设置 ssh 服务禁用开启自启动：</p><pre class="language-none"><code class="language-none">sudo systemctl disable ssh</code></pre><h3 id="允许root远程登陆"><a href="#允许root远程登陆" class="headerlink" title="允许root远程登陆"></a>允许 root 远程登陆</h3><p>编辑配置文件 <code>sudo vim /etc/ssh/sshd_config</code>。</p><p>将 <code>PermitRootLogin prohibit-password</code> 更改为：<code>PermitRootLogin yes</code></p><p>如果 <code>PermitRootLogin prohibit-password</code> 被注释，则取消注释并更改为 <code>PermitRootLogin yes</code></p><p>重启 ssh 服务：</p><pre class="language-none"><code class="language-none">sudo systemctl restart sshdsudo service sshd restart</code></pre><p>再次进行远程登录，即可成功。</p><h3 id="挂载硬盘"><a href="#挂载硬盘" class="headerlink" title="挂载硬盘"></a>挂载硬盘</h3><p>查看磁盘使用情况，获取磁盘名称和是否已经挂载的信息：</p><pre class="language-none"><code class="language-none">fdisk -l</code></pre><p>格式化磁盘：</p><pre class="language-none"><code class="language-none">mkfs ext4 /dev/vdb</code></pre><p>创建目录并进行挂载：</p><pre class="language-none"><code class="language-none">mkdir /data1mount /dev/vdb /data1</code></pre><p>最后可以通过 <code>df -lh</code> 查看磁盘挂载的情况。</p><h3 id="卸载磁盘挂载"><a href="#卸载磁盘挂载" class="headerlink" title="卸载磁盘挂载"></a>卸载磁盘挂载</h3><pre class="language-none"><code class="language-none">umount /dev/vdb</code></pre><h3 id="开机自动挂载磁盘"><a href="#开机自动挂载磁盘" class="headerlink" title="开机自动挂载磁盘"></a>开机自动挂载磁盘</h3><p>先获取磁盘 UUID：</p><pre class="language-none"><code class="language-none">$ sudo blkid /dev/vdb/dev/vdb: LABEL="D" UUID="3AFE93C9FE937BB7" TYPE="ext4" </code></pre><p>配置自动挂载：</p><pre class="language-none"><code class="language-none">$ sudo vim /etc/fstab</code></pre><p>在文件末尾添加：</p><pre class="language-none"><code class="language-none">UUID=3AFE93C9FE937BB7/data1ext4defaults02</code></pre><p>注意：</p><ul><li>第一个：UUID 为上面<strong>通过 blkid 获取到的 UUID 内容</strong>，注意不要加双引号。</li><li>第二个：为磁盘挂载的位置。</li><li>第三个：为 ntfs 为上面<strong>通过 blkid 获取到的 TYPE 内容</strong>，注意不要加双引号。</li><li>第四个：<strong>0 -&gt; 开机不检查磁盘，1 -&gt; 开机检查磁盘</strong></li><li>第五个：<strong>0 -&gt; 交换分区，1 -&gt; 启动分区（Linux），2 -&gt; 普通分区</strong></li></ul><h3 id="Python-文件传输"><a href="#Python-文件传输" class="headerlink" title="Python 文件传输"></a>Python 文件传输</h3><p>如果 python 版本为 2.x ，输入命令：</p><pre class="language-none"><code class="language-none">python -m SimpleHTTPServer 8000</code></pre><p>如果 python 版本为 3.x ，输入命令：</p><pre class="language-none"><code class="language-none">python -m http.server 8000</code></pre><p>以上两个命令，端口不指定时，默认 8000 端口。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;整理一下 Debian 服务器安装初始化操作汇总。&lt;/p&gt;</summary>
    
    
    
    <category term="OS" scheme="https://jueee.github.io/categories/OS/"/>
    
    <category term="Debian" scheme="https://jueee.github.io/categories/OS/Debian/"/>
    
    
    <category term="OS" scheme="https://jueee.github.io/tags/OS/"/>
    
    <category term="Debian" scheme="https://jueee.github.io/tags/Debian/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu 下删除键失效的解决方案</title>
    <link href="https://jueee.github.io/2022/08/2022-08-24-Ubuntu%E4%B8%8B%E5%88%A0%E9%99%A4%E9%94%AE%E5%A4%B1%E6%95%88%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>https://jueee.github.io/2022/08/2022-08-24-Ubuntu%E4%B8%8B%E5%88%A0%E9%99%A4%E9%94%AE%E5%A4%B1%E6%95%88%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</id>
    <published>2022-08-24T00:00:00.000Z</published>
    <updated>2022-08-29T02:28:01.496Z</updated>
    
    <content type="html"><![CDATA[<p>在 Ubuntu 系统下，因为误操作，导致删除键（backspace）以及方向键失效，按下删除键反而会多出来一个空格。</p><h3 id="出现的问题"><a href="#出现的问题" class="headerlink" title="出现的问题"></a>出现的问题</h3><p>误删 ncurses-base 后导致终端输入窗口出现了一系列的问题：</p><p>Ubuntu 终端输入无法退格（删除文本）、使用↑↓方向键无法切换最近的命令，而是复制上次的命令、换行显示异常等。</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>重装 ncurses-base 库，并重启 Ubuntu（或者重启终端）。</p><p>重装方法：</p><pre class="language-csharp" data-language="csharp"><code class="language-csharp">sudo apt<span class="token operator">-</span><span class="token keyword">get</span> install ncurses<span class="token operator">-</span><span class="token keyword">base</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在 Ubuntu 系统下，因为误操作，导致删除键（backspace）以及方向键失效，按下删除键反而会多出来一个空格。&lt;/p&gt;
&lt;h3 id=&quot;出现的问题&quot;&gt;&lt;a href=&quot;#出现的问题&quot; class=&quot;headerlink&quot; title=&quot;出现的问题&quot;&gt;&lt;/a&gt;出现的问</summary>
      
    
    
    
    <category term="OS" scheme="https://jueee.github.io/categories/OS/"/>
    
    <category term="Ubuntu" scheme="https://jueee.github.io/categories/OS/Ubuntu/"/>
    
    
    <category term="OS" scheme="https://jueee.github.io/tags/OS/"/>
    
    <category term="Ubuntu" scheme="https://jueee.github.io/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu 看不到磁盘进行挂载</title>
    <link href="https://jueee.github.io/2022/08/2022-08-23-Ubuntu%E7%9C%8B%E4%B8%8D%E5%88%B0%E7%A3%81%E7%9B%98%E8%BF%9B%E8%A1%8C%E6%8C%82%E8%BD%BD/"/>
    <id>https://jueee.github.io/2022/08/2022-08-23-Ubuntu%E7%9C%8B%E4%B8%8D%E5%88%B0%E7%A3%81%E7%9B%98%E8%BF%9B%E8%A1%8C%E6%8C%82%E8%BD%BD/</id>
    <published>2022-08-23T00:00:00.000Z</published>
    <updated>2022-08-29T02:28:01.495Z</updated>
    
    <content type="html"><![CDATA[<p>Ubuntu 在重启后，看不到磁盘了，下面介绍如何进行重新挂载。</p><a id="more"></a><h3 id="查看所有磁盘"><a href="#查看所有磁盘" class="headerlink" title="查看所有磁盘"></a>查看所有磁盘</h3><p>安装 Ubuntu 20.04 进入系统后看不到之前分配的磁盘。</p><pre class="language-none"><code class="language-none">$ df -lh文件系统        容量  已用  可用 已用% 挂载点udev            7.7G     0  7.7G    0% /devtmpfs           1.6G  3.2M  1.6G    1% /run/dev/nvme0n1p2  234G   31G  191G   14% /tmpfs           7.7G   73M  7.6G    1% /dev/shmtmpfs           5.0M  4.0K  5.0M    1% /run/locktmpfs           7.7G     0  7.7G    0% /sys/fs/cgroup/dev/nvme0n1p1  511M  5.3M  506M    2% /boot/efitmpfs           1.6G   40K  1.6G    1% /run/user/1000</code></pre><h3 id="查看所有分区"><a href="#查看所有分区" class="headerlink" title="查看所有分区"></a>查看所有分区</h3><pre class="language-none"><code class="language-none">$ sudo fdisk -l Disk /dev/nvme0n1：476.96 GiB，512110190592 字节，1000215216 个扇区Disk model: WDC PC SN730 SDBQNTY-512G-1001          单元：扇区 / 1 * 512 = 512 字节扇区大小(逻辑/物理)：512 字节 / 512 字节I/O 大小(最小/最佳)：512 字节 / 512 字节磁盘标签类型：gpt磁盘标识符：35631C71-83E4-4618-8493-BB887A5C5062设备                起点       末尾      扇区   大小 类型/dev/nvme0n1p1      4096    2101247   2097152     1G Linux 文件系统/dev/nvme0n1p2   2101248  500744191 498642944 237.8G Linux 文件系统/dev/nvme0n1p3 500746240 1000214527 499468288 238.2G Microsoft 基本数据</code></pre><h3 id="挂载分区"><a href="#挂载分区" class="headerlink" title="挂载分区"></a>挂载分区</h3><p>发现 <code>/dev/nvme0n1p3</code> 未显示<br>于是把他挂载到 <code>/mnt/data</code> 下：</p><pre class="language-none"><code class="language-none">~$ sudo mkdir /mnt/data~$ sudo mount /dev/nvme0n1p3 /mnt/data</code></pre><p>查看磁盘：</p><pre class="language-none"><code class="language-none">$ df -lh文件系统        容量  已用  可用 已用% 挂载点udev            7.7G     0  7.7G    0% /devtmpfs           1.6G  3.2M  1.6G    1% /run/dev/nvme0n1p2  234G   31G  191G   14% /tmpfs           7.7G   73M  7.6G    1% /dev/shmtmpfs           5.0M  4.0K  5.0M    1% /run/locktmpfs           7.7G     0  7.7G    0% /sys/fs/cgroup/dev/nvme0n1p3  239G   32G  207G   14% /mnt/data/dev/nvme0n1p1  511M  5.3M  506M    2% /boot/efitmpfs           1.6G   40K  1.6G    1% /run/user/1000</code></pre><h3 id="问题处理"><a href="#问题处理" class="headerlink" title="问题处理"></a>问题处理</h3><p>如果挂载的时候提示：</p><pre class="language-none"><code class="language-none">mount: /data1: wrong fs type, bad option, bad superblock on /dev/sdb, missing codepage or helper program, or other erro</code></pre><p>那么需要：</p><pre class="language-none"><code class="language-none">$ mkfs -t ext4 /dev/sdb</code></pre><h3 id="开机自动挂载"><a href="#开机自动挂载" class="headerlink" title="开机自动挂载"></a>开机自动挂载</h3><p>先获取磁盘 UUID：</p><pre class="language-none"><code class="language-none">$ sudo blkid /dev/nvme0n1p3/dev/nvme0n1p3: LABEL="D" UUID="3AFE93C9FE937BB7" TYPE="ntfs" PARTLABEL="Basic data partition" PARTUUID="1fe88d4a-788f-4f2d-946f-38c85cdc22e0"</code></pre><p>配置自动挂载：</p><pre class="language-none"><code class="language-none">$ sudo vim /etc/fstab</code></pre><p>在文件末尾添加：</p><pre class="language-none"><code class="language-none">UUID=3AFE93C9FE937BB7/mnt/datantfs02</code></pre><p>注意：</p><ul><li>第一个：UUID 为上面<strong>通过 blkid 获取到的 UUID 内容</strong>，注意不要加双引号。</li><li>第二个：为磁盘挂载的位置。</li><li>第三个：为 ntfs 为上面<strong>通过 blkid 获取到的 TYPE 内容</strong>，注意不要加双引号。</li><li>第四个：<strong>0 -&gt; 开机不检查磁盘，1 -&gt; 开机检查磁盘</strong></li><li>第五个：<strong>0 -&gt; 交换分区，1 -&gt; 启动分区（Linux），2 -&gt; 普通分区</strong></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;Ubuntu 在重启后，看不到磁盘了，下面介绍如何进行重新挂载。&lt;/p&gt;</summary>
    
    
    
    <category term="OS" scheme="https://jueee.github.io/categories/OS/"/>
    
    <category term="Ubuntu" scheme="https://jueee.github.io/categories/OS/Ubuntu/"/>
    
    
    <category term="OS" scheme="https://jueee.github.io/tags/OS/"/>
    
    <category term="Ubuntu" scheme="https://jueee.github.io/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Java 获取对象实例的字节大小</title>
    <link href="https://jueee.github.io/2022/08/2022-08-22-Java%E8%8E%B7%E5%8F%96%E5%AF%B9%E8%B1%A1%E5%AE%9E%E4%BE%8B%E7%9A%84%E5%AD%97%E8%8A%82%E5%A4%A7%E5%B0%8F/"/>
    <id>https://jueee.github.io/2022/08/2022-08-22-Java%E8%8E%B7%E5%8F%96%E5%AF%B9%E8%B1%A1%E5%AE%9E%E4%BE%8B%E7%9A%84%E5%AD%97%E8%8A%82%E5%A4%A7%E5%B0%8F/</id>
    <published>2022-08-22T00:00:00.000Z</published>
    <updated>2022-08-29T02:28:01.495Z</updated>
    
    <content type="html"><![CDATA[<p>有些时候，我们需要获取 Java 对象的字节大小，来进行一些判断处理。</p><p>那么，应该如何获取 Java 对象的字节大小呢？</p><p>参考地址：<span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNTIzNTMvaW4tamF2YS13aGF0LWlzLXRoZS1iZXN0LXdheS10by1kZXRlcm1pbmUtdGhlLXNpemUtb2YtYW4tb2JqZWN0">in-java-what-is-the-best-way-to-determine-the-size-of-an-object<i class="fa fa-external-link-alt"></i></span></p><a id="more"></a><h3 id="ObjectSizeCalculator-类"><a href="#ObjectSizeCalculator-类" class="headerlink" title="ObjectSizeCalculator 类"></a>ObjectSizeCalculator 类</h3><p>对于 JDK8，<code>jdk.nashorn.internal.ir.debug.ObjectSizeCalculator</code>：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">ObjectSizeCalculator</span><span class="token punctuation">.</span><span class="token function">getObjectSize</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>如果 maven 打包时，提示没有 <code>ObjectSizeCalculator</code> 类，则需要引入 <code>nashorn.jar</code> 依赖：</p><pre class="language-none"><code class="language-none">&lt;dependency&gt;   &lt;groupId&gt;javafx&lt;/groupId&gt;   &lt;artifactId&gt;nashorn&lt;/artifactId&gt;   &lt;version&gt;${java.version}&lt;/version&gt;   &lt;scope&gt;system&lt;/scope&gt;   &lt;systemPath&gt;${java.home}/lib/ext/nashorn.jar&lt;/systemPath&gt;&lt;/dependency&gt;</code></pre><p>也可能出现：</p><pre class="language-none"><code class="language-none">Could not initialize class jdk.nashorn.internal.ir.debug.ObjectSizeCalculator$CurrentLayoutjava.lang.NoClassDefFoundError: Could not initialize class jdk.nashorn.internal.ir.debug.ObjectSizeCalculator$CurrentLayout        at jdk.nashorn.internal.ir.debug.ObjectSizeCalculator.getObjectSize(ObjectSizeCalculator.java:122)</code></pre><p>则需要添加 <code>-javaagent:/java-app-dir/approot/lib/nashorn-1.8.jar</code>。</p><h3 id="自行编写-ObjectSizeCalculator"><a href="#自行编写-ObjectSizeCalculator" class="headerlink" title="自行编写 ObjectSizeCalculator"></a>自行编写 ObjectSizeCalculator</h3><p>Twitter 用于计算深度对象大小的实用程序。 它考虑了不同的内存模型（32 位，压缩 oops，64 位），填充，子类填充，在圆形数据结构和数组上正常工作。 </p><p>可以编译 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3R3aXR0ZXIvY29tbW9ucy9ibG9iL21hc3Rlci9zcmMvamF2YS9jb20vdHdpdHRlci9jb21tb24vb2JqZWN0c2l6ZS9PYmplY3RTaXplQ2FsY3VsYXRvci5qYXZh">ObjectSizeCalculator.java<i class="fa fa-external-link-alt"></i></span> 这个.java 文件，它没有外部依赖。</p><h3 id="序列化后获取大小"><a href="#序列化后获取大小" class="headerlink" title="序列化后获取大小"></a>序列化后获取大小</h3><p>序列化方法可能是大多数 JVM 的良好近似。 最简单的方法如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getSize</span><span class="token punctuation">(</span><span class="token class-name">Serializable</span> ser<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>    <span class="token class-name">ByteArrayOutputStream</span> baos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>baos<span class="token punctuation">)</span><span class="token punctuation">;</span>    oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>ser<span class="token punctuation">)</span><span class="token punctuation">;</span>    oos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> baos<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>如果您有具有公共引用的对象，则不会给出正确的结果，并且序列化的大小将不总是与内存中的大小匹配，但它是一个很好的近似值。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;有些时候，我们需要获取 Java 对象的字节大小，来进行一些判断处理。&lt;/p&gt;
&lt;p&gt;那么，应该如何获取 Java 对象的字节大小呢？&lt;/p&gt;
&lt;p&gt;参考地址：&lt;a href=&quot;https://stackoverflow.com/questions/52353/in-java-what-is-the-best-way-to-determine-the-size-of-an-object&quot;&gt;in-java-what-is-the-best-way-to-determine-the-size-of-an-object&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://jueee.github.io/categories/Java/"/>
    
    <category term="JavaClass" scheme="https://jueee.github.io/categories/Java/JavaClass/"/>
    
    
    <category term="JavaClass" scheme="https://jueee.github.io/tags/JavaClass/"/>
    
    <category term="Java" scheme="https://jueee.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java 消费 Kafka 配置信息总结</title>
    <link href="https://jueee.github.io/2022/08/2022-08-21-Java%E6%B6%88%E8%B4%B9Kafka%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF%E6%80%BB%E7%BB%93/"/>
    <id>https://jueee.github.io/2022/08/2022-08-21-Java%E6%B6%88%E8%B4%B9Kafka%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF%E6%80%BB%E7%BB%93/</id>
    <published>2022-08-21T00:00:00.000Z</published>
    <updated>2022-08-29T02:28:01.473Z</updated>
    
    <content type="html"><![CDATA[<p>Java 消费 Kafka 配置信息总结。</p><p>配置文档：<span class="exturl" data-url="aHR0cHM6Ly9rYWZrYS5hcGFjaGUub3JnL2RvY3VtZW50YXRpb24vI25ld2NvbnN1bWVyY29uZmlncw==">https://kafka.apache.org/documentation/#newconsumerconfigs<i class="fa fa-external-link-alt"></i></span></p><a id="more"></a><h3 id="长轮询poll消息"><a href="#长轮询poll消息" class="headerlink" title="长轮询poll消息"></a>长轮询 poll 消息</h3><p>代码中设置了长轮询的时间是 1000 毫秒：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">ConsumerRecords</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> records <span class="token operator">=</span>  consumer<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofMillis</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>【注意】</p><ul><li>poll () 方法里传的参数是时间（ms）。</li><li>Kafka 轮询一次就相当于拉取（poll）一定时间段 broker 中可消费的数据，  在这个指定时间段里拉取，时间到了就立刻返回数据。 </li><li>poll（5000）：  即在 5s 中内拉去的数据返回到消费者端。</li></ul><h3 id="消费者拉取最大条数"><a href="#消费者拉取最大条数" class="headerlink" title="消费者拉取最大条数"></a>消费者拉取最大条数</h3><p>默认情况下，消费者一次最大会拉去的消息条数设置如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// max.poll.records</span>props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ConsumerConfig</span><span class="token punctuation">.</span>MAX_POLL_RECORDS_CONFIG<span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>【注意】必须为整型，不能为字符串。</p><p>对于如下消费循环：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">ConsumerRecords</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> records <span class="token operator">=</span>  consumer<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofMillis</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ConsumerRecord</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">record</span> <span class="token operator">:</span> records<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"收到消息：partition = %d,offset = %d,key = %s ,value = %s%n"</span><span class="token punctuation">,</span>                <span class="token keyword">record</span><span class="token punctuation">.</span><span class="token function">partition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">record</span><span class="token punctuation">.</span><span class="token function">offset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">record</span><span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">record</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>如果一次 poll 到 500 条消息，就直接执行 for 循环</li><li>如果一次没有 poll 到 500 条，且时间在 1 秒内，那么长轮询继续 poll，要么到 500 条，要么到 1s</li></ul><h3 id="消费者拉取最大字节"><a href="#消费者拉取最大字节" class="headerlink" title="消费者拉取最大字节"></a>消费者拉取最大字节</h3><p>服务器将返回的每个分区的最大数据量：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// max.partition.fetch.bytes</span>props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ConsumerConfig</span><span class="token punctuation">.</span>MAX_PARTITION_FETCH_BYTES_CONFIG<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>设置 max.partition.fetch.bytes 时的另一个重要考虑因素是消费者处理数据所花费的时间。</p><p>消费者必须足够频繁地调用 poll () 以避免会话超时和随后的重新平衡。</p><p>如果单次 poll () 返回的数据量很大，消费者处理的时间可能会更长，这意味着它不会及时到达轮询循环的下一次迭代，以避免会话超时。</p><h3 id="消费者心跳检查"><a href="#消费者心跳检查" class="headerlink" title="消费者心跳检查"></a>消费者心跳检查</h3><p>如果两次 poll 的时间超过了 30s 的时间间隔，kafka 会认为消费者消费能力过弱，将其踢出消费者组，将分区分配给其他消费者 rebalance</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// heartbeat.interval.ms</span><span class="token comment">// consumer给broker发送心跳的间隔时间</span>props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ConsumerConfig</span><span class="token punctuation">.</span>HEARTBEAT_INTERVAL_MS_CONFIG<span class="token punctuation">,</span> <span class="token number">30</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="消费者健康状态检查"><a href="#消费者健康状态检查" class="headerlink" title="消费者健康状态检查"></a>消费者健康状态检查</h3><p>消费者每隔 1s 向 kafka 集群发送心跳，集群发现如果有超过 10s 没有续约的消费者，将被踢出消费组，出发消费组的 rebalance 机制，将该分区交给消费组里其他消费者进行消费</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// heartbeat.interval.ms</span><span class="token comment">// consumer给broker发送心跳的间隔时间</span>props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ConsumerConfig</span><span class="token punctuation">.</span>HEARTBEAT_INTERVAL_MS_CONFIG<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// session.timeout.ms</span><span class="token comment">// kafka如果超过10秒没有收到消费这的心跳，会把消费者踢出消费者组，进行rebalance,把分区分配给其他消费者</span>props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ConsumerConfig</span><span class="token punctuation">.</span>SESSION_TIMEOUT_MS_CONFIG<span class="token punctuation">,</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>其中，<code>session.timeout.ms</code> 的设置必须介于 <code>group.min.session.timeout.ms</code> 和 <code>group.max.session.timeout.ms</code> 之间。</p><ul><li><p>group.min.session.timeout.ms：6000 (6 seconds)：消费者允许的最小会话超时。</p><p>更短的超时导致更快的故障检测，代价是更频繁的消费者心跳</p></li><li><p>group.max.session.timeout.ms：1800000 (30 minutes)：注册消费者允许的最大会话超时。</p><p>更长的超时时间让消费者有更多的时间来处理心跳之间的消息，但代价是检测故障的时间更长。</p></li></ul><h3 id="请求时间"><a href="#请求时间" class="headerlink" title="请求时间"></a>请求时间</h3><p>配置控制客户端等待请求响应的最长时间。</p><p>如果在超时之前没有收到响应，客户端将在必要时重新发送请求，或者如果重试次数用尽，则请求失败。</p><p>request.timeout.ms 应该大于 session.timeout.ms 和 fetch.max.wait.ms。</p><h3 id="指定条件消费"><a href="#指定条件消费" class="headerlink" title="指定条件消费"></a>指定条件消费</h3><h4 id="指定分区消费"><a href="#指定分区消费" class="headerlink" title="指定分区消费"></a>指定分区消费</h4><pre class="language-JAVA" data-language="JAVA"><code class="language-JAVA">consumer.assign(Arrays.asList(new TopicPartition(TOPIC_NAME,0)));</code></pre><h4 id="消息回溯消费"><a href="#消息回溯消费" class="headerlink" title="消息回溯消费"></a>消息回溯消费</h4><p>从 topic offset 的 0 号位置开始消费</p><pre class="language-JAVA" data-language="JAVA"><code class="language-JAVA">consumer.assign(Arrays.asList(new TopicPartition(TOPIC_NAME,0)));consumer.seekToBeginning(Arrays.asList(new TopicPartition(TOPIC_NAME,0)));</code></pre><h4 id="指定offset消费"><a href="#指定offset消费" class="headerlink" title="指定offset消费"></a>指定 offset 消费</h4><pre class="language-JAVA" data-language="JAVA"><code class="language-JAVA">consumer.assign(Arrays.asList(new TopicPartition(TOPIC_NAME,0)));consumer.seek(new TopicPartition(TOPIC_NAME,0),10);</code></pre><h4 id="从指定时间点开始消费"><a href="#从指定时间点开始消费" class="headerlink" title="从指定时间点开始消费"></a>从指定时间点开始消费</h4><pre class="language-JAVA" data-language="JAVA"><code class="language-JAVA">//从指定时间点开始消费//1. 拿到主题下所有的分区List&lt;PartitionInfo&gt; partitionInfos = consumer.partitionsFor(TOPIC_NAME);//2. 拿到1小时前的时间long fetchDateTime = new Date().getTime()- 1000 * 60 * 60;HashMap&lt;TopicPartition, Long&gt; map = new HashMap&lt;&gt;();for (PartitionInfo partitionInfo : partitionInfos) {    map.put(new TopicPartition(TOPIC_NAME, partitionInfo.partition()),fetchDateTime);}//3. consumer.offsetsForTimes 根据时间拿到偏移量Map&lt;TopicPartition, OffsetAndTimestamp&gt; parmap = consumer.offsetsForTimes(map);for (Map.Entry&lt;TopicPartition, OffsetAndTimestamp&gt; entry : parmap.entrySet()) {    //先拿到分区    TopicPartition key = entry.getKey();    OffsetAndTimestamp value = entry.getValue();    if(key ==null || value == null) continue;    long offset = value.offset();    System.out.println("partition-"+key.partition() + "|offset-"+offset);    //根据消费里的timestamp确定offset    if(value != null){        consumer.assign(Arrays.asList(key));        consumer.seek(key,offset);    }}</code></pre><h3 id="新消费组的消费偏移量"><a href="#新消费组的消费偏移量" class="headerlink" title="新消费组的消费偏移量"></a>新消费组的消费偏移量</h3><pre class="language-JAVA" data-language="JAVA"><code class="language-JAVA">/** * 当消费主题的是一个新的消费组，或者指定offset的消费方式，offset不存在 * latest(默认)：只消费自己启动后发送到主题的消息 * earliest: 第一次从头开始消费，以后按照消费offset记录继续消费，这个需要区别于consumer.seekToBeginning(每次从头开始消费) */// auto.offset.resetprops.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, "earliest");</code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;Java 消费 Kafka 配置信息总结。&lt;/p&gt;
&lt;p&gt;配置文档：&lt;a href=&quot;https://kafka.apache.org/documentation/#newconsumerconfigs&quot;&gt;https://kafka.apache.org/documentation/#newconsumerconfigs&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Apache" scheme="https://jueee.github.io/categories/Apache/"/>
    
    <category term="Kafka" scheme="https://jueee.github.io/categories/Apache/Kafka/"/>
    
    
    <category term="Apache" scheme="https://jueee.github.io/tags/Apache/"/>
    
    <category term="Kafka" scheme="https://jueee.github.io/tags/Kafka/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu 下安装 idea 创建桌面快捷方式</title>
    <link href="https://jueee.github.io/2022/08/2022-08-18-Ubuntu%E4%B8%8B%E5%AE%89%E8%A3%85idea%E5%88%9B%E5%BB%BA%E6%A1%8C%E9%9D%A2%E5%BF%AB%E6%8D%B7%E6%96%B9%E5%BC%8F/"/>
    <id>https://jueee.github.io/2022/08/2022-08-18-Ubuntu%E4%B8%8B%E5%AE%89%E8%A3%85idea%E5%88%9B%E5%BB%BA%E6%A1%8C%E9%9D%A2%E5%BF%AB%E6%8D%B7%E6%96%B9%E5%BC%8F/</id>
    <published>2022-08-18T00:00:00.000Z</published>
    <updated>2022-08-29T02:28:01.453Z</updated>
    
    <content type="html"><![CDATA[<p>介绍在 Ubuntu 下安装 idea 的方法并创建桌面快捷方式。</p><a id="more"></a><h3 id="安装-idea"><a href="#安装-idea" class="headerlink" title="安装 idea"></a>安装 idea</h3><p>打开 idea 官网，点击下载：</p><blockquote><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuamV0YnJhaW5zLmNvbS96aC1jbi9pZGVhLw==">https://www.jetbrains.com/zh-cn/idea/<i class="fa fa-external-link-alt"></i></span></p></blockquote><p>解压：<code>tar -zxvf ideaIU-2022.2.tar.gz</code></p><p>移动：<code>mv idea-IC-222.3345.118/ /home/netease/文档/software/</code></p><p>启动：到 idea 目录 bin 下执行 <code>./idea.sh</code> 。</p><h3 id="创建快捷方式"><a href="#创建快捷方式" class="headerlink" title="创建快捷方式"></a>创建快捷方式</h3><p>每次启动的时候都需要到 idea 目录 bin 下执行：</p><pre class="language-none"><code class="language-none">./idea.sh</code></pre><p>这样比较麻烦，现在我们在 <strong>桌面</strong> 上创建快捷方式。</p><p>在 ubuntu 20.04 中要想双击打开只能建立桌面图标。</p><ol><li><p>创建快捷方式。注意，必须要在桌面上创建快捷方式，才可生效。</p><pre class="language-none"><code class="language-none">touch idea.desktop</code></pre></li><li><p>编辑此文件</p><pre class="language-none"><code class="language-none">vi idea.desktop</code></pre></li><li><p>添加以下内容</p><pre class="language-none"><code class="language-none">[Desktop Entry]Name=IntelliJ IDEAComment=IntelliJ IDEAExec=/home/netease/文档/software/idea-IC-222.3345.118/bin/idea.shIcon=/home/netease/文档/software/idea-IC-222.3345.118/bin/idea.pngTerminal=falseType=ApplicationCategories=Developer;</code></pre></li><li><p>此时，图标如下：<br><img src="/images/2022/08/image-20220818155022689.png" alt="image-20220818155022689" loading="lazy"></p></li><li><p>鼠标右键，设置允许启动：<br><img src="/images/2022/08/image-20220818155635581.png" alt="image-20220818155635581" loading="lazy"></p></li><li><p>此时，图标会变成 idea 的图标。如下所示：<br><img src="/images/2022/08/image-20220818155805234.png" alt="image-20220818155805234" loading="lazy"></p></li><li><p>然后双击该 idea 图标，即可打开 idea 软件了。</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;介绍在 Ubuntu 下安装 idea 的方法并创建桌面快捷方式。&lt;/p&gt;</summary>
    
    
    
    <category term="OS" scheme="https://jueee.github.io/categories/OS/"/>
    
    <category term="Ubuntu" scheme="https://jueee.github.io/categories/OS/Ubuntu/"/>
    
    
    <category term="OS" scheme="https://jueee.github.io/tags/OS/"/>
    
    <category term="Ubuntu" scheme="https://jueee.github.io/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>查看 Linux 系统架构的命令</title>
    <link href="https://jueee.github.io/2022/08/2022-08-16-%E6%9F%A5%E7%9C%8BLinux%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84%E7%9A%84%E5%91%BD%E4%BB%A4/"/>
    <id>https://jueee.github.io/2022/08/2022-08-16-%E6%9F%A5%E7%9C%8BLinux%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84%E7%9A%84%E5%91%BD%E4%BB%A4/</id>
    <published>2022-08-16T00:00:00.000Z</published>
    <updated>2022-08-29T02:28:01.452Z</updated>
    
    <content type="html"><![CDATA[<p>整理一些查看 Linux 系统架构的命令汇总。</p><a id="more"></a><h3 id="查看内核版本"><a href="#查看内核版本" class="headerlink" title="查看内核版本"></a>查看内核版本</h3><ul><li><p><code>cat /proc/version</code></p><pre class="language-none"><code class="language-none">$ cat /proc/versionLinux version 5.13.0-30-generic (buildd@lcy02-amd64-003) (gcc (Ubuntu 9.3.0-17ubuntu1~20.04) 9.3.0, GNU ld (GNU Binutils for Ubuntu) 2.34) #33~20.04.1-Ubuntu SMP Mon Feb 7 14:25:10 UTC 2022</code></pre></li><li><p><code>uname -a</code></p><pre class="language-none"><code class="language-none">$ uname -aLinux hih-l-9286 5.13.0-30-generic #33~20.04.1-Ubuntu SMP Mon Feb 7 14:25:10 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux</code></pre></li><li><p><code>uname -r</code></p><pre class="language-none"><code class="language-none">$ uname -r5.13.0-30-generic</code></pre></li></ul><h3 id="查看-Linux-版本信息"><a href="#查看-Linux-版本信息" class="headerlink" title="查看 Linux 版本信息"></a>查看 Linux 版本信息</h3><ul><li><p><code>lsb_release -a</code></p><pre class="language-none"><code class="language-none">$ lsb_release -aNo LSB modules are available.Distributor ID:UbuntuDescription:Ubuntu 20.04.4 LTSRelease:20.04Codename:focal</code></pre></li><li><p><code>cat /etc/issue</code></p><pre class="language-none"><code class="language-none">$ cat /etc/issueUbuntu 20.04.4 LTS \n \l</code></pre></li></ul><h3 id="查看linux是64为还是32位"><a href="#查看linux是64为还是32位" class="headerlink" title="查看linux是64为还是32位"></a>查看 linux 是 64 为还是 32 位</h3><ul><li><p><code>getconf LONG_BIT</code></p><pre class="language-none"><code class="language-none">$ getconf LONG_BIT64</code></pre></li><li><p><code>file /bin/ls</code></p><pre class="language-none"><code class="language-none">$ file /bin/ls/bin/ls: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=2f15ad836be3339dec0e2e6a3c637e08e48aacbd, for GNU/Linux 3.2.0, stripped</code></pre></li></ul><h3 id="查看系统的架构"><a href="#查看系统的架构" class="headerlink" title="查看系统的架构"></a>查看系统的架构</h3><ul><li><p><code>dpkg --print-architecture</code></p><pre class="language-none"><code class="language-none">$ dpkg --print-architectureamd64</code></pre></li><li><p><code>arch</code></p><pre class="language-none"><code class="language-none">$ archx86_64</code></pre></li><li><p><code>file /lib/systemd/systemd</code></p><pre class="language-none"><code class="language-none">$ file /lib/systemd/systemd/lib/systemd/systemd: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=52d683fd53e75da4dcfe607c8080cdf2d8ae1ce5, for GNU/Linux 3.2.0, stripped</code></pre></li></ul><h3 id="查看Mint系统对应的-Ubuntu系统"><a href="#查看Mint系统对应的-Ubuntu系统" class="headerlink" title="查看Mint系统对应的 Ubuntu系统"></a>查看 Mint 系统对应的 Ubuntu 系统</h3><p>使用 <code>cat /etc/os-release</code> 命令也可以获取到 Ubuntu 代号：</p><pre class="language-none"><code class="language-none">$ cat /etc/os-release NAME="Ubuntu"VERSION="20.04.4 LTS (Focal Fossa)"ID=ubuntuID_LIKE=debianPRETTY_NAME="Ubuntu 20.04.4 LTS"VERSION_ID="20.04"HOME_URL="https://www.ubuntu.com/"SUPPORT_URL="https://help.ubuntu.com/"BUG_REPORT_URL="https://bugs.launchpad.net/ubuntu/"PRIVACY_POLICY_URL="https://www.ubuntu.com/legal/terms-and-policies/privacy-policy"VERSION_CODENAME=focalUBUNTU_CODENAME=focal</code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;整理一些查看 Linux 系统架构的命令汇总。&lt;/p&gt;</summary>
    
    
    
    <category term="OS" scheme="https://jueee.github.io/categories/OS/"/>
    
    <category term="Linux" scheme="https://jueee.github.io/categories/OS/Linux/"/>
    
    
    <category term="Linux" scheme="https://jueee.github.io/tags/Linux/"/>
    
    <category term="OS" scheme="https://jueee.github.io/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 分隔符分隔字符串操作汇总</title>
    <link href="https://jueee.github.io/2022/08/2022-08-11-MySQL%E5%88%86%E9%9A%94%E7%AC%A6%E5%88%86%E9%9A%94%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C%E6%B1%87%E6%80%BB/"/>
    <id>https://jueee.github.io/2022/08/2022-08-11-MySQL%E5%88%86%E9%9A%94%E7%AC%A6%E5%88%86%E9%9A%94%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C%E6%B1%87%E6%80%BB/</id>
    <published>2022-08-11T00:00:00.000Z</published>
    <updated>2022-08-29T02:28:01.434Z</updated>
    
    <content type="html"><![CDATA[<p>MySQL 分隔符分隔字符串操作汇总。</p><p>参考文档：<span class="exturl" data-url="aHR0cHM6Ly9kZXYubXlzcWwuY29tL2RvYy9yZWZtYW4vOC4wL2VuL3N0cmluZy1mdW5jdGlvbnMuaHRtbA==">https://dev.mysql.com/doc/refman/8.0/en/string-functions.html<i class="fa fa-external-link-alt"></i></span></p><a id="more"></a><h3 id="SUBSTRING"><a href="#SUBSTRING" class="headerlink" title="SUBSTRING"></a>SUBSTRING</h3><p>对于所有形式的 SUBSTRING ()，要从中提取子字符串的字符串中第一个字符的位置被认为是 1。</p><p>可以对函数使用负值 。在这种情况下，子字符串的开头是字符串末尾的字符，而不是开头。</p><h4 id="指定位置截取"><a href="#指定位置截取" class="headerlink" title="指定位置截取"></a>指定位置截取</h4><blockquote><p>SUBSTRING (str,pos)  或者 SUBSTRING (str FROM pos)</p></blockquote><p>示例：</p><pre class="language-none"><code class="language-none">mysql&gt; SELECT SUBSTRING('Quadratically',5);        -&gt; 'ratically'mysql&gt; SELECT SUBSTRING('foobarbar' FROM 4);        -&gt; 'barbar'mysql&gt; SELECT SUBSTRING('Sakila', -3);        -&gt; 'ila'</code></pre><h4 id="指定长度截取"><a href="#指定长度截取" class="headerlink" title="指定长度截取"></a>指定长度截取</h4><blockquote><p>SUBSTRING (str,pos,len) 或者 SUBSTRING (str FROM pos FOR len)</p></blockquote><p>示例：</p><pre class="language-none"><code class="language-none">mysql&gt; SELECT SUBSTRING('Quadratically',5,6);        -&gt; 'ratica'mysql&gt; SELECT SUBSTRING('Sakila', -5, 3);        -&gt; 'aki'mysql&gt; SELECT SUBSTRING('Sakila' FROM -4 FOR 2);        -&gt; 'ki'</code></pre><h3 id="SUBSTRING-INDEX"><a href="#SUBSTRING-INDEX" class="headerlink" title="SUBSTRING_INDEX"></a>SUBSTRING_INDEX</h3><p>从指定出现次数的分隔符之前的字符串中返回子字符串。</p><p>SUBSTRING_INDEX 函数的格式如下：</p><blockquote><p>SUBSTRING_INDEX(str,delim,count)</p></blockquote><p>从出现分隔符 <em><code>str </code></em> 之前的字符串返回子字符串 。</p><ul><li>如果是正数，则返回最终分隔符左侧（从左侧算起）的所有内容。</li><li>如果为负数，则返回最终分隔符右侧（从右侧开始计数）的所有内容。 </li></ul><p>搜索时执行区分大小写的匹配 。</p><pre class="language-none"><code class="language-none">mysql&gt; SELECT SUBSTRING_INDEX('www.mysql.com', '.', 2);        -&gt; 'www.mysql'mysql&gt; SELECT SUBSTRING_INDEX('www.mysql.com', '.', -2);        -&gt; 'mysql.com'</code></pre><p>SUBSTRING_INDEX () 任何参数是 NULL， 则返回 NULL。</p><h3 id="LEFT"><a href="#LEFT" class="headerlink" title="LEFT"></a>LEFT</h3><p>LEFT 函数的格式如下：</p><blockquote><p>LEFT(str,len)</p></blockquote><p>返回字符串中最左边 *<code>len</code><em>的字符</em><code>str</code>*，或者 <code>NULL</code> 如果任何参数是 <code>NULL</code>。</p><pre class="language-none"><code class="language-none">mysql&gt; SELECT LEFT('foobarbar', 5);        -&gt; 'fooba'</code></pre><h3 id="RIGHT"><a href="#RIGHT" class="headerlink" title="RIGHT"></a>RIGHT</h3><p>RIGHT 函数的格式如下：</p><blockquote><p>RIGHT(str,len)</p></blockquote><p>返回字符串中最右边 *<code>len</code>* 的字符 *<code>str</code>*，或者 <code>NULL</code> 如果任何参数是 <code>NULL</code>。</p><pre class="language-none"><code class="language-none">mysql&gt; SELECT RIGHT('foobarbar', 4);        -&gt; 'rbar'</code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;MySQL 分隔符分隔字符串操作汇总。&lt;/p&gt;
&lt;p&gt;参考文档：&lt;a href=&quot;https://dev.mysql.com/doc/refman/8.0/en/string-functions.html&quot;&gt;https://dev.mysql.com/doc/refman/8.0/en/string-functions.html&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Database" scheme="https://jueee.github.io/categories/Database/"/>
    
    <category term="MySQL" scheme="https://jueee.github.io/categories/Database/MySQL/"/>
    
    
    <category term="MySQL" scheme="https://jueee.github.io/tags/MySQL/"/>
    
    <category term="Database" scheme="https://jueee.github.io/tags/Database/"/>
    
  </entry>
  
  <entry>
    <title>Mac 快捷手势工具 BetterAndBetter</title>
    <link href="https://jueee.github.io/2022/08/2022-08-07-Mac%E5%BF%AB%E6%8D%B7%E6%89%8B%E5%8A%BF%E5%B7%A5%E5%85%B7BetterAndBetter/"/>
    <id>https://jueee.github.io/2022/08/2022-08-07-Mac%E5%BF%AB%E6%8D%B7%E6%89%8B%E5%8A%BF%E5%B7%A5%E5%85%B7BetterAndBetter/</id>
    <published>2022-08-07T00:00:00.000Z</published>
    <updated>2022-08-29T02:28:01.399Z</updated>
    
    <content type="html"><![CDATA[<h3 id="BetterAndBetter-介绍"><a href="#BetterAndBetter-介绍" class="headerlink" title="BetterAndBetter 介绍"></a>BetterAndBetter 介绍</h3><ul><li>下载：<span class="exturl" data-url="aHR0cHM6Ly93d3cuYmV0dGVyMzY1LmNuLw==">https://www.better365.cn<i class="fa fa-external-link-alt"></i></span></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;BetterAndBetter-介绍&quot;&gt;&lt;a href=&quot;#BetterAndBetter-介绍&quot; class=&quot;headerlink&quot; title=&quot;BetterAndBetter 介绍&quot;&gt;&lt;/a&gt;BetterAndBetter 介绍&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;</summary>
      
    
    
    
    <category term="Blog" scheme="https://jueee.github.io/categories/Blog/"/>
    
    
    <category term="Blog" scheme="https://jueee.github.io/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>Java 实现中文拼音转换工具介绍</title>
    <link href="https://jueee.github.io/2022/08/2022-08-05-Java%E5%AE%9E%E7%8E%B0%E4%B8%AD%E6%96%87%E6%8B%BC%E9%9F%B3%E8%BD%AC%E6%8D%A2%E5%B7%A5%E5%85%B7%E4%BB%8B%E7%BB%8D/"/>
    <id>https://jueee.github.io/2022/08/2022-08-05-Java%E5%AE%9E%E7%8E%B0%E4%B8%AD%E6%96%87%E6%8B%BC%E9%9F%B3%E8%BD%AC%E6%8D%A2%E5%B7%A5%E5%85%B7%E4%BB%8B%E7%BB%8D/</id>
    <published>2022-08-05T00:00:00.000Z</published>
    <updated>2022-08-29T02:28:01.398Z</updated>
    
    <content type="html"><![CDATA[<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2hvdWJiL3Bpbnlpbg==">pinyin<i class="fa fa-external-link-alt"></i></span> 是 java 实现的高性能中文拼音转换工具。</p><a id="more"></a><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><ul><li>GitHub：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2hvdWJiL3Bpbnlpbg==">https://github.com/houbb/pinyin<i class="fa fa-external-link-alt"></i></span></li></ul><h4 id="maven-引入"><a href="#maven-引入" class="headerlink" title="maven 引入"></a>maven 引入</h4><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.github.houbb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>pinyin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>0.3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></code></pre><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><h4 id="返回中文的拼音"><a href="#返回中文的拼音" class="headerlink" title="返回中文的拼音"></a>返回中文的拼音</h4><p>使用 <code>PinyinHelper.toPinyin(string)</code> 进行中文转换。</p><pre class="language-none"><code class="language-none">String pinyin = PinyinHelper.toPinyin("我爱中文");Assert.assertEquals("wǒ ài zhōng wén", pinyin);</code></pre><h4 id="返回多音字列表"><a href="#返回多音字列表" class="headerlink" title="返回多音字列表"></a>返回多音字列表</h4><p>使用 <code>PinyinHelper.toPinyinList(char)</code> 获取多音字的读音列表。</p><pre class="language-none"><code class="language-none">List&lt;String&gt; pinyinList = PinyinHelper.toPinyinList('重');Assert.assertEquals("[zhòng, chóng, tóng]", pinyinList.toString());</code></pre><h4 id="分词特性"><a href="#分词特性" class="headerlink" title="分词特性"></a>分词特性</h4><p>默认支持中文分词，对用户透明。</p><pre class="language-none"><code class="language-none">String pinyin = PinyinHelper.toPinyin("重庆火锅");Assert.assertEquals("chóng qìng huǒ guō", pinyin);String pinyin2 = PinyinHelper.toPinyin("分词也很重要");Assert.assertEquals("fēn cí yě hěn zhòng yào", pinyin2);</code></pre><h3 id="不同模式"><a href="#不同模式" class="headerlink" title="不同模式"></a>不同模式</h3><h4 id="DEFAULT"><a href="#DEFAULT" class="headerlink" title="DEFAULT"></a>DEFAULT</h4><pre class="language-none"><code class="language-none">String pinyin = PinyinHelper.toPinyin("我爱中文", PinyinStyleEnum.DEFAULT);Assert.assertEquals("wǒ ài zhōng wén", pinyin);</code></pre><h4 id="NORMAL"><a href="#NORMAL" class="headerlink" title="NORMAL"></a>NORMAL</h4><pre class="language-none"><code class="language-none">String pinyin = PinyinHelper.toPinyin("我爱中文", PinyinStyleEnum.NORMAL);Assert.assertEquals("wo ai zhong wen", pinyin);</code></pre><h4 id="NUM-LAST"><a href="#NUM-LAST" class="headerlink" title="NUM_LAST"></a>NUM_LAST</h4><pre class="language-none"><code class="language-none">String pinyin = PinyinHelper.toPinyin("我爱中文", PinyinStyleEnum.NUM_LAST);Assert.assertEquals("wo3 ai4 zhong1 wen2", pinyin);</code></pre><h4 id="FIRST-LETTER"><a href="#FIRST-LETTER" class="headerlink" title="FIRST_LETTER"></a>FIRST_LETTER</h4><pre class="language-none"><code class="language-none">String pinyin = PinyinHelper.toPinyin("我爱中文", PinyinStyleEnum.FIRST_LETTER);Assert.assertEquals("w a z w", pinyin);</code></pre><h4 id="指定连接符号"><a href="#指定连接符号" class="headerlink" title="指定连接符号"></a>指定连接符号</h4><p>有时候使用者希望指定特定的连接符号。</p><pre class="language-none"><code class="language-none">final String text = "我爱中文";Assert.assertEquals("wazw", PinyinHelper.toPinyin(text, PinyinStyleEnum.FIRST_LETTER, StringUtil.EMPTY));</code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/houbb/pinyin&quot;&gt;pinyin&lt;/a&gt; 是 java 实现的高性能中文拼音转换工具。&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://jueee.github.io/categories/Java/"/>
    
    <category term="JavaJar" scheme="https://jueee.github.io/categories/Java/JavaJar/"/>
    
    
    <category term="Java" scheme="https://jueee.github.io/tags/Java/"/>
    
    <category term="JavaJar" scheme="https://jueee.github.io/tags/JavaJar/"/>
    
  </entry>
  
  <entry>
    <title>Mac 上快速安装 oh-my-zsh</title>
    <link href="https://jueee.github.io/2022/08/2022-08-01-Mac%E4%B8%8A%E5%BF%AB%E9%80%9F%E5%AE%89%E8%A3%85oh-my-zsh/"/>
    <id>https://jueee.github.io/2022/08/2022-08-01-Mac%E4%B8%8A%E5%BF%AB%E9%80%9F%E5%AE%89%E8%A3%85oh-my-zsh/</id>
    <published>2022-08-01T00:00:00.000Z</published>
    <updated>2022-08-29T02:28:01.377Z</updated>
    
    <content type="html"><![CDATA[<h3 id="oh-my-zsh-介绍"><a href="#oh-my-zsh-介绍" class="headerlink" title="oh-my-zsh 介绍"></a>oh-my-zsh 介绍</h3><ul><li>GitHub：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL29obXl6c2gvb2hteXpzaA==">ohmyzsh-github<i class="fa fa-external-link-alt"></i></span></li></ul><a id="more"></a><h3 id="zsh安装设置"><a href="#zsh安装设置" class="headerlink" title="zsh安装设置"></a>zsh 安装设置</h3><p>mac 自带了 zsh，可以检测一下：</p><pre class="language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">cat</span> /etc/shells<span class="token comment"># List of acceptable shells for chpass(1).</span><span class="token comment"># Ftpd will not allow users to connect who are not using</span><span class="token comment"># one of these shells.</span>/bin/bash/bin/csh/bin/dash/bin/ksh/bin/sh/bin/tcsh/bin/zsh</code></pre><p>查看 zsh 版本：</p><pre class="language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">zsh</span> --version<span class="token function">zsh</span> <span class="token number">5.8</span>.1 <span class="token punctuation">(</span>x86_64-apple-darwin21.0<span class="token punctuation">)</span></code></pre><p>把 zsh 设置成默认 shell</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看</span>$ <span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">which</span> <span class="token function">zsh</span><span class="token variable">)</span></span>/bin/zsh<span class="token comment"># 设置</span>$ chsh -s <span class="token variable"><span class="token variable">$(</span><span class="token function">which</span> <span class="token function">zsh</span><span class="token variable">)</span></span><span class="token comment"># 查检-需要关闭终端重新打开后生效</span>$ <span class="token builtin class-name">echo</span> <span class="token environment constant">$SHELL</span>/bin/zsh</code></pre><h3 id="oh-my-zsh-安装"><a href="#oh-my-zsh-安装" class="headerlink" title="oh-my-zsh 安装"></a>oh-my-zsh 安装</h3><ol><li><p>下载仓库： </p><pre class="language-none"><code class="language-none">git clone https://github.com/ohmyzsh/ohmyzsh.git ~/.oh-my-zsh</code></pre></li><li><p>创建一个新的 zsh 配置文件。</p><p>您可以通过复制我们为您包含的模板来创建新的 zsh 配置文件。</p><pre class="language-none"><code class="language-none">cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc</code></pre></li><li><p>更改默认 shell 的配置：</p><pre class="language-none"><code class="language-none">chsh -s $(which zsh)</code></pre><p>您必须退出用户会话并重新登录才能看到此更改。</p></li></ol><h3 id="修改主题"><a href="#修改主题" class="headerlink" title="修改主题"></a>修改主题</h3><p>主题列表：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL29obXl6c2gvd2lraS9ibG9iL21haW4vVGhlbWVzLm1k">https://github.com/ohmyzsh/wiki/blob/main/Themes.md<i class="fa fa-external-link-alt"></i></span></p><p>默认显示：</p><h5 id=""><a href="#" class="headerlink" title=""></a><img src="/images/2022/08/image-20220801211650600.png" alt="image-20220801211650600" style="zoom:50%;"></h5><p>打开设置 <code>vi ~/.zshrc</code></p><p><img src="/images/2022/08/image-20220801211632073.png" alt="image-20220801211632073" loading="lazy"></p><p>修改主题为 <code>crcandy</code>，并重启终端生效。</p><img src="/images/2022/08/image-20220801213206293.png" alt="image-20220801213206293" style="zoom:50%;"><h3 id="安装-zsh-completions-插件"><a href="#安装-zsh-completions-插件" class="headerlink" title="安装 zsh-completions 插件"></a>安装 <strong><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3pzaC11c2Vycy96c2gtY29tcGxldGlvbnM=">zsh-completions<i class="fa fa-external-link-alt"></i></span></strong> 插件</h3><p>在 oh-my-zsh repo 中克隆存储库：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/zsh-users/zsh-completions <span class="token variable">${ZSH_CUSTOM<span class="token operator">:-</span>${ZSH<span class="token operator">:-</span>~<span class="token operator">/</span>.oh-my-zsh}</span>/custom<span class="token punctuation">}</span>/plugins/zsh-completions</code></pre><p>增加 <code>FPATH</code> 在 <code>.zshrc</code> 文件中，增加在 <code>source "$ZSH/oh-my-zsh.sh"</code> 之前:</p><pre class="language-none"><code class="language-none">fpath+=${ZSH_CUSTOM:-${ZSH:-~/.oh-my-zsh}/custom}/plugins/zsh-completions/src</code></pre><p>验证：</p><pre class="language-none"><code class="language-none">&gt; % git clclean -- remove untracked files from working treeclone -- clone repository into new directory</code></pre>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;oh-my-zsh-介绍&quot;&gt;&lt;a href=&quot;#oh-my-zsh-介绍&quot; class=&quot;headerlink&quot; title=&quot;oh-my-zsh 介绍&quot;&gt;&lt;/a&gt;oh-my-zsh 介绍&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;GitHub：&lt;a href=&quot;https://github.com/ohmyzsh/ohmyzsh&quot;&gt;ohmyzsh-github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="软件" scheme="https://jueee.github.io/categories/%E8%BD%AF%E4%BB%B6/"/>
    
    <category term="MacOS" scheme="https://jueee.github.io/categories/%E8%BD%AF%E4%BB%B6/MacOS/"/>
    
    
    <category term="软件" scheme="https://jueee.github.io/tags/%E8%BD%AF%E4%BB%B6/"/>
    
    <category term="MacOS" scheme="https://jueee.github.io/tags/MacOS/"/>
    
  </entry>
  
  <entry>
    <title>Spring EL 表达式简单介绍和使用</title>
    <link href="https://jueee.github.io/2022/07/2022-07-27-Spring%20EL%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
    <id>https://jueee.github.io/2022/07/2022-07-27-Spring%20EL%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D%E5%92%8C%E4%BD%BF%E7%94%A8/</id>
    <published>2022-07-27T00:00:00.000Z</published>
    <updated>2022-07-27T11:07:17.022Z</updated>
    
    <content type="html"><![CDATA[<h3 id="SpringEL-介绍"><a href="#SpringEL-介绍" class="headerlink" title="SpringEL 介绍"></a>SpringEL 介绍</h3><p>Spring3 中引入了 Spring 表达式语言 ——Spring EL。</p><p>Spring EL 是一种强大，简洁的装配 Bean 的方式，他可以通过运行期间执行的表达式将值装配到我们的属性或构造函数当中，更可以调用 JDK 中提供的静态常量，获取外部 Properties 文件中的的配置。</p><a id="more"></a><h4 id="SpringEL-优点"><a href="#SpringEL-优点" class="headerlink" title="SpringEL 优点"></a>SpringEL 优点</h4><p>Spring EL 功能非常强大，在 Annotation 的方式开发时可能感觉并不强烈，因为可以直接编写到源代码来实现 Spring EL 的功能，但如果是在 XML 文件中进行配置，Spring EL 可以弥补 XML 静态注入的不足，从而实现更强大的注入。</p><h4 id="SpringEL-缺点"><a href="#SpringEL-缺点" class="headerlink" title="SpringEL 缺点"></a>SpringEL 缺点</h4><p>Spring EL 在使用时仅仅是一个字符串，不易于排错与测试，也没有 IDE 检查我们的语法（目前 DIEA 可以检测 EL 语言），当出现错误时较难检测。</p><h3 id="SpringEL-简单使用"><a href="#SpringEL-简单使用" class="headerlink" title="SpringEL 简单使用"></a>SpringEL 简单使用</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> expressionStr <span class="token operator">=</span> <span class="token string">"'hello world'.toUpperCase().substring(1,5)"</span><span class="token punctuation">;</span><span class="token comment">//指定SpelExpressionParser解析器实现类</span><span class="token class-name">ExpressionParser</span> parser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpelExpressionParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//解析表达式</span><span class="token class-name">Expression</span> expression <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span>expressionStr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>expression<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// ELLO</span></code></pre><h3 id="SpringEL-参数传递"><a href="#SpringEL-参数传递" class="headerlink" title="SpringEL 参数传递"></a>SpringEL 参数传递</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> expressionStr <span class="token operator">=</span> <span class="token string">"#info.toUpperCase().substring(#start, #end)"</span><span class="token punctuation">;</span><span class="token class-name">ExpressionParser</span> parser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpelExpressionParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Expression</span> expression <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span>expressionStr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置对象模型基础</span><span class="token class-name">EvaluationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StandardEvaluationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>context<span class="token punctuation">.</span><span class="token function">setVariable</span><span class="token punctuation">(</span><span class="token string">"info"</span><span class="token punctuation">,</span> <span class="token string">"XiaoJueee"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>context<span class="token punctuation">.</span><span class="token function">setVariable</span><span class="token punctuation">(</span><span class="token string">"start"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>context<span class="token punctuation">.</span><span class="token function">setVariable</span><span class="token punctuation">(</span><span class="token string">"end"</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>expression<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="SpringEL-带缓存工具方法"><a href="#SpringEL-带缓存工具方法" class="headerlink" title="SpringEL 带缓存工具方法"></a>SpringEL 带缓存工具方法</h3><p>Spring EL 表达式解析：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>lang3<span class="token punctuation">.</span></span><span class="token class-name">StringUtils</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>expression<span class="token punctuation">.</span></span><span class="token class-name">Expression</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>expression<span class="token punctuation">.</span></span><span class="token class-name">ExpressionParser</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>expression<span class="token punctuation">.</span>spel<span class="token punctuation">.</span>standard<span class="token punctuation">.</span></span><span class="token class-name">SpelExpressionParser</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ConcurrentHashMap</span><span class="token punctuation">;</span><span class="token comment">/** * Spring EL 表达式解析 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExpressionUtils</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ExpressionParser</span> EXPRESSION_PARSER <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpelExpressionParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Expression</span><span class="token punctuation">&gt;</span></span> EXPRESSION_CACHE <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 获取解析后的表达式     *     * @param expression EL表达式字符串     * @return 解析后的表达式，如果之前已经解析过，则返回缓存的表达式     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Expression</span> <span class="token function">getExpression</span><span class="token punctuation">(</span><span class="token class-name">String</span> expression<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>expression<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        expression <span class="token operator">=</span> expression<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> EXPRESSION_CACHE<span class="token punctuation">.</span><span class="token function">computeIfAbsent</span><span class="token punctuation">(</span>expression<span class="token punctuation">,</span> EXPRESSION_PARSER<span class="token operator">::</span><span class="token function">parseExpression</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>测试调用 Java 方法：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> root <span class="token operator">=</span> <span class="token string">"Hello World"</span><span class="token punctuation">;</span><span class="token class-name">String</span> expression1 <span class="token operator">=</span> <span class="token string">"length()"</span><span class="token punctuation">;</span><span class="token class-name">Expression</span> expr1 <span class="token operator">=</span> <span class="token class-name">ExpressionUtils</span><span class="token punctuation">.</span><span class="token function">getExpression</span><span class="token punctuation">(</span>expression1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Object</span> sourceType1 <span class="token operator">=</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>expr1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sourceType1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 11</span></code></pre><p>测试调用 Java 方法并解析处理：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> root <span class="token operator">=</span> <span class="token string">"Hello World"</span><span class="token punctuation">;</span><span class="token class-name">String</span> expression2 <span class="token operator">=</span> <span class="token string">"split(' ')"</span><span class="token punctuation">;</span><span class="token class-name">Expression</span> expr2 <span class="token operator">=</span> <span class="token class-name">ExpressionUtils</span><span class="token punctuation">.</span><span class="token function">getExpression</span><span class="token punctuation">(</span>expression2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Object</span> sourceType2 <span class="token operator">=</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>expr2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> preList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>sourceType2 <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> objects <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> sourceType2<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> objects<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        preList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>objects<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>preList<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// [Hello, World]</span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;SpringEL-介绍&quot;&gt;&lt;a href=&quot;#SpringEL-介绍&quot; class=&quot;headerlink&quot; title=&quot;SpringEL 介绍&quot;&gt;&lt;/a&gt;SpringEL 介绍&lt;/h3&gt;&lt;p&gt;Spring3 中引入了 Spring 表达式语言 ——Spring EL。&lt;/p&gt;
&lt;p&gt;Spring EL 是一种强大，简洁的装配 Bean 的方式，他可以通过运行期间执行的表达式将值装配到我们的属性或构造函数当中，更可以调用 JDK 中提供的静态常量，获取外部 Properties 文件中的的配置。&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://jueee.github.io/categories/Java/"/>
    
    <category term="Spring" scheme="https://jueee.github.io/categories/Java/Spring/"/>
    
    
    <category term="Java" scheme="https://jueee.github.io/tags/Java/"/>
    
    <category term="Spring" scheme="https://jueee.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Mac 在 “恢复” 环境中修改安全性设置</title>
    <link href="https://jueee.github.io/2022/07/2022-07-25-Mac%E5%9C%A8%E2%80%9C%E6%81%A2%E5%A4%8D%E2%80%9D%E7%8E%AF%E5%A2%83%E4%B8%AD%E4%BF%AE%E6%94%B9%E5%AE%89%E5%85%A8%E6%80%A7%E8%AE%BE%E7%BD%AE/"/>
    <id>https://jueee.github.io/2022/07/2022-07-25-Mac%E5%9C%A8%E2%80%9C%E6%81%A2%E5%A4%8D%E2%80%9D%E7%8E%AF%E5%A2%83%E4%B8%AD%E4%BF%AE%E6%94%B9%E5%AE%89%E5%85%A8%E6%80%A7%E8%AE%BE%E7%BD%AE/</id>
    <published>2022-07-25T00:00:00.000Z</published>
    <updated>2022-07-27T11:07:16.997Z</updated>
    
    <content type="html"><![CDATA[<p>安装 Tuxera NTFS 解决 U 盘 NTFS 读取时，提示需要在 “恢复” 环境中修改安全性设置。</p><p>本文介绍如何进行设置。</p><a id="more"></a><h3 id="出现问题"><a href="#出现问题" class="headerlink" title="出现问题"></a>出现问题</h3><p>M1 芯片电脑添加系统扩展时提示：若要启用系统扩展，您需要在 “恢复” 环境中修改安全性设置</p><p><img src="/images/2022/07/1637896414929138.png" alt="image.png" loading="lazy"></p><h3 id="设置步骤"><a href="#设置步骤" class="headerlink" title="设置步骤"></a>设置步骤</h3><p>1. 点击 [关机]，然后长按电源键，至少 10 秒，将出现启动选项窗口</p><p><img src="/images/2022/07/1637896449879561.png" alt="image.png" loading="lazy"></p><p>2. 选中 [选项]，将出现 [继续] 按钮，点击此按钮。</p><p><img src="/images/2022/07/1637896476266916.png" alt="image.png" loading="lazy"></p><p>3. 依次点击左上角的 [实用工具]-[启动安全性实用工具]</p><p><img src="/images/2022/07/1637896495272020.png" alt="image.png" loading="lazy"></p><p>4. 点击 [安全策略]</p><p><img src="/images/2022/07/1637896511329773.png" alt="image.png" loading="lazy"></p><p>5. 选择 [降低安全性]，勾选 “允许用户管理来自被认可开发者的内核扩展”，点击 [好]。</p><p><img src="/images/2022/07/1637896535966876.png" alt="image.png" loading="lazy"></p><p>6. 设置成功之后，点击屏幕左上角的苹果标志重启电脑，重启之后，打开 [安全性与隐私] 先点击左下角的小锁标志进行解锁，然后点击 [允许]。</p><p><img src="/images/2022/07/1638762209216160.png" alt="image.png" loading="lazy"></p><p>7. 提示：需要重新启动才能使用新的系统扩展，点击 [重新启动] 即可。</p><p><img src="/images/2022/07/1637896574895476-20220725010817619.png" alt="image.png" loading="lazy"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;安装 Tuxera NTFS 解决 U 盘 NTFS 读取时，提示需要在 “恢复” 环境中修改安全性设置。&lt;/p&gt;
&lt;p&gt;本文介绍如何进行设置。&lt;/p&gt;</summary>
    
    
    
    <category term="OS" scheme="https://jueee.github.io/categories/OS/"/>
    
    <category term="MacOS" scheme="https://jueee.github.io/categories/OS/MacOS/"/>
    
    
    <category term="OS" scheme="https://jueee.github.io/tags/OS/"/>
    
    <category term="MacOS" scheme="https://jueee.github.io/tags/MacOS/"/>
    
  </entry>
  
  <entry>
    <title>Mac 通过 iterm2 连接远程服务器</title>
    <link href="https://jueee.github.io/2022/07/2022-07-24-Mac%E9%80%9A%E8%BF%87iterm2%E8%BF%9E%E6%8E%A5%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>https://jueee.github.io/2022/07/2022-07-24-Mac%E9%80%9A%E8%BF%87iterm2%E8%BF%9E%E6%8E%A5%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8/</id>
    <published>2022-07-24T00:00:00.000Z</published>
    <updated>2022-08-08T03:37:26.703Z</updated>
    
    <content type="html"><![CDATA[<h3 id="生成密钥"><a href="#生成密钥" class="headerlink" title="生成密钥"></a>生成密钥</h3><p>通过如下命令生成密钥：</p><pre class="language-none"><code class="language-none">ssh-keygen -m PEM -t rsa -b 2048 -C "jueee"# -t rsa        表示生成RSA类型的KEY# -b 2048       表示生成的KEY长度为2048位# -C "jueee"    表示作为生成KEY的注释# -m PEM        force ssh-keygen to export as PEM format </code></pre><p>如下所示：</p><p><img src="/images/2022/07/2022-07-23-20-01-47-image.png" loading="lazy"></p><h3 id="上传密钥"><a href="#上传密钥" class="headerlink" title="上传密钥"></a>上传密钥</h3><p>将公钥上传到服务器。</p><p>将私钥通过 <code>ssh-add .ssh/id_rsa</code> 添加进 Mac 本身的钥匙串。</p><p>可以通过 <code>ssh-add -l</code> 查看私钥配置。</p><p>可以通过 <code>ssh-add -L</code> 查看公钥配置。</p><h3 id="ssh-命令行"><a href="#ssh-命令行" class="headerlink" title="ssh 命令行"></a>ssh 命令行</h3><p>可以通过如下命令行测试链接：</p><pre class="language-none"><code class="language-none">ssh -p 1046 jueee@xxx.xxx.com -i 20220723-id_rsa -A</code></pre><p>其中，<code>-A</code> 选项表示启用 agent-forwding。 </p><h3 id="ssh配置"><a href="#ssh配置" class="headerlink" title="ssh配置"></a>ssh 配置</h3><ol><li><p>ssh 配置<br>**.ssh/config**</p><pre class="language-none"><code class="language-none">Host testHostname xxx.xxx.com&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#堡垒机域名&nbsp;&nbsp;User jueee&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#登入堡垒机用户名,修改为自己的名称port 22&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#登入堡垒机端口ForwardAgent&nbsp;yes&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#key转发#######如果复制该配置，请把#相关的注释拿掉</code></pre></li><li><p>将私钥添加进 Mac 本身的钥匙串，执行&nbsp;ssh-add -K privateKey</p><pre class="language-none"><code class="language-none">ssh-add -K ~/.ssh/id_rsa&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#将私钥添加进 Mac 本身的钥匙串# 注意：windows WSL或其他linux终端使用 ssh-agent bash</code></pre></li><li><p>查看确认钥匙串，执行 <code>ssh-add -l</code>。</p></li><li><p>ssh 登入堡垒机，执行 <code>ssh test</code></p></li></ol><h3 id="问题处理"><a href="#问题处理" class="headerlink" title="问题处理"></a>问题处理</h3><p>如果出现如下 <strong>Permission denied, please try again.</strong> 异常：</p><p><img src="/images/2022/07/2022-07-23-19-16-49-image.png" loading="lazy"></p><ol><li><p>在.ssh/config 文件中加入：ForwardAgent yes</p></li><li><p>（<strong>重启过电脑</strong>）先确认是否已经将私钥加载到 ssh-agent 缓存中 (命令：ssh-add -l)，如果未加载密钥出现&nbsp;The agent has no identities&nbsp;，并使用命令加载：ssh-add .ssh/id_rsa</p></li><li><p>如果还是无法解决问题，请试图将.ssh/known_hosts 文件中有关堡垒机配置的记录删除。</p></li></ol><h3 id="iterm2配置"><a href="#iterm2配置" class="headerlink" title="iterm2配置"></a>iterm2 配置</h3><p>打开 item2 的 Profiles-&gt; Open Profiles：</p><p><img src="/images/2022/07/2022-07-23-19-44-03-image.png" loading="lazy"></p><p>通过 Edit Profiles 进行新增：</p><p><img src="/images/2022/07/2022-07-23-19-46-10-image.png" loading="lazy"></p><p>即可在 item2 的 Profiles 中进行选择打开。</p><h3 id="设置-iterm2-默认终端"><a href="#设置-iterm2-默认终端" class="headerlink" title="设置 iterm2 默认终端"></a>设置 iterm2 默认终端</h3><img src="/images/2022/07/image-20220725205407991.png" alt="image-20220725205407991" style="zoom:50%;"><h3 id="Mac-配置自动-ssh-add"><a href="#Mac-配置自动-ssh-add" class="headerlink" title="Mac 配置自动 ssh-add"></a>Mac 配置自动 ssh-add</h3><p>mac 机器需要每次开机 ssh-add 一遍私钥，实在是太麻烦，以前有个方法 ssh-add -K privateKey 可以把私钥存到 keychain 中，重启后也不需要手动 ssh-add，这个方法现在不行了。</p><h4 id="新增-app-文件"><a href="#新增-app-文件" class="headerlink" title="新增 .app 文件"></a>新增 .app 文件</h4><ol><li><p>打开 Spotlight（聚焦搜索），输入 Automator 然后点击出现的结果，中文名为 “自动操作”.</p><p><img src="/images/2022/07/2022-07-23-21-01-39-image.png" loading="lazy"></p></li><li><p>创建一个 Automator 应用程序类型文件。</p><p><img src="/images/2022/07/2022-07-23-21-02-40-image.png" loading="lazy"></p></li><li><p>选择运行 shell 脚本，在输入框输入 ssh-add 命令，点击顶部未命名保存。</p><p><img src="/images/2022/07/2022-07-23-21-08-09-image.png" loading="lazy"></p></li><li><p>打开系统偏好设置 -》用户与群组，选择登录项，选择保存的.app 文件为开机启动。</p><p><img src="/images/2022/07/2022-07-23-21-11-29-image.png" loading="lazy"></p></li></ol><p>然后开机运行 ssh-add -l 就可以看到 shell script 里面添加的 key 已经在缓存列表中。</p><h4 id="修改-app-文件"><a href="#修改-app-文件" class="headerlink" title="修改 .app 文件"></a>修改 .app 文件</h4><ol><li><p>打开 Spotlight（聚焦搜索），输入 Automator 然后点击出现的结果，中文名为 “自动操作”.</p><p><img src="/images/2022/07/image-20220725203228959.png" alt="image-20220725203228959" loading="lazy"></p></li><li><p>选择打开现有文稿：</p><img src="/images/2022/07/image-20220725203400165.png" alt="image-20220725203400165" style="zoom:50%;"></li><li><p>选择对应的 .app 文件，打开，即可编辑和保存。</p><img src="/images/2022/07/image-20220725203514603.png" alt="image-20220725203514603" style="zoom:50%;"></li></ol><h3 id="设置快捷键"><a href="#设置快捷键" class="headerlink" title="设置快捷键"></a>设置快捷键</h3><p>Iterm2 设置 cmd + ← 到行首、cmd + →到行尾</p><img src="/images/2022/07/image-20220805215559725.png" alt="image-20220805215559725" style="zoom:50%;"><img src="/images/2022/07/image-20220805215731234.png" alt="image-20220805215731234" style="zoom:50%;">]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;生成密钥&quot;&gt;&lt;a href=&quot;#生成密钥&quot; class=&quot;headerlink&quot; title=&quot;生成密钥&quot;&gt;&lt;/a&gt;生成密钥&lt;/h3&gt;&lt;p&gt;通过如下命令生成密钥：&lt;/p&gt;
&lt;pre class=&quot;language-none&quot;&gt;&lt;code class=&quot;langua</summary>
      
    
    
    
    <category term="软件" scheme="https://jueee.github.io/categories/%E8%BD%AF%E4%BB%B6/"/>
    
    <category term="MacOS" scheme="https://jueee.github.io/categories/%E8%BD%AF%E4%BB%B6/MacOS/"/>
    
    
    <category term="软件" scheme="https://jueee.github.io/tags/%E8%BD%AF%E4%BB%B6/"/>
    
    <category term="MacOS" scheme="https://jueee.github.io/tags/MacOS/"/>
    
  </entry>
  
  <entry>
    <title>Mac 限制某个应用联网</title>
    <link href="https://jueee.github.io/2022/07/2022-07-24-Mac%E9%99%90%E5%88%B6%E6%9F%90%E4%B8%AA%E5%BA%94%E7%94%A8%E8%81%94%E7%BD%91/"/>
    <id>https://jueee.github.io/2022/07/2022-07-24-Mac%E9%99%90%E5%88%B6%E6%9F%90%E4%B8%AA%E5%BA%94%E7%94%A8%E8%81%94%E7%BD%91/</id>
    <published>2022-07-24T00:00:00.000Z</published>
    <updated>2022-07-27T11:07:16.987Z</updated>
    
    <content type="html"><![CDATA[<p>Mac 系统中我们会安装很多 APP，在日常使用 Mac 电脑中，某些软件会经常提示你有更新，而我们不需要更新这些软件，这时候给这些软件断网就不会有这些更新提醒了。</p><p>下面分享在 Mac 中禁止某个 APP 联网教程。</p><a id="more"></a><h3 id="设置步骤"><a href="#设置步骤" class="headerlink" title="设置步骤"></a>设置步骤</h3><ol><li><p>打开 Mac 系统偏好设置。</p></li><li><p>在偏好设置界面，点击 “<strong>安全与隐私</strong>”</p></li><li><p>进入安全与隐私设置窗口，切换到 “<strong>防火墙</strong>” 的设置界面。</p><p><img src="/images/2022/07/image-20220724005630401.png" loading="lazy"></p></li><li><p>点击右下角的 “<strong>锁</strong>” 图标，输入登录密码后点击 “<strong>解锁</strong>”</p><img src="/images/2022/07/image-20220724005750943.png" alt="image-20220724005750943" style="zoom:50%;"></li><li><p>然后点击 “<strong>打开防火墙</strong>” 按钮，再点击下边的 “<strong>防火墙选项</strong>”</p><img src="/images/2022/07/image-20220724005859262.png" alt="image-20220724005859262" style="zoom:50%;"></li><li><p>在弹出的界面，点击方框下边的 “**+**” 号</p><img src="/images/2022/07/image-20220724005934817.png" alt="image-20220724005934817" style="zoom:50%;"></li><li><p>选择禁止联网的 APP，点击 “<strong>添加</strong>” 按钮</p><img src="/images/2022/07/image-20220724010048549.png" alt="image-20220724010048549" style="zoom:50%;"></li><li><p>添加完成后，点击 APP 后边的绿色的点，选择 “<strong>阻止传入连接</strong>”，再点击下边的 “<strong>好</strong>” 即可完成。</p><img src="/images/2022/07/image-20220724010144192.png" alt="image-20220724010144192" style="zoom:50%;"></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;Mac 系统中我们会安装很多 APP，在日常使用 Mac 电脑中，某些软件会经常提示你有更新，而我们不需要更新这些软件，这时候给这些软件断网就不会有这些更新提醒了。&lt;/p&gt;
&lt;p&gt;下面分享在 Mac 中禁止某个 APP 联网教程。&lt;/p&gt;</summary>
    
    
    
    <category term="OS" scheme="https://jueee.github.io/categories/OS/"/>
    
    <category term="MacOS" scheme="https://jueee.github.io/categories/OS/MacOS/"/>
    
    
    <category term="OS" scheme="https://jueee.github.io/tags/OS/"/>
    
    <category term="MacOS" scheme="https://jueee.github.io/tags/MacOS/"/>
    
  </entry>
  
  <entry>
    <title>Mac 安装使用 brew 包管理器</title>
    <link href="https://jueee.github.io/2022/07/2022-07-23-Mac%20%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8%20brew%20%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8/"/>
    <id>https://jueee.github.io/2022/07/2022-07-23-Mac%20%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8%20brew%20%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8/</id>
    <published>2022-07-23T00:00:00.000Z</published>
    <updated>2022-08-08T03:37:26.702Z</updated>
    
    <content type="html"><![CDATA[<h3 id="brew-介绍"><a href="#brew-介绍" class="headerlink" title="brew 介绍"></a>brew 介绍</h3><p>brew 是 Mac 下的一个包管理工具，类似于 centos 下的 <strong>yum</strong>，可以很方便地进行安装 / 卸载 / 更新各种软件包，例如：nodejs, elasticsearch, kibana, mysql, mongodb 等等，可以用来快速搭建各种本地环境，程序员必备工具</p><ul><li>官网：<span class="exturl" data-url="aHR0cHM6Ly9icmV3LnNoL2luZGV4X3poLWNuLmh0bQ==">https://brew.sh/index_zh-cn.htm<i class="fa fa-external-link-alt"></i></span></li></ul><a id="more"></a><h3 id="安装-brew"><a href="#安装-brew" class="headerlink" title="安装 brew"></a>安装 brew</h3><p>打开终端，可以使用如下命令安装 brew：</p><pre class="language-none"><code class="language-none">% /bin/bash -c "$(curl -fsSL https://gitee.com/ineo6/homebrew-install/raw/master/install.sh)</code></pre><p>如下所示：</p><pre class="language-none"><code class="language-none">hellojue@192 ~ % /bin/bash -c "$(curl -fsSL https://gitee.com/ineo6/homebrew-install/raw/master/install.sh)"==&gt; Checking for `sudo` access (which may request your password).Password:==&gt; This script will install:==&gt; 安装提示中文安装教程（建议收藏）：https://brew.idayer.com/如果你想换源，可以使用镜像助手：https://brew.idayer.com/guide/change-source/…………Warning: ！！！！！！！！！！！ 重要  ！！！！！！！！！！！！！！！Warning: 看到此提示，一定要执行 Next steps 中的 环境变量设置！！！Warning: /opt/homebrew/bin is not in your PATH.==&gt; Installation successful!==&gt; Homebrew has enabled anonymous aggregate formulae and cask analytics.Read the analytics documentation (and how to opt-out) here:  https://docs.brew.sh/AnalyticsNo analytics data has been sent yet (or will be during this `install` run).==&gt; Homebrew is run entirely by unpaid volunteers. Please consider donating:  https://github.com/Homebrew/brew#donations==&gt; Next steps:Warning: ！！！！！！！！！！！ 重要  ！！！！！！！！！！！！！！！切记执行环境变量设置！，如已执行过请忽略。- 执行下面命令将 Homebrew 到 PATH 中:    echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' &gt;&gt; /Users/hellojue/.zprofile    eval "$(/opt/homebrew/bin/brew shellenv)"  如有疑问，可以访问 https://brew.idayer.com/guide/m1/- 🎉 恭喜，安装成功！运行 `brew help` 开始体验吧- 更多文档:     https://docs.brew.sh    https://brew.idayer.com</code></pre><h3 id="加入环境变量"><a href="#加入环境变量" class="headerlink" title="加入环境变量"></a>加入环境变量</h3><p>此时，执行 brew 命令依然没有反应。</p><pre class="language-none"><code class="language-none">hellojue@192 ~ % brewzsh: command not found: brew</code></pre><p>需要加入环境变量；</p><pre class="language-none"><code class="language-none">echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' &gt;&gt; /Users/hellojue/.zprofileeval "$(/opt/homebrew/bin/brew shellenv)"</code></pre><p>验证安装：</p><pre class="language-none"><code class="language-none">% brew -vHomebrew 3.5.6Homebrew/homebrew-core (git revision 094a04d5fab; last commit 2022-07-22)</code></pre><h3 id="通过-brew-安装软件"><a href="#通过-brew-安装软件" class="headerlink" title="通过 brew 安装软件"></a>通过 brew 安装软件</h3><h4 id="安装-node"><a href="#安装-node" class="headerlink" title="安装 node"></a>安装 node</h4><pre class="language-none"><code class="language-none">brew install node</code></pre><h4 id="安装-OpenVPN"><a href="#安装-OpenVPN" class="headerlink" title="安装 OpenVPN"></a>安装 OpenVPN</h4><p>安装 OpenVPN，安装完成后需要重启 openVPN 服务：</p><pre class="language-none"><code class="language-none">% To restart openvpn after an upgrade:  sudo brew services restart openvpnOr, if you don't want/need a background service you can just run:  /opt/homebrew/opt/openvpn/sbin/openvpn --config /opt/homebrew/etc/openvpn/openvpn.conf</code></pre><h4 id="安装-mark-text"><a href="#安装-mark-text" class="headerlink" title="安装 mark-text"></a>安装 <strong>mark-text</strong></h4><pre class="language-none"><code class="language-none">brew install --cask mark-text</code></pre><h4 id="安装-enca"><a href="#安装-enca" class="headerlink" title="安装 enca"></a>安装 enca</h4><pre class="language-none"><code class="language-none">brew install enca</code></pre><h4 id="安装-python"><a href="#安装-python" class="headerlink" title="安装 python"></a>安装 python</h4><pre class="language-none"><code class="language-none">brew install python</code></pre><p>验证：</p><blockquote><p>% python3 --version<br>Python 3.9.13</p></blockquote><p>可配置 <code>vim ~/.zshrc</code> ，添加 <code>alias python=python3</code>，然后 <code>source ~/.zshrc</code></p><h3 id="查看-brew-安装列表"><a href="#查看-brew-安装列表" class="headerlink" title="查看 brew 安装列表"></a>查看 brew 安装列表</h3><pre class="language-none"><code class="language-none">% brew list==&gt; Formulaeberkeley-db    icu4c        lzo        perl        sqlitebrotli        libnghttp2    mpdecimal    pkcs11-helper    vimc-ares        libuv        ncurses        python@3.10    xzca-certificates    libyaml        node        python@3.9gdbm        lua        openssl@1.1    readlinegettext        lz4        openvpn        ruby</code></pre><h3 id="通过-brew-卸载软件"><a href="#通过-brew-卸载软件" class="headerlink" title="通过 brew 卸载软件"></a>通过 brew 卸载软件</h3><pre class="language-none"><code class="language-none">brew uninstall openvpn --force</code></pre>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;brew-介绍&quot;&gt;&lt;a href=&quot;#brew-介绍&quot; class=&quot;headerlink&quot; title=&quot;brew 介绍&quot;&gt;&lt;/a&gt;brew 介绍&lt;/h3&gt;&lt;p&gt;brew 是 Mac 下的一个包管理工具，类似于 centos 下的 &lt;strong&gt;yum&lt;/strong&gt;，可以很方便地进行安装 / 卸载 / 更新各种软件包，例如：nodejs, elasticsearch, kibana, mysql, mongodb 等等，可以用来快速搭建各种本地环境，程序员必备工具&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;官网：&lt;a href=&quot;https://brew.sh/index_zh-cn.htm&quot;&gt;https://brew.sh/index_zh-cn.htm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="软件" scheme="https://jueee.github.io/categories/%E8%BD%AF%E4%BB%B6/"/>
    
    <category term="MacOS" scheme="https://jueee.github.io/categories/%E8%BD%AF%E4%BB%B6/MacOS/"/>
    
    
    <category term="软件" scheme="https://jueee.github.io/tags/%E8%BD%AF%E4%BB%B6/"/>
    
    <category term="MacOS" scheme="https://jueee.github.io/tags/MacOS/"/>
    
  </entry>
  
  <entry>
    <title>Mac 特殊操作汇总</title>
    <link href="https://jueee.github.io/2022/07/2022-07-22-Mac%20%E7%89%B9%E6%AE%8A%E6%93%8D%E4%BD%9C%E6%B1%87%E6%80%BB/"/>
    <id>https://jueee.github.io/2022/07/2022-07-22-Mac%20%E7%89%B9%E6%AE%8A%E6%93%8D%E4%BD%9C%E6%B1%87%E6%80%BB/</id>
    <published>2022-07-22T00:00:00.000Z</published>
    <updated>2022-08-19T01:44:38.491Z</updated>
    
    <content type="html"><![CDATA[<p>整理汇总 MacBook 的特殊操作。</p><a id="more"></a><h3 id="用户终端-sudo-免密码"><a href="#用户终端-sudo-免密码" class="headerlink" title="用户终端 sudo 免密码"></a>用户终端 sudo 免密码</h3><p>1.&nbsp;&nbsp;&nbsp;&nbsp;打开终端</p><p>2.&nbsp;&nbsp;&nbsp;&nbsp;输入 <code>sudo visudo</code></p><p>3.&nbsp;&nbsp;&nbsp;&nbsp;输入 i 进入 insert 模式， 翻到最下面找到配置用户和组的位置，如下图：</p><p><img src="/images/2022/07/2022-07-23-18-25-37-image.png" loading="lazy"></p><p>4.&nbsp;&nbsp;&nbsp;&nbsp;切换到 root 用户 <code>sudo su root</code><br>5.&nbsp;&nbsp;&nbsp;&nbsp;切换到自己的用户 <code>sudo su 你的用户名</code><br>6.&nbsp;&nbsp;&nbsp;&nbsp;重启终端生效</p><h3 id="终端打开访达"><a href="#终端打开访达" class="headerlink" title="终端打开访达"></a>终端打开访达</h3><p>可以使用 open 路径具体地址</p><pre class="language-none"><code class="language-none">open .</code></pre><h3 id="访达打开终端"><a href="#访达打开终端" class="headerlink" title="访达打开终端"></a>访达打开终端</h3><p>很多时候，我们需要访达打开终端并定位到当前文件夹。</p><p>mac 上的一些小工具，它能快捷的打开终端并定位到当前文件夹。</p><h4 id="cdto"><a href="#cdto" class="headerlink" title="cdto"></a>cdto</h4><p>下载地址：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2pidHVsZS9jZHRvL3JlbGVhc2Vz">https://github.com/jbtule/cdto/releases<i class="fa fa-external-link-alt"></i></span></p><p>按住 comand 键，把它拉到 Finder 的工具栏。 </p><h4 id="OpenInTerminal"><a href="#OpenInTerminal" class="headerlink" title="OpenInTerminal"></a>OpenInTerminal</h4><p>下载地址：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0ppNG4xbmcvT3BlbkluVGVybWluYWw=">https://github.com/Ji4n1ng/OpenInTerminal<i class="fa fa-external-link-alt"></i></span></p><p>安装：<code>brew install --cask openinterminal</code></p><p>打开 OpenInTerminal 应用。去 <code>系统偏好设置</code> -&gt; <code>扩展</code> -&gt; <code>访达扩展</code>，打开下图中的权限按钮。</p><img src="/images/2022/07/image-20220725210702200.png" alt="image-20220725210702200" style="zoom:50%;"><p>如果设置中没有 “iterm2”，则需要按住 <code>Cmd</code> 键，然后将应用拖到访达工具栏中。</p><h3 id="空格键预览失效"><a href="#空格键预览失效" class="headerlink" title="空格键预览失效"></a>空格键预览失效</h3><p>如果你发现在 Mac 上选取档案后按一下「空格键」，却出现变小的预览视窗，那就代表你的 Mac 空格键预览失效了。</p><p>在 Dock 上的访达按下 Option 键＋滑鼠右键，然后点选「重新启动」的选项，让系统重启访达。</p><p>重新启动访达后，再选取某一档案文件，然后按空格键，你会发现空格键预览的功能成功恢复了！</p><img src="/images/2022/07/image-20220804235932670.png" alt="image-20220804235932670" style="zoom:50%;"><h3 id="默认截图-jpg-格式"><a href="#默认截图-jpg-格式" class="headerlink" title="默认截图 jpg 格式"></a>默认截图 jpg 格式</h3><p>Mac 电脑自带一个截屏快捷键 Command+Shift+4 ，按下快捷键之后便可用鼠标圈选需要截屏的区域，松开鼠标就会自动生成一个 XXX.PNG 格式的截图到桌面。</p><p>但是自动生成的 PNG 格式文件往往比较大，如果要截图上传到其它地方有文件大小限制就比较麻烦（例如网站这类）， 这样可以自己预设截图文件的格式为 JPG 格式。</p><p>系统自带截图：</p><pre class="language-none"><code class="language-none">defaults write com.apple.screencapture type jpg</code></pre><h3 id="导入外部证书"><a href="#导入外部证书" class="headerlink" title="导入外部证书"></a>导入外部证书</h3><p>在导入外部证书后，浏览器访问时提示：</p><img src="/images/2022/07/image-20220812234948987.png" alt="image-20220812234948987" style="zoom:50%;"><p>此时，输入的用户名为 “用户名” 中文，密码为开机密码。</p><p>如果一直提示此信息框，可打开钥匙串访问进行设置。</p><p>打开钥匙串–&gt; 系统 --&gt; 我的证书， 双击证书下面的小钥匙：</p><img src="/images/2022/07/image-20220812235056004.png" alt="image-20220812235056004" style="zoom:50%;"><p>访问控制：选择：允许所有应用程序访问此项目，然后存储更改</p><img src="/images/2022/07/image-20220812235124800.png" alt="image-20220812235124800" style="zoom:50%;"><p>输入密码保存即可。</p><img src="/images/2022/07/image-20220812235621948.png" alt="image-20220812235621948" style="zoom:50%;"><p>如果一直保存不生效，那么在修改后，强制退出钥匙串 app 即可。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;整理汇总 MacBook 的特殊操作。&lt;/p&gt;</summary>
    
    
    
    <category term="OS" scheme="https://jueee.github.io/categories/OS/"/>
    
    <category term="MacOS" scheme="https://jueee.github.io/categories/OS/MacOS/"/>
    
    
    <category term="OS" scheme="https://jueee.github.io/tags/OS/"/>
    
    <category term="MacOS" scheme="https://jueee.github.io/tags/MacOS/"/>
    
  </entry>
  
</feed>
