<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小决的专栏</title>
  
  <subtitle>进一寸有一寸的欢喜</subtitle>
  <link href="https://jueee.github.io/atom.xml" rel="self"/>
  
  <link href="https://jueee.github.io/"/>
  <updated>2021-02-08T07:50:11.485Z</updated>
  <id>https://jueee.github.io/</id>
  
  <author>
    <name>小决</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Springboot 集成 Neo4j 示例</title>
    <link href="https://jueee.github.io/2021/02/2021-02-08-Springboot%E9%9B%86%E6%88%90Neo4j%E7%A4%BA%E4%BE%8B/"/>
    <id>https://jueee.github.io/2021/02/2021-02-08-Springboot%E9%9B%86%E6%88%90Neo4j%E7%A4%BA%E4%BE%8B/</id>
    <published>2021-02-08T00:00:00.000Z</published>
    <updated>2021-02-08T07:50:11.485Z</updated>
    
    <content type="html"><![CDATA[<h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-data-neo4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></code></pre><a id="more"></a><h3 id="配置连接"><a href="#配置连接" class="headerlink" title="配置连接"></a>配置连接</h3><pre class="language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">spring.data.neo4j.uri</span><span class="token punctuation">=</span><span class="token attr-value">bolt://127.0.0.1:7687</span><span class="token attr-name">spring.data.neo4j.username</span><span class="token punctuation">=</span><span class="token attr-value">neo4j</span><span class="token attr-name">spring.data.neo4j.password</span><span class="token punctuation">=</span><span class="token attr-value">123456</span></code></pre><h3 id="建立NodeEntity"><a href="#建立NodeEntity" class="headerlink" title="建立NodeEntity"></a>建立 NodeEntity</h3><p>类似于 MySQL 中的 table 映射的对象类，mysql 中叫做 ORM，neo4j 中叫做 OGM [object graph mapping]</p><h4 id="节点的标签实体"><a href="#节点的标签实体" class="headerlink" title="节点的标签实体"></a>节点的标签实体</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">NoArgsConstructor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>neo4j<span class="token punctuation">.</span>ogm<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">GeneratedValue</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>neo4j<span class="token punctuation">.</span>ogm<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Id</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>neo4j<span class="token punctuation">.</span>ogm<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">NodeEntity</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>neo4j<span class="token punctuation">.</span>ogm<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Property</span><span class="token punctuation">;</span><span class="token annotation punctuation">@NodeEntity</span><span class="token punctuation">(</span>label <span class="token operator">=</span> <span class="token string">"Person"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Id</span>    <span class="token annotation punctuation">@GeneratedValue</span>    <span class="token class-name">Long</span> id<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Property</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"name"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="关系实体"><a href="#关系实体" class="headerlink" title="关系实体"></a>关系实体</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">NoArgsConstructor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>neo4j<span class="token punctuation">.</span>ogm<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token annotation punctuation">@RelationshipEntity</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token string">"LOVES"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Love</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Id</span>    <span class="token annotation punctuation">@GeneratedValue</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>    <span class="token annotation punctuation">@StartNode</span>    <span class="token keyword">private</span> <span class="token class-name">Person</span> startNode<span class="token punctuation">;</span>    <span class="token annotation punctuation">@EndNode</span>    <span class="token keyword">private</span> <span class="token class-name">Person</span> endNode<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="接口-API"><a href="#接口-API" class="headerlink" title="接口 API"></a>接口 API</h3><h4 id="编写Repository"><a href="#编写Repository" class="headerlink" title="编写Repository"></a>编写 Repository</h4><h5 id="节点Repository"><a href="#节点Repository" class="headerlink" title="节点Repository"></a>节点 Repository</h5><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>jueee<span class="token punctuation">.</span>bean<span class="token punctuation">.</span></span><span class="token class-name">Person</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>neo4j<span class="token punctuation">.</span>repository<span class="token punctuation">.</span></span><span class="token class-name">Neo4jRepository</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PersonRepository</span> <span class="token keyword">extends</span> <span class="token class-name">Neo4jRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h5 id="关系Repository"><a href="#关系Repository" class="headerlink" title="关系Repository"></a>关系 Repository</h5><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>jueee<span class="token punctuation">.</span>bean<span class="token punctuation">.</span></span><span class="token class-name">Love</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>neo4j<span class="token punctuation">.</span>repository<span class="token punctuation">.</span></span><span class="token class-name">Neo4jRepository</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">LoveRepository</span> <span class="token keyword">extends</span> <span class="token class-name">Neo4jRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Love</span><span class="token punctuation">,</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h4 id="编写Service"><a href="#编写Service" class="headerlink" title="编写Service"></a>编写 Service</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>jueee<span class="token punctuation">.</span>bean<span class="token punctuation">.</span></span><span class="token class-name">Love</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>jueee<span class="token punctuation">.</span>bean<span class="token punctuation">.</span></span><span class="token class-name">Person</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>jueee<span class="token punctuation">.</span>dao<span class="token punctuation">.</span></span><span class="token class-name">LoveRepository</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>jueee<span class="token punctuation">.</span>dao<span class="token punctuation">.</span></span><span class="token class-name">PersonRepository</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Service</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PersonService</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">PersonRepository</span> personRepository<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">LoveRepository</span> loveRepository<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Person</span> <span class="token function">addPerson</span><span class="token punctuation">(</span><span class="token class-name">Person</span> person<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> personRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Person</span> <span class="token function">findOnePerson</span><span class="token punctuation">(</span><span class="token keyword">long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> personRepository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Love</span> <span class="token function">loves</span><span class="token punctuation">(</span><span class="token class-name">Love</span> love<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> loveRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>love<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="测试程序"><a href="#测试程序" class="headerlink" title="测试程序"></a>测试程序</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>jueee<span class="token punctuation">.</span>bean<span class="token punctuation">.</span></span><span class="token class-name">Love</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>jueee<span class="token punctuation">.</span>bean<span class="token punctuation">.</span></span><span class="token class-name">Person</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Test</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SpringBootTest</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">class</span> <span class="token class-name">PersonServiceTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">PersonService</span> personService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">Person</span> test1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        test1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"test1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Person</span> result1 <span class="token operator">=</span> personService<span class="token punctuation">.</span><span class="token function">addPerson</span><span class="token punctuation">(</span>test1<span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>result1<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Person</span> test2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        test2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"test2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Person</span> result2 <span class="token operator">=</span> personService<span class="token punctuation">.</span><span class="token function">addPerson</span><span class="token punctuation">(</span>test2<span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>result2<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Person</span> person1 <span class="token operator">=</span> personService<span class="token punctuation">.</span><span class="token function">findOnePerson</span><span class="token punctuation">(</span>result1<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Person</span> person2 <span class="token operator">=</span> personService<span class="token punctuation">.</span><span class="token function">findOnePerson</span><span class="token punctuation">(</span>result2<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Love</span> love <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Love</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        love<span class="token punctuation">.</span><span class="token function">setStartNode</span><span class="token punctuation">(</span>person1<span class="token punctuation">)</span><span class="token punctuation">;</span>        love<span class="token punctuation">.</span><span class="token function">setEndNode</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Love</span> result <span class="token operator">=</span>  personService<span class="token punctuation">.</span><span class="token function">loves</span><span class="token punctuation">(</span>love<span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="运行效果"><a href="#运行效果" class="headerlink" title="运行效果"></a>运行效果</h4><p>日志：</p><pre class="language-none"><code class="language-none">Person(id=1263319, name=test1)Person(id=1263329, name=test2)Love(id=1650877, startNode=Person(id=1263319, name=test1), endNode=Person(id=1263329, name=test2))</code></pre><p>查看关系：</p><p><img src="/images/2021/02/image-20210208135415452.png" alt="image-20210208135415452" loading="lazy"></p><h3 id="自定义-cypherSQL"><a href="#自定义-cypherSQL" class="headerlink" title="自定义 cypherSQL"></a>自定义 cypherSQL</h3><h4 id="查询对象"><a href="#查询对象" class="headerlink" title="查询对象"></a>查询对象</h4><h5 id="编写Service-1"><a href="#编写Service-1" class="headerlink" title="编写Service"></a>编写 Service</h5><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>jueee<span class="token punctuation">.</span>bean<span class="token punctuation">.</span></span><span class="token class-name">Love</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>neo4j<span class="token punctuation">.</span>ogm<span class="token punctuation">.</span>session<span class="token punctuation">.</span></span><span class="token class-name">Session</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Service</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SessionService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">Session</span> session<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Love</span><span class="token punctuation">&gt;</span></span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">String</span> searchSQL <span class="token operator">=</span> <span class="token string">"match p=(n:Person)-[t]-&gt;(m) where 1=1 return p limit 20"</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"[searchSQL]"</span><span class="token operator">+</span>searchSQL<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Love</span><span class="token punctuation">&gt;</span></span> loveList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> parameters <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Love</span><span class="token punctuation">&gt;</span></span> loves <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token class-name">Love</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> searchSQL<span class="token punctuation">,</span> parameters<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>loves <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Love</span> love <span class="token operator">:</span> loves<span class="token punctuation">)</span> <span class="token punctuation">{</span>                loveList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>love<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"[UseTime]"</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>start<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"ms"</span><span class="token operator">+</span><span class="token string">"[Size]"</span><span class="token operator">+</span>loveList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> loveList<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="测试程序-1"><a href="#测试程序-1" class="headerlink" title="测试程序"></a>测试程序</h5><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>jueee<span class="token punctuation">.</span>bean<span class="token punctuation">.</span></span><span class="token class-name">Love</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Test</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>neo4j<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>types<span class="token punctuation">.</span></span><span class="token class-name">Path</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SpringBootTest</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">class</span> <span class="token class-name">SessionServiceTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">SessionService</span> sessionService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Love</span><span class="token punctuation">&gt;</span></span> pathList <span class="token operator">=</span> sessionService<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pathList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>t<span class="token operator">-&gt;</span>log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h5><pre class="language-none"><code class="language-none">[searchSQL]match p=(n:Person)-[t]-&gt;(m) where 1=1 return p limit 20[UseTime]1535ms[Size]2Love(id=1650877, startNode=Person(id=1263319, name=test1), endNode=Person(id=1263329, name=test2))Love(id=1651113, startNode=Person(id=1263485, name=test1), endNode=Person(id=1263486, name=test2))</code></pre><h4 id="自定义统计-SQL"><a href="#自定义统计-SQL" class="headerlink" title="自定义统计 SQL"></a>自定义统计 SQL</h4><p>查询节点总数：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Long</span> <span class="token function">getNodeCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Long</span> resultNum <span class="token operator">=</span> <span class="token number">0L</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token class-name">StringBuffer</span> cypher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> parameters <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cypher<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"match (n:Person) return count(n)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> mailSends <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>cypher<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> parameters<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mailSends<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> mailSends<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            resultNum <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">)</span>result<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"count(n)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> resultNum<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>查询关系总数：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Long</span> <span class="token function">getRelationshipCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Long</span> resultNum <span class="token operator">=</span> <span class="token number">0L</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token class-name">StringBuffer</span> cypher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> parameters <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cypher<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"match p=(n:Person)-[]-&gt;(m:Person) return count(n)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>cypher<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> mailSends <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>cypher<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> parameters<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mailSends<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> mailSends<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            resultNum <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">)</span>result<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"count(n)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> resultNum<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;引入依赖&quot;&gt;&lt;a href=&quot;#引入依赖&quot; class=&quot;headerlink&quot; title=&quot;引入依赖&quot;&gt;&lt;/a&gt;引入依赖&lt;/h3&gt;&lt;pre class=&quot;language-xml&quot; data-language=&quot;xml&quot;&gt;&lt;code class=&quot;language-xml&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;dependency&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;groupId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;groupId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;artifactId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;spring-boot-starter-data-neo4j&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;artifactId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;dependency&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="Java" scheme="https://jueee.github.io/categories/Java/"/>
    
    <category term="Database" scheme="https://jueee.github.io/categories/Database/"/>
    
    <category term="Neo4j" scheme="https://jueee.github.io/categories/Database/Neo4j/"/>
    
    <category term="Springboot" scheme="https://jueee.github.io/categories/Java/Springboot/"/>
    
    
    <category term="Java" scheme="https://jueee.github.io/tags/Java/"/>
    
    <category term="Neo4j" scheme="https://jueee.github.io/tags/Neo4j/"/>
    
    <category term="Database" scheme="https://jueee.github.io/tags/Database/"/>
    
    <category term="Springboot" scheme="https://jueee.github.io/tags/Springboot/"/>
    
  </entry>
  
  <entry>
    <title>Java 使用 neo4j-java-driver 操作 Neo4j</title>
    <link href="https://jueee.github.io/2021/02/2021-02-09-Java%E4%BD%BF%E7%94%A8neo4j-java-driver%E6%93%8D%E4%BD%9CNeo4j/"/>
    <id>https://jueee.github.io/2021/02/2021-02-09-Java%E4%BD%BF%E7%94%A8neo4j-java-driver%E6%93%8D%E4%BD%9CNeo4j/</id>
    <published>2021-02-08T00:00:00.000Z</published>
    <updated>2021-02-08T08:22:39.218Z</updated>
    
    <content type="html"><![CDATA[<h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/org.neo4j.driver/neo4j-java-driver --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.neo4j.driver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>neo4j-java-driver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></code></pre><a id="more"></a><h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><p>每个 Neo4j 驱动程序都有一个用于创建驱动程序的数据库对象。</p><p>一般按照以下操作步骤：</p><ol><li>向数据库对象请求一个新的驱动程序；</li><li>向驱动程序对象请求一个新会话；</li><li>请求会话对象创建事务；</li><li>使用事务对象运行语句。它返回一个表示结果的对象；</li><li>处理结果；</li><li>关闭会话。</li></ol><p>示例：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Driver</span> driver <span class="token operator">=</span> <span class="token class-name">GraphDatabase</span><span class="token punctuation">.</span><span class="token function">driver</span><span class="token punctuation">(</span><span class="token string">"bolt://127.0.0.1:7687"</span><span class="token punctuation">,</span> <span class="token class-name">AuthTokens</span><span class="token punctuation">.</span><span class="token function">basic</span><span class="token punctuation">(</span><span class="token string">"neo4j"</span><span class="token punctuation">,</span> <span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Session</span> session <span class="token operator">=</span> driver<span class="token punctuation">.</span><span class="token function">session</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">final</span> <span class="token class-name">Result</span> result <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token string">"MATCH (a:Person) RETURN a.name AS name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Record</span> <span class="token keyword">record</span> <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">record</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">asString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>session<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>driver<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="生成-Driver-Session"><a href="#生成-Driver-Session" class="headerlink" title="生成 Driver Session"></a>生成 Driver Session</h3><h4 id="Java-引入"><a href="#Java-引入" class="headerlink" title="Java 引入"></a>Java 引入</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Driver</span> driver <span class="token operator">=</span> <span class="token class-name">GraphDatabase</span><span class="token punctuation">.</span><span class="token function">driver</span><span class="token punctuation">(</span><span class="token string">"bolt://127.0.0.1:7687"</span><span class="token punctuation">,</span> <span class="token class-name">AuthTokens</span><span class="token punctuation">.</span><span class="token function">basic</span><span class="token punctuation">(</span><span class="token string">"neo4j"</span><span class="token punctuation">,</span> <span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">SessionConfig</span> sessionConfig <span class="token operator">=</span> <span class="token class-name">SessionConfig</span><span class="token punctuation">.</span><span class="token function">defaultConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Session</span> session <span class="token operator">=</span> driver<span class="token punctuation">.</span><span class="token function">session</span><span class="token punctuation">(</span>sessionConfig<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="SpringBoot-引入"><a href="#SpringBoot-引入" class="headerlink" title="SpringBoot 引入"></a>SpringBoot 引入</h4><h5 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h5><pre class="language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">neo4j.uri</span><span class="token punctuation">=</span><span class="token attr-value">bolt://127.0.0.1:7687</span><span class="token attr-name">neo4j.username</span><span class="token punctuation">=</span><span class="token attr-value">neo4j</span><span class="token attr-name">neo4j.password</span><span class="token punctuation">=</span><span class="token attr-value">password</span></code></pre><h5 id="配置类"><a href="#配置类" class="headerlink" title="配置类"></a>配置类</h5><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>neo4j<span class="token punctuation">.</span>driver<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Value</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Neo4jConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${neo4j.uri}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> neo4jUri<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${neo4j.username}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> neo4jUsername<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${neo4j.password}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> neo4jPassword<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">Session</span> <span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">Driver</span> driver <span class="token operator">=</span> <span class="token class-name">GraphDatabase</span><span class="token punctuation">.</span><span class="token function">driver</span><span class="token punctuation">(</span>neo4jUri<span class="token punctuation">,</span> <span class="token class-name">AuthTokens</span><span class="token punctuation">.</span><span class="token function">basic</span><span class="token punctuation">(</span>neo4jUsername<span class="token punctuation">,</span> neo4jPassword<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SessionConfig</span> sessionConfig <span class="token operator">=</span> <span class="token class-name">SessionConfig</span><span class="token punctuation">.</span><span class="token function">defaultConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> driver<span class="token punctuation">.</span><span class="token function">session</span><span class="token punctuation">(</span>sessionConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="引入-Session"><a href="#引入-Session" class="headerlink" title="引入 Session"></a>引入 Session</h5><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> <span class="token class-name">Session</span> session<span class="token punctuation">;</span></code></pre><h3 id="执行SQL"><a href="#执行SQL" class="headerlink" title="执行SQL"></a>执行 SQL</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Path</span><span class="token punctuation">&gt;</span></span> <span class="token function">randomPerson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">String</span> searchSQL <span class="token operator">=</span> <span class="token string">"match p=(n:Person)-[t]-&gt;(m) where 1=1 return p limit 20"</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"[searchSQL]"</span><span class="token operator">+</span>searchSQL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Path</span><span class="token punctuation">&gt;</span></span> pathList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Result</span> result <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>searchSQL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span> result<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Record</span> <span class="token keyword">record</span> <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Value</span> value <span class="token operator">=</span> <span class="token keyword">record</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pathList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">asPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"[UseTime]"</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>start<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"ms"</span><span class="token operator">+</span><span class="token string">"[Size]"</span><span class="token operator">+</span>pathList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> pathList<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="执行统计"><a href="#执行统计" class="headerlink" title="执行统计"></a>执行统计</h3><h4 id="汇总节点数量"><a href="#汇总节点数量" class="headerlink" title="汇总节点数量"></a>汇总节点数量</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Long</span> <span class="token function">getNodeCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Long</span> resultNum <span class="token operator">=</span> <span class="token number">0L</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> searchSQL <span class="token operator">=</span> <span class="token string">"match (n:Person) return count(n)"</span><span class="token punctuation">;</span>        <span class="token class-name">Result</span> result <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>searchSQL<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span> result<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Record</span> <span class="token keyword">record</span> <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Value</span> value <span class="token operator">=</span> <span class="token keyword">record</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            resultNum <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">asLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> resultNum<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="汇总关系数量"><a href="#汇总关系数量" class="headerlink" title="汇总关系数量"></a>汇总关系数量</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Long</span> <span class="token function">getRelationshipCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Long</span> resultNum <span class="token operator">=</span> <span class="token number">0L</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> searchSQL <span class="token operator">=</span> <span class="token string">"match p=(n:Person)-[]-&gt;(m:Person) return count(n)"</span><span class="token punctuation">;</span>        <span class="token class-name">Result</span> result <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>searchSQL<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span> result<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Record</span> <span class="token keyword">record</span> <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Value</span> value <span class="token operator">=</span> <span class="token keyword">record</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            resultNum <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">asLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> resultNum<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;引入依赖&quot;&gt;&lt;a href=&quot;#引入依赖&quot; class=&quot;headerlink&quot; title=&quot;引入依赖&quot;&gt;&lt;/a&gt;引入依赖&lt;/h3&gt;&lt;pre class=&quot;language-xml&quot; data-language=&quot;xml&quot;&gt;&lt;code class=&quot;language-xml&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- https://mvnrepository.com/artifact/org.neo4j.driver/neo4j-java-driver --&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;dependency&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
   &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;groupId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;org.neo4j.driver&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;groupId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
   &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;artifactId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;neo4j-java-driver&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;artifactId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
   &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;version&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;4.2.0&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;version&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;dependency&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="Java" scheme="https://jueee.github.io/categories/Java/"/>
    
    <category term="Database" scheme="https://jueee.github.io/categories/Database/"/>
    
    <category term="JavaJar" scheme="https://jueee.github.io/categories/Java/JavaJar/"/>
    
    <category term="Neo4j" scheme="https://jueee.github.io/categories/Database/Neo4j/"/>
    
    
    <category term="Java" scheme="https://jueee.github.io/tags/Java/"/>
    
    <category term="Neo4j" scheme="https://jueee.github.io/tags/Neo4j/"/>
    
    <category term="Database" scheme="https://jueee.github.io/tags/Database/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch 集成 Spring 之 ElasticsearchRestTemplate 示例</title>
    <link href="https://jueee.github.io/2021/02/2021-02-07-ElasticSearch%E9%9B%86%E6%88%90Spring%E4%B9%8BElasticsearchRestTemplate%E7%A4%BA%E4%BE%8B/"/>
    <id>https://jueee.github.io/2021/02/2021-02-07-ElasticSearch%E9%9B%86%E6%88%90Spring%E4%B9%8BElasticsearchRestTemplate%E7%A4%BA%E4%BE%8B/</id>
    <published>2021-02-07T00:00:00.000Z</published>
    <updated>2021-02-08T07:50:11.482Z</updated>
    
    <content type="html"><![CDATA[<h3 id="ElasticsearchRestTemplate"><a href="#ElasticsearchRestTemplate" class="headerlink" title="ElasticsearchRestTemplate"></a>ElasticsearchRestTemplate</h3><p>ElasticsearchRestTemplate 是 spring-data-elasticsearch 项目中的一个类，和其他 spring 项目中的 template 类似。</p><h4 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h4><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-data-elasticsearch<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></code></pre><a id="more"></a><h3 id="使用ElasticsearchRest"><a href="#使用ElasticsearchRest" class="headerlink" title="使用ElasticsearchRest"></a>使用 ElasticsearchRest</h3><ol><li><p>参数配置：</p><pre class="language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">elasticsearch.address</span><span class="token punctuation">=</span><span class="token attr-value">127.0.0.1:9200</span></code></pre></li><li><p>配置引入：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">RestHighLevelClient</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Value</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">ClientConfiguration</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">RestClients</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">ElasticsearchRestTemplate</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ElasticSearchConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${elasticsearch.address}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> elasticSearchAddress<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token class-name">RestHighLevelClient</span> <span class="token function">elasticsearchClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token class-name">ClientConfiguration</span> configuration <span class="token operator">=</span> <span class="token class-name">ClientConfiguration</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">connectedTo</span><span class="token punctuation">(</span>elasticSearchAddress<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">RestHighLevelClient</span> client <span class="token operator">=</span> <span class="token class-name">RestClients</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>configuration<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> client<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token class-name">ElasticsearchRestTemplate</span> <span class="token function">elasticsearchTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ElasticsearchRestTemplate</span><span class="token punctuation">(</span><span class="token function">elasticsearchClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>使用：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token class-name">ElasticsearchRestTemplate</span> elasticsearchTemplate<span class="token punctuation">;</span></code></pre></li></ol><h3 id="常用示例"><a href="#常用示例" class="headerlink" title="常用示例"></a>常用示例</h3><h4 id="索引相关"><a href="#索引相关" class="headerlink" title="索引相关"></a>索引相关</h4><p>创建索引：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> settings <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>settings<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"index.number_of_replicas"</span><span class="token punctuation">,</span> <span class="token string">"30"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> createResult <span class="token operator">=</span> elasticsearchTemplate<span class="token punctuation">.</span><span class="token function">createIndex</span><span class="token punctuation">(</span>clazz<span class="token punctuation">,</span>settings<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>刷新 Mapping：</p><pre class="language-java" data-language="java"><code class="language-java">elasticsearchTemplate<span class="token punctuation">.</span><span class="token function">putMapping</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>elasticsearchTemplate<span class="token punctuation">.</span><span class="token function">refresh</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="新增数据"><a href="#新增数据" class="headerlink" title="新增数据"></a>新增数据</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">IndexQuery</span><span class="token punctuation">&gt;</span></span> queries <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">IndexQuery</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Person</span> test<span class="token operator">:</span>testList<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">IndexQuery</span> indexQuery <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IndexQueryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withId</span><span class="token punctuation">(</span>test<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withObject</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    queries<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>indexQuery<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>elasticsearchTemplate<span class="token punctuation">.</span><span class="token function">bulkIndex</span><span class="token punctuation">(</span>queries<span class="token punctuation">,</span> <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">GetQuery</span> query <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GetQuery</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Person</span> info <span class="token operator">=</span> elasticsearchTemplate<span class="token punctuation">.</span><span class="token function">queryForObject</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;ElasticsearchRestTemplate&quot;&gt;&lt;a href=&quot;#ElasticsearchRestTemplate&quot; class=&quot;headerlink&quot; title=&quot;ElasticsearchRestTemplate&quot;&gt;&lt;/a&gt;ElasticsearchRestTemplate&lt;/h3&gt;&lt;p&gt;ElasticsearchRestTemplate是spring-data-elasticsearch项目中的一个类，和其他spring项目中的template类似。&lt;/p&gt;
&lt;h4 id=&quot;引入依赖&quot;&gt;&lt;a href=&quot;#引入依赖&quot; class=&quot;headerlink&quot; title=&quot;引入依赖&quot;&gt;&lt;/a&gt;引入依赖&lt;/h4&gt;&lt;pre class=&quot;language-xml&quot; data-language=&quot;xml&quot;&gt;&lt;code class=&quot;language-xml&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;dependency&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;groupId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;groupId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;artifactId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;spring-boot-starter-data-elasticsearch&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;artifactId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;dependency&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="Database" scheme="https://jueee.github.io/categories/Database/"/>
    
    <category term="ElasticSearch" scheme="https://jueee.github.io/categories/Database/ElasticSearch/"/>
    
    
    <category term="ElasticSearch" scheme="https://jueee.github.io/tags/ElasticSearch/"/>
    
    <category term="Database" scheme="https://jueee.github.io/tags/Database/"/>
    
  </entry>
  
  <entry>
    <title>Java 判断字符串中是否包含 emoj 表情及过滤</title>
    <link href="https://jueee.github.io/2021/02/2021-02-04-Java%E5%88%A4%E6%96%AD%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E6%98%AF%E5%90%A6%E5%8C%85%E5%90%ABemoj%E8%A1%A8%E6%83%85%E5%8F%8A%E8%BF%87%E6%BB%A4/"/>
    <id>https://jueee.github.io/2021/02/2021-02-04-Java%E5%88%A4%E6%96%AD%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E6%98%AF%E5%90%A6%E5%8C%85%E5%90%ABemoj%E8%A1%A8%E6%83%85%E5%8F%8A%E8%BF%87%E6%BB%A4/</id>
    <published>2021-02-04T00:00:00.000Z</published>
    <updated>2021-02-05T01:31:02.574Z</updated>
    
    <content type="html"><![CDATA[<p>最近遇到一个很麻烦的问题，用户如果在客户端输入表情可能会引起一些报错，在查了一些资料后发现很多坑人的代码，我在总结了之后给出了一个比较完美的版本。 </p><p>亲测可以判断绝大多数表情。</p><a id="more"></a><h3 id="Java-实现"><a href="#Java-实现" class="headerlink" title="Java 实现"></a>Java 实现</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>netease<span class="token punctuation">.</span>mdas<span class="token punctuation">.</span>util</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">StringUtils</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmojiFilter</span> <span class="token punctuation">{</span>    <span class="token comment">/** * 判断字符串是否包含 emoji 或者 其他非文字类型的字符 * @param source * @return */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">containsEmoji</span><span class="token punctuation">(</span><span class="token class-name">String</span> source<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> len <span class="token operator">=</span> source<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> isEmoji <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">char</span> hs <span class="token operator">=</span> source<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0xd800</span> <span class="token operator">&lt;=</span> hs <span class="token operator">&amp;&amp;</span> hs <span class="token operator">&lt;=</span> <span class="token number">0xdbff</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>source<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">char</span> ls <span class="token operator">=</span> source<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> uc <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>hs <span class="token operator">-</span> <span class="token number">0xd800</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0x400</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>ls <span class="token operator">-</span> <span class="token number">0xdc00</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0x10000</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0x1d000</span> <span class="token operator">&lt;=</span> uc <span class="token operator">&amp;&amp;</span> uc <span class="token operator">&lt;=</span> <span class="token number">0x1f77f</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment">// non surrogate</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0x2100</span> <span class="token operator">&lt;=</span> hs <span class="token operator">&amp;&amp;</span> hs <span class="token operator">&lt;=</span> <span class="token number">0x27ff</span> <span class="token operator">&amp;&amp;</span> hs <span class="token operator">!=</span> <span class="token number">0x263b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0x2B05</span> <span class="token operator">&lt;=</span> hs <span class="token operator">&amp;&amp;</span> hs <span class="token operator">&lt;=</span> <span class="token number">0x2b07</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0x2934</span> <span class="token operator">&lt;=</span> hs <span class="token operator">&amp;&amp;</span> hs <span class="token operator">&lt;=</span> <span class="token number">0x2935</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0x3297</span> <span class="token operator">&lt;=</span> hs <span class="token operator">&amp;&amp;</span> hs <span class="token operator">&lt;=</span> <span class="token number">0x3299</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>hs <span class="token operator">==</span> <span class="token number">0xa9</span> <span class="token operator">||</span> hs <span class="token operator">==</span> <span class="token number">0xae</span> <span class="token operator">||</span> hs <span class="token operator">==</span> <span class="token number">0x303d</span> <span class="token operator">||</span> hs <span class="token operator">==</span> <span class="token number">0x3030</span> <span class="token operator">||</span> hs <span class="token operator">==</span> <span class="token number">0x2b55</span> <span class="token operator">||</span> hs <span class="token operator">==</span> <span class="token number">0x2b1c</span><span class="token operator">||</span> hs <span class="token operator">==</span> <span class="token number">0x2b1b</span> <span class="token operator">||</span> hs <span class="token operator">==</span> <span class="token number">0x2b50</span> <span class="token operator">||</span> hs <span class="token operator">==</span> <span class="token number">0x231a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isEmoji <span class="token operator">&amp;&amp;</span> source<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> source<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">char</span> ls <span class="token operator">=</span> source<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>ls <span class="token operator">==</span> <span class="token number">0x20e3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> isEmoji<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isEmojiCharacter</span><span class="token punctuation">(</span><span class="token keyword">char</span> codePoint<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token punctuation">(</span>codePoint <span class="token operator">==</span> <span class="token number">0x0</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>codePoint <span class="token operator">==</span> <span class="token number">0x9</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>codePoint <span class="token operator">==</span> <span class="token number">0xA</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>codePoint <span class="token operator">==</span> <span class="token number">0xD</span><span class="token punctuation">)</span><span class="token operator">||</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>codePoint <span class="token operator">&gt;=</span> <span class="token number">0x20</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>codePoint <span class="token operator">&lt;=</span> <span class="token number">0xD7FF</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>codePoint <span class="token operator">&gt;=</span> <span class="token number">0xE000</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>codePoint <span class="token operator">&lt;=</span> <span class="token number">0xFFFD</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">||</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>codePoint <span class="token operator">&gt;=</span> <span class="token number">0x10000</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>codePoint <span class="token operator">&lt;=</span> <span class="token number">0x10FFFF</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/** * 过滤emoji 或者 其他非文字类型的字符 *  * @param source * @return */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">filterEmoji</span><span class="token punctuation">(</span><span class="token class-name">String</span> source<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> source<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">StringBuilder</span> buf <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">int</span> len <span class="token operator">=</span> source<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">char</span> codePoint <span class="token operator">=</span> source<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmojiCharacter</span><span class="token punctuation">(</span>codePoint<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>buf <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span>source<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>buf<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>codePoint<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>buf <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> source<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>buf<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>buf <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">return</span> source<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token keyword">return</span> buf<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="测试效果"><a href="#测试效果" class="headerlink" title="测试效果"></a>测试效果</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">containsEmoji</span><span class="token punctuation">(</span><span class="token string">"U+FE004⚡"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">containsEmoji</span><span class="token punctuation">(</span><span class="token string">"@netease.com"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近遇到一个很麻烦的问题，用户如果在客户端输入表情可能会引起一些报错，在查了一些资料后发现很多坑人的代码，我在总结了之后给出了一个比较完美的版本。 &lt;/p&gt;
&lt;p&gt;亲测可以判断绝大多数表情。&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://jueee.github.io/categories/Java/"/>
    
    <category term="JavaClass" scheme="https://jueee.github.io/categories/Java/JavaClass/"/>
    
    
    <category term="JavaClass" scheme="https://jueee.github.io/tags/JavaClass/"/>
    
    <category term="Java" scheme="https://jueee.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Spring AOP 拦截注解接口的所有方法</title>
    <link href="https://jueee.github.io/2021/01/2021-01-29-SpringAOP%E6%8B%A6%E6%88%AA%E6%B3%A8%E8%A7%A3%E6%8E%A5%E5%8F%A3%E7%9A%84%E6%89%80%E6%9C%89%E6%96%B9%E6%B3%95/"/>
    <id>https://jueee.github.io/2021/01/2021-01-29-SpringAOP%E6%8B%A6%E6%88%AA%E6%B3%A8%E8%A7%A3%E6%8E%A5%E5%8F%A3%E7%9A%84%E6%89%80%E6%9C%89%E6%96%B9%E6%B3%95/</id>
    <published>2021-01-29T00:00:00.000Z</published>
    <updated>2021-01-29T05:35:50.331Z</updated>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>MyBatis 多源数据库切换问题，希望通过注解标注 Dao 类的数据库源，但使用注解切点表达式，因实现类是 MyBatis 动态代理生成，无法在实现类上添加注解，而添加到接口上又无效，需要寻找替代方案。</p><a id="more"></a><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>不采用 AspectJ 表达式方式定义切点和切面，使用 AnnotationMatchingPointcut 和 DefaultPointcutAdvisor 来定义。</p><h3 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h3><p>示例代码如下，将 ChangeMySqlType 注解添加到接口上，即可拦截实现类的方法。</p><h4 id="类注解"><a href="#类注解" class="headerlink" title="类注解"></a>类注解</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ElementType</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Retention</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Target</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">ChangeMySqlType</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h4 id="Aspect-实现"><a href="#Aspect-实现" class="headerlink" title="Aspect 实现"></a>Aspect 实现</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>aopalliance<span class="token punctuation">.</span>aop<span class="token punctuation">.</span></span><span class="token class-name">Advice</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Aspect</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>aop<span class="token punctuation">.</span></span><span class="token class-name">Advisor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>aop<span class="token punctuation">.</span></span><span class="token class-name">Pointcut</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span><span class="token class-name">DefaultPointcutAdvisor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>support<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">AnnotationMatchingPointcut</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Order</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Aspect</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChangeMySqlTypeAspect</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">DataBasesConfig</span> dataBasesConfig<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">Advisor</span> <span class="token function">dataSourceAdvisor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">Pointcut</span> pointcut <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationMatchingPointcut</span><span class="token punctuation">(</span><span class="token class-name">ChangeMySqlType</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Advice</span> advice <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MethodAroundAdvice</span><span class="token punctuation">(</span>dataBasesConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DefaultPointcutAdvisor</span><span class="token punctuation">(</span>pointcut<span class="token punctuation">,</span> advice<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="Advice-实现"><a href="#Advice-实现" class="headerlink" title="Advice 实现"></a>Advice 实现</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>aop<span class="token punctuation">.</span></span><span class="token class-name">AfterReturningAdvice</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>aop<span class="token punctuation">.</span></span><span class="token class-name">MethodBeforeAdvice</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MethodAroundAdvice</span> <span class="token keyword">implements</span> <span class="token class-name">MethodBeforeAdvice</span><span class="token punctuation">,</span> <span class="token class-name">AfterReturningAdvice</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">DataBasesConfig</span> dataBasesConfig<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">MethodAroundAdvice</span><span class="token punctuation">(</span><span class="token class-name">DataBasesConfig</span> dataBasesConfig<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>dataBasesConfig <span class="token operator">=</span> dataBasesConfig<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">,</span> <span class="token class-name">Object</span> target<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"before {} called"</span><span class="token punctuation">,</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterReturning</span><span class="token punctuation">(</span><span class="token class-name">Object</span> returnValue<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">,</span> <span class="token class-name">Object</span> target<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"after {} called"</span><span class="token punctuation">,</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;MyBatis 多源数据库切换问题，希望通过注解标注 Dao 类的数据库源，但使用注解切点表达式，因实现类是 MyBatis 动态代理生成，无法在实现类上添加注解，而添加到接口上又无效，需要寻找替代方案。&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://jueee.github.io/categories/Java/"/>
    
    <category term="Spring" scheme="https://jueee.github.io/categories/Java/Spring/"/>
    
    
    <category term="Java" scheme="https://jueee.github.io/tags/Java/"/>
    
    <category term="Spring" scheme="https://jueee.github.io/tags/Spring/"/>
    
    <category term="AOP" scheme="https://jueee.github.io/tags/AOP/"/>
    
  </entry>
  
  <entry>
    <title>自定义 element-ui 的 table 表格数据样式</title>
    <link href="https://jueee.github.io/2021/01/2021-01-25-%E8%87%AA%E5%AE%9A%E4%B9%89element-ui%E7%9A%84table%E8%A1%A8%E6%A0%BC%E6%95%B0%E6%8D%AE%E6%A0%B7%E5%BC%8F/"/>
    <id>https://jueee.github.io/2021/01/2021-01-25-%E8%87%AA%E5%AE%9A%E4%B9%89element-ui%E7%9A%84table%E8%A1%A8%E6%A0%BC%E6%95%B0%E6%8D%AE%E6%A0%B7%E5%BC%8F/</id>
    <published>2021-01-25T00:00:00.000Z</published>
    <updated>2021-01-28T09:01:42.658Z</updated>
    
    <content type="html"><![CDATA[<p>有需要根据不同状态来区分 table 数据样式的需求，比如更换不同的颜色。</p><a id="more"></a><h3 id="原始状态"><a href="#原始状态" class="headerlink" title="原始状态"></a>原始状态</h3><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table</span> <span class="token attr-name">:data</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tableData<span class="token punctuation">"</span></span> <span class="token attr-name">border</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span> 70%</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">fixed</span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>编号<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>图书名<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>120<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>author<span class="token punctuation">"</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>作者<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>120<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>status<span class="token punctuation">"</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>状态<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>120<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table</span><span class="token punctuation">&gt;</span></span></code></pre><p><img src="/images/2021/01/image-20210125184037289.png" alt="image-20210125184037289" loading="lazy"></p><h3 id="方案一：简单判断"><a href="#方案一：简单判断" class="headerlink" title="方案一：简单判断"></a>方案一：简单判断</h3><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table</span> <span class="token attr-name">:data</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tableData<span class="token punctuation">"</span></span> <span class="token attr-name">border</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span> 70%</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">fixed</span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>编号<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>图书名<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>120<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>author<span class="token punctuation">"</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>作者<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>120<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>status<span class="token punctuation">"</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>状态<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>120<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot-scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>scope<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>scope.row.status === <span class="token punctuation">'</span>1<span class="token punctuation">'</span><span class="token punctuation">"</span></span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>green<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>已收藏<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">v-else-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>scope.row.status === <span class="token punctuation">'</span>2<span class="token punctuation">'</span><span class="token punctuation">"</span></span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>red<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>正阅读<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">v-else</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>blue<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>已读完<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table</span><span class="token punctuation">&gt;</span></span></code></pre><p>效果：</p><p><img src="/images/2021/01/image-20210125192704801.png" alt="image-20210125192704801" loading="lazy"></p><h3 id="方案二：cell-style"><a href="#方案二：cell-style" class="headerlink" title="方案二：cell-style"></a>方案二：cell-style</h3><p><span class="exturl" data-url="aHR0cHM6Ly9lbGVtZW50LmVsZW1lLmNuLyMvemgtQ04vY29tcG9uZW50L3RhYmxl">elementUI 文档<i class="fa fa-external-link-alt"></i></span>，有个 cell-style 的属性，可以通过回调，返回样式。</p><p><img src="/images/2021/01/image-20210125192415426.png" alt="image-20210125192415426" loading="lazy"></p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table</span> <span class="token attr-name">:data</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tableData<span class="token punctuation">"</span></span> <span class="token attr-name">border</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span> max-content<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span> <span class="token attr-name">:cell-</span><span class="token style-attr language-css"><span class="token attr-name"><span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value">cellStyle</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">fixed</span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>编号<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>图书名<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>120<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>author<span class="token punctuation">"</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>作者<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>120<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>status<span class="token punctuation">"</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>状态<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>120<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table</span><span class="token punctuation">&gt;</span></span></code></pre><p>其中：</p><pre class="language-js" data-language="js"><code class="language-js">methods<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token function">cellStyle</span><span class="token punctuation">(</span><span class="token parameter">row<span class="token punctuation">,</span>column<span class="token punctuation">,</span>rowIndex<span class="token punctuation">,</span>columnIndex</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">// console.log(row);</span>        <span class="token comment">// console.log(row.column);</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>row<span class="token punctuation">.</span>column<span class="token punctuation">.</span>label<span class="token operator">===</span><span class="token string">"状态"</span> <span class="token operator">&amp;&amp;</span> row<span class="token punctuation">.</span>row<span class="token punctuation">.</span>status<span class="token operator">===</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"color:green"</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>row<span class="token punctuation">.</span>column<span class="token punctuation">.</span>label<span class="token operator">===</span><span class="token string">"状态"</span> <span class="token operator">&amp;&amp;</span> row<span class="token punctuation">.</span>row<span class="token punctuation">.</span>status<span class="token operator">===</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">'color:red'</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>row<span class="token punctuation">.</span>column<span class="token punctuation">.</span>label<span class="token operator">===</span><span class="token string">"状态"</span> <span class="token operator">&amp;&amp;</span> row<span class="token punctuation">.</span>row<span class="token punctuation">.</span>status<span class="token operator">===</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">'color:blue'</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><p>效果：</p><p><img src="/images/2021/01/image-20210125192823150.png" alt="image-20210125192823150" loading="lazy"></p><h3 id="方案三：row-class-name"><a href="#方案三：row-class-name" class="headerlink" title="方案三：row-class-name"></a>方案三：row-class-name</h3><p><span class="exturl" data-url="aHR0cHM6Ly9lbGVtZW50LmVsZW1lLmNuLyMvemgtQ04vY29tcG9uZW50L3RhYmxl">elementUI 文档<i class="fa fa-external-link-alt"></i></span>，有个 row-class-name 的属性，可以通过回调，返回 Class。</p><p><img src="/images/2021/01/image-20210127100913363.png" alt="image-20210127100913363" loading="lazy"></p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table</span> <span class="token attr-name">:data</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tableData<span class="token punctuation">"</span></span> <span class="token attr-name">border</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span> max-content<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span> <span class="token attr-name">:row-class-name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tableRowClassName<span class="token punctuation">"</span></span> <span class="token attr-name">:header-cell-</span><span class="token style-attr language-css"><span class="token attr-name"><span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value">getRowClass</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">fixed</span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>编号<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>图书名<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>120<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>author<span class="token punctuation">"</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>作者<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>120<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>status<span class="token punctuation">"</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>状态<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>120<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table</span><span class="token punctuation">&gt;</span></span></code></pre><p>其中：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">getRowClass</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> rowIndex <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 为表格头行添加样式</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>rowIndex <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">'background:#ebeaef'</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">''</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function">tableRowClassName</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> row<span class="token punctuation">,</span> rowIndex <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 为表格行添加样式</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>rowIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">'double'</span>　　<span class="token comment">//  基数行对应的类</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">'single'</span>　　<span class="token comment">//  偶数行对应的类</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>样式如下：</p><pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">.double</span> <span class="token punctuation">{</span>  <span class="token property">background</span><span class="token punctuation">:</span> #e9a7a7 <span class="token important">!important</span><span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.single</span> <span class="token punctuation">{</span>  <span class="token property">background</span><span class="token punctuation">:</span> #9ebce9 <span class="token important">!important</span><span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>效果：</p><p><img src="/images/2021/01/image-20210127101205407.png" alt="image-20210127101205407" loading="lazy"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;有需要根据不同状态来区分 table 数据样式的需求，比如更换不同的颜色。&lt;/p&gt;</summary>
    
    
    
    <category term="Vue" scheme="https://jueee.github.io/categories/Vue/"/>
    
    
    <category term="Vue" scheme="https://jueee.github.io/tags/Vue/"/>
    
    <category term="elementUI" scheme="https://jueee.github.io/tags/elementUI/"/>
    
  </entry>
  
  <entry>
    <title>Java 实现 SM3 加密算法</title>
    <link href="https://jueee.github.io/2021/01/2021-01-21-Java%E5%AE%9E%E7%8E%B0SM3%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/"/>
    <id>https://jueee.github.io/2021/01/2021-01-21-Java%E5%AE%9E%E7%8E%B0SM3%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/</id>
    <published>2021-01-21T00:00:00.000Z</published>
    <updated>2021-01-21T11:00:45.576Z</updated>
    
    <content type="html"><![CDATA[<h3 id="SM3-介绍"><a href="#SM3-介绍" class="headerlink" title="SM3 介绍"></a>SM3 介绍</h3><p>SM3 是中华人民共和国政府采用的一种密码散列函数标准，由国家密码管理局于 2010 年 12 月 17 日发布。相关标准为 “GM/T 0004-2012 《SM3 密码杂凑算法》”。</p><p>在商用密码体系中，SM3 主要用于数字签名及验证、消息认证码生成及验证、随机数生成等，其算法公开。</p><p>据国家密码管理局表示，其安全性及效率与 SHA-256 相当。</p><a id="more"></a><h3 id="依赖引入"><a href="#依赖引入" class="headerlink" title="依赖引入"></a>依赖引入</h3><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/org.bouncycastle/bcprov-jdk15on --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.bouncycastle<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>bcprov-jdk15on<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.68<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></code></pre><h3 id="加密实现"><a href="#加密实现" class="headerlink" title="加密实现"></a>加密实现</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>bouncycastle<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>digests<span class="token punctuation">.</span></span><span class="token class-name">SM3Digest</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>bouncycastle<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>macs<span class="token punctuation">.</span></span><span class="token class-name">HMac</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>bouncycastle<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>params<span class="token punctuation">.</span></span><span class="token class-name">KeyParameter</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>bouncycastle<span class="token punctuation">.</span>jce<span class="token punctuation">.</span>provider<span class="token punctuation">.</span></span><span class="token class-name">BouncyCastleProvider</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>bouncycastle<span class="token punctuation">.</span>pqc<span class="token punctuation">.</span>math<span class="token punctuation">.</span>linearalgebra<span class="token punctuation">.</span></span><span class="token class-name">ByteUtils</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">UnsupportedEncodingException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span></span><span class="token class-name">Security</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Sm3Utils</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> ENCODING <span class="token operator">=</span> <span class="token string">"UTF-8"</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token class-name">Security</span><span class="token punctuation">.</span><span class="token function">addProvider</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BouncyCastleProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * sm3算法加密     * @explain     * @param paramStr     *            待加密字符串     * @return 返回加密后，固定长度=32的16进制字符串     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">encrypt</span><span class="token punctuation">(</span><span class="token class-name">String</span> paramStr<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">// 将返回的hash值转换成16进制字符串</span>        <span class="token class-name">String</span> resultHexString <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment">// 将字符串转换成byte数组</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> srcData <span class="token operator">=</span> paramStr<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span>ENCODING<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 调用hash()</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> resultHash <span class="token operator">=</span> <span class="token function">hash</span><span class="token punctuation">(</span>srcData<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 将返回的hash值转换成16进制字符串</span>            resultHexString <span class="token operator">=</span> <span class="token class-name">ByteUtils</span><span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span>resultHash<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UnsupportedEncodingException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> resultHexString<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 返回长度=32的byte数组     * @explain 生成对应的hash值     * @param srcData     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">hash</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> srcData<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SM3Digest</span> digest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SM3Digest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        digest<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>srcData<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> srcData<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> hash <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>digest<span class="token punctuation">.</span><span class="token function">getDigestSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        digest<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> hash<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * sm3算法加密     * @explain     * @param paramStr     *            待加密字符串     * @param key     *            密钥     * @return 返回加密后，固定长度=32的16进制字符串     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">encryptPlus</span><span class="token punctuation">(</span><span class="token class-name">String</span> paramStr<span class="token punctuation">,</span><span class="token class-name">String</span> key<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">// 将返回的hash值转换成16进制字符串</span>        <span class="token class-name">String</span> resultHexString <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment">// 将字符串转换成byte数组</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> srcData <span class="token operator">=</span> paramStr<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span>ENCODING<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 调用hash()</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> resultHash <span class="token operator">=</span> <span class="token function">hmac</span><span class="token punctuation">(</span>srcData<span class="token punctuation">,</span>key<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span>ENCODING<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 将返回的hash值转换成16进制字符串</span>            resultHexString <span class="token operator">=</span> <span class="token class-name">ByteUtils</span><span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span>resultHash<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UnsupportedEncodingException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> resultHexString<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 通过密钥进行加密     * @explain 指定密钥进行加密     * @param key     *            密钥     * @param srcData     *            被加密的byte数组     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">hmac</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> key<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> srcData<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">KeyParameter</span> keyParameter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KeyParameter</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SM3Digest</span> digest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SM3Digest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HMac</span> mac <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HMac</span><span class="token punctuation">(</span>digest<span class="token punctuation">)</span><span class="token punctuation">;</span>        mac<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>keyParameter<span class="token punctuation">)</span><span class="token punctuation">;</span>        mac<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>srcData<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> srcData<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>mac<span class="token punctuation">.</span><span class="token function">getMacSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        mac<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 判断源数据与加密数据是否一致     * @explain 通过验证原数组和生成的hash数组是否为同一数组，验证2者是否为同一数据     * @param srcStr     *            原字符串     * @param sm3HexString     *            16进制字符串     * @return 校验结果     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">verify</span><span class="token punctuation">(</span><span class="token class-name">String</span> srcStr<span class="token punctuation">,</span> <span class="token class-name">String</span> sm3HexString<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> srcData <span class="token operator">=</span> srcStr<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span>ENCODING<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sm3Hash <span class="token operator">=</span> <span class="token class-name">ByteUtils</span><span class="token punctuation">.</span><span class="token function">fromHexString</span><span class="token punctuation">(</span>sm3HexString<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> newHash <span class="token operator">=</span> <span class="token function">hash</span><span class="token punctuation">(</span>srcData<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>newHash<span class="token punctuation">,</span> sm3Hash<span class="token punctuation">)</span><span class="token punctuation">)</span>                flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UnsupportedEncodingException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> flag<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> json <span class="token operator">=</span> <span class="token string">"Jueee"</span><span class="token punctuation">;</span><span class="token class-name">String</span> hex <span class="token operator">=</span> <span class="token class-name">Sm3Utils</span><span class="token punctuation">.</span><span class="token function">encryptPlus</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// d11ac47784d8c304588a191dc73dadf46cfe9b096aabeeb79d2b41335323ec53</span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;SM3-介绍&quot;&gt;&lt;a href=&quot;#SM3-介绍&quot; class=&quot;headerlink&quot; title=&quot;SM3 介绍&quot;&gt;&lt;/a&gt;SM3 介绍&lt;/h3&gt;&lt;p&gt;SM3 是中华人民共和国政府采用的一种密码散列函数标准，由国家密码管理局于 2010 年 12 月 17 日发布。相关标准为 “GM/T 0004-2012 《SM3 密码杂凑算法》”。&lt;/p&gt;
&lt;p&gt;在商用密码体系中，SM3 主要用于数字签名及验证、消息认证码生成及验证、随机数生成等，其算法公开。&lt;/p&gt;
&lt;p&gt;据国家密码管理局表示，其安全性及效率与 SHA-256 相当。&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://jueee.github.io/categories/Java/"/>
    
    <category term="JavaJar" scheme="https://jueee.github.io/categories/Java/JavaJar/"/>
    
    
    <category term="Java" scheme="https://jueee.github.io/tags/Java/"/>
    
    <category term="JavaJar" scheme="https://jueee.github.io/tags/JavaJar/"/>
    
  </entry>
  
  <entry>
    <title>Excel 文件导出工具 EasyExcel</title>
    <link href="https://jueee.github.io/2021/01/2021-01-20-Excel%E6%96%87%E4%BB%B6%E5%AF%BC%E5%87%BA%E5%B7%A5%E5%85%B7EasyExcel/"/>
    <id>https://jueee.github.io/2021/01/2021-01-20-Excel%E6%96%87%E4%BB%B6%E5%AF%BC%E5%87%BA%E5%B7%A5%E5%85%B7EasyExcel/</id>
    <published>2021-01-20T00:00:00.000Z</published>
    <updated>2021-01-21T02:49:42.928Z</updated>
    
    <content type="html"><![CDATA[<h3 id="EasyExcel"><a href="#EasyExcel" class="headerlink" title="EasyExcel"></a>EasyExcel</h3><p>EasyExcel 是阿里巴巴开源的一个 excel 处理框架，以使用简单、节省内存著称。</p><ul><li>使用说明：<span class="exturl" data-url="aHR0cHM6Ly93d3cueXVxdWUuY29tL2Vhc3lleGNlbC9kb2MvZWFzeWV4Y2Vs">https://www.yuque.com/easyexcel/doc/easyexcel<i class="fa fa-external-link-alt"></i></span></li><li>GitHub：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvZWFzeWV4Y2Vs">https://github.com/alibaba/easyexcel<i class="fa fa-external-link-alt"></i></span></li></ul><a id="more"></a><h4 id="EasyExcel-引入"><a href="#EasyExcel-引入" class="headerlink" title="EasyExcel 引入"></a>EasyExcel 引入</h4><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/easyexcel --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>easyexcel<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.2.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></code></pre><h3 id="EasyExcel-注解"><a href="#EasyExcel-注解" class="headerlink" title="EasyExcel 注解"></a>EasyExcel 注解</h3><p>官方 API：<span class="exturl" data-url="aHR0cHM6Ly93d3cueXVxdWUuY29tL2Vhc3lleGNlbC9kb2MvYXBp">https://www.yuque.com/easyexcel/doc/api<i class="fa fa-external-link-alt"></i></span></p><h4 id="类注解"><a href="#类注解" class="headerlink" title="类注解"></a>类注解</h4><h5 id="表头高度"><a href="#表头高度" class="headerlink" title="表头高度"></a>表头高度</h5><pre class="language-none"><code class="language-none">@HeadRowHeight(int)：</code></pre><h5 id="内容高度"><a href="#内容高度" class="headerlink" title="内容高度"></a>内容高度</h5><pre class="language-none"><code class="language-none">@ContentRowHeight(int):</code></pre><h4 id="属性注解"><a href="#属性注解" class="headerlink" title="属性注解"></a>属性注解</h4><h5 id="忽略字段"><a href="#忽略字段" class="headerlink" title="忽略字段"></a>忽略字段</h5><p>@ExcelIgnore：默认所有字段都会写入 excel，这个注解会忽略这个字段</p><h5 id="表头信息"><a href="#表头信息" class="headerlink" title="表头信息"></a>表头信息</h5><pre class="language-none"><code class="language-none">@ExcelProperty(value = String[], index = int):value: 指定写入的名称，默认成员变量的名字。index: 指定写到第几列，默认根据成员变量排序。</code></pre><h5 id="设置列宽"><a href="#设置列宽" class="headerlink" title="设置列宽"></a>设置列宽</h5><pre class="language-none"><code class="language-none">@ColumnWidth(int)：int</code></pre><h3 id="项目代码"><a href="#项目代码" class="headerlink" title="项目代码"></a>项目代码</h3><p>本文完整项目代码位于：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0p1ZWVlL2Jsb2ctcHJvamVjdC90cmVlL21haW4vYWxpYmFiYS1lYXN5ZXhjZWw=">https://github.com/Jueee/blog-project/tree/main/alibaba-easyexcel<i class="fa fa-external-link-alt"></i></span></p><h3 id="EasyExcel-导出示例"><a href="#EasyExcel-导出示例" class="headerlink" title="EasyExcel 导出示例"></a>EasyExcel 导出示例</h3><h4 id="Bean"><a href="#Bean" class="headerlink" title="Bean"></a>Bean</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>excel<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ExcelIgnore</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>excel<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ExcelProperty</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>excel<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>write<span class="token punctuation">.</span>style<span class="token punctuation">.</span></span><span class="token class-name">ColumnWidth</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>excel<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>write<span class="token punctuation">.</span>style<span class="token punctuation">.</span></span><span class="token class-name">ContentRowHeight</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>excel<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>write<span class="token punctuation">.</span>style<span class="token punctuation">.</span></span><span class="token class-name">HeadRowHeight</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>persistence<span class="token punctuation">.</span></span><span class="token class-name">GeneratedValue</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>persistence<span class="token punctuation">.</span></span><span class="token class-name">Id</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>persistence<span class="token punctuation">.</span></span><span class="token class-name">Table</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@HeadRowHeight</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ContentRowHeight</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"book"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Book</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Id</span>    <span class="token annotation punctuation">@GeneratedValue</span><span class="token punctuation">(</span>generator <span class="token operator">=</span> <span class="token string">"JDBC"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ColumnWidth</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ExcelProperty</span><span class="token punctuation">(</span><span class="token string">"书名"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ColumnWidth</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ExcelProperty</span><span class="token punctuation">(</span><span class="token string">"作者"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> author<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ColumnWidth</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ExcelProperty</span><span class="token punctuation">(</span><span class="token string">"出版社"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> publish<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> pages<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Double</span> price<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ExcelIgnore</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> bookcaseid<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ExcelIgnore</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> abled<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"downloadBooks"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">downloadBooks</span><span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>    response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"application/vnd.ms-excel"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    response<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 这里URLEncoder.encode可以防止中文乱码 当然和easyexcel没有关系</span>    <span class="token class-name">String</span> fileName <span class="token operator">=</span> <span class="token class-name">URLEncoder</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"测试"</span><span class="token punctuation">,</span> <span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"\\+"</span><span class="token punctuation">,</span> <span class="token string">"%20"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Content-disposition"</span><span class="token punctuation">,</span> <span class="token string">"attachment;filename*=utf-8''"</span> <span class="token operator">+</span> fileName <span class="token operator">+</span> <span class="token string">".xlsx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">&gt;</span></span> bookList <span class="token operator">=</span> bookService<span class="token punctuation">.</span><span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">EasyExcel</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Book</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sheet</span><span class="token punctuation">(</span><span class="token string">"模板"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doWrite</span><span class="token punctuation">(</span>bookList<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h4><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-success<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>downloadBooks()<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>glyphicon glyphicon-circle-arrow-down<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">&gt;</span></span> 下载<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span></code></pre><h4 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h4><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">downloadBooks</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    window<span class="token punctuation">.</span>location<span class="token operator">=</span><span class="token string">"downloadBooks"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="下载效果"><a href="#下载效果" class="headerlink" title="下载效果"></a>下载效果</h4><p>进行下载：</p><p><img src="/images/2021/01/image-20210120171826187.png" alt="image-20210120171826187" loading="lazy"></p><p>打开文件：</p><p><img src="/images/2021/01/image-20210120171748715.png" alt="image-20210120171748715" loading="lazy"></p><h3 id="EasyExcel-导入示例"><a href="#EasyExcel-导入示例" class="headerlink" title="EasyExcel 导入示例"></a>EasyExcel 导入示例</h3><h4 id="Bean-1"><a href="#Bean-1" class="headerlink" title="Bean"></a>Bean</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>excel<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ExcelIgnore</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>excel<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ExcelProperty</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>excel<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>write<span class="token punctuation">.</span>style<span class="token punctuation">.</span></span><span class="token class-name">ColumnWidth</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>excel<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>write<span class="token punctuation">.</span>style<span class="token punctuation">.</span></span><span class="token class-name">ContentRowHeight</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>excel<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>write<span class="token punctuation">.</span>style<span class="token punctuation">.</span></span><span class="token class-name">HeadRowHeight</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>persistence<span class="token punctuation">.</span></span><span class="token class-name">GeneratedValue</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>persistence<span class="token punctuation">.</span></span><span class="token class-name">Id</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>persistence<span class="token punctuation">.</span></span><span class="token class-name">Table</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@HeadRowHeight</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ContentRowHeight</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"book"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Book</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Id</span>    <span class="token annotation punctuation">@GeneratedValue</span><span class="token punctuation">(</span>generator <span class="token operator">=</span> <span class="token string">"JDBC"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ColumnWidth</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ExcelProperty</span><span class="token punctuation">(</span><span class="token string">"书名"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ColumnWidth</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ExcelProperty</span><span class="token punctuation">(</span><span class="token string">"作者"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> author<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ColumnWidth</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ExcelProperty</span><span class="token punctuation">(</span><span class="token string">"出版社"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> publish<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> pages<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Double</span> price<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ExcelIgnore</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> bookcaseid<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ExcelIgnore</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> abled<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="Controller-1"><a href="#Controller-1" class="headerlink" title="Controller"></a>Controller</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"uploadBooks"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ResponseBody</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">uploadBooks</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"file"</span><span class="token punctuation">)</span> <span class="token class-name">MultipartFile</span> file<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"init uploadBooks..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">EasyExcel</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Book</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BookListener</span><span class="token punctuation">(</span>bookMapper<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sheet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="Listener"><a href="#Listener" class="headerlink" title="Listener"></a>Listener</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>excel<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">AnalysisContext</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>excel<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token class-name">AnalysisEventListener</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>jueee<span class="token punctuation">.</span>domain<span class="token punctuation">.</span></span><span class="token class-name">Book</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>jueee<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span></span><span class="token class-name">BookMapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token comment">/** * 模板的读取类 * 有个很重要的点 DemoDataListener 不能被spring管理，要每次读取excel都要new,然后里面用到spring可以构造方法传进去 */</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BookListener</span> <span class="token keyword">extends</span> <span class="token class-name">AnalysisEventListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 每隔5条存储数据库，实际使用中可以3000条，然后清理list ，方便内存回收     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> BATCH_COUNT <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 假设这个是一个DAO，当然有业务逻辑这个也可以是一个service。当然如果不用存储这个对象没用。     */</span>    <span class="token keyword">private</span> <span class="token class-name">BookMapper</span> bookMapper<span class="token punctuation">;</span>    <span class="token comment">/**     * 如果使用了spring,请使用这个构造方法。每次创建Listener的时候需要把spring管理的类传进来     * @param bookMapper     */</span>    <span class="token keyword">public</span> <span class="token class-name">BookListener</span><span class="token punctuation">(</span><span class="token class-name">BookMapper</span> bookMapper<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>bookMapper <span class="token operator">=</span> bookMapper<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 这个每一条数据解析都会来调用     * @param data     *            one row value. Is is same as {@link AnalysisContext#readRowHolder()}     * @param context     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Book</span> data<span class="token punctuation">,</span> <span class="token class-name">AnalysisContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"解析到一条数据:{}"</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 达到BATCH_COUNT了，需要去存储一次数据库，防止数据几万条数据在内存，容易OOM</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> BATCH_COUNT<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">saveData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 存储完成清理 list</span>            list<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 所有数据解析完成了 都会来调用     *     * @param context     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doAfterAllAnalysed</span><span class="token punctuation">(</span><span class="token class-name">AnalysisContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 这里也要保存数据，确保最后遗留的数据也存储到数据库</span>        <span class="token function">saveData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"所有数据解析完成！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 加上存储数据库     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">saveData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"{}条数据，开始存储数据库！"</span><span class="token punctuation">,</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>t<span class="token operator">-&gt;</span><span class="token punctuation">{</span>            t<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bookMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"存储数据库成功！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="HTML-1"><a href="#HTML-1" class="headerlink" title="HTML"></a>HTML</h4><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-horizontal<span class="token punctuation">"</span></span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>uploadBooksForm<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>uploadBooks<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>input-b2<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">data-show-preview</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-success<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>glyphicon glyphicon-plus<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">&gt;</span></span> 上传<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span></code></pre><p>使用 bootstrap 美化：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/bootstrap@3.3.7/dist/css/bootstrap.min.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdnjs.cloudflare.com/ajax/libs/bootstrap-fileinput/5.1.4/css/fileinput.min.css<span class="token punctuation">"</span></span> <span class="token attr-name">media</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>all<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdnjs.cloudflare.com/ajax/libs/bootstrap-fileinput/5.1.4/js/fileinput.min.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-horizontal<span class="token punctuation">"</span></span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>uploadBooksForm<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>uploadBooks<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span>500px</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>input-b2<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">data-show-preview</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-success<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>glyphicon glyphicon-plus<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">&gt;</span></span> 上传<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span></code></pre><p><img src="/images/2021/01/image-20210121104627269.png" alt="image-20210121104627269" loading="lazy"></p><h4 id="上传效果"><a href="#上传效果" class="headerlink" title="上传效果"></a>上传效果</h4><p><img src="/images/2021/01/image-20210121104901268.png" alt="image-20210121104901268" loading="lazy"></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;EasyExcel&quot;&gt;&lt;a href=&quot;#EasyExcel&quot; class=&quot;headerlink&quot; title=&quot;EasyExcel&quot;&gt;&lt;/a&gt;EasyExcel&lt;/h3&gt;&lt;p&gt;EasyExcel 是阿里巴巴开源的一个 excel 处理框架，以使用简单、节省内存著称。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用说明：&lt;a href=&quot;https://www.yuque.com/easyexcel/doc/easyexcel&quot;&gt;https://www.yuque.com/easyexcel/doc/easyexcel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;GitHub：&lt;a href=&quot;https://github.com/alibaba/easyexcel&quot;&gt;https://github.com/alibaba/easyexcel&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Java" scheme="https://jueee.github.io/categories/Java/"/>
    
    <category term="JavaJar" scheme="https://jueee.github.io/categories/Java/JavaJar/"/>
    
    
    <category term="Java" scheme="https://jueee.github.io/tags/Java/"/>
    
    <category term="JavaJar" scheme="https://jueee.github.io/tags/JavaJar/"/>
    
    <category term="Excel" scheme="https://jueee.github.io/tags/Excel/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 按天备份表数据</title>
    <link href="https://jueee.github.io/2021/01/2021-01-15-MySQL%E6%8C%89%E5%A4%A9%E5%A4%87%E4%BB%BD%E8%A1%A8%E6%95%B0%E6%8D%AE/"/>
    <id>https://jueee.github.io/2021/01/2021-01-15-MySQL%E6%8C%89%E5%A4%A9%E5%A4%87%E4%BB%BD%E8%A1%A8%E6%95%B0%E6%8D%AE/</id>
    <published>2021-01-15T00:00:00.000Z</published>
    <updated>2021-01-15T10:39:51.447Z</updated>
    
    <content type="html"><![CDATA[<p>MySQL 按天备份表数据。</p><a id="more"></a><h3 id="备份脚本"><a href="#备份脚本" class="headerlink" title="备份脚本"></a>备份脚本</h3><ul><li>按天备份</li><li>自定义备份表</li><li>备份数据保留 15 天</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment">#############################################</span><span class="token comment">#    author wyq</span><span class="token comment">#############################################</span><span class="token comment">#############################################</span><span class="token comment">#    define paras</span><span class="token comment">#############################################</span><span class="token builtin class-name">cd</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">dirname</span> $0<span class="token variable">)</span></span><span class="token assign-left variable">workDir</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token builtin class-name">pwd</span><span class="token variable">`</span></span><span class="token assign-left variable">backupDir</span><span class="token operator">=</span><span class="token variable">$workDir</span>/backup<span class="token assign-left variable">currentDate</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">date</span> <span class="token string">"+%Y-%m-%d"</span><span class="token variable">`</span></span><span class="token comment">#jue mirror</span><span class="token assign-left variable">jueHost</span><span class="token operator">=</span><span class="token number">127.0</span>.0.1<span class="token assign-left variable">juePort</span><span class="token operator">=</span><span class="token number">3306</span><span class="token assign-left variable">jueDatabase</span><span class="token operator">=</span>test<span class="token assign-left variable">jueTables</span><span class="token operator">=</span><span class="token punctuation">(</span> mysqlTable1 mysqlTable2 mysqlTable3 mysqlTable4 mysqlTable5 <span class="token punctuation">)</span><span class="token comment">#mysqldump --default-character-set=gbk --skip-add-drop-table --quick --single-transaction --lock-tables=false --host=127.0.0.1 --port=3306 -uusername -ppassword test mysqlTable1 --result-file=/tmp/mysqlTable1.sql</span><span class="token function-name function">ddbBackup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token assign-left variable">host</span><span class="token operator">=</span><span class="token variable">$1</span>    <span class="token assign-left variable">port</span><span class="token operator">=</span><span class="token variable">$2</span>    <span class="token assign-left variable">database</span><span class="token operator">=</span><span class="token variable">$3</span>    <span class="token assign-left variable">table</span><span class="token operator">=</span><span class="token variable">$4</span>    <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token variable">$5</span>    mysqldump --default-character-set<span class="token operator">=</span>gbk --skip-add-drop-table --quick --single-transaction --lock-tables<span class="token operator">=</span>false --host<span class="token operator">=</span><span class="token variable">$host</span> --port<span class="token operator">=</span><span class="token variable">$port</span> -ugarbage -pgarbage <span class="token variable">$database</span> <span class="token variable">$table</span> <span class="token punctuation">\</span>--result-file<span class="token operator">=</span><span class="token variable">$backupDir</span>/<span class="token variable">$currentDate</span>/<span class="token variable">$name</span>-<span class="token variable">$database</span>-<span class="token variable">$table</span>.sql    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$?</span> -ne <span class="token number">0</span> <span class="token punctuation">]</span>    <span class="token keyword">then</span>        <span class="token builtin class-name">echo</span> <span class="token string">"Can't mysqldump <span class="token variable">$database</span>.<span class="token variable">$table</span> from <span class="token variable">$host</span> !!!"</span>    <span class="token keyword">else</span>        <span class="token builtin class-name">echo</span> <span class="token string">"mysqldump <span class="token variable">$database</span>.<span class="token variable">$table</span> from <span class="token variable">$host</span> successfully."</span>    <span class="token keyword">fi</span><span class="token punctuation">}</span><span class="token comment">##################################################</span><span class="token comment">#       start</span><span class="token comment">##################################################</span><span class="token builtin class-name">echo</span> <span class="token string">"Start at :"</span><span class="token variable"><span class="token variable">`</span><span class="token function">date</span><span class="token variable">`</span></span><span class="token builtin class-name">cd</span> <span class="token variable">$workDir</span><span class="token keyword">if</span> <span class="token punctuation">[</span> -d <span class="token variable">$backupDir</span> <span class="token punctuation">]</span><span class="token keyword">then</span>    <span class="token builtin class-name">echo</span> <span class="token string">"backup directory is ok."</span><span class="token keyword">else</span>    <span class="token builtin class-name">echo</span> <span class="token string">"no backup directory,make one."</span>    <span class="token function">mkdir</span> <span class="token variable">$backupDir</span><span class="token keyword">fi</span><span class="token function">mkdir</span> <span class="token variable">$backupDir</span>/<span class="token variable">$currentDate</span><span class="token comment">#backup host  database table info</span><span class="token builtin class-name">echo</span> <span class="token string">""</span><span class="token builtin class-name">echo</span> <span class="token string">"start to backup jue's mailgasp.tables"</span><span class="token keyword">for</span><span class="token variable"><span class="token punctuation">((</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>${#jueTables[@]}<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">))</span></span><span class="token keyword">do</span>    <span class="token builtin class-name">echo</span> <span class="token string">"table is : <span class="token variable">${jueTables<span class="token punctuation">[</span>$i<span class="token punctuation">]</span>}</span>"</span>    ddbBackup <span class="token variable">$jueHost</span> <span class="token variable">$juePort</span> <span class="token variable">$jueDatabase</span> <span class="token variable">${jueTables<span class="token punctuation">[</span>$i<span class="token punctuation">]</span>}</span> jue<span class="token keyword">done</span><span class="token builtin class-name">echo</span> <span class="token string">"start delete old data"</span><span class="token function">find</span> <span class="token variable">$backupDir</span> -ctime +15 -type d <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token function">rm</span> -rf<span class="token builtin class-name">echo</span> <span class="token string">"end to delete old data"</span><span class="token builtin class-name">exit</span> <span class="token number">0</span></code></pre><h3 id="crontab-配置"><a href="#crontab-配置" class="headerlink" title="crontab 配置"></a>crontab 配置</h3><pre class="language-bash" data-language="bash"><code class="language-bash">01 05 * * * /tmp/mysqlBackup.sh <span class="token operator">&gt;&gt;</span> /tmp/mysqlBackup.out <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token file-descriptor important">&amp;1</span></code></pre><h3 id="zip-加密"><a href="#zip-加密" class="headerlink" title="zip 加密"></a>zip 加密</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">zip</span> -rP abc<span class="token comment">#123 $backupDir/$currentDate/$currentDate.zip $backupDir/$currentDate/*</span><span class="token function">rm</span> <span class="token variable">$backupDir</span>/<span class="token variable">$currentDate</span>/*.sql</code></pre><h3 id="zip-解密"><a href="#zip-解密" class="headerlink" title="zip 解密"></a>zip 解密</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">unzip</span> -P abc<span class="token comment">#123 2021-01-15.zip</span></code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;MySQL 按天备份表数据。&lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://jueee.github.io/categories/Linux/"/>
    
    <category term="Shell" scheme="https://jueee.github.io/categories/Linux/Shell/"/>
    
    <category term="Database" scheme="https://jueee.github.io/categories/Database/"/>
    
    <category term="MySQL" scheme="https://jueee.github.io/categories/Database/MySQL/"/>
    
    
    <category term="MySQL" scheme="https://jueee.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>在 Vue 中使用 Echarts 进行数据动态刷新</title>
    <link href="https://jueee.github.io/2021/01/2021-01-14-%E5%9C%A8Vue%E4%B8%AD%E4%BD%BF%E7%94%A8Echarts%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E5%8A%A8%E6%80%81%E5%88%B7%E6%96%B0/"/>
    <id>https://jueee.github.io/2021/01/2021-01-14-%E5%9C%A8Vue%E4%B8%AD%E4%BD%BF%E7%94%A8Echarts%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E5%8A%A8%E6%80%81%E5%88%B7%E6%96%B0/</id>
    <published>2021-01-14T00:00:00.000Z</published>
    <updated>2021-01-14T02:22:37.271Z</updated>
    
    <content type="html"><![CDATA[<h3 id="出现问题"><a href="#出现问题" class="headerlink" title="出现问题"></a>出现问题</h3><p>在 Vue 使用 Echarts 时，可能会遇到这样的问题，就是直接刷新浏览器，或者数据变化时，Echarts 不更新？</p><p>这是因为 Echarts 是数据驱动的，这意味着只要我们重新设置数据，那么图表就会随之重新渲染，这是实现本需求的基础。</p><a id="more"></a><h3 id="watch-监听"><a href="#watch-监听" class="headerlink" title="watch 监听"></a>watch 监听</h3><p>如果想要支持数据的自动刷新，必然需要一个监听器能够实时监听到数据的变化然后告知 Echarts 重新设置数据。</p><p>此时，可以用 watch 监听 data 的变化，数据发生变化时重新初始化 Echarts 图。</p><pre class="language-js" data-language="js"><code class="language-js">watch<span class="token operator">:</span><span class="token punctuation">{</span>   <span class="token function-variable function">option</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">newvalue<span class="token punctuation">,</span>oldvalue</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//侦听相对应的属性</span>     <span class="token comment">//判断echarts对象是否存在存在 if(charts),charts为定义的echarts对象,</span>     <span class="token comment">//若存在， 则继续判断属性是否发生变化 if(newvalue)，发生变化重新设置echarts的option, charts.setOption(newvalue),没发生变化则 charts.setOption(loldvalue)</span>     <span class="token comment">//若charts对象不存在，则直接初始化echarts</span>   <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><pre class="language-js" data-language="js"><code class="language-js">watch<span class="token operator">:</span><span class="token punctuation">{</span>  <span class="token function-variable function">ratio</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">newvalue<span class="token punctuation">,</span>oldvalue</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>oldvalue <span class="token operator">!=</span> newvalue<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> echarts <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'echarts'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> myChart <span class="token operator">=</span> echarts<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"ratioId"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> option <span class="token operator">=</span> <span class="token punctuation">{</span>          tooltip<span class="token operator">:</span> <span class="token punctuation">{</span>              formatter<span class="token operator">:</span> <span class="token string">'{a} &lt;br/&gt;{b} : {c}%'</span><span class="token punctuation">,</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          series<span class="token operator">:</span> <span class="token punctuation">[</span>              <span class="token punctuation">{</span>                  type<span class="token operator">:</span> <span class="token string">'gauge'</span><span class="token punctuation">,</span>                  startAngle<span class="token operator">:</span> <span class="token number">210</span><span class="token punctuation">,</span>                  endAngle<span class="token operator">:</span> <span class="token operator">-</span><span class="token number">30</span><span class="token punctuation">,</span>                  splitNumber<span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">,</span>                  radius<span class="token operator">:</span> <span class="token string">'100%'</span><span class="token punctuation">,</span>                  axisLabel<span class="token operator">:</span><span class="token punctuation">{</span>                      show<span class="token operator">:</span><span class="token boolean">false</span>                  <span class="token punctuation">}</span><span class="token punctuation">,</span>                  axisLine<span class="token operator">:</span><span class="token punctuation">{</span>                      lineStyle<span class="token operator">:</span><span class="token punctuation">{</span>                          width<span class="token operator">:</span> <span class="token number">4</span>                      <span class="token punctuation">}</span>                  <span class="token punctuation">}</span><span class="token punctuation">,</span>                  pointer<span class="token operator">:</span><span class="token punctuation">{</span>                      width<span class="token operator">:</span> <span class="token number">3</span>                  <span class="token punctuation">}</span><span class="token punctuation">,</span>                  detail<span class="token operator">:</span><span class="token punctuation">{</span>                      fontSize<span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>                      padding<span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span>                  <span class="token punctuation">}</span><span class="token punctuation">,</span>                  data<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>value<span class="token operator">:</span> newvalue<span class="token punctuation">}</span><span class="token punctuation">]</span>              <span class="token punctuation">}</span>          <span class="token punctuation">]</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>      <span class="token comment">// 使用刚指定的配置项和数据显示图表。</span>      myChart<span class="token punctuation">.</span><span class="token function">setOption</span><span class="token punctuation">(</span>option<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>效果：</p><p><img src="/images/2021/01/image-20210114101815365.png" alt="image-20210114101815365" loading="lazy"></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;出现问题&quot;&gt;&lt;a href=&quot;#出现问题&quot; class=&quot;headerlink&quot; title=&quot;出现问题&quot;&gt;&lt;/a&gt;出现问题&lt;/h3&gt;&lt;p&gt;在 Vue 使用 Echarts 时，可能会遇到这样的问题，就是直接刷新浏览器，或者数据变化时，Echarts 不更新？&lt;/p&gt;
&lt;p&gt;这是因为 Echarts 是数据驱动的，这意味着只要我们重新设置数据，那么图表就会随之重新渲染，这是实现本需求的基础。&lt;/p&gt;</summary>
    
    
    
    <category term="Apache" scheme="https://jueee.github.io/categories/Apache/"/>
    
    <category term="Vue" scheme="https://jueee.github.io/categories/Vue/"/>
    
    <category term="Echarts" scheme="https://jueee.github.io/categories/Apache/Echarts/"/>
    
    
    <category term="Vue" scheme="https://jueee.github.io/tags/Vue/"/>
    
    <category term="Echarts" scheme="https://jueee.github.io/tags/Echarts/"/>
    
  </entry>
  
  <entry>
    <title>axios 发送两次请求原因及解决方法</title>
    <link href="https://jueee.github.io/2021/01/2021-01-12-axios%E5%8F%91%E9%80%81%E4%B8%A4%E6%AC%A1%E8%AF%B7%E6%B1%82%E5%8E%9F%E5%9B%A0%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <id>https://jueee.github.io/2021/01/2021-01-12-axios%E5%8F%91%E9%80%81%E4%B8%A4%E6%AC%A1%E8%AF%B7%E6%B1%82%E5%8E%9F%E5%9B%A0%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</id>
    <published>2021-01-12T00:00:00.000Z</published>
    <updated>2021-01-12T07:35:35.157Z</updated>
    
    <content type="html"><![CDATA[<h3 id="出现问题"><a href="#出现问题" class="headerlink" title="出现问题"></a>出现问题</h3><p>最近 Vue 项目中使用 axios 组件，在页面交互中发现 axios 会发送两次请求，一种请求方式为 OPTIONS，另外一种为自己设置的（如 GET、POST 等等）。</p><a id="more"></a><p>如下图所示，所有请求都发送了两次。</p><p><img src="/images/2021/01/image-20210112152514664.png" alt="image-20210112152514664" loading="lazy"></p><p>仔细查看发现，其中第一次是 OPTIONS 请求，且没有携带 <strong>Authorization</strong>&nbsp;信息：</p><p><img src="/images/2021/01/image-20210112152255588.png" alt="image-20210112152255588" loading="lazy"></p><p>第二次才是正常的 GET 请求，正常携带了 <strong>Authorization</strong>&nbsp;信息：</p><p><img src="/images/2021/01/image-20210112152315002.png" alt="image-20210112152315002" loading="lazy"></p><h3 id="CORS通信"><a href="#CORS通信" class="headerlink" title="CORS通信"></a>CORS 通信</h3><p>CORS 是一个 W3C 标准，全称是 "跨域资源共享"（Cross-origin resource sharing）。 它允许浏览器向跨源服务器，发出 XMLHttpRequest 请求，从而克服了 AJAX 只能同源使用的限制。</p><p>CORS 需要浏览器和服务器同时支持。目前，所有浏览器都支持该功能，IE 浏览器不能低于 IE10。</p><p>实现 CORS 通信的关键是服务器。只要服务器实现了 CORS 接口，就可以跨域通信。</p><h3 id="CORS两种请求"><a href="#CORS两种请求" class="headerlink" title="CORS两种请求"></a>CORS 两种请求</h3><p>浏览器将 CORS 请求分成两类：简单请求（simple request）和非简单请求（not-so-simple request）。</p><h4 id="简单请求"><a href="#简单请求" class="headerlink" title="简单请求"></a>简单请求</h4><p>只要同时满足以下两大条件，就属于简单请求。</p><blockquote><ol><li>请求方法是以下三种方法之一：<ul><li>HEAD</li><li>GET</li><li>POST</li></ul></li><li>HTTP 的头信息不超出以下几种字段：<ul><li>Accept</li><li>Accept-Language</li><li>Content-Language</li><li>Last-Event-ID</li><li>Content-Type：只限于三个值 <code>application/x-www-form-urlencoded</code>、<code>multipart/form-data</code>、<code>text/plain</code></li></ul></li></ol></blockquote><h4 id="非简单请求"><a href="#非简单请求" class="headerlink" title="非简单请求"></a>非简单请求</h4><p>凡是不同时满足上面两个条件，就属于非简单请求。</p><p>非简单请求是那种对服务器有特殊要求的请求，比如请求方法是 <code>PUT</code> 或 <code>DELETE</code>，或者 <code>Content-Type</code> 字段的类型是 <code>application/json</code>。</p><p>非简单请求的 CORS 请求，会在正式通信之前，增加一次 HTTP 查询请求，称为 "预检" 请求（preflight）。</p><h4 id="浏览器处理"><a href="#浏览器处理" class="headerlink" title="浏览器处理"></a>浏览器处理</h4><p>浏览器先询问服务器，当前网页所在的域名是否在服务器的许可名单之中，以及可以使用哪些 HTTP 动词和头信息字段。只有得到肯定答复，浏览器才会发出正式的 <code>XMLHttpRequest</code> 请求，否则就报错。</p><p>浏览器对这两种请求的处理，是不一样的。</p><h3 id="两次请求原因"><a href="#两次请求原因" class="headerlink" title="两次请求原因"></a>两次请求原因</h3><p>前后端未满足 “同源策略 / SOP”，俗称请求跨域。</p><p>浏览器一旦发现请求跨域，就会使用 CORS 通信，自动添加一些附加的头信息，简单请求只会有一次请求，只有非简单请求会附加一次请求。 </p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>服务期端直接通过 “预检” 请求，服务器新建拦截器，拦截所有请求，筛选所有 Requset Method:OPTIONS 的请求，不做任何处理直接返回即可。</p><h4 id="Java-JWT"><a href="#Java-JWT" class="headerlink" title="Java JWT"></a>Java JWT</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yhzy<span class="token punctuation">.</span>zytx<span class="token punctuation">.</span>jwt<span class="token punctuation">.</span></span><span class="token class-name">Interceptor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Logger</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">LoggerFactory</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>method<span class="token punctuation">.</span></span><span class="token class-name">HandlerMethod</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">HandlerInterceptor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ModelAndView</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMethod</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span><span class="token punctuation">;</span><span class="token comment">/** * @ClassName JwtInterceptor * @Description JWT拦截器 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JwtInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">JwtInterceptor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> httpServletRequest<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> httpServletResponse<span class="token punctuation">,</span> <span class="token class-name">Object</span> object<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token comment">// 从 http 请求头中取出 token</span>        <span class="token class-name">String</span> token <span class="token operator">=</span> httpServletRequest<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"Authorization"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 如果不是映射到方法直接通过</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>object <span class="token keyword">instanceof</span> <span class="token class-name">HandlerMethod</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">HandlerMethod</span> handlerMethod<span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">HandlerMethod</span><span class="token punctuation">)</span>object<span class="token punctuation">;</span>        <span class="token class-name">Method</span> method<span class="token operator">=</span>handlerMethod<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// OPTIONS请求类型直接返回不处理</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">RequestMethod</span><span class="token punctuation">.</span>OPTIONS<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>httpServletRequest<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> httpServletRequest<span class="token punctuation">,</span>                           <span class="token class-name">HttpServletResponse</span> httpServletResponse<span class="token punctuation">,</span>                           <span class="token class-name">Object</span> o<span class="token punctuation">,</span> <span class="token class-name">ModelAndView</span> modelAndView<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterCompletion</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> httpServletRequest<span class="token punctuation">,</span>                                <span class="token class-name">HttpServletResponse</span> httpServletResponse<span class="token punctuation">,</span>                                <span class="token class-name">Object</span> o<span class="token punctuation">,</span> <span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;出现问题&quot;&gt;&lt;a href=&quot;#出现问题&quot; class=&quot;headerlink&quot; title=&quot;出现问题&quot;&gt;&lt;/a&gt;出现问题&lt;/h3&gt;&lt;p&gt;最近Vue项目中使用axios组件，在页面交互中发现axios会发送两次请求，一种请求方式为OPTIONS，另外一种为自己设置的（如 GET、POST 等等）。&lt;/p&gt;</summary>
    
    
    
    <category term="Vue" scheme="https://jueee.github.io/categories/Vue/"/>
    
    
    <category term="Vue" scheme="https://jueee.github.io/tags/Vue/"/>
    
    <category term="axios" scheme="https://jueee.github.io/tags/axios/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot 增加 XSS 跨站脚本攻击防护</title>
    <link href="https://jueee.github.io/2021/01/2021-01-08-SpringBoot%E5%A2%9E%E5%8A%A0XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB%E9%98%B2%E6%8A%A4/"/>
    <id>https://jueee.github.io/2021/01/2021-01-08-SpringBoot%E5%A2%9E%E5%8A%A0XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB%E9%98%B2%E6%8A%A4/</id>
    <published>2021-01-08T00:00:00.000Z</published>
    <updated>2021-01-08T10:54:12.526Z</updated>
    
    <content type="html"><![CDATA[<h3 id="XSS原理"><a href="#XSS原理" class="headerlink" title="XSS原理"></a>XSS 原理</h3><p>XSS 攻击的原理是利用前后端校验不严格，用户将攻击代码植入到数据中提交到了后台，当这些数据在网页上被其他用户查看的时候触发攻击。</p><p>举例：用户提交表单时把地址写成：</p><pre class="language-none"><code class="language-none">杭州市&lt;script&gt;for(var i=0;i&lt;9999;i++){alert(i)}&lt;/script&gt;</code></pre><p>上面的数据如果没有在后台做处理，当数据被展示到网页上的时候，会在网页上弹出 N 个 alert 框，当然实际攻击肯定是比这个要复杂的多的。</p><a id="more"></a><h3 id="项目代码"><a href="#项目代码" class="headerlink" title="项目代码"></a>项目代码</h3><p>本文完整项目代码位于：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0p1ZWVlL2Jsb2ctcHJvamVjdC90cmVlL21haW4vamF2YS13ZWIteHNz">https://github.com/Jueee/blog-project/tree/main/java-web-xss<i class="fa fa-external-link-alt"></i></span></p><h3 id="XSS-攻击示例"><a href="#XSS-攻击示例" class="headerlink" title="XSS&nbsp;攻击示例"></a>XSS&nbsp;攻击示例</h3><h4 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h4><p>引入依赖：</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-thymeleaf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></code></pre><p>Controller 如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Controller</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>ui<span class="token punctuation">.</span></span><span class="token class-name">ModelMap</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMapping</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestParam</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ResponseBody</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/demo"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">ModelMap</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"into demo page"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"demo"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/demoAction"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">demoAction</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"name"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span>                             <span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">ModelMap</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"name:"</span><span class="token operator">+</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"name is:"</span><span class="token operator">+</span>name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>前端页面如下：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>demoAction<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>demoForm<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    Name: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>demo<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Submit<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span></code></pre><h4 id="正常效果"><a href="#正常效果" class="headerlink" title="正常效果"></a>正常效果</h4><ol><li><p>访问 <span class="exturl" data-url="aHR0cDovLzEyNy4wLjAuMTo4MDgwL2RlbW8=">http://127.0.0.1:8080/demo<i class="fa fa-external-link-alt"></i></span></p><p><img src="/images/2021/01/image-20210108184256800.png" alt="image-20210108184256800" loading="lazy"></p></li><li><p>点击提交：</p><p><img src="/images/2021/01/image-20210108184309976.png" alt="image-20210108184309976" loading="lazy"></p></li></ol><h4 id="攻击效果"><a href="#攻击效果" class="headerlink" title="攻击效果"></a>攻击效果</h4><ol><li><p>访问 <span class="exturl" data-url="aHR0cDovLzEyNy4wLjAuMTo4MDgwL2RlbW8lRUYlQkMlOEMlRTUlQjklQjYlRTglQkUlOTMlRTUlODUlQTU=">http://127.0.0.1:8080/demo，并输入<i class="fa fa-external-link-alt"></i></span> <code>test&lt;script&gt;alert('Attack!')&lt;/script&gt;</code></p><p><img src="/images/2021/01/image-20210108184403240.png" alt="image-20210108184403240" loading="lazy"></p></li><li><p>点击提交：</p><p><img src="/images/2021/01/image-20210108184500891.png" alt="image-20210108184500891" loading="lazy"></p></li></ol><h3 id="SpringBoot-防护"><a href="#SpringBoot-防护" class="headerlink" title="SpringBoot 防护"></a>SpringBoot 防护</h3><h4 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h4><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.commons/commons-lang3 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>commons-lang3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/org.jsoup/jsoup --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.jsoup<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jsoup<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.13.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></code></pre><h4 id="Filter-类"><a href="#Filter-类" class="headerlink" title="Filter 类"></a>Filter 类</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>lang3<span class="token punctuation">.</span></span><span class="token class-name">StringUtils</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>regex<span class="token punctuation">.</span></span><span class="token class-name">Matcher</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>regex<span class="token punctuation">.</span></span><span class="token class-name">Pattern</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XssFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> excludes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> enabled <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">FilterConfig</span> filterConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> strExcludes <span class="token operator">=</span> filterConfig<span class="token punctuation">.</span><span class="token function">getInitParameter</span><span class="token punctuation">(</span><span class="token string">"excludes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> strEnabled <span class="token operator">=</span> filterConfig<span class="token punctuation">.</span><span class="token function">getInitParameter</span><span class="token punctuation">(</span><span class="token string">"enabled"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//将不需要xss过滤的接口添加到列表中</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>strExcludes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> urls <span class="token operator">=</span> strExcludes<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token operator">:</span>urls<span class="token punctuation">)</span><span class="token punctuation">{</span>                excludes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>strEnabled<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            enabled <span class="token operator">=</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>strEnabled<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> servletRequest<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> servletResponse<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> filterChain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>        <span class="token class-name">HttpServletRequest</span> request <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">)</span> servletRequest<span class="token punctuation">;</span>        <span class="token comment">//如果该访问接口在排除列表里面则不拦截</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isExcludeUrl</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getServletPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>servletRequest<span class="token punctuation">,</span>servletResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//拦截该url并进行xss过滤</span>        <span class="token class-name">XssHttpServletRequestWrapper</span> xssHttpServletRequestWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XssHttpServletRequestWrapper</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>        filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>xssHttpServletRequestWrapper<span class="token punctuation">,</span>servletResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isExcludeUrl</span><span class="token punctuation">(</span><span class="token class-name">String</span> urlPath<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>enabled<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">//如果xss开关关闭了，则所有url都不拦截</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>excludes<span class="token operator">==</span><span class="token keyword">null</span><span class="token operator">||</span>excludes<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">String</span> url <span class="token operator">=</span> urlPath<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> pattern<span class="token operator">:</span>excludes<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">Pattern</span> p <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"^"</span><span class="token operator">+</span>pattern<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Matcher</span> m <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="XSS-过滤包装类"><a href="#XSS-过滤包装类" class="headerlink" title="XSS 过滤包装类"></a>XSS 过滤包装类</h4><p>增加一个 XssHttpServletRequestWrapper 类，这个类重写了获取参数的方法，在获取参数时做了 XSS 替换处理</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span><span class="token punctuation">;</span>        <span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>lang3<span class="token punctuation">.</span></span><span class="token class-name">StringUtils</span><span class="token punctuation">;</span>        <span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>jsoup<span class="token punctuation">.</span></span><span class="token class-name">Jsoup</span><span class="token punctuation">;</span>        <span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>jsoup<span class="token punctuation">.</span>safety<span class="token punctuation">.</span></span><span class="token class-name">Whitelist</span><span class="token punctuation">;</span>        <span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">;</span>        <span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequestWrapper</span><span class="token punctuation">;</span><span class="token comment">/** * xss过滤包装类 */</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XssHttpServletRequestWrapper</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServletRequestWrapper</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * Constructs a request object wrapping the given request.     * @param request The request to wrap     * @throws IllegalArgumentException if the request is null     */</span>    <span class="token keyword">public</span> <span class="token class-name">XssHttpServletRequestWrapper</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> strHeader <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>strHeader<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> strHeader<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token class-name">Jsoup</span><span class="token punctuation">.</span><span class="token function">clean</span><span class="token punctuation">(</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token class-name">Whitelist</span><span class="token punctuation">.</span><span class="token function">relaxed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> strParameter <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>strParameter<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> strParameter<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token class-name">Jsoup</span><span class="token punctuation">.</span><span class="token function">clean</span><span class="token punctuation">(</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token class-name">Whitelist</span><span class="token punctuation">.</span><span class="token function">relaxed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getParameterValues</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> values <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getParameterValues</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>values<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> values<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> length <span class="token operator">=</span> values<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> escapseValues <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">//过滤一切可能的xss攻击字符串</span>            escapseValues<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Jsoup</span><span class="token punctuation">.</span><span class="token function">clean</span><span class="token punctuation">(</span>values<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token class-name">Whitelist</span><span class="token punctuation">.</span><span class="token function">relaxed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>escapseValues<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>values<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"xss字符串过滤前："</span><span class="token operator">+</span>values<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"\t"</span><span class="token operator">+</span><span class="token string">"过滤后："</span><span class="token operator">+</span>escapseValues<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> escapseValues<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="配置加载类"><a href="#配置加载类" class="headerlink" title="配置加载类"></a>配置加载类</h4><p>SpringBoot 里面增加一个 configuration 配置，把 Filter 类配置上去</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>jueee<span class="token punctuation">.</span>utils<span class="token punctuation">.</span></span><span class="token class-name">XssFilter</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>lang3<span class="token punctuation">.</span></span><span class="token class-name">StringUtils</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Value</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">FilterRegistrationBean</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">DispatcherType</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span><span class="token punctuation">;</span><span class="token comment">/** * 设置跨站脚本过滤 */</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FilterConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${xss.enabled}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> enabled<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${xss.excludes}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> excludes<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${xss.urlPatterns}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> urlPatterns<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">FilterRegistrationBean</span> <span class="token function">xssFilterRegistration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">FilterRegistrationBean</span> registrationBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilterRegistrationBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        registrationBean<span class="token punctuation">.</span><span class="token function">setDispatcherTypes</span><span class="token punctuation">(</span><span class="token class-name">DispatcherType</span><span class="token punctuation">.</span>REQUEST<span class="token punctuation">)</span><span class="token punctuation">;</span>        registrationBean<span class="token punctuation">.</span><span class="token function">setFilter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">XssFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        registrationBean<span class="token punctuation">.</span><span class="token function">addUrlPatterns</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>urlPatterns<span class="token punctuation">,</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        registrationBean<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"XssFilter"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        registrationBean<span class="token punctuation">.</span><span class="token function">setOrder</span><span class="token punctuation">(</span><span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> initParameters <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        initParameters<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"excludes"</span><span class="token punctuation">,</span>excludes<span class="token punctuation">)</span><span class="token punctuation">;</span>        initParameters<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"enabled"</span><span class="token punctuation">,</span>enabled<span class="token punctuation">)</span><span class="token punctuation">;</span>        registrationBean<span class="token punctuation">.</span><span class="token function">setInitParameters</span><span class="token punctuation">(</span>initParameters<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> registrationBean<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><p>在 application.properties 或者 application.yml 里面增加一些开关配置，可以忽略某些接口提交的数据或者关闭 xss 过滤</p><pre class="language-properties" data-language="properties"><code class="language-properties"><span class="token comment">#xss攻击拦截</span><span class="token attr-name">xss.enabled</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token attr-name">xss.excludes</span><span class="token punctuation">=</span><span class="token attr-name">xss.urlPatterns</span><span class="token punctuation">=</span><span class="token attr-value">/*</span></code></pre><h4 id="防护效果"><a href="#防护效果" class="headerlink" title="防护效果"></a>防护效果</h4><p>访问 <span class="exturl" data-url="aHR0cDovLzEyNy4wLjAuMTo4MDgwL2RlbW8lRUYlQkMlOEMlRTglQkUlOTMlRTUlODUlQTU=">http://127.0.0.1:8080/demo，输入<i class="fa fa-external-link-alt"></i></span>  <code>test&lt;script&gt;alert('Attack!')&lt;/script&gt;</code>&nbsp;，并提交：</p><p><img src="/images/2021/01/image-20210108185026725.png" alt="image-20210108185026725" loading="lazy"></p><p>日志：</p><pre class="language-none"><code class="language-none">: into demo page: xss字符串过滤前：test&lt;script&gt;alert('Attack!')&lt;/script&gt;过滤后：test: name:test</code></pre>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;XSS原理&quot;&gt;&lt;a href=&quot;#XSS原理&quot; class=&quot;headerlink&quot; title=&quot;XSS原理&quot;&gt;&lt;/a&gt;XSS原理&lt;/h3&gt;&lt;p&gt;XSS攻击的原理是利用前后端校验不严格，用户将攻击代码植入到数据中提交到了后台，当这些数据在网页上被其他用户查看的时候触发攻击。&lt;/p&gt;
&lt;p&gt;举例：用户提交表单时把地址写成：&lt;/p&gt;
&lt;pre class=&quot;language-none&quot;&gt;&lt;code class=&quot;language-none&quot;&gt;杭州市&amp;lt;script&amp;gt;for(var i&amp;#x3D;0;i&amp;lt;9999;i++)&amp;#123;alert(i)&amp;#125;&amp;lt;&amp;#x2F;script&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面的数据如果没有在后台做处理，当数据被展示到网页上的时候，会在网页上弹出N个alert框，当然实际攻击肯定是比这个要复杂的多的。&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://jueee.github.io/categories/Java/"/>
    
    <category term="SpringBoot" scheme="https://jueee.github.io/categories/Java/SpringBoot/"/>
    
    
    <category term="Java" scheme="https://jueee.github.io/tags/Java/"/>
    
    <category term="SpringBoot" scheme="https://jueee.github.io/tags/SpringBoot/"/>
    
    <category term="XSS" scheme="https://jueee.github.io/tags/XSS/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot 实现 API 接口数据 AES 加密</title>
    <link href="https://jueee.github.io/2021/01/2021-01-06-SpringBoot%E5%AE%9E%E7%8E%B0API%E6%8E%A5%E5%8F%A3%E6%95%B0%E6%8D%AEAES%E5%8A%A0%E5%AF%86/"/>
    <id>https://jueee.github.io/2021/01/2021-01-06-SpringBoot%E5%AE%9E%E7%8E%B0API%E6%8E%A5%E5%8F%A3%E6%95%B0%E6%8D%AEAES%E5%8A%A0%E5%AF%86/</id>
    <published>2021-01-06T00:00:00.000Z</published>
    <updated>2021-01-07T02:52:43.202Z</updated>
    
    <content type="html"><![CDATA[<h3 id="接口安全"><a href="#接口安全" class="headerlink" title="接口安全"></a>接口安全</h3><p>放到互联网上的接口数据，直接采用明文的话，就很容易被抓包，然后进行修改或者被恶意植入木马，本文研究一下怎么样对接口进行数据加密。</p><p>接口加密的作用：</p><ol><li>防止恶意调用攻击</li><li>防止篡改信息攻击</li><li>防拦截攻击，数据被截取后进行修改后重新放回去</li><li>防止数据泄漏攻击</li></ol><a id="more"></a><div class="note info"><p>抓包（packet capture）就是将网络传输发送与接收的数据包进行截获、重发、编辑、转存等操作，也用来检查网络安全。抓包也经常被用来进行数据截取等。</p></div><h3 id="项目代码"><a href="#项目代码" class="headerlink" title="项目代码"></a>项目代码</h3><p>本文完整项目代码位于：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0p1ZWVlL2Jsb2ctcHJvamVjdC90cmVlL21haW4vamF2YS13ZWItc2VjcmV0">https://github.com/Jueee/blog-project/tree/main/java-web-secret<i class="fa fa-external-link-alt"></i></span></p><h3 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h3><h4 id="POM文件"><a href="#POM文件" class="headerlink" title="POM文件"></a>POM 文件</h4><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></code></pre><h4 id="加密解密工具类"><a href="#加密解密工具类" class="headerlink" title="加密解密工具类"></a>加密解密工具类</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>tomcat<span class="token punctuation">.</span>util<span class="token punctuation">.</span>codec<span class="token punctuation">.</span>binary<span class="token punctuation">.</span></span><span class="token class-name">Base64</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span></span><span class="token class-name">Cipher</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span></span><span class="token class-name">KeyGenerator</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span></span><span class="token class-name">SecretKey</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>spec<span class="token punctuation">.</span></span><span class="token class-name">SecretKeySpec</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span></span><span class="token class-name">NoSuchAlgorithmException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span></span><span class="token class-name">SecureRandom</span><span class="token punctuation">;</span><span class="token comment">/** * AES加密解密 */</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AesUtils</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> KEY_ALGORITHM <span class="token operator">=</span> <span class="token string">"AES"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> DEFAULT_CIPHER_ALGORITHM <span class="token operator">=</span> <span class="token string">"AES/ECB/PKCS5Padding"</span><span class="token punctuation">;</span><span class="token comment">// 默认的加密算法</span>    <span class="token comment">/**     * AES 加密操作     * @param content  待加密内容     * @param password 加密密码     * @return String 返回Base64转码后的加密数据     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">encrypt</span><span class="token punctuation">(</span><span class="token class-name">String</span> content<span class="token punctuation">,</span> <span class="token class-name">String</span> password<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment">// 创建密码器</span>            <span class="token keyword">final</span> <span class="token class-name">Cipher</span> cipher <span class="token operator">=</span> <span class="token class-name">Cipher</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>DEFAULT_CIPHER_ALGORITHM<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 设置为UTF-8编码</span>            <span class="token keyword">final</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> byteContent <span class="token operator">=</span> content<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 初始化为加密模式的密码器</span>            cipher<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">Cipher</span><span class="token punctuation">.</span>ENCRYPT_MODE<span class="token punctuation">,</span> <span class="token function">getSecretKey</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 加密</span>            <span class="token keyword">final</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> result <span class="token operator">=</span> cipher<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>byteContent<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 通过Base64转码返回</span>            <span class="token keyword">return</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">encodeBase64String</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * AES 解密操作     *     * @param content     * @param password     * @return String     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">decrypt</span><span class="token punctuation">(</span><span class="token class-name">String</span> content<span class="token punctuation">,</span> <span class="token class-name">String</span> password<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment">// 实例化</span>            <span class="token keyword">final</span> <span class="token class-name">Cipher</span> cipher <span class="token operator">=</span> <span class="token class-name">Cipher</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>DEFAULT_CIPHER_ALGORITHM<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 使用密钥初始化，设置为解密模式</span>            cipher<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">Cipher</span><span class="token punctuation">.</span>DECRYPT_MODE<span class="token punctuation">,</span> <span class="token function">getSecretKey</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 执行操作</span>            <span class="token keyword">final</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> result <span class="token operator">=</span> cipher<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span><span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">decodeBase64</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 采用UTF-8编码转化为字符串</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 生成加密秘钥     *     * @param password 加密的密码     * @return SecretKeySpec     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">SecretKeySpec</span> <span class="token function">getSecretKey</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> password<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 返回生成指定算法密钥生成器的 KeyGenerator 对象</span>        <span class="token class-name">KeyGenerator</span> kg <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            kg <span class="token operator">=</span> <span class="token class-name">KeyGenerator</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>KEY_ALGORITHM<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// AES 要求密钥长度为 128</span>            kg<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SecureRandom</span><span class="token punctuation">(</span>password<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 生成一个密钥</span>            <span class="token keyword">final</span> <span class="token class-name">SecretKey</span> secretKey <span class="token operator">=</span> kg<span class="token punctuation">.</span><span class="token function">generateKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 转换为AES专用密钥</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SecretKeySpec</span><span class="token punctuation">(</span>secretKey<span class="token punctuation">.</span><span class="token function">getEncoded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> KEY_ALGORITHM<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">NoSuchAlgorithmException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 根据密钥，生成 aes.key     * @param password     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getKeyByPass</span><span class="token punctuation">(</span><span class="token class-name">String</span> password<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SecretKeySpec</span> keySpec <span class="token operator">=</span> <span class="token function">getSecretKey</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> keySpec<span class="token punctuation">.</span><span class="token function">getEncoded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">byteToHexString</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * byte数组转化为16进制字符串     * @param bytes     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">byteToHexString</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">StringBuffer</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> bytes<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">String</span> strHex<span class="token operator">=</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span>bytes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>strHex<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>strHex<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>strHex<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"0"</span> <span class="token operator">+</span> strHex<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>strHex<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="加密注解"><a href="#加密注解" class="headerlink" title="加密注解"></a>加密注解</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Documented</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ElementType</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Retention</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Target</span><span class="token punctuation">;</span><span class="token comment">/** * 返回对body加密,针对类跟方法 */</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span>METHOD<span class="token punctuation">,</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span>TYPE <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">ResponseEncrypt</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 返回对body加密，默认是true     * @return boolean     */</span>    <span class="token keyword">boolean</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="加密判断类"><a href="#加密判断类" class="headerlink" title="加密判断类"></a>加密判断类</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>jueee<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">ResponseEncrypt</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">MethodParameter</span><span class="token punctuation">;</span><span class="token comment">/** * 是否需要加密解密 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NeedDecrypt</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 判断是否需要加密     *     * @param returnType     * @return boolean     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">needEncrypt</span><span class="token punctuation">(</span><span class="token class-name">MethodParameter</span> returnType<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> encrypt <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token comment">// 获取类上的注解</span>        <span class="token keyword">final</span> <span class="token keyword">boolean</span> classPresentAnno <span class="token operator">=</span> returnType<span class="token punctuation">.</span><span class="token function">getContainingClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span><span class="token class-name">ResponseEncrypt</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取方法上的注解</span>        <span class="token keyword">final</span> <span class="token keyword">boolean</span> methodPresentAnno <span class="token operator">=</span> returnType<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span><span class="token class-name">ResponseEncrypt</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>classPresentAnno<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 类上标注的是否需要加密</span>            encrypt <span class="token operator">=</span> returnType<span class="token punctuation">.</span><span class="token function">getContainingClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">ResponseEncrypt</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 类不加密，所有都不加密</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>encrypt<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>methodPresentAnno<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 方法上标注的是否需要加密</span>            encrypt <span class="token operator">=</span> returnType<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">ResponseEncrypt</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> encrypt<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="加密拦截"><a href="#加密拦截" class="headerlink" title="加密拦截"></a>加密拦截</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>jueee<span class="token punctuation">.</span>bean<span class="token punctuation">.</span></span><span class="token class-name">ResponseBean</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>jueee<span class="token punctuation">.</span>utils<span class="token punctuation">.</span></span><span class="token class-name">AesUtils</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>jueee<span class="token punctuation">.</span>utils<span class="token punctuation">.</span></span><span class="token class-name">NeedDecrypt</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Value</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">MethodParameter</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">MediaType</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span>converter<span class="token punctuation">.</span></span><span class="token class-name">HttpMessageConverter</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span>server<span class="token punctuation">.</span></span><span class="token class-name">ServerHttpRequest</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span>server<span class="token punctuation">.</span></span><span class="token class-name">ServerHttpResponse</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ControllerAdvice</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>mvc<span class="token punctuation">.</span>method<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ResponseBodyAdvice</span><span class="token punctuation">;</span><span class="token comment">/** * 对接口数据进行加密 */</span><span class="token annotation punctuation">@ControllerAdvice</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ResponseEncryptAdvice</span> <span class="token keyword">implements</span> <span class="token class-name">ResponseBodyAdvice</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${module.boots.response.aes.key}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> key<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">supports</span><span class="token punctuation">(</span><span class="token class-name">MethodParameter</span> returnType<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">HttpMessageConverter</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> converterType<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 在写入之前更改body的值     * @param body     * @param returnType     * @param selectedContentType     * @param selectedConverterType     * @param request     * @param response     * @return     * @return     */</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token string">"unchecked"</span><span class="token punctuation">,</span> <span class="token string">"rawtypes"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">beforeBodyWrite</span><span class="token punctuation">(</span><span class="token class-name">Object</span> body<span class="token punctuation">,</span> <span class="token class-name">MethodParameter</span> returnType<span class="token punctuation">,</span> <span class="token class-name">MediaType</span> selectedContentType<span class="token punctuation">,</span>                                  <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">HttpMessageConverter</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> selectedConverterType<span class="token punctuation">,</span> <span class="token class-name">ServerHttpRequest</span> request<span class="token punctuation">,</span>                                  <span class="token class-name">ServerHttpResponse</span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 判断是否需要加密</span>        <span class="token keyword">final</span> <span class="token keyword">boolean</span> encrypt <span class="token operator">=</span> <span class="token class-name">NeedDecrypt</span><span class="token punctuation">.</span><span class="token function">needEncrypt</span><span class="token punctuation">(</span>returnType<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>encrypt<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> body<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment">// 如果body是属于ResponseBean类型,只需要对data里面的数据进行加密即可</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>body <span class="token keyword">instanceof</span> <span class="token class-name">ResponseBean</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">final</span> <span class="token class-name">ResponseBean</span> responseBean <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ResponseBean</span><span class="token punctuation">)</span> body<span class="token punctuation">;</span>                <span class="token keyword">final</span> <span class="token class-name">Object</span> data <span class="token operator">=</span> responseBean<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> body<span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    responseBean<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token class-name">AesUtils</span><span class="token punctuation">.</span><span class="token function">encrypt</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> responseBean<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> body<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="配置密钥"><a href="#配置密钥" class="headerlink" title="配置密钥"></a>配置密钥</h4><pre class="language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">module.boots.response.aes.key</span><span class="token punctuation">:</span> <span class="token attr-value">6162382d323fb399fc202a5aca55336a</span></code></pre><h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><h4 id="数据接口"><a href="#数据接口" class="headerlink" title="数据接口"></a>数据接口</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>jueee<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">ResponseEncrypt</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>jueee<span class="token punctuation">.</span>bean<span class="token punctuation">.</span></span><span class="token class-name">GetEncryptVO</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>jueee<span class="token punctuation">.</span>bean<span class="token punctuation">.</span></span><span class="token class-name">ResponseBean</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>jueee<span class="token punctuation">.</span>utils<span class="token punctuation">.</span></span><span class="token class-name">AesUtils</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Value</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">MediaType</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">GetMapping</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMapping</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestParam</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span><span class="token punctuation">;</span><span class="token comment">/** * 加密数据接口 */</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"deprecation"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecretController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${module.boots.response.aes.key}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> key<span class="token punctuation">;</span>    <span class="token comment">/**     * 获取加密数据     */</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/getEncrypt"</span><span class="token punctuation">,</span> produces <span class="token operator">=</span> <span class="token class-name">MediaType</span><span class="token punctuation">.</span>APPLICATION_JSON_UTF8_VALUE<span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseEncrypt</span>    <span class="token keyword">public</span> <span class="token class-name">ResponseBean</span> <span class="token function">getEncrypt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token class-name">GetEncryptVO</span> vo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GetEncryptVO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vo<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vo<span class="token punctuation">.</span><span class="token function">setUserName</span><span class="token punctuation">(</span><span class="token string">"Jueee"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">ResponseBean</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>vo<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 获取解密数据     */</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/getDecrypt"</span><span class="token punctuation">,</span> produces <span class="token operator">=</span> <span class="token class-name">MediaType</span><span class="token punctuation">.</span>APPLICATION_JSON_UTF8_VALUE<span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">ResponseBean</span> <span class="token function">getDecrypt</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"content"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> content<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"content:"</span><span class="token operator">+</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token class-name">AesUtils</span><span class="token punctuation">.</span><span class="token function">decrypt</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"decrypt:"</span><span class="token operator">+</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">ResponseBean</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="测试接口"><a href="#测试接口" class="headerlink" title="测试接口"></a>测试接口</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>jueee<span class="token punctuation">.</span>utils<span class="token punctuation">.</span></span><span class="token class-name">HttpClient4</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>json<span class="token punctuation">.</span></span><span class="token class-name">JSONObject</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Test</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">URLEncoder</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">class</span> <span class="token class-name">SecretControllerTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> encrypt <span class="token operator">=</span> <span class="token class-name">HttpClient4</span><span class="token punctuation">.</span><span class="token function">doGet</span><span class="token punctuation">(</span><span class="token string">"http://127.0.0.1:8080/test/getEncrypt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>encrypt<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">JSONObject</span> jsonObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSONObject</span><span class="token punctuation">(</span>encrypt<span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>jsonObject<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> data <span class="token operator">=</span> jsonObject<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> decrypt <span class="token operator">=</span> <span class="token class-name">HttpClient4</span><span class="token punctuation">.</span><span class="token function">doGet</span><span class="token punctuation">(</span><span class="token string">"http://127.0.0.1:8080/test/getDecrypt?content="</span><span class="token operator">+</span> <span class="token class-name">URLEncoder</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>decrypt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>输出：</p><pre class="language-none"><code class="language-none">- {"code":200,"msg":"成功","data":"FJscqvyWFReJftsv9WxkIFpHq8Y/GLBAi4tbv/qyAqLMeCAr8fpaJBQ83F4Owe1S"}- FJscqvyWFReJftsv9WxkIFpHq8Y/GLBAi4tbv/qyAqLMeCAr8fpaJBQ83F4Owe1S- {"code":200,"msg":"GetEncryptVO(id=123456, userName=Jueee)","data":null}</code></pre><h4 id="测试工具类"><a href="#测试工具类" class="headerlink" title="测试工具类"></a>测试工具类</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Test</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">AesUtilsTest</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> aesKey <span class="token operator">=</span> <span class="token string">"6162382d323fb399fc202a5aca55336a"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span> <span class="token comment">// 生成 AES Key</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">AesUtils</span><span class="token punctuation">.</span><span class="token function">getKeyByPass</span><span class="token punctuation">(</span><span class="token string">"Jueee"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Test</span> <span class="token comment">// AES 解密</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testDecrypt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"FJscqvyWFReJftsv9WxkIFpHq8Y/GLBAi4tbv/qyAqLMeCAr8fpaJBQ83F4Owe1S"</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">AesUtils</span><span class="token punctuation">.</span><span class="token function">decrypt</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> aesKey<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>输出：</p><pre class="language-none"><code class="language-none">6162382d323fb399fc202a5aca55336aGetEncryptVO(id=123456, userName=Jueee)</code></pre>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;接口安全&quot;&gt;&lt;a href=&quot;#接口安全&quot; class=&quot;headerlink&quot; title=&quot;接口安全&quot;&gt;&lt;/a&gt;接口安全&lt;/h3&gt;&lt;p&gt;放到互联网上的接口数据，直接采用明文的话，就很容易被抓包，然后进行修改或者被恶意植入木马，本文研究一下怎么样对接口进行数据加密。&lt;/p&gt;
&lt;p&gt;接口加密的作用：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;防止恶意调用攻击&lt;/li&gt;
&lt;li&gt;防止篡改信息攻击&lt;/li&gt;
&lt;li&gt;防拦截攻击，数据被截取后进行修改后重新放回去&lt;/li&gt;
&lt;li&gt;防止数据泄漏攻击&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="Java" scheme="https://jueee.github.io/categories/Java/"/>
    
    <category term="SpringBoot" scheme="https://jueee.github.io/categories/Java/SpringBoot/"/>
    
    
    <category term="Java" scheme="https://jueee.github.io/tags/Java/"/>
    
    <category term="SpringBoot" scheme="https://jueee.github.io/tags/SpringBoot/"/>
    
    <category term="AES" scheme="https://jueee.github.io/tags/AES/"/>
    
  </entry>
  
  <entry>
    <title>AOP 的 JoinPoint 参数方法详解</title>
    <link href="https://jueee.github.io/2021/01/2021-01-05-AOP%E7%9A%84JoinPoint%E5%8F%82%E6%95%B0%E6%96%B9%E6%B3%95%E8%AF%A6%E8%A7%A3/"/>
    <id>https://jueee.github.io/2021/01/2021-01-05-AOP%E7%9A%84JoinPoint%E5%8F%82%E6%95%B0%E6%96%B9%E6%B3%95%E8%AF%A6%E8%A7%A3/</id>
    <published>2021-01-05T00:00:00.000Z</published>
    <updated>2021-01-08T10:54:12.520Z</updated>
    
    <content type="html"><![CDATA[<h3 id="重要方法"><a href="#重要方法" class="headerlink" title="重要方法"></a>重要方法</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/*获取参数的值数组*/</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> point<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                    <span class="token comment">//  [1] 参数的值</span><span class="token comment">/*获取目标对象(被加强的对象)*/</span><span class="token class-name">Object</span> target <span class="token operator">=</span> point<span class="token punctuation">.</span><span class="token function">getTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*获取signature 该注解作用在方法上，强转为 MethodSignature*/</span><span class="token class-name">MethodSignature</span> signature <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">MethodSignature</span><span class="token punctuation">)</span> point<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*方法名*/</span><span class="token class-name">String</span> signatureName <span class="token operator">=</span> signature<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                         <span class="token comment">//  findById</span><span class="token comment">/*参数名称数组(与args参数值意义对应)*/</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> parameterNames <span class="token operator">=</span> signature<span class="token punctuation">.</span><span class="token function">getParameterNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//  [i] 参数名称</span><span class="token comment">/*获取执行的方法对应Method对象*/</span><span class="token class-name">Method</span> method <span class="token operator">=</span> signature<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                              <span class="token comment">//  public void com.jueee.test.service.UserService.findById(int)</span><span class="token comment">/*获取返回值类型*/</span><span class="token class-name">Class</span> returnType <span class="token operator">=</span> signature<span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token comment">//  void</span><span class="token comment">/*获取方法上的注解*/</span><span class="token class-name">OperationLog</span> operationLog <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getDeclaredAnnotation</span><span class="token punctuation">(</span><span class="token class-name">OperationLog</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="request-response"><a href="#request-response" class="headerlink" title="request / response"></a>request / response</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 获取request/response(ThreadLocal模式)</span><span class="token class-name">RequestAttributes</span> requestAttributes <span class="token operator">=</span> <span class="token class-name">RequestContextHolder</span><span class="token punctuation">.</span><span class="token function">getRequestAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ServletRequestAttributes</span> servletRequestAttributes <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ServletRequestAttributes</span><span class="token punctuation">)</span> requestAttributes<span class="token punctuation">;</span><span class="token class-name">HttpServletRequest</span> request <span class="token operator">=</span> servletRequestAttributes<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">HttpServletResponse</span> response <span class="token operator">=</span> servletRequestAttributes<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">HttpSession</span> session <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;重要方法&quot;&gt;&lt;a href=&quot;#重要方法&quot; class=&quot;headerlink&quot; title=&quot;重要方法&quot;&gt;&lt;/a&gt;重要方法&lt;/h3&gt;&lt;pre class=&quot;language-java&quot; data-language=&quot;java&quot;&gt;&lt;code class=&quot;lang</summary>
      
    
    
    
    <category term="Java" scheme="https://jueee.github.io/categories/Java/"/>
    
    <category term="JavaClass" scheme="https://jueee.github.io/categories/Java/JavaClass/"/>
    
    <category term="Spring" scheme="https://jueee.github.io/categories/Java/Spring/"/>
    
    
    <category term="Java" scheme="https://jueee.github.io/tags/Java/"/>
    
    <category term="Spring" scheme="https://jueee.github.io/tags/Spring/"/>
    
    <category term="AOP" scheme="https://jueee.github.io/tags/AOP/"/>
    
  </entry>
  
  <entry>
    <title>Swagger 设置全局 token</title>
    <link href="https://jueee.github.io/2021/01/2021-01-04-Swagger%E8%AE%BE%E7%BD%AE%E5%85%A8%E5%B1%80token/"/>
    <id>https://jueee.github.io/2021/01/2021-01-04-Swagger%E8%AE%BE%E7%BD%AE%E5%85%A8%E5%B1%80token/</id>
    <published>2021-01-04T00:00:00.000Z</published>
    <updated>2021-01-06T03:39:36.064Z</updated>
    
    <content type="html"><![CDATA[<p>swagger 是一个很使用的工具，但正常使用时，我们的接口需要登陆才能访问的。即登陆时，要传一个登陆后的 token 才能访问的。 </p><p>那这个怎么设置，才可以让所有接口都允许登陆后访问呢？</p><a id="more"></a><h3 id="出现问题"><a href="#出现问题" class="headerlink" title="出现问题"></a>出现问题</h3><p><img src="/images/2021/01/image-20210106113200793.png" alt="image-20210106113200793" loading="lazy"></p><h3 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h3><p><code>SwaggerConfig</code> 配置类中增加方法：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ApiKey</span><span class="token punctuation">&gt;</span></span> <span class="token function">securitySchemes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ApiKey</span><span class="token punctuation">&gt;</span></span> apiKeyList<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    apiKeyList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ApiKey</span><span class="token punctuation">(</span><span class="token string">"Authorization"</span><span class="token punctuation">,</span> <span class="token string">"Authorization"</span><span class="token punctuation">,</span> <span class="token string">"header"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> apiKeyList<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>注册方法：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">Docket</span> <span class="token function">docket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span><span class="token class-name">DocumentationType</span><span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">groupName</span><span class="token punctuation">(</span><span class="token string">"System"</span><span class="token punctuation">)</span> <span class="token comment">// 配置分组</span>            <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">apis</span><span class="token punctuation">(</span><span class="token class-name">RequestHandlerSelectors</span><span class="token punctuation">.</span><span class="token function">basePackage</span><span class="token punctuation">(</span><span class="token string">"com.test.system"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">paths</span><span class="token punctuation">(</span><span class="token class-name">PathSelectors</span><span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">securitySchemes</span><span class="token punctuation">(</span><span class="token function">securitySchemes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">pathMapping</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="解决效果"><a href="#解决效果" class="headerlink" title="解决效果"></a>解决效果</h3><p>访问：<span class="exturl" data-url="aHR0cDovLzEyNy4wLjAuMTo4MTgxL3N3YWdnZXItdWkuaHRtbCVFRiVCQyU4QyVFOCVCRiU5QiVFOCVBMSU4QyVFNyU5OSVCQiVFNSVCRCU5NSVFMyU4MCU4Mg==">http://127.0.0.1:8181/swagger-ui.html，进行登录。<i class="fa fa-external-link-alt"></i></span></p><p><img src="/images/2021/01/image-20210106113515400.png" alt="image-20210106113515400" loading="lazy"></p><p>插入 token 字符串。</p><p><img src="/images/2021/01/image-20210106113342562.png" alt="image-20210106113342562" loading="lazy"></p><p>传入成功的效果图：</p><p><img src="/images/2021/01/image-20210106113255981.png" alt="image-20210106113255981" loading="lazy"></p><p>接口访问成功效果图：</p><p><img src="/images/2021/01/image-20210106113224686.png" alt="image-20210106113224686" loading="lazy"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;swagger 是一个很使用的工具，但正常使用时，我们的接口需要登陆才能访问的。即登陆时，要传一个登陆后的 token 才能访问的。 &lt;/p&gt;
&lt;p&gt;那这个怎么设置，才可以让所有接口都允许登陆后访问呢？&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://jueee.github.io/categories/Java/"/>
    
    <category term="JavaJar" scheme="https://jueee.github.io/categories/Java/JavaJar/"/>
    
    
    <category term="Java" scheme="https://jueee.github.io/tags/Java/"/>
    
    <category term="JavaJar" scheme="https://jueee.github.io/tags/JavaJar/"/>
    
    <category term="RESTful" scheme="https://jueee.github.io/tags/RESTful/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot 用 AOP 切面实现权限校验</title>
    <link href="https://jueee.github.io/2021/01/2021-01-02-SpringBoot%E7%94%A8AOP%E5%88%87%E9%9D%A2%E5%AE%9E%E7%8E%B0%E6%9D%83%E9%99%90%E6%A0%A1%E9%AA%8C/"/>
    <id>https://jueee.github.io/2021/01/2021-01-02-SpringBoot%E7%94%A8AOP%E5%88%87%E9%9D%A2%E5%AE%9E%E7%8E%B0%E6%9D%83%E9%99%90%E6%A0%A1%E9%AA%8C/</id>
    <published>2021-01-02T00:00:00.000Z</published>
    <updated>2020-12-31T03:38:52.962Z</updated>
    
    <content type="html"><![CDATA[<p>使用 AOP，首先需要引入 <strong>AOP 的依赖</strong>。</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-aop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></code></pre><a id="more"></a><h3 id="截获Get请求"><a href="#截获Get请求" class="headerlink" title="截获Get请求"></a>截获 Get 请求</h3><p>在所有的 <code>get</code> 请求被调用前在控制台输出一句 "get 请求的 advice 触发了"。</p><h4 id="创建AOP切面类"><a href="#创建AOP切面类" class="headerlink" title="创建AOP切面类"></a>创建 AOP 切面类</h4><p>创建一个 AOP 切面类，只要在类上加个 <code>@Aspect</code> 注解即可。</p><ul><li><code>@Aspect</code> 注解用来描述一个切面类，定义切面类的时候需要打上这个注解。</li><li><code>@Component</code> 注解将该类交给 Spring 来管理。</li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Aspect</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Before</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Pointcut</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Aspect</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LogAdvice</span> <span class="token punctuation">{</span>    <span class="token comment">// 定义一个切点：所有被GetMapping注解修饰的方法会织入advice</span>    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"@annotation(org.springframework.web.bind.annotation.GetMapping)"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">logAdvicePointcut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment">// Before表示logAdvice将在目标方法执行前执行</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"logAdvicePointcut()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">logAdvice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">// 这里只是一个示例，你可以写任何处理逻辑</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"get请求的advice触发了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="创建接口类"><a href="#创建接口类" class="headerlink" title="创建接口类"></a>创建接口类</h4><p>创建一个接口类，内部创建一个 get 请求：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/aop"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AopController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/getTest"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">JSONObject</span> <span class="token function">aopTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> JSON<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span><span class="token string">"{\"message\":\"SUCCESS\",\"code\":200}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/postTest"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">JSONObject</span> <span class="token function">aopTest2</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> JSON<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span><span class="token string">"{\"message\":\"SUCCESS\",\"code\":200}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="请求接口"><a href="#请求接口" class="headerlink" title="请求接口"></a>请求接口</h4><p>项目启动后，请求 <code>http://localhost:8080/aop/getTest</code> 接口：</p><p><img src="/images/2021/01/image-20201231112432589.png" alt="image-20201231112432589" loading="lazy"></p><h3 id="截获权限校验注解"><a href="#截获权限校验注解" class="headerlink" title="截获权限校验注解"></a>截获权限校验注解</h3><h4 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h4><p>自定义一个注解 <code>PermissionsAnnotation</code></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>METHOD<span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">PermissionAnnotation</span><span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h4 id="创建切面类"><a href="#创建切面类" class="headerlink" title="创建切面类"></a>创建切面类</h4><p>创建一个切面类，切点设置为拦截所有标注 <code>PermissionsAnnotation</code> 的方法，截取到接口的参数，进行简单的权限校验。</p><ul><li><code>@Aspect</code> 注解用来描述一个切面类，定义切面类的时候需要打上这个注解。</li><li><code>@Component</code> 注解将该类交给 Spring 来管理。</li><li><code>@Order</code> 注解管理切面类执行顺序，该注解后的数字越小，所在切面类越先执行。</li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span></span>JSON<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span></span><span class="token class-name">JSONObject</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">ProceedingJoinPoint</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Around</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Aspect</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Pointcut</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Order</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Aspect</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PermissionFirstAdvice</span> <span class="token punctuation">{</span>    <span class="token comment">// 定义一个切面，括号内写入第1步中自定义注解的路径</span>    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"@annotation(com.jueee.annotation.PermissionAnnotation)"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">permissionCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"permissionCheck()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">permissionCheckFirst</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> joinPoint<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"===================权限切面===================："</span> <span class="token operator">+</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取请求参数，详见接口类</span>        <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> objects <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Long</span> id <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">JSONObject</span><span class="token punctuation">)</span> objects<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLong</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">JSONObject</span><span class="token punctuation">)</span> objects<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"id-&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;"</span> <span class="token operator">+</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name-&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;"</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// name不是管理员则抛出异常</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> JSON<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span><span class="token string">"{\"message\":\"not admin\",\"code\":403}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> joinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="创建接口类-1"><a href="#创建接口类-1" class="headerlink" title="创建接口类"></a>创建接口类</h4><p>创建接口类，并在目标方法上标注自定义注解 <code>PermissionsAnnotation</code>：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span></span>JSON<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span></span><span class="token class-name">JSONObject</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>jueee<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">PermissionAnnotation</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/permission"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/check"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span>POST<span class="token punctuation">)</span>    <span class="token annotation punctuation">@PermissionAnnotation</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 添加这个注解</span>    <span class="token keyword">public</span> <span class="token class-name">JSONObject</span> <span class="token function">getGroupList</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">JSONObject</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> JSON<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span><span class="token string">"{\"message\":\"SUCCESS\",\"code\":200,\"data\":"</span> <span class="token operator">+</span> request <span class="token operator">+</span> <span class="token string">"}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="请求接口-1"><a href="#请求接口-1" class="headerlink" title="请求接口"></a>请求接口</h4><p>有权限请求：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">JSONObject</span> jsonObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSONObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>jsonObject<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>jsonObject<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> result <span class="token operator">=</span> <span class="token class-name">HttpClient4</span><span class="token punctuation">.</span><span class="token function">doPost</span><span class="token punctuation">(</span><span class="token string">"http://localhost:8080/permission/check"</span><span class="token punctuation">,</span>jsonObject<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {"code":200,"data":{"name":"admin","id":11},"message":"SUCCESS"}</span></code></pre><p>无权限请求：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">JSONObject</span> jsonObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSONObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>jsonObject<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>jsonObject<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"jueee"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> result <span class="token operator">=</span> <span class="token class-name">HttpClient4</span><span class="token punctuation">.</span><span class="token function">doPost</span><span class="token punctuation">(</span><span class="token string">"http://localhost:8080/permission/check"</span><span class="token punctuation">,</span>jsonObject<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {"code":403,"message":"not admin"}</span></code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;使用 AOP，首先需要引入 &lt;strong&gt;AOP 的依赖&lt;/strong&gt;。&lt;/p&gt;
&lt;pre class=&quot;language-xml&quot; data-language=&quot;xml&quot;&gt;&lt;code class=&quot;language-xml&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;dependency&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;groupId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;groupId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;artifactId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;spring-boot-starter-aop&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;artifactId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;dependency&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="Java" scheme="https://jueee.github.io/categories/Java/"/>
    
    <category term="SpringBoot" scheme="https://jueee.github.io/categories/Java/SpringBoot/"/>
    
    <category term="Spring" scheme="https://jueee.github.io/categories/Java/Spring/"/>
    
    
    <category term="Java" scheme="https://jueee.github.io/tags/Java/"/>
    
    <category term="Spring" scheme="https://jueee.github.io/tags/Spring/"/>
    
    <category term="AOP" scheme="https://jueee.github.io/tags/AOP/"/>
    
  </entry>
  
  <entry>
    <title>Spring 面向切面编程 AOP 介绍及注解</title>
    <link href="https://jueee.github.io/2021/01/2021-01-01-Spring%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2%E7%BC%96%E7%A8%8BAOP%E4%BB%8B%E7%BB%8D%E5%8F%8A%E6%B3%A8%E8%A7%A3/"/>
    <id>https://jueee.github.io/2021/01/2021-01-01-Spring%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2%E7%BC%96%E7%A8%8BAOP%E4%BB%8B%E7%BB%8D%E5%8F%8A%E6%B3%A8%E8%A7%A3/</id>
    <published>2021-01-01T00:00:00.000Z</published>
    <updated>2021-01-06T07:59:23.974Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Spring-AOP"><a href="#Spring-AOP" class="headerlink" title="Spring AOP"></a>Spring AOP</h3><p><strong>AOP 即 Aspect Oriented Program 面向切面编程</strong>。</p><p>首先，在面向切面编程的思想里面，把功能分为核心业务功能，和周边功能。</p><ul><li><strong>所谓的核心业务</strong>，比如登陆，增加数据，删除数据都叫核心业务</li><li><strong>所谓的周边功能</strong>，比如性能统计，日志，事务管理等等</li></ul><p>周边功能在 Spring 的面向切面编程 AOP 思想里，即被定义为切面。</p><p>在面向切面编程 AOP 的思想里面，核心业务功能和切面功能分别独立进行开发，然后把切面功能和核心业务功能 "编织" 在一起，这就叫 AOP。</p><a id="more"></a><h4 id="AOP-的目的"><a href="#AOP-的目的" class="headerlink" title="AOP 的目的"></a>AOP 的目的</h4><p>AOP 能够将那些与业务无关，却为业务模块所共同调用的逻辑或责任（例如事务处理、日志管理、权限控制等）封装起来，便于减少系统的重复代码，降低模块间的耦合度，并有利于未来的可拓展性和可维护性。</p><h4 id="AOP术语"><a href="#AOP术语" class="headerlink" title="AOP术语"></a>AOP 术语</h4><ul><li><p><strong>连接点（Joinpoint)</strong> 程序执行的某个特定位置，如某个方法调用前，调用后，方法抛出异常后，这些代码中的特定点称为连接点。简单来说，就是在哪加入你的逻辑增强<br>连接点表示具体要拦截的方法，上面切点是定义一个范围，而连接点是具体到某个方法</p></li><li><p><strong>切点（PointCut）</strong> 每个程序的连接点有多个，如何定位到某个感兴趣的连接点，就需要通过切点来定位。比如，连接点 -- 数据库的记录，切点 -- 查询条件<br>切点用于来限定 Spring-AOP 启动的范围，通常我们采用表达式的方式来设置，所以关键词是范围</p></li><li><p><strong>业务增强（Advice）</strong> 业务增强是织入到目标类连接点上的一段程序代码。</p><p>业务增强分为如下几种：</p><ul><li><strong>前置通知 (before)</strong>: 在执行业务代码前做些操作，比如获取连接对象</li><li><strong>后置通知 (after)</strong>: 在执行业务代码后做些操作，无论是否发生异常，它都会执行，比如关闭连接对象</li><li><strong>异常通知（afterThrowing）</strong>: 在执行业务代码后出现异常，需要做的操作，比如回滚事务</li><li><strong>返回通知 (afterReturning)</strong>, 在执行业务代码后无异常，会执行的操作</li><li> ** 环绕通知 (around)**，在执行业务代码前和执行业务代码后都会执行的操作</li></ul></li><li><p><strong>目标对象（Target）</strong> 需要被加强的业务对象</p></li><li><p><strong>织入（Weaving）</strong> 织入就是将增强添加到对目标类具体连接点上的过程。<br>织入是一个形象的说法，具体来说，就是生成代理对象并将切面内容融入到业务流程的过程。</p></li><li><p><strong>代理类（Proxy）</strong> 一个类被 AOP 织入增强后，就产生了一个代理类。</p></li><li><p><strong>切面（Aspect）</strong> 切面由切点和增强组成，它既包括了横切逻辑的定义，也包括了连接点的定义，SpringAOP 就是将切面所定义的横切逻辑织入到切面所制定的连接点中。</p></li></ul><h3 id="AOP-体系"><a href="#AOP-体系" class="headerlink" title="AOP 体系"></a>AOP 体系</h3><p><img src="/images/2021/01/image-20201231111624405.png" alt="image-20201231111624405" loading="lazy"></p><h3 id="AOP-相关注解"><a href="#AOP-相关注解" class="headerlink" title="AOP 相关注解"></a>AOP 相关注解</h3><h4 id="Pointcut"><a href="#Pointcut" class="headerlink" title="@Pointcut"></a>@Pointcut</h4><p><code>@Pointcut</code> 注解，用来定义一个切面，即上文中所关注的某件事情的入口，切入点定义了事件触发时机。</p><p>有两个常用的表达式：</p><h5 id="execution-表达式"><a href="#execution-表达式" class="headerlink" title="execution() 表达式"></a>execution () 表达式</h5><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 定义一个切面，拦截 com.jueee.controller 包和子包下的所有方法 */</span><span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"execution(* com.jueee.controller..*.*(..))"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pointCut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>以 <code>execution(* * com.jueee.controller..*.*(..)))</code> 表达式为例：</p><ul><li>第一个 * 号的位置：表示返回值类型，* 表示所有类型。</li><li>包名：表示需要拦截的包名，后面的两个句点表示当前包和当前包的所有子包，在本例中指 com.mutest.controller 包、子包下所有类的方法。</li><li>第二个 * 号的位置：表示类名，* 表示所有类。</li><li><em>(..)：这个星号表示方法名，</em> 表示所有的方法，后面括弧里面表示方法的参数，两个句点表示任何参数。</li></ul><h5 id="annotation-表达式"><a href="#annotation-表达式" class="headerlink" title="annotation() 表达式"></a>annotation () 表达式</h5><p><code>annotation()</code> 方式是针对某个注解来定义切面，比如我们对具有 @PostMapping 注解的方法做切面，可以如下定义切面：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"@annotation(org.springframework.web.bind.annotation.GetMapping)"</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">logAdvicePointcut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>然后使用该切面的话，就会切入注解是 <code>@PostMapping</code> 的所有方法。</p><p>这种方式很适合处理 <code>@GetMapping、@PostMapping、@DeleteMapping</code> 不同注解有各种特定处理逻辑的场景。</p><h4 id="Around"><a href="#Around" class="headerlink" title="@Around"></a>@Around</h4><p><code>@Around</code> 注解用于修饰 <code>Around</code> 增强处理，<code>Around</code> 增强处理非常强大，表现在：</p><ol><li><code>@Around</code> 可以自由选择增强动作与目标方法的执行顺序，也就是说可以在增强动作前后，甚至过程中执行目标方法。这个特性的实现在于，调用 <code>ProceedingJoinPoint</code> 参数的 <code>procedd()</code> 方法才会执行目标方法。</li><li><code>@Around</code> 可以改变执行目标方法的参数值，也可以改变执行目标方法之后的返回值。</li></ol><p><code>Around</code> 增强处理有以下特点：</p><ol><li>当定义一个 <code>Around</code> 增强处理方法时，该方法的第一个形参必须是 <code>ProceedingJoinPoint</code> 类型（至少一个形参）。在增强处理方法体内，调用 <code>ProceedingJoinPoint</code> 的 <code>proceed</code> 方法才会执行目标方法：这就是 <code>@Around</code> 增强处理可以完全控制目标方法执行时机、如何执行的关键；如果程序没有调用 <code>ProceedingJoinPoint</code> 的 <code>proceed</code> 方法，则目标方法不会执行。</li><li>调用 <code>ProceedingJoinPoint</code> 的 <code>proceed</code> 方法时，还可以传入一个 <code>Object[ ]</code> 对象，该数组中的值将被传入目标方法作为实参 —— 这就是 <code>Around</code> 增强处理方法可以改变目标方法参数值的关键。这就是如果传入的 <code>Object[ ]</code> 数组长度与目标方法所需要的参数个数不相等，或者 <code>Object[ ]</code> 数组元素与目标方法所需参数的类型不匹配，程序就会出现异常。</li></ol><p><code>@Around</code> 功能虽然强大，但通常需要在线程安全的环境下使用。</p><p>因此，如果使用普通的 <code>Before</code>、<code>AfterReturning</code> 就能解决的问题，就没有必要使用 <code>Around</code> 了。如果需要目标方法执行之前和之后共享某种状态数据，则应该考虑使用 <code>Around</code>。尤其是需要使用增强处理阻止目标的执行，或需要改变目标方法的返回值时，则只能使用 <code>Around</code> 增强处理了。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Aspect</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AroundAdvice</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"@annotation(com.jueee.annotation.PermissionAnnotation)"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">permissionCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"permissionCheck()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">permissionCheck</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> joinPoint<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"===================开始增强处理==================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取请求参数，详见接口类</span>        <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> objects <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Long</span> id <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">JSONObject</span><span class="token punctuation">)</span> objects<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLong</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">JSONObject</span><span class="token punctuation">)</span> objects<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"id1-&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;"</span> <span class="token operator">+</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name1-&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;"</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 修改入参</span>        <span class="token class-name">JSONObject</span> object <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSONObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        object<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        object<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"lisi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        objects<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> object<span class="token punctuation">;</span>        <span class="token comment">// 将修改后的参数传入</span>        <span class="token keyword">return</span> joinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span>objects<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>处理日志：</p><pre class="language-none"><code class="language-none">服务端：===================开始增强处理===================id1-&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;23name1-&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;jueee客户端：{"code":200,"data":{"name":"lisi","id":8},"message":"SUCCESS"}</code></pre><h4 id="Before"><a href="#Before" class="headerlink" title="@Before"></a>@Before</h4><p><code>@Before</code> 注解指定的方法在切面切入目标方法之前执行，可以做一些 <code>Log</code> 处理，也可以做一些信息的统计，比如获取用户的请求 <code>URL</code> 以及用户的 <code>IP</code> 地址等等，这个在做个人站点的时候都能用得到，都是常用的方法。</p><p><code>JointPoint</code> 对象很有用，可以用它来获取一个签名，利用签名可以获取请求的包名、方法名，包括参数（通过 <code>joinPoint.getArgs()</code> 获取）等。如下示例：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Aspect</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BeforeAdvice</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 定义一个切面，拦截 com.mutest.controller 包下的所有方法     */</span>    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"execution(* com.jueee.controller..*.*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pointCut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment">/**     * 在上面定义的 pointCut() 切面方法之前执行该方法     * @param joinPoint jointPoint     */</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"pointCut()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doBefore</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"====doBefore方法进入了===="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取签名</span>        <span class="token class-name">Signature</span> signature <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取切入的包名</span>        <span class="token class-name">String</span> declaringTypeName <span class="token operator">=</span> signature<span class="token punctuation">.</span><span class="token function">getDeclaringTypeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取即将执行的方法名</span>        <span class="token class-name">String</span> funcName <span class="token operator">=</span> signature<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"即将执行方法为: {}，属于{}包"</span><span class="token punctuation">,</span> funcName<span class="token punctuation">,</span> declaringTypeName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 也可以用来记录一些信息，比如获取请求的 URL 和 IP</span>        <span class="token class-name">ServletRequestAttributes</span> attributes <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ServletRequestAttributes</span><span class="token punctuation">)</span> <span class="token class-name">RequestContextHolder</span><span class="token punctuation">.</span><span class="token function">getRequestAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HttpServletRequest</span> request <span class="token operator">=</span> attributes<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取请求 URL</span>        <span class="token class-name">String</span> url <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getRequestURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取请求 IP</span>        <span class="token class-name">String</span> ip <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getRemoteAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"用户请求的url为：{}，ip地址为：{}"</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> ip<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>输出日志：</p><pre class="language-none"><code class="language-none">: ====doBefore方法进入了====: 即将执行方法为: getGroupList，属于com.jueee.controller.TestController包: 用户请求的url为：http://localhost:8080/permission/check，ip地址为：127.0.0.1</code></pre><h4 id="After"><a href="#After" class="headerlink" title="@After"></a>@After</h4><p><code>@After</code> 注解和 <code>@Before</code> 注解相对应，指定的方法在切面切入目标方法之后执行，也可以做一些完成某方法之后的 Log 处理。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Aspect</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AfterAdvice</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 定义一个切面，拦截 com.mutest.controller 包下的所有方法     */</span>    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"execution(* com.jueee.controller..*.*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pointCut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment">/**     * 在上面定义的切面方法之后执行该方法     * @param joinPoint jointPoint     */</span>    <span class="token annotation punctuation">@After</span><span class="token punctuation">(</span><span class="token string">"pointCut()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doAfter</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"==== doAfter 方法进入了===="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Signature</span> signature <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> method <span class="token operator">=</span> signature<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"方法{}已经执行完"</span><span class="token punctuation">,</span> method<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>输出日志：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token operator">:</span> <span class="token operator">==</span><span class="token operator">==</span> doAfter 方法进入了<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">:</span> 方法getGroupList已经执行完</code></pre><h4 id="AfterReturning"><a href="#AfterReturning" class="headerlink" title="@AfterReturning"></a>@AfterReturning</h4><p><code>@AfterReturning</code> 注解和 <code>@After</code> 有些类似，区别在于 <code>@AfterReturning</code> 注解可以用来捕获切入方法执行完之后的返回值，对返回值进行业务逻辑上的增强处理，例如：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Aspect</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AfterReturningAdvice</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 定义一个切面，拦截 com.mutest.controller 包下的所有方法     */</span>    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"execution(* com.jueee.controller..*.*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pointCut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment">/**     * 在上面定义的切面方法返回后执行该方法，可以捕获返回对象或者对返回对象进行增强     * @param joinPoint joinPoint     * @param result result     */</span>    <span class="token annotation punctuation">@AfterReturning</span><span class="token punctuation">(</span>pointcut <span class="token operator">=</span> <span class="token string">"pointCut()"</span><span class="token punctuation">,</span> returning <span class="token operator">=</span> <span class="token string">"result"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doAfterReturning</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">,</span> <span class="token class-name">Object</span> result<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Signature</span> signature <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> classMethod <span class="token operator">=</span> signature<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"方法{}执行完毕，返回参数为：{}"</span><span class="token punctuation">,</span> classMethod<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 实际项目中可以根据业务做具体的返回值增强</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"对返回参数进行业务上的增强：{}"</span><span class="token punctuation">,</span> result <span class="token operator">+</span> <span class="token string">"增强版"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>日志如下：</p><pre class="language-none"><code class="language-none">: 方法getGroupList执行完毕，返回参数为：{"code":200,"message":"SUCCESS"}: 对返回参数进行业务上的增强：{"code":200,"message":"SUCCESS"}增强版</code></pre><h4 id="AfterThrowing"><a href="#AfterThrowing" class="headerlink" title="@AfterThrowing"></a>@AfterThrowing</h4><p>当被切方法执行过程中抛出异常时，会进入 <code>@AfterThrowing</code> 注解的方法中执行，在该方法中可以做一些异常的处理逻辑。</p><p>要注意的是 <code>throwing</code> 属性的值必须要和参数一致，否则会报错。</p><p>该方法中的第二个入参即为抛出的异常。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Aspect</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AfterThrowingAdvice</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 定义一个切面，拦截 com.mutest.controller 包下的所有方法     */</span>    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"execution(* com.jueee.controller..*.*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pointCut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment">/**     * 在上面定义的切面方法执行抛异常时，执行该方法     * @param joinPoint jointPoint     * @param ex ex     */</span>    <span class="token annotation punctuation">@AfterThrowing</span><span class="token punctuation">(</span>pointcut <span class="token operator">=</span> <span class="token string">"pointCut()"</span><span class="token punctuation">,</span> throwing <span class="token operator">=</span> <span class="token string">"ex"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterThrowing</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">,</span> <span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Signature</span> signature <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> method <span class="token operator">=</span> signature<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 处理异常的逻辑</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"执行方法{}出错，异常为：{}"</span><span class="token punctuation">,</span> method<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;Spring-AOP&quot;&gt;&lt;a href=&quot;#Spring-AOP&quot; class=&quot;headerlink&quot; title=&quot;Spring AOP&quot;&gt;&lt;/a&gt;Spring AOP&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;AOP 即 Aspect Oriented Program 面向切面编程&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;首先，在面向切面编程的思想里面，把功能分为核心业务功能，和周边功能。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;所谓的核心业务&lt;/strong&gt;，比如登陆，增加数据，删除数据都叫核心业务&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;所谓的周边功能&lt;/strong&gt;，比如性能统计，日志，事务管理等等&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;周边功能在 Spring 的面向切面编程AOP思想里，即被定义为切面。&lt;/p&gt;
&lt;p&gt;在面向切面编程AOP的思想里面，核心业务功能和切面功能分别独立进行开发，然后把切面功能和核心业务功能 &amp;quot;编织&amp;quot; 在一起，这就叫AOP。&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://jueee.github.io/categories/Java/"/>
    
    <category term="Spring" scheme="https://jueee.github.io/categories/Java/Spring/"/>
    
    
    <category term="Java" scheme="https://jueee.github.io/tags/Java/"/>
    
    <category term="Spring" scheme="https://jueee.github.io/tags/Spring/"/>
    
    <category term="AOP" scheme="https://jueee.github.io/tags/AOP/"/>
    
  </entry>
  
  <entry>
    <title>Spring 的 IOC 容器管理对象示例</title>
    <link href="https://jueee.github.io/2020/12/2021-01-03-Spring%E7%9A%84IOC%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86%E5%AF%B9%E8%B1%A1%E7%A4%BA%E4%BE%8B/"/>
    <id>https://jueee.github.io/2020/12/2021-01-03-Spring%E7%9A%84IOC%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86%E5%AF%B9%E8%B1%A1%E7%A4%BA%E4%BE%8B/</id>
    <published>2020-12-31T00:00:00.000Z</published>
    <updated>2021-01-04T01:41:15.972Z</updated>
    
    <content type="html"><![CDATA[<h3 id="IOC-控制反转"><a href="#IOC-控制反转" class="headerlink" title="IOC 控制反转"></a>IOC 控制反转</h3><p>IOC—Inversion of Control，即 “控制反转”，不是什么技术，而是一种设计思想。</p><p>在 Java 开发中，IOC 意味着将你设计好的对象交给容器控制，而不是传统的在你的对象内部直接控制。</p><p>所谓 IOC，对于 Spring 框架来说，就是由 Spring 来负责控制对象的生命周期和对象间的关系。</p><p>Spring 所倡导的开发方式就是如此，所有的类都会在 Spring 容器中登记。所有的类的创建、销毁都由 Spring 来控制，也就是说控制对象生存周期的不再是引用它的对象，而是 Spring。对于某个具体的对象而言，以前是它控制其他对象，现在是所有对象都被 Spring 控制，所以这叫控制反转。</p><a id="more"></a><h4 id="理解-IOC"><a href="#理解-IOC" class="headerlink" title="理解 IOC"></a>理解 IOC</h4><p>如何理解好 IOC 呢？理解好 IOC 的关键是要明确：</p><ul><li><p>谁控制谁，控制什么？</p><p>传统 Java SE 程序设计，我们直接在对象内部通过 new 进行创建对象，是程序主动去创建依赖对象；而 IOC 是有专门一个容器来创建这些对象，即由 IOC 容器来控制对 象的创建；谁控制谁？当然是 IOC 容器控制了对象；控制什么？那就是主要控制了外部资源获取（不只是对象包括比如文件等）。</p></li><li><p>为何是反转，哪些方面反转了？</p><p>有反转就有正转，传统应用程序是由我们自己在对象中主动控制去直接获取依赖对象，也就是正转；而反转则是由容器来帮忙创建及注入依赖对象；为何是反转？因为由容器帮我们查找及注入依赖对象，对象只是被动的接受依赖对象，所以是反转；哪些方面反转了？依赖对象的获取被反转了。</p></li></ul><h3 id="对象示例"><a href="#对象示例" class="headerlink" title="对象示例"></a>对象示例</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> userName<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUserName</span><span class="token punctuation">(</span><span class="token class-name">String</span> userName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>userName <span class="token operator">=</span> userName<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userName<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello,"</span><span class="token operator">+</span>userName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="传统方式加载对象"><a href="#传统方式加载对象" class="headerlink" title="传统方式加载对象"></a>传统方式加载对象</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">HelloWorld</span> helloWorld<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>helloWorld<span class="token punctuation">.</span><span class="token function">setUserName</span><span class="token punctuation">(</span><span class="token string">"周杰伦"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>helloWorld<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="IOC-容器加载对象"><a href="#IOC-容器加载对象" class="headerlink" title="IOC 容器加载对象"></a>IOC 容器加载对象</h3><h4 id="新建IOC配置文件"><a href="#新建IOC配置文件" class="headerlink" title="新建IOC配置文件"></a>新建 IOC 配置文件</h4><p>在 resources 目录下新建一个 IOC 的配置文件 applicationContext.xml，等下需要通过这个配置文件去创建 IOC 容器。</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>helloWorld<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.jueee.bean.HelloWorld<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>林俊杰<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span></code></pre><h4 id="IOC-普通方式加载"><a href="#IOC-普通方式加载" class="headerlink" title="IOC 普通方式加载"></a>IOC 普通方式加载</h4><ul><li>BeanFactory：表示 Spring IOC 容器，专门生产 bean 对象的工厂，负责配置，创建和管理 bean</li><li>bean：被 Spring IOC 容器管理的对象都是 bean，可以理解为 Spring 下皆为 bean</li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//1.从classpath路径去寻找配置文件，加载我们的配置</span><span class="token class-name">Resource</span> resources<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathResource</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2.加载配置文件之后，创建IOC容器</span><span class="token class-name">BeanFactory</span> factory<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">XmlBeanFactory</span><span class="token punctuation">(</span>resources<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3.从Spring IOC容器中获取指定名称的对象</span><span class="token class-name">HelloWorld</span> helloWorld<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HelloWorld</span><span class="token punctuation">)</span> factory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"helloWorld"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//--------------------IOC结束了---------------------</span>helloWorld<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="IOC-注解方式加载"><a href="#IOC-注解方式加载" class="headerlink" title="IOC 注解方式加载"></a>IOC 注解方式加载</h4><ul><li>先在测试类头上加个 @ContextConfiguration，意思是找到 Spring 容器，classpath 就是 resource 目录</li><li> @Autowired：表示自动按照类型去 Spring 容器中找到对应的 Bean 对象，然后自动注入 </li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token annotation punctuation">@ContextConfiguration</span><span class="token punctuation">(</span><span class="token string">"classpath:applicationContext.xml"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorldTest2</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">HelloWorld</span> helloWorld<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testHelloIOCNB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        helloWorld<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="IOC-加载工作原理"><a href="#IOC-加载工作原理" class="headerlink" title="IOC 加载工作原理"></a>IOC 加载工作原理</h4><p>IOC 的工作原理，使用到的技术有两个，反射和内省。</p><p>如下示例所示：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> className <span class="token operator">=</span> <span class="token string">"com.jueee.bean.HelloWorld"</span><span class="token punctuation">;</span><span class="token comment">//--------------------模拟IOC开始了-------------------</span><span class="token comment">//1.使用反射创建对象</span><span class="token class-name">Class</span> clzz <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Constructor</span> con <span class="token operator">=</span> clzz<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>con<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置构造器可访问性为true</span><span class="token class-name">Object</span> obj <span class="token operator">=</span> con<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2.使用内省机制获取所有的属性名称</span><span class="token class-name">BeanInfo</span> beanInfo <span class="token operator">=</span> <span class="token class-name">Introspector</span><span class="token punctuation">.</span><span class="token function">getBeanInfo</span><span class="token punctuation">(</span>clzz<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">PropertyDescriptor</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pds <span class="token operator">=</span> beanInfo<span class="token punctuation">.</span><span class="token function">getPropertyDescriptors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">PropertyDescriptor</span> pd <span class="token operator">:</span> pds<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> propertyName <span class="token operator">=</span> pd<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"userName"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>propertyName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        pd<span class="token punctuation">.</span><span class="token function">getWriteMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">"陈奕迅"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token class-name">HelloWorld</span> helloWorld <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HelloWorld</span><span class="token punctuation">)</span> obj<span class="token punctuation">;</span><span class="token comment">//--------------------模拟IOC结束了---------------------</span>helloWorld<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="IOC的容器类型"><a href="#IOC的容器类型" class="headerlink" title="IOC的容器类型"></a>IOC 的容器类型</h3><h4 id="BeanFactory"><a href="#BeanFactory" class="headerlink" title="BeanFactory"></a>BeanFactory</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//--------------------IOC开始了-------------------</span><span class="token comment">//1.从classpath路径去寻找配置文件，加载我们的配置</span><span class="token class-name">Resource</span> resources<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathResource</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2.加载配置文件之后，创建IOC容器</span><span class="token class-name">BeanFactory</span> factory<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">XmlBeanFactory</span><span class="token punctuation">(</span>resources<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3.从Spring IOC容器中获取指定名称的对象</span><span class="token class-name">HelloWorld</span> helloWorld<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HelloWorld</span><span class="token punctuation">)</span> factory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">HelloWorld</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//--------------------IOC结束了---------------------</span>helloWorld<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="ApplicationContext"><a href="#ApplicationContext" class="headerlink" title="ApplicationContext"></a>ApplicationContext</h4><p>ApplicationContext 这个其实是 BeanFactory 的一个子接口。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//--------------------IOC开始了-------------------</span><span class="token class-name">ApplicationContext</span> ctx<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"上面的代码已经创建Bean对象了，下面的获取Bean，获取已有的Bean"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">HelloWorld</span> helloWorld<span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"helloWorld"</span><span class="token punctuation">,</span><span class="token class-name">HelloWorld</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//--------------------IOC结束了---------------------</span>helloWorld<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="加载Bean的方式"><a href="#加载Bean的方式" class="headerlink" title="加载Bean的方式"></a>加载 Bean 的方式</h3><ol><li><p>根据 Bean 对象在容器中的 id 来获取。当有两个 id 重复时，就会报错。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">HelloWorld</span> helloWorld<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HelloWorld</span><span class="token punctuation">)</span> factory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"helloWorld"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>根据类型获取 Bean。当两个 bean 的 id 不一样，class 一样的时候，还是会报错，报类找到的 Bean 不是唯一的</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">HelloWorld</span> helloWorld<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HelloWorld</span><span class="token punctuation">)</span> factory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">HelloWorld</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>根据 id + 类型来获取 Bean，推荐方式。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">HelloWorld</span> helloWorld<span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"helloWorld"</span><span class="token punctuation">,</span><span class="token class-name">HelloWorld</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ol><h3 id="Bean的作用域"><a href="#Bean的作用域" class="headerlink" title="Bean的作用域"></a>Bean 的作用域</h3><ol><li><p>singltton: 单例，在 IOC 容器中的 Bean 实例，都是唯一的</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"helloWorld1"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.jueee.bean.HelloWorld"</span> scope<span class="token operator">=</span><span class="token string">"singleton"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">&gt;</span></code></pre></li><li><p>prototype: 多例，在 IOC 容器中的 Bean，每次都返回一个新的对象</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"helloWorld2"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.jueee.bean.HelloWorld"</span> scope<span class="token operator">=</span><span class="token string">"prototype"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">&gt;</span></code></pre></li></ol><h3 id="配置文件的import导入"><a href="#配置文件的import导入" class="headerlink" title="配置文件的import导入"></a>配置文件的 import 导入</h3><p>我们的 applicationContext.xml 里面写的是 Bean，当项目里面多个需要控制反转的配置，如果都写在一个 xml 文件里，太大，也太乱。</p><p>所以我们可以分开写每个包里面写个自己的 xml，然后 applicationContext.xml 直接 import 导入就可以了。</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--导入其他的配置文件--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>classpath:HelloWorld.xml<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>import</span><span class="token punctuation">&gt;</span></span></code></pre><h3 id="Bean的初始化和销毁"><a href="#Bean的初始化和销毁" class="headerlink" title="Bean的初始化和销毁"></a>Bean 的初始化和销毁</h3><ol><li><p>构建 Bean</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyDataSource</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">+</span> <span class="token string">" 初始化"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dowork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">+</span> <span class="token string">" 工作"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">+</span> <span class="token string">" 销毁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>配置 xml</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myDataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.jueee.bean.MyDataSource<span class="token punctuation">"</span></span>  <span class="token attr-name">init-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>open<span class="token punctuation">"</span></span> <span class="token attr-name">destroy-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>close<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span></code></pre></li><li><p>普通模式</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">MyDataSource</span> myDataSource<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">MyDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>myDataSource<span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>myDataSource<span class="token punctuation">.</span><span class="token function">dowork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>myDataSource<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>输出：</p><pre class="language-none"><code class="language-none">com.jueee.bean.MyDataSource@4ae33a11 初始化com.jueee.bean.MyDataSource@4ae33a11 工作com.jueee.bean.MyDataSource@4ae33a11 销毁</code></pre></li><li><p>IOC 模式</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token annotation punctuation">@ContextConfiguration</span><span class="token punctuation">(</span><span class="token string">"classpath:applicationContext4.xml"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyDataSourceTest</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">MyDataSource</span> myDataSource<span class="token punctuation">;</span>    <span class="token comment">//IOC容器的方式</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        myDataSource<span class="token punctuation">.</span><span class="token function">dowork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>输出（自动进行创建和销毁）：</p><p><img src="/images/2021/01/image-20201231164806006.png" alt="image-20201231164806006" loading="lazy"></p></li></ol>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;IOC-控制反转&quot;&gt;&lt;a href=&quot;#IOC-控制反转&quot; class=&quot;headerlink&quot; title=&quot;IOC 控制反转&quot;&gt;&lt;/a&gt;IOC 控制反转&lt;/h3&gt;&lt;p&gt;IOC—Inversion of Control，即 “控制反转”，不是什么技术，而是一种设计思想。&lt;/p&gt;
&lt;p&gt;在 Java 开发中，IOC 意味着将你设计好的对象交给容器控制，而不是传统的在你的对象内部直接控制。&lt;/p&gt;
&lt;p&gt;所谓 IOC，对于 Spring 框架来说，就是由 Spring 来负责控制对象的生命周期和对象间的关系。&lt;/p&gt;
&lt;p&gt;Spring 所倡导的开发方式就是如此，所有的类都会在 Spring 容器中登记。所有的类的创建、销毁都由 Spring 来控制，也就是说控制对象生存周期的不再是引用它的对象，而是 Spring。对于某个具体的对象而言，以前是它控制其他对象，现在是所有对象都被 Spring 控制，所以这叫控制反转。&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://jueee.github.io/categories/Java/"/>
    
    <category term="SpringBoot" scheme="https://jueee.github.io/categories/Java/SpringBoot/"/>
    
    <category term="Spring" scheme="https://jueee.github.io/categories/Java/Spring/"/>
    
    
    <category term="Java" scheme="https://jueee.github.io/tags/Java/"/>
    
    <category term="Spring" scheme="https://jueee.github.io/tags/Spring/"/>
    
    <category term="AOP" scheme="https://jueee.github.io/tags/AOP/"/>
    
  </entry>
  
  <entry>
    <title>Zeppelin 配置连接 MySQL 数据库</title>
    <link href="https://jueee.github.io/2020/12/2020-12-30-Zeppelin%E9%85%8D%E7%BD%AE%E8%BF%9E%E6%8E%A5MySQL%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>https://jueee.github.io/2020/12/2020-12-30-Zeppelin%E9%85%8D%E7%BD%AE%E8%BF%9E%E6%8E%A5MySQL%E6%95%B0%E6%8D%AE%E5%BA%93/</id>
    <published>2020-12-30T00:00:00.000Z</published>
    <updated>2020-12-30T06:57:39.796Z</updated>
    
    <content type="html"><![CDATA[<p>Zeppelin 原生支持 JDBC 链接。 但是默认的设置是指向 PostgreSQL。</p><p>一种最简单的办法就是直接修改 JDBC Interpreter 里面的内容，指向你自己的 MySQL 实例即可。</p><p>本文介绍如何创建 MySQL Interpreter 并连接。</p><a id="more"></a><h3 id="访问-Zeppelin"><a href="#访问-Zeppelin" class="headerlink" title="访问 Zeppelin"></a>访问 Zeppelin</h3><p>搭建安装好 Zeppelin 后，访问 <span class="exturl" data-url="aHR0cDovLzEyNy4wLjAuMTo4MDgwLyMv">http://127.0.0.1:8080/#/<i class="fa fa-external-link-alt"></i></span> 。结果如下：</p><p><img src="/images/2020/12/image-20201230143530356.png" alt="image-20201230143530356" loading="lazy"></p><h3 id="创建-MySQL-Interpreters"><a href="#创建-MySQL-Interpreters" class="headerlink" title="创建 MySQL Interpreters"></a>创建 MySQL Interpreters</h3><ol><li><p>选择 Interpreters</p><p><img src="/images/2020/12/image-20201230143619751.png" alt="image-20201230143619751" loading="lazy"></p></li><li><p>点击 Create 进行创建</p><p><img src="/images/2020/12/image-20201230143656818.png" alt="image-20201230143656818" loading="lazy"></p></li><li><p>配置解析器名称，注意解析器所属组选择 “jdbc”</p><p><img src="/images/2020/12/image-20201230143831845.png" alt="image-20201230143831845" loading="lazy"></p></li><li><p>配置 jdbc 连接属性</p><p><img src="/images/2020/12/image-20201230144116469.png" alt="image-20201230144116469" loading="lazy"></p></li><li><p>设置依赖 MySQL 驱动，这里选择 <code>mysql:mysql-connector-java:8.0.22</code>。</p><p><img src="/images/2020/12/image-20201230144218765.png" alt="image-20201230144218765" loading="lazy"></p></li><li><p>检查没有问题后，点击 Save 保存。</p></li></ol><h3 id="创建-MySQL-NoteBook"><a href="#创建-MySQL-NoteBook" class="headerlink" title="创建 MySQL NoteBook"></a>创建 MySQL NoteBook</h3><ol><li><p>选择创建  NoteBook</p><p><img src="/images/2020/12/image-20201230144519005.png" alt="image-20201230144519005" loading="lazy"></p></li><li><p>设置 NoteBook 名称，Interpreters 选择上面创建的 “mysql-Interpreters”。</p><p><img src="/images/2020/12/image-20201230144431472.png" alt="image-20201230144431472" loading="lazy"></p></li><li><p>输入 SQL，并点击执行，即可查看 执行结果 table。</p><p><img src="/images/2020/12/image-20201230144757351.png" alt="image-20201230144757351" loading="lazy"></p></li><li><p>选择 Bar Chart，并现在 keys 为 “statday”，values 为 “cnt”，即可查看相应的图表。</p><p><img src="/images/2020/12/image-20201230144858229.png" alt="image-20201230144858229" loading="lazy"></p></li><li><p>饼图、折线图等，与柱状图类似。不赘述。</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;Zeppelin 原生支持JDBC链接。 但是默认的设置是指向PostgreSQL。&lt;/p&gt;
&lt;p&gt;一种最简单的办法就是直接修改JDBC Interpreter里面的内容，指向你自己的MySQL实例即可。&lt;/p&gt;
&lt;p&gt;本文介绍如何创建 MySQL Interpreter 并连接。&lt;/p&gt;</summary>
    
    
    
    <category term="Apache" scheme="https://jueee.github.io/categories/Apache/"/>
    
    <category term="Database" scheme="https://jueee.github.io/categories/Database/"/>
    
    <category term="MySQL" scheme="https://jueee.github.io/categories/Database/MySQL/"/>
    
    <category term="Zeppelin" scheme="https://jueee.github.io/categories/Apache/Zeppelin/"/>
    
    
    <category term="Apache" scheme="https://jueee.github.io/tags/Apache/"/>
    
    <category term="MySQL" scheme="https://jueee.github.io/tags/MySQL/"/>
    
    <category term="Zeppelin" scheme="https://jueee.github.io/tags/Zeppelin/"/>
    
  </entry>
  
  <entry>
    <title>Java 中使用 RSA 算法加密</title>
    <link href="https://jueee.github.io/2020/12/2020-12-29-Java%E4%B8%AD%E4%BD%BF%E7%94%A8RSA%E7%AE%97%E6%B3%95%E5%8A%A0%E5%AF%86/"/>
    <id>https://jueee.github.io/2020/12/2020-12-29-Java%E4%B8%AD%E4%BD%BF%E7%94%A8RSA%E7%AE%97%E6%B3%95%E5%8A%A0%E5%AF%86/</id>
    <published>2020-12-29T00:00:00.000Z</published>
    <updated>2020-12-30T06:51:35.260Z</updated>
    
    <content type="html"><![CDATA[<h3 id="RSA-介绍"><a href="#RSA-介绍" class="headerlink" title="RSA 介绍"></a>RSA 介绍</h3><p><strong>RSA 加密算法</strong>是一种<strong>非对称加密算法</strong>。</p><p>RSA 是一对密钥。分别是<strong>公钥</strong>和<strong>私钥</strong> , 这个公钥和私钥其实就是一组数字！其二进制位长度可以是 1024 位或者 2048 位。长度越长其加密强度越大，目前为止公之于众的能破解的最大长度为 768 位密钥，只要高于 768 位，相对就比较安全.</p><h4 id="RSA加密的方式"><a href="#RSA加密的方式" class="headerlink" title="RSA加密的方式"></a>RSA 加密的方式</h4><ul><li>使用<strong>公钥</strong>加密的数据，利用<strong>私钥</strong>进行解密</li><li>使用<strong>私钥</strong>加密的数据，利用<strong>公钥</strong>进行解密</li></ul><h4 id="RSA加密的缺点"><a href="#RSA加密的缺点" class="headerlink" title="RSA加密的缺点"></a>RSA 加密的缺点</h4><p>由于 RSA 算法的原理都是大数计算，使得 RSA 最快的情况也比<strong>对称加密算法</strong>慢上好几倍。</p><a id="more"></a><h3 id="使用-RSA"><a href="#使用-RSA" class="headerlink" title="使用 RSA"></a>使用 RSA</h3><p>引入依赖：</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/commons-codec/commons-codec --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>commons-codec<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>commons-codec<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.15<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></code></pre><p>RSA 代码：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>codec<span class="token punctuation">.</span>binary<span class="token punctuation">.</span></span><span class="token class-name">Base64</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span></span><span class="token class-name">Cipher</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>interfaces<span class="token punctuation">.</span></span><span class="token class-name">RSAPrivateKey</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>interfaces<span class="token punctuation">.</span></span><span class="token class-name">RSAPublicKey</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>spec<span class="token punctuation">.</span></span><span class="token class-name">PKCS8EncodedKeySpec</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>spec<span class="token punctuation">.</span></span><span class="token class-name">X509EncodedKeySpec</span><span class="token punctuation">;</span><span class="token comment">/** * Rsa 工具类，公钥私钥生成，加解密 **/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RSAUtil</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 公钥解密     *     * @param publicKeyText 公钥     * @param text 待解密的信息     * @return /     * @throws Exception /     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">decryptByPublicKey</span><span class="token punctuation">(</span><span class="token class-name">String</span> publicKeyText<span class="token punctuation">,</span> <span class="token class-name">String</span> text<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token class-name">X509EncodedKeySpec</span> x509EncodedKeySpec <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">X509EncodedKeySpec</span><span class="token punctuation">(</span><span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">decodeBase64</span><span class="token punctuation">(</span>publicKeyText<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">KeyFactory</span> keyFactory <span class="token operator">=</span> <span class="token class-name">KeyFactory</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"RSA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">PublicKey</span> publicKey <span class="token operator">=</span> keyFactory<span class="token punctuation">.</span><span class="token function">generatePublic</span><span class="token punctuation">(</span>x509EncodedKeySpec<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Cipher</span> cipher <span class="token operator">=</span> <span class="token class-name">Cipher</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"RSA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cipher<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">Cipher</span><span class="token punctuation">.</span>DECRYPT_MODE<span class="token punctuation">,</span> publicKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> result <span class="token operator">=</span> cipher<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span><span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">decodeBase64</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 私钥加密     *     * @param privateKeyText 私钥     * @param text 待加密的信息     * @return /     * @throws Exception /     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">encryptByPrivateKey</span><span class="token punctuation">(</span><span class="token class-name">String</span> privateKeyText<span class="token punctuation">,</span> <span class="token class-name">String</span> text<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token class-name">PKCS8EncodedKeySpec</span> pkcs8EncodedKeySpec <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PKCS8EncodedKeySpec</span><span class="token punctuation">(</span><span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">decodeBase64</span><span class="token punctuation">(</span>privateKeyText<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">KeyFactory</span> keyFactory <span class="token operator">=</span> <span class="token class-name">KeyFactory</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"RSA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">PrivateKey</span> privateKey <span class="token operator">=</span> keyFactory<span class="token punctuation">.</span><span class="token function">generatePrivate</span><span class="token punctuation">(</span>pkcs8EncodedKeySpec<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Cipher</span> cipher <span class="token operator">=</span> <span class="token class-name">Cipher</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"RSA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cipher<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">Cipher</span><span class="token punctuation">.</span>ENCRYPT_MODE<span class="token punctuation">,</span> privateKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> result <span class="token operator">=</span> cipher<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>text<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">encodeBase64String</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 私钥解密     *     * @param privateKeyText 私钥     * @param text 待解密的文本     * @return /     * @throws Exception /     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">decryptByPrivateKey</span><span class="token punctuation">(</span><span class="token class-name">String</span> privateKeyText<span class="token punctuation">,</span> <span class="token class-name">String</span> text<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token class-name">PKCS8EncodedKeySpec</span> pkcs8EncodedKeySpec5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PKCS8EncodedKeySpec</span><span class="token punctuation">(</span><span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">decodeBase64</span><span class="token punctuation">(</span>privateKeyText<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">KeyFactory</span> keyFactory <span class="token operator">=</span> <span class="token class-name">KeyFactory</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"RSA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">PrivateKey</span> privateKey <span class="token operator">=</span> keyFactory<span class="token punctuation">.</span><span class="token function">generatePrivate</span><span class="token punctuation">(</span>pkcs8EncodedKeySpec5<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Cipher</span> cipher <span class="token operator">=</span> <span class="token class-name">Cipher</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"RSA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cipher<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">Cipher</span><span class="token punctuation">.</span>DECRYPT_MODE<span class="token punctuation">,</span> privateKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> result <span class="token operator">=</span> cipher<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span><span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">decodeBase64</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 公钥加密     *     * @param publicKeyText 公钥     * @param text 待加密的文本     * @return /     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">encryptByPublicKey</span><span class="token punctuation">(</span><span class="token class-name">String</span> publicKeyText<span class="token punctuation">,</span> <span class="token class-name">String</span> text<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token class-name">X509EncodedKeySpec</span> x509EncodedKeySpec2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">X509EncodedKeySpec</span><span class="token punctuation">(</span><span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">decodeBase64</span><span class="token punctuation">(</span>publicKeyText<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">KeyFactory</span> keyFactory <span class="token operator">=</span> <span class="token class-name">KeyFactory</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"RSA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">PublicKey</span> publicKey <span class="token operator">=</span> keyFactory<span class="token punctuation">.</span><span class="token function">generatePublic</span><span class="token punctuation">(</span>x509EncodedKeySpec2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Cipher</span> cipher <span class="token operator">=</span> <span class="token class-name">Cipher</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"RSA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cipher<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">Cipher</span><span class="token punctuation">.</span>ENCRYPT_MODE<span class="token punctuation">,</span> publicKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> result <span class="token operator">=</span> cipher<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>text<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">encodeBase64String</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 构建RSA密钥对     *     * @return /     * @throws NoSuchAlgorithmException /     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">RsaKeyPair</span> <span class="token function">generateKeyPair</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchAlgorithmException</span> <span class="token punctuation">{</span>        <span class="token class-name">KeyPairGenerator</span> keyPairGenerator <span class="token operator">=</span> <span class="token class-name">KeyPairGenerator</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"RSA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        keyPairGenerator<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">KeyPair</span> keyPair <span class="token operator">=</span> keyPairGenerator<span class="token punctuation">.</span><span class="token function">generateKeyPair</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">RSAPublicKey</span> rsaPublicKey <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">RSAPublicKey</span><span class="token punctuation">)</span> keyPair<span class="token punctuation">.</span><span class="token function">getPublic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">RSAPrivateKey</span> rsaPrivateKey <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">RSAPrivateKey</span><span class="token punctuation">)</span> keyPair<span class="token punctuation">.</span><span class="token function">getPrivate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> publicKeyString <span class="token operator">=</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">encodeBase64String</span><span class="token punctuation">(</span>rsaPublicKey<span class="token punctuation">.</span><span class="token function">getEncoded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> privateKeyString <span class="token operator">=</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">encodeBase64String</span><span class="token punctuation">(</span>rsaPrivateKey<span class="token punctuation">.</span><span class="token function">getEncoded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RsaKeyPair</span><span class="token punctuation">(</span>publicKeyString<span class="token punctuation">,</span> privateKeyString<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * RSA密钥对对象     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">RsaKeyPair</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> publicKey<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> privateKey<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">RsaKeyPair</span><span class="token punctuation">(</span><span class="token class-name">String</span> publicKey<span class="token punctuation">,</span> <span class="token class-name">String</span> privateKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>publicKey <span class="token operator">=</span> publicKey<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>privateKey <span class="token operator">=</span> privateKey<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getPublicKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> publicKey<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getPrivateKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> privateKey<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="测试-RSA"><a href="#测试-RSA" class="headerlink" title="测试 RSA"></a>测试 RSA</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RSAUtilTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> SRC <span class="token operator">=</span> <span class="token string">"123456"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testRSA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            <span class="token class-name">RSAUtil</span><span class="token punctuation">.</span><span class="token class-name">RsaKeyPair</span> keyPair <span class="token operator">=</span> <span class="token class-name">RSAUtil</span><span class="token punctuation">.</span><span class="token function">generateKeyPair</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"公钥："</span> <span class="token operator">+</span> keyPair<span class="token punctuation">.</span><span class="token function">getPublicKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"私钥："</span> <span class="token operator">+</span> keyPair<span class="token punctuation">.</span><span class="token function">getPrivateKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">test1</span><span class="token punctuation">(</span>keyPair<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">test2</span><span class="token punctuation">(</span>keyPair<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 公钥加密私钥解密     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token class-name">RSAUtil</span><span class="token punctuation">.</span><span class="token class-name">RsaKeyPair</span> keyPair<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"***************** 公钥加密私钥解密开始 *****************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> text1 <span class="token operator">=</span> <span class="token class-name">RSAUtil</span><span class="token punctuation">.</span><span class="token function">encryptByPublicKey</span><span class="token punctuation">(</span>keyPair<span class="token punctuation">.</span><span class="token function">getPublicKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> SRC<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> text2 <span class="token operator">=</span> <span class="token class-name">RSAUtil</span><span class="token punctuation">.</span><span class="token function">decryptByPrivateKey</span><span class="token punctuation">(</span>keyPair<span class="token punctuation">.</span><span class="token function">getPrivateKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> text1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"加密前："</span> <span class="token operator">+</span> SRC<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"加密后："</span> <span class="token operator">+</span> text1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"解密后："</span> <span class="token operator">+</span> text2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>SRC<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>text2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"解密字符串和原始字符串一致，解密成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"解密字符串和原始字符串不一致，解密失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"***************** 公钥加密私钥解密结束 *****************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 私钥加密公钥解密     * @throws Exception /     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token class-name">RSAUtil</span><span class="token punctuation">.</span><span class="token class-name">RsaKeyPair</span> keyPair<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"***************** 私钥加密公钥解密开始 *****************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> text1 <span class="token operator">=</span> <span class="token class-name">RSAUtil</span><span class="token punctuation">.</span><span class="token function">encryptByPrivateKey</span><span class="token punctuation">(</span>keyPair<span class="token punctuation">.</span><span class="token function">getPrivateKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> SRC<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> text2 <span class="token operator">=</span> <span class="token class-name">RSAUtil</span><span class="token punctuation">.</span><span class="token function">decryptByPublicKey</span><span class="token punctuation">(</span>keyPair<span class="token punctuation">.</span><span class="token function">getPublicKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> text1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"加密前："</span> <span class="token operator">+</span> SRC<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"加密后："</span> <span class="token operator">+</span> text1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"解密后："</span> <span class="token operator">+</span> text2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>SRC<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>text2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"解密字符串和原始字符串一致，解密成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"解密字符串和原始字符串不一致，解密失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"***************** 私钥加密公钥解密结束 *****************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>输入结果：</p><pre class="language-none"><code class="language-none">公钥：MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCL8TmwbG0Gi5fjs+0GI/vQnLfxzk66o44VurAQwvsL3EUbra4S/2gPn9vIBP9vW/FwUsRRHesqRVipS7I6idbUXIOH5g1i6qNborZOLb+lB2cXay1Sjc+sxEnAciVjQEdcKi56mvUuz6waJwzhB3HkruKcXJKAvux3WOECTLLgJQIDAQAB私钥：MIICdgIBADANBgkqhkiG9w0BAQEFAASCAmAwggJcAgEAAoGBAIvxObBsbQaLl+Oz7QYj+9Cct/HOTrqjjhW6sBDC+wvcRRutrhL/aA+f28gE/29b8XBSxFEd6ypFWKlLsjqJ1tRcg4fmDWLqo1uitk4tv6UHZxdrLVKNz6zEScByJWNAR1wqLnqa9S7PrBonDOEHceSu4pxckoC+7HdY4QJMsuAlAgMBAAECgYAnUmXiY+UStMC+M72DPzMvwAmTwWOv3+s5wdZdL1x5TbCBgYDrR6cG1OVdw8G+mbgy1p7hKCX/H7M1BtcSyc56PQi77DvCaA3f/wr1i7jhDI+RFmL5unjKcuuyAfAKLxNxx16ErtxdKleygq645F48Qg8YIzF+9pqV1TPjk6P7tQJBAMJMTu+3nP+od92h78ekkkiC4KVOaI14wgvmSCj3qvBl1UGHgJZmmO2N6zp0HAwam1xc0PvQ9nV1tqbF5U+Uh4sCQQC4Yf+o67xiR9XCEEJyarEGQRie6tOEG0slg9WEDTrgEx3M8SfKdgjh3pzhpyLGf7CiwicnLiNfCB3o3l2m8q0PAkEAwM9Oye2wu7dnc6W+N6SlkZVm7kP31uQN1BcqZpUXqcW0MXoQ7a9UdPCPjIsqRgylPavRqwJ7gKZWofriCu2+7wJAIkMDkM4NOW4DyIXg8wXkUzcxbgZQu5Geyx/OQzV6JT0oIncFX9fDGsWU/VFjYuNDXVsaj2tBY11MwYLggC9D/QJAbgNEEDLpwOizVDWPy3qAgCifWEyg/FL5v9kVHo2+N19w0HlB0NMdYPVNEuPFxTxzzsnE087wEbhFHFjt9YjlkQ==***************** 公钥加密私钥解密开始 *****************加密前：123456加密后：J8ov9OnSNuUL4biVYK09CZ1diwxXyiU1o/k8OzGkYy6MQ60yFNe3OaQ8Nu4kYaBhuZrd9jwEdl9EsUjwkwJ7U9yKe3U9lMcj/cEkrnNNEkDvKHBsq/NEIqrGOfW8+lfx/T6guN3KWALS6T0asBfE6uBrdRlIXhRrHyQ/XKRe/IA=解密后：123456解密字符串和原始字符串一致，解密成功***************** 公钥加密私钥解密结束 ********************************** 私钥加密公钥解密开始 *****************加密前：123456加密后：Hw2vOZXe3nivbS1hR0dZhEtpSeaAfGrZiwOkgHNkPi1auNsgVM0MT7InaqdzOgu+f9AgNhOHhaNzROr4rI6RflsfEXeQp4gjR2v6Y0IJiT+djKIi8mF8esIEojXFwPqkNGFyzhS4dxP7P5voo5qLzU4RPVfmG0ldw+P5MA7p6tc=解密后：123456解密字符串和原始字符串一致，解密成功***************** 私钥加密公钥解密结束 *****************</code></pre>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;RSA-介绍&quot;&gt;&lt;a href=&quot;#RSA-介绍&quot; class=&quot;headerlink&quot; title=&quot;RSA 介绍&quot;&gt;&lt;/a&gt;RSA 介绍&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;RSA 加密算法&lt;/strong&gt;是一种&lt;strong&gt;非对称加密算法&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;RSA 是一对密钥。分别是&lt;strong&gt;公钥&lt;/strong&gt;和&lt;strong&gt;私钥&lt;/strong&gt; , 这个公钥和私钥其实就是一组数字！其二进制位长度可以是 1024 位或者 2048 位。长度越长其加密强度越大，目前为止公之于众的能破解的最大长度为 768 位密钥，只要高于 768 位，相对就比较安全.&lt;/p&gt;
&lt;h4 id=&quot;RSA加密的方式&quot;&gt;&lt;a href=&quot;#RSA加密的方式&quot; class=&quot;headerlink&quot; title=&quot;RSA加密的方式&quot;&gt;&lt;/a&gt;RSA 加密的方式&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;使用&lt;strong&gt;公钥&lt;/strong&gt;加密的数据，利用&lt;strong&gt;私钥&lt;/strong&gt;进行解密&lt;/li&gt;
&lt;li&gt;使用&lt;strong&gt;私钥&lt;/strong&gt;加密的数据，利用&lt;strong&gt;公钥&lt;/strong&gt;进行解密&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;RSA加密的缺点&quot;&gt;&lt;a href=&quot;#RSA加密的缺点&quot; class=&quot;headerlink&quot; title=&quot;RSA加密的缺点&quot;&gt;&lt;/a&gt;RSA 加密的缺点&lt;/h4&gt;&lt;p&gt;由于 RSA 算法的原理都是大数计算，使得 RSA 最快的情况也比&lt;strong&gt;对称加密算法&lt;/strong&gt;慢上好几倍。&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://jueee.github.io/categories/Java/"/>
    
    <category term="JavaClass" scheme="https://jueee.github.io/categories/Java/JavaClass/"/>
    
    
    <category term="JavaClass" scheme="https://jueee.github.io/tags/JavaClass/"/>
    
    <category term="Java" scheme="https://jueee.github.io/tags/Java/"/>
    
    <category term="RSA" scheme="https://jueee.github.io/tags/RSA/"/>
    
  </entry>
  
</feed>
