<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小决的专栏</title>
  
  <subtitle>进一寸有一寸的欢喜</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://jueee.github.io/"/>
  <updated>2020-08-17T12:15:30.600Z</updated>
  <id>https://jueee.github.io/</id>
  
  <author>
    <name>小决</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Arthas 之根据输入查找命令执行类</title>
    <link href="https://jueee.github.io/2020/08/2020-08-17-Arthas%E4%B9%8B%E6%A0%B9%E6%8D%AE%E8%BE%93%E5%85%A5%E6%9F%A5%E6%89%BE%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%B1%BB/"/>
    <id>https://jueee.github.io/2020/08/2020-08-17-Arthas%E4%B9%8B%E6%A0%B9%E6%8D%AE%E8%BE%93%E5%85%A5%E6%9F%A5%E6%89%BE%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%B1%BB/</id>
    <published>2020-08-17T00:00:00.000Z</published>
    <updated>2020-08-17T12:15:30.600Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍 Arthas 命令路由的整个过程，包括如何注册命令、如何读取客户端的输入、如何根据输入找到对应的命令执行类。最后以一个基础命令 help 为例，简要介绍命令执行类是如何执行，如何接收参数，以及如何向客户端返回数据的。</p><h3 id="在ShellServer中注册命令"><a href="#在ShellServer中注册命令" class="headerlink" title="在ShellServer中注册命令"></a>在 ShellServer 中注册命令</h3><p>ShellServer 是与命令行交互的服务端的核心类，启动 Arthas 服务端的整个过程（<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvYXJ0aGFzL2Jsb2IvbWFzdGVyL2NvcmUvc3JjL21haW4vamF2YS9jb20vdGFvYmFvL2FydGhhcy9jb3JlL3NlcnZlci9BcnRoYXNCb290c3RyYXAuamF2YQ==">com.taobao.arthas.core.server.ArthasBootstrap<i class="fa fa-external-link-alt"></i></span> 类的 bind () 方法）都是围绕着 ShellServer 进行的。</p><p>ShellServer 是开源项目 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2VjbGlwc2UtdmVydHgvdmVydC54">vert.x<i class="fa fa-external-link-alt"></i></span> 提供的，Arthas 仅在此之上进行了少量的二次开发。</p><p>在 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvYXJ0aGFzL2Jsb2IvbWFzdGVyL2NvcmUvc3JjL21haW4vamF2YS9jb20vdGFvYmFvL2FydGhhcy9jb3JlL3NlcnZlci9BcnRoYXNCb290c3RyYXAuamF2YQ==">ArthasBootstrap<i class="fa fa-external-link-alt"></i></span>&nbsp;类的 bind () 方法中，首先通过一个自建的类 <code>BuiltinCommandPack</code> 来读取所有的命令类：</p><p><img src="/images/2020/08/1597663881528.png" alt="1597663881528" loading="lazy"></p><p>而这个 <code>BuiltinCommandPack</code> 是怎样运转的呢？非常简单，仅仅是将一个个类添加到一个 list 里而已。</p><p>见 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvYXJ0aGFzL2Jsb2IvbWFzdGVyL2NvcmUvc3JjL21haW4vamF2YS9jb20vdGFvYmFvL2FydGhhcy9jb3JlL2NvbW1hbmQvQnVpbHRpbkNvbW1hbmRQYWNrLmphdmE=">BuiltinCommandPack.java<i class="fa fa-external-link-alt"></i></span>：</p><p><img src="/images/2020/08/1597663968735.png" alt="1597663968735" loading="lazy"></p><p>接着将所有的 CommandResolver 都调用 ShellServer 的 registerCommandResolver () 方法注册进 ShellServer，整个命令注册的过程就完成了：</p><p><img src="/images/2020/08/1597664133197.png" alt="1597664133197" loading="lazy"></p><h3 id="读取客户端的输入"><a href="#读取客户端的输入" class="headerlink" title="读取客户端的输入"></a>读取客户端的输入</h3><p>真正接收客户端输入的是 ShellServer 中注册的 TermServer，Arthas 默认注册了两个 TermServer：</p><ul><li>提供 Telnet 客户端的 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvYXJ0aGFzL2Jsb2IvbWFzdGVyL2NvcmUvc3JjL21haW4vamF2YS9jb20vdGFvYmFvL2FydGhhcy9jb3JlL3NoZWxsL3Rlcm0vaW1wbC9UZWxuZXRUZXJtU2VydmVyLmphdmE=">TelnetTermServer<i class="fa fa-external-link-alt"></i></span></li><li> 提供 WebSocket 客户端的 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvYXJ0aGFzL2Jsb2IvbWFzdGVyL2NvcmUvc3JjL21haW4vamF2YS9jb20vdGFvYmFvL2FydGhhcy9jb3JlL3NoZWxsL3Rlcm0vaW1wbC9IdHRwVGVybVNlcnZlci5qYXZh">HttpTermServer<i class="fa fa-external-link-alt"></i></span></li></ul><p>见 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvYXJ0aGFzL2Jsb2IvbWFzdGVyL2NvcmUvc3JjL21haW4vamF2YS9jb20vdGFvYmFvL2FydGhhcy9jb3JlL3NlcnZlci9BcnRoYXNCb290c3RyYXAuamF2YQ==">ArthasBootstrap<i class="fa fa-external-link-alt"></i></span> 类的 bind () 方法：</p><p><img src="/images/2020/08/1597664402161.png" alt="1597664402161" loading="lazy"></p><p>这两个 TermServer 的实现在读取客户端输入的部分是一样的：</p><p><img src="/images/2020/08/1597664489423.png" alt="1597664489423" loading="lazy"></p><p>客户端的输入到来时，通过 TermServer 来 handle，而这个 TermServer 是哪儿来的呢？是从 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvYXJ0aGFzL2Jsb2IvbWFzdGVyL2NvcmUvc3JjL21haW4vamF2YS9jb20vdGFvYmFvL2FydGhhcy9jb3JlL3NoZWxsL3Rlcm0vaW1wbC9IdHRwVGVybVNlcnZlci5qYXZh">ShellServerImpl<i class="fa fa-external-link-alt"></i></span> 中传来的 TermServerTermHandler。</p><p>而这个 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvYXJ0aGFzL2Jsb2IvbWFzdGVyL2NvcmUvc3JjL21haW4vamF2YS9jb20vdGFvYmFvL2FydGhhcy9jb3JlL3NoZWxsL2hhbmRsZXJzL3NlcnZlci9UZXJtU2VydmVyVGVybUhhbmRsZXIuamF2YQ==">TermServerTermHandler<i class="fa fa-external-link-alt"></i></span> 是怎样 handle 的呢？调用 ShellServer 的 handleTerm () 方法。</p><p><img src="/images/2020/08/1597665051394.png" alt="1597665051394" loading="lazy"></p><p>在这里，一个 session 就是一个客户端的连接（这很容易理解），而 ShellImpl 的 readline () 方法，就是读取客户端输入的方法。见：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvYXJ0aGFzL2Jsb2IvbWFzdGVyL2NvcmUvc3JjL21haW4vamF2YS9jb20vdGFvYmFvL2FydGhhcy9jb3JlL3NoZWxsL2ltcGwvU2hlbGxJbXBsLmphdmE=">ShellImpl<i class="fa fa-external-link-alt"></i></span></p><p><img src="/images/2020/08/1597665260376.png" alt="1597665260376" loading="lazy"></p><h3 id="查找对应的命令执行类"><a href="#查找对应的命令执行类" class="headerlink" title="查找对应的命令执行类"></a>查找对应的命令执行类</h3><p>ShellImpl 的 readline () 方法，最终将客户端的输入转换为 String，交给 ShellLineHandler 的 handle () 方法来处理。</p><p>在 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvYXJ0aGFzL2Jsb2IvbWFzdGVyL2NvcmUvc3JjL21haW4vamF2YS9jb20vdGFvYmFvL2FydGhhcy9jb3JlL3NoZWxsL2hhbmRsZXJzL3NoZWxsL1NoZWxsTGluZUhhbmRsZXIuamF2YQ==">ShellLineHandler<i class="fa fa-external-link-alt"></i></span> 的 handle () 方法中，首先把 String 类型的输入转换为第三方组件 CLI 中的 CliToken 的 List：</p><p><img src="/images/2020/08/1597665436179.png" alt="1597665436179" loading="lazy"></p><p>在 List<clitoken> 中，first 是输入的命令，而剩余部分则是命令的参数。在拿到输入的命令后，先做一些判断，处理几个内建命令：</clitoken></p><p><img src="/images/2020/08/1597665536086.png" alt="1597665536086" loading="lazy"></p><ul><li>输入的是 exit、logout 或 quit，将会直接关闭客户端。</li><li>输入的是 jobs，将会返回当前正在后台执行的异步任务。</li><li>输入的是 fg，将会将暂停的异步任务拉到前台执行。</li><li>输入的是 bg，将会将暂停的异步任务放到后台执行。</li><li>输入的是 kill，将会强制终止所有<span class="exturl" data-url="aHR0cHM6Ly9hbGliYWJhLmdpdGh1Yi5pby9hcnRoYXMvYXN5bmMuaHRtbA==">异步任务<i class="fa fa-external-link-alt"></i></span>。</li></ul><p>如果输入的不是这些关键词，则开始创建 Job。</p><p>创建 Job 又是一个非常绕的过程，从 ShellLineHandler.createJob () 走到 ShellImpl.createJob () 再走到 JobControllerImpl.createJob ()。</p><p>见：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvYXJ0aGFzL2Jsb2IvbWFzdGVyL2NvcmUvc3JjL21haW4vamF2YS9jb20vdGFvYmFvL2FydGhhcy9jb3JlL3NoZWxsL3N5c3RlbS9pbXBsL0pvYkNvbnRyb2xsZXJJbXBsLmphdmE=">JobControllerImpl.java<i class="fa fa-external-link-alt"></i></span></p><p><img src="/images/2020/08/1597665729558.png" alt="1597665729558" loading="lazy"></p><p>主要是调用 createProcess () 方法创建 Process，判断是在前台执行还是在后台执行，然后用 Process 生成 Job。</p><p>核心的 createProcess () 方法：</p><p><img src="/images/2020/08/1597665851789.png" alt="1597665851789" loading="lazy"></p><p>然后到了将输入路由到命令执行类的地方了！</p><p>开始看 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvYXJ0aGFzL2Jsb2IvbWFzdGVyL2NvcmUvc3JjL21haW4vamF2YS9jb20vdGFvYmFvL2FydGhhcy9jb3JlL3NoZWxsL3N5c3RlbS9pbXBsL0ludGVybmFsQ29tbWFuZE1hbmFnZXIuamF2YQ==">InternalCommandManager<i class="fa fa-external-link-alt"></i></span> 的 getCommand () 方法：</p><p><img src="/images/2020/08/1597665933730.png" alt="1597665933730" loading="lazy"></p><p>到这里，根据客户端的输入寻找对应的命令执行类的整个流程终于结束了，接下来就是各个命令执行类自己发挥的时刻了。</p><h3 id="help命令的执行过程"><a href="#help命令的执行过程" class="headerlink" title="help命令的执行过程"></a>help 命令的执行过程</h3><p>下面我以基础命令 help 为例，简要介绍命令执行类是如何执行，如何接收参数，以及如何向客户端返回数据的。</p><p>help 命令对应的命令执行类是 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvYXJ0aGFzL2Jsb2IvbWFzdGVyL2NvcmUvc3JjL21haW4vamF2YS9jb20vdGFvYmFvL2FydGhhcy9jb3JlL2NvbW1hbmQvYmFzaWMxMDAwL0hlbHBDb21tYW5kLmphdmE=">HelpCommand<i class="fa fa-external-link-alt"></i></span>，其中 process () 方法是命令执行类的核心方法：</p><p><img src="/images/2020/08/1597666134279.png" alt="1597666134279" loading="lazy"></p><p>可以看到，help 命令的 process () 方法非常简单，就是获取所有的命令，生成 String 类型的文本。</p><p>不过这里有一点特殊之处，help 指令可以输入参数。根据参数中传来的命令生成的命令帮助内容。</p><ul><li>如果参数是空，返回 mainHelp () 方法生成的全局帮助内容</li><li>如果参数不为空，则返回 commandHelp () 方法</li></ul><p>那么，help 指令是如何接收参数的呢？奥妙就在下面的这个方法里了：</p><p><img src="/images/2020/08/1597666365077.png" alt="1597666365077" loading="lazy"></p><p>使用 @Argument 注解的方法用来接收参数，在这里就是把输入的内容放到 cmd 这个变量里，然后 findCommand () 方法去判断 cmd 变量的内容是否有命令与之相匹配：</p><p><img src="/images/2020/08/1597666394962.png" alt="1597666394962" loading="lazy"></p><p>另外，输出到客户端的内容并不是简单的文本，而是通过淘宝的 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvdGV4dC11aQ==">text-ui<i class="fa fa-external-link-alt"></i></span> 包进行了排版。</p><p>见 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvYXJ0aGFzL2Jsb2IvbWFzdGVyL2NvcmUvc3JjL21haW4vamF2YS9jb20vdGFvYmFvL2FydGhhcy9jb3JlL2NvbW1hbmQvdmlldy9IZWxwVmlldy5qYXZh">HelpView.java<i class="fa fa-external-link-alt"></i></span>：</p><p><img src="/images/2020/08/1597666484624.png" alt="1597666484624" loading="lazy"></p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3M/X19iaXo9TXpVNE9EYzBPVGsyTmc9PSZhbXA7bWlkPTIyNDc0ODM5MDcmYW1wO2lkeD0xJmFtcDtzbj0wNmIwZGU1YjY0OTU1ZGZkMzlmNjA1YjZjMjJlMzMxZSZhbXA7Y2hrc209ZmRkOTRmZTJjYWFlYzZmNGM4ZWZlMzY1M2VmNDNjYTM4NzMyZTBmOGE3Y2VmMDYwOTc4NWRkZDIwM2QxMWQzOGY0NjViZWRmZWM3ZCZhbXA7bXBzaGFyZT0xJmFtcDtzY2VuZT0xJmFtcDtzcmNpZD0wODE1aWNzUWFrblQzVjBUY3FjV2Zkd1MmYW1wO3NoYXJlcl9zaGFyZXRpbWU9MTU5NzQyMTE4OTAyMSZhbXA7c2hhcmVyX3NoYXJlaWQ9NDljNjExMjFmOTIwMDQ5MDJiZWNlYTcwNTcxNmNjYTcmYW1wO2tleT1kZTg3OWQxZDA5ZTJhOGI3Mjg0NmY4MzA4OTA3NThkYWY3Njc3ZDRiODNlOWU1YmZkNzkyMGIwYWU2NDdlNzI0ZmQ5MmIyMjg1MjUwNDlhMjA3NjIzMGViNmMwNWFiNmRmZWUxODAyODY1MmRmZjkxYzkyODllNTNiYzY5NDk2MzZjN2RlYTRhODk1MzMwMzY3ZjZmMmM2NDk2Y2U0NjdmYzQ2ZjBjYjcwZWVkNmQ4YmJhMjYwM2NhMGUxMGVmZDM2ZWQzMmVlN2UzNzU2MDAxM2E4MjZiOTU3NGJmYWMzODJhODU2ODA2YTI4NTUzMTk0YTdhNmYxODYzMWI0MzA1JmFtcDthc2NlbmU9MSZhbXA7dWluPU1UZzBORGsxTlRjd01nPT0mYW1wO2RldmljZXR5cGU9V2luZG93cysxMCt4NjQmYW1wO3ZlcnNpb249NjIwOTA1MjkmYW1wO2xhbmc9emhfQ04mYW1wO2V4cG9ydGtleT1BZDV4ekFOY1ZlTXgyeE9rNkN6ZWo2RT0mYW1wO3Bhc3NfdGlja2V0PXZtcWZ6NW9nUjEvd2dBdmp1eGtqSXE5bHBEa3NyeFV0NURsQk96WHJnRDJpdFJQS0FwT3MvcDhHdXJsbHZiem8=">参考<i class="fa fa-external-link-alt"></i></span></li></ul>]]></content>
    
    <summary type="html">
    
      介绍 Arthas命令路由的整个过程，包括如何注册命令、如何读取客户端的输入、如何根据输入找到对应的命令执行类。最后以一个基础命令help为例，简要介绍命令执行类是如何执行，如何接收参数，以及如何向客户端返回数据的。
    
    </summary>
    
    
      <category term="Java" scheme="https://jueee.github.io/categories/Java/"/>
    
      <category term="Java诊断" scheme="https://jueee.github.io/categories/Java/Java%E8%AF%8A%E6%96%AD/"/>
    
      <category term="Arthas" scheme="https://jueee.github.io/categories/Java/Java%E8%AF%8A%E6%96%AD/Arthas/"/>
    
    
      <category term="Java诊断" scheme="https://jueee.github.io/tags/Java%E8%AF%8A%E6%96%AD/"/>
    
      <category term="Arthas" scheme="https://jueee.github.io/tags/Arthas/"/>
    
      <category term="Java" scheme="https://jueee.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Ognl 表达式的基本使用方法</title>
    <link href="https://jueee.github.io/2020/08/2020-08-15-Ognl%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <id>https://jueee.github.io/2020/08/2020-08-15-Ognl%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</id>
    <published>2020-08-15T00:00:00.000Z</published>
    <updated>2020-08-17T03:38:07.701Z</updated>
    
    <content type="html"><![CDATA[<p>OGNL 是 <code>Object-Graph Navigation Language</code>（<strong>对象导航图语言</strong>）的缩写，它是一种功能强大的表达式语言，通过它简单一致的表达式语法，可以存取对象的任意属性，调用对象的方法，遍历整个对象的结构图，实现字段类型转化等功能。它使用相同的表达式去存取对象的属性。这样可以更好的取得数据。</p><h3 id="Ognl-语言介绍"><a href="#Ognl-语言介绍" class="headerlink" title="Ognl 语言介绍"></a>Ognl 语言介绍</h3><p>OGNL 表达式官方指南：<span class="exturl" data-url="aHR0cHM6Ly9jb21tb25zLmFwYWNoZS5vcmcvcHJvcGVyL2NvbW1vbnMtb2dubC9sYW5ndWFnZS1ndWlkZS5odG1s">https://commons.apache.org/proper/commons-ognl/language-guide.html<i class="fa fa-external-link-alt"></i></span></p><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>Ognl 是一个功能强大的表达式语言，用来获取和设置 java 对象的属性 ，它旨在提供一个更高抽象度语法来对 java 对象图进行导航。</p><p>另外，java 中很多可以做的事情，也可以使用 OGNL 来完成，例如：列表映射和选择。</p><p>对于开发者来说，使用 OGNL，可以用简洁的语法来完成对 java 对象的导航。通常来说：通过一个 “路径” 来完成对象信息的导航，这个 “路径” 可以是到 java bean 的某个属性，或者集合中的某个索引的对象，等等，而不是直接使用 get 或者 set 方法来完成。</p><h4 id="三要素"><a href="#三要素" class="headerlink" title="三要素"></a>三要素</h4><p><strong>首先来介绍下 OGNL 的三要素：</strong></p><ul><li><p><strong>表达式（Expression）</strong>：</p><p>表达式是整个 OGNL 的核心内容，所有的 OGNL 操作都是针对表达式解析后进行的。通过表达式来告诉 OGNL 操作到底要干些什么。因此，表达式其实是一个带有语法含义的字符串，整个字符串将规定操作的类型和内容。OGNL 表达式支持大量的表达式，如 “链式访问对象”、表达式计算、甚至还支持 Lambda 表达式。</p></li><li><p><strong>Root 对象</strong>：</p><p>OGNL 的 Root 对象可以理解为 OGNL 的操作对象。当我们指定了一个表达式的时候，我们需要指定这个表达式针对的是哪个具体的对象。而这个具体的对象就是 Root 对象，这就意味着，如果有一个 OGNL 表达式，那么我们需要针对 Root 对象来进行 OGNL 表达式的计算并且返回结果。</p></li><li><p><strong>上下文环境</strong>：</p><p>有个 Root 对象和表达式，我们就可以使用 OGNL 进行简单的操作了，如对 Root 对象的赋值与取值操作。但是，实际上在 OGNL 的内部，所有的操作都会在一个特定的数据环境中运行。这个数据环境就是上下文环境（Context）。OGNL 的上下文环境是一个 Map 结构，称之为 OgnlContext。Root 对象也会被添加到上下文环境当中去。</p><p>说白了上下文就是一个 MAP 结构，它实现了 java.utils.Map 的接口。</p></li></ul><h3 id="使用-Ognl"><a href="#使用-Ognl" class="headerlink" title="使用 Ognl"></a>使用 Ognl</h3><p>引入 Maven：</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>ognl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>ognl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.1.19<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></code></pre><p>示例代码：</p><p>示例类：<code>sample.ognl.Address</code></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Address</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> port<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> address<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Address</span><span class="token punctuation">(</span><span class="token class-name">String</span> port<span class="token punctuation">,</span><span class="token class-name">String</span> address<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>port <span class="token operator">=</span> port<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> address<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>示例类 <code>sample.ognl.User</code>：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Address</span> address<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="Ognl-的基本语法"><a href="#Ognl-的基本语法" class="headerlink" title="Ognl 的基本语法"></a>Ognl 的基本语法</h3><h4 id="对Root对象的访问"><a href="#对Root对象的访问" class="headerlink" title="对Root对象的访问"></a>对 Root 对象的访问</h4><p>OGNL 使用的是一种链式的风格进行对象的访问。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Address</span> address <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Address</span><span class="token punctuation">(</span><span class="token string">"330108"</span><span class="token punctuation">,</span> <span class="token string">"杭州市滨江区"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>user<span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Ognl</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// test</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Ognl</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token string">"name.length"</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 4</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Ognl</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token string">"address"</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Address(port=330108, address=杭州市滨江区)</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Ognl</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token string">"address.port"</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 110003</span></code></pre><h4 id="对上下文对象的访问"><a href="#对上下文对象的访问" class="headerlink" title="对上下文对象的访问"></a>对上下文对象的访问</h4><p>使用 OGNL 的时候如果不设置上下文对象，系统会自动创建一个上下文对象，如果传入的参数当中包含了上下文对象则会使用传入的上下文对象。</p><p>** 当访问上下文环境当中的参数时候，需要在表达式前面加上 '#'**，表示了与访问 Root 对象的区别。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">demo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">OgnlException</span> <span class="token punctuation">{</span>    <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Address</span> address <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Address</span><span class="token punctuation">(</span><span class="token string">"330108"</span><span class="token punctuation">,</span> <span class="token string">"杭州市滨江区"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    context<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"init"</span><span class="token punctuation">,</span> <span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    context<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Ognl</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token string">"#init"</span><span class="token punctuation">,</span> context<span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// hello</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Ognl</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token string">"#user.name"</span><span class="token punctuation">,</span> context<span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// test</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Ognl</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> context<span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// test</span>    <span class="token keyword">return</span> <span class="token string">"this is demo2 method"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="对静态变量的访问"><a href="#对静态变量的访问" class="headerlink" title="对静态变量的访问"></a>对静态变量的访问</h4><p>在 OGNL 表达式当中也可以访问静态变量或者调用静态方法，** 格式如 @[class]@[field/method ()]**。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> ONE <span class="token operator">=</span> <span class="token string">"one"</span><span class="token punctuation">;</span><span class="token comment">// 对静态变量的访问（@[class]@[field/method()]）</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">demo3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">OgnlException</span> <span class="token punctuation">{</span>    <span class="token class-name">Object</span> object1 <span class="token operator">=</span> <span class="token class-name">Ognl</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token string">"@sample.ognl.OgnlDemo@ONE"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Object</span> object2 <span class="token operator">=</span> <span class="token class-name">Ognl</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token string">"@sample.ognl.OgnlDemo@demo2()"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// hello、test、test</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>object1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// one    </span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>object2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// this is demo2 method</span><span class="token punctuation">}</span></code></pre><h4 id="方法的调用"><a href="#方法的调用" class="headerlink" title="方法的调用"></a>方法的调用</h4><p>如果需要调用 Root 对象或者上下文对象当中的方法也可以使用.+ 方法的方式来调用。甚至可以传入参数。</p><p>赋值的时候可以选择上下文当中的元素进行给 Root 对象的 name 属性赋值。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>context<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"rcx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>context<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">,</span> <span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Ognl</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token string">"getName()"</span><span class="token punctuation">,</span> context<span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// null</span><span class="token class-name">Ognl</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token string">"setName(#name)"</span><span class="token punctuation">,</span> context<span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Ognl</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token string">"getName()"</span><span class="token punctuation">,</span> context<span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// rcx</span></code></pre><h4 id="对数组和集合的访问"><a href="#对数组和集合的访问" class="headerlink" title="对数组和集合的访问"></a>对数组和集合的访问</h4><p>OGNL 支持对数组按照数组下标的顺序进行访问。此方式也适用于对集合的访问，对于 Map 支持使用键进行访问。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> strings  <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"aa"</span><span class="token punctuation">,</span> <span class="token string">"bb"</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"aa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"bb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">,</span> <span class="token string">"value1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"key2"</span><span class="token punctuation">,</span> <span class="token string">"value2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>context<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"list"</span><span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>context<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"strings"</span><span class="token punctuation">,</span> strings<span class="token punctuation">)</span><span class="token punctuation">;</span>context<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"map"</span><span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Ognl</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token string">"#strings[0]"</span><span class="token punctuation">,</span> context<span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// aa</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Ognl</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token string">"#list[0]"</span><span class="token punctuation">,</span> context<span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// aa</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Ognl</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token string">"#list[0 + 1]"</span><span class="token punctuation">,</span> context<span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// bb</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Ognl</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token string">"#map['key1']"</span><span class="token punctuation">,</span> context<span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// value1</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Ognl</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token string">"#map['key' + '2']"</span><span class="token punctuation">,</span> context<span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// value2</span></code></pre><p>从上面代码不仅看到了访问数组与集合的方式同时也可以看出来 OGNL 表达式当中支持操作符的简单运算。有如下所示：</p><ul><li>2 + 4 // 整数相加（同时也支持减法、乘法、除法、取余 [% /mod]、）</li><li>"hell" + "lo" // 字符串相加</li><li> i++ // 递增、递减</li><li> i == j // 判断</li><li> var in list // 是否在容器当中</li></ul><h4 id="投影与选择"><a href="#投影与选择" class="headerlink" title="投影与选择"></a>投影与选择</h4><p>OGNL 支持类似数据库当中的选择与投影功能。</p><ul><li><p><strong>投影</strong>：选出集合当中的相同属性组合成一个新的集合。语法为 collection.{XXX}，XXX 就是集合中每个元素的公共属性。</p></li><li><p><strong>选择</strong>：选择就是选择出集合当中符合条件的元素组合成新的集合。语法为 collection.{Y XXX}，其中 Y 是一个选择操作符，XXX 是选择用的逻辑表达式。</p><p>选择操作符有 3 种：</p><ul><li>? ：选择满足条件的所有元素</li><li> ^：选择满足条件的第一个元素</li><li> $：选择满足条件的最后一个元素 </li></ul></li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">User</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"name1"</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">User</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"name2"</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">User</span> p3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"name3"</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">User</span> p4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"name4"</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>p3<span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>p4<span class="token punctuation">)</span><span class="token punctuation">;</span>context<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"list"</span><span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Ognl</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token string">"#list.{age}"</span><span class="token punctuation">,</span> context<span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// [11, 22, 33, 44]</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Ognl</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token string">"#list.{age + '-' + name}"</span><span class="token punctuation">,</span> context<span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// [11-name1, 22-name2, 33-name3, 44-name4]</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Ognl</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token string">"#list.{? #this.age &gt; 22}"</span><span class="token punctuation">,</span> context<span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// [User(name=name3, age=33, address=null), User(name=name4, age=44, address=null)]</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Ognl</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token string">"#list.{^ #this.age &gt; 22}"</span><span class="token punctuation">,</span> context<span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// [User(name=name3, age=33, address=null)]</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Ognl</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token string">"#list.{$ #this.age &gt; 22}"</span><span class="token punctuation">,</span> context<span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// [User(name=name4, age=44, address=null)]</span></code></pre><h4 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h4><p>OGNL 支持直接使用表达式来创建对象。主要有三种情况：</p><ul><li>构造 List 对象：使用 {}, 中间使用 ',' 进行分割如 {"aa", "bb", "cc"}</li><li> 构造 Map 对象：使用 #{}，中间使用 ', 进行分割键值对，键值对使用 ':' 区分，如 #{"key1" : "value1", "key2" : "value2"}</li><li> 构造任意对象：直接使用已知的对象的构造方法进行构造。</li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Ognl</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token string">"#{'key1':'value1'}"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// {key1=value1}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Ognl</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token string">"{'key1','value1'}"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// [key1, value1]</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Ognl</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token string">"new sample.ognl.User()"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// User(name=null, age=0, address=null)</span></code></pre><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
    
    <summary type="html">
    
      OGNL是Object-Graph Navigation Language的缩写，它是一种功能强大的表达式语言，通过它简单一致的表达式语法，可以存取对象的任意属性，调用对象的方法，遍历整个对象的结构图，实现字段类型转化等功能。它使用相同的表达式去存取对象的属性。这样可以更好的取得数据。
    
    </summary>
    
    
      <category term="Java" scheme="https://jueee.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://jueee.github.io/tags/Java/"/>
    
      <category term="Ognl" scheme="https://jueee.github.io/tags/Ognl/"/>
    
  </entry>
  
  <entry>
    <title>Arthas 之通过 trace 命令定位耗时问题</title>
    <link href="https://jueee.github.io/2020/08/2020-08-14-Arthas%E4%B9%8B%E9%80%9A%E8%BF%87trace%E5%91%BD%E4%BB%A4%E5%AE%9A%E4%BD%8D%E8%80%97%E6%97%B6%E9%97%AE%E9%A2%98/"/>
    <id>https://jueee.github.io/2020/08/2020-08-14-Arthas%E4%B9%8B%E9%80%9A%E8%BF%87trace%E5%91%BD%E4%BB%A4%E5%AE%9A%E4%BD%8D%E8%80%97%E6%97%B6%E9%97%AE%E9%A2%98/</id>
    <published>2020-08-14T00:00:00.000Z</published>
    <updated>2020-08-14T11:46:27.103Z</updated>
    
    <content type="html"><![CDATA[<h3 id="trace（内部调用路径）"><a href="#trace（内部调用路径）" class="headerlink" title="trace（内部调用路径）"></a>trace（内部调用路径）</h3><h4 id="方法介绍"><a href="#方法介绍" class="headerlink" title="方法介绍"></a>方法介绍</h4><p>通过 Arthas 中的 trace 命令，可以查看方法内部调用路径，并输出方法路径上的每个节点上耗时。</p><p>官方文档：</p><blockquote><p><span class="exturl" data-url="aHR0cHM6Ly9hbGliYWJhLmdpdGh1Yi5pby9hcnRoYXMvdHJhY2UuaHRtbA==">https://alibaba.github.io/arthas/trace.html<i class="fa fa-external-link-alt"></i></span></p></blockquote><h4 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h4><p>使用 <code>thread --help</code> 获取 thread 命令的帮助信息：</p><p><img src="/images/2020/08/1597393992311.png" alt="1597393992311" loading="lazy"></p><p>主要参数说明如下：</p><table><thead><tr><th>参数名称</th><th>参数说明</th></tr></thead><tbody><tr><td><em> class-pattern</em></td><td> 类名表达式匹配</td></tr><tr><td><em> method-pattern</em></td><td> 方法名表达式匹配</td></tr><tr><td><em> condition-express</em></td><td> 条件表达式</td></tr><tr><td> [E]</td><td> 开启正则表达式匹配，默认为通配符匹配</td></tr><tr><td><code>[n:]</code></td><td>命令执行次数</td></tr><tr><td><code>#cost</code></td><td>方法执行耗时</td></tr></tbody></table><h4 id="定位耗时问题"><a href="#定位耗时问题" class="headerlink" title="定位耗时问题"></a>定位耗时问题</h4><p>使用 **trace ** 命令开始检测耗时情况。</p><pre class="language-none"><code class="language-none">trace sample.demo.controller.UserController getUser</code></pre><p>结果如下：</p><p><img src="/images/2020/08/1597402146114.png" alt="1597402146114" loading="lazy"></p><p>继续跟踪耗时高的方法，然后再次访问。</p><pre class="language-none"><code class="language-none">trace sample.demo.TraceService get</code></pre><p>结果如下：</p><p><img src="/images/2020/08/1597402247630.png" alt="1597402247630" loading="lazy"></p><p>很清楚的看到是 <code>TraceService</code> 的 <code>mysql</code> 方法耗时是最高的。</p><h3 id="monitor（方法调用监控）"><a href="#monitor（方法调用监控）" class="headerlink" title="monitor（方法调用监控）"></a>monitor（方法调用监控）</h3><h4 id="方法介绍-1"><a href="#方法介绍-1" class="headerlink" title="方法介绍"></a>方法介绍</h4><p>monitor 命令可以对匹配 <code>class-pattern</code>／<code>method-pattern</code> 的类、方法的调用进行监控。</p><p>官方文档：</p><blockquote><p><span class="exturl" data-url="aHR0cHM6Ly9hbGliYWJhLmdpdGh1Yi5pby9hcnRoYXMvbW9uaXRvci5odG1s">https://alibaba.github.io/arthas/monitor.html<i class="fa fa-external-link-alt"></i></span></p></blockquote><h4 id="参数说明-1"><a href="#参数说明-1" class="headerlink" title="参数说明"></a>参数说明</h4><p>使用 <code>monitor --help</code> 获取 monitor 命令的帮助信息：</p><p><img src="/images/2020/08/1597402367532.png" alt="1597402367532" loading="lazy"></p><p>方法拥有一个命名参数 <code>[c:]</code>，意思是统计周期（cycle of output），拥有一个整型的参数值</p><table><thead><tr><th>参数名称</th><th>参数说明</th></tr></thead><tbody><tr><td><em> class-pattern</em></td><td> 类名表达式匹配</td></tr><tr><td><em> method-pattern</em></td><td> 方法名表达式匹配</td></tr><tr><td> [E]</td><td> 开启正则表达式匹配，默认为通配符匹配</td></tr><tr><td><code>[c:]</code></td><td>统计周期，默认值为 120 秒</td></tr></tbody></table><h4 id="监控的维度说明"><a href="#监控的维度说明" class="headerlink" title="监控的维度说明"></a>监控的维度说明</h4><table><thead><tr><th>监控项</th><th>说明</th></tr></thead><tbody><tr><td> timestamp</td><td> 时间戳</td></tr><tr><td> class</td><td>Java 类</td></tr><tr><td> method</td><td> 方法（构造方法、普通方法）</td></tr><tr><td>total</td><td> 调用次数</td></tr><tr><td> success</td><td> 成功次数</td></tr><tr><td> fail</td><td> 失败次数</td></tr><tr><td> rt</td><td> 平均 RT</td></tr><tr><td>fail-rate</td><td> 失败率</td></tr></tbody></table><h4 id="统计方法耗时"><a href="#统计方法耗时" class="headerlink" title="统计方法耗时"></a>统计方法耗时</h4><p>使用 <strong>monitor</strong> 命令监控统计方法的执行情况。</p><p>每 10 秒统计一次 <code>com.UserServiceImpl</code> 类的 <code>get</code> 方法执行情况。</p><pre class="language-none"><code class="language-none">monitor -c 10 sample.demo.controller.UserController getUser</code></pre><p><img src="/images/2020/08/1597402331522.png" alt="1597402331522" loading="lazy"></p><h3 id="watch（观察方法信息）"><a href="#watch（观察方法信息）" class="headerlink" title="watch（观察方法信息）"></a>watch（观察方法信息）</h3><h4 id="方法介绍-2"><a href="#方法介绍-2" class="headerlink" title="方法介绍"></a>方法介绍</h4><p>watch 让你能方便的观察到指定方法的调用情况。能观察到的范围为：<code>返回值</code>、<code>抛出异常</code>、<code>入参</code>，通过编写 <code>OGNL</code> 表达式进行对应变量的查看。</p><p>官方文档：</p><blockquote><p><span class="exturl" data-url="aHR0cHM6Ly9hbGliYWJhLmdpdGh1Yi5pby9hcnRoYXMvd2F0Y2guaHRtbA==">https://alibaba.github.io/arthas/watch.html<i class="fa fa-external-link-alt"></i></span></p></blockquote><h4 id="参数说明-2"><a href="#参数说明-2" class="headerlink" title="参数说明"></a>参数说明</h4><p>使用 <code>watch --help</code> 获取 watch 命令的帮助信息：</p><p><img src="/images/2020/08/1597402622041.png" alt="1597402622041" loading="lazy"></p><p>watch 的参数比较多，主要是因为它能在 4 个不同的场景观察对象：</p><table><thead><tr><th>参数名称</th><th>参数说明</th></tr></thead><tbody><tr><td><em> class-pattern</em></td><td> 类名表达式匹配</td></tr><tr><td><em> method-pattern</em></td><td> 方法名表达式匹配</td></tr><tr><td><em> express</em></td><td> 观察表达式</td></tr><tr><td><em> condition-express</em></td><td> 条件表达式</td></tr><tr><td> [b]</td><td> 在<strong>方法调用之前</strong>观察</td></tr><tr><td> [e]</td><td> 在<strong>方法异常之后</strong>观察</td></tr><tr><td> [s]</td><td> 在<strong>方法返回之后</strong>观察</td></tr><tr><td> [f]</td><td> 在<strong>方法结束之后</strong> (正常返回和异常返回) 观察【默认】</td></tr><tr><td>[E]</td><td> 开启正则表达式匹配，默认为通配符匹配</td></tr><tr><td> [x:]</td><td> 指定输出结果的属性遍历深度，默认为 1</td></tr></tbody></table><h4 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h4><ul><li>watch 命令定义了 4 个观察事件点，即 <code>-b</code> 方法调用前，<code>-e</code> 方法异常后，<code>-s</code> 方法返回后，<code>-f</code> 方法结束后</li><li> 4 个观察事件点 <code>-b</code>、<code>-e</code>、<code>-s</code> 默认关闭，<code>-f</code> 默认打开，当指定观察点被打开后，在相应事件点会对观察表达式进行求值并输出</li><li>这里要注意<code>方法入参</code>和<code>方法出参</code>的区别，有可能在中间被修改导致前后不一致，除了 <code>-b</code> 事件点 <code>params</code> 代表方法入参外，其余事件都代表方法出参</li><li>当使用 <code>-b</code> 时，由于观察事件点是在方法调用前，此时返回值或异常均不存在</li></ul><h4 id="观察方法信息"><a href="#观察方法信息" class="headerlink" title="观察方法信息"></a>观察方法信息</h4><h5 id="查看入参和出参"><a href="#查看入参和出参" class="headerlink" title="查看入参和出参"></a>查看入参和出参</h5><pre class="language-none"><code class="language-none">$ watch sample.demo.controller.UserController getUser '{params[0],returnObj}'</code></pre><p><img src="/images/2020/08/1597402871452.png" alt="1597402871452" loading="lazy"></p><h5 id="查看入参和出参大小"><a href="#查看入参和出参大小" class="headerlink" title="查看入参和出参大小"></a>查看入参和出参大小</h5><pre class="language-none"><code class="language-none">$ watch sample.demo.controller.UserController getUser '{params[0],returnObj.size}'</code></pre><p><img src="/images/2020/08/1597402936287.png" alt="1597402936287" loading="lazy"></p><h5 id="查看入参和出参String"><a href="#查看入参和出参String" class="headerlink" title="查看入参和出参String"></a>查看入参和出参 String</h5><pre class="language-none"><code class="language-none">$ watch sample.demo.controller.UserController getUser '{params[0],returnObj.toString()}'</code></pre><p><img src="/images/2020/08/1597402988837.png" alt="1597402988837" loading="lazy"></p><h5 id="查看方法异常之后"><a href="#查看方法异常之后" class="headerlink" title="查看方法异常之后"></a>查看方法异常之后</h5><pre class="language-none"><code class="language-none">$ watch sample.demo.controller.UserController getUser '{params[0],returnObj}' -e</code></pre><p><img src="/images/2020/08/1597403442198.png" alt="1597403442198" loading="lazy"></p><h3 id="stack（方法调用路径）"><a href="#stack（方法调用路径）" class="headerlink" title="stack（方法调用路径）"></a>stack（方法调用路径）</h3><h4 id="方法介绍-3"><a href="#方法介绍-3" class="headerlink" title="方法介绍"></a>方法介绍</h4><p>stack 输出当前方法被调用的调用路径。</p><p>官方文档：<span class="exturl" data-url="aHR0cHM6Ly9hbGliYWJhLmdpdGh1Yi5pby9hcnRoYXMvc3RhY2suaHRtbA==">https://alibaba.github.io/arthas/stack.html<i class="fa fa-external-link-alt"></i></span></p><h4 id="参数说明-3"><a href="#参数说明-3" class="headerlink" title="参数说明"></a>参数说明</h4><p>使用 <code>stack --help</code> 获取 stack 命令的帮助信息：</p><p><img src="/images/2020/08/1597403694320.png" alt="1597403694320" loading="lazy"></p><p>主要参数如下：</p><table><thead><tr><th>参数名称</th><th>参数说明</th></tr></thead><tbody><tr><td><em> class-pattern</em></td><td> 类名表达式匹配</td></tr><tr><td><em> method-pattern</em></td><td> 方法名表达式匹配</td></tr><tr><td><em> condition-express</em></td><td> 条件表达式</td></tr><tr><td> [E]</td><td> 开启正则表达式匹配，默认为通配符匹配</td></tr><tr><td><code>[n:]</code></td><td>执行次数限制</td></tr></tbody></table><h4 id="方法调用路径"><a href="#方法调用路径" class="headerlink" title="方法调用路径"></a>方法调用路径</h4><pre class="language-none"><code class="language-none">$ stack sample.demo.controller.UserController getUser</code></pre><p><img src="/images/2020/08/1597403757289.png" alt="1597403757289" loading="lazy"></p><h3 id="tt（方法调用时空隧道）"><a href="#tt（方法调用时空隧道）" class="headerlink" title="tt（方法调用时空隧道）"></a>tt（方法调用时空隧道）</h3><h4 id="方法介绍-4"><a href="#方法介绍-4" class="headerlink" title="方法介绍"></a>方法介绍</h4><p>tt 方法执行数据的时空隧道，记录下指定方法每次调用的入参和返回信息，并能对这些不同的时间下调用进行观测。</p><p>官方文档：<span class="exturl" data-url="aHR0cHM6Ly9hbGliYWJhLmdpdGh1Yi5pby9hcnRoYXMvdHQuaHRtbA==">https://alibaba.github.io/arthas/tt.html<i class="fa fa-external-link-alt"></i></span></p><h4 id="参数说明-4"><a href="#参数说明-4" class="headerlink" title="参数说明"></a>参数说明</h4><ul><li><p><code>-t</code></p><p>tt 命令有很多个主参数，<code>-t</code> 就是其中之一。这个参数的表明希望记录下类 <code>*Test</code> 的 <code>print</code> 方法的每次执行情况。</p></li><li><p><code>-n 3</code></p><p>当你执行一个调用量不高的方法时可能你还能有足够的时间用 <code>CTRL+C</code> 中断 tt 命令记录的过程，但如果遇到调用量非常大的方法，瞬间就能将你的 JVM 内存撑爆。</p><p>此时你可以通过 <code>-n</code> 参数指定你需要记录的次数，当达到记录次数时 Arthas 会主动中断 tt 命令的记录过程，避免人工操作无法停止的情况。</p></li></ul><h4 id="返回结果说明"><a href="#返回结果说明" class="headerlink" title="返回结果说明"></a>返回结果说明</h4><table><thead><tr><th>表格字段</th><th>字段解释</th></tr></thead><tbody><tr><td> INDEX</td><td> 时间片段记录编号，每一个编号代表着一次调用，后续 tt 还有很多命令都是基于此编号指定记录操作，非常重要。</td></tr><tr><td>TIMESTAMP</td><td> 方法执行的本机时间，记录了这个时间片段所发生的本机时间</td></tr><tr><td> COST(ms)</td><td> 方法执行的耗时</td></tr><tr><td> IS-RET</td><td> 方法是否以正常返回的形式结束</td></tr><tr><td> IS-EXP</td><td> 方法是否以抛异常的形式结束</td></tr><tr><td> OBJECT</td><td> 执行对象的 <code>hashCode()</code>，注意，曾经有人误认为是对象在 JVM 中的内存地址，但很遗憾他不是。但他能帮助你简单的标记当前执行方法的类实体</td></tr><tr><td> CLASS</td><td> 执行的类名</td></tr><tr><td> METHOD</td><td> 执行的方法名</td></tr></tbody></table><h4 id="方法调用时空隧道"><a href="#方法调用时空隧道" class="headerlink" title="方法调用时空隧道"></a>方法调用时空隧道</h4><h5 id="开始记录方法调用信息"><a href="#开始记录方法调用信息" class="headerlink" title="开始记录方法调用信息"></a>开始记录方法调用信息</h5><pre class="language-none"><code class="language-none">$ tt -t sample.demo.controller.UserController getUser</code></pre><p><img src="/images/2020/08/1597403958714.png" alt="1597403958714" loading="lazy"></p><h5 id="查看记录的方法调用信息"><a href="#查看记录的方法调用信息" class="headerlink" title="查看记录的方法调用信息"></a>查看记录的方法调用信息</h5><pre class="language-none"><code class="language-none">tt -l</code></pre><p><img src="/images/2020/08/1597404208135.png" alt="1597404208135" loading="lazy"></p><h5 id="查看调用记录的详细信息"><a href="#查看调用记录的详细信息" class="headerlink" title="查看调用记录的详细信息"></a>查看调用记录的详细信息</h5><pre class="language-none"><code class="language-none">tt -i 1001</code></pre><p><img src="/images/2020/08/1597404218381.png" alt="1597404218381" loading="lazy"></p><h5 id="重新发起调用"><a href="#重新发起调用" class="headerlink" title="重新发起调用"></a>重新发起调用</h5><pre class="language-none"><code class="language-none">tt -i 1001 -p</code></pre><p><img src="/images/2020/08/1597404320236.png" alt="1597404320236" loading="lazy"></p>]]></content>
    
    <summary type="html">
    
      通过Arthas中的trace命令，可以查看方法内部调用路径，并输出方法路径上的每个节点上耗时。
    
    </summary>
    
    
      <category term="Java" scheme="https://jueee.github.io/categories/Java/"/>
    
      <category term="Java诊断" scheme="https://jueee.github.io/categories/Java/Java%E8%AF%8A%E6%96%AD/"/>
    
      <category term="Arthas" scheme="https://jueee.github.io/categories/Java/Java%E8%AF%8A%E6%96%AD/Arthas/"/>
    
    
      <category term="Java诊断" scheme="https://jueee.github.io/tags/Java%E8%AF%8A%E6%96%AD/"/>
    
      <category term="Arthas" scheme="https://jueee.github.io/tags/Arthas/"/>
    
      <category term="Java" scheme="https://jueee.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Arthas 之定位方法调用问题</title>
    <link href="https://jueee.github.io/2020/08/2020-08-14-Arthas%E4%B9%8B%E5%AE%9A%E4%BD%8D%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8%E9%97%AE%E9%A2%98/"/>
    <id>https://jueee.github.io/2020/08/2020-08-14-Arthas%E4%B9%8B%E5%AE%9A%E4%BD%8D%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8%E9%97%AE%E9%A2%98/</id>
    <published>2020-08-14T00:00:00.000Z</published>
    <updated>2020-08-17T12:15:30.573Z</updated>
    
    <content type="html"><![CDATA[<p>通过 Arthas 中的 trace/monitor/watch/stack/tt 等命令，可以查看方法内部调用信息，从而定位定位方法调用问题。</p><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><p>Spring Boot 启动类 <code>sample.demo.ServerDemoApplication</code>：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServerDemoApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">ServerDemoApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>控制类 <code>sample.demo.controller.UserController</code>：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">UserService</span> userService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/user"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> uid<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token comment">// 模拟用户查询</span>        userService<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>uid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> hashMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"uid"</span><span class="token punctuation">,</span> uid<span class="token punctuation">)</span><span class="token punctuation">;</span>        hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"name"</span> <span class="token operator">+</span> uid<span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>hashMap<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> hashMap<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Service 类：<code>sample.demo.service.UserService</code>：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> uid<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token function">check</span><span class="token punctuation">(</span>uid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">service</span><span class="token punctuation">(</span>uid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">redis</span><span class="token punctuation">(</span>uid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">mysql</span><span class="token punctuation">(</span>uid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> uid<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            count <span class="token operator">+=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"service  end {}"</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">redis</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> uid<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            count <span class="token operator">+=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"redis  end {}"</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mysql</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> uid<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token keyword">long</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            count <span class="token operator">+=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"mysql end {}"</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> uid<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>uid <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> uid <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"uid不正确，uid:{}"</span><span class="token punctuation">,</span> uid<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"uid不正确"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="trace（内部调用路径）"><a href="#trace（内部调用路径）" class="headerlink" title="trace（内部调用路径）"></a>trace（内部调用路径）</h3><h4 id="方法介绍"><a href="#方法介绍" class="headerlink" title="方法介绍"></a>方法介绍</h4><p>通过 Arthas 中的 trace 命令，可以查看方法内部调用路径，并输出方法路径上的每个节点上耗时。</p><p>官方文档：</p><blockquote><p><span class="exturl" data-url="aHR0cHM6Ly9hbGliYWJhLmdpdGh1Yi5pby9hcnRoYXMvdHJhY2UuaHRtbA==">https://alibaba.github.io/arthas/trace.html<i class="fa fa-external-link-alt"></i></span></p></blockquote><h4 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h4><p>使用 <code>thread --help</code> 获取 thread 命令的帮助信息：</p><p><img src="/images/2020/08/1597393992311.png" alt="1597393992311" loading="lazy"></p><p>主要参数说明如下：</p><table><thead><tr><th>参数名称</th><th>参数说明</th></tr></thead><tbody><tr><td><em> class-pattern</em></td><td> 类名表达式匹配</td></tr><tr><td><em> method-pattern</em></td><td> 方法名表达式匹配</td></tr><tr><td><em> condition-express</em></td><td> 条件表达式</td></tr><tr><td> [E]</td><td> 开启正则表达式匹配，默认为通配符匹配</td></tr><tr><td><code>[n:]</code></td><td>命令执行次数</td></tr><tr><td><code>#cost</code></td><td>方法执行耗时</td></tr></tbody></table><h4 id="定位耗时问题"><a href="#定位耗时问题" class="headerlink" title="定位耗时问题"></a>定位耗时问题</h4><p>使用 **trace ** 命令开始检测耗时情况。</p><pre class="language-none"><code class="language-none">trace sample.demo.controller.UserController getUser</code></pre><p>结果如下：</p><p><img src="/images/2020/08/1597402146114.png" alt="1597402146114" loading="lazy"></p><p>继续跟踪耗时高的方法，然后再次访问。</p><pre class="language-none"><code class="language-none">trace sample.demo.TraceService get</code></pre><p>结果如下：</p><p><img src="/images/2020/08/1597402247630.png" alt="1597402247630" loading="lazy"></p><p>很清楚的看到是 <code>TraceService</code> 的 <code>mysql</code> 方法耗时是最高的。</p><h3 id="monitor（方法调用监控）"><a href="#monitor（方法调用监控）" class="headerlink" title="monitor（方法调用监控）"></a>monitor（方法调用监控）</h3><h4 id="方法介绍-1"><a href="#方法介绍-1" class="headerlink" title="方法介绍"></a>方法介绍</h4><p>monitor 命令可以对匹配 <code>class-pattern</code>／<code>method-pattern</code> 的类、方法的调用进行监控。</p><p>官方文档：</p><blockquote><p><span class="exturl" data-url="aHR0cHM6Ly9hbGliYWJhLmdpdGh1Yi5pby9hcnRoYXMvbW9uaXRvci5odG1s">https://alibaba.github.io/arthas/monitor.html<i class="fa fa-external-link-alt"></i></span></p></blockquote><h4 id="参数说明-1"><a href="#参数说明-1" class="headerlink" title="参数说明"></a>参数说明</h4><p>使用 <code>monitor --help</code> 获取 monitor 命令的帮助信息：</p><p><img src="/images/2020/08/1597402367532.png" alt="1597402367532" loading="lazy"></p><p>方法拥有一个命名参数 <code>[c:]</code>，意思是统计周期（cycle of output），拥有一个整型的参数值</p><table><thead><tr><th>参数名称</th><th>参数说明</th></tr></thead><tbody><tr><td><em> class-pattern</em></td><td> 类名表达式匹配</td></tr><tr><td><em> method-pattern</em></td><td> 方法名表达式匹配</td></tr><tr><td> [E]</td><td> 开启正则表达式匹配，默认为通配符匹配</td></tr><tr><td><code>[c:]</code></td><td>统计周期，默认值为 120 秒</td></tr></tbody></table><h4 id="监控的维度说明"><a href="#监控的维度说明" class="headerlink" title="监控的维度说明"></a>监控的维度说明</h4><table><thead><tr><th>监控项</th><th>说明</th></tr></thead><tbody><tr><td> timestamp</td><td> 时间戳</td></tr><tr><td> class</td><td>Java 类</td></tr><tr><td> method</td><td> 方法（构造方法、普通方法）</td></tr><tr><td>total</td><td> 调用次数</td></tr><tr><td> success</td><td> 成功次数</td></tr><tr><td> fail</td><td> 失败次数</td></tr><tr><td> rt</td><td> 平均 RT</td></tr><tr><td>fail-rate</td><td> 失败率</td></tr></tbody></table><h4 id="统计方法耗时"><a href="#统计方法耗时" class="headerlink" title="统计方法耗时"></a>统计方法耗时</h4><p>使用 <strong>monitor</strong> 命令监控统计方法的执行情况。</p><p>每 10 秒统计一次 <code>com.UserServiceImpl</code> 类的 <code>get</code> 方法执行情况。</p><pre class="language-none"><code class="language-none">monitor -c 10 sample.demo.controller.UserController getUser</code></pre><p><img src="/images/2020/08/1597402331522.png" alt="1597402331522" loading="lazy"></p><h3 id="watch（观察方法信息）"><a href="#watch（观察方法信息）" class="headerlink" title="watch（观察方法信息）"></a>watch（观察方法信息）</h3><h4 id="方法介绍-2"><a href="#方法介绍-2" class="headerlink" title="方法介绍"></a>方法介绍</h4><p>watch 让你能方便的观察到指定方法的调用情况。能观察到的范围为：<code>返回值</code>、<code>抛出异常</code>、<code>入参</code>，通过编写 <code>OGNL</code> 表达式进行对应变量的查看。</p><p>官方文档：</p><blockquote><p><span class="exturl" data-url="aHR0cHM6Ly9hbGliYWJhLmdpdGh1Yi5pby9hcnRoYXMvd2F0Y2guaHRtbA==">https://alibaba.github.io/arthas/watch.html<i class="fa fa-external-link-alt"></i></span></p></blockquote><h4 id="参数说明-2"><a href="#参数说明-2" class="headerlink" title="参数说明"></a>参数说明</h4><p>使用 <code>watch --help</code> 获取 watch 命令的帮助信息：</p><p><img src="/images/2020/08/1597402622041.png" alt="1597402622041" loading="lazy"></p><p>watch 的参数比较多，主要是因为它能在 4 个不同的场景观察对象：</p><table><thead><tr><th>参数名称</th><th>参数说明</th></tr></thead><tbody><tr><td><em> class-pattern</em></td><td> 类名表达式匹配</td></tr><tr><td><em> method-pattern</em></td><td> 方法名表达式匹配</td></tr><tr><td><em> express</em></td><td> 观察表达式</td></tr><tr><td><em> condition-express</em></td><td> 条件表达式</td></tr><tr><td> [b]</td><td> 在<strong>方法调用之前</strong>观察</td></tr><tr><td> [e]</td><td> 在<strong>方法异常之后</strong>观察</td></tr><tr><td> [s]</td><td> 在<strong>方法返回之后</strong>观察</td></tr><tr><td> [f]</td><td> 在<strong>方法结束之后</strong> (正常返回和异常返回) 观察【默认】</td></tr><tr><td>[E]</td><td> 开启正则表达式匹配，默认为通配符匹配</td></tr><tr><td> [x:]</td><td> 指定输出结果的属性遍历深度，默认为 1</td></tr></tbody></table><h4 id="观察表达式"><a href="#观察表达式" class="headerlink" title="观察表达式"></a>观察表达式</h4><p>观察表达式的构成主要由 ognl 表达式组成，所以你可以这样写 <code>"{params,returnObj}"</code>，只要是一个合法的 ognl 表达式，都能被正常支持。</p><p>观察的维度也比较多，主要体现在参数 <code>advice</code> 的数据结构上。<code>Advice</code> 参数最主要是封装了通知节点的所有信息。请参考<span class="exturl" data-url="aHR0cHM6Ly9hbGliYWJhLmdpdGh1Yi5pby9hcnRoYXMvYWR2aWNlLWNsYXNzLmh0bWw=">表达式核心变量<i class="fa fa-external-link-alt"></i></span>中关于该节点的描述。</p><ul><li>特殊用法请参考：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvYXJ0aGFzL2lzc3Vlcy83MQ==">https://github.com/alibaba/arthas/issues/71<i class="fa fa-external-link-alt"></i></span></li><li>OGNL 表达式官网：<span class="exturl" data-url="aHR0cHM6Ly9jb21tb25zLmFwYWNoZS5vcmcvcHJvcGVyL2NvbW1vbnMtb2dubC9sYW5ndWFnZS1ndWlkZS5odG1s">https://commons.apache.org/proper/commons-ognl/language-guide.html<i class="fa fa-external-link-alt"></i></span></li></ul><h4 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h4><ul><li>watch 命令定义了 4 个观察事件点，即 <code>-b</code> 方法调用前，<code>-e</code> 方法异常后，<code>-s</code> 方法返回后，<code>-f</code> 方法结束后</li><li> 4 个观察事件点 <code>-b</code>、<code>-e</code>、<code>-s</code> 默认关闭，<code>-f</code> 默认打开，当指定观察点被打开后，在相应事件点会对观察表达式进行求值并输出</li><li>这里要注意<code>方法入参</code>和<code>方法出参</code>的区别，有可能在中间被修改导致前后不一致，除了 <code>-b</code> 事件点 <code>params</code> 代表方法入参外，其余事件都代表方法出参</li><li>当使用 <code>-b</code> 时，由于观察事件点是在方法调用前，此时返回值或异常均不存在</li></ul><h4 id="观察方法信息"><a href="#观察方法信息" class="headerlink" title="观察方法信息"></a>观察方法信息</h4><p><strong>查看入参和出参</strong></p><pre class="language-none"><code class="language-none">$ watch sample.demo.controller.UserController getUser '{params[0],returnObj}'</code></pre><p><img src="/images/2020/08/1597402871452.png" alt="1597402871452" loading="lazy"></p><p><strong>查看入参和出参大小</strong></p><pre class="language-none"><code class="language-none">$ watch sample.demo.controller.UserController getUser '{params[0],returnObj.size}'</code></pre><p><img src="/images/2020/08/1597402936287.png" alt="1597402936287" loading="lazy"></p><p><strong>查看入参和出参 String</strong></p><pre class="language-none"><code class="language-none">$ watch sample.demo.controller.UserController getUser '{params[0],returnObj.toString()}'</code></pre><p><img src="/images/2020/08/1597402988837.png" alt="1597402988837" loading="lazy"></p><p><strong>查看方法异常之后</strong></p><pre class="language-none"><code class="language-none">$ watch sample.demo.controller.UserController getUser '{params[0],returnObj}' -e</code></pre><p><img src="/images/2020/08/1597403442198.png" alt="1597403442198" loading="lazy"></p><h3 id="stack（方法调用路径）"><a href="#stack（方法调用路径）" class="headerlink" title="stack（方法调用路径）"></a>stack（方法调用路径）</h3><h4 id="方法介绍-3"><a href="#方法介绍-3" class="headerlink" title="方法介绍"></a>方法介绍</h4><p>stack 输出当前方法被调用的调用路径。</p><p>官方文档：<span class="exturl" data-url="aHR0cHM6Ly9hbGliYWJhLmdpdGh1Yi5pby9hcnRoYXMvc3RhY2suaHRtbA==">https://alibaba.github.io/arthas/stack.html<i class="fa fa-external-link-alt"></i></span></p><h4 id="参数说明-3"><a href="#参数说明-3" class="headerlink" title="参数说明"></a>参数说明</h4><p>使用 <code>stack --help</code> 获取 stack 命令的帮助信息：</p><p><img src="/images/2020/08/1597403694320.png" alt="1597403694320" loading="lazy"></p><p>主要参数如下：</p><table><thead><tr><th>参数名称</th><th>参数说明</th></tr></thead><tbody><tr><td><em> class-pattern</em></td><td> 类名表达式匹配</td></tr><tr><td><em> method-pattern</em></td><td> 方法名表达式匹配</td></tr><tr><td><em> condition-express</em></td><td> 条件表达式</td></tr><tr><td> [E]</td><td> 开启正则表达式匹配，默认为通配符匹配</td></tr><tr><td><code>[n:]</code></td><td>执行次数限制</td></tr></tbody></table><h4 id="方法调用路径"><a href="#方法调用路径" class="headerlink" title="方法调用路径"></a>方法调用路径</h4><pre class="language-none"><code class="language-none">$ stack sample.demo.controller.UserController getUser</code></pre><p><img src="/images/2020/08/1597403757289.png" alt="1597403757289" loading="lazy"></p><h3 id="tt（方法调用时空隧道）"><a href="#tt（方法调用时空隧道）" class="headerlink" title="tt（方法调用时空隧道）"></a>tt（方法调用时空隧道）</h3><h4 id="方法介绍-4"><a href="#方法介绍-4" class="headerlink" title="方法介绍"></a>方法介绍</h4><p>tt 方法执行数据的时空隧道，记录下指定方法每次调用的入参和返回信息，并能对这些不同的时间下调用进行观测。</p><p>官方文档：<span class="exturl" data-url="aHR0cHM6Ly9hbGliYWJhLmdpdGh1Yi5pby9hcnRoYXMvdHQuaHRtbA==">https://alibaba.github.io/arthas/tt.html<i class="fa fa-external-link-alt"></i></span></p><h4 id="参数说明-4"><a href="#参数说明-4" class="headerlink" title="参数说明"></a>参数说明</h4><ul><li><p><code>-t</code></p><p>tt 命令有很多个主参数，<code>-t</code> 就是其中之一。这个参数的表明希望记录下类 <code>*Test</code> 的 <code>print</code> 方法的每次执行情况。</p></li><li><p><code>-n 3</code></p><p>当你执行一个调用量不高的方法时可能你还能有足够的时间用 <code>CTRL+C</code> 中断 tt 命令记录的过程，但如果遇到调用量非常大的方法，瞬间就能将你的 JVM 内存撑爆。</p><p>此时你可以通过 <code>-n</code> 参数指定你需要记录的次数，当达到记录次数时 Arthas 会主动中断 tt 命令的记录过程，避免人工操作无法停止的情况。</p></li></ul><h4 id="返回结果说明"><a href="#返回结果说明" class="headerlink" title="返回结果说明"></a>返回结果说明</h4><table><thead><tr><th>表格字段</th><th>字段解释</th></tr></thead><tbody><tr><td> INDEX</td><td> 时间片段记录编号，每一个编号代表着一次调用，后续 tt 还有很多命令都是基于此编号指定记录操作，非常重要。</td></tr><tr><td>TIMESTAMP</td><td> 方法执行的本机时间，记录了这个时间片段所发生的本机时间</td></tr><tr><td> COST(ms)</td><td> 方法执行的耗时</td></tr><tr><td> IS-RET</td><td> 方法是否以正常返回的形式结束</td></tr><tr><td> IS-EXP</td><td> 方法是否以抛异常的形式结束</td></tr><tr><td> OBJECT</td><td> 执行对象的 <code>hashCode()</code>，注意，曾经有人误认为是对象在 JVM 中的内存地址，但很遗憾他不是。但他能帮助你简单的标记当前执行方法的类实体</td></tr><tr><td> CLASS</td><td> 执行的类名</td></tr><tr><td> METHOD</td><td> 执行的方法名</td></tr></tbody></table><h4 id="方法调用时空隧道"><a href="#方法调用时空隧道" class="headerlink" title="方法调用时空隧道"></a>方法调用时空隧道</h4><p><strong>记录方法调用信息</strong></p><pre class="language-none"><code class="language-none">$ tt -t sample.demo.controller.UserController getUser</code></pre><p><img src="/images/2020/08/1597403958714.png" alt="1597403958714" loading="lazy"></p><p><strong>查看记录的调用信息</strong></p><pre class="language-none"><code class="language-none">tt -l</code></pre><p><img src="/images/2020/08/1597404208135.png" alt="1597404208135" loading="lazy"></p><p><strong>查看记录的详细信息</strong></p><pre class="language-none"><code class="language-none">tt -i 1001</code></pre><p><img src="/images/2020/08/1597404218381.png" alt="1597404218381" loading="lazy"></p><p><strong>重新发起调用</strong></p><pre class="language-none"><code class="language-none">tt -i 1001 -p</code></pre><p><img src="/images/2020/08/1597404320236.png" alt="1597404320236" loading="lazy"></p>]]></content>
    
    <summary type="html">
    
      通过Arthas中的trace/monitor/watch/stack/tt等命令，可以查看方法内部调用信息，从而定位方法调用问题。
    
    </summary>
    
    
      <category term="Java" scheme="https://jueee.github.io/categories/Java/"/>
    
      <category term="Java诊断" scheme="https://jueee.github.io/categories/Java/Java%E8%AF%8A%E6%96%AD/"/>
    
      <category term="Arthas" scheme="https://jueee.github.io/categories/Java/Java%E8%AF%8A%E6%96%AD/Arthas/"/>
    
    
      <category term="Java诊断" scheme="https://jueee.github.io/tags/Java%E8%AF%8A%E6%96%AD/"/>
    
      <category term="Arthas" scheme="https://jueee.github.io/tags/Arthas/"/>
    
      <category term="Java" scheme="https://jueee.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>kafka-manager 的安装和使用</title>
    <link href="https://jueee.github.io/2020/08/2020-08-14-kafka-manager%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
    <id>https://jueee.github.io/2020/08/2020-08-14-kafka-manager%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/</id>
    <published>2020-08-14T00:00:00.000Z</published>
    <updated>2020-08-14T11:43:19.664Z</updated>
    
    <content type="html"><![CDATA[<h3 id="kafka-manager地址"><a href="#kafka-manager地址" class="headerlink" title="kafka-manager地址"></a>kafka-manager 地址</h3><p>GitHub 地址：</p><blockquote><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3lhaG9vL0NNQUs=">https://github.com/yahoo/CMAK<i class="fa fa-external-link-alt"></i></span></p></blockquote><p>下载地址：</p><blockquote><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3lhaG9vL0NNQUsvcmVsZWFzZXM=">https://github.com/yahoo/CMAK/releases<i class="fa fa-external-link-alt"></i></span></p></blockquote><h3 id="kafka-manager简介"><a href="#kafka-manager简介" class="headerlink" title="kafka-manager简介"></a>kafka-manager 简介</h3><p>kafka-manager 是目前最受欢迎的 kafka 集群管理工具，最早由雅虎开源，用户可以在 Web 界面执行一些简单的集群管理操作。具体支持以下内容：</p><ul><li>管理多个集群</li><li>轻松检查群集状态（主题，消费者，偏移，代理，副本分发，分区分发）</li><li>运行首选副本选举</li><li>使用选项生成分区分配以选择要使用的代理</li><li>运行分区重新分配（基于生成的分配）</li><li>使用可选主题配置创建主题（0.8.1.1 具有与 0.8.2 + 不同的配置）</li><li>删除主题（仅支持 0.8.2 + 并记住在代理配置中设置 delete.topic.enable = true）</li><li>主题列表现在指示标记为删除的主题（仅支持 0.8.2+）</li><li>批量生成多个主题的分区分配，并可选择要使用的代理</li><li>批量运行重新分配多个主题的分区</li><li>将分区添加到现有主题</li><li>更新现有主题的配置</li></ul><h3 id="安装kafka-manager"><a href="#安装kafka-manager" class="headerlink" title="安装kafka-manager"></a>安装 kafka-manager</h3><h4 id="普通安装"><a href="#普通安装" class="headerlink" title="普通安装"></a>普通安装</h4><h5 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h5><pre class="language-none"><code class="language-none">wget 'https://github.com/yahoo/CMAK/releases/download/3.0.0.5/cmak-3.0.0.5.zip'unzip cmak-3.0.0.5.zipcd cmak-3.0.0.5</code></pre><h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><p>修改  <code>conf/application.conf</code> 文件：</p><pre class="language-conf" data-language="conf"><code class="language-conf">kafka-manager.zkhosts="127.0.0.1:2181"kafka-manager.zkhosts=${?ZK_HOSTS}cmak.zkhosts="127.0.0.1:2181"cmak.zkhosts=${?ZK_HOSTS}</code></pre><h5 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h5><pre class="language-none"><code class="language-none">$ bin/cmak &amp;</code></pre><h4 id="docker-安装"><a href="#docker-安装" class="headerlink" title="docker 安装"></a>docker 安装</h4><p>DockerHub：<span class="exturl" data-url="aHR0cHM6Ly9odWIuZG9ja2VyLmNvbS9yL3NoZWVwa2lsbGVyL2thZmthLW1hbmFnZXI=">https://hub.docker.com/r/sheepkiller/kafka-manager<i class="fa fa-external-link-alt"></i></span></p><p>安装命令：</p><pre class="language-shell" data-language="shell"><code class="language-shell">docker run -it \    --name kafka-manager \    -p 9000:9000 \    -e ZK_HOSTS=127.0.0.1:2181 \    -e KAFKA_MANAGER_AUTH_ENABLED=true \    -e KAFKA_MANAGER_USERNAME=admin \    -e KAFKA_MANAGER_PASSWORD=admin \    -d sheepkiller/kafka-manager:latest</code></pre><h3 id="配置-kafka-manager"><a href="#配置-kafka-manager" class="headerlink" title="配置 kafka-manager"></a>配置 kafka-manager</h3><p>kafka-manager 默认的端口是 9000。</p><ol><li><p>添加集群</p><p><img src="/images/2020/08/1597386588682.png" alt="1597386588682" loading="lazy"></p></li><li><p>配置集群</p><p><img src="/images/2020/08/1597386711921.png" alt="1597386711921" loading="lazy"></p></li></ol><h3 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h3><p>如果使用 kafka-manager 监控，需要开启 JMX，则需要勾选：</p><p><img src="/images/2020/08/1597405340838.png" alt="1597405340838" loading="lazy"></p><p>否则会有以下报错：</p><pre class="language-none"><code class="language-none">2020-08-14 17:30:58,236 - [ERROR] k.m.j.KafkaJMX$ - Failed to connect to service:jmx:rmi:///jndi/rmi://dm161.bjth.163.org:-1/jmxrmijava.lang.IllegalArgumentException: requirement failed: No jmx port but jmx polling enabled!</code></pre><p>启动 kafka 服务时指定 <code>JMX_PORT</code> 值:</p><pre class="language-none"><code class="language-none">JMX_PORT=9999 nohup bin/kafka-server-start.sh config/server.properties &amp;</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;kafka-manager地址&quot;&gt;&lt;a href=&quot;#kafka-manager地址&quot; class=&quot;headerlink&quot; title=&quot;kafka-manager地址&quot;&gt;&lt;/a&gt;kafka-manager 地址&lt;/h3&gt;&lt;p&gt;GitHub 地址：&lt;/p&gt;
&lt;b
      
    
    </summary>
    
    
      <category term="Linux" scheme="https://jueee.github.io/categories/Linux/"/>
    
      <category term="软件" scheme="https://jueee.github.io/categories/Linux/%E8%BD%AF%E4%BB%B6/"/>
    
    
      <category term="Linux" scheme="https://jueee.github.io/tags/Linux/"/>
    
      <category term="软件" scheme="https://jueee.github.io/tags/%E8%BD%AF%E4%BB%B6/"/>
    
      <category term="Kafka" scheme="https://jueee.github.io/tags/Kafka/"/>
    
  </entry>
  
  <entry>
    <title>使用 Jrebel，实现热部署</title>
    <link href="https://jueee.github.io/2020/08/2020-08-13-%E4%BD%BF%E7%94%A8Jrebel%EF%BC%8C%E5%AE%9E%E7%8E%B0%E7%83%AD%E9%83%A8%E7%BD%B2/"/>
    <id>https://jueee.github.io/2020/08/2020-08-13-%E4%BD%BF%E7%94%A8Jrebel%EF%BC%8C%E5%AE%9E%E7%8E%B0%E7%83%AD%E9%83%A8%E7%BD%B2/</id>
    <published>2020-08-13T00:00:00.000Z</published>
    <updated>2020-08-13T10:49:50.472Z</updated>
    
    <content type="html"><![CDATA[<p>JRebel 是一套 JavaEE 开发工具。JRebel 允许开发团队在有限的时间内完成更多的任务修正更多的问题，发布更高质量的软件产品。 </p><h3 id="什么是热部署？"><a href="#什么是热部署？" class="headerlink" title="什么是热部署？"></a>什么是热部署？</h3><p>所谓热部署，就是在应用正在运行的时候升级软件，却不需要重新启动应用。对于 Java 应用程序来说，热部署就是在运行时更新 Java 类文件。</p><p>在基于 Java 的应用服务器实现热部署的过程中，类装入器扮演着重要的角色。大多数基于 Java 的应用服务器，包括 EJB 服务器和 Servlet 容器，都支持热部署。类装入器不能重新装入一个已经装入的类，但只要使用一个新的类装入器实例，就可以将类再次装入一个正在运行的应用程序。</p><h3 id="Jrebel-介绍"><a href="#Jrebel-介绍" class="headerlink" title="Jrebel 介绍"></a>Jrebel 介绍</h3><p>官网：<span class="exturl" data-url="aHR0cHM6Ly9tYW51YWxzLmpyZWJlbC5jb20vanJlYmVsLw==">https://manuals.jrebel.com/jrebel/<i class="fa fa-external-link-alt"></i></span></p><p>JRebel 是一个 JVM Java 代理，它与应用程序服务器集成，从而使类可以使用现有的类加载器<strong>重新</strong>加载。只有更改的类会重新编译并立即重新加载到正在运行的应用程序中。</p><h3 id="Jrebel-功能"><a href="#Jrebel-功能" class="headerlink" title="Jrebel 功能"></a>Jrebel 功能</h3><p>Jrebel 可以实现基于类、XML 文件的增删查改，也能够实现方法体的增删查改的热部署。</p><p>JRebel 工作在与 HotSwap 不同的一个抽象层面上。鉴于 HotSwap 是工作在虚拟机层面上，且依赖于 JVM 的内部运作，JRebel 用到了 JVM 的两个显著的功能特征 —— 抽象的字节码和类加载器。类加载器允许 JRebel 辨别出类被加载的时刻，然后实时地翻译字节码，用以在虚拟机和可执行代码之间创建另一个抽象层。</p><table><thead><tr><th align="left">支持类别</th><th align="left"> Jrebel</th><th align="left">JVM Hot Swap</th></tr></thead><tbody><tr><td align="left"> 方法体内代码的修改</td><td align="left">支持</td><td align="left">支持</td></tr><tr><td align="left">方法参数、名称、返回值的变动</td><td align="left">支持</td><td align="left">不支持</td></tr><tr><td align="left">方法体注解的变动</td><td align="left">支持</td><td align="left">不支持</td></tr><tr><td align="left">新增、删除 N (N&gt;0) 个方法</td><td align="left">支持</td><td align="left">不支持</td></tr><tr><td align="left">类的增删查改，其他类对此新增类的引用</td><td align="left">支持</td><td align="left">不支持</td></tr><tr><td align="left">新增接口，以及它的实现类</td><td align="left">支持</td><td align="left">不支持</td></tr><tr><td align="left">改变静态字段值（仅 static）</td><td align="left">不支持</td><td align="left">不支持</td></tr><tr><td align="left">改变常量字段值（final static or final）</td><td align="left">支持</td><td align="left">不支持</td></tr><tr><td align="left">枚举类 / 值（增删查改），并对它调用</td><td align="left">支持</td><td align="left">不支持</td></tr></tbody></table><h3 id="Jrebel-安装"><a href="#Jrebel-安装" class="headerlink" title="Jrebel 安装"></a>Jrebel 安装</h3><h4 id="安装-Jrebel"><a href="#安装-Jrebel" class="headerlink" title="安装 Jrebel"></a>安装 Jrebel</h4><p>参考：<span class="exturl" data-url="aHR0cHM6Ly9tYW51YWxzLmpyZWJlbC5jb20vanJlYmVsL2lkZS9pbmRleC5odG1s">https://manuals.jrebel.com/jrebel/ide/index.html<i class="fa fa-external-link-alt"></i></span></p><p><img src="/images/2020/08/1597297821144.png" alt="1597297821144" loading="lazy"></p><h4 id="破解Jrebel"><a href="#破解Jrebel" class="headerlink" title="破解Jrebel"></a>破解 Jrebel</h4><ol><li>点击打开网站：<span class="exturl" data-url="aHR0cDovL215bmlnaHQudG9wOjEwMDg2Lw==">http://mynight.top:10086<i class="fa fa-external-link-alt"></i></span>，复制第二行链接</li><li><img src="/images/2020/08/1597297837282.png" alt="1597297837282" loading="lazy"></li><li><img src="/images/2020/08/1597297849629.png" alt="1597297849629" loading="lazy"></li><li><img src="/images/2020/08/1597297856954.png" alt="1597297856954" loading="lazy"></li><li><img src="/images/2020/08/1597297962755.png" alt="1597297962755" loading="lazy"></li><li>至此 Jrebel 全部破解完毕。</li></ol><h3 id="Jrebel-注意事项"><a href="#Jrebel-注意事项" class="headerlink" title="Jrebel 注意事项"></a>Jrebel 注意事项</h3><ol><li><p>每次重新编译加载 classes 文件的时候，控制台 console 都会输出一段文字：</p><p>（2018-03-30 10:49:53 JRebel: Reloading class “包名。类名.class”.）</p><p>这段文字代表该类已经重加载完毕，请确保这段文字输出以后，再调试。</p></li><li><p>以 Spring boot，启动的项目需要注意：<br>执行重新编译（recompile）类的时候，需要注意 被编译类 的依赖顺序。</p><p>例如：A 类实现了 B 接口（类 A 和接口 B 都被修改的前提下），那么需要先重新编译（recompile）B 接口<br>再重新编译（recompile）A 类。</p><p>当然，如果只修改了类 A 的内容，接口 B 未做修改，则只需要重新编译（recompile）类 A</p></li></ol>]]></content>
    
    <summary type="html">
    
      JRebel是一套JavaEE开发工具。JRebel允许开发团队在有限的时间内完成更多的任务修正更多的问题，发布更高质量的软件产品。
    
    </summary>
    
    
      <category term="软件" scheme="https://jueee.github.io/categories/%E8%BD%AF%E4%BB%B6/"/>
    
      <category term="IDE" scheme="https://jueee.github.io/categories/%E8%BD%AF%E4%BB%B6/IDE/"/>
    
    
      <category term="软件" scheme="https://jueee.github.io/tags/%E8%BD%AF%E4%BB%B6/"/>
    
      <category term="IDE" scheme="https://jueee.github.io/tags/IDE/"/>
    
  </entry>
  
  <entry>
    <title>Arthas 之通过 thread 命令定位线程问题</title>
    <link href="https://jueee.github.io/2020/08/2020-08-13-Arthas%E4%B9%8B%E9%80%9A%E8%BF%87thread%E5%91%BD%E4%BB%A4%E5%AE%9A%E4%BD%8D%E7%BA%BF%E7%A8%8B%E9%97%AE%E9%A2%98/"/>
    <id>https://jueee.github.io/2020/08/2020-08-13-Arthas%E4%B9%8B%E9%80%9A%E8%BF%87thread%E5%91%BD%E4%BB%A4%E5%AE%9A%E4%BD%8D%E7%BA%BF%E7%A8%8B%E9%97%AE%E9%A2%98/</id>
    <published>2020-08-13T00:00:00.000Z</published>
    <updated>2020-08-14T11:25:56.451Z</updated>
    
    <content type="html"><![CDATA[<p>通过 Arthas 中的 thread 命令，可以查看当前线程信息及线程的堆栈。从而可以定位线程问题。</p><h3 id="thread-命令介绍"><a href="#thread-命令介绍" class="headerlink" title="thread 命令介绍"></a>thread 命令介绍</h3><p>官方文档：</p><blockquote><p><span class="exturl" data-url="aHR0cHM6Ly9hbGliYWJhLmdpdGh1Yi5pby9hcnRoYXMvdGhyZWFkLmh0bWw=">https://alibaba.github.io/arthas/thread.html<i class="fa fa-external-link-alt"></i></span></p></blockquote><h4 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h4><p>使用 <code>thread --help</code> 获取 thread 命令的帮助信息：</p><p><img src="/images/2020/08/1597314852787.png" alt="1597314852787" loading="lazy"></p><p>主要参数说明如下：</p><table><thead><tr><th>参数名称</th><th>参数说明</th></tr></thead><tbody><tr><td><em> id</em></td><td> 线程 id</td></tr><tr><td>[n:]</td><td> 指定最忙的前 N 个线程并打印堆栈</td></tr><tr><td> [b]</td><td> 找出当前阻塞其他线程的线程</td></tr><tr><td> [i <code>&lt;value&gt;</code>]</td><td> 指定 cpu 占比统计的采样间隔，单位为毫秒</td></tr></tbody></table><h4 id="线程常见状态"><a href="#线程常见状态" class="headerlink" title="线程常见状态"></a>线程常见状态</h4><p>定位线程问题之前，先回顾一下线程的几种常见状态：</p><ul><li><p><strong>RUNNABLE</strong> 运行中</p></li><li><p><strong>TIMED_WAITIN</strong> 调用了以下方法的线程会进入 <strong>TIMED_WAITING</strong>：</p><ol><li>Thread#sleep()</li><li>Object#wait () 并加了超时参数</li><li> Thread#join () 并加了超时参数</li><li> LockSupport#parkNanos()</li><li>LockSupport#parkUntil()</li></ol></li><li><p><strong>WAITING</strong> 当线程调用以下方法时会进入 WAITING 状态：</p><ol><li>Object#wait () 而且不加超时参数</li><li> Thread#join () 而且不加超时参数</li><li> LockSupport#park()</li></ol></li><li><p><strong>BLOCKED</strong> 阻塞，等待锁</p></li></ul><h4 id="cpu占比的统计"><a href="#cpu占比的统计" class="headerlink" title="cpu占比的统计"></a>cpu 占比的统计</h4><blockquote><p>这里的 cpu 统计的是，一段采样间隔内，当前 JVM 里各个线程所占用的 cpu 时间占总 cpu 时间的百分比。</p><p>其计算方法为： 首先进行一次采样，获得所有线程的 cpu 的使用时间 (调用的是 <code>java.lang.management.ThreadMXBean#getThreadCpuTime</code> 这个接口)，然后睡眠一段时间，默认 100ms，可以通过 <code>-i</code> 参数指定，然后再采样一次，最后得出这段时间内各个线程消耗的 cpu 时间情况，最后算出百分比。</p></blockquote><blockquote><p>注意： 这个统计也会产生一定的开销（JDK 这个接口本身开销比较大），因此会看到 as 的线程占用一定的百分比，为了降低统计自身的开销带来的影响，可以把采样间隔拉长一些，比如 5000 毫秒。</p></blockquote><blockquote><p>如果想看从 Java 进程启动开始到现在的 cpu 占比情况：可以使用 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL29sZHJhdGxlZS91c2VmdWwtc2NyaXB0cy9ibG9iL21hc3Rlci9kb2NzL2phdmEubWQjLXNob3ctYnVzeS1qYXZhLXRocmVhZHM=">show-busy-java-threads<i class="fa fa-external-link-alt"></i></span> 这个脚本</p></blockquote><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><p>首先编写一个有各种情况的测试类运行起来，再使用 <strong>Arthas</strong> 进行问题定位：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> hashSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">ExecutorService</span> executorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">addHashSetThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 不断的向 hashSet 集合增加数据</span>        <span class="token function">cpuHigh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 模拟 CPU 过高</span>        <span class="token function">cpuNormal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 模拟线程阻塞</span>        <span class="token function">deadThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 模拟线程死锁</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 极度消耗CPU的线程     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">cpuHigh</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"cpu start 100"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 添加到线程</span>        executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 普通消耗CPU的线程     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">cpuNormal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"cpu start"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 模拟线程阻塞,向已经满了的线程池提交线程     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"thread start"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 添加到线程</span>        executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 死锁     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">deadThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">/** 创建资源 */</span>        <span class="token class-name">Object</span> resourceA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> resourceB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 创建线程</span>        <span class="token class-name">Thread</span> threadA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>resourceA<span class="token punctuation">)</span> <span class="token punctuation">{</span>                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" get ResourceA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"waiting get resourceB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>resourceB<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" get resourceB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> threadB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>resourceB<span class="token punctuation">)</span> <span class="token punctuation">{</span>                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" get ResourceB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"waiting get resourceA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>resourceA<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" get resourceA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        threadA<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        threadB<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 不断的向 hashSet 集合添加数据     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">addHashSetThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 初始化常量</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    hashSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"count"</span> <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    count<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="定位-CPU-使用较高的线程"><a href="#定位-CPU-使用较高的线程" class="headerlink" title="定位 CPU 使用较高的线程"></a>定位 CPU 使用较高的线程</h3><p>上面的代码例子有一个 <code>CPU</code> 空转的死循环，非常的消耗 <code>CPU性能</code>，那么怎么找出来呢？</p><p>使用 <strong>thread</strong> 查看<strong>所有</strong>线程信息，同时会列出每个线程的 <code>CPU</code> 使用率，可以看到图里 ID 为 12 的线程 CPU 使用 100%。</p><p><img src="/images/2020/08/1597314558126.png" alt="1597314558126" loading="lazy"></p><p>使用命令 <strong>thread 12</strong> 查看 CPU 消耗较高的 12 号线程信息，可以看到 CPU 使用较高的方法和行数。</p><p><img src="/images/2020/08/1597314597613.png" alt="1597314597613" loading="lazy"></p><p>如果只是为了寻找 CPU 使用较高的线程，可以直接使用命令 <strong>thread -n [显示的线程个数]</strong> ，就可以排列出 CPU 使用率 <strong>Top N</strong> 的线程。</p><p><img src="/images/2020/08/1597314636547.png" alt="1597314636547" loading="lazy"></p><p>定位到的 CPU 使用最高的方法：</p><p><img src="/images/2020/08/1597314662083.png" alt="1597314662083" loading="lazy"></p><h3 id="定位线程阻塞"><a href="#定位线程阻塞" class="headerlink" title="定位线程阻塞"></a>定位线程阻塞</h3><p>上面的模拟代码里，定义了线程池大小为 1 的线程池，然后在 <code>cpuHigh</code> 方法里提交了一个线程，在 <code>thread</code> 方法再次提交了一个线程，后面的这个线程因为线程池已满，会阻塞下来。</p><p>使用 <strong>thread | grep pool</strong> 命令查看线程池里线程信息。</p><p><img src="/images/2020/08/1597314720720.png" alt="1597314720720" loading="lazy"></p><p>可以看到线程池有 <strong>WAITING</strong> 的线程：</p><p><img src="/images/2020/08/1597314739701.png" alt="1597314739701" loading="lazy"></p><h3 id="定位线程死锁"><a href="#定位线程死锁" class="headerlink" title="定位线程死锁"></a>定位线程死锁</h3><p>上面的模拟代码里 <code>deadThread</code> 方法实现了一个死锁，使用 <strong>thread -b</strong> 命令查看直接定位到死锁信息。</p><p><img src="/images/2020/08/1597314791433.png" alt="1597314791433" loading="lazy"></p>]]></content>
    
    <summary type="html">
    
      通过Arthas中的thread命令，可以查看当前线程信息及线程的堆栈。从而可以定位线程问题。
    
    </summary>
    
    
      <category term="Java" scheme="https://jueee.github.io/categories/Java/"/>
    
      <category term="Java诊断" scheme="https://jueee.github.io/categories/Java/Java%E8%AF%8A%E6%96%AD/"/>
    
      <category term="Arthas" scheme="https://jueee.github.io/categories/Java/Java%E8%AF%8A%E6%96%AD/Arthas/"/>
    
    
      <category term="Java诊断" scheme="https://jueee.github.io/tags/Java%E8%AF%8A%E6%96%AD/"/>
    
      <category term="Arthas" scheme="https://jueee.github.io/tags/Arthas/"/>
    
      <category term="Java" scheme="https://jueee.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Git 每次都需要输入用户名密码的问题解决</title>
    <link href="https://jueee.github.io/2020/08/2020-08-13-Git%E6%AF%8F%E6%AC%A1%E9%83%BD%E9%9C%80%E8%A6%81%E8%BE%93%E5%85%A5%E7%94%A8%E6%88%B7%E5%90%8D%E5%AF%86%E7%A0%81%E7%9A%84%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
    <id>https://jueee.github.io/2020/08/2020-08-13-Git%E6%AF%8F%E6%AC%A1%E9%83%BD%E9%9C%80%E8%A6%81%E8%BE%93%E5%85%A5%E7%94%A8%E6%88%B7%E5%90%8D%E5%AF%86%E7%A0%81%E7%9A%84%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</id>
    <published>2020-08-13T00:00:00.000Z</published>
    <updated>2020-08-13T11:23:19.001Z</updated>
    
    <content type="html"><![CDATA[<h3 id="提交GitHub"><a href="#提交GitHub" class="headerlink" title="提交GitHub"></a>提交 GitHub</h3><p>使用 git 提交文件到 github, 每次都要输入用户名和密码，操作起来很麻烦，以下方法可解决，记录以下。</p><h4 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h4><p>在 clone 项目的时候，使用了 https 方式，而不是 ssh 方式。默认 clone 方式是：https。</p><p><img src="/images/2020/08/1597317084639.png" alt="1597317084639" loading="lazy"></p><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><ol><li><p>查看 clone 地址：<code>git remote -v</code></p><p><img src="/images/2020/08/1597317130019.png" alt="1597317130019" loading="lazy"></p><p>说明是 https 方式，现在换成 ssh 方式。</p></li><li><p>移除 https 的方式：<code>git remote rm origin</code></p><p><img src="/images/2020/08/1597317256891.png" alt="1597317256891" loading="lazy"></p><p>再次查看 clone 地址：<code>git remote -v</code>，显示没有地址。</p></li><li><p>查看 ssh 方式地址，在 github 上，切换到 ssh 方式，然后复制地址。</p><p><img src="/images/2020/08/1597317342069.png" alt="1597317342069" loading="lazy"></p></li><li><p>添加新的 git 方式： <code>git remote add origin git 地址</code></p><p><img src="/images/2020/08/1597317394906.png" alt="1597317394906" loading="lazy"></p></li><li><p>重新 push：<code>git push origin master</code>。</p></li></ol><h3 id="提交普通-Git"><a href="#提交普通-Git" class="headerlink" title="提交普通 Git"></a>提交普通 Git</h3><h4 id="解决办法1"><a href="#解决办法1" class="headerlink" title="解决办法1"></a>解决办法 1</h4><p>在 <code>C:\Users\Administrator</code> 中的<code>.gitconfig</code> 文件，文本编辑器打开，记事本就可以，添加一行</p><pre class="language-none"><code class="language-none">[credential]    helper = store</code></pre><h4 id="解决方法2"><a href="#解决方法2" class="headerlink" title="解决方法2"></a>解决方法 2</h4><p>git bash 进入你的项目目录，输入：</p><pre class="language-none"><code class="language-none">git config --global credential.helper store</code></pre><p>然后会修改 <code>C:\Users\Administrator</code> 中的<code>.gitconfig</code> 文件。</p>]]></content>
    
    <summary type="html">
    
      使用git提交文件到github,每次都要输入用户名和密码，操作起来很麻烦，以下方法可解决。
    
    </summary>
    
    
      <category term="Git" scheme="https://jueee.github.io/categories/Git/"/>
    
    
      <category term="Git" scheme="https://jueee.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>浏览器提速软件 SpeedyFox</title>
    <link href="https://jueee.github.io/2020/08/2020-08-12-%E6%B5%8F%E8%A7%88%E5%99%A8%E6%8F%90%E9%80%9F%E8%BD%AF%E4%BB%B6SpeedyFox/"/>
    <id>https://jueee.github.io/2020/08/2020-08-12-%E6%B5%8F%E8%A7%88%E5%99%A8%E6%8F%90%E9%80%9F%E8%BD%AF%E4%BB%B6SpeedyFox/</id>
    <published>2020-08-12T00:00:00.000Z</published>
    <updated>2020-08-13T06:07:28.402Z</updated>
    
    <content type="html"><![CDATA[<h3 id="软件介绍"><a href="#软件介绍" class="headerlink" title="软件介绍"></a>软件介绍</h3><p>SpeedyFox 是一个超级简单的工具，一个单窗口，没有选项的工具来优化浏览器的性能。</p><p>SpeedyFox 声称通过对 SQLITE 数据库进行碎片整理来加速浏览器。它说，这些数据库随着时间的推移而变得变形，减慢了启动速度，并推迟了使用 Cookie 和历史记录的操作。</p><h3 id="下载网址"><a href="#下载网址" class="headerlink" title="下载网址"></a>下载网址</h3><blockquote><p><span class="exturl" data-url="aHR0cHM6Ly9jcnlzdGFsaWRlYS5jb20vc3BlZWR5Zm94">https://crystalidea.com/speedyfox<i class="fa fa-external-link-alt"></i></span></p></blockquote><h3 id="使用软件"><a href="#使用软件" class="headerlink" title="使用软件"></a>使用软件</h3><p>Edge 浏览器，Chrome、Firefox 等浏览器，以及大部分国产浏览器，都可以使用。SpeedyFox 能自动识别，浏览器的配置文件路径。</p><p>所以，打开软件，只要直接点击 Optimize 按钮就行了，不需要复杂的配置。</p><p>优化过程可能需要 5 秒钟到一分钟，具体取决于数据库的大小。整个优化过程很安全，因为它不会影响您的历史记录，书签，密码等。</p><p>根据您的浏览活动，建议每 1-2 周对您的个人资料进行一次优化。</p><p>如下图所示：</p><p><img src="/images/2020/08/1597286104064.png" alt="1597286104064" loading="lazy"></p>]]></content>
    
    <summary type="html">
    
      SpeedyFox是一个超级简单的工具，一个单窗口，没有选项的工具来优化浏览器的性能。
    
    </summary>
    
    
      <category term="Windows" scheme="https://jueee.github.io/categories/Windows/"/>
    
      <category term="软件" scheme="https://jueee.github.io/categories/Windows/%E8%BD%AF%E4%BB%B6/"/>
    
    
      <category term="Windows" scheme="https://jueee.github.io/tags/Windows/"/>
    
      <category term="软件" scheme="https://jueee.github.io/tags/%E8%BD%AF%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 中 DBlink 的使用</title>
    <link href="https://jueee.github.io/2020/08/2020-08-11-MySQL%E4%B8%ADDBlink%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://jueee.github.io/2020/08/2020-08-11-MySQL%E4%B8%ADDBlink%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2020-08-11T00:00:00.000Z</published>
    <updated>2020-08-13T06:47:53.554Z</updated>
    
    <content type="html"><![CDATA[<p>在实际工作中，我们可能会遇到需要操作其他数据库实例的部分表，但又不想系统连接多库。此时我们就需要用到数据表映射。</p><p>如同 Oracle 中的 DBlink 一般，使用过 Oracle DBlink 数据库链接的人都知道可以跨实例来进行数据查询，同样的，Mysql 自带的 FEDERATED 引擎完美的帮我们解决了该问题。</p><h3 id="检查引擎"><a href="#检查引擎" class="headerlink" title="检查引擎"></a>检查引擎</h3><p>查看 target 端是否安装了 FEDERATED 存储引擎：</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; show engines ;</code></pre><p>例如：</p><p><img src="/images/2020/08/1597126521400.png" alt="1597126521400" loading="lazy"></p><h3 id="安装引擎"><a href="#安装引擎" class="headerlink" title="安装引擎"></a>安装引擎</h3><p>注意：如果没有安装 <strong>FEDERATED 引擎</strong>，执行：</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">install plugin federated soname 'ha_federated.so';</code></pre><p>例如：</p><p><img src="/images/2020/08/1597126538702.png" alt="1597126538702" loading="lazy"></p><p>再次检查引擎：</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; show engines ;</code></pre><p>例如：</p><p><img src="/images/2020/08/1597126564647.png" alt="1597126564647" loading="lazy"></p><h3 id="开启引擎"><a href="#开启引擎" class="headerlink" title="开启引擎"></a>开启引擎</h3><p>将 federated 添加到 my.cnf 重启数据库</p><pre class="language-cnf" data-language="cnf"><code class="language-cnf">vi /etc/my.cnf[mysqld]federated</code></pre><p>再次检查引擎，例如：</p><p><img src="/images/2020/08/1597126649766.png" alt="1597126649766" loading="lazy"></p><h3 id="建表访问"><a href="#建表访问" class="headerlink" title="建表访问"></a>建表访问</h3><p>使用 CONNECTION 创建 FEDERATED 引擎表通用模型：</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE (......) ENGINE =FEDERATED CONNECTION='mysql://username:password@hostname:port/database/tablename'</code></pre><p>注意 ENGINE=FEDERATED CONNECTION 后为源端地址 避免使用带 @的密码</p><h3 id="使用总结"><a href="#使用总结" class="headerlink" title="使用总结"></a>使用总结</h3><p>基于 MySQL5.7.23 版本，笔者在源端及目标端实验了多种 DDL 及 DML，现简单总结如下，有兴趣的同学可以试试看。</p><ul><li>目标端建表结构可以与源端不一样 推荐与源端结构一致</li><li>源端 DDL (CREATE、ALTER、DROP 等语句) 语句更改表结构 目标端不会变化</li><li>源端 DML（SELECT、UPDATE、INSERT、DELETEt 等语句）语句目标端查询会同步</li><li>源端 drop 表 目标端结构还在但无法查询</li><li>目标端不能执行 DDL 语句</li><li>目标端执行 DML 语句 源端数据也会变化</li><li>目标端 truncate 表 源端表数据也会被清空</li><li>目标端 drop 表对源端无影响</li></ul><h3 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h3><p>目前 FEDERATED 引擎使用范围还不多，若确实有跨实例访问的需求，建议做好规范，个人总结最佳实践如下：</p><ol><li>源端专门创建只读权限的用户来供目标端使用。</li><li>目标端建议用 CREATE SERVER 方式创建 FEDERATED 表。</li><li>FEDERATED 表不宜太多，迁移时要特别注意。</li><li>目标端应该只做查询使用，禁止在目标端更改 FEDERATED 表。</li><li>建议目标端表名及结构和源端保持一致。</li><li>源端表结构变更后 目标端要及时删除重建。</li></ol>]]></content>
    
    <summary type="html">
    
      在实际工作中，我们可能会遇到需要操作其他数据库实例的部分表，但又不想系统连接多库。此时我们就需要用到数据表映射。如同Oracle中的DBlink一般，使用过Oracle DBlink数据库链接的人都知道可以跨实例来进行数据查询，同样的，Mysql自带的FEDERATED引擎完美的帮我们解决了该问题。
    
    </summary>
    
    
      <category term="MySQL" scheme="https://jueee.github.io/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="https://jueee.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Neo4j 初始化密码</title>
    <link href="https://jueee.github.io/2020/08/2020-08-10-Neo4j%E5%88%9D%E5%A7%8B%E5%8C%96%E5%AF%86%E7%A0%81/"/>
    <id>https://jueee.github.io/2020/08/2020-08-10-Neo4j%E5%88%9D%E5%A7%8B%E5%8C%96%E5%AF%86%E7%A0%81/</id>
    <published>2020-08-10T00:00:00.000Z</published>
    <updated>2020-08-13T10:42:42.984Z</updated>
    
    <content type="html"><![CDATA[<h3 id="初始化Neo4j"><a href="#初始化Neo4j" class="headerlink" title="初始化Neo4j"></a>初始化 Neo4j</h3><p>Web 浏览器访问：<code>http://IP:7474/</code></p><p>连接 URL 为 ：<code>bolt://IP:7687</code>，初始用户名、密码为 <code>neo4j</code>，如下图所示：</p><p><img src="/images/2020/08/1597130874884.png" alt="1597130874884" loading="lazy"></p><p>初始化登录成功后，会要求重置 neo4j 密码，修改并确认新密码。</p><p><img src="/images/2020/08/1597130933055.png" alt="1597130933055" loading="lazy"></p><h3 id="浏览器下更改密码"><a href="#浏览器下更改密码" class="headerlink" title="浏览器下更改密码"></a>浏览器下更改密码</h3><p>Web 浏览器访问：<code>http://IP:7474/</code>，登录成功后，输入命令：</p><pre class="language-none"><code class="language-none">:server change-password</code></pre><h3 id="命令行更改密码"><a href="#命令行更改密码" class="headerlink" title="命令行更改密码"></a>命令行更改密码</h3><ol><li>进入 neo4j 安装目录， 并进入 bin 目录；</li><li>运行 <code>./cypher-shell</code> 命令， 输入用户名，密码（初始默认用户名和密码为 neo4j）</li><li>输入命令: <code>CALL dbms.security.changePassword('123456');</code> 输入命令  <code>:exit;</code> 退出</li></ol><p>例如：</p><p><img src="/images/2020/08/1597132382397.png" alt="1597132382397" loading="lazy"></p><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p>neo4j 设置项：<span class="exturl" data-url="aHR0cHM6Ly9uZW80ai5jb20vZG9jcy9vcGVyYXRpb25zLW1hbnVhbC9jdXJyZW50L3JlZmVyZW5jZS9wcm9jZWR1cmVzLw==">https://neo4j.com/docs/operations-manual/current/reference/procedures/<i class="fa fa-external-link-alt"></i></span></p><p>设置初始化密码：<span class="exturl" data-url="aHR0cHM6Ly9uZW80ai5jb20vZG9jcy9vcGVyYXRpb25zLW1hbnVhbC9jdXJyZW50L2NvbmZpZ3VyYXRpb24vc2V0LWluaXRpYWwtcGFzc3dvcmQv">https://neo4j.com/docs/operations-manual/current/configuration/set-initial-password/<i class="fa fa-external-link-alt"></i></span></p><p>密码和用户恢复：<span class="exturl" data-url="aHR0cHM6Ly9uZW80ai5jb20vZG9jcy9vcGVyYXRpb25zLW1hbnVhbC9jdXJyZW50L2NvbmZpZ3VyYXRpb24vcGFzc3dvcmQtYW5kLXVzZXItcmVjb3Zlcnkv">https://neo4j.com/docs/operations-manual/current/configuration/password-and-user-recovery/<i class="fa fa-external-link-alt"></i></span></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;初始化Neo4j&quot;&gt;&lt;a href=&quot;#初始化Neo4j&quot; class=&quot;headerlink&quot; title=&quot;初始化Neo4j&quot;&gt;&lt;/a&gt;初始化 Neo4j&lt;/h3&gt;&lt;p&gt;Web 浏览器访问：&lt;code&gt;http://IP:7474/&lt;/code&gt;&lt;/p&gt;
&lt;p
      
    
    </summary>
    
    
      <category term="Neo4j" scheme="https://jueee.github.io/categories/Neo4j/"/>
    
    
      <category term="Neo4j" scheme="https://jueee.github.io/tags/Neo4j/"/>
    
  </entry>
  
  <entry>
    <title>博客网址增加站点分析</title>
    <link href="https://jueee.github.io/2020/08/2020-08-09-%E5%8D%9A%E5%AE%A2%E7%BD%91%E5%9D%80%E5%A2%9E%E5%8A%A0%E7%AB%99%E7%82%B9%E5%88%86%E6%9E%90/"/>
    <id>https://jueee.github.io/2020/08/2020-08-09-%E5%8D%9A%E5%AE%A2%E7%BD%91%E5%9D%80%E5%A2%9E%E5%8A%A0%E7%AB%99%E7%82%B9%E5%88%86%E6%9E%90/</id>
    <published>2020-08-09T00:00:00.000Z</published>
    <updated>2020-08-13T06:07:28.382Z</updated>
    
    <content type="html"><![CDATA[<h3 id="谷歌分析"><a href="#谷歌分析" class="headerlink" title="谷歌分析"></a>谷歌分析</h3><ol><li><p>创建一个帐户并登录 <span class="exturl" data-url="aHR0cHM6Ly9hbmFseXRpY3MuZ29vZ2xlLmNvbS8=">Google Analytics（分析）<i class="fa fa-external-link-alt"></i></span>。<span class="exturl" data-url="aHR0cHM6Ly9zdXBwb3J0Lmdvb2dsZS5jb20vYW5hbHl0aWNzLz9obD1lbiN0b3BpYz0zNTQ0OTA2">更详细的文档<i class="fa fa-external-link-alt"></i></span></p></li><li><p>编辑 主题配置文件并 <code>tracking_id</code> 在部分下填写 <code>google_analytics</code> 您的 Google 跟踪 ID。Google 曲目 ID 始终以开头 <code>UA-</code>。</p><pre class="language-yml" data-language="yml"><code class="language-yml"># Google Analyticsgoogle_analytics:tracking_id: UA-XXXXXXXX-Xonly_pageview: false</code></pre></li><li><p>当 field <code>only_pageview</code> 设置为 true 时，NexT 将仅向 <code>pageview</code>Google Analytics（分析）发送事件。<br>使用它而不是使用它的好处 <code>only_pageview: false</code> 是减少了站点上的外部脚本，这将为您提供更好的性能，但没有完整的分析功能。</p></li></ol><h3 id="百度分析"><a href="#百度分析" class="headerlink" title="百度分析"></a>百度分析</h3><ol><li><p>登录 <span class="exturl" data-url="aHR0cHM6Ly90b25namkuYmFpZHUuY29tLw==">百度分析<i class="fa fa-external-link-alt"></i></span> 并找到网站代码获取页面。</p></li><li><p>在后面复制脚本 ID <code>hm.js?</code>，如下图：</p><p><img src="/images/2020/08/1597041510807.png" alt="1597041510807" loading="lazy"></p></li><li><p>编辑 主题配置文件并将部分更改 <code>baidu_analytics</code> 为您的脚本 ID。</p><pre class="language-yml" data-language="yml"><code class="language-yml"># Baidu Analytics IDbaidu_analytics: your_id</code></pre></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;谷歌分析&quot;&gt;&lt;a href=&quot;#谷歌分析&quot; class=&quot;headerlink&quot; title=&quot;谷歌分析&quot;&gt;&lt;/a&gt;谷歌分析&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;创建一个帐户并登录 &lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9h
      
    
    </summary>
    
    
      <category term="Blog" scheme="https://jueee.github.io/categories/Blog/"/>
    
    
      <category term="Blog" scheme="https://jueee.github.io/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>博客网址增加站点地图 sitemap</title>
    <link href="https://jueee.github.io/2020/08/2020-08-09-%E5%8D%9A%E5%AE%A2%E7%BD%91%E5%9D%80%E5%A2%9E%E5%8A%A0%E7%AB%99%E7%82%B9%E5%9C%B0%E5%9B%BEsitemap/"/>
    <id>https://jueee.github.io/2020/08/2020-08-09-%E5%8D%9A%E5%AE%A2%E7%BD%91%E5%9D%80%E5%A2%9E%E5%8A%A0%E7%AB%99%E7%82%B9%E5%9C%B0%E5%9B%BEsitemap/</id>
    <published>2020-08-09T00:00:00.000Z</published>
    <updated>2020-08-13T06:07:28.391Z</updated>
    
    <content type="html"><![CDATA[<p>站点地图是一种文件，您可以通过该文件列出您网站上的网页，从而将您网站内容的组织架构告知 Google 和其他搜索引擎。Googlebot 等搜索引擎网页抓取工具会读取此文件，以便更加智能地抓取您的网站。</p><h3 id="站点地图"><a href="#站点地图" class="headerlink" title="站点地图"></a>站点地图</h3><p>站点地图是一个网站所有链接的容器。很多网站的连接层次比较深，爬虫很难抓取到，站点地图可以方便爬虫抓取网站页面，通过抓取网站页面，清晰了解网站的架构，网站地图一般存放在根目录下并命名 sitemap，为爬虫指路，增加网站重要内容页面的收录。</p><p>站点地图就是根据网站的结构、框架、内容，生成的导航网页文件。站点地图对于提高用户体验有好处，它们为网站访问者指明方向，并帮助迷失的访问者找到他们想看的页面。</p><h3 id="添加-sitemap"><a href="#添加-sitemap" class="headerlink" title="添加 sitemap"></a>添加 sitemap</h3><ol><li><p>安装插件：</p><pre class="language-none"><code class="language-none">npm install hexo-generator-sitemap --savenpm install hexo-generator-baidu-sitemap --save</code></pre></li><li><p>在博客目录的_config.yml 中添加如下代码：</p><pre class="language-yml" data-language="yml"><code class="language-yml"># 自动生成 sitemapsitemap: path: sitemap.xmlbaidusitemap: path: baidusitemap.xml</code></pre></li><li><p>编译博客</p><pre class="language-shell" data-language="shell"><code class="language-shell">npx hexo generate</code></pre></li><li><p>在你的博客根目录的 public 下面发现生成了 sitemap.xml 以及 baidusitemap.xml 就表示成功了。</p><p>如下图所示：</p><p><img src="/images/2020/08/1597229983009.png" alt="1597229983009" loading="lazy"></p></li></ol><h3 id="查看站点地图"><a href="#查看站点地图" class="headerlink" title="查看站点地图"></a>查看站点地图</h3><ul><li><a href="https://jueee.github.io/sitemap.xml">sitemap.xml</a></li><li><a href="https://jueee.github.io/baidusitemap.xml">baidusitemap.xml</a></li></ul>]]></content>
    
    <summary type="html">
    
      站点地图是一种文件，您可以通过该文件列出您网站上的网页，从而将您网站内容的组织架构告知Google和其他搜索引擎。
    
    </summary>
    
    
      <category term="Blog" scheme="https://jueee.github.io/categories/Blog/"/>
    
    
      <category term="Blog" scheme="https://jueee.github.io/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>hexo 博客个性化设置</title>
    <link href="https://jueee.github.io/2020/08/2020-08-08-hexo%E5%8D%9A%E5%AE%A2%E4%B8%AA%E6%80%A7%E5%8C%96%E8%AE%BE%E7%BD%AE/"/>
    <id>https://jueee.github.io/2020/08/2020-08-08-hexo%E5%8D%9A%E5%AE%A2%E4%B8%AA%E6%80%A7%E5%8C%96%E8%AE%BE%E7%BD%AE/</id>
    <published>2020-08-08T00:00:00.000Z</published>
    <updated>2020-08-13T06:07:28.380Z</updated>
    
    <content type="html"><![CDATA[<h3 id="创建-categories"><a href="#创建-categories" class="headerlink" title="创建 categories"></a>创建 categories</h3><ol><li><p>** 新建一个页面，命名为 categories。命令如下：**</p><pre class="language-none"><code class="language-none">npx hexo new page categories</code></pre><p>在 myBlog/source 下会新生成一个新的文件夹 categories<br>，在该文件夹下会有一个 index.md 文件。</p></li><li><p>** 编辑 categories 文件夹下的 index.md**</p><pre class="language-none"><code class="language-none">title: categoriesdate: 2020-08-07 10:29:47type: &quot;categories&quot;comments: false</code></pre></li><li><p>** 在菜单中添加链接。**</p><p>编辑主题的 <code>_config.next.yml</code>，将 menu 中的 categories: /categories 注释去掉，如下:</p><pre class="language-none"><code class="language-none">categories: &#x2F;categories&#x2F; || fa fa-fw fa-th</code></pre></li><li><p>** 安装依赖 **</p><pre class="language-none"><code class="language-none">npm install hexo-generator-index --savenpm install hexo-generator-archive --savenpm install hexo-generator-category --savenpm install hexo-generator-tag --save</code></pre></li></ol><p>参考：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL3dpa2kvTWlncmF0aW5nLWZyb20tMi54LXRvLTMuMA==">https://github.com/hexojs/hexo/wiki/Migrating-from-2.x-to-3.0<i class="fa fa-external-link-alt"></i></span></p><h3 id="添加-README-md"><a href="#添加-README-md" class="headerlink" title="添加 README.md"></a>添加 README.md</h3><h4 id="添加-README-md-1"><a href="#添加-README-md-1" class="headerlink" title="添加 README.md"></a>添加 README.md</h4><p>使用 Github Pages 和 Hexo 搭建的博客，如果在最开始建立仓库的时候没有创建 README.md 文件，那么在后期如何添加呢？</p><p>添加方法：在根目录 source 文件夹下新建 README.md 即可。</p><p>新增：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0p1ZWVlL2p1ZWVlLWJsb2cvYmxvYi9tYXN0ZXIvc291cmNlL1JFQURNRS5tZA==">source/README.md<i class="fa fa-external-link-alt"></i></span></p><p>效果：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0p1ZWVlL2p1ZWVlLmdpdGh1Yi5pbw==">https://github.com/Jueee/jueee.github.io<i class="fa fa-external-link-alt"></i></span></p><h4 id="显示异常"><a href="#显示异常" class="headerlink" title="显示异常"></a>显示异常</h4><p>当我们执行 <code>hexo g -d</code> 部署博客的时候会发现 README.md 变成了 README.html。</p><p>原因就在于当我们在执行 <code>hexo g -d</code> 命令时，.md 文件会被转化成 HTML 文件，并将这些文件放到 public 目录里，最后再提交到远程 GitHub 仓库。</p><p>而 Hexo 也提供了一个方法，让 md 文件不被转换成 HTML，在根目录的 _config.yml 配置文件里，找到 skip_render 关键字，添加 README.md，让解释器跳过渲染：</p><pre class="language-yml" data-language="yml"><code class="language-yml">skip_render:  - README.md</code></pre><h3 id="修改脚注"><a href="#修改脚注" class="headerlink" title="修改脚注"></a>修改脚注</h3><p>修改文件： <code>source\_data\footer.njk</code></p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>footer-custom<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>powered-by<span class="token punctuation">"</span></span><span class="token punctuation">></span></span > 由 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://github.com/next-theme/theme-next-docs<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>theme-link<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>noopener<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Hexo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span> v8.0.0 驱动 < span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post-meta-divider<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>|<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>theme-info<span class="token punctuation">"</span></span><span class="token punctuation">></span></span > 主题 – <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://github.com/next-theme/hexo-theme-next<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>theme-link<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>noopener<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Hexo.NexT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span> v8.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h3 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h3><p>由于 Hexo 自带的代码高亮主题显示不好看，所以主题中使用到了 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2VsZTgyOC9oZXhvLXByaXNtLXBsdWdpbg==">hexo-prism-plugin<i class="fa fa-external-link-alt"></i></span> 的 Hexo 插件来做代码高亮，安装命令如下：</p><p>bash</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i -S hexo-prism-plugin</code></pre><p>然后，修改 Hexo 根目录下 <code>_config.yml</code> 文件中 <code>highlight.enable</code> 的值为 <code>false</code>，并新增 <code>prism</code> 插件相关的配置，主要配置如下：</p><pre class="language-yml" data-language="yml"><code class="language-yml">highlight:  enable: falseprism_plugin:  mode: &#39;preprocess&#39;    # realtime&#x2F;preprocess  theme: &#39;tomorrow&#39;  line_number: false    # default false  custom_css:</code></pre><p>配置参考：<span class="exturl" data-url="aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvaGV4by1wcmlzbS1wbHVnaW4=">https://www.npmjs.com/package/hexo-prism-plugin<i class="fa fa-external-link-alt"></i></span></p><h3 id="修改菜单"><a href="#修改菜单" class="headerlink" title="修改菜单"></a>修改菜单</h3><p>将导航栏的 “归档” 修改为 “博客”。</p><p>修改文件： <code>source\_data\languages.yml</code></p><pre class="language-yml" data-language="yml"><code class="language-yml">zh-CN:  menu:    archives: 博客 </code></pre><h3 id="相关热门帖子"><a href="#相关热门帖子" class="headerlink" title="相关热门帖子"></a>相关热门帖子</h3><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RlYTMvaGV4by1yZWxhdGVkLXBvcHVsYXItcG9zdHM=">NexT<i class="fa fa-external-link-alt"></i></span> 根据 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RlYTMvaGV4by1yZWxhdGVkLXBvcHVsYXItcG9zdHM=">hexo-related-popular-posts<i class="fa fa-external-link-alt"></i></span> 支持相关的帖子功能.</p><p><code>hexo-related-popular-posts</code> 通过执行以下命令来安装网站根目录:</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> hexo-related-popular-posts$ npx hexo clean</code></pre><p>可以通过将值设置 <code>related_posts.enable</code> 为 <code>true</code>in 来启用它主题配置文件.</p><pre class="language-yml" data-language="yml"><code class="language-yml">related_posts:  enable: true</code></pre><h3 id="添加评论系统"><a href="#添加评论系统" class="headerlink" title="添加评论系统"></a>添加评论系统</h3><p>Valine 是基于 Leancloud 的快速，简单和高效的无后端评论系统。</p><ol><li><p>创建一个帐户或登录 <span class="exturl" data-url="aHR0cHM6Ly9sZWFuY2xvdWQuY24vZGFzaGJvYXJkL2xvZ2luLmh0bWwjL3NpZ25pbg==">LeanCloud<i class="fa fa-external-link-alt"></i></span>，然后单击左下角以 <span class="exturl" data-url="aHR0cHM6Ly9sZWFuY2xvdWQuY24vZGFzaGJvYXJkL2FwcGxpc3QuaHRtbCMvbmV3YXBw">创建应用程序<i class="fa fa-external-link-alt"></i></span> 在 <span class="exturl" data-url="aHR0cHM6Ly9sZWFuY2xvdWQuY24vZGFzaGJvYXJkL2FwcGxpc3QuaHRtbCMvYXBwcw==">仪表板中<i class="fa fa-external-link-alt"></i></span>.</p></li><li><p>转到您刚创建的应用程序，<code>Settings → App Keys</code> 在左下角选择，您将看到您的 APP ID 和 APP Key。</p></li><li><p>将值设置 <code>enable</code> 为 <code>true</code>，添加获得的 APP ID（<code>appId</code>）和 APP Key（<code>appKey</code>），然后 <code>valine</code> 在主题配置文件 如下：</p><pre class="language-none"><code class="language-none">valine:enable: falseappId:  # your leancloud application appidappKey:  # your leancloud application appkeyplaceholder: Just go go # comment box placeholderavatar: mm # gravatar stylemeta: [nick, mail, link] # Custom comment headerpageSize: 10 # pagination sizevisitor: false # leancloud-counter-security is not supported for now. When visitor is set to be true, appid and appkey are recommended to be the same as leancloud_visitors&#39; for counter compatibility. Article reading statistic https:&#x2F;&#x2F;valine.js.org&#x2F;visitor.htmlcomment_count: true # If false, comment count will only be displayed in post page, not in home pagerecordIP: false # Whether to record the commenter IPserverURLs: # When the custom domain name is enabled, fill it in here (it will be detected automatically by default, no need to fill in)</code></pre></li></ol><h3 id="更换网页图标"><a href="#更换网页图标" class="headerlink" title="更换网页图标"></a>更换网页图标</h3><h4 id="制作-favicon-图标"><a href="#制作-favicon-图标" class="headerlink" title="制作 favicon 图标"></a>制作 favicon 图标</h4><ol><li>准备好用作标签页 / 网页小图标 favicon 的图片</li><li>搜索 * favicon 在线 *，可以看到一些在线图片转 favicon 的工具<br>我用的是这个（link）： <span class="exturl" data-url="aHR0cDovL3d3dy5iaXRidWcubmV0Lw==">bitbug<i class="fa fa-external-link-alt"></i></span></li><li>利用工具做成图标。<br>我做了 16x16，与 32x32 的。</li></ol><h4 id="编辑配置文件"><a href="#编辑配置文件" class="headerlink" title="编辑配置文件"></a>编辑配置文件</h4><p>在 next 主题的 <strong>_config.yml</strong> 文件，修改新的图片作为 favicon 的对象：</p><pre class="language-yml" data-language="yml"><code class="language-yml">favicon:  small: &#x2F;images&#x2F;basic&#x2F;jue.ico  medium: &#x2F;images&#x2F;basic&#x2F;jue.ico</code></pre>]]></content>
    
    <summary type="html">
    
      Hexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Coding上，是搭建博客的首选框架。
    
    </summary>
    
    
      <category term="Blog" scheme="https://jueee.github.io/categories/Blog/"/>
    
    
      <category term="Blog" scheme="https://jueee.github.io/tags/Blog/"/>
    
      <category term="Node.js" scheme="https://jueee.github.io/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>搭建 hexo+github+next 主题博客</title>
    <link href="https://jueee.github.io/2020/08/2020-08-07-%E6%90%AD%E5%BB%BAhexo+github+next%E4%B8%BB%E9%A2%98%E5%8D%9A%E5%AE%A2/"/>
    <id>https://jueee.github.io/2020/08/2020-08-07-%E6%90%AD%E5%BB%BAhexo+github+next%E4%B8%BB%E9%A2%98%E5%8D%9A%E5%AE%A2/</id>
    <published>2020-08-07T00:00:00.000Z</published>
    <updated>2020-08-13T06:07:28.378Z</updated>
    
    <content type="html"><![CDATA[<h3 id="博客介绍"><a href="#博客介绍" class="headerlink" title="博客介绍"></a>博客介绍</h3><p>博客预览地址：<span class="exturl" data-url="aHR0cHM6Ly90aGVtZS1uZXh0LmpzLm9yZy8=">https://theme-next.js.org/<i class="fa fa-external-link-alt"></i></span></p><h3 id="搭建博客"><a href="#搭建博客" class="headerlink" title="搭建博客"></a>搭建博客</h3><p>GitHub：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL25leHQtdGhlbWUvdGhlbWUtbmV4dC1kb2Nz">https://github.com/next-theme/theme-next-docs<i class="fa fa-external-link-alt"></i></span></p><p>在本地安装：</p><pre class="language-shell" data-language="shell"><code class="language-shell"><span class="token function">git</span> clone https://github.com/next-theme/theme-next-docs<span class="token builtin class-name">cd</span> theme-next-docs<span class="token function">npm</span> <span class="token function">install</span></code></pre><p>生成：</p><pre class="language-none"><code class="language-none">npx hexo generate</code></pre><p>运行：</p><pre class="language-none"><code class="language-none">npx hexo server</code></pre><h3 id="博客主题"><a href="#博客主题" class="headerlink" title="博客主题"></a>博客主题</h3><p>GitHub：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL25leHQtdGhlbWUvaGV4by10aGVtZS1uZXh0">https://github.com/next-theme/hexo-theme-next<i class="fa fa-external-link-alt"></i></span></p><h3 id="发布到-github-io"><a href="#发布到-github-io" class="headerlink" title="发布到 github.io"></a>发布到 github.io</h3><p>在 hexo 下的_config.yml 文件中配置：</p><pre class="language-yml" data-language="yml"><code class="language-yml">deploy:  type: git  repository: git@github.com:Jueee&#x2F;jueee.github.io.git  branch: master</code></pre><p>安装插件：</p><pre class="language-none"><code class="language-none">npm install hexo-deployer-git --save</code></pre><p>打开你的 git bash，输入 <code>hexo d</code> 就会将本次有改动的代码全部提交，没有改动的不会：</p><pre class="language-none"><code class="language-none">$ npx hexo g -d</code></pre><p>【注】部署这个命令一定要用 git bash，否则会提示 <code>Permission denied (publickey).</code></p><p>此时，会在项目中生成 <code>.deploy_git</code> 文件夹。</p><p>打开 git bash，切换到 hexo/.deploy_git，执行</p><pre class="language-none"><code class="language-none">git init</code></pre><p>再绑定远程仓库</p><pre class="language-none"><code class="language-none">git remote add origin git@github.com:jueee&#x2F;jueee.github.io.git</code></pre><p>回到 cmd 命令行</p><pre class="language-none"><code class="language-none">$ npx hexo g -d</code></pre><p>搞定了，成功提交了正确的博客内容。</p><h3 id="常用-hexo-命令"><a href="#常用-hexo-命令" class="headerlink" title="常用 hexo 命令"></a>常用 hexo 命令</h3><p>常见命令</p><pre class="language-none"><code class="language-none">hexo new &quot;postName&quot; #新建文章hexo new page &quot;pageName&quot; #新建页面hexo generate #生成静态页面至 public 目录hexo server #开启预览访问端口（默认端口 4000，&#39;ctrl + c&#39; 关闭 server）hexo deploy #部署到 GitHubhexo help  # 查看帮助hexo version  #查看 Hexo 的版本 </code></pre><p>缩写：</p><pre class="language-none"><code class="language-none">hexo n &#x3D;&#x3D; hexo newhexo g &#x3D;&#x3D; hexo generatehexo s &#x3D;&#x3D; hexo serverhexo d &#x3D;&#x3D; hexo deploy</code></pre><p>组合命令：</p><pre class="language-none"><code class="language-none">hexo s -g #生成并本地预览hexo d -g #生成并上传 </code></pre><h3 id="问题处理"><a href="#问题处理" class="headerlink" title="问题处理"></a>问题处理</h3><pre class="language-none"><code class="language-none">PS E:\code\GitHub\Jueee\jueee-blog&gt; npx hexo clean(node:44956) ExperimentalWarning: The fs.promises API is experimentalERROR &#123; err:   E:\code\GitHub\Jueee\jueee-blog\node_modules\hexo-theme-next\package.json:2     &quot;_from&quot;: &quot;hexo-theme-next@8.0.0-rc.5&quot;,</code></pre><p>查看 node 版本</p><pre class="language-none"><code class="language-none">node -vv10.16.0npm -v6.9.0</code></pre><p>需要升级 node 到最新版。</p><p>下载地址：<span class="exturl" data-url="aHR0cHM6Ly9ub2RlanMub3JnL3poLWNuL2Rvd25sb2FkLw==">https://nodejs.org/zh-cn/download/<i class="fa fa-external-link-alt"></i></span></p>]]></content>
    
    <summary type="html">
    
      Hexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Coding上，是搭建博客的首选框架。
    
    </summary>
    
    
      <category term="Blog" scheme="https://jueee.github.io/categories/Blog/"/>
    
    
      <category term="Blog" scheme="https://jueee.github.io/tags/Blog/"/>
    
      <category term="Node.js" scheme="https://jueee.github.io/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>Arthas 之 jad 反编译原理</title>
    <link href="https://jueee.github.io/2020/08/2020-08-04-Arthas%E4%B9%8Bjad%E5%8F%8D%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
    <id>https://jueee.github.io/2020/08/2020-08-04-Arthas%E4%B9%8Bjad%E5%8F%8D%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/</id>
    <published>2020-08-04T00:00:00.000Z</published>
    <updated>2020-08-14T11:25:56.433Z</updated>
    
    <content type="html"><![CDATA[<h3 id="jad-命令介绍"><a href="#jad-命令介绍" class="headerlink" title="jad 命令介绍"></a>jad 命令介绍</h3><p>jad 即 java decompiler，把 JVM 已加载类的字节码反编译成 Java 代码。</p><blockquote><p><span class="exturl" data-url="aHR0cHM6Ly9hbGliYWJhLmdpdGh1Yi5pby9hcnRoYXMvamFkLmh0bWw=">https://alibaba.github.io/arthas/jad.html<i class="fa fa-external-link-alt"></i></span></p></blockquote><h3 id="获取到类的字节码"><a href="#获取到类的字节码" class="headerlink" title="获取到类的字节码"></a>获取到类的字节码</h3><p>反编译有两部分工作：</p><ol><li>获取到字节码</li><li>反编译为 Java 代码</li></ol><p>那么怎么从运行的 JVM 里获取到字节码？</p><p>最常见的思路是，在 <code>classpaths</code> 下面查找，比如 <code>ClassLoader.getResource("java/lang/String.class")</code>，但是这样子查找到的字节码不一定对。比如可能有多个冲突的 jar，或者有 Java Agent 修改了字节码。</p><h3 id="ClassFileTransformer机制"><a href="#ClassFileTransformer机制" class="headerlink" title="ClassFileTransformer机制"></a>ClassFileTransformer 机制</h3><p>从 JDK 1.5 起，有一套 <code>ClassFileTransformer</code> 的机制，Java Agent 通过 <code>Instrumentation</code> 注册 <code>ClassFileTransformer</code>，那么在类加载或者 <code>retransform</code> 时就可以回调修改字节码。</p><p>显然，在 Arthas 里，要增强的类是已经被加载的，所以它们的字节码都是在 <code>retransform</code> 时被修改的。<br>通过显式调用 <code>Instrumentation.retransformClasses(Class&lt;?&gt;...)</code> 可以触发回调。</p><p>Arthas 里增强字节码的 <code>watch</code>/<code>trace</code>/<code>stack</code>/<code>tt</code> 等命令都是通过 <code>ClassFileTransformer</code> 来实现的。</p><p><code>java.lang.instrument.ClassFileTransformer</code> 的接口如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ClassFileTransformer</span> <span class="token punctuation">{</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token function">transform</span><span class="token punctuation">(</span>  <span class="token class-name">ClassLoader</span>         loader<span class="token punctuation">,</span>                <span class="token class-name">String</span>              className<span class="token punctuation">,</span>                <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span>            classBeingRedefined<span class="token punctuation">,</span>                <span class="token class-name">ProtectionDomain</span>    protectionDomain<span class="token punctuation">,</span>                <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span>              classfileBuffer<span class="token punctuation">)</span>        <span class="token keyword">throws</span> <span class="token class-name">IllegalClassFormatException</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>看到这里，读者应该猜到 <code>jad</code> 是怎么获取到字节码的了：</p><ol><li>注册一个 <code>ClassFileTransformer</code></li><li>通过 <code>Instrumentation.retransformClasses</code> 触发回调</li><li>在回调的 <code>transform</code> 函数里获取到字节码</li><li>删掉注册的 <code>ClassFileTransformer</code></li></ol><h3 id="使用cfr来反编译"><a href="#使用cfr来反编译" class="headerlink" title="使用cfr来反编译"></a>使用 cfr 来反编译</h3><p>获取到字节码之后，怎样转换为 Java 代码呢？</p><p>以前大家使用比较多的反编译软件可能是 <code>jd-gui</code>，但是它不支持 JDK8 的 lambda 语法和一些新版本 JDK 的特性。</p><p>后面比较成熟的反编译软件是 <code>cfr</code>，它以前是不开源的。直到最近的 <code>0.145</code> 版本，作者终于开源了，可喜可贺。地址是</p><blockquote><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xlaWJuaXR6MjcvY2Zy">https://github.com/leibnitz27/cfr<i class="fa fa-external-link-alt"></i></span></p></blockquote><p>在 Arthas <code>jad</code> 命令里，通过调用 <code>cfr</code> 来完成反编译。</p><h3 id="jad-命令的缺陷"><a href="#jad-命令的缺陷" class="headerlink" title="jad 命令的缺陷"></a>jad 命令的缺陷</h3><p>99% 的情况下，<code>jad</code> 命令 dump 下来的字节码是准确的，除了一些极端情况。</p><ol><li>因为 JVM 里注册的 <code>ClassFileTransformer</code> 可能有多个，那么在 JVM 里运行的字节码里，可能是被多个 <code>ClassFileTransformer</code> 处理过的。</li><li>触发了 <code>retransformClasses</code> 之后，这些注册的 <code>ClassFileTransformer</code> 会被依次回，上一个处理的字节码传递到下一个。<br>所以不能保证这些 <code>ClassFileTransformer</code> 第二次执行会返回同样的结果。</li><li>有可能一些 <code>ClassFileTransformer</code> 会被删掉，触发 <code>retransformClasses</code> 之后，之前的一些修改就会丢失掉。</li></ol><p>所以目前在 Arthas 里，如果开两个窗口，一个窗口执行 <code>watch</code>/<code>tt</code> 等命令，另一个窗口对这个类执行 <code>jad</code>，那么可以观察到 <code>watch</code>/<code>tt</code> 停止了输出，实际上是因为字节码在触发了 <code>retransformClasses</code> 之后，<code>watch</code>/<code>tt</code> 所做的修改丢失了。</p><h3 id="精确获取字节码"><a href="#精确获取字节码" class="headerlink" title="精确获取字节码"></a>精确获取字节码</h3><p>如果想精确获取到 JVM 内运行的 Java 字节码，可以使用这个 <code>dumpclass</code> 工具，它是通过 <code>sa-jdi.jar</code> 来实现的，保证 dump 下来的字节码是 JVM 内所运行的。</p><blockquote><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2hlbmd5dW5hYmMvZHVtcGNsYXNz">https://github.com/hengyunabc/dumpclass<i class="fa fa-external-link-alt"></i></span></p></blockquote><h3 id="cfr反编译示例"><a href="#cfr反编译示例" class="headerlink" title="cfr反编译示例"></a>cfr 反编译示例</h3><p>参考 Arthas 代码：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvYXJ0aGFzL2Jsb2IvbWFzdGVyL2NvcmUvc3JjL21haW4vamF2YS9jb20vdGFvYmFvL2FydGhhcy9jb3JlL3V0aWwvRGVjb21waWxlci5qYXZh">com.taobao.arthas.core.util.Decompiler.java<i class="fa fa-external-link-alt"></i></span></p><h4 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h4><p>首先，需要引入 maven 依赖：</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.benf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>cfr<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>0.150<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></code></pre><h4 id="编写方法"><a href="#编写方法" class="headerlink" title="编写方法"></a>编写方法</h4><p>编写反编译类 <code>sample.utils.Decompiler</code>：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">decompile</span><span class="token punctuation">(</span><span class="token class-name">String</span> classFilePath<span class="token punctuation">,</span> <span class="token class-name">String</span> methodName<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">decompile</span><span class="token punctuation">(</span>classFilePath<span class="token punctuation">,</span> methodName<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/** * @param classFilePath * @param methodName * @param hideUnicode * @return */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">decompile</span><span class="token punctuation">(</span><span class="token class-name">String</span> classFilePath<span class="token punctuation">,</span> <span class="token class-name">String</span> methodName<span class="token punctuation">,</span> <span class="token keyword">boolean</span> hideUnicode<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token class-name">StringBuilder</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token number">8192</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">OutputSinkFactory</span> mySink <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OutputSinkFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SinkClass</span><span class="token punctuation">&gt;</span></span> <span class="token function">getSupportedSinks</span><span class="token punctuation">(</span><span class="token class-name">SinkType</span> sinkType<span class="token punctuation">,</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SinkClass</span><span class="token punctuation">&gt;</span></span> collection<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token class-name">SinkClass</span><span class="token punctuation">.</span>STRING<span class="token punctuation">,</span> <span class="token class-name">SinkClass</span><span class="token punctuation">.</span>DECOMPILED<span class="token punctuation">,</span> <span class="token class-name">SinkClass</span><span class="token punctuation">.</span>DECOMPILED_MULTIVER<span class="token punctuation">,</span>                            <span class="token class-name">SinkClass</span><span class="token punctuation">.</span>EXCEPTION_MESSAGE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Sink</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">getSink</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">SinkType</span> sinkType<span class="token punctuation">,</span> <span class="token class-name">SinkClass</span> sinkClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Sink</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">T</span> sinkable<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment">// skip message like: Analysing type demo.MathGame</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>sinkType <span class="token operator">==</span> <span class="token class-name">SinkType</span><span class="token punctuation">.</span>PROGRESS<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">return</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    result<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>sinkable<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> options <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * @see org.benf.cfr.reader.util.MiscConstants.Version.getVersion() Currently,     *      the cfr version is wrong. so disable show cfr version.     */</span>    options<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"showversion"</span><span class="token punctuation">,</span> <span class="token string">"false"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    options<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"hideutf"</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>hideUnicode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>methodName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        options<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"methodname"</span><span class="token punctuation">,</span> methodName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">CfrDriver</span> driver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CfrDriver</span><span class="token punctuation">.</span><span class="token class-name">Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withOptions</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withOutputSink</span><span class="token punctuation">(</span>mySink<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> toAnalyse <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    toAnalyse<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>classFilePath<span class="token punctuation">)</span><span class="token punctuation">;</span>    driver<span class="token punctuation">.</span><span class="token function">analyse</span><span class="token punctuation">(</span>toAnalyse<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><pre class="language-none"><code class="language-none">String className = "sample/redefine/RedefineSuccess.class";String classPath = Thread.currentThread().getContextClassLoader().getResource(className).getFile();System.out.println(classPath);String result = decompile(classPath, null);System.out.println(result);String result2 = decompile(classPath, "printFlag");System.out.println(result2);</code></pre><h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token operator">/</span><span class="token class-name">C</span><span class="token operator">:</span><span class="token operator">/</span><span class="token class-name">Codes</span><span class="token operator">/</span><span class="token class-name">JavaWorkSpace</span><span class="token operator">/</span>workspace48<span class="token operator">/</span>arthas<span class="token operator">-</span>demo<span class="token operator">/</span>target<span class="token operator">/</span>classes<span class="token operator">/</span>sample<span class="token operator">/</span>redefine<span class="token operator">/</span><span class="token class-name">RedefineSuccess</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token comment">/* * Decompiled with CFR. */</span><span class="token keyword">package</span> <span class="token namespace">sample<span class="token punctuation">.</span>redefine</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedefineSuccess</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">RedefineSuccess</span><span class="token punctuation">.</span><span class="token function">printFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"flag is true."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"flag is false."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"flag is true."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"flag is false."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><blockquote><p><span class="exturl" data-url="aHR0cDovL2hlbmd5dW5hYmMuZ2l0aHViLmlvL2FydGhhcy1qYWQv">http://hengyunabc.github.io/arthas-jad/<i class="fa fa-external-link-alt"></i></span></p></blockquote>]]></content>
    
    <summary type="html">
    
      Arthas是阿里巴巴开源的Java应用诊断利器，本文介绍Arthas里jad命令的实现原理。
    
    </summary>
    
    
      <category term="Java" scheme="https://jueee.github.io/categories/Java/"/>
    
      <category term="Java诊断" scheme="https://jueee.github.io/categories/Java/Java%E8%AF%8A%E6%96%AD/"/>
    
      <category term="Arthas" scheme="https://jueee.github.io/categories/Java/Java%E8%AF%8A%E6%96%AD/Arthas/"/>
    
    
      <category term="Java诊断" scheme="https://jueee.github.io/tags/Java%E8%AF%8A%E6%96%AD/"/>
    
      <category term="Arthas" scheme="https://jueee.github.io/tags/Arthas/"/>
    
      <category term="Java" scheme="https://jueee.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Arthas 之源码简要分析</title>
    <link href="https://jueee.github.io/2020/08/2020-08-03-Arthas%E4%B9%8B%E6%BA%90%E7%A0%81%E7%AE%80%E8%A6%81%E5%88%86%E6%9E%90/"/>
    <id>https://jueee.github.io/2020/08/2020-08-03-Arthas%E4%B9%8B%E6%BA%90%E7%A0%81%E7%AE%80%E8%A6%81%E5%88%86%E6%9E%90/</id>
    <published>2020-08-03T00:00:00.000Z</published>
    <updated>2020-08-14T11:25:56.428Z</updated>
    
    <content type="html"><![CDATA[<h3 id="启动模块（boot）"><a href="#启动模块（boot）" class="headerlink" title="启动模块（boot）"></a>启动模块（boot）</h3><h4 id="启动-Arthas"><a href="#启动-Arthas" class="headerlink" title="启动 Arthas"></a>启动 Arthas</h4><pre class="language-shell" data-language="shell"><code class="language-shell">wget https://alibaba.github.io/arthas/arthas-boot.jarjava -jar arthas-boot.jar</code></pre><p><strong>模块代码</strong>：</p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvYXJ0aGFzL3RyZWUvbWFzdGVyL2Jvb3Q=">GitHub Code by arthas-boot<i class="fa fa-external-link-alt"></i></span></p><h4 id="模块入口"><a href="#模块入口" class="headerlink" title="模块入口"></a>模块入口</h4><p>在 arthas-boot 模块的 pom.xml 文件中，找到启动类：</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>manifest</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mainClass</span><span class="token punctuation">&gt;</span></span>com.taobao.arthas.boot.Bootstrap<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mainClass</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>manifest</span><span class="token punctuation">&gt;</span></span></code></pre><p><code>com.taobao.arthas.boot.Bootstrap.main()</code> 方法：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvYXJ0aGFzL2Jsb2IvbWFzdGVyL2Jvb3Qvc3JjL21haW4vamF2YS9jb20vdGFvYmFvL2FydGhhcy9ib290L0Jvb3RzdHJhcC5qYXZhI0wyNzM=">GitHub Code by Bootstrap.java<i class="fa fa-external-link-alt"></i></span></p><h4 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h4><h5 id="参数解析"><a href="#参数解析" class="headerlink" title="参数解析"></a>参数解析</h5><p>使用了阿里开源的组件 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvY2xp">cli<i class="fa fa-external-link-alt"></i></span>，对参数进行了解析。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">CLI</span> cli <span class="token operator">=</span> <span class="token class-name">CLIConfigurator</span><span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token class-name">Bootstrap</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">CommandLine</span> commandLine <span class="token operator">=</span> cli<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token class-name">CLIConfigurator</span><span class="token punctuation">.</span><span class="token function">inject</span><span class="token punctuation">(</span>commandLine<span class="token punctuation">,</span> bootstrap<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">usage</span><span class="token punctuation">(</span>cli<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h5 id="参数处理"><a href="#参数处理" class="headerlink" title="参数处理"></a>参数处理</h5><p>对传入的参数进行处理。</p><p>如调整日志级别，设置 RepoMirror 地址，Java 版本，telnet/http 的端口检查。</p><h5 id="检查-pid"><a href="#检查-pid" class="headerlink" title="检查 pid"></a>检查 pid</h5><p>如果在传入参数中没有 pid，则会调用本地 jps 命令，列出 java 进程（当然会排除本身）</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">long</span> pid <span class="token operator">=</span> bootstrap<span class="token punctuation">.</span><span class="token function">getPid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// select pid</span><span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        pid <span class="token operator">=</span> <span class="token class-name">ProcessUtils</span><span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span>bootstrap<span class="token punctuation">.</span><span class="token function">isVerbose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> telnetPortPid<span class="token punctuation">,</span> bootstrap<span class="token punctuation">.</span><span class="token function">getSelect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InputMismatchException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Please input an integer to select pid."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Please select an available pid."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvYXJ0aGFzL2Jsb2IvbWFzdGVyL2Jvb3Qvc3JjL21haW4vamF2YS9jb20vdGFvYmFvL2FydGhhcy9ib290L1Byb2Nlc3NVdGlscy5qYXZhI0wxMjM=">GitHub Code by ProcessUtils.java<i class="fa fa-external-link-alt"></i></span></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">listProcessByJps</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> jps <span class="token operator">=</span> <span class="token string">"jps"</span><span class="token punctuation">;</span>    <span class="token class-name">File</span> jpsFile <span class="token operator">=</span> <span class="token function">findJps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>jpsFile <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        jps <span class="token operator">=</span> jpsFile<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">AnsiLog</span><span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Try use jps to lis java process, jps: "</span> <span class="token operator">+</span> jps<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> command <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token punctuation">{</span>        command <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> jps<span class="token punctuation">,</span> <span class="token string">"-v"</span><span class="token punctuation">,</span> <span class="token string">"-l"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        command <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> jps<span class="token punctuation">,</span> <span class="token string">"-l"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> lines <span class="token operator">=</span> <span class="token class-name">ExecutingCommand</span><span class="token punctuation">.</span><span class="token function">runNative</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">AnsiLog</span><span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"jps result: "</span> <span class="token operator">+</span> lines<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> currentPid <span class="token operator">=</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">parseLong</span><span class="token punctuation">(</span><span class="token class-name">PidUtils</span><span class="token punctuation">.</span><span class="token function">currentPid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> line <span class="token operator">:</span> lines<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> strings <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\\s+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>strings<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">long</span> pid <span class="token operator">=</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">parseLong</span><span class="token punctuation">(</span>strings<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">==</span> currentPid<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>strings<span class="token punctuation">.</span>length <span class="token operator">&gt;=</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isJpsProcess</span><span class="token punctuation">(</span>strings<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// skip jps</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            result<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>pid<span class="token punctuation">,</span> line<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// https://github.com/alibaba/arthas/issues/970</span>            <span class="token comment">// ignore</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h5 id="启动服务端"><a href="#启动服务端" class="headerlink" title="启动服务端"></a>启动服务端</h5><p>进入主逻辑，会在用户目录下建立 <code>.arthas</code> 目录，同时下载 <code>arthas-core</code> 和 <code>arthas-agent</code> 等 lib 文件，然后启动客户端和服务端。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>telnetPortPid <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> pid <span class="token operator">==</span> telnetPortPid<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">AnsiLog</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"The target process already listen port {}, skip attach."</span><span class="token punctuation">,</span> bootstrap<span class="token punctuation">.</span><span class="token function">getTelnetPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment">//double check telnet port and pid before attach</span>    telnetPortPid <span class="token operator">=</span> <span class="token function">findProcessByTelnetClient</span><span class="token punctuation">(</span>arthasHomeDir<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> bootstrap<span class="token punctuation">.</span><span class="token function">getTelnetPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">checkTelnetPortPid</span><span class="token punctuation">(</span>bootstrap<span class="token punctuation">,</span> telnetPortPid<span class="token punctuation">,</span> pid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// start arthas-core.jar</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> attachArgs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    attachArgs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"-jar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    attachArgs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>arthasHomeDir<span class="token punctuation">,</span> <span class="token string">"arthas-core.jar"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    attachArgs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"-pid"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    attachArgs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">""</span> <span class="token operator">+</span> pid<span class="token punctuation">)</span><span class="token punctuation">;</span>    attachArgs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"-target-ip"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    attachArgs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>bootstrap<span class="token punctuation">.</span><span class="token function">getTargetIp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    attachArgs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"-telnet-port"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    attachArgs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">""</span> <span class="token operator">+</span> bootstrap<span class="token punctuation">.</span><span class="token function">getTelnetPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    attachArgs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"-http-port"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    attachArgs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">""</span> <span class="token operator">+</span> bootstrap<span class="token punctuation">.</span><span class="token function">getHttpPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    attachArgs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"-core"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    attachArgs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>arthasHomeDir<span class="token punctuation">,</span> <span class="token string">"arthas-core.jar"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    attachArgs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"-agent"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    attachArgs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>arthasHomeDir<span class="token punctuation">,</span> <span class="token string">"arthas-agent.jar"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>bootstrap<span class="token punctuation">.</span><span class="token function">getSessionTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        attachArgs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"-session-timeout"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        attachArgs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">""</span> <span class="token operator">+</span> bootstrap<span class="token punctuation">.</span><span class="token function">getSessionTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>bootstrap<span class="token punctuation">.</span><span class="token function">getTunnelServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        attachArgs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"-tunnel-server"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        attachArgs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>bootstrap<span class="token punctuation">.</span><span class="token function">getTunnelServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>bootstrap<span class="token punctuation">.</span><span class="token function">getAgentId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        attachArgs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"-agent-id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        attachArgs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>bootstrap<span class="token punctuation">.</span><span class="token function">getAgentId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>bootstrap<span class="token punctuation">.</span><span class="token function">getStatUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        attachArgs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"-stat-url"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        attachArgs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>bootstrap<span class="token punctuation">.</span><span class="token function">getStatUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">AnsiLog</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Try to attach process "</span> <span class="token operator">+</span> pid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">AnsiLog</span><span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Start arthas-core.jar args: "</span> <span class="token operator">+</span> attachArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 启动服务端</span>    <span class="token class-name">ProcessUtils</span><span class="token punctuation">.</span><span class="token function">startArthasCore</span><span class="token punctuation">(</span>pid<span class="token punctuation">,</span> attachArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">AnsiLog</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Attach process {} success."</span><span class="token punctuation">,</span> pid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h5 id="启动客户端"><a href="#启动客户端" class="headerlink" title="启动客户端"></a>启动客户端</h5><p>最后通过反射的方式来启动字符客户端，等待用户输入指令。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">URLClassLoader</span> classLoader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLClassLoader</span><span class="token punctuation">(</span>                <span class="token keyword">new</span> URL<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>arthasHomeDir<span class="token punctuation">,</span> <span class="token string">"arthas-client.jar"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> telnetConsoleClas <span class="token operator">=</span> classLoader<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token string">"com.taobao.arthas.client.TelnetConsole"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Method</span> mainMethod <span class="token operator">=</span> telnetConsoleClas<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"main"</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="服务端模块（core）"><a href="#服务端模块（core）" class="headerlink" title="服务端模块（core）"></a>服务端模块（core）</h3><p><strong>模块代码</strong>：</p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvYXJ0aGFzL3RyZWUvbWFzdGVyL2NvcmU=">GitHub Code by arthas-core<i class="fa fa-external-link-alt"></i></span></p><h4 id="模块入口-1"><a href="#模块入口-1" class="headerlink" title="模块入口"></a>模块入口</h4><p>在 arthas-core 模块的 pom.xml 中，找到启动类：</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transformers</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transformer</span> <span class="token attr-name">implementation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.maven.plugins.shade.resource.ManifestResourceTransformer<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mainClass</span><span class="token punctuation">&gt;</span></span>com.taobao.arthas.core.Arthas<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mainClass</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transformer</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transformers</span><span class="token punctuation">&gt;</span></span></code></pre><p><code>com.taobao.arthas.core.Arthas.main()</code> 方法：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvYXJ0aGFzL2Jsb2IvbWFzdGVyL2NvcmUvc3JjL21haW4vamF2YS9jb20vdGFvYmFvL2FydGhhcy9jb3JlL0FydGhhcy5qYXZh">GitHub Code by Arthas.java<i class="fa fa-external-link-alt"></i></span></p><h4 id="源码分析-1"><a href="#源码分析-1" class="headerlink" title="源码分析"></a>源码分析</h4><h5 id="连接进程"><a href="#连接进程" class="headerlink" title="连接进程"></a>连接进程</h5><p>使用 <code>VirutalMachine.attach(pid)</code> 来连接进程，同时使用 <code>virtualMachine.loadAgent</code> 加载自定义的 agent.</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">attachAgent</span><span class="token punctuation">(</span><span class="token class-name">Configure</span> configure<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token comment">// 省略部分代码</span>    <span class="token comment">// 连接进程</span>            virtualMachine <span class="token operator">=</span> <span class="token class-name">VirtualMachine</span><span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span><span class="token string">""</span> <span class="token operator">+</span> configure<span class="token punctuation">.</span><span class="token function">getJavaPid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 省略部分代码</span>    <span class="token comment">// 动态加载Agent</span>        virtualMachine<span class="token punctuation">.</span><span class="token function">loadAgent</span><span class="token punctuation">(</span>arthasAgentPath<span class="token punctuation">,</span>                configure<span class="token punctuation">.</span><span class="token function">getArthasCore</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">";"</span> <span class="token operator">+</span> configure<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="JavaAgent代理（agent）"><a href="#JavaAgent代理（agent）" class="headerlink" title="JavaAgent代理（agent）"></a>JavaAgent 代理（agent）</h3><p><strong>模块代码</strong>：</p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvYXJ0aGFzL3RyZWUvbWFzdGVyL2FnZW50">GitHub Code by arthas-agent<i class="fa fa-external-link-alt"></i></span></p><h4 id="模块入口-2"><a href="#模块入口-2" class="headerlink" title="模块入口"></a>模块入口</h4><p>在 arthas-core 模块的 pom.xml 中，找到启动类：</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>manifestEntries</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Premain-Class</span><span class="token punctuation">&gt;</span></span>com.taobao.arthas.agent334.AgentBootstrap<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Premain-Class</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Agent-Class</span><span class="token punctuation">&gt;</span></span>com.taobao.arthas.agent334.AgentBootstrap<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Agent-Class</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>manifestEntries</span><span class="token punctuation">&gt;</span></span></code></pre><p><code>com.taobao.arthas.agent334.AgentBootstrap.main()</code> 方法：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvYXJ0aGFzL2Jsb2IvbWFzdGVyL2FnZW50L3NyYy9tYWluL2phdmEvY29tL3Rhb2Jhby9hcnRoYXMvYWdlbnQzMzQvQWdlbnRCb290c3RyYXAuamF2YQ==">GitHub Code by AgentBootstrap.java<i class="fa fa-external-link-alt"></i></span></p><h4 id="源码分析-2"><a href="#源码分析-2" class="headerlink" title="源码分析"></a>源码分析</h4><p><code>main()</code> 方法中对于 <code>arthas-spy</code>(简单理解为勾子类，类似于 spring aop 的前置方法，后置方法) 进行了加载。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token class-name">ClassLoader</span> agentLoader <span class="token operator">=</span> <span class="token function">getClassLoader</span><span class="token punctuation">(</span>inst<span class="token punctuation">,</span> arthasCoreJarFile<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>将 spyJar 添加到了 BootstrapClassLoader (启动类加载器)，优先加载启动类加载器，spy 可以在各个 ClassLoader 中使用。</p><pre class="language-none"><code class="language-none">private static ClassLoader getClassLoader(Instrumentation inst, File arthasCoreJarFile) throws Throwable {    // 构造自定义的类加载器，尽量减少Arthas对现有工程的侵蚀    return loadOrDefineClassLoader(arthasCoreJarFile);}</code></pre><p>异步调用 bind () 方法，启动服务端，监听端口，和客户端进行通讯。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Thread</span> bindingThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token function">bind</span><span class="token punctuation">(</span>inst<span class="token punctuation">,</span> agentLoader<span class="token punctuation">,</span> agentArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span>            throwable<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span>ps<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    <summary type="html">
    
      Arthas之源码简要分析。
    
    </summary>
    
    
      <category term="Java" scheme="https://jueee.github.io/categories/Java/"/>
    
      <category term="Java诊断" scheme="https://jueee.github.io/categories/Java/Java%E8%AF%8A%E6%96%AD/"/>
    
      <category term="Arthas" scheme="https://jueee.github.io/categories/Java/Java%E8%AF%8A%E6%96%AD/Arthas/"/>
    
    
      <category term="Java诊断" scheme="https://jueee.github.io/tags/Java%E8%AF%8A%E6%96%AD/"/>
    
      <category term="Arthas" scheme="https://jueee.github.io/tags/Arthas/"/>
    
      <category term="Java" scheme="https://jueee.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Arthas 之各模块简介</title>
    <link href="https://jueee.github.io/2020/08/2020-08-02-Arthas%E4%B9%8B%E5%90%84%E6%A8%A1%E5%9D%97%E7%AE%80%E4%BB%8B/"/>
    <id>https://jueee.github.io/2020/08/2020-08-02-Arthas%E4%B9%8B%E5%90%84%E6%A8%A1%E5%9D%97%E7%AE%80%E4%BB%8B/</id>
    <published>2020-08-02T00:00:00.000Z</published>
    <updated>2020-08-14T11:25:56.425Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Arthas"><a href="#Arthas" class="headerlink" title="Arthas"></a>Arthas</h3><h4 id="项目代码"><a href="#项目代码" class="headerlink" title="项目代码"></a>项目代码</h4><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvYXJ0aGFz">GitHub Code by arthas<i class="fa fa-external-link-alt"></i></span></p><h4 id="包含模块"><a href="#包含模块" class="headerlink" title="包含模块"></a>包含模块</h4><p><img src="/images/2020/08/1596679506644.png" alt="1596679506644" loading="lazy"></p><h3 id="模块简介"><a href="#模块简介" class="headerlink" title="模块简介"></a>模块简介</h3><ul><li>arthas-agent：基于 JavaAgent 技术的代理</li><li> bin：一些启动脚本</li><li> arthas-boot：Java 版本的一键安装启动脚本</li><li> arthas-client：telnet client 代码</li><li> arthas-common：一些共用的工具类和枚举类</li><li> arthas-core：核心库，各种 arthas 命令的交互和实现</li><li> arthas-demo：示例代码</li><li> arthas-memorycompiler：内存编绎器代码</li><li> arthas-packaging：maven 打包相关的</li><li> arthas-site：arthas 站点</li><li> arthas-spy：编织到目标类中的各个切面</li><li> static：静态资源</li><li> arthas-testcase：测试</li></ul><h3 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h3><p>Arthas 提供的功能主要可以分为以下三个方面：</p><ol><li>信息监控<ul><li>进程运行基本信息包括：内存、CPU 占用、线程信息、线程堆栈、线程数统计、环境变量信息。</li><li>对象信息：类对象静态属性、 Mbean 的属性信息、已加载类信息、类加载器、类方法信息。</li></ul></li><li>方法调用<ul><li>方法调用入参、返回值查看。</li><li>方法被调用的调用路径、调用耗时、方法调用次数、成功次数、失败次数等统计。</li><li>记录和重做方法调用。</li></ul></li><li>类文件处理<ul><li> dump 已加载类的字节码、字节码反编译、类编译、类重新热加载。</li></ul></li></ol><h3 id="模块关系"><a href="#模块关系" class="headerlink" title="模块关系"></a>模块关系</h3><p>整体宏观模块调用图：</p><p><img src="/images/2020/08/1596698216827.png" alt="1596698216827" loading="lazy"></p><p>模块描述：</p><p><img src="/images/2020/08/1596616373228.png" alt="1596616373228" loading="lazy"></p><h3 id="核心类描述"><a href="#核心类描述" class="headerlink" title="核心类描述"></a>核心类描述</h3><p>核心类描述：</p><p><img src="/images/2020/08/1596710846489.png" alt="1596710846489" loading="lazy"></p><p>核心类描述（精简版）</p><p><img src="/images/2020/08/1596700025625.png" alt="1596700025625" loading="lazy"></p><h3 id="常用命令汇总"><a href="#常用命令汇总" class="headerlink" title="常用命令汇总"></a>常用命令汇总</h3><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvYXJ0aGFzL2lzc3Vlcy8xMDAz">Arthas 常用命令汇总<i class="fa fa-external-link-alt"></i></span></p><p><img src="/images/2020/08/1596701687793.png" alt="1596701687793" loading="lazy"></p>]]></content>
    
    <summary type="html">
    
      Arthas之各模块简介。
    
    </summary>
    
    
      <category term="Java" scheme="https://jueee.github.io/categories/Java/"/>
    
      <category term="Java诊断" scheme="https://jueee.github.io/categories/Java/Java%E8%AF%8A%E6%96%AD/"/>
    
      <category term="Arthas" scheme="https://jueee.github.io/categories/Java/Java%E8%AF%8A%E6%96%AD/Arthas/"/>
    
    
      <category term="Java诊断" scheme="https://jueee.github.io/tags/Java%E8%AF%8A%E6%96%AD/"/>
    
      <category term="Arthas" scheme="https://jueee.github.io/tags/Arthas/"/>
    
      <category term="Java" scheme="https://jueee.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>迁移 VMware 虚拟机至微软 Hyper-V</title>
    <link href="https://jueee.github.io/2020/07/2020-07-31-%E8%BF%81%E7%A7%BBVMware%E8%99%9A%E6%8B%9F%E6%9C%BA%E8%87%B3%E5%BE%AE%E8%BD%AFHyper-V/"/>
    <id>https://jueee.github.io/2020/07/2020-07-31-%E8%BF%81%E7%A7%BBVMware%E8%99%9A%E6%8B%9F%E6%9C%BA%E8%87%B3%E5%BE%AE%E8%BD%AFHyper-V/</id>
    <published>2020-07-31T00:00:00.000Z</published>
    <updated>2020-08-13T02:30:29.184Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Hyper-V-虚拟机"><a href="#Hyper-V-虚拟机" class="headerlink" title="Hyper-V 虚拟机"></a>Hyper-V 虚拟机</h3><p>Hyper-V 是微软的一款虚拟化产品，是微软第一个采用类似 Vmware ESXi 和 Citrix Xen 的基于 hypervisor 的技术。</p><h3 id="开启-Hyper-V"><a href="#开启-Hyper-V" class="headerlink" title="开启 Hyper-V"></a>开启 Hyper-V</h3><p>进入电脑的控制面板 -&gt; 程序 -&gt; 启用或关闭 Windows 功能 -&gt; 把 Hyper-v 勾上，启用后电脑会重启。</p><p><img src="/images/2020/07/1595925972986.png" alt="1595925972986" loading="lazy"></p><h3 id="迁移-VMware-虚拟机"><a href="#迁移-VMware-虚拟机" class="headerlink" title="迁移 VMware 虚拟机"></a>迁移 VMware 虚拟机</h3><h4 id="使用微软-MVMC-工具实现迁移"><a href="#使用微软-MVMC-工具实现迁移" class="headerlink" title="使用微软 MVMC 工具实现迁移"></a>使用微软 MVMC 工具实现迁移</h4><p>MVMC 工具可以直接由微软官网下载</p><blockquote><p><span class="exturl" data-url="aHR0cDovL3d3dy5taWNyb3NvZnQuY29tL2VuLXVzL2Rvd25sb2FkL2RldGFpbHMuYXNweD9pZD00MjQ5Nw==">下载链接<i class="fa fa-external-link-alt"></i></span></p></blockquote><p>下载完成后，将安装文件拷贝到要安装 MVMC 的服务器上。</p><h4 id="安装-StarWind-V2V-Converter"><a href="#安装-StarWind-V2V-Converter" class="headerlink" title="安装 StarWind V2V Converter"></a>安装 StarWind V2V Converter</h4><p>下载 StarWind V2V Converter 安装文件并执行安装，安装过程按照引导进行即可。</p><p>安装完成后，打开 <code>StarWind V2V Image Converter</code>。</p><p>选择 Local file：</p><p><img src="/images/2020/07/1596174987682.png" alt="1596174987682" loading="lazy"></p><p>Next，选择 VMware 虚拟机的 vmdk 文件：</p><p><img src="/images/2020/07/1596175078239.png" alt="1596175078239" loading="lazy"></p><p>再点击 Next，等待转换完成，即可。</p><p><img src="/images/2020/07/1596174902166.png" alt="1596174902166" loading="lazy"></p><h4 id="导入-vhd-文件"><a href="#导入-vhd-文件" class="headerlink" title="导入 vhd 文件"></a>导入 vhd 文件</h4><p>打开 Hyper-V，新建虚拟机。</p><p>指定名称和存储位置。</p><p><img src="/images/2020/07/1596175210979.png" alt="1596175210979" loading="lazy"></p><p>指定虚拟机的代数，选择第一代。</p><blockquote><p>Windows10 Hyper-V 支持的虚拟机文件格式有两代，第一代的文件后缀为.vhd；第二代的文件后缀为.vhdx。</p></blockquote><p><img src="/images/2020/07/1596175283830.png" alt="1596175283830" loading="lazy"></p><p>分配内存：</p><p><img src="/images/2020/07/1596175352095.png" alt="1596175352095" loading="lazy"></p><p>配置网络：</p><p><img src="/images/2020/07/1596175380895.png" alt="1596175380895" loading="lazy"></p><p>选择指定刚刚生成的.vhd 文件：</p><p><img src="/images/2020/07/1596175428931.png" alt="1596175428931" loading="lazy"></p><p>转换导入成功，接下来，虚拟机就可以运行了。</p><h3 id="Hyper-v-虚拟机联网配置"><a href="#Hyper-v-虚拟机联网配置" class="headerlink" title="Hyper-v 虚拟机联网配置"></a>Hyper-v 虚拟机联网配置</h3><h4 id="新建虚拟交换机"><a href="#新建虚拟交换机" class="headerlink" title="新建虚拟交换机"></a>新建虚拟交换机</h4><p>选择：</p><p><img src="/images/2020/07/1596175872059.png" alt="1596175872059" loading="lazy"></p><p>输入交换机名称和选择外部网络，可以看到外部网络的下拉框的选项，这里选择当前计算机的联网方式。</p><p>如何知道当前使用什么方式联网呢？--- 查看网络适配器。</p><p><img src="/images/2020/07/1596176082370.png" alt="1596176082370" loading="lazy"></p><p>** 如果主机切换了联网方式，只要去虚拟机里改下对应的下拉选项即可。**</p><p><img src="/images/2020/07/1596175973333.png" alt="1596175973333" loading="lazy"></p><p>点击确定，建立虚拟交换机。</p><h4 id="更改虚拟机的网络适配器"><a href="#更改虚拟机的网络适配器" class="headerlink" title="更改虚拟机的网络适配器"></a>更改虚拟机的网络适配器</h4><p>右键 --- 设置 --- 网络适配器：</p><p><img src="/images/2020/07/1596176189357.png" alt="1596176189357" loading="lazy"></p><h3 id="debian-设置网络"><a href="#debian-设置网络" class="headerlink" title="debian 设置网络"></a>debian 设置网络</h3><p>问题描述：</p><p>配置完 /etc/networking/interfaces 后，使用 /etc/init.d/networking restart 出现启动失败，根据提示输入 systemctl status networking.service 发现不认识 /etc/networking/interfaces 中配置的虚拟网卡 (或者是因为虚拟机的重新移动导致的设备不匹配问题等)</p><p>解决方法：</p><p>首先可以查看 etc/udev/rules.d/70-persistent-net.rules 是否存在，如果存在，则删除 rm etc/udev/rules.d/70-persistent-net.rules，重启即可</p><p>如果 etc/udev/rules.d/70-persistent-net.rules 不存在，则 ifconfig -a 查看全部网卡，修改 /etc/networking/interfaces 中的网卡名和 ifconfig -a 命令显示的网卡名匹配，重启网络即可。</p>]]></content>
    
    <summary type="html">
    
      介绍微软 Hyper-V 虚拟机的使用。
    
    </summary>
    
    
      <category term="Windows" scheme="https://jueee.github.io/categories/Windows/"/>
    
      <category term="软件" scheme="https://jueee.github.io/categories/Windows/%E8%BD%AF%E4%BB%B6/"/>
    
    
      <category term="Windows" scheme="https://jueee.github.io/tags/Windows/"/>
    
      <category term="软件" scheme="https://jueee.github.io/tags/%E8%BD%AF%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>idea 相关配置总结</title>
    <link href="https://jueee.github.io/2020/07/2020-08-06-idea%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE%E6%80%BB%E7%BB%93/"/>
    <id>https://jueee.github.io/2020/07/2020-08-06-idea%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE%E6%80%BB%E7%BB%93/</id>
    <published>2020-07-31T00:00:00.000Z</published>
    <updated>2020-08-13T06:07:28.374Z</updated>
    
    <content type="html"><![CDATA[<h3 id="对-maven-仓库建立快捷方式"><a href="#对-maven-仓库建立快捷方式" class="headerlink" title="对 maven 仓库建立快捷方式"></a>对 maven 仓库建立快捷方式</h3><p>对于 maven 仓库配置在其他磁盘的情况，建立快捷方式。</p><p>使用管理员权限执行如下命令：</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">cmd <span class="token operator">/</span>c mklink <span class="token operator">/</span>D C:\Users\hzweiyongqiang\<span class="token punctuation">.</span>m2\repository E:\code\Java\repository</code></pre><h3 id="配置阿里云中央仓库"><a href="#配置阿里云中央仓库" class="headerlink" title="配置阿里云中央仓库"></a>配置阿里云中央仓库</h3><p>进入到 idea 安装目录，找到 \plugins\maven\lib 目录，可以看到 maven 有几个</p><p><img src="/images/2020/08/1596678866870.png" alt="1596678866870" loading="lazy"></p><p>修改 maven3 下 conf 目录下的 settings.xml 。</p><p>找到 mirrors，添加以下内容：</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>alimaven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>aliyun maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://maven.aliyun.com/nexus/content/groups/public/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">></span></span>central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">></span></span></code></pre><p>修改后保存，打开 idea，菜单 file-settings, 搜索 maven，选择刚才修改的 maven：</p><p><img src="/images/2020/08/1596679064163.png" alt="1596679064163" loading="lazy"></p><p>设置好后保存，以后使用 maven 速度会提升很多倍。</p><h3 id="鼠标控制放大缩小"><a href="#鼠标控制放大缩小" class="headerlink" title="鼠标控制放大缩小"></a>鼠标控制放大缩小</h3><p>File -&gt; Setting -&gt; Editor -&gt; General</p><p><img src="/images/2020/08/1596680119868.png" alt="1596680119868" loading="lazy"></p>]]></content>
    
    <summary type="html">
    
      idea相关配置总结。
    
    </summary>
    
    
      <category term="软件" scheme="https://jueee.github.io/categories/%E8%BD%AF%E4%BB%B6/"/>
    
      <category term="IDE" scheme="https://jueee.github.io/categories/%E8%BD%AF%E4%BB%B6/IDE/"/>
    
    
      <category term="软件" scheme="https://jueee.github.io/tags/%E8%BD%AF%E4%BB%B6/"/>
    
      <category term="IDE" scheme="https://jueee.github.io/tags/IDE/"/>
    
      <category term="idea" scheme="https://jueee.github.io/tags/idea/"/>
    
  </entry>
  
</feed>
