<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小决的专栏</title>
  
  <subtitle>进一寸有一寸的欢喜</subtitle>
  <link href="https://jueee.github.io/atom.xml" rel="self"/>
  
  <link href="https://jueee.github.io/"/>
  <updated>2021-11-19T09:46:44.051Z</updated>
  <id>https://jueee.github.io/</id>
  
  <author>
    <name>小决</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>因为启用 WSL 导致 IDEA 启动报错解决</title>
    <link href="https://jueee.github.io/2021/11/2021-11-19-%E5%9B%A0%E4%B8%BA%E5%90%AF%E7%94%A8WSL%E5%AF%BC%E8%87%B4IDEA%E5%90%AF%E5%8A%A8%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3/"/>
    <id>https://jueee.github.io/2021/11/2021-11-19-%E5%9B%A0%E4%B8%BA%E5%90%AF%E7%94%A8WSL%E5%AF%BC%E8%87%B4IDEA%E5%90%AF%E5%8A%A8%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3/</id>
    <published>2021-11-19T00:00:00.000Z</published>
    <updated>2021-11-19T09:46:44.051Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>因为启用 WSL 导致 IDEA 启动报错端口被占用。</p><a id="more"></a><p>错误如图：</p><p><img src="/images/2021/11/image-20211119170405922.png" alt="image-20211119170405922" loading="lazy"></p><p>IDEA 的启动日志路径：</p><blockquote><p>C:\Users\Administrator\AppData\Local\JetBrains\IdeaIC2021.1\log</p></blockquote><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>因为我要使用 docker，所以启用了 Hyper-V 和 WSL2，所以占用了 idea 的 more 端口</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>官方论坛给出了答案：<span class="exturl" data-url="aHR0cHM6Ly9pbnRlbGxpai1zdXBwb3J0LmpldGJyYWlucy5jb20vaGMvZW4tdXMvYXJ0aWNsZXMvMzYwMDA3NTY4NTU5">https://intellij-support.jetbrains.com/hc/en-us/articles/360007568559<i class="fa fa-external-link-alt"></i></span></p><p><img src="/images/2021/11/image-20211119170728493.png" alt="image-20211119170728493" loading="lazy"></p><ol><li><p>关闭 Hyper-V，可以在控制面板中关闭，也可以以管理员权限执行以下脚本，执行之后重启计算机</p><pre class="language-none"><code class="language-none">dism.exe /Online /Disable-Feature:Microsoft-Hyper-V</code></pre></li><li><p>更改端口，把端口号改成 6942~6991 间的任一个数字</p><pre class="language-none"><code class="language-none">netsh int ipv4 add excludedportrange protocol=tcp startport=&lt;端口号&gt; numberofports=1</code></pre></li><li><p>重新开启 Hyper-V，可以在控制面板开启或者以管理员执行下面脚本，执行之后重启计算机</p><pre class="language-none"><code class="language-none">dism.exe /Online /Enable-Feature:Microsoft-Hyper-V /All</code></pre></li></ol><p>问题解决，并且不影响 wsl 的使用。</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h3&gt;&lt;p&gt;因为启用 WSL 导致 IDEA 启动报错端口被占用。&lt;/p&gt;</summary>
    
    
    
    <category term="软件" scheme="https://jueee.github.io/categories/%E8%BD%AF%E4%BB%B6/"/>
    
    <category term="Windows" scheme="https://jueee.github.io/categories/%E8%BD%AF%E4%BB%B6/Windows/"/>
    
    <category term="OS" scheme="https://jueee.github.io/categories/OS/"/>
    
    <category term="Windows" scheme="https://jueee.github.io/categories/OS/Windows/"/>
    
    
    <category term="Windows" scheme="https://jueee.github.io/tags/Windows/"/>
    
    <category term="OS" scheme="https://jueee.github.io/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>API 接口设计之 token+sign 具体架构与实现</title>
    <link href="https://jueee.github.io/2021/11/2021-11-09-API%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1%E4%B9%8Btoken+sign%E5%85%B7%E4%BD%93%E6%9E%B6%E6%9E%84%E4%B8%8E%E5%AE%9E%E7%8E%B0/"/>
    <id>https://jueee.github.io/2021/11/2021-11-09-API%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1%E4%B9%8Btoken+sign%E5%85%B7%E4%BD%93%E6%9E%B6%E6%9E%84%E4%B8%8E%E5%AE%9E%E7%8E%B0/</id>
    <published>2021-11-09T00:00:00.000Z</published>
    <updated>2021-11-19T09:46:44.049Z</updated>
    
    <content type="html"><![CDATA[<p>在实际的业务中，难免会跟第三方系统进行数据的交互与传递，那么如何保证数据在传输过程中的安全呢（防窃取）？</p><p>除了 https 的协议之外，能不能加上通用的一套算法以及规范来保证传输的安全性呢？</p><a id="more"></a><h3 id="概念介绍"><a href="#概念介绍" class="headerlink" title="概念介绍"></a>概念介绍</h3><h4 id="token-简介"><a href="#token-简介" class="headerlink" title="token 简介"></a>token 简介</h4><p>Token：访问令牌 access token, 用于接口中，用于标识接口调用者的身份、凭证，减少用户名和密码的传输次数。一般情况下客户端 (接口调用方) 需要先向服务器端申请一个接口调用的账号，服务器会给出一个 appId 和一个 key, key 用于参数签名使用，注意 key 保存到客户端，需要做一些安全处理，防止泄露。</p><p>Token 的值一般是 UUID，服务端生成 Token 后需要将 token 做为 key，将一些和 token 关联的信息作为 value 保存到缓存服务器中 (redis)，当一个请求过来后，服务器就去缓存服务器中查询这个 Token 是否存在，存在则调用接口，不存在返回接口错误，一般通过拦截器或者过滤器来实现，Token 分为两种：</p><ul><li>API Token (接口令牌): 用于访问不需要用户登录的接口，如登录、注册、一些基本数据的获取等。 获取接口令牌需要拿 appId、timestamp 和 sign 来换，sign = 加密 (timestamp+key)</li><li>USER Token (用户令牌): 用于访问需要用户登录之后的接口，如：获取我的基本信息、保存、修改、删除等操作。获取用户令牌需要拿用户名和密码来换</li></ul><p>关于 Token 的时效性：token 可以是一次性的、也可以在一段时间范围内是有效的，具体使用哪种看业务需要。</p><p>一般情况下接口最好使用 https 协议，如果使用 http 协议，Token 机制只是一种减少被黑的可能性，其实只能防君子不能防小人。</p><p>一般 token、timestamp 和 sign 三个参数会在接口中会同时作为参数传递，每个参数都有各自的用途。</p><h4 id="timestamp-简介"><a href="#timestamp-简介" class="headerlink" title="timestamp 简介"></a>timestamp 简介</h4><p>timestamp: 时间戳，是客户端调用接口时对应的当前时间戳，时间戳用于防止 DoS 攻击。当黑客劫持了请求的 url 去 DoS 攻击，每次调用接口时接口都会判断服务器当前系统时间和接口中传的的 timestamp 的差值，如果这个差值超过某个设置的时间 (假如 5 分钟)，那么这个请求将被拦截掉，如果在设置的超时时间范围内，是不能阻止 DoS 攻击的。 timestamp 机制只能减轻 DoS 攻击的时间，缩短攻击时间。如果黑客修改了时间戳的值可通过 sign 签名机制来处理。</p><h5 id="DoS"><a href="#DoS" class="headerlink" title="DoS"></a>DoS</h5><p>DoS 是 Denial of Service 的简称，即拒绝服务，造成 DoS 的攻击行为被称为 DoS 攻击，其目的是使计算机或网络无法提供正常的服务。最常见的 DoS 攻击有计算机网络带宽攻击和连通性攻击。</p><p>DoS 攻击是指故意的攻击网络协议实现的缺陷或直接通过野蛮手段残忍地耗尽被攻击对象的资源，目的是让目标计算机或网络无法提供正常的服务或资源访问，使目标系统服务系统停止响应甚至崩溃，而在此攻击中并不包括侵入目标服务器或目标网络设备。这些服务资源包括网络带宽，文件系统空间容量，开放的进程或者允许的连接。这种攻击会导致资源的匮乏，无论计算机的处理速度多快、内存容量多大、网络带宽的速度多快都无法避免这种攻击带来的后果。</p><ul><li>Pingflood: 该攻击在短时间内向目的主机发送大量 ping 包，造成网络堵塞或主机资源耗尽。</li><li>Synflood: 该攻击以多个随机的源主机地址向目的主机发送 SYN 包，而在收到目的主机的 SYN ACK 后并不回应，这样，目的主机就为这些源主机建立了大量的连接队列，而且由于没有收到 ACK 一直维护着这</li></ul><p>些队列，造成了资源的大量消耗而不能向正常请求提供服务。</p><ul><li>Smurf：该攻击向一个子网的广播地址发一个带有特定请求（如 ICMP 回应请求）的包，并且将源地址伪装成想要攻击的主机地址。子网上所有主机都回应广播包请求而向被攻击主机发包，使该主机受到攻击。</li><li>Land-based：攻击者将一个包的源地址和目的地址都设置为目标主机的地址，然后将该包通过 IP 欺骗的方式发送给被攻击主机，这种包可以造成被攻击主机因试图与自己建立连接而陷入死循环，从而很大程度地降低了系统性能。</li><li>Ping of Death：根据 TCP/IP 的规范，一个包的长度最大为 65536 字节。尽管一个包的长度不能超过 65536 字节，但是一个包分成的多个片段的叠加却能做到。当一个主机收到了长度大于 65536 字节的包时，就是受到了 Ping of Death 攻击，该攻击会造成主机的宕机。</li><li>Teardrop：IP 数据包在网络传递时，数据包可以分成更小的片段。攻击者可以通过发送两段（或者更多）数据包来实现 TearDrop 攻击。第一个包的偏移量为 0，长度为 N，第二个包的偏移量小于 N。为了合并这些数据段，TCP/IP 堆栈会分配超乎寻常的巨大资源，从而造成系统资源的缺乏甚至机器的重新启动。</li><li>PingSweep：使用 ICMP Echo 轮询多个主机。</li></ul><h4 id="sign-简介"><a href="#sign-简介" class="headerlink" title="sign 简介"></a>sign 简介</h4><p>nonce：随机值，是客户端随机生成的值，作为参数传递过来，随机值的目的是增加 sign 签名的多变性。随机值一般是数字和字母的组合，6 位长度，随机值的组成和长度没有固定规则。</p><p>sign: 一般用于参数签名，防止参数被非法篡改，最常见的是修改金额等重要敏感参数， sign 的值一般是将所有非空参数按照升续排序然后 + token+key+timestamp+nonce (随机数) 拼接在一起，然后使用某种加密算法进行加密，作为接口中的一个参数 sign 来传递，也可以将 sign 放到请求头中。接口在网络传输过程中如果被黑客挟持，并修改其中的参数值，然后再继续调用接口，虽然参数的值被修改了，但是因为黑客不知道 sign 是如何计算出来的，不知道 sign 都有哪些值构成，不知道以怎样的顺序拼接在一起的，最重要的是不知道签名字符串中的 key 是什么，所以黑客可以篡改参数的值，但没法修改 sign 的值，当服务器调用接口前会按照 sign 的规则重新计算出 sign 的值然后和接口传递的 sign 参数的值做比较，如果相等表示参数值没有被篡改，如果不等，表示参数被非法篡改了，就不执行接口了。</p><h4 id="防止重复提交"><a href="#防止重复提交" class="headerlink" title="防止重复提交"></a>防止重复提交</h4><p>对于一些重要的操作需要防止客户端重复提交的 (如非幂等性重要操作)，具体办法是当请求第一次提交时将 sign 作为 key 保存到 redis，并设置超时时间，超时时间和 Timestamp 中设置的差值相同。当同一个请求第二次访问时会先检测 redis 是否存在该 sign，如果存在则证明重复提交了，接口就不再继续调用了。如果 sign 在缓存服务器中因过期时间到了，而被删除了，此时当这个 url 再次请求服务器时，因 token 的过期时间和 sign 的过期时间一直，sign 过期也意味着 token 过期，那样同样的 url 再访问服务器会因 token 错误会被拦截掉，这就是为什么 sign 和 token 的过期时间要保持一致的原因。拒绝重复调用机制确保 URL 被别人截获了也无法使用（如抓取数据）。</p><p>对于哪些接口需要防止重复提交可以自定义个注解来标记。</p><p>注意：所有的安全措施都用上的话有时候难免太过复杂，在实际项目中需要根据自身情况作出裁剪，比如可以只使用签名机制就可以保证信息不会被篡改，或者定向提供服务的时候只用 Token 机制就可以了。如何裁剪，全看项目实际情况和对接口安全性的要求。</p><h3 id="使用流程"><a href="#使用流程" class="headerlink" title="使用流程"></a>使用流程</h3><ol><li>接口调用方 (客户端) 向接口提供方 (服务器) 申请接口调用账号，申请成功后，接口提供方会给接口调用方一个 appId 和一个 key 参数</li><li>客户端携带参数 appId、timestamp、sign 去调用服务器端的 API token，其中 sign = 加密 (appId + timestamp + key)</li><li> 客户端拿着 api_token 去访问不需要登录就能访问的接口</li><li>当访问用户需要登录的接口时，客户端跳转到登录页面，通过用户名和密码调用登录接口，登录接口会返回一个 usertoken, 客户端拿着 usertoken 去访问需要登录才能访问的接口</li></ol><p>sign 的作用是防止参数被篡改，客户端调用服务端时需要传递 sign 参数，服务器响应客户端时也可以返回一个 sign 用于客户度校验返回的值是否被非法篡改了。客户端传的 sign 和服务器端响应的 sign 算法可能会不同。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在实际的业务中，难免会跟第三方系统进行数据的交互与传递，那么如何保证数据在传输过程中的安全呢（防窃取）？&lt;/p&gt;
&lt;p&gt;除了 https 的协议之外，能不能加上通用的一套算法以及规范来保证传输的安全性呢？&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://jueee.github.io/categories/Java/"/>
    
    
    <category term="Java" scheme="https://jueee.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>HTML 表格单元格增加双击复制功能</title>
    <link href="https://jueee.github.io/2021/10/2021-10-28-HTML%E8%A1%A8%E6%A0%BC%E5%8D%95%E5%85%83%E6%A0%BC%E5%A2%9E%E5%8A%A0%E5%8F%8C%E5%87%BB%E5%A4%8D%E5%88%B6%E5%8A%9F%E8%83%BD/"/>
    <id>https://jueee.github.io/2021/10/2021-10-28-HTML%E8%A1%A8%E6%A0%BC%E5%8D%95%E5%85%83%E6%A0%BC%E5%A2%9E%E5%8A%A0%E5%8F%8C%E5%87%BB%E5%A4%8D%E5%88%B6%E5%8A%9F%E8%83%BD/</id>
    <published>2021-10-28T00:00:00.000Z</published>
    <updated>2021-10-28T09:14:04.160Z</updated>
    
    <content type="html"><![CDATA[<p>在 HTML 表格中，单元格内容复制有些不方便，考虑增加双击复制功能。</p><a id="more"></a><h3 id="表格示例"><a href="#表格示例" class="headerlink" title="表格示例"></a>表格示例</h3><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>resultInfo<span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>thead</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>附件名称<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>附件MD5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>附件大小<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>thead</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tbody</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>#list</span> <span class="token attr-name">detailList</span> <span class="token attr-name">as</span> <span class="token attr-name">temp</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>${temp.attachName?default("")?html}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>${temp.attachMD5?default("")?html}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>${temp.attachSize?default("")?html}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>#list</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tbody</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">&gt;</span></span></code></pre><h3 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h3><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">copyTableInfoById</span><span class="token punctuation">(</span><span class="token string">'mailAttachTaskResultInfo'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></code></pre><h3 id="复制单元格函数"><a href="#复制单元格函数" class="headerlink" title="复制单元格函数"></a>复制单元格函数</h3><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">copyTableInfoById</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">var</span> idInfo <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> td<span class="token operator">=</span>idInfo<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"td"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//查询所有td标签,组成数组</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>td<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//循环绑定点击事件</span>      td<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function-variable function">ondblclick</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//绑定点击事件</span>        <span class="token keyword">var</span> info <span class="token operator">=</span> <span class="token function">strip</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>info<span class="token operator">==</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            toastr<span class="token punctuation">.</span><span class="token function">warning</span><span class="token punctuation">(</span><span class="token string">"复制内容为空，请确认！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        document<span class="token punctuation">.</span><span class="token function-variable function">oncopy</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span>clipboardData<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token string">'text'</span><span class="token punctuation">,</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            document<span class="token punctuation">.</span>oncopy<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">execCommand</span><span class="token punctuation">(</span><span class="token string">'Copy'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        toastr<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token string">"已复制："</span><span class="token operator">+</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>其中：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">strip</span><span class="token punctuation">(</span><span class="token parameter">html</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">var</span> tmp <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   tmp<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> html<span class="token punctuation">;</span>   <span class="token keyword">var</span> ulInfo <span class="token operator">=</span> tmp<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span><span class="token punctuation">(</span>ulInfo<span class="token operator">!=</span><span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> ulInfo<span class="token punctuation">.</span>length<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      ulInfo<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">return</span> tmp<span class="token punctuation">.</span>textContent<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> tmp<span class="token punctuation">.</span>innerText<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="toastr-弹出框"><a href="#toastr-弹出框" class="headerlink" title="toastr 弹出框"></a>toastr 弹出框</h3><ul><li>官网：<span class="exturl" data-url="aHR0cHM6Ly9jb2Rlc2V2ZW4uZ2l0aHViLmlvL3RvYXN0ci8=">https://codeseven.github.io/toastr/<i class="fa fa-external-link-alt"></i></span></li><li>GitHub：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0NvZGVTZXZlbi90b2FzdHI=">https://github.com/CodeSeven/toastr<i class="fa fa-external-link-alt"></i></span></li><li>演示地址：<span class="exturl" data-url="aHR0cHM6Ly9jb2Rlc2V2ZW4uZ2l0aHViLmlvL3RvYXN0ci9kZW1vLmh0bWw=">https://codeseven.github.io/toastr/demo.html<i class="fa fa-external-link-alt"></i></span></li></ul><h4 id="toastr-引入"><a href="#toastr-引入" class="headerlink" title="toastr 引入"></a>toastr 引入</h4><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lib/toastr/2.1.4/toastr.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lib/toastr/2.1.4/toastr.min.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></code></pre><p>注，toastr 是基于 jquery 的插件，需要先引入 jquery：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>libs/jquery-2.0.2.min.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>libs/jquery-ui-1.10.3.min.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></code></pre><h4 id="toastr-配置"><a href="#toastr-配置" class="headerlink" title="toastr 配置"></a>toastr 配置</h4><pre class="language-js" data-language="js"><code class="language-js">toastr<span class="token punctuation">.</span>options <span class="token operator">=</span> <span class="token punctuation">{</span>   <span class="token string">"positionClass"</span><span class="token operator">:</span> <span class="token string">"toast-center-center"</span><span class="token punctuation">,</span>  <span class="token comment">//弹出窗的位置</span>   <span class="token string">"showDuration"</span><span class="token operator">:</span> <span class="token string">"100"</span><span class="token punctuation">,</span><span class="token comment">//显示的动画时间</span>   <span class="token string">"hideDuration"</span><span class="token operator">:</span> <span class="token string">"300"</span><span class="token punctuation">,</span> <span class="token comment">//消失的动画时间</span>   <span class="token string">"timeOut"</span><span class="token operator">:</span> <span class="token string">"1000"</span> <span class="token comment">//展现时间</span><span class="token punctuation">}</span></code></pre><h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><p>对于其他 API 调用，看到演示。</p><pre class="language-none"><code class="language-none">toastr.info('Are you the 6 fingered man?')</code></pre><p><strong>其他选项</strong></p><p>显示一个警告，没有标题</p><pre class="language-none"><code class="language-none">toastr.warning('My name is Inigo Montoya. You killed my father, prepare to die!')</code></pre><p>显示一个成功，标题</p><pre class="language-none"><code class="language-none">toastr.success('Have fun storming the castle!', 'Miracle Max Says')</code></pre><p>显示错误标题</p><pre class="language-none"><code class="language-none">toastr.error('I do not think that word means what you think it means.', 'Inconceivable!')</code></pre><p>清除当前的列表</p><pre class="language-none"><code class="language-none">toastr.clear()</code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;在 HTML表格中，单元格内容复制有些不方便，考虑增加双击复制功能。&lt;/p&gt;</summary>
    
    
    
    <category term="HTML" scheme="https://jueee.github.io/categories/HTML/"/>
    
    
    <category term="HTML" scheme="https://jueee.github.io/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>k8s 数据清理</title>
    <link href="https://jueee.github.io/2021/10/2021-10-26-k8s%E6%95%B0%E6%8D%AE%E6%B8%85%E7%90%86/"/>
    <id>https://jueee.github.io/2021/10/2021-10-26-k8s%E6%95%B0%E6%8D%AE%E6%B8%85%E7%90%86/</id>
    <published>2021-10-26T00:00:00.000Z</published>
    <updated>2021-10-26T03:18:00.880Z</updated>
    
    <content type="html"><![CDATA[<p>批量删除状态为 <code>Evicted</code> 的 pod：</p><pre class="language-none"><code class="language-none">$ kubectl get pods | grep Evicted | awk '{print $1}' | xargs kubectl delete pod</code></pre><p>批量删除状态为 <code>Terminating</code> 的 pod：</p><pre class="language-none"><code class="language-none">$ kubectl get pods | grep Terminating | awk '{print $1}' | xargs kubectl delete pod --grace-period=0 --force</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;批量删除状态为 &lt;code&gt;Evicted&lt;/code&gt; 的 pod：&lt;/p&gt;
&lt;pre class=&quot;language-none&quot;&gt;&lt;code class=&quot;language-none&quot;&gt;$ kubectl get pods | grep Evicted | awk &#39;{</summary>
      
    
    
    
    <category term="Container" scheme="https://jueee.github.io/categories/Container/"/>
    
    <category term="Kubernetes" scheme="https://jueee.github.io/categories/Container/Kubernetes/"/>
    
    
    <category term="Container" scheme="https://jueee.github.io/tags/Container/"/>
    
    <category term="Kubernetes" scheme="https://jueee.github.io/tags/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>Docker 命令查看并清理数据卷及磁盘</title>
    <link href="https://jueee.github.io/2021/10/2021-10-19-Docker%E5%91%BD%E4%BB%A4%E6%9F%A5%E7%9C%8B%E5%B9%B6%E6%B8%85%E7%90%86%E6%95%B0%E6%8D%AE%E5%8D%B7%E5%8F%8A%E7%A3%81%E7%9B%98/"/>
    <id>https://jueee.github.io/2021/10/2021-10-19-Docker%E5%91%BD%E4%BB%A4%E6%9F%A5%E7%9C%8B%E5%B9%B6%E6%B8%85%E7%90%86%E6%95%B0%E6%8D%AE%E5%8D%B7%E5%8F%8A%E7%A3%81%E7%9B%98/</id>
    <published>2021-10-19T00:00:00.000Z</published>
    <updated>2021-10-22T11:00:27.925Z</updated>
    
    <content type="html"><![CDATA[<p>Docker 在长时间使用的情况下，经常需要删除旧的容器并创建新的容器，长此以往，Docker 的数据卷 volumes 会产生了非常多的僵尸文件。</p><p>以下介绍如何查看并清理这些僵尸文件。</p><a id="more"></a><h3 id="查询僵尸文件"><a href="#查询僵尸文件" class="headerlink" title="查询僵尸文件"></a>查询僵尸文件</h3><p>在 Docker 1.9 以上的版本中，官方提供用于查询僵尸文件的命令：</p><pre class="language-none"><code class="language-none">$ docker volume ls -qf dangling=true</code></pre><p>Docker 1.13 引入了类似于 Linux 上 df 的命令，用于查看 Docker 的磁盘使用情况</p><pre class="language-none"><code class="language-none">$ docker system dfTYPE                TOTAL               ACTIVE              SIZE                RECLAIMABLEImages              47                  47                  11.89GB             879.7MB (7%)Containers          156                 154                 868.7GB             0B (0%)Local Volumes       642                 28                  1.359TB             389.5GB (28%)Build Cache         0                   0                   0B                  0B</code></pre><p>上述信息可以看出：</p><ul><li>Docker 镜像占用了 11.89GB 磁盘，</li><li>Docker 容器占用了 868.7GB 磁盘，</li><li>Docker 数据卷占用了 1.359TB 磁盘。</li></ul><h3 id="删除无用数据卷"><a href="#删除无用数据卷" class="headerlink" title="删除无用数据卷"></a>删除无用数据卷</h3><h4 id="手动删除命令"><a href="#手动删除命令" class="headerlink" title="手动删除命令"></a>手动删除命令</h4><p>删除所有 dangling 数据卷（即无用的 Volume，僵尸文件）：</p><pre class="language-none"><code class="language-none">$ docker volume rm $(docker volume ls -qf dangling=true)</code></pre><p>删除所有 dangling 镜像（即无 tag 的镜像）：</p><pre class="language-none"><code class="language-none">$ docker rmi $(docker images | grep "^&lt;none&gt;" | awk "{print $3}")</code></pre><p>删除所有关闭的容器：</p><pre class="language-none"><code class="language-none">$ docker ps -a | grep Exit | cut -d ' ' -f 1 | xargs docker rm</code></pre><h4 id="清理none对象"><a href="#清理none对象" class="headerlink" title="清理none对象"></a>清理 none 对象</h4><p>删除关闭的容器、无用的数据卷和网络，以及 dangling 镜像（即无 tag 的镜像）</p><p>注意，所有关闭的容器都会被删除，请核查是否存在关闭运行但是需要保留的容器！</p><p>删除关闭的容器、无用的数据卷和网络：</p><pre class="language-none"><code class="language-none">$ docker system pruneWARNING! This will remove:  - all stopped containers  - all networks not used by at least one container  - all dangling images  - all dangling build cacheAre you sure you want to continue? [y/N] y</code></pre><p>删除更彻底，可以将没有容器使用 Docker 镜像都删掉：</p><pre class="language-none"><code class="language-none">$ docker system prune -aWARNING! This will remove:  - all stopped containers  - all networks not used by at least one container  - all images without at least one container associated to them  - all build cacheAre you sure you want to continue? [y/N] y</code></pre><p><code>docker system prune</code> 命令是删除镜像、容器和网络的快捷方式。</p><p>在 Docker 17.06.0 及以前版本中，还可以删除卷。</p><p>在 Docker 17.06.1 及更高版本中必须为 docker system prune 命令明确指定 --volumes 标志才会删除卷。</p><pre class="language-none"><code class="language-none">$ docker system prune --volumesWARNING! This will remove:  - all stopped containers  - all networks not used by at least one container  - all volumes not used by at least one container  - all dangling images  - all dangling build cacheAre you sure you want to continue? [y/N] y</code></pre><h4 id="重启-Docker"><a href="#重启-Docker" class="headerlink" title="重启 Docker"></a>重启 Docker</h4><p>使用上面几个方法的命令可以有效清理 Docker 运行所产生的无用文件，且无需重启 Docker 即可生效。</p><p>但是 Docker 也许存在某些 bug（内核 3.13 版本的 Docker 确诊），导致 Docker 无法清理一些无用目录，不过重启 Docker 可以解决这个问题。</p><h4 id="再次查看占用"><a href="#再次查看占用" class="headerlink" title="再次查看占用"></a>再次查看占用</h4><pre class="language-none"><code class="language-none">$ docker system dfTYPE                TOTAL               ACTIVE              SIZE                RECLAIMABLEImages              16                  16                  5.072GB             86.04MB (1%)Containers          102                 102                 57.04MB             0B (0%)Local Volumes       32                  9                   206.5MB             241.7kB (0%)Build Cache         0                   0                   0B                  0B</code></pre><p>相比上次，占用明显降低了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Docker 在长时间使用的情况下，经常需要删除旧的容器并创建新的容器，长此以往，Docker 的数据卷 volumes 会产生了非常多的僵尸文件。&lt;/p&gt;
&lt;p&gt;以下介绍如何查看并清理这些僵尸文件。&lt;/p&gt;</summary>
    
    
    
    <category term="Container" scheme="https://jueee.github.io/categories/Container/"/>
    
    <category term="Docker" scheme="https://jueee.github.io/categories/Container/Docker/"/>
    
    
    <category term="Docker" scheme="https://jueee.github.io/tags/Docker/"/>
    
    <category term="Container" scheme="https://jueee.github.io/tags/Container/"/>
    
  </entry>
  
  <entry>
    <title>docker 命令批量删除状态为 Exited 的容器</title>
    <link href="https://jueee.github.io/2021/10/2021-10-18-docker%E5%91%BD%E4%BB%A4%E6%89%B9%E9%87%8F%E5%88%A0%E9%99%A4%E7%8A%B6%E6%80%81%E4%B8%BAExited%E7%9A%84%E5%AE%B9%E5%99%A8/"/>
    <id>https://jueee.github.io/2021/10/2021-10-18-docker%E5%91%BD%E4%BB%A4%E6%89%B9%E9%87%8F%E5%88%A0%E9%99%A4%E7%8A%B6%E6%80%81%E4%B8%BAExited%E7%9A%84%E5%AE%B9%E5%99%A8/</id>
    <published>2021-10-18T00:00:00.000Z</published>
    <updated>2021-10-22T11:00:27.923Z</updated>
    
    <content type="html"><![CDATA[<p>docker 启动的容器当中，经常有一些退出的容器，既然没有用了，就需要批量清理一下。</p><p>命令：</p><pre class="language-none"><code class="language-none">docker rm $(docker ps -q -f status=exited)</code></pre><p>解释： 利用 docker ps -f 选项可以找到 exited 的容器 -q 只显示容器 id 。</p><p>这样就可以批量删除了！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;docker 启动的容器当中，经常有一些退出的容器，既然没有用了，就需要批量清理一下。&lt;/p&gt;
&lt;p&gt;命令：&lt;/p&gt;
&lt;pre class=&quot;language-none&quot;&gt;&lt;code class=&quot;language-none&quot;&gt;docker rm $(docker ps -</summary>
      
    
    
    
    <category term="Container" scheme="https://jueee.github.io/categories/Container/"/>
    
    <category term="Docker" scheme="https://jueee.github.io/categories/Container/Docker/"/>
    
    
    <category term="Docker" scheme="https://jueee.github.io/tags/Docker/"/>
    
    <category term="Container" scheme="https://jueee.github.io/tags/Container/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 清理 binlog 日志的方法</title>
    <link href="https://jueee.github.io/2021/10/2021-10-11-MySQL%E6%B8%85%E7%90%86binlog%E6%97%A5%E5%BF%97%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>https://jueee.github.io/2021/10/2021-10-11-MySQL%E6%B8%85%E7%90%86binlog%E6%97%A5%E5%BF%97%E7%9A%84%E6%96%B9%E6%B3%95/</id>
    <published>2021-10-11T00:00:00.000Z</published>
    <updated>2021-10-22T11:00:27.921Z</updated>
    
    <content type="html"><![CDATA[<p>MySQL 中的 binlog 日志记录了数据库中数据的变动，便于对数据的基于时间点和基于位置的恢复，但是 binlog 也会日渐增大，占用很大的磁盘空间，因此，要对 binlog 使用正确安全的方法清理掉一部分没用的日志。</p><a id="more"></a><h3 id="自动清理"><a href="#自动清理" class="headerlink" title="自动清理"></a>自动清理</h3><p>通过设置 binlog 过期的时间，使系统自动删除 binlog 文件。</p><p>查看 binlog 过期日期配置：</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; show variables like 'expire_logs_days';+------------------+-------+| Variable_name    | Value |+------------------+-------+| expire_logs_days | 7     |+------------------+-------+1 row in set (0.00 sec)</code></pre><p>设置 binlog 过期日期：</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; set global expire_logs_days = 30;</code></pre><p>在 my.ini 中设置过期时间：</p><pre class="language-ini" data-language="ini"><code class="language-ini"><span class="token selector">[mysqld]</span><span class="token constant">expire_logs_days</span> <span class="token attr-value"><span class="token punctuation">=</span> 7</span></code></pre><h3 id="手动清理"><a href="#手动清理" class="headerlink" title="手动清理"></a>手动清理</h3><p>清理前的准备：</p><ol><li><p>查看主库和从库正在使用的 binlog 是哪个文件</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; show master status\Gmysql&gt; show slave status\G</code></pre></li><li><p>在删除 binlog 日志之前，首先对 binlog 日志备份，以防万一。</p></li></ol><p>删除指定日期以前的日志索引中 binlog 日志文件：</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; purge master logs before '2021-10-11 17:20:00';</code></pre><p>删除指定日志文件的日志索引中 binlog 日志文件：</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; purge master logs to 'mysql-bin.000022';</code></pre><p><strong>注意</strong>：</p><p>时间和文件名一定不可以写错，尤其是时间中的年和文件名中的序号，以防不小心将正在使用的 binlog 删除！</p><p><strong>切勿删除正在使用的 binlog！！！</strong></p><p>使用该语法，会将对应的文件和 mysql-bin.index 中的对应路径删除。</p><h3 id="清理脚本"><a href="#清理脚本" class="headerlink" title="清理脚本"></a>清理脚本</h3><p>自动清理 binlog ，只保留最近 50 个：</p><pre class="language-sh" data-language="sh"><code class="language-sh">#!/bin/sh# incr backup of mysqlcd /mysqldata# get the last binary logLASTBIN=`tail -n 50 mysql-bin.index| head -n 1`echo $LASTBINLASTBINFILE=`basename $LASTBIN`echo $LASTBINFILE# purge binary logs to the last binary log/bin/mysql --defaults-file=/mysql/my1.cnf  -uroot  -e"purge binary logs to '${LASTBINFILE}'"</code></pre><p>可以将该脚本配置进入 crontab。</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>过期时间设置的要适当，对于主从复制等读取 binlog 的情况，要看从库的延迟决定过期时间，避免主库 binlog 还未传到从库便因过期而删除，导致主从不一致！！！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;MySQL 中的 binlog 日志记录了数据库中数据的变动，便于对数据的基于时间点和基于位置的恢复，但是 binlog 也会日渐增大，占用很大的磁盘空间，因此，要对 binlog 使用正确安全的方法清理掉一部分没用的日志。&lt;/p&gt;</summary>
    
    
    
    <category term="Database" scheme="https://jueee.github.io/categories/Database/"/>
    
    <category term="MySQL" scheme="https://jueee.github.io/categories/Database/MySQL/"/>
    
    
    <category term="MySQL" scheme="https://jueee.github.io/tags/MySQL/"/>
    
    <category term="Database" scheme="https://jueee.github.io/tags/Database/"/>
    
  </entry>
  
  <entry>
    <title>网络钓鱼框架 Gophish 使用介绍</title>
    <link href="https://jueee.github.io/2021/09/2021-09-30-%E7%BD%91%E7%BB%9C%E9%92%93%E9%B1%BC%E6%A1%86%E6%9E%B6Gophish%E4%BD%BF%E7%94%A8%E4%BB%8B%E7%BB%8D/"/>
    <id>https://jueee.github.io/2021/09/2021-09-30-%E7%BD%91%E7%BB%9C%E9%92%93%E9%B1%BC%E6%A1%86%E6%9E%B6Gophish%E4%BD%BF%E7%94%A8%E4%BB%8B%E7%BB%8D/</id>
    <published>2021-09-30T00:00:00.000Z</published>
    <updated>2021-10-09T01:24:54.948Z</updated>
    
    <content type="html"><![CDATA[<p>Gophish 是一个功能强大的开源网络钓鱼框架，可以轻松测试组织的网络钓鱼风险，专为企业和渗透测试人员设计。</p><a id="more"></a><h3 id="Gophish"><a href="#Gophish" class="headerlink" title="Gophish"></a>Gophish</h3><ul><li>GitHub：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2dvcGhpc2gvZ29waGlzaA==">https://github.com/gophish/gophish<i class="fa fa-external-link-alt"></i></span></li><li> 官网地址：<span class="exturl" data-url="aHR0cHM6Ly9nZXRnb3BoaXNoLmNvbS8=">https://getgophish.com/<i class="fa fa-external-link-alt"></i></span></li></ul><h3 id="安装-Gophish"><a href="#安装-Gophish" class="headerlink" title="安装 Gophish"></a>安装 Gophish</h3><p>下载 Gophish 对应版本 ：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2dvcGhpc2gvZ29waGlzaC9yZWxlYXNlcyVFRiVCQyU4QyVFOCVBNyVBMyVFNSU4RSU4QiVFNSU4RCVCMyVFNSU4RiVBRiVFMyU4MCU4Mg==">https://github.com/gophish/gophish/releases，解压即可。<i class="fa fa-external-link-alt"></i></span></p><p>配置信息：</p><pre class="language-none"><code class="language-none">$ cat config.json{        "admin_server": {                "listen_url": "0.0.0.0:3333",                "use_tls": true,                "cert_path": "gophish_admin.crt",                "key_path": "gophish_admin.key"        },        "phish_server": {                "listen_url": "0.0.0.0:80",                "use_tls": false,                "cert_path": "example.crt",                "key_path": "example.key"        },        "db_name": "sqlite3",        "db_path": "gophish.db",        "migrations_prefix": "db/db_",        "contact_address": "",        "logging": {                "filename": "",                "level": ""        }}</code></pre><p>注意事项：</p><ul><li>若需要远程访问后台管理界面，将 <code>listen_url</code> 修改为 <code>0.0.0.0:3333</code>，端口可自定义。</li><li>如果仅通过本地访问，保持 <code>127.0.0.1:3333</code> 即可。</li></ul><h3 id="运行-Gophish"><a href="#运行-Gophish" class="headerlink" title="运行 Gophish"></a>运行 Gophish</h3><p>运行 Gophish  脚本：</p><pre class="language-none"><code class="language-none">./gophish &amp;</code></pre><p><strong>访问后台管理系统：</strong></p><p>本地打开浏览器，访问 <code>https://ip:3333/</code> （注意使用 https 协议）<br>可能会提示证书不正确，依次点击 <code>高级</code> — <code>继续转到页面</code> ，输入默认账密进行登录：<code>admin/XXX</code></p><p>初始化密码位于启动日志中：</p><pre class="language-none"><code class="language-none">time="2021-09-28T17:52:08Z" level=info msg="Please login with the username admin and the password 4304d5255378177d"</code></pre><h3 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h3><p>进入后台后，左边的栏目即代表各个功能，分别是：</p><ul><li>Dashboard 仪表板 </li><li>Campaigns 钓鱼事件</li><li> Users &amp; Groups 用户和组</li><li> Email Templates 邮件模板</li><li> Landing Pages 钓鱼页面</li><li> Sending Profiles 发件策略</li></ul><p>如下图所示：</p><p><img src="/images/2021/09/image-20210930105909701.png" alt="image-20210930105909701" loading="lazy"></p><h4 id="Sending-Profiles"><a href="#Sending-Profiles" class="headerlink" title="Sending Profiles"></a>Sending Profiles</h4><p>Sending Profiles（发件策略）的主要作用是将用来发送钓鱼邮件的邮箱配置到 gophish。</p><p>点击 <code>New Profile</code> 新建一个策略，依次来填写各个字段：</p><p><img src="/images/2021/09/image-20210930110737582.png" alt="image-20210930110737582" loading="lazy"></p><p>成功收到测试邮件：</p><p><img src="/images/2021/09/image-20210930110942868.png" alt="image-20210930110942868" loading="lazy"></p><p>至此，发件邮箱的配置已经完成。</p><p>当然，在实际钓鱼中，不可能使用自己的私人邮箱去发送钓鱼邮件。</p><p>因此，如果需要大批量去发送钓鱼邮件，最好的方式是使用自己的服务器，申请近似域名，搭建邮件服务器来发件。</p><h4 id="Landing-Pages"><a href="#Landing-Pages" class="headerlink" title="Landing Pages"></a>Landing Pages</h4><p>Landing Pages（钓鱼页面）是设计由邮件中超链接指向的钓鱼网页。</p><p>点击 <code>New Page</code> 新建页面：</p><p><img src="/images/2021/09/image-20210930140258214.png" alt="image-20210930140258214" loading="lazy"></p><h4 id="Email-Templates"><a href="#Email-Templates" class="headerlink" title="Email Templates"></a>Email Templates</h4><p>Email Templates（钓鱼邮件模板）用来编写钓鱼邮件的内容。</p><p>点击 <code>New Template</code> 新建钓鱼邮件模板，依次介绍填写各个字段：</p><p><img src="/images/2021/09/image-20210930141201445.png" alt="image-20210930141201445" loading="lazy"></p><ul><li>在发送的邮件中添加附件，一是可以添加相关文件提高邮件真实性，二是可以配合免杀木马诱导受害用户下载并打开。</li></ul><h4 id="Users-amp-Groups"><a href="#Users-amp-Groups" class="headerlink" title="Users &amp; Groups"></a>Users &amp; Groups</h4><p>Users &amp; Groups（用户和组）的作用是将钓鱼的目标邮箱导入系统中准备发送。</p><p><img src="/images/2021/09/image-20210930142644442.png" alt="image-20210930142644442" loading="lazy"></p><h4 id="Campaigns"><a href="#Campaigns" class="headerlink" title="Campaigns"></a>Campaigns</h4><p>Campaigns（钓鱼事件）的作用是将上述四个功能 <code>Sending Profiles</code> 、<code>Email Templates</code> 、<code>Landing Pages</code> 、<code>Users &amp; Groups</code> 联系起来，并创建钓鱼事件，发送钓鱼邮件。</p><p>在 Campaigns 中，可以新建钓鱼事件，并选择编辑好的钓鱼邮件模板，钓鱼页面，通过配置好的发件邮箱，将钓鱼邮件发送给目标用户组内的所有用户</p><p><img src="/images/2021/09/image-20210930160048250.png" alt="image-20210930160048250" loading="lazy"></p><p>注意事项：</p><ul><li><p>Send Emails By 配合 Launch Date 使用，可以理解为当前钓鱼事件下所有钓鱼邮件发送完成的时间。</p><p><code>Launch Date</code> 作为起始发件时间，<code>Send Emails By</code> 作为完成发件时间，而它们之间的时间将被所有邮件<code>以分钟为单位平分</code>。</p></li><li><p>这样的好处在于，当需要发送大量的钓鱼邮件，而发件邮箱服务器并未限制每分钟的发件数，那么通过该设定可以限制钓鱼邮件不受约束的发出，从而防止因短时间大量邮件抵达目标邮箱而导致的<strong>垃圾邮件检测</strong>，甚至<strong>发件邮箱服务器 IP 被目标邮箱服务器封禁</strong></p></li><li><p>如果未修改 <code>Launch Date</code>，则默认在创建钓鱼事件后就立即开始发送钓鱼邮件。</p></li></ul><h4 id="Dashboard"><a href="#Dashboard" class="headerlink" title="Dashboard"></a>Dashboard</h4><p>Dashboard（仪表板）自动开始统计数据。</p><p>统计的数据项包括：</p><ul><li>Email Sent：邮件发送成功的数量及比率</li><li> Email Opened：邮件被打开的数量及比率</li><li> Clicked Link：钓鱼链接被点击的数量及比率</li><li> Submitted Data：账号密码数据被提交的数量和比率</li><li> Email Reported：收到电子邮件报告的数量和比率</li></ul><p>另外，还有时间轴记录了每个行为发生的时间点。</p><p>关于电子邮件报告，详情参考：</p><blockquote><p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmdldGdvcGhpc2guY29tL3VzZXItZ3VpZGUvZG9jdW1lbnRhdGlvbi9lbWFpbC1yZXBvcnRpbmc=">https://docs.getgophish.com/user-guide/documentation/email-reporting<i class="fa fa-external-link-alt"></i></span></p></blockquote><p>Dashboard 统计的是 <strong>所有钓鱼事件</strong> 的数据，而非单个钓鱼事件的数据，如果仅需要查看单个钓鱼事件的统计数据，可以在 <code>Campaigns</code> 中找到该钓鱼事件，点击 <code>View Results</code> 按钮查看。</p><p><img src="/images/2021/09/image-20210930164040033.png" alt="image-20210930164040033" loading="lazy"></p><h3 id="测试使用"><a href="#测试使用" class="headerlink" title="测试使用"></a>测试使用</h3><ol><li><p>在 Sending Profiles（发件策略）中，配置自己的个人邮箱地址。</p></li><li><p>在 Landing Pages（钓鱼页面）中，配置一个包含登录页的网站。比如 <code>https://email.163.com/</code>，进行加载后，保存页面。</p></li><li><p>在 Email Templates（钓鱼邮件模板）中，配置想要发送的邮件模块，如下所示：</p><p><img src="/images/2021/09/image-20211008191226045.png" alt="image-20211008191226045" loading="lazy"></p></li><li><p>在 Users &amp; Groups（用户和组）中，配置收件人的地址列表。</p></li><li><p>在 Campaigns（钓鱼事件）中，关联上述配置。保存即可发送测试邮件。</p></li><li><p>在收件人邮箱中，即可查看钓鱼邮件。如下所示：</p><p><img src="/images/2021/09/image-20211008191409867.png" alt="image-20211008191409867" loading="lazy"></p></li><li><p>点击超链接 <strong>163 邮箱</strong>，发现钓鱼网站与 163 邮箱的登录地址非常类似，但<strong>网址完全不一样</strong>！！！</p><p><img src="/images/2021/09/image-20211008191558180.png" alt="image-20211008191558180" loading="lazy"></p><p>当然，由于 163 邮箱的安全性做的极好，会在登录窗口进行提示：</p><p><strong>无法登录，请开启浏览器 cookies 或更换浏览器后刷新重试。</strong></p></li></ol><p><strong>注意：</strong></p><ul><li>最终钓鱼地址中的 <code>?rid=DYNJnZy</code> 具有唯一性，即唯一指向打开的这封钓鱼邮件，换句话说 <code>DYNJnZy</code> 是为这封邮件的收件人<code>唯一分配的</code>。<br>如果此次钓鱼的 Campaigns 选择的目标存在多个目标邮箱，则 gophish 会为每一封目标邮件分配一个唯一的 rid 值，以此来区别不同的收件人。</li></ul><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyOTM5NTI3L2FydGljbGUvZGV0YWlscy8xMDc0ODUxMTY=">https://blog.csdn.net/qq_42939527/article/details/107485116<i class="fa fa-external-link-alt"></i></span></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;Gophish 是一个功能强大的开源网络钓鱼框架，可以轻松测试组织的网络钓鱼风险，专为企业和渗透测试人员设计。&lt;/p&gt;</summary>
    
    
    
    <category term="Blog" scheme="https://jueee.github.io/categories/Blog/"/>
    
    
    <category term="Blog" scheme="https://jueee.github.io/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>Docker 容器日志占用空间过大解决办法</title>
    <link href="https://jueee.github.io/2021/09/2021-09-28-Docker%E5%AE%B9%E5%99%A8%E6%97%A5%E5%BF%97%E5%8D%A0%E7%94%A8%E7%A9%BA%E9%97%B4%E8%BF%87%E5%A4%A7%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <id>https://jueee.github.io/2021/09/2021-09-28-Docker%E5%AE%B9%E5%99%A8%E6%97%A5%E5%BF%97%E5%8D%A0%E7%94%A8%E7%A9%BA%E9%97%B4%E8%BF%87%E5%A4%A7%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</id>
    <published>2021-09-28T00:00:00.000Z</published>
    <updated>2021-10-08T11:23:00.090Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>docker 容器日志导致主机磁盘空间满了。</p><p>docker logs -f container_name 噼里啪啦一大堆，很占用空间，不用的日志可以清理掉了。</p><a id="more"></a><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>找出 Docker 容器日志<br>在 linux 上，容器日志一般存放在 <code>/var/lib/docker/containers/container_id/</code> 下面。</p><p>查看各个日志文件大小的脚本 docker_log_size.sh，内容如下：</p><pre class="language-sh" data-language="sh"><code class="language-sh">#!/bin/sh echo "======== docker containers logs file size ========"  logs=$(find /var/lib/docker/containers/ -name *-json.log)  for log in $logs  do      ls -lh $log   done</code></pre><p>执行脚本：</p><pre class="language-sh" data-language="sh"><code class="language-sh">chmod +x docker_log_size.sh./docker_log_size.sh</code></pre><h3 id="清理Docker容器日志"><a href="#清理Docker容器日志" class="headerlink" title="清理Docker容器日志"></a>清理 Docker 容器日志</h3><p>通过清理 Docker 容器日志 <strong>治标</strong>，释放硬盘空间。</p><p>如果 docker 容器正在运行，那么使用 rm -rf 方式删除日志后，通过 df -h 会发现磁盘空间并没有释放。</p><p>原因是在 Linux 或者 Unix 系统中，通过 rm -rf 或者文件管理器删除文件，将会从文件系统的目录结构上解除链接（unlink）。</p><p>如果文件是被打开的（有一个进程正在使用），那么进程将仍然可以读取该文件，磁盘空间也一直被占用。</p><p>正确姿势是 cat /dev/null &gt; *-json.log，当然你也可以通过 rm -rf 删除后重启 docker。</p><p>接下来，提供一个日志清理脚本 clean_docker_log.sh，内容如下：</p><pre class="language-none"><code class="language-none">#!/bin/sh echo "======== start clean docker containers logs ========"  logs=$(find /var/lib/docker/containers/ -name *-json.log)  for log in $logs          do                  echo "clean logs : $log"                  cat /dev/null &gt; $log          done  echo "======== end clean docker containers logs ========"# chmod +x clean_docker_log.sh# ./clean_docker_log.sh</code></pre><p>但是，这样清理之后，随着时间的推移，容器日志会像杂草一样，卷土重来。</p><h3 id="设置Docker容器日志大小"><a href="#设置Docker容器日志大小" class="headerlink" title="设置Docker容器日志大小"></a>设置 Docker 容器日志大小</h3><p>设置 Docker 容器日志大小 <strong>治本</strong>。</p><p>设置一个容器服务的日志大小上限<br>上述方法，日志文件迟早又会涨回来。</p><p>要从根本上解决问题，需要限制容器服务的日志大小上限。</p><h4 id="设置单个容器"><a href="#设置单个容器" class="headerlink" title="设置单个容器"></a>设置单个容器</h4><p>通过配置容器 docker-compose 的 max-size 选项来实现：</p><pre class="language-none"><code class="language-none">nginx:   image: nginx:1.12.1   restart: always   logging:     driver: “json-file”     options:       max-size: “5g” </code></pre><p>重启 nginx 容器之后，其日志文件的大小就被限制在 5GB，再也不用担心了。</p><h4 id="全局设置"><a href="#全局设置" class="headerlink" title="全局设置"></a>全局设置</h4><p>新建 /etc/docker/daemon.json，若有就不用新建了。添加 log-dirver 和 log-opts 参数，样例如下：</p><pre class="language-none"><code class="language-none"># vim /etc/docker/daemon.json{  "log-driver":"json-file",  "log-opts": {"max-size":"500m", "max-file":"3"}}</code></pre><p>max-size=500m，意味着一个容器日志大小上限是 500M，<br>max-file=3，意味着一个容器有三个日志，分别是 id+.json、id+1.json、id+2.json。</p><pre class="language-none"><code class="language-none">// 重启docker守护进程systemctl daemon-reloadsystemctl restart docker</code></pre><p>注意：设置的日志大小，只对新建的容器有效。</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h3&gt;&lt;p&gt;docker 容器日志导致主机磁盘空间满了。&lt;/p&gt;
&lt;p&gt;docker logs -f container_name 噼里啪啦一大堆，很占用空间，不用的日志可以清理掉了。&lt;/p&gt;</summary>
    
    
    
    <category term="Container" scheme="https://jueee.github.io/categories/Container/"/>
    
    <category term="Docker" scheme="https://jueee.github.io/categories/Container/Docker/"/>
    
    
    <category term="Docker" scheme="https://jueee.github.io/tags/Docker/"/>
    
    <category term="Container" scheme="https://jueee.github.io/tags/Container/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes 图形化管理工具 Kuboard 的安装使用</title>
    <link href="https://jueee.github.io/2021/09/2021-09-17-Kubernetes%E5%9B%BE%E5%BD%A2%E5%8C%96%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7Kuboard%E7%9A%84%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/"/>
    <id>https://jueee.github.io/2021/09/2021-09-17-Kubernetes%E5%9B%BE%E5%BD%A2%E5%8C%96%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7Kuboard%E7%9A%84%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/</id>
    <published>2021-09-17T00:00:00.000Z</published>
    <updated>2021-10-22T09:44:22.627Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Kuboard-简介"><a href="#Kuboard-简介" class="headerlink" title="Kuboard 简介"></a>Kuboard 简介</h3><p>Kuboard，是一款免费的 Kubernetes 图形化管理工具，Kuboard 力图帮助用户快速在 Kubernetes 上落地微服务，Kubernetes 容器编排已越来越被大家关注，然而使用 Kubernetes 的门槛却依然很高，主要体现在这几个方面：</p><ul><li>集群的安装复杂，出错概率大</li><li> Kubernetes 相较于容器化，引入了许多新的概念，学习难度高</li><li>需要手工编写 YAML 文件，难以在多环境下管理</li><li>缺少好的实战案例可以参考</li></ul><h4 id="Kuboard-特点"><a href="#Kuboard-特点" class="headerlink" title="Kuboard 特点"></a>Kuboard 特点</h4><ul><li>无需编写 YAML</li><li> 纯图形化环境</li><li>多环境管理</li></ul><h4 id="相关文档"><a href="#相关文档" class="headerlink" title="相关文档"></a>相关文档</h4><ul><li>官网：<span class="exturl" data-url="aHR0cHM6Ly93d3cua3Vib2FyZC5jbi8=">https://www.kuboard.cn/<i class="fa fa-external-link-alt"></i></span></li><li> 安装文档：<span class="exturl" data-url="aHR0cHM6Ly93d3cua3Vib2FyZC5jbi9pbnN0YWxsL3YzL2luc3RhbGwuaHRtbA==">https://www.kuboard.cn/install/v3/install.html<i class="fa fa-external-link-alt"></i></span></li></ul><h3 id="安装工程"><a href="#安装工程" class="headerlink" title="安装工程"></a>安装工程</h3><p>在线安装：</p><pre class="language-none"><code class="language-none">kubectl apply -f https://addons.kuboard.cn/kuboard/kuboard-v3.yaml</code></pre><h3 id="访问-Kuboard"><a href="#访问-Kuboard" class="headerlink" title="访问 Kuboard"></a>访问 Kuboard</h3><ul><li>在浏览器中打开链接 <code>http://your-node-ip-address:30080</code></li><li>输入初始用户名和密码，并登录<ul><li>用户名： <code>admin</code></li><li>密码： <code>Kuboard123</code></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Kuboard-简介&quot;&gt;&lt;a href=&quot;#Kuboard-简介&quot; class=&quot;headerlink&quot; title=&quot;Kuboard 简介&quot;&gt;&lt;/a&gt;Kuboard 简介&lt;/h3&gt;&lt;p&gt;Kuboard，是一款免费的 Kubernetes 图形化管理工具，Kubo</summary>
      
    
    
    
    <category term="Container" scheme="https://jueee.github.io/categories/Container/"/>
    
    <category term="Kubernetes" scheme="https://jueee.github.io/categories/Container/Kubernetes/"/>
    
    
    <category term="Container" scheme="https://jueee.github.io/tags/Container/"/>
    
    <category term="Kubernetes" scheme="https://jueee.github.io/tags/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>离线搭建部署高可用 k3s 集群</title>
    <link href="https://jueee.github.io/2021/09/2021-09-15-%E7%A6%BB%E7%BA%BF%E6%90%AD%E5%BB%BA%E9%83%A8%E7%BD%B2%E9%AB%98%E5%8F%AF%E7%94%A8k3s%E9%9B%86%E7%BE%A4/"/>
    <id>https://jueee.github.io/2021/09/2021-09-15-%E7%A6%BB%E7%BA%BF%E6%90%AD%E5%BB%BA%E9%83%A8%E7%BD%B2%E9%AB%98%E5%8F%AF%E7%94%A8k3s%E9%9B%86%E7%BE%A4/</id>
    <published>2021-09-15T00:00:00.000Z</published>
    <updated>2021-10-21T02:08:47.868Z</updated>
    
    <content type="html"><![CDATA[<p>k3s 是一个轻量级 Kubernetes，它易于安装，二进制文件包小于 40 mb，只需要 512MB RAM 即可运行。</p><a id="more"></a><p>k3s 旨在成为完全兼容的 Kubernetes 发行版，相比 k8s 主要更改如下：</p><ol><li>旧的、Alpha 版本的、非默认功能都已经删除。</li><li>删除了大多数内部云提供商和存储插件，可以用插件替换。</li><li>新增 SQLite3 作为默认存储机制，etcd3 仍然有效，但是不再是默认项。</li><li>封装在简单的启动器中，可以处理大量 LTS 复杂性和选项。</li><li>最小化到没有操作系统依赖，只需要一个内核和 cgroup 挂载。</li></ol><h3 id="下载-k3s"><a href="#下载-k3s" class="headerlink" title="下载 k3s"></a>下载 k3s</h3><h4 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h4><p>Git 下载地址：</p><blockquote><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2szcy1pby9rM3MvcmVsZWFzZXMv">https://github.com/k3s-io/k3s/releases/<i class="fa fa-external-link-alt"></i></span></p></blockquote><h4 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h4><p>查看操作系统发行编号：</p><pre class="language-none"><code class="language-none">$ uname -r4.9.0-13-amd64</code></pre><p>下载对应发行编号的镜像版本：</p><pre class="language-none"><code class="language-none">$ wget https://github.com/k3s-io/k3s/releases/download/v1.21.4%2Bk3s1/k3s-airgap-images-amd64.tar</code></pre><h4 id="导入镜像"><a href="#导入镜像" class="headerlink" title="导入镜像"></a>导入镜像</h4><pre class="language-none"><code class="language-none">$ docker load &lt; k3s-airgap-images-amd64.tar</code></pre><p>查看导入的镜像</p><pre class="language-none"><code class="language-none">$ docker imagesREPOSITORY                         TAG                    IMAGE ID            CREATED             SIZErancher/klipper-helm               v0.6.4-build20210813   f0b5a8f3a50a        4 weeks ago         194MBrancher/library-traefik            2.4.8                  deaf4b1027ed        5 months ago        91.3MBrancher/library-busybox            1.32.1                 388056c9a683        5 months ago        1.23MBrancher/coredns-coredns            1.8.3                  3885a5b7f138        6 months ago        43.5MBrancher/local-path-provisioner     v0.0.19                148c19256271        9 months ago        42.4MBrancher/klipper-lb                 v0.2.0                 465db341a9e5        10 months ago       6.1MBrancher/metrics-server             v0.3.6                 9dd718864ce6        23 months ago       39.9MBrancher/pause                      3.1                    da86e6ba6ca1        3 years ago         742kB</code></pre><h4 id="可执行文件"><a href="#可执行文件" class="headerlink" title="可执行文件"></a>可执行文件</h4><p>下载可执行文件：</p><pre class="language-none"><code class="language-none">$ wget https://github.com/k3s-io/k3s/releases/download/v1.21.4%2Bk3s1/k3s</code></pre><p>下载安装文件：</p><pre class="language-none"><code class="language-none">$ wget https://raw.githubusercontent.com/k3s-io/k3s/master/install.sh</code></pre><p>移动：</p><pre class="language-none"><code class="language-none">chmod +x install.sh    //赋予文件可执行权限chmod +x k3s  //赋予文件可执行权限mv k3s /usr/local/bin        //将k3s二进制文件移动到k3s安装目录</code></pre><h3 id="部署-k3s-Server"><a href="#部署-k3s-Server" class="headerlink" title="部署 k3s Server"></a>部署 k3s Server</h3><h4 id="部署-install"><a href="#部署-install" class="headerlink" title="部署 install"></a>部署 install</h4><p>修改 install.sh ，增加如下两个配置：</p><pre class="language-none"><code class="language-none">export INSTALL_K3S_SKIP_DOWNLOAD=true     //设置跳过下载k3s二进制文件export INSTALL_K3S_BIN_DIR=/usr/local/bin       //设置k3s安装目录</code></pre><p>使用 root 直接执行  install.sh。</p><pre class="language-none"><code class="language-none"># ./install.sh[INFO]  Skipping k3s download and verify[INFO]  Skipping installation of SELinux RPM[INFO]  Creating /usr/local/bin/kubectl symlink to k3s[INFO]  Creating /usr/local/bin/crictl symlink to k3s[INFO]  Skipping /usr/local/bin/ctr symlink to k3s, command exists in PATH at /usr/bin/ctr[INFO]  Creating killall script /usr/local/bin/k3s-killall.sh[INFO]  Creating uninstall script /usr/local/bin/k3s-uninstall.sh[INFO]  env: Creating environment file /etc/systemd/system/k3s.service.env[INFO]  systemd: Creating service file /etc/systemd/system/k3s.service[INFO]  systemd: Enabling k3s unitCreated symlink /etc/systemd/system/multi-user.target.wants/k3s.service → /etc/systemd/system/k3s.service.[INFO]  systemd: Starting k3sJob for k3s.service failed because the control process exited with error code.See "systemctl status k3s.service" and "journalctl -xe" for details.</code></pre><h4 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h4><p>修改配置文件 k3s.service，增加 <strong>--docker --no-deploy traefik</strong></p><pre class="language-none"><code class="language-none">vi /etc/systemd/system/k3s.serviceExecStart=/usr/local/bin/k3s server --docker --no-deploy traefik</code></pre><p>如下图所示：</p><p><img src="/images/2021/09/image-20210915175046517.png" alt="image-20210915175046517" loading="lazy"></p><p>刷新服务配置文件：</p><pre class="language-none"><code class="language-none">systemctl daemon-reload</code></pre><p>重新启动 k3s：</p><pre class="language-none"><code class="language-none">systemctl restart k3s</code></pre><h4 id="确认服务端"><a href="#确认服务端" class="headerlink" title="确认服务端"></a>确认服务端</h4><p>查看节点配置进行确认：</p><pre class="language-none"><code class="language-none">kubectl get nodeNAME                STATUS   ROLES                  AGE   VERSIONdm93.bjth.xxx.org   Ready    control-plane,master   71m   v1.21.4-engine0+k3s1</code></pre><h3 id="添加k3s-Agent"><a href="#添加k3s-Agent" class="headerlink" title="添加k3s Agent"></a>添加 k3s Agent</h3><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><ul><li><p>导入镜像 <strong>k3s-airgap-images-amd64.tar</strong></p></li><li><p>下载可执行文件：<strong>install.sh</strong>、<strong>k3s</strong>，并赋可执行权限 <code>chmod +x</code> </p></li><li><p>将 k3s 移动至 <code>/usr/local/bin</code> 下</p></li><li><p>修改 install.sh ，增加如下两个配置：</p><pre class="language-none"><code class="language-none">export INSTALL_K3S_SKIP_DOWNLOAD=trueexport INSTALL_K3S_BIN_DIR=/usr/local/bin</code></pre></li></ul><h4 id="查看-token"><a href="#查看-token" class="headerlink" title="查看 token"></a>查看 token</h4><p>K3S_TOKEN 是 server 端的，位于 /var/lib/rancher/k3s/server/node-token 下</p><pre class="language-none"><code class="language-none"># cat /var/lib/rancher/k3s/server/node-tokenK1030a11e463e308a0926965dd7d851a8b0db33b0cfe00b48bec4edac3ab4d4af07::server:9ac27053cc40b4ca82e88e0e6a3b0776</code></pre><p>在 node 节点执行命令，格式为</p><pre class="language-none"><code class="language-none">K3S_URL=k3surl K3S_TOKEN={k3s_token} ./install.sh</code></pre><p>如执行如下命令：</p><pre class="language-none"><code class="language-none">K3S_TOKEN="K1030a11e463e308a0926965dd7d851a8b0db33b0cfe00b48bec4edac3ab4d4af07::server:9ac27053cc40b4ca82e88e0e6a3b0776" K3S_URL=https://serverIP:6443 ./install.sh</code></pre><p>【注】K3S_TOKEN 的值必须加双引号，否则会失败！</p><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><p>启动失败，编辑配置文件 /etc/systemd/system/k3s-agent.service</p><p>修改最后一行，添加从 docker 拉取镜像，内容如下：</p><pre class="language-none"><code class="language-none">ExecStart=/usr/local/bin/k3s \  agent --docker</code></pre><p>如下图所示：</p><p><img src="/images/2021/09/image-20210915185422809.png" alt="image-20210915185422809" loading="lazy"></p><p>使配置生效，并重启 k3s：</p><pre class="language-none"><code class="language-none">systemctl daemon-reloadsystemctl restart k3s</code></pre><h4 id="确认客户端"><a href="#确认客户端" class="headerlink" title="确认客户端"></a>确认客户端</h4><p>再次查看节点配置进行确认：</p><pre class="language-none"><code class="language-none">kubectl get nodeNAME                STATUS   ROLES                  AGE   VERSIONdm93.bjth.xxx.org   Ready    control-plane,master   71m   v1.21.4-engine0+k3s1dm95.bjth.xxx.org   Ready    &lt;none&gt;                 13m   v1.21.4-engine0+k3s1</code></pre><h3 id="权限问题"><a href="#权限问题" class="headerlink" title="权限问题"></a>权限问题</h3><p>搭建完成后，root 执行没问题，但普通用户会显示如下权限问题：</p><pre class="language-none"><code class="language-none">$ kubectl get nodeWARN[2021-09-16T09:29:50.657258755+08:00] Unable to read /etc/rancher/k3s/k3s.yaml, please start server with --write-kubeconfig-mode to modify kube config permissionserror: error loading config file "/etc/rancher/k3s/k3s.yaml": open /etc/rancher/k3s/k3s.yaml: permission denied</code></pre><p>提示权限不够，给 /etc/rancher/k3s/k3s.yaml 添加可读权限：</p><pre class="language-sh" data-language="sh"><code class="language-sh">$ sudo chmod a+r /etc/rancher/k3s/k3s.yaml</code></pre><p>然后再次有普通用户检查集群状态：</p><pre class="language-none"><code class="language-none">kubectl get nodeNAME                STATUS   ROLES                  AGE   VERSIONdm93.bjth.xxx.org   Ready    control-plane,master   71m   v1.21.4-engine0+k3s1dm95.bjth.xxx.org   Ready    &lt;none&gt;                 13m   v1.21.4-engine0+k3s1</code></pre><h3 id="安装-kubens"><a href="#安装-kubens" class="headerlink" title="安装 kubens"></a>安装 kubens</h3><p>kubens 是 命名空间切换工具。</p><p>解决需求：k3s 每次查看指定命名空间的资源都需要加 -n 命名空间 来指定命名空间，我们可以通过开源项目 <code>kubens</code> 来切换当前命名空间，切换命名空间后，就无需每次都使用 -n 命令来指定命名空间了。</p><h4 id="下载-kubens"><a href="#下载-kubens" class="headerlink" title="下载 kubens"></a>下载 kubens</h4><p>下载地址：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FobWV0Yi9rdWJlY3R4L3JlbGVhc2Vz">https://github.com/ahmetb/kubectx/releases<i class="fa fa-external-link-alt"></i></span></p><h4 id="安装-kubens-1"><a href="#安装-kubens-1" class="headerlink" title="安装 kubens"></a>安装 kubens</h4><p>将下载的 kubens 移动到 <code>/usr/local/bin</code> 目录下即可。</p><h4 id="问题处理"><a href="#问题处理" class="headerlink" title="问题处理"></a>问题处理</h4><p>使用普通用户时，出现：</p><pre class="language-none"><code class="language-none">$ kubens my-apperror: open /etc/rancher/k3s/k3s.yaml.lock: permission denied</code></pre><p>需要将 <code>/etc/rancher/k3s</code> 文件夹赋权限给相应的用户：</p><pre class="language-none"><code class="language-none">chown -R ant /etc/rancher/k3s/</code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;k3s 是一个轻量级 Kubernetes，它易于安装，二进制文件包小于 40 mb，只需要 512MB RAM 即可运行。&lt;/p&gt;</summary>
    
    
    
    <category term="Container" scheme="https://jueee.github.io/categories/Container/"/>
    
    <category term="k3s" scheme="https://jueee.github.io/categories/Container/k3s/"/>
    
    
    <category term="Container" scheme="https://jueee.github.io/tags/Container/"/>
    
    <category term="k3s" scheme="https://jueee.github.io/tags/k3s/"/>
    
  </entry>
  
  <entry>
    <title>Vue 中的 JSON 操作及展示</title>
    <link href="https://jueee.github.io/2021/09/2021-09-14-Vue%E4%B8%AD%E7%9A%84JSON%E6%93%8D%E4%BD%9C%E5%8F%8A%E5%B1%95%E7%A4%BA/"/>
    <id>https://jueee.github.io/2021/09/2021-09-14-Vue%E4%B8%AD%E7%9A%84JSON%E6%93%8D%E4%BD%9C%E5%8F%8A%E5%B1%95%E7%A4%BA/</id>
    <published>2021-09-14T00:00:00.000Z</published>
    <updated>2021-09-15T11:23:33.482Z</updated>
    
    <content type="html"><![CDATA[<h3 id="vue-json-viewer"><a href="#vue-json-viewer" class="headerlink" title="vue-json-viewer"></a>vue-json-viewer</h3><p> vue-json-viewer 主要用于 JSON 展示。</p><h4 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h4><blockquote><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvdnVlLWpzb24tdmlld2Vy">https://www.npmjs.com/package/vue-json-viewer<i class="fa fa-external-link-alt"></i></span></p></blockquote><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><pre class="language-none"><code class="language-none">npm install vue-json-viewer --save</code></pre><h4 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h4><p>全局引用：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> JsonViewer <span class="token keyword">from</span> <span class="token string">'vue-json-viewer'</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>JsonViewer<span class="token punctuation">)</span></code></pre><p>页面引用：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> JsonViewer <span class="token keyword">from</span> <span class="token string">'vue-json-viewer'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  components<span class="token operator">:</span> <span class="token punctuation">{</span> JsonViewer <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>json-viewer</span> <span class="token attr-name">:value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>showtext<span class="token punctuation">"</span></span> <span class="token attr-name">:expand-depth</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>4</span> <span class="token attr-name">copyable</span>  <span class="token attr-name">sort</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>json-viewer</span><span class="token punctuation">&gt;</span></span></code></pre><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><table><thead><tr><th>参数</th><th>描述</th><th>默认</th></tr></thead><tbody><tr><td><code>value</code></td><td>JSON 数据（可与 一起使用 <code>v-model</code>）</td><td><strong>必需的</strong></td></tr><tr><td><code>expand-depth</code></td><td>在此深度下折叠块</td><td><code>1</code></td></tr><tr><td><code>copyable</code></td><td>显示复制按钮，您可以自定义刚刚设置的复制文本 <code>{copyText: 'copy', copiedText: 'copied', timeout: 2000}</code> 或设置 <code>true</code> 使用默认复制文本</td><td><code>false</code></td></tr><tr><td><code>sort</code></td><td>在显示之前对键进行排序</td><td><code>false</code></td></tr><tr><td><code>boxed</code></td><td>为组件添加花哨的 “盒装” 样式</td><td><code>false</code></td></tr><tr><td><code>theme</code></td><td>为主题添加自定义 CSS 类</td><td><code>jv-light</code></td></tr><tr><td><code>expanded</code></td><td>默认展开视图</td><td><code>false</code></td></tr><tr><td><code>timeformat</code></td><td>自定义时间格式功能</td><td>时间 =&gt; time.toLocaleString ()</td></tr><tr><td><code>preview-mode</code></td><td>无扩展模式</td><td><code>false</code></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;vue-json-viewer&quot;&gt;&lt;a href=&quot;#vue-json-viewer&quot; class=&quot;headerlink&quot; title=&quot;vue-json-viewer&quot;&gt;&lt;/a&gt;vue-json-viewer&lt;/h3&gt;&lt;p&gt; vue-json-viewer 主</summary>
      
    
    
    
    <category term="Vue" scheme="https://jueee.github.io/categories/Vue/"/>
    
    
    <category term="Vue" scheme="https://jueee.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Windows 根据端口查看并杀掉进程</title>
    <link href="https://jueee.github.io/2021/08/2021-08-24-Windows%E6%A0%B9%E6%8D%AE%E7%AB%AF%E5%8F%A3%E6%9F%A5%E7%9C%8B%E5%B9%B6%E6%9D%80%E6%8E%89%E8%BF%9B%E7%A8%8B/"/>
    <id>https://jueee.github.io/2021/08/2021-08-24-Windows%E6%A0%B9%E6%8D%AE%E7%AB%AF%E5%8F%A3%E6%9F%A5%E7%9C%8B%E5%B9%B6%E6%9D%80%E6%8E%89%E8%BF%9B%E7%A8%8B/</id>
    <published>2021-08-24T00:00:00.000Z</published>
    <updated>2021-08-26T10:56:15.545Z</updated>
    
    <content type="html"><![CDATA[<h3 id="查看进程号"><a href="#查看进程号" class="headerlink" title="查看进程号"></a>查看进程号</h3><p>用 <code>netstat -ano | find 端口号</code> 查出进程号：</p><pre class="language-shell" data-language="shell"><code class="language-shell">netstat -ano | findstr 8181  TCP    0.0.0.0:8181           0.0.0.0:0              LISTENING       18128  TCP    [::]:8181              [::]:0                 LISTENING       18128</code></pre><h3 id="查看进程"><a href="#查看进程" class="headerlink" title="查看进程"></a>查看进程</h3><p>takslist 查询当前的进程</p><pre class="language-shell" data-language="shell"><code class="language-shell">tasklist | grep 18128java.exe                     18128 Console                    1     63,036 K</code></pre><h3 id="杀死进程"><a href="#杀死进程" class="headerlink" title="杀死进程"></a>杀死进程</h3><p>通过 <code>tasklist /pid 进程号</code> 杀死进程。</p><pre class="language-none"><code class="language-none">taskkill /pid 18128成功: 已终止 PID 为 18128 的进程。</code></pre><p>也可以通过 <code>taskkill /f /t /im 进程号</code>&nbsp;杀死进程。</p><pre class="language-none"><code class="language-none">taskkill /f /t /im 18128成功: 已终止 PID 23064 (属于 PID 18128 子进程)的进程。成功: 已终止 PID 18128 (属于 PID 19508 子进程)的进程。</code></pre><h4 id="taskkill"><a href="#taskkill" class="headerlink" title="taskkill"></a>taskkill</h4><p>taskkill 是 Windows 命令行里终止指定程序 “进程” 的命令。</p><ul><li>/f 表示强制终止<br>/im 表示指定的进程名称，例如 “explor.exe"</li><li>/pid 表示指定的进程 ID 进程号</li></ul><h4 id="权限不足"><a href="#权限不足" class="headerlink" title="权限不足"></a>权限不足</h4><p>如果权限不够，用管理员权限运行 cmd，发现又报错了，说要强制执行才可以，则需要加上 - F 参数。</p><pre class="language-none"><code class="language-none">taskkill /pid 5384错误: 无法终止 PID 为 5384 的进程。原因: 只能强行终止这个进程(带 /F 选项)。taskkill -f /pid 5384成功: 已终止 PID 为 5384 的进程。</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;查看进程号&quot;&gt;&lt;a href=&quot;#查看进程号&quot; class=&quot;headerlink&quot; title=&quot;查看进程号&quot;&gt;&lt;/a&gt;查看进程号&lt;/h3&gt;&lt;p&gt;用 &lt;code&gt;netstat -ano | find 端口号&lt;/code&gt; 查出进程号：&lt;/p&gt;
&lt;pre cla</summary>
      
    
    
    
    <category term="OS" scheme="https://jueee.github.io/categories/OS/"/>
    
    <category term="Windows" scheme="https://jueee.github.io/categories/OS/Windows/"/>
    
    
    <category term="Windows" scheme="https://jueee.github.io/tags/Windows/"/>
    
    <category term="OS" scheme="https://jueee.github.io/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>Windows 安装多窗口文件管理器 QTTabBar</title>
    <link href="https://jueee.github.io/2021/08/2021-08-23-Windows%E5%AE%89%E8%A3%85%E5%A4%9A%E7%AA%97%E5%8F%A3%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86%E5%99%A8QTTabBar/"/>
    <id>https://jueee.github.io/2021/08/2021-08-23-Windows%E5%AE%89%E8%A3%85%E5%A4%9A%E7%AA%97%E5%8F%A3%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86%E5%99%A8QTTabBar/</id>
    <published>2021-08-23T00:00:00.000Z</published>
    <updated>2021-08-26T10:56:15.533Z</updated>
    
    <content type="html"><![CDATA[<h3 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h3><p><span class="exturl" data-url="aHR0cDovL3F0dGFiYmFyLndpa2lkb3QuY29tLw==">http://qttabbar.wikidot.com/<i class="fa fa-external-link-alt"></i></span></p><h3 id="安装设置"><a href="#安装设置" class="headerlink" title="安装设置"></a>安装设置</h3><h4 id="安装语言"><a href="#安装语言" class="headerlink" title="安装语言"></a>安装语言</h4><p>下载语言包时，可能需要翻墙。</p><p><img src="/images/2021/08/image-20210823213305336.png" alt="image-20210823213305336" loading="lazy"></p><p><img src="/images/2021/08/image-20210823213200848.png" alt="image-20210823213200848" loading="lazy"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;下载地址&quot;&gt;&lt;a href=&quot;#下载地址&quot; class=&quot;headerlink&quot; title=&quot;下载地址&quot;&gt;&lt;/a&gt;下载地址&lt;/h3&gt;&lt;p&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cDovL3F0dGFiYmFyLndpa2lkb3Q</summary>
      
    
    
    
    <category term="软件" scheme="https://jueee.github.io/categories/%E8%BD%AF%E4%BB%B6/"/>
    
    <category term="Windows" scheme="https://jueee.github.io/categories/%E8%BD%AF%E4%BB%B6/Windows/"/>
    
    
    <category term="软件" scheme="https://jueee.github.io/tags/%E8%BD%AF%E4%BB%B6/"/>
    
    <category term="Windows" scheme="https://jueee.github.io/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>idea 集成本地三方软件 —— 以 Typora 打开 Markdown 文件为例</title>
    <link href="https://jueee.github.io/2021/08/2021-08-11-idea%E9%9B%86%E6%88%90%E6%9C%AC%E5%9C%B0%E4%B8%89%E6%96%B9%E8%BD%AF%E4%BB%B6%E2%80%94%E2%80%94%E4%BB%A5Typora%E6%89%93%E5%BC%80Markdown%E6%96%87%E4%BB%B6%E4%B8%BA%E4%BE%8B/"/>
    <id>https://jueee.github.io/2021/08/2021-08-11-idea%E9%9B%86%E6%88%90%E6%9C%AC%E5%9C%B0%E4%B8%89%E6%96%B9%E8%BD%AF%E4%BB%B6%E2%80%94%E2%80%94%E4%BB%A5Typora%E6%89%93%E5%BC%80Markdown%E6%96%87%E4%BB%B6%E4%B8%BA%E4%BE%8B/</id>
    <published>2021-08-11T00:00:00.000Z</published>
    <updated>2021-08-26T10:56:15.515Z</updated>
    
    <content type="html"><![CDATA[<h3 id="官方教程"><a href="#官方教程" class="headerlink" title="官方教程"></a>官方教程</h3><blockquote><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuamV0YnJhaW5zLmNvbS9oZWxwL2lkZWEvY29uZmlndXJpbmctdGhpcmQtcGFydHktdG9vbHMuaHRtbA==">https://www.jetbrains.com/help/idea/configuring-third-party-tools.html<i class="fa fa-external-link-alt"></i></span></p></blockquote><h3 id="Idea配置"><a href="#Idea配置" class="headerlink" title="Idea配置"></a>Idea 配置</h3><h4 id="External-Tools"><a href="#External-Tools" class="headerlink" title="External Tools"></a>External Tools</h4><p>需要先进入到 Idea 设置界面。</p><p>路径如下：【Settings】——【Tools】——【External Tools】，之后再点击 + 号（如图所示）</p><p><img src="/images/2021/08/image-20210811100557832.png" alt="image-20210811100557832" loading="lazy"></p><p>关于 External Tools 界面各参数含义，可以参看如下内容：</p><ul><li>Name: 在 IntelliJ IDEA 界面中显示的工具名称</li><li> Group: 工具所属的组的名称。您可以选择一个现有组或新创建一个组</li><li> Description: 对本工具的描述</li><li> Program: 应用程序可执行文件的路径</li><li> Arguments: 传递给可执行文件的参数</li><li> Working directory: 执行工具的当前工作目录的路径。</li></ul><h4 id="Arguments参数"><a href="#Arguments参数" class="headerlink" title="Arguments参数"></a>Arguments 参数</h4><p>可以直接下拉选择。</p><p><strong>这里的参数，最好用英文格式的双引号 "" 包括起来，否则 Failed to load file</strong></p><p><img src="/images/2021/08/image-20210811101106765.png" alt="image-20210811101106765" loading="lazy"></p><p>上述内容填写安装之后，点击 OK 按钮。</p><h4 id="验证配置"><a href="#验证配置" class="headerlink" title="验证配置"></a>验证配置</h4><p>上述操作执行完毕之后，便可在 Idea 中打开 md 文件进行一系列操作</p><blockquote><p>在需要编辑的 md 文件上右键，选择 External Tools 下的 Typora 工具</p></blockquote><p><img src="/images/2021/08/image-20210811101459966.png" alt="image-20210811101459966" loading="lazy"></p><h3 id="快捷键设置"><a href="#快捷键设置" class="headerlink" title="快捷键设置"></a>快捷键设置</h3><p>通过在需要编辑的 md 文件上右键，选择 External Tools 下的 Typora 工具，有点麻烦，我们可以添加个快捷键。</p><p><img src="/images/2021/08/image-20210811101627137.png" alt="image-20210811101627137" loading="lazy"></p><p>设置快捷键：</p><p><img src="/images/2021/08/image-20210811101752608.png" alt="image-20210811101752608" loading="lazy"></p><p>如果出现 <strong>Failed to load file</strong> 异常， 则需要配置中，在 Arguments 中添加的参数，用英文格式的双引号 "" 包括起来。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;官方教程&quot;&gt;&lt;a href=&quot;#官方教程&quot; class=&quot;headerlink&quot; title=&quot;官方教程&quot;&gt;&lt;/a&gt;官方教程&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly93d3cuam</summary>
      
    
    
    
    <category term="Blog" scheme="https://jueee.github.io/categories/Blog/"/>
    
    
    <category term="Blog" scheme="https://jueee.github.io/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>二分法查找排序数组中的元素</title>
    <link href="https://jueee.github.io/2021/08/2021-08-04-%E4%BA%8C%E5%88%86%E6%B3%95%E6%9F%A5%E6%89%BE%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E5%85%83%E7%B4%A0/"/>
    <id>https://jueee.github.io/2021/08/2021-08-04-%E4%BA%8C%E5%88%86%E6%B3%95%E6%9F%A5%E6%89%BE%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E5%85%83%E7%B4%A0/</id>
    <published>2021-08-04T00:00:00.000Z</published>
    <updated>2021-08-06T10:45:25.046Z</updated>
    
    <content type="html"><![CDATA[<p>二分法查找排序数组中的元素使用汇总。</p><a id="more"></a><p>示例排序数组：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="查找指定值"><a href="#查找指定值" class="headerlink" title="查找指定值"></a>查找指定值</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">equalVal</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> low <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> high <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;=</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>low <span class="token operator">+</span> high<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//查找左边的</span>            high <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment">//查找右边的</span>            low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>测试用例：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token function">assertEquals</span><span class="token punctuation">(</span>solution<span class="token punctuation">.</span><span class="token function">equalVal</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>solution<span class="token punctuation">.</span><span class="token function">equalVal</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>solution<span class="token punctuation">.</span><span class="token function">equalVal</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>solution<span class="token punctuation">.</span><span class="token function">equalVal</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>solution<span class="token punctuation">.</span><span class="token function">equalVal</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="查找小于目标值的最大值"><a href="#查找小于目标值的最大值" class="headerlink" title="查找小于目标值的最大值"></a>查找小于目标值的最大值</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxVal2low</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> low <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> high <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 这样的操作是为了取高位</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>low <span class="token operator">+</span> high <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>            low <span class="token operator">=</span> mid<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            high <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> nums<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>测试用例：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token function">assertEquals</span><span class="token punctuation">(</span>solution<span class="token punctuation">.</span><span class="token function">maxVal2low</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>solution<span class="token punctuation">.</span><span class="token function">maxVal2low</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>solution<span class="token punctuation">.</span><span class="token function">maxVal2low</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>solution<span class="token punctuation">.</span><span class="token function">maxVal2low</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>solution<span class="token punctuation">.</span><span class="token function">maxVal2low</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>solution<span class="token punctuation">.</span><span class="token function">maxVal2low</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="查找小于等于目标值的最大值"><a href="#查找小于等于目标值的最大值" class="headerlink" title="查找小于等于目标值的最大值"></a>查找小于等于目标值的最大值</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxVal2lowOrEqual</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> low <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> high <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 这样的操作是为了取高位</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>low <span class="token operator">+</span> high <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>            low <span class="token operator">=</span> mid<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            high <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> nums<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>测试用例：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token function">assertEquals</span><span class="token punctuation">(</span>solution<span class="token punctuation">.</span><span class="token function">maxVal2lowOrEqual</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>solution<span class="token punctuation">.</span><span class="token function">maxVal2lowOrEqual</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>solution<span class="token punctuation">.</span><span class="token function">maxVal2lowOrEqual</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>solution<span class="token punctuation">.</span><span class="token function">maxVal2lowOrEqual</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="查找大于目标值的最小值"><a href="#查找大于目标值的最小值" class="headerlink" title="查找大于目标值的最小值"></a>查找大于目标值的最小值</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">minVal2high</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> low <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> high <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>low <span class="token operator">+</span> high<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>            low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">//a[mid] &gt; key</span>            high <span class="token operator">=</span> mid<span class="token punctuation">;</span>   <span class="token comment">//因为mid也满足情况</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>high<span class="token punctuation">]</span> <span class="token operator">&gt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> nums<span class="token punctuation">[</span>high<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>测试用例：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token function">assertEquals</span><span class="token punctuation">(</span>solution<span class="token punctuation">.</span><span class="token function">minVal2high</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>solution<span class="token punctuation">.</span><span class="token function">minVal2high</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>solution<span class="token punctuation">.</span><span class="token function">minVal2high</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>solution<span class="token punctuation">.</span><span class="token function">minVal2high</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>solution<span class="token punctuation">.</span><span class="token function">minVal2high</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="查找大于等于目标值的最小值"><a href="#查找大于等于目标值的最小值" class="headerlink" title="查找大于等于目标值的最小值"></a>查找大于等于目标值的最小值</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">minVal2highOrEqual</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> low <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> high <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>low <span class="token operator">+</span> high<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>            low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">//a[mid] &gt;= key</span>            high <span class="token operator">=</span> mid<span class="token punctuation">;</span>   <span class="token comment">//因为mid也满足情况</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>high<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> nums<span class="token punctuation">[</span>high<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>测试用例：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token function">assertEquals</span><span class="token punctuation">(</span>solution<span class="token punctuation">.</span><span class="token function">minVal2highOrEqual</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>solution<span class="token punctuation">.</span><span class="token function">minVal2highOrEqual</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>solution<span class="token punctuation">.</span><span class="token function">minVal2highOrEqual</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>solution<span class="token punctuation">.</span><span class="token function">minVal2highOrEqual</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>solution<span class="token punctuation">.</span><span class="token function">minVal2highOrEqual</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;二分法查找排序数组中的元素使用汇总。&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://jueee.github.io/categories/Java/"/>
    
    <category term="算法" scheme="https://jueee.github.io/categories/Java/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="Java" scheme="https://jueee.github.io/tags/Java/"/>
    
    <category term="算法" scheme="https://jueee.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>优先级队列 PriorityQueue 应用汇总</title>
    <link href="https://jueee.github.io/2021/07/2021-07-27-%E4%BC%98%E5%85%88%E7%BA%A7%E9%98%9F%E5%88%97PriorityQueue%E5%BA%94%E7%94%A8%E6%B1%87%E6%80%BB/"/>
    <id>https://jueee.github.io/2021/07/2021-07-27-%E4%BC%98%E5%85%88%E7%BA%A7%E9%98%9F%E5%88%97PriorityQueue%E5%BA%94%E7%94%A8%E6%B1%87%E6%80%BB/</id>
    <published>2021-07-27T00:00:00.000Z</published>
    <updated>2021-07-30T01:24:49.923Z</updated>
    
    <content type="html"><![CDATA[<h3 id="优先级队列"><a href="#优先级队列" class="headerlink" title="优先级队列"></a>优先级队列</h3><p>队列的核心思想就是先进先出，这个优先级队列有点不太一样。</p><p>优先级队列中，数据按关键词有序排列，插入新数据的时候，会自动插入到合适的位置保证队列有序。</p><a id="more"></a><h4 id="升序"><a href="#升序" class="headerlink" title="升序"></a>升序</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> a <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="降序"><a href="#降序" class="headerlink" title="降序"></a>降序</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> b <span class="token operator">-</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="具体应用"><a href="#具体应用" class="headerlink" title="具体应用"></a>具体应用</h3><h4 id="滑动窗口最大值"><a href="#滑动窗口最大值" class="headerlink" title="滑动窗口最大值"></a>滑动窗口最大值</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">maxSlidingWindow</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">PriorityQueue</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">?</span> b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">:</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>len <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">-</span> k<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&gt;=</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> c <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">-</span> k<span class="token punctuation">;</span>            <span class="token comment">// 循环判断当前队首是否在窗口中，窗口的左边界为i-k</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> i <span class="token operator">-</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>                queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            data<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> data<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="数据流的中位数"><a href="#数据流的中位数" class="headerlink" title="数据流的中位数"></a>数据流的中位数</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MedianFinder</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> queueMin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> b <span class="token operator">-</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 小队列，降序</span>    <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> queueMax <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> a <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 大队列，升序</span>    <span class="token keyword">public</span> <span class="token class-name">MedianFinder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addNum</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>        queueMax<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 先把数值放进大队列</span>        queueMin<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>queueMax<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 把大队列中的最小值，放进小队列</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            queueMax<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>queueMin<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 如果是偶数，把小队列的最大值，放进大队列</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">findMedian</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>queueMin<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> queueMax<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> queueMin<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;优先级队列&quot;&gt;&lt;a href=&quot;#优先级队列&quot; class=&quot;headerlink&quot; title=&quot;优先级队列&quot;&gt;&lt;/a&gt;优先级队列&lt;/h3&gt;&lt;p&gt;队列的核心思想就是先进先出，这个优先级队列有点不太一样。&lt;/p&gt;
&lt;p&gt;优先级队列中，数据按关键词有序排列，插入新数据的时候，会自动插入到合适的位置保证队列有序。&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://jueee.github.io/categories/Java/"/>
    
    <category term="JavaClass" scheme="https://jueee.github.io/categories/Java/JavaClass/"/>
    
    
    <category term="JavaClass" scheme="https://jueee.github.io/tags/JavaClass/"/>
    
    <category term="Java" scheme="https://jueee.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>状态压缩动态规划 dp 使用总结</title>
    <link href="https://jueee.github.io/2021/07/2021-07-25-%E7%8A%B6%E6%80%81%E5%8E%8B%E7%BC%A9%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92dp%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"/>
    <id>https://jueee.github.io/2021/07/2021-07-25-%E7%8A%B6%E6%80%81%E5%8E%8B%E7%BC%A9%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92dp%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</id>
    <published>2021-07-25T00:00:00.000Z</published>
    <updated>2021-07-30T01:24:49.910Z</updated>
    
    <content type="html"><![CDATA[<h3 id="状态压缩"><a href="#状态压缩" class="headerlink" title="状态压缩"></a>状态压缩</h3><p>状态压缩就是用进制数（可以是二进制，三进制等等）表示状态，然后进行动态规划 dp。</p><a id="more"></a><h3 id="应用示例"><a href="#应用示例" class="headerlink" title="应用示例"></a>应用示例</h3><h4 id="两个数组最大值"><a href="#两个数组最大值" class="headerlink" title="两个数组最大值"></a>两个数组最大值</h4><p>对于 <code>students</code>&nbsp;和 <code>mentors</code>&nbsp;两个二维数组，两两匹配，计算最大值。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxCompatibilitySum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> students<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> mentors<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> students<span class="token punctuation">.</span>length<span class="token punctuation">,</span> range <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> n<span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>range<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> range<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">&gt;&gt;</span> j<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">//i的第j位为1</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> j<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token function">getVal</span><span class="token punctuation">(</span>students<span class="token punctuation">[</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">bitCount</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>mentors<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>range <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;状态压缩&quot;&gt;&lt;a href=&quot;#状态压缩&quot; class=&quot;headerlink&quot; title=&quot;状态压缩&quot;&gt;&lt;/a&gt;状态压缩&lt;/h3&gt;&lt;p&gt;状态压缩就是用进制数（可以是二进制，三进制等等）表示状态，然后进行动态规划 dp。&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://jueee.github.io/categories/Java/"/>
    
    <category term="算法" scheme="https://jueee.github.io/categories/Java/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="Java" scheme="https://jueee.github.io/tags/Java/"/>
    
    <category term="算法" scheme="https://jueee.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 密码过期的修改方法</title>
    <link href="https://jueee.github.io/2021/07/2021-07-23-MySQL%E5%AF%86%E7%A0%81%E8%BF%87%E6%9C%9F%E7%9A%84%E4%BF%AE%E6%94%B9%E6%96%B9%E6%B3%95/"/>
    <id>https://jueee.github.io/2021/07/2021-07-23-MySQL%E5%AF%86%E7%A0%81%E8%BF%87%E6%9C%9F%E7%9A%84%E4%BF%AE%E6%94%B9%E6%96%B9%E6%B3%95/</id>
    <published>2021-07-23T00:00:00.000Z</published>
    <updated>2021-08-20T08:28:41.901Z</updated>
    
    <content type="html"><![CDATA[<h4 id="密码失效"><a href="#密码失效" class="headerlink" title="密码失效"></a>密码失效</h4><p>查询 MySQL 异常：</p><pre class="language-none"><code class="language-none">mysql&gt; select host,user from mysql.user limit 1;ERROR 1820 (HY000): You must reset your password using ALTER USER statement before executing this statement.</code></pre><a id="more"></a><p>执行以下命令</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; SET PASSWORD = PASSWORD('your new password');mysql&gt; ALTER USER 'root'@'localhost' PASSWORD EXPIRE NEVER;mysql&gt; flush privileges;</code></pre><h4 id="MySQL设置密码过期时间"><a href="#MySQL设置密码过期时间" class="headerlink" title="MySQL设置密码过期时间"></a>MySQL 设置密码过期时间</h4><pre class="language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; SET GLOBAL default_password_lifetime = 90;mysql&gt; ALTER  USER 'root'@'localhost' PASSWORD  EXPIRE INTERVAL 90 DAY;</code></pre><h4 id="MySQL设置密码用不过期"><a href="#MySQL设置密码用不过期" class="headerlink" title="MySQL设置密码用不过期"></a>MySQL 设置密码用不过期</h4><p>设定密码的有效期为 0，即永不过期。</p><p>命令行修改：</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; set global default_password_lifetime=0;</code></pre><p>配置文件修改（改完后要重启服务才生效）：</p><pre class="language-ini" data-language="ini"><code class="language-ini"><span class="token selector">[mysqld]</span><span class="token constant">default_password_lifetime</span><span class="token attr-value"><span class="token punctuation">=</span>0</span></code></pre><p>查看系统参数：</p><pre class="language-none"><code class="language-none">mysql&gt; show global variables like 'default_password_lifetime';+---------------------------+-------+| Variable_name             | Value |+---------------------------+-------+| default_password_lifetime | 0     |+---------------------------+-------+1 row in set (0.01 sec)</code></pre><h4 id="普通用户过期处理"><a href="#普通用户过期处理" class="headerlink" title="普通用户过期处理"></a>普通用户过期处理</h4><p>普通用户一旦过期了，root 用户哪怕修改了它的密码，但是无法触发到过期状态的改变。</p><p>而改变过期状态的方法有两种：</p><ol><li><p>使用普通用户登陆后，自己修改密码，也可以改回旧密码：</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; set password=password('12345678');Query OK, 0 rows affected, 1 warning (0.00 sec)</code></pre></li><li><p>使用 root 用户把过期的值改为 N；</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; update mysql.user set password_expired='N' where user='test';Query OK, 1 row affected (0.01 sec)Rows matched: 1 Changed: 1 Warnings: 0mysql&gt; flush privileges;Query OK, 0 rows affected (0.00 sec)</code></pre><p>root 用户改了状态，记录要 flush 权限不然用普通用户立刻登陆还是不生效的。</p></li></ol><h4 id="查看过期时间"><a href="#查看过期时间" class="headerlink" title="查看过期时间"></a>查看过期时间</h4><pre class="language-mysql" data-language="mysql"><code class="language-mysql">select host,user,password_expired,password_lifetime from mysql.user;+-----------+-----------+------------------+-------------------+| host      | user      | password_expired | password_lifetime |+-----------+-----------+------------------+-------------------+| localhost | root      | N                |                 0 || %         | test      | N                |                 0 || %         | root      | N                |              NULL || localhost | mysql.sys | N                |              NULL |+-----------+-----------+------------------+-------------------+4 rows in set (0.00 sec)</code></pre>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;密码失效&quot;&gt;&lt;a href=&quot;#密码失效&quot; class=&quot;headerlink&quot; title=&quot;密码失效&quot;&gt;&lt;/a&gt;密码失效&lt;/h4&gt;&lt;p&gt;查询 MySQL 异常：&lt;/p&gt;
&lt;pre class=&quot;language-none&quot;&gt;&lt;code class=&quot;language-none&quot;&gt;mysql&amp;gt; select host,user from mysql.user limit 1;
ERROR 1820 (HY000): You must reset your password using ALTER USER statement before executing this statement.&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="Database" scheme="https://jueee.github.io/categories/Database/"/>
    
    <category term="MySQL" scheme="https://jueee.github.io/categories/Database/MySQL/"/>
    
    
    <category term="MySQL" scheme="https://jueee.github.io/tags/MySQL/"/>
    
    <category term="Database" scheme="https://jueee.github.io/tags/Database/"/>
    
  </entry>
  
  <entry>
    <title>Shell 通过正则表达式提取子串</title>
    <link href="https://jueee.github.io/2021/07/2021-07-12-Shell%E9%80%9A%E8%BF%87%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%8F%90%E5%8F%96%E5%AD%90%E4%B8%B2/"/>
    <id>https://jueee.github.io/2021/07/2021-07-12-Shell%E9%80%9A%E8%BF%87%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%8F%90%E5%8F%96%E5%AD%90%E4%B8%B2/</id>
    <published>2021-07-12T00:00:00.000Z</published>
    <updated>2021-07-16T11:11:34.225Z</updated>
    
    <content type="html"><![CDATA[<h3 id="通过-grep"><a href="#通过-grep" class="headerlink" title="通过 grep"></a>通过 grep</h3><p>grep 的 -o 选项，可以只打印匹配的部分，否则会打印整行。</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">echo</span> <span class="token string">"libgcc-4.8.5-4.h5.x86_64.rpm"</span> <span class="token operator">|</span> <span class="token function">grep</span> -Eo <span class="token string">"[0-9]+\.[0-9]+.*x86_64"</span><span class="token number">4.8</span>.5-4.h5.x86_64$ <span class="token builtin class-name">echo</span> <span class="token string">"libgcc-4.8.5-4.h5.x86_64.rpm"</span> <span class="token operator">|</span> <span class="token function">grep</span> -E <span class="token string">"[0-9]+\.[0-9]+.*x86_64"</span>libgcc-4.8.5-4.h5.x86_64.rpm</code></pre><p>复制的字符串匹配，可以通过 grep 进行多次匹配：</p><pre class="language-sh" data-language="sh"><code class="language-sh">resnum=`echo $result | grep -Eo "Corp.*?[0-9]+.*?！"|grep -Eo "[0-9]+"`if [[ $resnum -lt 300 ]];then  echo "start sms alarm:$resnum"fi</code></pre><h3 id="通过-sed"><a href="#通过-sed" class="headerlink" title="通过 sed"></a>通过 sed</h3><p>sed 使用 \1 反向引用前面匹配的组。</p><p>但是 sed 没有只显示匹配部分的功能，会显示整行，所以采用的思路是将整行替换为子串，比较麻烦。</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">echo</span> <span class="token string">"libgcc-4.8.5-4.h5.x86_64.rpm"</span> <span class="token operator">|</span> <span class="token function">sed</span> -r <span class="token string">"s/libgcc-([0-9]+\.[0-9]+.*)\.rpm/<span class="token entity" title="\1">\1</span>/g"</span><span class="token number">4.8</span>.5-4.h5.x86_64</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;通过-grep&quot;&gt;&lt;a href=&quot;#通过-grep&quot; class=&quot;headerlink&quot; title=&quot;通过 grep&quot;&gt;&lt;/a&gt;通过 grep&lt;/h3&gt;&lt;p&gt;grep 的 -o 选项，可以只打印匹配的部分，否则会打印整行。&lt;/p&gt;
&lt;pre class=&quot;l</summary>
      
    
    
    
    <category term="OS" scheme="https://jueee.github.io/categories/OS/"/>
    
    <category term="Shell" scheme="https://jueee.github.io/categories/OS/Shell/"/>
    
    
    <category term="Linux" scheme="https://jueee.github.io/tags/Linux/"/>
    
    <category term="Shell" scheme="https://jueee.github.io/tags/Shell/"/>
    
  </entry>
  
</feed>
