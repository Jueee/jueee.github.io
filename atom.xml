<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小决的专栏</title>
  
  <subtitle>进一寸有一寸的欢喜</subtitle>
  <link href="https://jueee.github.io/atom.xml" rel="self"/>
  
  <link href="https://jueee.github.io/"/>
  <updated>2021-03-15T09:47:41.902Z</updated>
  <id>https://jueee.github.io/</id>
  
  <author>
    <name>小决</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java 中 Integer 的 equals 和 == 的区别</title>
    <link href="https://jueee.github.io/2021/03/2021-03-15-Java%E4%B8%ADInteger%E7%9A%84equals%E5%92%8C==%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://jueee.github.io/2021/03/2021-03-15-Java%E4%B8%ADInteger%E7%9A%84equals%E5%92%8C==%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2021-03-15T00:00:00.000Z</published>
    <updated>2021-03-15T09:47:41.902Z</updated>
    
    <content type="html"><![CDATA[<p>近期在 <code>Map&lt;String,Integer&gt;</code> 进行计数比较时，发现 Integer 比较有问题，让我们进行下探究。</p><p>如：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Integer</span> a <span class="token operator">=</span> <span class="token number">281</span><span class="token punctuation">;</span><span class="token class-name">Integer</span> b <span class="token operator">=</span> <span class="token number">281</span><span class="token punctuation">;</span><span class="token function">assertFalse</span><span class="token punctuation">(</span>a<span class="token operator">==</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><a id="more"></a><h3 id="equals-比较"><a href="#equals-比较" class="headerlink" title="equals 比较"></a>equals 比较</h3><p>equals (Object obj) 方法，在 equals (Object obj) 方法中，会先判断参数中的对象 obj 是否是 Integer 同类型的对象，如果是则判断值是否相同，值相同则返回 true，值不同则返回 false，如果 obj 不是 Integer 类的对象，则返回 false。</p><p>需要注意的是：当参数是基本类型 int 时，编译器会给 int 自动装箱成 Integer 类，然后再进行比较。</p><ol><li>基本类型 (值类型) 之间无法使用 equals 比较。</li><li>equals 参数为值类型，则参数会进行自动装箱为包装类型进行比较。</li><li>equals 参数为包装类型，则先比较是否为同类型，非同类型直接返回 false，同类型再比较值。</li></ol><p>示例：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//为 false，equals参数默认为int类型，装箱为Integer类型，不同类型直接返回false</span><span class="token function">assertFalse</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Long</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//为 true，equals参数默认为int类型，装箱为Integer类型，相同类型再比较值返回true</span><span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//为 false，equals参数为byte类型，装箱为Byte类型，不同类型直接返回false</span><span class="token function">assertFalse</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//为 true，equals参数为long类型，装箱为Long类型，相同类型再比较值返回true</span><span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Long</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token number">0L</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><h3 id="比较"><a href="#比较" class="headerlink" title="==比较"></a>== 比较</h3><ol><li>基本类型之间互相比较：以值进行比较</li><li>一边是基本类型，一边是包装类型<ol><li>同类型的进行比较，如 Integer 与 int，Long 与 long 进行 == 比较时，会自动拆箱比较值</li><li>不同类型之间进行比较，则会自动拆箱，且会进行自动向上转型再比较值（低级向高级是隐式类型转换如：byte&lt;short&lt;int&lt;long&lt;float&lt;double，高级向低级必须强制类型转换）</li></ol></li><li>两边都是包装类型则直接比较引用地址，但是要注意 IntegerCache 除外。</li></ol><h3 id="IntegerCache-缓存"><a href="#IntegerCache-缓存" class="headerlink" title="IntegerCache 缓存"></a>IntegerCache 缓存</h3><p>JAVA 的 Integer 有 IntegerCache 会缓存 - 128~127 之间的对象。</p><p>Integer 类的源码中的 IntegerCache 子类如下：</p><p><img src="/images/2021/03/image-20210315174612801.png" alt="image-20210315174612801" loading="lazy"></p><p>如：Integer x = 100，会调用 Integer 的 valueOf () 方法，这个方法就是返回一个 Integer 对象，但是在返回前，作了一个判断，判断要赋给对象的值是否在 [-128,127] 区间中，且 IntegerCache（是 Integer 类的内部类，里面有一个 Integer 对象数组，用于存放已经存在的且范围在 [-128,127] 中的对象）中是否存在此对象，如果存在，则直接返回引用，否则，创建一个新对象返回。</p><p>Integer 类的 valueOf () 方法的源码如下：</p><p><img src="/images/2021/03/image-20210315174709788.png" alt="image-20210315174709788" loading="lazy"></p><p>当 Integer 在 [-128,127] 范围时：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Integer</span> a <span class="token operator">=</span> <span class="token number">81</span><span class="token punctuation">;</span><span class="token class-name">Integer</span> b <span class="token operator">=</span> <span class="token number">81</span><span class="token punctuation">;</span><span class="token function">assertTrue</span><span class="token punctuation">(</span>a<span class="token operator">==</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true 因为59位于缓存区间直接从缓存中获取</span></code></pre><p>当 Integer 不在 [-128,127] 范围时：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Integer</span> a <span class="token operator">=</span> <span class="token number">281</span><span class="token punctuation">;</span><span class="token class-name">Integer</span> b <span class="token operator">=</span> <span class="token number">281</span><span class="token punctuation">;</span><span class="token function">assertFalse</span><span class="token punctuation">(</span>a<span class="token operator">==</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false 因为281超出缓存区间从新创建对象</span><span class="token function">assertTrue</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span>b<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true 需要 intValue() 转换为 int 进行==比较</span></code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;近期在 &lt;code&gt;Map&amp;lt;String,Integer&amp;gt;&lt;/code&gt; 进行计数比较时，发现 Integer 比较有问题，让我们进行下探究。&lt;/p&gt;
&lt;p&gt;如：&lt;/p&gt;
&lt;pre class=&quot;language-java&quot; data-language=&quot;java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;Integer&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;281&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token class-name&quot;&gt;Integer&lt;/span&gt; b &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;281&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;assertFalse&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="Java" scheme="https://jueee.github.io/categories/Java/"/>
    
    <category term="JavaClass" scheme="https://jueee.github.io/categories/Java/JavaClass/"/>
    
    
    <category term="JavaClass" scheme="https://jueee.github.io/tags/JavaClass/"/>
    
    <category term="Java" scheme="https://jueee.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Docker 启动 Redis 并添加密码</title>
    <link href="https://jueee.github.io/2021/03/2021-03-14-Docker%E5%90%AF%E5%8A%A8Redis%E5%B9%B6%E6%B7%BB%E5%8A%A0%E5%AF%86%E7%A0%81/"/>
    <id>https://jueee.github.io/2021/03/2021-03-14-Docker%E5%90%AF%E5%8A%A8Redis%E5%B9%B6%E6%B7%BB%E5%8A%A0%E5%AF%86%E7%A0%81/</id>
    <published>2021-03-14T00:00:00.000Z</published>
    <updated>2021-03-15T09:47:41.899Z</updated>
    
    <content type="html"><![CDATA[<p>可以使用密码启动 Redis 服务器。使用的命令是：</p><pre class="language-bash" data-language="bash"><code class="language-bash">redis-server --requirepass mypassword</code></pre><p>本文介绍在容器中对 Redis 添加密码的方法。</p><a id="more"></a><h3 id="Docker-设置密码"><a href="#Docker-设置密码" class="headerlink" title="Docker 设置密码"></a>Docker 设置密码</h3><pre class="language-bash" data-language="bash"><code class="language-bash">docker run --name myredis -p <span class="token number">6379</span>:6379 -d redis --requirepass <span class="token string">"mypassword"</span></code></pre><h3 id="docker-compose-设置密码"><a href="#docker-compose-设置密码" class="headerlink" title="docker-compose 设置密码"></a>docker-compose 设置密码</h3><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">redis</span><span class="token punctuation">:</span>    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> <span class="token string">'myredis'</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> <span class="token string">'redis'</span>    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> 6379<span class="token punctuation">:</span><span class="token number">6379</span>    <span class="token key atrule">command</span><span class="token punctuation">:</span> redis<span class="token punctuation">-</span>server <span class="token punctuation">-</span><span class="token punctuation">-</span>requirepass mypassword</code></pre><h3 id="Kubernets-设置密码"><a href="#Kubernets-设置密码" class="headerlink" title="Kubernets 设置密码"></a>Kubernets 设置密码</h3><p>创建 redis 配置 configmaps：</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> ConfigMap<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> redis<span class="token punctuation">-</span>conf<span class="token key atrule">data</span><span class="token punctuation">:</span>  <span class="token key atrule">redis.conf</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">        bind 0.0.0.0        port 6379        requirepass mypassword</span></code></pre><p>创建 StatefulSet 时启动参数配置：</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spec</span><span class="token punctuation">:</span><span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> redis<span class="token punctuation">-</span>server<span class="token key atrule">image</span><span class="token punctuation">:</span> redis<span class="token punctuation">:</span>latest<span class="token key atrule">imagePullPolicy</span><span class="token punctuation">:</span> Always<span class="token key atrule">command</span><span class="token punctuation">:</span><span class="token punctuation">-</span> redis<span class="token punctuation">-</span>server<span class="token key atrule">args</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>requirepass<span class="token punctuation">-</span> mypassword</code></pre><h3 id="密码访问-Redis"><a href="#密码访问-Redis" class="headerlink" title="密码访问 Redis"></a>密码访问 Redis</h3><pre class="language-none"><code class="language-none">$ redis-cli127.0.0.1:6379&gt; RANDOMKEY(error) NOAUTH Authentication required.127.0.0.1:6379&gt; auth mypasswordOK127.0.0.1:6379&gt; RANDOMKEY(nil)</code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;可以使用密码启动 Redis 服务器。使用的命令是：&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;redis-server --requirepass mypassword&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;本文介绍在容器中对 Redis 添加密码的方法。&lt;/p&gt;</summary>
    
    
    
    <category term="Database" scheme="https://jueee.github.io/categories/Database/"/>
    
    <category term="Container" scheme="https://jueee.github.io/categories/Container/"/>
    
    <category term="Docker" scheme="https://jueee.github.io/categories/Container/Docker/"/>
    
    <category term="Redis" scheme="https://jueee.github.io/categories/Database/Redis/"/>
    
    
    <category term="Docker" scheme="https://jueee.github.io/tags/Docker/"/>
    
    <category term="Redis" scheme="https://jueee.github.io/tags/Redis/"/>
    
    <category term="Container" scheme="https://jueee.github.io/tags/Container/"/>
    
    <category term="Kubernets" scheme="https://jueee.github.io/tags/Kubernets/"/>
    
  </entry>
  
  <entry>
    <title>Windows 下安装 Redis 并设置自启动</title>
    <link href="https://jueee.github.io/2021/03/2021-03-09-Windows%E4%B8%8B%E5%AE%89%E8%A3%85Redis%E5%B9%B6%E8%AE%BE%E7%BD%AE%E8%87%AA%E5%90%AF%E5%8A%A8/"/>
    <id>https://jueee.github.io/2021/03/2021-03-09-Windows%E4%B8%8B%E5%AE%89%E8%A3%85Redis%E5%B9%B6%E8%AE%BE%E7%BD%AE%E8%87%AA%E5%90%AF%E5%8A%A8/</id>
    <published>2021-03-10T00:00:00.000Z</published>
    <updated>2021-03-11T10:39:46.830Z</updated>
    
    <content type="html"><![CDATA[<h3 id="下载Windows版本的Redis"><a href="#下载Windows版本的Redis" class="headerlink" title="下载Windows版本的Redis"></a>下载 Windows 版本的 Redis</h3><p>原来在官网上可以下载的 windows 版本的，现在官网以及没有下载地址，只能在 github 上下载，官网只提供 linux 版本的下载。</p><p>官网下载地址：<span class="exturl" data-url="aHR0cDovL3JlZGlzLmlvL2Rvd25sb2Fk">http://redis.io/download<i class="fa fa-external-link-alt"></i></span></p><p>github 下载地址：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL01TT3BlblRlY2gvcmVkaXMvdGFncw==">https://github.com/MSOpenTech/redis/tags<i class="fa fa-external-link-alt"></i></span></p><a id="more"></a><h3 id="安装Redis"><a href="#安装Redis" class="headerlink" title="安装Redis"></a>安装 Redis</h3><p>下载后，解压 Redis 即可。</p><p>启动命令 <code>redis-server redis.windows.conf</code>，出现下图显示表示启动成功了。</p><p><img src="/images/2021/03/image-20210310163025307.png" alt="image-20210310163025307" loading="lazy"></p><h3 id="设置Redis服务"><a href="#设置Redis服务" class="headerlink" title="设置Redis服务"></a>设置 Redis 服务</h3><p>上面虽然启动了 Redis，但是只要一关闭 cmd 窗口，Redis 就会消失。所以要把 Redis 设置成 windows 下的服务。</p><p>设置服务命令如下：</p><pre class="language-none"><code class="language-none">redis-server --service-install redis.windows.conf --loglevel verbose</code></pre><p><img src="/images/2021/03/image-20210310163529899.png" alt="image-20210310163529899" loading="lazy"></p><p>输入命令之后没有报错，表示成功了，刷新服务，会看到多了一个 redis 服务。</p><p><img src="/images/2021/03/image-20210310164140439.png" alt="image-20210310164140439" loading="lazy"></p><h3 id="常用的Redis服务命令"><a href="#常用的Redis服务命令" class="headerlink" title="常用的Redis服务命令"></a>常用的 Redis 服务命令</h3><p>卸载服务：redis-server --service-uninstall</p><p>开启服务：redis-server --service-start</p><p>停止服务：redis-server --service-stop</p><h3 id="启动失败异常处理"><a href="#启动失败异常处理" class="headerlink" title="启动失败异常处理"></a>启动失败异常处理</h3><h4 id="配置日志路径"><a href="#配置日志路径" class="headerlink" title="配置日志路径"></a>配置日志路径</h4><p>修改 <code>redis.windows.conf</code> 文件：</p><pre class="language-conf" data-language="conf"><code class="language-conf"># Specify the log file name. Also 'stdout' can be used to force# Redis to log on the standard output. logfile "logs/redis.log"</code></pre><p>并手动创建 logs 日志目录。</p><p>从而可以查看失败日志。</p><h4 id="bind-No-error"><a href="#bind-No-error" class="headerlink" title="bind: No error"></a>bind: No error</h4><p>启动报错：</p><pre class="language-none"><code class="language-none">Creating Server TCP listening socket 127.0.0.1:6379: bind: No error</code></pre><p>可以尝试更换端口，再次进行启动。</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;下载Windows版本的Redis&quot;&gt;&lt;a href=&quot;#下载Windows版本的Redis&quot; class=&quot;headerlink&quot; title=&quot;下载Windows版本的Redis&quot;&gt;&lt;/a&gt;下载 Windows 版本的 Redis&lt;/h3&gt;&lt;p&gt;原来在官网上可以下载的 windows 版本的，现在官网以及没有下载地址，只能在 github 上下载，官网只提供 linux 版本的下载。&lt;/p&gt;
&lt;p&gt;官网下载地址：&lt;a href=&quot;http://redis.io/download&quot;&gt;http://redis.io/download&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;github 下载地址：&lt;a href=&quot;https://github.com/MSOpenTech/redis/tags&quot;&gt;https://github.com/MSOpenTech/redis/tags&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Database" scheme="https://jueee.github.io/categories/Database/"/>
    
    <category term="Redis" scheme="https://jueee.github.io/categories/Database/Redis/"/>
    
    
    <category term="Windows" scheme="https://jueee.github.io/tags/Windows/"/>
    
    <category term="Database" scheme="https://jueee.github.io/tags/Database/"/>
    
    <category term="Redis" scheme="https://jueee.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Windows 系统下的 MySQL 版本升级</title>
    <link href="https://jueee.github.io/2021/03/2021-03-10-Windows%E7%B3%BB%E7%BB%9F%E4%B8%8B%E7%9A%84MySQL%E7%89%88%E6%9C%AC%E5%8D%87%E7%BA%A7/"/>
    <id>https://jueee.github.io/2021/03/2021-03-10-Windows%E7%B3%BB%E7%BB%9F%E4%B8%8B%E7%9A%84MySQL%E7%89%88%E6%9C%AC%E5%8D%87%E7%BA%A7/</id>
    <published>2021-03-10T00:00:00.000Z</published>
    <updated>2021-03-11T10:39:46.832Z</updated>
    
    <content type="html"><![CDATA[<p>最近因原先的 MySQL 版本过低，所以希望将 Windows 下的 MySQL5.5 升级为 MySQL5.7。记录一下升级过程。</p><a id="more"></a><h3 id="下载MySQL"><a href="#下载MySQL" class="headerlink" title="下载MySQL"></a>下载 MySQL</h3><ul><li>MySQL 下载地址：<span class="exturl" data-url="aHR0cHM6Ly9kZXYubXlzcWwuY29tL2Rvd25sb2Fkcy9teXNxbC8=">https://dev.mysql.com/downloads/mysql/<i class="fa fa-external-link-alt"></i></span></li><li>MySQL 5.7.33.0：<span class="exturl" data-url="aHR0cHM6Ly9kZXYubXlzcWwuY29tL2Rvd25sb2Fkcy9maWxlLz9pZD01MDA2MTY=">https://dev.mysql.com/downloads/file/?id=500616<i class="fa fa-external-link-alt"></i></span></li></ul><h3 id="移除旧版本-MySQL"><a href="#移除旧版本-MySQL" class="headerlink" title="移除旧版本 MySQL"></a>移除旧版本 MySQL</h3><p>管理员身份运行，先停止 MySQL 服务，然后移除 MySQL。</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">C:\WINDOWS\system32&gt;cd C:\Program Files <span class="token punctuation">(</span>x86<span class="token punctuation">)</span>\MySQL\MySQL Server 5<span class="token punctuation">.</span>5\binC:\Program Files <span class="token punctuation">(</span>x86<span class="token punctuation">)</span>\MySQL\MySQL Server 5<span class="token punctuation">.</span>5\bin&gt;mysqld <span class="token operator">--</span>remove MySQLFailed to remove the service because the service is runningStop the service and <span class="token keyword">try</span> againC:\Program Files <span class="token punctuation">(</span>x86<span class="token punctuation">)</span>\MySQL\MySQL Server 5<span class="token punctuation">.</span>5\bin&gt;net stop MySQLMySQL 服务正在停止<span class="token punctuation">.</span>MySQL 服务已成功停止。C:\Program Files <span class="token punctuation">(</span>x86<span class="token punctuation">)</span>\MySQL\MySQL Server 5<span class="token punctuation">.</span>5\bin&gt;mysqld <span class="token operator">--</span>remove MySQLService successfully removed<span class="token punctuation">.</span></code></pre><p>如果报错 <code>The service doesn't exist!</code>，则需要在任务管理器 -&gt; 服务中，查找一下具体的 MySQL 服务名</p><h3 id="备份数据"><a href="#备份数据" class="headerlink" title="备份数据"></a>备份数据</h3><ol><li>将旧版本的 data 文件和 my.ini 文件复制至 5.7 路径下。</li><li>重命名旧版本安装目录，避免混淆。</li><li>查看并修改 my.ini 文件中的路径配置。</li></ol><p>my.ini 配置后如下：</p><pre class="language-ini" data-language="ini"><code class="language-ini"><span class="token comment">#Path to installation directory. All paths are usually resolved relative to this.</span><span class="token constant">basedir</span><span class="token attr-value"><span class="token punctuation">=</span>"C:/Program Files (x86)/MySQL/mysql-5.7.33-win32/"</span><span class="token comment">#Path to the database root</span><span class="token constant">datadir</span><span class="token attr-value"><span class="token punctuation">=</span>"C:/ProgramData/MySQL/mysql-5.7.33-win32/Data/"</span></code></pre><h3 id="添加新MySQL"><a href="#添加新MySQL" class="headerlink" title="添加新MySQL"></a>添加新 MySQL</h3><pre class="language-bash" data-language="bash"><code class="language-bash">mysqld.exe --install MySQL</code></pre><p>启动 MySQL：</p><pre class="language-bash" data-language="bash"><code class="language-bash">net start MySQL</code></pre><p><img src="/images/2021/03/image-20210310150046355.png" alt="image-20210310150046355" loading="lazy"></p><h3 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h3><pre class="language-bash" data-language="bash"><code class="language-bash">mysqld --console</code></pre><p>打印如下：</p><pre class="language-none"><code class="language-none">[ERROR] unknown variable 'table_cache=256'[ERROR] Aborting</code></pre><p>去除 my.ini 文件中的 table_cache 属性配置。</p><pre class="language-none"><code class="language-none">[ERROR] unknown variable 'innodb_additional_mem_pool_size=2M'[ERROR] Aborting</code></pre><p>去除 my.ini 文件中的 innodb_additional_mem_pool_size 属性配置。</p><h3 id="升级-MySQL"><a href="#升级-MySQL" class="headerlink" title="升级 MySQL"></a>升级 MySQL</h3><pre class="language-bash" data-language="bash"><code class="language-bash">mysql_upgrade -uroot -p</code></pre><p><img src="/images/2021/03/image-20210310145814403.png" alt="image-20210310145814403" loading="lazy"></p><p>重新启动 MySQL 服务：</p><p><img src="/images/2021/03/image-20210310145649486.png" alt="image-20210310145649486" loading="lazy"></p><p>至此，MySQL 升级就算完成了。</p><p>验证 MySQL 新版本：</p><p><img src="/images/2021/03/image-20210310151140637.png" alt="image-20210310151140637" loading="lazy"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近因原先的 MySQL 版本过低，所以希望将 Windows 下的 MySQL5.5 升级为 MySQL5.7。记录一下升级过程。&lt;/p&gt;</summary>
    
    
    
    <category term="Database" scheme="https://jueee.github.io/categories/Database/"/>
    
    <category term="MySQL" scheme="https://jueee.github.io/categories/Database/MySQL/"/>
    
    
    <category term="MySQL" scheme="https://jueee.github.io/tags/MySQL/"/>
    
    <category term="Windows" scheme="https://jueee.github.io/tags/Windows/"/>
    
    <category term="Database" scheme="https://jueee.github.io/tags/Database/"/>
    
  </entry>
  
  <entry>
    <title>Java 中 List 集合分批处理的方式汇总</title>
    <link href="https://jueee.github.io/2021/03/2021-03-06-Java%E4%B8%ADList%E9%9B%86%E5%90%88%E5%88%86%E6%89%B9%E5%A4%84%E7%90%86%E7%9A%84%E6%96%B9%E5%BC%8F%E6%B1%87%E6%80%BB/"/>
    <id>https://jueee.github.io/2021/03/2021-03-06-Java%E4%B8%ADList%E9%9B%86%E5%90%88%E5%88%86%E6%89%B9%E5%A4%84%E7%90%86%E7%9A%84%E6%96%B9%E5%BC%8F%E6%B1%87%E6%80%BB/</id>
    <published>2021-03-06T00:00:00.000Z</published>
    <updated>2021-03-11T10:39:46.828Z</updated>
    
    <content type="html"><![CDATA[<p>在项目中存在 List 集合数据量过大，需要对这个 List 集合进行分批处理，以下总结几种方式。</p><a id="more"></a><h3 id="测试准备"><a href="#测试准备" class="headerlink" title="测试准备"></a>测试准备</h3><h4 id="模拟生成List"><a href="#模拟生成List" class="headerlink" title="模拟生成List"></a>模拟生成 List</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token function">initList</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> list<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="模拟处理List"><a href="#模拟处理List" class="headerlink" title="模拟处理List"></a>模拟处理 List</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="批次最大数量"><a href="#批次最大数量" class="headerlink" title="批次最大数量"></a>批次最大数量</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> BATCH_NUM <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span></code></pre><h3 id="List的subList分批一"><a href="#List的subList分批一" class="headerlink" title="List的subList分批一"></a>List 的 subList 分批一</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> dataList <span class="token operator">=</span> <span class="token function">initList</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> newList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> dataList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 分批次处理</span>    newList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>dataList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>BATCH_NUM <span class="token operator">==</span> newList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> i <span class="token operator">==</span> dataList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">print</span><span class="token punctuation">(</span>newList<span class="token punctuation">)</span><span class="token punctuation">;</span>        newList<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="List的subList分批二"><a href="#List的subList分批二" class="headerlink" title="List的subList分批二"></a>List 的 subList 分批二</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> dataList <span class="token operator">=</span> <span class="token function">initList</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Integer</span> size <span class="token operator">=</span> dataList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>BATCH_NUM <span class="token operator">&lt;</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//判断是否有必要分批</span>    <span class="token keyword">int</span> part <span class="token operator">=</span> size <span class="token operator">/</span> BATCH_NUM<span class="token punctuation">;</span><span class="token comment">//分批数</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> part<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> listPage <span class="token operator">=</span> dataList<span class="token punctuation">.</span><span class="token function">subList</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> BATCH_NUM<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">print</span><span class="token punctuation">(</span>listPage<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 处理List</span>        dataList<span class="token punctuation">.</span><span class="token function">subList</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> BATCH_NUM<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//剔除已处理</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dataList<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">print</span><span class="token punctuation">(</span>dataList<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//表示最后剩下的数据</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span>dataList<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="Stream-流遍历操作"><a href="#Stream-流遍历操作" class="headerlink" title="Stream 流遍历操作"></a>Stream 流遍历操作</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> dataList <span class="token operator">=</span> <span class="token function">initList</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> limit <span class="token operator">=</span> <span class="token punctuation">(</span>dataList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> BATCH_NUM <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> BATCH_NUM<span class="token punctuation">;</span> <span class="token comment">// 计算切分次数</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> splitList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">iterate</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">-&gt;</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span>limit<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>i <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>    splitList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>dataList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span>i <span class="token operator">*</span> BATCH_NUM<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span>BATCH_NUM<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> splitList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span>splitList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="Stream-获取分割后的集合"><a href="#Stream-获取分割后的集合" class="headerlink" title="Stream 获取分割后的集合"></a>Stream 获取分割后的集合</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> dataList <span class="token operator">=</span> <span class="token function">initList</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> limit <span class="token operator">=</span> <span class="token punctuation">(</span>dataList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> BATCH_NUM <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> BATCH_NUM<span class="token punctuation">;</span> <span class="token comment">// 计算切分次数</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> splitList <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">iterate</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">-&gt;</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span>limit<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>a <span class="token operator">-&gt;</span> dataList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span>a <span class="token operator">*</span> BATCH_NUM<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span>BATCH_NUM<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> splitList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span>splitList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="Google-工具类-Guava"><a href="#Google-工具类-Guava" class="headerlink" title="Google 工具类 Guava"></a>Google 工具类 Guava</h3><p>引入依赖：</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.google.guava<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>guava<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>30.0-jre<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></code></pre><p>使用 google guava 对 List 进行分割：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> dataList <span class="token operator">=</span> <span class="token function">initList</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> parts <span class="token operator">=</span> <span class="token class-name">Lists</span><span class="token punctuation">.</span><span class="token function">partition</span><span class="token punctuation">(</span>dataList<span class="token punctuation">,</span> BATCH_NUM<span class="token punctuation">)</span><span class="token punctuation">;</span>parts<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>list <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="Apache-工具类-collections"><a href="#Apache-工具类-collections" class="headerlink" title="Apache 工具类 collections"></a>Apache 工具类 collections</h3><p>引入依赖：</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>commons-collections4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></code></pre><p>使用 apache common collection 对 List 进行分割：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> dataList <span class="token operator">=</span> <span class="token function">initList</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> parts <span class="token operator">=</span> <span class="token class-name">ListUtils</span><span class="token punctuation">.</span><span class="token function">partition</span><span class="token punctuation">(</span>dataList<span class="token punctuation">,</span> BATCH_NUM<span class="token punctuation">)</span><span class="token punctuation">;</span>parts<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>list <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;在项目中存在 List 集合数据量过大，需要对这个 List 集合进行分批处理，以下总结几种方式。&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://jueee.github.io/categories/Java/"/>
    
    <category term="JavaClass" scheme="https://jueee.github.io/categories/Java/JavaClass/"/>
    
    
    <category term="JavaClass" scheme="https://jueee.github.io/tags/JavaClass/"/>
    
    <category term="Java" scheme="https://jueee.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java 按照树形结构打印二叉树</title>
    <link href="https://jueee.github.io/2021/03/2021-03-05-Java%E6%8C%89%E7%85%A7%E6%A0%91%E5%BD%A2%E7%BB%93%E6%9E%84%E6%89%93%E5%8D%B0%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>https://jueee.github.io/2021/03/2021-03-05-Java%E6%8C%89%E7%85%A7%E6%A0%91%E5%BD%A2%E7%BB%93%E6%9E%84%E6%89%93%E5%8D%B0%E4%BA%8C%E5%8F%89%E6%A0%91/</id>
    <published>2021-03-05T00:00:00.000Z</published>
    <updated>2021-03-11T10:39:46.825Z</updated>
    
    <content type="html"><![CDATA[<p>在我们完成一棵树的构建之后，如果我们想要看这棵树的结构，不像数组或者 List 等数据结构，我们可以非常方便地用各种方式将其中的所有元素打印出来，对于树而言，这个过程要麻烦得多，我们可以用各种遍历方式得到这棵树的结构，但是终究还是不够直观。</p><p>如果我们可以按照树的结构，将其打印出来就好了，那么本文就是一种实现这个目标的思路以供参考。</p><a id="more"></a><h3 id="树的结构"><a href="#树的结构" class="headerlink" title="树的结构"></a>树的结构</h3><p>本文中所用的树的结构是 LeetCode 上所用的树的结构，其定义如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TreeNode</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> val<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">TreeNode</span> left<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">TreeNode</span> right<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span> val <span class="token operator">=</span> x<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="打印树思路"><a href="#打印树思路" class="headerlink" title="打印树思路"></a>打印树思路</h3><p>总体思路是，用一个二维的字符串数组来储存每个位置应该打印什么样的输出。</p><p>首先，先确定树的形状。为了美观，我设定在最后一行的每个数字之间的间隔为 3 个空格，而在之上的每一层的间隔，有兴趣的同学可以自己推算一下，总之，越往上，间隔是越大的，而且是一个简单的线性增加的关系。</p><p>为了绘制出这样的形状，首先，我们需要获得树的层数（用一个简单的递归即可得到），根据树的层数，确定我们的二维数组的大小，即高度和宽度。之后，用先序遍历的方式，遍历树的每个节点，并进行相对应的写入操作。</p><h3 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TreeNodeShow</span> <span class="token punctuation">{</span>    <span class="token comment">// 用于获得树的层数</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getTreeDepth</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> root <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">getTreeDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getTreeDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">writeArray</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> currNode<span class="token punctuation">,</span> <span class="token keyword">int</span> rowIndex<span class="token punctuation">,</span> <span class="token keyword">int</span> columnIndex<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res<span class="token punctuation">,</span> <span class="token keyword">int</span> treeDepth<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 保证输入的树不为空</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>currNode <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token comment">// 先将当前节点保存到二维数组中</span>        res<span class="token punctuation">[</span>rowIndex<span class="token punctuation">]</span><span class="token punctuation">[</span>columnIndex<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>currNode<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 计算当前位于树的第几层</span>        <span class="token keyword">int</span> currLevel <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>rowIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 若到了最后一层，则返回</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>currLevel <span class="token operator">==</span> treeDepth<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token comment">// 计算当前行到下一行，每个元素之间的间隔（下一行的列索引与当前元素的列索引之间的间隔）</span>        <span class="token keyword">int</span> gap <span class="token operator">=</span> treeDepth <span class="token operator">-</span> currLevel <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment">// 对左儿子进行判断，若有左儿子，则记录相应的"/"与左儿子的值</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>currNode<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            res<span class="token punctuation">[</span>rowIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>columnIndex <span class="token operator">-</span> gap<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"/"</span><span class="token punctuation">;</span>            <span class="token function">writeArray</span><span class="token punctuation">(</span>currNode<span class="token punctuation">.</span>left<span class="token punctuation">,</span> rowIndex <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> columnIndex <span class="token operator">-</span> gap <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span> res<span class="token punctuation">,</span> treeDepth<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 对右儿子进行判断，若有右儿子，则记录相应的"\"与右儿子的值</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>currNode<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            res<span class="token punctuation">[</span>rowIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>columnIndex <span class="token operator">+</span> gap<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"\\"</span><span class="token punctuation">;</span>            <span class="token function">writeArray</span><span class="token punctuation">(</span>currNode<span class="token punctuation">.</span>right<span class="token punctuation">,</span> rowIndex <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> columnIndex <span class="token operator">+</span> gap <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span> res<span class="token punctuation">,</span> treeDepth<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"EMPTY!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 得到树的深度</span>        <span class="token keyword">int</span> treeDepth <span class="token operator">=</span> <span class="token function">getTreeDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 最后一行的宽度为2的（n - 1）次方乘3，再加1</span>        <span class="token comment">// 作为整个二维数组的宽度</span>        <span class="token keyword">int</span> arrayHeight <span class="token operator">=</span> treeDepth <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> arrayWidth <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>treeDepth <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment">// 用一个字符串数组来存储每个位置应显示的元素</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span>arrayHeight<span class="token punctuation">]</span><span class="token punctuation">[</span>arrayWidth<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">// 对数组进行初始化，默认为一个空格</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arrayHeight<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arrayWidth<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">" "</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment">// 从根节点开始，递归处理整个树</span>        <span class="token comment">// res[0][(arrayWidth + 1)/ 2] = (char)(root.val + '0');</span>        <span class="token function">writeArray</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> arrayWidth <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> res<span class="token punctuation">,</span> treeDepth<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 此时，已经将所有需要显示的元素储存到了二维数组中，将其拼接并打印即可</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> line <span class="token operator">:</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> line<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>line<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>line<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;=</span> line<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    i <span class="token operator">+=</span> line<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">4</span> <span class="token operator">?</span> <span class="token number">2</span> <span class="token operator">:</span> line<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h3><h4 id="测试一"><a href="#测试一" class="headerlink" title="测试一"></a>测试一</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">TreeNode</span> q <span class="token operator">=</span> <span class="token class-name">TreeNodeUtil</span><span class="token punctuation">.</span><span class="token function">arrayToTreeNode</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">TreeNodeShow</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>打印结果：</p><pre><code>        2                       \                       4                  /   \              9       8                   /                   4    </code></pre><p>表示树：</p><p><img src="/images/2021/03/image-20210304160524113.png" alt="image-20210304160524113" loading="lazy"></p><h4 id="测试二"><a href="#测试二" class="headerlink" title="测试二"></a>测试二</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">TreeNode</span> q <span class="token operator">=</span> <span class="token class-name">TreeNodeUtil</span><span class="token punctuation">.</span><span class="token function">arrayToTreeNode</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">TreeNodeShow</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>打印结果：</p><pre class="language-none"><code class="language-none">      3          /   \      1       4   /       / \ 3       1   5</code></pre><p>表示树：</p><p><img src="/images/2021/03/image-20210304155514565.png" alt="image-20210304155514565" loading="lazy"></p><h3 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a>特别说明</h3><p>由于本方法的思路是基于字符串的数组的，所以并不可能完美适配所有情况，比如当树的高度很高以后，可能看起来会很奇怪。</p><p>还有一个问题就是，虽然已经做了自适应处理，但是，如果出现超过 5 位的数字（比如 123123），其所在的行可能会有一点向右的偏移，若偏的不多，是不影响观察的，但若偏的多了就有点影响了。不过这里已经做了处理，所以出现三位或者四位数的时候是没有问题的。</p><p>不过，在日常的应用中，应该是完全够用的，希望这段代码能为大家带来便利。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在我们完成一棵树的构建之后，如果我们想要看这棵树的结构，不像数组或者 List 等数据结构，我们可以非常方便地用各种方式将其中的所有元素打印出来，对于树而言，这个过程要麻烦得多，我们可以用各种遍历方式得到这棵树的结构，但是终究还是不够直观。&lt;/p&gt;
&lt;p&gt;如果我们可以按照树的结构，将其打印出来就好了，那么本文就是一种实现这个目标的思路以供参考。&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://jueee.github.io/categories/Java/"/>
    
    <category term="JavaClass" scheme="https://jueee.github.io/categories/Java/JavaClass/"/>
    
    
    <category term="JavaClass" scheme="https://jueee.github.io/tags/JavaClass/"/>
    
    <category term="Java" scheme="https://jueee.github.io/tags/Java/"/>
    
    <category term="LeetCode" scheme="https://jueee.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Java 一维数组转换二叉树结构</title>
    <link href="https://jueee.github.io/2021/03/2021-03-04-Java%E4%B8%80%E7%BB%B4%E6%95%B0%E7%BB%84%E8%BD%AC%E6%8D%A2%E4%BA%8C%E5%8F%89%E6%A0%91%E7%BB%93%E6%9E%84/"/>
    <id>https://jueee.github.io/2021/03/2021-03-04-Java%E4%B8%80%E7%BB%B4%E6%95%B0%E7%BB%84%E8%BD%AC%E6%8D%A2%E4%BA%8C%E5%8F%89%E6%A0%91%E7%BB%93%E6%9E%84/</id>
    <published>2021-03-04T00:00:00.000Z</published>
    <updated>2021-03-04T09:44:55.129Z</updated>
    
    <content type="html"><![CDATA[<p>最近在 LeetCode 刷题，发现遇到不少二叉树类型的题目，题目会定义好树节点 TreeNode 的数据结构。</p><a id="more"></a><h3 id="TreeNode"><a href="#TreeNode" class="headerlink" title="TreeNode"></a>TreeNode</h3><p>TreeNode 的数据结构如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TreeNode</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> val<span class="token punctuation">;</span>    <span class="token class-name">TreeNode</span> left<span class="token punctuation">;</span>    <span class="token class-name">TreeNode</span> right<span class="token punctuation">;</span>    <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> val<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">,</span> <span class="token class-name">TreeNode</span> left<span class="token punctuation">,</span> <span class="token class-name">TreeNode</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> val<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">=</span> left<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">=</span> right<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在题目的示例中，二叉树的输入都是一个一维数组，表示这个二叉树结构。</p><p>例如：</p><pre class="language-none"><code class="language-none">输入：root = [3,1,4,3,null,1,5]</code></pre><p>表示的二叉树为：</p><p><img src="/images/2021/03/image-20210304155514565.png" alt="image-20210304155514565" loading="lazy"></p><p>因此在 IDE 里面编码调试时，需要一个转化方法方便自己编写并运行测试用例。</p><h3 id="转换二叉树"><a href="#转换二叉树" class="headerlink" title="转换二叉树"></a>转换二叉树</h3><p>一维数组转换二叉树结构：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TreeNodeUtil</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 一维数组转换二叉树结构     * @param array     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">TreeNode</span> <span class="token function">arrayToTreeNode</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>array<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">TreeNode</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">&gt;</span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> isLeft <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">TreeNode</span> node <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>isLeft<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    node<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                isLeft <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    node<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                isLeft <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>使用方式：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">TreeNodeUtil</span><span class="token punctuation">.</span><span class="token function">arrayToTreeNode</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h3><h4 id="表示二叉树"><a href="#表示二叉树" class="headerlink" title="表示二叉树"></a>表示二叉树</h4><p>以下二叉树：</p><p><img src="/images/2021/03/image-20210304160524113.png" alt="image-20210304160524113" loading="lazy"></p><p>可以表示为：</p><pre class="language-none"><code class="language-none">TreeNodeUtil.arrayToTreeNode(new Integer[]{2,null,4,9,8,null,null,4});</code></pre><h4 id="测试二叉树"><a href="#测试二叉树" class="headerlink" title="测试二叉树"></a>测试二叉树</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">TreeNode</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">TreeNode</span> q <span class="token operator">=</span> <span class="token class-name">TreeNodeUtil</span><span class="token punctuation">.</span><span class="token function">arrayToTreeNode</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">TreeNodeUtil</span><span class="token punctuation">.</span><span class="token function">isSameTree</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span>q<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>其中，<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0p1ZWVlL0xlZXRDb2RlQnlKYXZhL2Jsb2IvbWFpbi9zcmMvbWFpbi9qYXZhL2NvbS9qdWVlZS9lYXN5L251bTAxMDAvU2FtZVRyZWUuamF2YQ==">isSameTree<i class="fa fa-external-link-alt"></i></span> 方法如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isSameTree</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> p<span class="token punctuation">,</span> <span class="token class-name">TreeNode</span> q<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> q <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> p <span class="token operator">==</span> q<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> p<span class="token punctuation">.</span>val <span class="token operator">==</span> q<span class="token punctuation">.</span>val <span class="token operator">&amp;&amp;</span> <span class="token function">isSameTree</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>left<span class="token punctuation">,</span> q<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isSameTree</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>right<span class="token punctuation">,</span> q<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近在 LeetCode 刷题，发现遇到不少二叉树类型的题目，题目会定义好树节点 TreeNode 的数据结构。&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://jueee.github.io/categories/Java/"/>
    
    <category term="JavaClass" scheme="https://jueee.github.io/categories/Java/JavaClass/"/>
    
    
    <category term="JavaClass" scheme="https://jueee.github.io/tags/JavaClass/"/>
    
    <category term="Java" scheme="https://jueee.github.io/tags/Java/"/>
    
    <category term="LeetCode" scheme="https://jueee.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Java 一维数组转换链表结构</title>
    <link href="https://jueee.github.io/2021/03/2021-03-03-Java%E4%B8%80%E7%BB%B4%E6%95%B0%E7%BB%84%E8%BD%AC%E6%8D%A2%E9%93%BE%E8%A1%A8%E7%BB%93%E6%9E%84/"/>
    <id>https://jueee.github.io/2021/03/2021-03-03-Java%E4%B8%80%E7%BB%B4%E6%95%B0%E7%BB%84%E8%BD%AC%E6%8D%A2%E9%93%BE%E8%A1%A8%E7%BB%93%E6%9E%84/</id>
    <published>2021-03-03T00:00:00.000Z</published>
    <updated>2021-03-04T09:44:42.959Z</updated>
    
    <content type="html"><![CDATA[<p>最近在 Leetcode 刷题，发现遇到不少链表类型的题目，题目会定义好链表节点 ListNode 的数据结构。</p><a id="more"></a><h3 id="ListNode"><a href="#ListNode" class="headerlink" title="ListNode"></a>ListNode</h3><p>ListNode 的数据结构如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ListNode</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> val<span class="token punctuation">;</span>    <span class="token class-name">ListNode</span> next<span class="token punctuation">;</span>    <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> val<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">,</span> <span class="token class-name">ListNode</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> val<span class="token punctuation">;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在题目的示例中，二叉树的输入都是一个一维数组，表示这个二叉树结构。</p><p>例如：</p><pre class="language-none"><code class="language-none">输入：root = [1,2,4]</code></pre><p>表示的链表为：</p><p><img src="/images/2021/03/image-20210304163859386.png" alt="image-20210304163859386" loading="lazy"></p><p>因此在 IDE 里面编码调试时，需要一个转化方法方便自己编写并运行测试用例。</p><h3 id="转换链表"><a href="#转换链表" class="headerlink" title="转换链表"></a>转换链表</h3><p>一维数组转换链表结构：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TreeNodeUtil</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 一维数组转换链表结构     * @param array     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ListNode</span> <span class="token function">arrayToListNode</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">ListNode</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> other <span class="token operator">=</span> root<span class="token punctuation">;</span> <span class="token comment">//生成另一个节点，并让other指向root节点，other在此作为一个临时变量，相当于指针</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//由于已给root赋值，所以i从1开始</span>            <span class="token class-name">ListNode</span> temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//每循环一次生成一个新的节点,并给当前节点赋值</span>            other<span class="token punctuation">.</span>next <span class="token operator">=</span> temp<span class="token punctuation">;</span> <span class="token comment">//将other的下一个节点指向生成的新的节点</span>            other <span class="token operator">=</span> temp<span class="token punctuation">;</span> <span class="token comment">//将other指向最后一个节点(other的下一个节点)  other=other.getNext();</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>使用方式：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">ListNodeUtil</span><span class="token punctuation">.</span><span class="token function">arrayToListNode</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h3><h4 id="打印链表"><a href="#打印链表" class="headerlink" title="打印链表"></a>打印链表</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">ListNode</span> p <span class="token operator">=</span> <span class="token class-name">ListNodeUtil</span><span class="token punctuation">.</span><span class="token function">arrayToListNode</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ListNodeUtil</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>其中：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>node <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val <span class="token operator">+</span> <span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        node <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="比较链表"><a href="#比较链表" class="headerlink" title="比较链表"></a>比较链表</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">ListNode</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ListNode</span> q <span class="token operator">=</span> <span class="token class-name">ListNodeUtil</span><span class="token punctuation">.</span><span class="token function">arrayToListNode</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">ListNodeUtil</span><span class="token punctuation">.</span><span class="token function">isSameListNode</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span>q<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>其中：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isSameListNode</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> p<span class="token punctuation">,</span> <span class="token class-name">ListNode</span> q<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> q <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> p <span class="token operator">==</span> q<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> p<span class="token punctuation">.</span>val <span class="token operator">==</span> q<span class="token punctuation">.</span>val <span class="token operator">&amp;&amp;</span> <span class="token function">isSameListNode</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>next<span class="token punctuation">,</span> q<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近在 Leetcode 刷题，发现遇到不少链表类型的题目，题目会定义好链表节点 ListNode 的数据结构。&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://jueee.github.io/categories/Java/"/>
    
    <category term="JavaClass" scheme="https://jueee.github.io/categories/Java/JavaClass/"/>
    
    
    <category term="JavaClass" scheme="https://jueee.github.io/tags/JavaClass/"/>
    
    <category term="Java" scheme="https://jueee.github.io/tags/Java/"/>
    
    <category term="LeetCode" scheme="https://jueee.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>通过 AOP 注解实现自定义数据源切换</title>
    <link href="https://jueee.github.io/2021/03/2021-03-02-%E9%80%9A%E8%BF%87AOP%E6%B3%A8%E8%A7%A3%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%AE%9A%E4%B9%89%E6%95%B0%E6%8D%AE%E6%BA%90%E5%88%87%E6%8D%A2/"/>
    <id>https://jueee.github.io/2021/03/2021-03-02-%E9%80%9A%E8%BF%87AOP%E6%B3%A8%E8%A7%A3%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%AE%9A%E4%B9%89%E6%95%B0%E6%8D%AE%E6%BA%90%E5%88%87%E6%8D%A2/</id>
    <published>2021-03-02T00:00:00.000Z</published>
    <updated>2021-03-02T09:27:32.077Z</updated>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>近期在重构项目中，由于部分查询的数据库配置是根据不同的用户进行个性化配置的，所以在查询过程中，存在 MyBatis 多源数据库切换问题。  </p><p>原项目实现方式为，在 MyBatis 查询前，切换到个性化配置，查询完毕后，再切换回默认数据库配置。</p><p>现在希望通过注解标注形式，进行重构代码。</p><a id="more"></a><h3 id="原先实现方式"><a href="#原先实现方式" class="headerlink" title="原先实现方式"></a>原先实现方式</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Remark</span> <span class="token function">getRemarkById</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">,</span> <span class="token class-name">UserBase</span> userBase<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">SpecialDataSourceUtils</span><span class="token punctuation">.</span><span class="token function">setDBType</span><span class="token punctuation">(</span><span class="token class-name">DataSourceNameConstant</span><span class="token punctuation">.</span>USER_DB <span class="token operator">+</span> userBase<span class="token punctuation">.</span><span class="token function">getOrgId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 切换到个性化配置</span><span class="token class-name">Remark</span> remark <span class="token operator">=</span> remarkMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">DataSourceContextHolder</span><span class="token punctuation">.</span><span class="token function">setDBType</span><span class="token punctuation">(</span><span class="token class-name">DataSourceNameConstant</span><span class="token punctuation">.</span>DEFAULT_DB<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 切换回默认数据库配置</span><span class="token keyword">return</span> remark<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="AOP-方法注解"><a href="#AOP-方法注解" class="headerlink" title="AOP 方法注解"></a>AOP 方法注解</h3><h4 id="注解类"><a href="#注解类" class="headerlink" title="注解类"></a>注解类</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>METHOD<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">ChangeMySqlMethod</span> <span class="token punctuation">{</span>    <span class="token keyword">boolean</span> <span class="token function">isChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="Aspect-切面类"><a href="#Aspect-切面类" class="headerlink" title="Aspect 切面类"></a>Aspect 切面类</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Aspect</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChangeMySqlMethodAspect</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">DataBasesConfig</span> dataBasesConfig<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"@annotation(com.netease.mdas.databases.annotations.ChangeMySqlMethod)"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">changeMySQL</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"changeMySQL() &amp;&amp; @annotation(changeMySqlMethod)"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doBefore</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">,</span> <span class="token class-name">ChangeMySqlMethod</span> changeMySqlMethod<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"====doBefore方法进入了===="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>changeMySqlMethod<span class="token punctuation">.</span><span class="token function">isChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">SpecialDataSourceUtils</span><span class="token punctuation">.</span><span class="token function">setDBType</span><span class="token punctuation">(</span><span class="token class-name">DataSourceNameConstant</span><span class="token punctuation">.</span>USER_DB <span class="token operator">+</span> <span class="token class-name">ActiveInfo</span><span class="token punctuation">.</span><span class="token function">orgId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">MyBatisPlusConfig</span><span class="token punctuation">.</span><span class="token function">setSuffix</span><span class="token punctuation">(</span><span class="token class-name">ActiveInfo</span><span class="token punctuation">.</span><span class="token function">orgId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token class-name">DataSourceContextHolder</span><span class="token punctuation">.</span><span class="token function">setDBType</span><span class="token punctuation">(</span><span class="token class-name">DataSourceNameConstant</span><span class="token punctuation">.</span>DEFAULT_DB<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@After</span><span class="token punctuation">(</span><span class="token string">"changeMySQL()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doAfter</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"====doAfter方法进入了===="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">DataSourceContextHolder</span><span class="token punctuation">.</span><span class="token function">setDBType</span><span class="token punctuation">(</span><span class="token class-name">DataSourceNameConstant</span><span class="token punctuation">.</span>DEFAULT_DB<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="重构后实现方式"><a href="#重构后实现方式" class="headerlink" title="重构后实现方式"></a>重构后实现方式</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ChangeMySqlMethod</span> <span class="token comment">// 方法注解</span><span class="token keyword">public</span> <span class="token class-name">Remark</span> <span class="token function">getRemarkById</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> remarkMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="进一步思考"><a href="#进一步思考" class="headerlink" title="进一步思考"></a>进一步思考</h4><p>AOP 方法注解的实现方式，与原先实现方式相比，已经简洁了很多。</p><p>但是，如果 Service 的方法特别多，每个方法上面都加上注解的方式也会显得很繁琐。</p><p>同时，如果方法中有多个数据源同时查询的情况，还需要重新根据不同的数据源拆分方法，从而保证每个方法中只涉及一个数据源的查询。这样的重构方式并不友好。</p><p>那么，有没有办法在 RemarkMapper 类上面直接添加注解，来实现数据源动态切换呢？</p><p>由于 Mapper 类实现类是 MyBatis 动态代理生成，无法在实现类上直接添加 AOP 注解，而添加到接口上又无效，所以需要寻找替代方案。</p><h3 id="AOP-类注解"><a href="#AOP-类注解" class="headerlink" title="AOP 类注解"></a>AOP 类注解</h3><p>不采用 AspectJ 表达式方式定义切点和切面，使用 AnnotationMatchingPointcut 和 DefaultPointcutAdvisor 来定义。</p><h4 id="注解类-1"><a href="#注解类-1" class="headerlink" title="注解类"></a>注解类</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">ChangeMySqlType</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h4 id="Aspect-切面类-1"><a href="#Aspect-切面类-1" class="headerlink" title="Aspect 切面类"></a>Aspect 切面类</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Aspect</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChangeMySqlTypeAspect</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">DataBasesConfig</span> dataBasesConfig<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">Advisor</span> <span class="token function">dataSourceAdvisor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">Pointcut</span> pointcut <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationMatchingPointcut</span><span class="token punctuation">(</span><span class="token class-name">ChangeMySqlType</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Advice</span> advice <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MethodAroundAdvice</span><span class="token punctuation">(</span>dataBasesConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DefaultPointcutAdvisor</span><span class="token punctuation">(</span>pointcut<span class="token punctuation">,</span> advice<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="Advice-业务增强类"><a href="#Advice-业务增强类" class="headerlink" title="Advice 业务增强类"></a>Advice 业务增强类</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MethodAroundAdvice</span> <span class="token keyword">implements</span> <span class="token class-name">MethodBeforeAdvice</span><span class="token punctuation">,</span> <span class="token class-name">AfterReturningAdvice</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">DataBasesConfig</span> dataBasesConfig<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">MethodAroundAdvice</span><span class="token punctuation">(</span><span class="token class-name">DataBasesConfig</span> dataBasesConfig<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>dataBasesConfig <span class="token operator">=</span> dataBasesConfig<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">,</span> <span class="token class-name">Object</span> target<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"before {} called"</span><span class="token punctuation">,</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterReturning</span><span class="token punctuation">(</span><span class="token class-name">Object</span> returnValue<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">,</span> <span class="token class-name">Object</span> target<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"after {} called"</span><span class="token punctuation">,</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="重构后的实现方式"><a href="#重构后的实现方式" class="headerlink" title="重构后的实现方式"></a>重构后的实现方式</h4><p>Mapper：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ChangeMySqlType</span> <span class="token comment">// 类注解</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">RemarkMapper</span> <span class="token keyword">extends</span> <span class="token class-name">BaseMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Remark</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>方法：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Remark</span> <span class="token function">getRemarkById</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> remarkMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>至此，可以在 Mapper 类上面直接添加注解，来实现数据源动态切换。</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;近期在重构项目中，由于部分查询的数据库配置是根据不同的用户进行个性化配置的，所以在查询过程中，存在 MyBatis 多源数据库切换问题。  &lt;/p&gt;
&lt;p&gt;原项目实现方式为，在 MyBatis 查询前，切换到个性化配置，查询完毕后，再切换回默认数据库配置。&lt;/p&gt;
&lt;p&gt;现在希望通过注解标注形式，进行重构代码。&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://jueee.github.io/categories/Java/"/>
    
    <category term="Spring" scheme="https://jueee.github.io/categories/Java/Spring/"/>
    
    
    <category term="Java" scheme="https://jueee.github.io/tags/Java/"/>
    
    <category term="Spring" scheme="https://jueee.github.io/tags/Spring/"/>
    
    <category term="AOP" scheme="https://jueee.github.io/tags/AOP/"/>
    
  </entry>
  
  <entry>
    <title>JS 获取内网 IP 地址（兼容谷歌浏览器）</title>
    <link href="https://jueee.github.io/2021/03/2021-03-01-JS%E8%8E%B7%E5%8F%96%E5%86%85%E7%BD%91IP%E5%9C%B0%E5%9D%80%EF%BC%88%E5%85%BC%E5%AE%B9%E8%B0%B7%E6%AD%8C%E6%B5%8F%E8%A7%88%E5%99%A8%EF%BC%89/"/>
    <id>https://jueee.github.io/2021/03/2021-03-01-JS%E8%8E%B7%E5%8F%96%E5%86%85%E7%BD%91IP%E5%9C%B0%E5%9D%80%EF%BC%88%E5%85%BC%E5%AE%B9%E8%B0%B7%E6%AD%8C%E6%B5%8F%E8%A7%88%E5%99%A8%EF%BC%89/</id>
    <published>2021-03-01T00:00:00.000Z</published>
    <updated>2021-03-04T08:46:29.073Z</updated>
    
    <content type="html"><![CDATA[<h3 id="获取内网IP地址"><a href="#获取内网IP地址" class="headerlink" title="获取内网IP地址"></a>获取内网 IP 地址</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">getIpAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    window<span class="token punctuation">.</span>RTCPeerConnection <span class="token operator">=</span> window<span class="token punctuation">.</span>RTCPeerConnection <span class="token operator">||</span> window<span class="token punctuation">.</span>mozRTCPeerConnection <span class="token operator">||</span> window<span class="token punctuation">.</span>webkitRTCPeerConnection<span class="token punctuation">;</span>    <span class="token keyword">var</span> pc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RTCPeerConnection</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        iceServers<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function-variable function">noop</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    pc<span class="token punctuation">.</span><span class="token function">createDataChannel</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//create a bogus data channel </span>    pc<span class="token punctuation">.</span><span class="token function">createOffer</span><span class="token punctuation">(</span>pc<span class="token punctuation">.</span><span class="token function">setLocalDescription</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>pc<span class="token punctuation">)</span><span class="token punctuation">,</span> noop<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// create offer andsetlocaldescription</span>    pc<span class="token punctuation">.</span><span class="token function-variable function">onicecandidate</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">ice</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ice <span class="token operator">&amp;&amp;</span> ice<span class="token punctuation">.</span>candidate <span class="token operator">&amp;&amp;</span> ice<span class="token punctuation">.</span>candidate<span class="token punctuation">.</span>candidate<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> myIP <span class="token operator">=</span> <span class="token regex">/([0-9]{1,3}(\.[0-9]{1,3}){3}|[a-f0-9]{1,4}(:[a-f0-9]{1,4}){7})/</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>ice<span class="token punctuation">.</span>candidate<span class="token punctuation">.</span>candidate<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'my IP: '</span><span class="token punctuation">,</span> myIP<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//【注：Chrome浏览器下ice.candidate.address也可以拿到值，火狐浏览器不可以】</span>            pc<span class="token punctuation">.</span>onicecandidate <span class="token operator">=</span> noop<span class="token punctuation">;</span><span class="token keyword">return</span> myIP<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><a id="more"></a><h3 id="谷歌浏览器设置"><a href="#谷歌浏览器设置" class="headerlink" title="谷歌浏览器设置"></a>谷歌浏览器设置</h3><p>针对谷歌浏览器的设置，才能显出出 IP：</p><ol><li>在 chrome 浏览器地址栏中输入：chrome://flags/</li><li> 搜索 #enable-webrtc-hide-local-ips-with-mdns 该配置 并将属性改为 disabled</li><li> 点击页面下方的 relaunch ，重启浏览器即可查看到本机的内网 IP 地址。</li></ol><p>如下图所示：</p><p><img src="/images/2021/03/image-20210301103332557.png" alt="image-20210301103332557" loading="lazy"></p><h3 id="火狐浏览器设置"><a href="#火狐浏览器设置" class="headerlink" title="火狐浏览器设置"></a>火狐浏览器设置</h3><p>针对火狐浏览器的设置，才能显出出 IP：</p><ol><li>搜索 <code>about:config</code></li><li>点击接受风险并继续。</li><li>将 <code>media.peerconnection.ice.obfuscate_host_addresses</code> 置为 false</li></ol><p><img src="/images/2021/03/image-20210304094911768.png" alt="image-20210304094911768" loading="lazy"></p><p><img src="/images/2021/03/image-20210304095024850.png" alt="image-20210304095024850" loading="lazy"></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;获取内网IP地址&quot;&gt;&lt;a href=&quot;#获取内网IP地址&quot; class=&quot;headerlink&quot; title=&quot;获取内网IP地址&quot;&gt;&lt;/a&gt;获取内网 IP 地址&lt;/h3&gt;&lt;pre class=&quot;language-javascript&quot; data-language=&quot;javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getIpAddress&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;RTCPeerConnection &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;RTCPeerConnection &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;mozRTCPeerConnection &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;webkitRTCPeerConnection&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; pc &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;RTCPeerConnection&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        iceServers&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token function-variable function&quot;&gt;noop&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    pc&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createDataChannel&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//create a bogus data channel &lt;/span&gt;
    pc&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createOffer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pc&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setLocalDescription&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pc&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; noop&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// create offer andsetlocaldescription&lt;/span&gt;
    pc&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;onicecandidate&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;ice&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ice &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; ice&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;candidate &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; ice&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;candidate&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;candidate&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; myIP &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token regex&quot;&gt;/([0-9]{1,3}(\.[0-9]{1,3}){3}|[a-f0-9]{1,4}(:[a-f0-9]{1,4}){7})/&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ice&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;candidate&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;candidate&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;my IP: &#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; myIP&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//【注：Chrome浏览器下ice.candidate.address也可以拿到值，火狐浏览器不可以】&lt;/span&gt;
            pc&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;onicecandidate &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; noop&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; myIP&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="JavaScript" scheme="https://jueee.github.io/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://jueee.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot 解决 Web 跨域访问的方法汇总</title>
    <link href="https://jueee.github.io/2021/02/2021-02-26-SpringBoot%E8%A7%A3%E5%86%B3Web%E8%B7%A8%E5%9F%9F%E8%AE%BF%E9%97%AE%E7%9A%84%E6%96%B9%E6%B3%95%E6%B1%87%E6%80%BB/"/>
    <id>https://jueee.github.io/2021/02/2021-02-26-SpringBoot%E8%A7%A3%E5%86%B3Web%E8%B7%A8%E5%9F%9F%E8%AE%BF%E9%97%AE%E7%9A%84%E6%96%B9%E6%B3%95%E6%B1%87%E6%80%BB/</id>
    <published>2021-02-26T00:00:00.000Z</published>
    <updated>2021-02-26T03:36:11.339Z</updated>
    
    <content type="html"><![CDATA[<p>跨域访问时很多需求，所以 SpringBoot 的跨域解决也是必须的。</p><pre class="language-none"><code class="language-none">Access to XMLHttpRequest at 'http://127.0.0.1:18888/XXXX' from origin 'http://127.0.0.1:8080' has been blocked by CORS policy: No 'Access-Control-Allow-Origin' header is present on the requested resource.</code></pre><a id="more"></a><h3 id="过滤器方式"><a href="#过滤器方式" class="headerlink" title="过滤器方式"></a>过滤器方式</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CorsFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">CorsFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"SimpleCORSFilter init"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> res<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> chain<span class="token punctuation">)</span>            <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>        <span class="token class-name">HttpServletRequest</span> request <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">)</span> req<span class="token punctuation">;</span>        <span class="token class-name">HttpServletResponse</span> response <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">)</span> res<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"Origin"</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Allow-Origin"</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"Origin"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Allow-Credentials"</span><span class="token punctuation">,</span> <span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Allow-Methods"</span><span class="token punctuation">,</span> <span class="token string">"GET, POST, PUT, DELETE, OPTIONS"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Max-Age"</span><span class="token punctuation">,</span> <span class="token string">"3600"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Allow-Headers"</span><span class="token punctuation">,</span> <span class="token string">"Content-Type, Accept, X-Requested-With, remember-me"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">FilterConfig</span> filterConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="Web-MVC-Configuration"><a href="#Web-MVC-Configuration" class="headerlink" title="Web MVC Configuration"></a>Web MVC Configuration</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">CorsRegistry</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">WebMvcConfigurationSupport</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CrosConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebMvcConfigurationSupport</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">addCorsMappings</span><span class="token punctuation">(</span><span class="token class-name">CorsRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">addCorsMappings</span><span class="token punctuation">(</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"WebMVC configuration : addCorsMappings"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        registry<span class="token punctuation">.</span><span class="token function">addMapping</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">allowedMethods</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span> <span class="token string">"POST"</span><span class="token punctuation">,</span> <span class="token string">"PUT"</span><span class="token punctuation">,</span> <span class="token string">"DELETE"</span><span class="token punctuation">,</span> <span class="token string">"OPTIONS"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="SpringBoot跨域注解"><a href="#SpringBoot跨域注解" class="headerlink" title="SpringBoot跨域注解"></a>SpringBoot 跨域注解</h3><p>SpringBoot 自带的跨域注解，可以放在 RestController 的类上或者方法上，还能自定义那些域名可以跨域，非常灵活。</p><p>方法上：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/sendSessionid"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@CrossOrigin</span><span class="token punctuation">(</span>origins <span class="token operator">=</span> <span class="token string">"*"</span><span class="token punctuation">,</span> allowedHeaders <span class="token operator">=</span> <span class="token string">"*"</span><span class="token punctuation">)</span></code></pre><p>类上：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@CrossOrigin</span><span class="token punctuation">(</span>origins <span class="token operator">=</span> <span class="token string">"*"</span><span class="token punctuation">,</span> allowedHeaders <span class="token operator">=</span> <span class="token string">"*"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SessionController</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;跨域访问时很多需求，所以 SpringBoot 的跨域解决也是必须的。&lt;/p&gt;
&lt;pre class=&quot;language-none&quot;&gt;&lt;code class=&quot;language-none&quot;&gt;Access to XMLHttpRequest at &#39;http://127.0.0.1:18888/XXXX&#39; from origin &#39;http://127.0.0.1:8080&#39; has been blocked by CORS policy: No &#39;Access-Control-Allow-Origin&#39; header is present on the requested resource.&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="Java" scheme="https://jueee.github.io/categories/Java/"/>
    
    <category term="SpringBoot" scheme="https://jueee.github.io/categories/Java/SpringBoot/"/>
    
    
    <category term="Java" scheme="https://jueee.github.io/tags/Java/"/>
    
    <category term="SpringBoot" scheme="https://jueee.github.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>Java 不区分大小写的高亮替换</title>
    <link href="https://jueee.github.io/2021/02/2021-02-25-Java%E4%B8%8D%E5%8C%BA%E5%88%86%E5%A4%A7%E5%B0%8F%E5%86%99%E7%9A%84%E9%AB%98%E4%BA%AE%E6%9B%BF%E6%8D%A2/"/>
    <id>https://jueee.github.io/2021/02/2021-02-25-Java%E4%B8%8D%E5%8C%BA%E5%88%86%E5%A4%A7%E5%B0%8F%E5%86%99%E7%9A%84%E9%AB%98%E4%BA%AE%E6%9B%BF%E6%8D%A2/</id>
    <published>2021-02-25T00:00:00.000Z</published>
    <updated>2021-02-25T02:15:26.632Z</updated>
    
    <content type="html"><![CDATA[<p>近期在做一个搜索引擎，需要匹配字符高亮显示。</p><p>现在有字符串 "struts StrUts hibernate"，我想把 不区分大小写匹配 struts 的字符串替换为 <code>&lt;font color='red'&gt;匹配字符串&lt;/font&gt;</code><br>。</p><a id="more"></a><h3 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token class-name">IgnoreCaseReplace</span><span class="token punctuation">(</span><span class="token class-name">String</span> source<span class="token punctuation">,</span> <span class="token class-name">String</span> patternstring<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Pattern</span> p <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>patternstring<span class="token punctuation">,</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span>CASE_INSENSITIVE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Matcher</span> mc <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">StringBuffer</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>mc<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        mc<span class="token punctuation">.</span><span class="token function">appendReplacement</span><span class="token punctuation">(</span>sb<span class="token punctuation">,</span> <span class="token string">"&lt;font color='red'&gt;"</span> <span class="token operator">+</span> mc<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;/font&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    mc<span class="token punctuation">.</span><span class="token function">appendTail</span><span class="token punctuation">(</span>sb<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>输出结果如下：</p><pre class="language-none"><code class="language-none">&lt;font color='red' &gt;struts&lt;/font&gt; &lt;font color='red' &gt;StrUts&lt;/font&gt; hibernate</code></pre><h3 id="原理解析"><a href="#原理解析" class="headerlink" title="原理解析"></a>原理解析</h3><h4 id="不区分大小写"><a href="#不区分大小写" class="headerlink" title="不区分大小写"></a>不区分大小写</h4><p><strong>Pattern.CASE_INSENSITIVE</strong>：启用不区分大小写的匹配。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Pattern</span> p <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>patternstring<span class="token punctuation">,</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span>CASE_INSENSITIVE<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>默认情况下，不区分大小写的匹配假定仅匹配 US-ASCII 字符集中的字符。可以通过指定 UNICODE_CASE 标志连同此标志来启用 Unicode 感知的、不区分大小写的匹配。</p><p>通过嵌入式标志表达式 (?i) 也可以启用不区分大小写的匹配。</p><p>指定此标志可能对性能产生一些影响。</p><p>使用示例：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Pattern</span> p <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"java"</span><span class="token punctuation">,</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span>CASE_INSENSITIVE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Matcher</span> m <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span><span class="token string">"java Java JAVa JaVa IloveJAVA you hateJava afasdfasdf"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">StringBuffer</span> buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        buf<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> buf<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>输出：</p><pre class="language-none"><code class="language-none">javaJavaJAVaJaVaJAVAJava</code></pre><h4 id="正则替换"><a href="#正则替换" class="headerlink" title="正则替换"></a>正则替换</h4><p>以下两个是 <code>java.util.regex.Matcher</code>&nbsp;类中的方法：</p><pre class="language-java" data-language="java"><code class="language-java">matcher<span class="token punctuation">.</span><span class="token function">appendReplacement</span><span class="token punctuation">(</span>sb<span class="token punctuation">,</span> replaceContent<span class="token punctuation">)</span><span class="token punctuation">;</span>matcher<span class="token punctuation">.</span><span class="token function">appendTail</span><span class="token punctuation">(</span>sb<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>方法说明：</p><ul><li><p>appendReplacement 方法：sb 是一个 StringBuffer，replaceContext 待替换的字符串</p><p>这个方法会把匹配到的内容替换为 replaceContext，并且把<strong>从上次替换的位置到这次替换位置之间的字符串</strong>也拿到，然后，<strong>加上这次替换后的结果</strong>一起追加到 StringBuffer 里。</p></li><li><p>appendTail 方法：sb 是一个 StringBuffer</p><p>这个方法是把最后一次匹配到内容之后的字符串追加到 StringBuffer 中。</p></li></ul><p>两个方法一起使用就可以达到所有替换或者替换第一个。</p><p>所有替换：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">while</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>m<span class="token punctuation">.</span><span class="token function">appendReplacement</span><span class="token punctuation">(</span>sb<span class="token punctuation">,</span>replaceContext<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>m<span class="token punctuation">.</span><span class="token function">appendTail</span><span class="token punctuation">(</span>sb<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>替换第一个：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>matcher<span class="token punctuation">.</span><span class="token function">appendReplacement</span><span class="token punctuation">(</span>sb<span class="token punctuation">,</span> replaceContext<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>matcher<span class="token punctuation">.</span><span class="token function">appendTail</span><span class="token punctuation">(</span>sb<span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;近期在做一个搜索引擎，需要匹配字符高亮显示。&lt;/p&gt;
&lt;p&gt;现在有字符串 &quot;struts StrUts hibernate&quot;，我想把 不区分大小写匹配 struts 的字符串替换为 &lt;code&gt;&amp;lt;font color=&#39;red&#39;&amp;gt;匹配字符串&amp;lt;/font&amp;gt;&lt;/code&gt;&lt;br&gt;。&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://jueee.github.io/categories/Java/"/>
    
    <category term="JavaClass" scheme="https://jueee.github.io/categories/Java/JavaClass/"/>
    
    
    <category term="JavaClass" scheme="https://jueee.github.io/tags/JavaClass/"/>
    
    <category term="Java" scheme="https://jueee.github.io/tags/Java/"/>
    
    <category term="regex" scheme="https://jueee.github.io/tags/regex/"/>
    
  </entry>
  
  <entry>
    <title>k8s 删除 pod 一直处于 terminating 状态</title>
    <link href="https://jueee.github.io/2021/02/2021-02-20-k8s%E5%88%A0%E9%99%A4pod%E4%B8%80%E7%9B%B4%E5%A4%84%E4%BA%8Eterminating%E7%8A%B6%E6%80%81/"/>
    <id>https://jueee.github.io/2021/02/2021-02-20-k8s%E5%88%A0%E9%99%A4pod%E4%B8%80%E7%9B%B4%E5%A4%84%E4%BA%8Eterminating%E7%8A%B6%E6%80%81/</id>
    <published>2021-02-20T00:00:00.000Z</published>
    <updated>2021-02-22T08:06:46.540Z</updated>
    
    <content type="html"><![CDATA[<p>若 k8s 删除 pod 一直处于 terminating 状态</p><p>可强制删除：</p><pre class="language-none"><code class="language-none">kubectl delete pod PODNAME --force --grace-period=0</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;若 k8s 删除 pod 一直处于 terminating 状态&lt;/p&gt;
&lt;p&gt;可强制删除：&lt;/p&gt;
&lt;pre class=&quot;language-none&quot;&gt;&lt;code class=&quot;language-none&quot;&gt;kubectl delete pod PODNAME --fo</summary>
      
    
    
    
    <category term="Container" scheme="https://jueee.github.io/categories/Container/"/>
    
    <category term="Kubernets" scheme="https://jueee.github.io/categories/Container/Kubernets/"/>
    
    
    <category term="k8s" scheme="https://jueee.github.io/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch Spring-Data Date format always is long</title>
    <link href="https://jueee.github.io/2021/02/2021-02-19-ElasticSearch%20Spring-Data%20Date%20format%20always%20is%20long/"/>
    <id>https://jueee.github.io/2021/02/2021-02-19-ElasticSearch%20Spring-Data%20Date%20format%20always%20is%20long/</id>
    <published>2021-02-19T00:00:00.000Z</published>
    <updated>2021-02-19T07:42:57.531Z</updated>
    
    <content type="html"><![CDATA[<p>当使用 spring-data 插入日期类型的 Elasticsearch 文档时，我无法获得正确的日期格式，日期格式始终为 Long。</p><a id="more"></a><h3 id="普通格式"><a href="#普通格式" class="headerlink" title="普通格式"></a>普通格式</h3><h4 id="格式化类"><a href="#格式化类" class="headerlink" title="格式化类"></a>格式化类</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@Document</span><span class="token punctuation">(</span>indexName <span class="token operator">=</span> <span class="token string">"person"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Id</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> user_name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> user_password<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> user_email<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Field</span><span class="token punctuation">(</span>store <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token class-name">FieldType</span><span class="token punctuation">.</span><span class="token class-name">Date</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Date</span> insert_time<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="Mapping-效果"><a href="#Mapping-效果" class="headerlink" title="Mapping 效果"></a>Mapping 效果</h4><pre class="language-json" data-language="json"><code class="language-json"><span class="token property">"insert_time"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"long"</span><span class="token punctuation">}</span></code></pre><h4 id="日志提示"><a href="#日志提示" class="headerlink" title="日志提示"></a>日志提示</h4><blockquote><p>SimpleElasticsearchPersistentProperty : No DateFormat defined for property Person.insert_time. Make sure you have a Converter registered for Date</p></blockquote><h4 id="查看数据"><a href="#查看数据" class="headerlink" title="查看数据"></a>查看数据</h4><p>命令行获取：</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">curl</span> http://10.196.8.149:9200/person/_doc/1cbe2a07-50dd-4d98-8ad8-fdcbaae063e7<span class="token string">"insert_time"</span>:1613716712745</code></pre><p>接口获取：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">GetQuery</span> query <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GetQuery</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Person</span> info <span class="token operator">=</span> elasticsearchTemplate<span class="token punctuation">.</span><span class="token function">queryForObject</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// insert_time=Fri Feb 19 14:38:32 CST 2021</span></code></pre><h3 id="DateFormat"><a href="#DateFormat" class="headerlink" title="DateFormat"></a>DateFormat</h3><p>如果在写入数据时不加时区信息，ElasticSearch 默认按 UTC 时区写入，默认是 0 时区，但是当我们查看的时候，kibana 会读取我们当地的时间，即东八区，进行转换，所以我们看到的时间会晚 8 小时。</p><h4 id="格式化字段"><a href="#格式化字段" class="headerlink" title="格式化字段"></a>格式化字段</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Field</span><span class="token punctuation">(</span>store <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token class-name">FieldType</span><span class="token punctuation">.</span><span class="token class-name">Date</span><span class="token punctuation">,</span>format <span class="token operator">=</span> <span class="token class-name">DateFormat</span><span class="token punctuation">.</span>custom<span class="token punctuation">,</span> pattern <span class="token operator">=</span> <span class="token string">"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@JsonFormat</span><span class="token punctuation">(</span>shape <span class="token operator">=</span> <span class="token class-name">JsonFormat</span><span class="token punctuation">.</span><span class="token class-name">Shape</span><span class="token punctuation">.</span>STRING<span class="token punctuation">,</span> pattern <span class="token operator">=</span><span class="token string">"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token class-name">Date</span> insert_time<span class="token punctuation">;</span></code></pre><h4 id="Mapping-效果-1"><a href="#Mapping-效果-1" class="headerlink" title="Mapping 效果"></a>Mapping 效果</h4><pre class="language-json" data-language="json"><code class="language-json"><span class="token property">"insert_time"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"date"</span><span class="token punctuation">}</span></code></pre><h4 id="查看数据-1"><a href="#查看数据-1" class="headerlink" title="查看数据"></a>查看数据</h4><p>命令行获取：</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">curl</span> http://10.196.8.149:9200/person/_doc/a65b91a7-0753-437b-925e-fdd9d3360f13<span class="token string">"insert_time"</span><span class="token builtin class-name">:</span><span class="token string">"2021-02-19T07:32:27.399Z"</span></code></pre><p>接口获取：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">GetQuery</span> query <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GetQuery</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Person</span> info <span class="token operator">=</span> elasticsearchTemplate<span class="token punctuation">.</span><span class="token function">queryForObject</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// insert_time=Fri Feb 19 15:32:27 CST 2021</span></code></pre><h3 id="自定义时区"><a href="#自定义时区" class="headerlink" title="自定义时区"></a>自定义时区</h3><h4 id="格式化字段-1"><a href="#格式化字段-1" class="headerlink" title="格式化字段"></a>格式化字段</h4><p>自定义东八区：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Field</span><span class="token punctuation">(</span>store <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token class-name">FieldType</span><span class="token punctuation">.</span><span class="token class-name">Date</span><span class="token punctuation">,</span>format <span class="token operator">=</span> <span class="token class-name">DateFormat</span><span class="token punctuation">.</span>custom<span class="token punctuation">,</span> pattern <span class="token operator">=</span> <span class="token string">"yyyy-MM-dd'T'HH:mm:ss.SSS'+0800'"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@JsonFormat</span><span class="token punctuation">(</span>shape <span class="token operator">=</span> <span class="token class-name">JsonFormat</span><span class="token punctuation">.</span><span class="token class-name">Shape</span><span class="token punctuation">.</span>STRING<span class="token punctuation">,</span> pattern <span class="token operator">=</span><span class="token string">"yyyy-MM-dd'T'HH:mm:ss.SSS'+0800'"</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token class-name">Date</span> insert_time<span class="token punctuation">;</span></code></pre><h4 id="Mapping-效果-2"><a href="#Mapping-效果-2" class="headerlink" title="Mapping 效果"></a>Mapping 效果</h4><pre class="language-json" data-language="json"><code class="language-json"><span class="token property">"insert_time"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"date"</span><span class="token punctuation">}</span></code></pre><h4 id="查看数据-2"><a href="#查看数据-2" class="headerlink" title="查看数据"></a>查看数据</h4><p>命令行获取：</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">curl</span> http://10.196.8.149:9200/person/_doc/f6fa74ce-07e8-4961-ad44-a54052ccec45<span class="token string">"insert_time"</span><span class="token builtin class-name">:</span><span class="token string">"2021-02-19T07:36:17.529+0800"</span></code></pre><p>接口获取：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">GetQuery</span> query <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GetQuery</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Person</span> info <span class="token operator">=</span> elasticsearchTemplate<span class="token punctuation">.</span><span class="token function">queryForObject</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// insert_time=Fri Feb 19 15:36:17 CST 2021</span></code></pre><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMzIwNDI0MzA=">https://stackoverflow.com/questions/32042430<i class="fa fa-external-link-alt"></i></span></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;当使用 spring-data 插入日期类型的 Elasticsearch 文档时，我无法获得正确的日期格式，日期格式始终为 Long。&lt;/p&gt;</summary>
    
    
    
    <category term="Database" scheme="https://jueee.github.io/categories/Database/"/>
    
    <category term="ElasticSearch" scheme="https://jueee.github.io/categories/Database/ElasticSearch/"/>
    
    
    <category term="ElasticSearch" scheme="https://jueee.github.io/tags/ElasticSearch/"/>
    
    <category term="Database" scheme="https://jueee.github.io/tags/Database/"/>
    
  </entry>
  
  <entry>
    <title>Java 使用 neo4j-java-driver 操作 Neo4j</title>
    <link href="https://jueee.github.io/2021/02/2021-02-09-Java%E4%BD%BF%E7%94%A8neo4j-java-driver%E6%93%8D%E4%BD%9CNeo4j/"/>
    <id>https://jueee.github.io/2021/02/2021-02-09-Java%E4%BD%BF%E7%94%A8neo4j-java-driver%E6%93%8D%E4%BD%9CNeo4j/</id>
    <published>2021-02-09T00:00:00.000Z</published>
    <updated>2021-02-08T08:36:52.727Z</updated>
    
    <content type="html"><![CDATA[<h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/org.neo4j.driver/neo4j-java-driver --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.neo4j.driver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>neo4j-java-driver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></code></pre><a id="more"></a><h3 id="项目代码"><a href="#项目代码" class="headerlink" title="项目代码"></a>项目代码</h3><p>本文完整项目代码位于：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0p1ZWVlL2Jsb2ctcHJvamVjdC90cmVlL21haW4vbmVvNGotZHJpdmVyLXNlc3Npb24=">https://github.com/Jueee/blog-project/tree/main/neo4j-driver-session<i class="fa fa-external-link-alt"></i></span></p><h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><p>每个 Neo4j 驱动程序都有一个用于创建驱动程序的数据库对象。</p><p>一般按照以下操作步骤：</p><ol><li>向数据库对象请求一个新的驱动程序；</li><li>向驱动程序对象请求一个新会话；</li><li>请求会话对象创建事务；</li><li>使用事务对象运行语句。它返回一个表示结果的对象；</li><li>处理结果；</li><li>关闭会话。</li></ol><p>示例：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Driver</span> driver <span class="token operator">=</span> <span class="token class-name">GraphDatabase</span><span class="token punctuation">.</span><span class="token function">driver</span><span class="token punctuation">(</span><span class="token string">"bolt://127.0.0.1:7687"</span><span class="token punctuation">,</span> <span class="token class-name">AuthTokens</span><span class="token punctuation">.</span><span class="token function">basic</span><span class="token punctuation">(</span><span class="token string">"neo4j"</span><span class="token punctuation">,</span> <span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Session</span> session <span class="token operator">=</span> driver<span class="token punctuation">.</span><span class="token function">session</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">final</span> <span class="token class-name">Result</span> result <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token string">"MATCH (a:Person) RETURN a.name AS name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Record</span> <span class="token keyword">record</span> <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">record</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">asString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>session<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>driver<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="生成-Driver-Session"><a href="#生成-Driver-Session" class="headerlink" title="生成 Driver Session"></a>生成 Driver Session</h3><h4 id="Java-引入"><a href="#Java-引入" class="headerlink" title="Java 引入"></a>Java 引入</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Driver</span> driver <span class="token operator">=</span> <span class="token class-name">GraphDatabase</span><span class="token punctuation">.</span><span class="token function">driver</span><span class="token punctuation">(</span><span class="token string">"bolt://127.0.0.1:7687"</span><span class="token punctuation">,</span> <span class="token class-name">AuthTokens</span><span class="token punctuation">.</span><span class="token function">basic</span><span class="token punctuation">(</span><span class="token string">"neo4j"</span><span class="token punctuation">,</span> <span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">SessionConfig</span> sessionConfig <span class="token operator">=</span> <span class="token class-name">SessionConfig</span><span class="token punctuation">.</span><span class="token function">defaultConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Session</span> session <span class="token operator">=</span> driver<span class="token punctuation">.</span><span class="token function">session</span><span class="token punctuation">(</span>sessionConfig<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="SpringBoot-引入"><a href="#SpringBoot-引入" class="headerlink" title="SpringBoot 引入"></a>SpringBoot 引入</h4><h5 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h5><pre class="language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">neo4j.uri</span><span class="token punctuation">=</span><span class="token attr-value">bolt://127.0.0.1:7687</span><span class="token attr-name">neo4j.username</span><span class="token punctuation">=</span><span class="token attr-value">neo4j</span><span class="token attr-name">neo4j.password</span><span class="token punctuation">=</span><span class="token attr-value">password</span></code></pre><h5 id="配置类"><a href="#配置类" class="headerlink" title="配置类"></a>配置类</h5><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>neo4j<span class="token punctuation">.</span>driver<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Value</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Neo4jConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${neo4j.uri}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> neo4jUri<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${neo4j.username}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> neo4jUsername<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${neo4j.password}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> neo4jPassword<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">Session</span> <span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">Driver</span> driver <span class="token operator">=</span> <span class="token class-name">GraphDatabase</span><span class="token punctuation">.</span><span class="token function">driver</span><span class="token punctuation">(</span>neo4jUri<span class="token punctuation">,</span> <span class="token class-name">AuthTokens</span><span class="token punctuation">.</span><span class="token function">basic</span><span class="token punctuation">(</span>neo4jUsername<span class="token punctuation">,</span> neo4jPassword<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SessionConfig</span> sessionConfig <span class="token operator">=</span> <span class="token class-name">SessionConfig</span><span class="token punctuation">.</span><span class="token function">defaultConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> driver<span class="token punctuation">.</span><span class="token function">session</span><span class="token punctuation">(</span>sessionConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="引入-Session"><a href="#引入-Session" class="headerlink" title="引入 Session"></a>引入 Session</h5><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> <span class="token class-name">Session</span> session<span class="token punctuation">;</span></code></pre><h3 id="执行SQL"><a href="#执行SQL" class="headerlink" title="执行SQL"></a>执行 SQL</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Path</span><span class="token punctuation">&gt;</span></span> <span class="token function">randomPerson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">String</span> searchSQL <span class="token operator">=</span> <span class="token string">"match p=(n:Person)-[t]-&gt;(m) where 1=1 return p limit 20"</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"[searchSQL]"</span><span class="token operator">+</span>searchSQL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Path</span><span class="token punctuation">&gt;</span></span> pathList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Result</span> result <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>searchSQL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span> result<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Record</span> <span class="token keyword">record</span> <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Value</span> value <span class="token operator">=</span> <span class="token keyword">record</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pathList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">asPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"[UseTime]"</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>start<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"ms"</span><span class="token operator">+</span><span class="token string">"[Size]"</span><span class="token operator">+</span>pathList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> pathList<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="执行统计"><a href="#执行统计" class="headerlink" title="执行统计"></a>执行统计</h3><h4 id="汇总节点数量"><a href="#汇总节点数量" class="headerlink" title="汇总节点数量"></a>汇总节点数量</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Long</span> <span class="token function">getNodeCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Long</span> resultNum <span class="token operator">=</span> <span class="token number">0L</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> searchSQL <span class="token operator">=</span> <span class="token string">"match (n:Person) return count(n)"</span><span class="token punctuation">;</span>        <span class="token class-name">Result</span> result <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>searchSQL<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span> result<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Record</span> <span class="token keyword">record</span> <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Value</span> value <span class="token operator">=</span> <span class="token keyword">record</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            resultNum <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">asLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> resultNum<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="汇总关系数量"><a href="#汇总关系数量" class="headerlink" title="汇总关系数量"></a>汇总关系数量</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Long</span> <span class="token function">getRelationshipCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Long</span> resultNum <span class="token operator">=</span> <span class="token number">0L</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> searchSQL <span class="token operator">=</span> <span class="token string">"match p=(n:Person)-[]-&gt;(m:Person) return count(n)"</span><span class="token punctuation">;</span>        <span class="token class-name">Result</span> result <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>searchSQL<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span> result<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Record</span> <span class="token keyword">record</span> <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Value</span> value <span class="token operator">=</span> <span class="token keyword">record</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            resultNum <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">asLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> resultNum<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;引入依赖&quot;&gt;&lt;a href=&quot;#引入依赖&quot; class=&quot;headerlink&quot; title=&quot;引入依赖&quot;&gt;&lt;/a&gt;引入依赖&lt;/h3&gt;&lt;pre class=&quot;language-xml&quot; data-language=&quot;xml&quot;&gt;&lt;code class=&quot;language-xml&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- https://mvnrepository.com/artifact/org.neo4j.driver/neo4j-java-driver --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;dependency&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
   &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;groupId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;org.neo4j.driver&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;groupId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
   &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;artifactId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;neo4j-java-driver&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;artifactId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
   &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;version&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;4.2.0&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;version&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;dependency&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="Java" scheme="https://jueee.github.io/categories/Java/"/>
    
    <category term="Database" scheme="https://jueee.github.io/categories/Database/"/>
    
    <category term="JavaJar" scheme="https://jueee.github.io/categories/Java/JavaJar/"/>
    
    <category term="Neo4j" scheme="https://jueee.github.io/categories/Database/Neo4j/"/>
    
    
    <category term="Java" scheme="https://jueee.github.io/tags/Java/"/>
    
    <category term="Neo4j" scheme="https://jueee.github.io/tags/Neo4j/"/>
    
    <category term="Database" scheme="https://jueee.github.io/tags/Database/"/>
    
  </entry>
  
  <entry>
    <title>Springboot 集成 Neo4j 示例</title>
    <link href="https://jueee.github.io/2021/02/2021-02-08-Springboot%E9%9B%86%E6%88%90Neo4j%E7%A4%BA%E4%BE%8B/"/>
    <id>https://jueee.github.io/2021/02/2021-02-08-Springboot%E9%9B%86%E6%88%90Neo4j%E7%A4%BA%E4%BE%8B/</id>
    <published>2021-02-08T00:00:00.000Z</published>
    <updated>2021-02-08T08:35:36.992Z</updated>
    
    <content type="html"><![CDATA[<h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-data-neo4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></code></pre><a id="more"></a><h3 id="项目代码"><a href="#项目代码" class="headerlink" title="项目代码"></a>项目代码</h3><p>本文完整项目代码位于：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0p1ZWVlL2Jsb2ctcHJvamVjdC90cmVlL21haW4vbmVvNGotc3ByaW5nYm9vdA==">https://github.com/Jueee/blog-project/tree/main/neo4j-springboot<i class="fa fa-external-link-alt"></i></span></p><h3 id="配置连接"><a href="#配置连接" class="headerlink" title="配置连接"></a>配置连接</h3><pre class="language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">spring.data.neo4j.uri</span><span class="token punctuation">=</span><span class="token attr-value">bolt://127.0.0.1:7687</span><span class="token attr-name">spring.data.neo4j.username</span><span class="token punctuation">=</span><span class="token attr-value">neo4j</span><span class="token attr-name">spring.data.neo4j.password</span><span class="token punctuation">=</span><span class="token attr-value">123456</span></code></pre><h3 id="建立NodeEntity"><a href="#建立NodeEntity" class="headerlink" title="建立NodeEntity"></a>建立 NodeEntity</h3><p>类似于 MySQL 中的 table 映射的对象类，mysql 中叫做 ORM，neo4j 中叫做 OGM [object graph mapping]</p><h4 id="节点的标签实体"><a href="#节点的标签实体" class="headerlink" title="节点的标签实体"></a>节点的标签实体</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">NoArgsConstructor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>neo4j<span class="token punctuation">.</span>ogm<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">GeneratedValue</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>neo4j<span class="token punctuation">.</span>ogm<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Id</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>neo4j<span class="token punctuation">.</span>ogm<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">NodeEntity</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>neo4j<span class="token punctuation">.</span>ogm<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Property</span><span class="token punctuation">;</span><span class="token annotation punctuation">@NodeEntity</span><span class="token punctuation">(</span>label <span class="token operator">=</span> <span class="token string">"Person"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Id</span>    <span class="token annotation punctuation">@GeneratedValue</span>    <span class="token class-name">Long</span> id<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Property</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"name"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="关系实体"><a href="#关系实体" class="headerlink" title="关系实体"></a>关系实体</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">NoArgsConstructor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>neo4j<span class="token punctuation">.</span>ogm<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token annotation punctuation">@RelationshipEntity</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token string">"LOVES"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Love</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Id</span>    <span class="token annotation punctuation">@GeneratedValue</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>    <span class="token annotation punctuation">@StartNode</span>    <span class="token keyword">private</span> <span class="token class-name">Person</span> startNode<span class="token punctuation">;</span>    <span class="token annotation punctuation">@EndNode</span>    <span class="token keyword">private</span> <span class="token class-name">Person</span> endNode<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="接口-API"><a href="#接口-API" class="headerlink" title="接口 API"></a>接口 API</h3><h4 id="编写Repository"><a href="#编写Repository" class="headerlink" title="编写Repository"></a>编写 Repository</h4><h5 id="节点Repository"><a href="#节点Repository" class="headerlink" title="节点Repository"></a>节点 Repository</h5><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>jueee<span class="token punctuation">.</span>bean<span class="token punctuation">.</span></span><span class="token class-name">Person</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>neo4j<span class="token punctuation">.</span>repository<span class="token punctuation">.</span></span><span class="token class-name">Neo4jRepository</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PersonRepository</span> <span class="token keyword">extends</span> <span class="token class-name">Neo4jRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h5 id="关系Repository"><a href="#关系Repository" class="headerlink" title="关系Repository"></a>关系 Repository</h5><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>jueee<span class="token punctuation">.</span>bean<span class="token punctuation">.</span></span><span class="token class-name">Love</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>neo4j<span class="token punctuation">.</span>repository<span class="token punctuation">.</span></span><span class="token class-name">Neo4jRepository</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">LoveRepository</span> <span class="token keyword">extends</span> <span class="token class-name">Neo4jRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Love</span><span class="token punctuation">,</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h4 id="编写Service"><a href="#编写Service" class="headerlink" title="编写Service"></a>编写 Service</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>jueee<span class="token punctuation">.</span>bean<span class="token punctuation">.</span></span><span class="token class-name">Love</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>jueee<span class="token punctuation">.</span>bean<span class="token punctuation">.</span></span><span class="token class-name">Person</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>jueee<span class="token punctuation">.</span>dao<span class="token punctuation">.</span></span><span class="token class-name">LoveRepository</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>jueee<span class="token punctuation">.</span>dao<span class="token punctuation">.</span></span><span class="token class-name">PersonRepository</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Service</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PersonService</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">PersonRepository</span> personRepository<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">LoveRepository</span> loveRepository<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Person</span> <span class="token function">addPerson</span><span class="token punctuation">(</span><span class="token class-name">Person</span> person<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> personRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Person</span> <span class="token function">findOnePerson</span><span class="token punctuation">(</span><span class="token keyword">long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> personRepository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Love</span> <span class="token function">loves</span><span class="token punctuation">(</span><span class="token class-name">Love</span> love<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> loveRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>love<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="测试程序"><a href="#测试程序" class="headerlink" title="测试程序"></a>测试程序</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>jueee<span class="token punctuation">.</span>bean<span class="token punctuation">.</span></span><span class="token class-name">Love</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>jueee<span class="token punctuation">.</span>bean<span class="token punctuation">.</span></span><span class="token class-name">Person</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Test</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SpringBootTest</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">class</span> <span class="token class-name">PersonServiceTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">PersonService</span> personService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">Person</span> test1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        test1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"test1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Person</span> result1 <span class="token operator">=</span> personService<span class="token punctuation">.</span><span class="token function">addPerson</span><span class="token punctuation">(</span>test1<span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>result1<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Person</span> test2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        test2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"test2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Person</span> result2 <span class="token operator">=</span> personService<span class="token punctuation">.</span><span class="token function">addPerson</span><span class="token punctuation">(</span>test2<span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>result2<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Person</span> person1 <span class="token operator">=</span> personService<span class="token punctuation">.</span><span class="token function">findOnePerson</span><span class="token punctuation">(</span>result1<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Person</span> person2 <span class="token operator">=</span> personService<span class="token punctuation">.</span><span class="token function">findOnePerson</span><span class="token punctuation">(</span>result2<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Love</span> love <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Love</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        love<span class="token punctuation">.</span><span class="token function">setStartNode</span><span class="token punctuation">(</span>person1<span class="token punctuation">)</span><span class="token punctuation">;</span>        love<span class="token punctuation">.</span><span class="token function">setEndNode</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Love</span> result <span class="token operator">=</span>  personService<span class="token punctuation">.</span><span class="token function">loves</span><span class="token punctuation">(</span>love<span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="运行效果"><a href="#运行效果" class="headerlink" title="运行效果"></a>运行效果</h4><p>日志：</p><pre class="language-none"><code class="language-none">Person(id=1263319, name=test1)Person(id=1263329, name=test2)Love(id=1650877, startNode=Person(id=1263319, name=test1), endNode=Person(id=1263329, name=test2))</code></pre><p>查看关系：</p><p><img src="/images/2021/02/image-20210208135415452.png" alt="image-20210208135415452" loading="lazy"></p><h3 id="自定义-cypherSQL"><a href="#自定义-cypherSQL" class="headerlink" title="自定义 cypherSQL"></a>自定义 cypherSQL</h3><h4 id="查询对象"><a href="#查询对象" class="headerlink" title="查询对象"></a>查询对象</h4><h5 id="编写Service-1"><a href="#编写Service-1" class="headerlink" title="编写Service"></a>编写 Service</h5><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>jueee<span class="token punctuation">.</span>bean<span class="token punctuation">.</span></span><span class="token class-name">Love</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>neo4j<span class="token punctuation">.</span>ogm<span class="token punctuation">.</span>session<span class="token punctuation">.</span></span><span class="token class-name">Session</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Service</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SessionService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">Session</span> session<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Love</span><span class="token punctuation">&gt;</span></span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">String</span> searchSQL <span class="token operator">=</span> <span class="token string">"match p=(n:Person)-[t]-&gt;(m) where 1=1 return p limit 20"</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"[searchSQL]"</span><span class="token operator">+</span>searchSQL<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Love</span><span class="token punctuation">&gt;</span></span> loveList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> parameters <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Love</span><span class="token punctuation">&gt;</span></span> loves <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token class-name">Love</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> searchSQL<span class="token punctuation">,</span> parameters<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>loves <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Love</span> love <span class="token operator">:</span> loves<span class="token punctuation">)</span> <span class="token punctuation">{</span>                loveList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>love<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"[UseTime]"</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>start<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"ms"</span><span class="token operator">+</span><span class="token string">"[Size]"</span><span class="token operator">+</span>loveList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> loveList<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="测试程序-1"><a href="#测试程序-1" class="headerlink" title="测试程序"></a>测试程序</h5><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>jueee<span class="token punctuation">.</span>bean<span class="token punctuation">.</span></span><span class="token class-name">Love</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Test</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>neo4j<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>types<span class="token punctuation">.</span></span><span class="token class-name">Path</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SpringBootTest</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">class</span> <span class="token class-name">SessionServiceTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">SessionService</span> sessionService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Love</span><span class="token punctuation">&gt;</span></span> pathList <span class="token operator">=</span> sessionService<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pathList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>t<span class="token operator">-&gt;</span>log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h5><pre class="language-none"><code class="language-none">[searchSQL]match p=(n:Person)-[t]-&gt;(m) where 1=1 return p limit 20[UseTime]1535ms[Size]2Love(id=1650877, startNode=Person(id=1263319, name=test1), endNode=Person(id=1263329, name=test2))Love(id=1651113, startNode=Person(id=1263485, name=test1), endNode=Person(id=1263486, name=test2))</code></pre><h4 id="自定义统计-SQL"><a href="#自定义统计-SQL" class="headerlink" title="自定义统计 SQL"></a>自定义统计 SQL</h4><p>查询节点总数：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Long</span> <span class="token function">getNodeCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Long</span> resultNum <span class="token operator">=</span> <span class="token number">0L</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token class-name">StringBuffer</span> cypher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> parameters <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cypher<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"match (n:Person) return count(n)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> mailSends <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>cypher<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> parameters<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mailSends<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> mailSends<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            resultNum <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">)</span>result<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"count(n)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> resultNum<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>查询关系总数：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Long</span> <span class="token function">getRelationshipCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Long</span> resultNum <span class="token operator">=</span> <span class="token number">0L</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token class-name">StringBuffer</span> cypher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> parameters <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cypher<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"match p=(n:Person)-[]-&gt;(m:Person) return count(n)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>cypher<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> mailSends <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>cypher<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> parameters<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mailSends<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> mailSends<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            resultNum <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">)</span>result<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"count(n)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> resultNum<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;引入依赖&quot;&gt;&lt;a href=&quot;#引入依赖&quot; class=&quot;headerlink&quot; title=&quot;引入依赖&quot;&gt;&lt;/a&gt;引入依赖&lt;/h3&gt;&lt;pre class=&quot;language-xml&quot; data-language=&quot;xml&quot;&gt;&lt;code class=&quot;language-xml&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;dependency&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;groupId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;groupId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;artifactId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;spring-boot-starter-data-neo4j&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;artifactId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;dependency&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="Java" scheme="https://jueee.github.io/categories/Java/"/>
    
    <category term="Database" scheme="https://jueee.github.io/categories/Database/"/>
    
    <category term="Neo4j" scheme="https://jueee.github.io/categories/Database/Neo4j/"/>
    
    <category term="Springboot" scheme="https://jueee.github.io/categories/Java/Springboot/"/>
    
    
    <category term="Java" scheme="https://jueee.github.io/tags/Java/"/>
    
    <category term="Neo4j" scheme="https://jueee.github.io/tags/Neo4j/"/>
    
    <category term="Database" scheme="https://jueee.github.io/tags/Database/"/>
    
    <category term="Springboot" scheme="https://jueee.github.io/tags/Springboot/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch 集成 Spring 之 ElasticsearchRestTemplate 示例</title>
    <link href="https://jueee.github.io/2021/02/2021-02-07-ElasticSearch%E9%9B%86%E6%88%90Spring%E4%B9%8BElasticsearchRestTemplate%E7%A4%BA%E4%BE%8B/"/>
    <id>https://jueee.github.io/2021/02/2021-02-07-ElasticSearch%E9%9B%86%E6%88%90Spring%E4%B9%8BElasticsearchRestTemplate%E7%A4%BA%E4%BE%8B/</id>
    <published>2021-02-07T00:00:00.000Z</published>
    <updated>2021-02-08T07:50:11.482Z</updated>
    
    <content type="html"><![CDATA[<h3 id="ElasticsearchRestTemplate"><a href="#ElasticsearchRestTemplate" class="headerlink" title="ElasticsearchRestTemplate"></a>ElasticsearchRestTemplate</h3><p>ElasticsearchRestTemplate 是 spring-data-elasticsearch 项目中的一个类，和其他 spring 项目中的 template 类似。</p><h4 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h4><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-data-elasticsearch<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></code></pre><a id="more"></a><h3 id="使用ElasticsearchRest"><a href="#使用ElasticsearchRest" class="headerlink" title="使用ElasticsearchRest"></a>使用 ElasticsearchRest</h3><ol><li><p>参数配置：</p><pre class="language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">elasticsearch.address</span><span class="token punctuation">=</span><span class="token attr-value">127.0.0.1:9200</span></code></pre></li><li><p>配置引入：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">RestHighLevelClient</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Value</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">ClientConfiguration</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">RestClients</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">ElasticsearchRestTemplate</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ElasticSearchConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${elasticsearch.address}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> elasticSearchAddress<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token class-name">RestHighLevelClient</span> <span class="token function">elasticsearchClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token class-name">ClientConfiguration</span> configuration <span class="token operator">=</span> <span class="token class-name">ClientConfiguration</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">connectedTo</span><span class="token punctuation">(</span>elasticSearchAddress<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">RestHighLevelClient</span> client <span class="token operator">=</span> <span class="token class-name">RestClients</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>configuration<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> client<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token class-name">ElasticsearchRestTemplate</span> <span class="token function">elasticsearchTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ElasticsearchRestTemplate</span><span class="token punctuation">(</span><span class="token function">elasticsearchClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>使用：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token class-name">ElasticsearchRestTemplate</span> elasticsearchTemplate<span class="token punctuation">;</span></code></pre></li></ol><h3 id="常用示例"><a href="#常用示例" class="headerlink" title="常用示例"></a>常用示例</h3><h4 id="索引相关"><a href="#索引相关" class="headerlink" title="索引相关"></a>索引相关</h4><p>创建索引：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> settings <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>settings<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"index.number_of_replicas"</span><span class="token punctuation">,</span> <span class="token string">"30"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> createResult <span class="token operator">=</span> elasticsearchTemplate<span class="token punctuation">.</span><span class="token function">createIndex</span><span class="token punctuation">(</span>clazz<span class="token punctuation">,</span>settings<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>刷新 Mapping：</p><pre class="language-java" data-language="java"><code class="language-java">elasticsearchTemplate<span class="token punctuation">.</span><span class="token function">putMapping</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>elasticsearchTemplate<span class="token punctuation">.</span><span class="token function">refresh</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="新增数据"><a href="#新增数据" class="headerlink" title="新增数据"></a>新增数据</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">IndexQuery</span><span class="token punctuation">&gt;</span></span> queries <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">IndexQuery</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Person</span> test<span class="token operator">:</span>testList<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">IndexQuery</span> indexQuery <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IndexQueryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withId</span><span class="token punctuation">(</span>test<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withObject</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    queries<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>indexQuery<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>elasticsearchTemplate<span class="token punctuation">.</span><span class="token function">bulkIndex</span><span class="token punctuation">(</span>queries<span class="token punctuation">,</span> <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">GetQuery</span> query <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GetQuery</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Person</span> info <span class="token operator">=</span> elasticsearchTemplate<span class="token punctuation">.</span><span class="token function">queryForObject</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;ElasticsearchRestTemplate&quot;&gt;&lt;a href=&quot;#ElasticsearchRestTemplate&quot; class=&quot;headerlink&quot; title=&quot;ElasticsearchRestTemplate&quot;&gt;&lt;/a&gt;ElasticsearchRestTemplate&lt;/h3&gt;&lt;p&gt;ElasticsearchRestTemplate是spring-data-elasticsearch项目中的一个类，和其他spring项目中的template类似。&lt;/p&gt;
&lt;h4 id=&quot;引入依赖&quot;&gt;&lt;a href=&quot;#引入依赖&quot; class=&quot;headerlink&quot; title=&quot;引入依赖&quot;&gt;&lt;/a&gt;引入依赖&lt;/h4&gt;&lt;pre class=&quot;language-xml&quot; data-language=&quot;xml&quot;&gt;&lt;code class=&quot;language-xml&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;dependency&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;groupId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;groupId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;artifactId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;spring-boot-starter-data-elasticsearch&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;artifactId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;dependency&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="Database" scheme="https://jueee.github.io/categories/Database/"/>
    
    <category term="ElasticSearch" scheme="https://jueee.github.io/categories/Database/ElasticSearch/"/>
    
    
    <category term="ElasticSearch" scheme="https://jueee.github.io/tags/ElasticSearch/"/>
    
    <category term="Database" scheme="https://jueee.github.io/tags/Database/"/>
    
  </entry>
  
  <entry>
    <title>Java 判断字符串中是否包含 emoj 表情及过滤</title>
    <link href="https://jueee.github.io/2021/02/2021-02-04-Java%E5%88%A4%E6%96%AD%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E6%98%AF%E5%90%A6%E5%8C%85%E5%90%ABemoj%E8%A1%A8%E6%83%85%E5%8F%8A%E8%BF%87%E6%BB%A4/"/>
    <id>https://jueee.github.io/2021/02/2021-02-04-Java%E5%88%A4%E6%96%AD%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E6%98%AF%E5%90%A6%E5%8C%85%E5%90%ABemoj%E8%A1%A8%E6%83%85%E5%8F%8A%E8%BF%87%E6%BB%A4/</id>
    <published>2021-02-04T00:00:00.000Z</published>
    <updated>2021-02-05T01:31:02.574Z</updated>
    
    <content type="html"><![CDATA[<p>最近遇到一个很麻烦的问题，用户如果在客户端输入表情可能会引起一些报错，在查了一些资料后发现很多坑人的代码，我在总结了之后给出了一个比较完美的版本。 </p><p>亲测可以判断绝大多数表情。</p><a id="more"></a><h3 id="Java-实现"><a href="#Java-实现" class="headerlink" title="Java 实现"></a>Java 实现</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>netease<span class="token punctuation">.</span>mdas<span class="token punctuation">.</span>util</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">StringUtils</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmojiFilter</span> <span class="token punctuation">{</span>    <span class="token comment">/** * 判断字符串是否包含 emoji 或者 其他非文字类型的字符 * @param source * @return */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">containsEmoji</span><span class="token punctuation">(</span><span class="token class-name">String</span> source<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> len <span class="token operator">=</span> source<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> isEmoji <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">char</span> hs <span class="token operator">=</span> source<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0xd800</span> <span class="token operator">&lt;=</span> hs <span class="token operator">&amp;&amp;</span> hs <span class="token operator">&lt;=</span> <span class="token number">0xdbff</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>source<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">char</span> ls <span class="token operator">=</span> source<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> uc <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>hs <span class="token operator">-</span> <span class="token number">0xd800</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0x400</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>ls <span class="token operator">-</span> <span class="token number">0xdc00</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0x10000</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0x1d000</span> <span class="token operator">&lt;=</span> uc <span class="token operator">&amp;&amp;</span> uc <span class="token operator">&lt;=</span> <span class="token number">0x1f77f</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment">// non surrogate</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0x2100</span> <span class="token operator">&lt;=</span> hs <span class="token operator">&amp;&amp;</span> hs <span class="token operator">&lt;=</span> <span class="token number">0x27ff</span> <span class="token operator">&amp;&amp;</span> hs <span class="token operator">!=</span> <span class="token number">0x263b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0x2B05</span> <span class="token operator">&lt;=</span> hs <span class="token operator">&amp;&amp;</span> hs <span class="token operator">&lt;=</span> <span class="token number">0x2b07</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0x2934</span> <span class="token operator">&lt;=</span> hs <span class="token operator">&amp;&amp;</span> hs <span class="token operator">&lt;=</span> <span class="token number">0x2935</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0x3297</span> <span class="token operator">&lt;=</span> hs <span class="token operator">&amp;&amp;</span> hs <span class="token operator">&lt;=</span> <span class="token number">0x3299</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>hs <span class="token operator">==</span> <span class="token number">0xa9</span> <span class="token operator">||</span> hs <span class="token operator">==</span> <span class="token number">0xae</span> <span class="token operator">||</span> hs <span class="token operator">==</span> <span class="token number">0x303d</span> <span class="token operator">||</span> hs <span class="token operator">==</span> <span class="token number">0x3030</span> <span class="token operator">||</span> hs <span class="token operator">==</span> <span class="token number">0x2b55</span> <span class="token operator">||</span> hs <span class="token operator">==</span> <span class="token number">0x2b1c</span><span class="token operator">||</span> hs <span class="token operator">==</span> <span class="token number">0x2b1b</span> <span class="token operator">||</span> hs <span class="token operator">==</span> <span class="token number">0x2b50</span> <span class="token operator">||</span> hs <span class="token operator">==</span> <span class="token number">0x231a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isEmoji <span class="token operator">&amp;&amp;</span> source<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> source<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">char</span> ls <span class="token operator">=</span> source<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>ls <span class="token operator">==</span> <span class="token number">0x20e3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> isEmoji<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isEmojiCharacter</span><span class="token punctuation">(</span><span class="token keyword">char</span> codePoint<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token punctuation">(</span>codePoint <span class="token operator">==</span> <span class="token number">0x0</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>codePoint <span class="token operator">==</span> <span class="token number">0x9</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>codePoint <span class="token operator">==</span> <span class="token number">0xA</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>codePoint <span class="token operator">==</span> <span class="token number">0xD</span><span class="token punctuation">)</span><span class="token operator">||</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>codePoint <span class="token operator">&gt;=</span> <span class="token number">0x20</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>codePoint <span class="token operator">&lt;=</span> <span class="token number">0xD7FF</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>codePoint <span class="token operator">&gt;=</span> <span class="token number">0xE000</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>codePoint <span class="token operator">&lt;=</span> <span class="token number">0xFFFD</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">||</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>codePoint <span class="token operator">&gt;=</span> <span class="token number">0x10000</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>codePoint <span class="token operator">&lt;=</span> <span class="token number">0x10FFFF</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/** * 过滤emoji 或者 其他非文字类型的字符 *  * @param source * @return */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">filterEmoji</span><span class="token punctuation">(</span><span class="token class-name">String</span> source<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> source<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">StringBuilder</span> buf <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">int</span> len <span class="token operator">=</span> source<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">char</span> codePoint <span class="token operator">=</span> source<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmojiCharacter</span><span class="token punctuation">(</span>codePoint<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>buf <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span>source<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>buf<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>codePoint<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>buf <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> source<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>buf<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>buf <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">return</span> source<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token keyword">return</span> buf<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="测试效果"><a href="#测试效果" class="headerlink" title="测试效果"></a>测试效果</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">containsEmoji</span><span class="token punctuation">(</span><span class="token string">"U+FE004⚡"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">containsEmoji</span><span class="token punctuation">(</span><span class="token string">"@netease.com"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近遇到一个很麻烦的问题，用户如果在客户端输入表情可能会引起一些报错，在查了一些资料后发现很多坑人的代码，我在总结了之后给出了一个比较完美的版本。 &lt;/p&gt;
&lt;p&gt;亲测可以判断绝大多数表情。&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://jueee.github.io/categories/Java/"/>
    
    <category term="JavaClass" scheme="https://jueee.github.io/categories/Java/JavaClass/"/>
    
    
    <category term="JavaClass" scheme="https://jueee.github.io/tags/JavaClass/"/>
    
    <category term="Java" scheme="https://jueee.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Spring AOP 拦截注解接口的所有方法</title>
    <link href="https://jueee.github.io/2021/01/2021-01-29-SpringAOP%E6%8B%A6%E6%88%AA%E6%B3%A8%E8%A7%A3%E6%8E%A5%E5%8F%A3%E7%9A%84%E6%89%80%E6%9C%89%E6%96%B9%E6%B3%95/"/>
    <id>https://jueee.github.io/2021/01/2021-01-29-SpringAOP%E6%8B%A6%E6%88%AA%E6%B3%A8%E8%A7%A3%E6%8E%A5%E5%8F%A3%E7%9A%84%E6%89%80%E6%9C%89%E6%96%B9%E6%B3%95/</id>
    <published>2021-01-29T00:00:00.000Z</published>
    <updated>2021-01-29T05:35:50.331Z</updated>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>MyBatis 多源数据库切换问题，希望通过注解标注 Dao 类的数据库源，但使用注解切点表达式，因实现类是 MyBatis 动态代理生成，无法在实现类上添加注解，而添加到接口上又无效，需要寻找替代方案。</p><a id="more"></a><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>不采用 AspectJ 表达式方式定义切点和切面，使用 AnnotationMatchingPointcut 和 DefaultPointcutAdvisor 来定义。</p><h3 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h3><p>示例代码如下，将 ChangeMySqlType 注解添加到接口上，即可拦截实现类的方法。</p><h4 id="类注解"><a href="#类注解" class="headerlink" title="类注解"></a>类注解</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ElementType</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Retention</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Target</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">ChangeMySqlType</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h4 id="Aspect-实现"><a href="#Aspect-实现" class="headerlink" title="Aspect 实现"></a>Aspect 实现</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>aopalliance<span class="token punctuation">.</span>aop<span class="token punctuation">.</span></span><span class="token class-name">Advice</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Aspect</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>aop<span class="token punctuation">.</span></span><span class="token class-name">Advisor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>aop<span class="token punctuation">.</span></span><span class="token class-name">Pointcut</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span><span class="token class-name">DefaultPointcutAdvisor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>support<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">AnnotationMatchingPointcut</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Order</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Aspect</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChangeMySqlTypeAspect</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">DataBasesConfig</span> dataBasesConfig<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">Advisor</span> <span class="token function">dataSourceAdvisor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">Pointcut</span> pointcut <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationMatchingPointcut</span><span class="token punctuation">(</span><span class="token class-name">ChangeMySqlType</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Advice</span> advice <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MethodAroundAdvice</span><span class="token punctuation">(</span>dataBasesConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DefaultPointcutAdvisor</span><span class="token punctuation">(</span>pointcut<span class="token punctuation">,</span> advice<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="Advice-实现"><a href="#Advice-实现" class="headerlink" title="Advice 实现"></a>Advice 实现</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>aop<span class="token punctuation">.</span></span><span class="token class-name">AfterReturningAdvice</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>aop<span class="token punctuation">.</span></span><span class="token class-name">MethodBeforeAdvice</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MethodAroundAdvice</span> <span class="token keyword">implements</span> <span class="token class-name">MethodBeforeAdvice</span><span class="token punctuation">,</span> <span class="token class-name">AfterReturningAdvice</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">DataBasesConfig</span> dataBasesConfig<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">MethodAroundAdvice</span><span class="token punctuation">(</span><span class="token class-name">DataBasesConfig</span> dataBasesConfig<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>dataBasesConfig <span class="token operator">=</span> dataBasesConfig<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">,</span> <span class="token class-name">Object</span> target<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"before {} called"</span><span class="token punctuation">,</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterReturning</span><span class="token punctuation">(</span><span class="token class-name">Object</span> returnValue<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">,</span> <span class="token class-name">Object</span> target<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"after {} called"</span><span class="token punctuation">,</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;MyBatis 多源数据库切换问题，希望通过注解标注 Dao 类的数据库源，但使用注解切点表达式，因实现类是 MyBatis 动态代理生成，无法在实现类上添加注解，而添加到接口上又无效，需要寻找替代方案。&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://jueee.github.io/categories/Java/"/>
    
    <category term="Spring" scheme="https://jueee.github.io/categories/Java/Spring/"/>
    
    
    <category term="Java" scheme="https://jueee.github.io/tags/Java/"/>
    
    <category term="Spring" scheme="https://jueee.github.io/tags/Spring/"/>
    
    <category term="AOP" scheme="https://jueee.github.io/tags/AOP/"/>
    
  </entry>
  
  <entry>
    <title>自定义 element-ui 的 table 表格数据样式</title>
    <link href="https://jueee.github.io/2021/01/2021-01-25-%E8%87%AA%E5%AE%9A%E4%B9%89element-ui%E7%9A%84table%E8%A1%A8%E6%A0%BC%E6%95%B0%E6%8D%AE%E6%A0%B7%E5%BC%8F/"/>
    <id>https://jueee.github.io/2021/01/2021-01-25-%E8%87%AA%E5%AE%9A%E4%B9%89element-ui%E7%9A%84table%E8%A1%A8%E6%A0%BC%E6%95%B0%E6%8D%AE%E6%A0%B7%E5%BC%8F/</id>
    <published>2021-01-25T00:00:00.000Z</published>
    <updated>2021-01-28T09:01:42.658Z</updated>
    
    <content type="html"><![CDATA[<p>有需要根据不同状态来区分 table 数据样式的需求，比如更换不同的颜色。</p><a id="more"></a><h3 id="原始状态"><a href="#原始状态" class="headerlink" title="原始状态"></a>原始状态</h3><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table</span> <span class="token attr-name">:data</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tableData<span class="token punctuation">"</span></span> <span class="token attr-name">border</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span> 70%</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">fixed</span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>编号<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>图书名<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>120<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>author<span class="token punctuation">"</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>作者<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>120<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>status<span class="token punctuation">"</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>状态<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>120<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table</span><span class="token punctuation">&gt;</span></span></code></pre><p><img src="/images/2021/01/image-20210125184037289.png" alt="image-20210125184037289" loading="lazy"></p><h3 id="方案一：简单判断"><a href="#方案一：简单判断" class="headerlink" title="方案一：简单判断"></a>方案一：简单判断</h3><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table</span> <span class="token attr-name">:data</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tableData<span class="token punctuation">"</span></span> <span class="token attr-name">border</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span> 70%</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">fixed</span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>编号<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>图书名<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>120<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>author<span class="token punctuation">"</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>作者<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>120<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>status<span class="token punctuation">"</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>状态<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>120<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot-scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>scope<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>scope.row.status === <span class="token punctuation">'</span>1<span class="token punctuation">'</span><span class="token punctuation">"</span></span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>green<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>已收藏<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">v-else-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>scope.row.status === <span class="token punctuation">'</span>2<span class="token punctuation">'</span><span class="token punctuation">"</span></span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>red<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>正阅读<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">v-else</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>blue<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>已读完<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table</span><span class="token punctuation">&gt;</span></span></code></pre><p>效果：</p><p><img src="/images/2021/01/image-20210125192704801.png" alt="image-20210125192704801" loading="lazy"></p><h3 id="方案二：cell-style"><a href="#方案二：cell-style" class="headerlink" title="方案二：cell-style"></a>方案二：cell-style</h3><p><span class="exturl" data-url="aHR0cHM6Ly9lbGVtZW50LmVsZW1lLmNuLyMvemgtQ04vY29tcG9uZW50L3RhYmxl">elementUI 文档<i class="fa fa-external-link-alt"></i></span>，有个 cell-style 的属性，可以通过回调，返回样式。</p><p><img src="/images/2021/01/image-20210125192415426.png" alt="image-20210125192415426" loading="lazy"></p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table</span> <span class="token attr-name">:data</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tableData<span class="token punctuation">"</span></span> <span class="token attr-name">border</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span> max-content<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span> <span class="token attr-name">:cell-</span><span class="token style-attr language-css"><span class="token attr-name"><span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value">cellStyle</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">fixed</span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>编号<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>图书名<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>120<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>author<span class="token punctuation">"</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>作者<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>120<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>status<span class="token punctuation">"</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>状态<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>120<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table</span><span class="token punctuation">&gt;</span></span></code></pre><p>其中：</p><pre class="language-js" data-language="js"><code class="language-js">methods<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token function">cellStyle</span><span class="token punctuation">(</span><span class="token parameter">row<span class="token punctuation">,</span>column<span class="token punctuation">,</span>rowIndex<span class="token punctuation">,</span>columnIndex</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">// console.log(row);</span>        <span class="token comment">// console.log(row.column);</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>row<span class="token punctuation">.</span>column<span class="token punctuation">.</span>label<span class="token operator">===</span><span class="token string">"状态"</span> <span class="token operator">&amp;&amp;</span> row<span class="token punctuation">.</span>row<span class="token punctuation">.</span>status<span class="token operator">===</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"color:green"</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>row<span class="token punctuation">.</span>column<span class="token punctuation">.</span>label<span class="token operator">===</span><span class="token string">"状态"</span> <span class="token operator">&amp;&amp;</span> row<span class="token punctuation">.</span>row<span class="token punctuation">.</span>status<span class="token operator">===</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">'color:red'</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>row<span class="token punctuation">.</span>column<span class="token punctuation">.</span>label<span class="token operator">===</span><span class="token string">"状态"</span> <span class="token operator">&amp;&amp;</span> row<span class="token punctuation">.</span>row<span class="token punctuation">.</span>status<span class="token operator">===</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">'color:blue'</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><p>效果：</p><p><img src="/images/2021/01/image-20210125192823150.png" alt="image-20210125192823150" loading="lazy"></p><h3 id="方案三：row-class-name"><a href="#方案三：row-class-name" class="headerlink" title="方案三：row-class-name"></a>方案三：row-class-name</h3><p><span class="exturl" data-url="aHR0cHM6Ly9lbGVtZW50LmVsZW1lLmNuLyMvemgtQ04vY29tcG9uZW50L3RhYmxl">elementUI 文档<i class="fa fa-external-link-alt"></i></span>，有个 row-class-name 的属性，可以通过回调，返回 Class。</p><p><img src="/images/2021/01/image-20210127100913363.png" alt="image-20210127100913363" loading="lazy"></p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table</span> <span class="token attr-name">:data</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tableData<span class="token punctuation">"</span></span> <span class="token attr-name">border</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span> max-content<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span> <span class="token attr-name">:row-class-name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tableRowClassName<span class="token punctuation">"</span></span> <span class="token attr-name">:header-cell-</span><span class="token style-attr language-css"><span class="token attr-name"><span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value">getRowClass</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">fixed</span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>编号<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>图书名<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>120<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>author<span class="token punctuation">"</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>作者<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>120<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>status<span class="token punctuation">"</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>状态<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>120<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table</span><span class="token punctuation">&gt;</span></span></code></pre><p>其中：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">getRowClass</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> rowIndex <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 为表格头行添加样式</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>rowIndex <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">'background:#ebeaef'</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">''</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function">tableRowClassName</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> row<span class="token punctuation">,</span> rowIndex <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 为表格行添加样式</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>rowIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">'double'</span>　　<span class="token comment">//  基数行对应的类</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">'single'</span>　　<span class="token comment">//  偶数行对应的类</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>样式如下：</p><pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">.double</span> <span class="token punctuation">{</span>  <span class="token property">background</span><span class="token punctuation">:</span> #e9a7a7 <span class="token important">!important</span><span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.single</span> <span class="token punctuation">{</span>  <span class="token property">background</span><span class="token punctuation">:</span> #9ebce9 <span class="token important">!important</span><span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>效果：</p><p><img src="/images/2021/01/image-20210127101205407.png" alt="image-20210127101205407" loading="lazy"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;有需要根据不同状态来区分 table 数据样式的需求，比如更换不同的颜色。&lt;/p&gt;</summary>
    
    
    
    <category term="Vue" scheme="https://jueee.github.io/categories/Vue/"/>
    
    
    <category term="Vue" scheme="https://jueee.github.io/tags/Vue/"/>
    
    <category term="elementUI" scheme="https://jueee.github.io/tags/elementUI/"/>
    
  </entry>
  
</feed>
