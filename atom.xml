<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小决的专栏</title>
  
  <subtitle>进一寸有一寸的欢喜</subtitle>
  <link href="https://jueee.github.io/atom.xml" rel="self"/>
  
  <link href="https://jueee.github.io/"/>
  <updated>2020-10-20T03:15:36.627Z</updated>
  <id>https://jueee.github.io/</id>
  
  <author>
    <name>小决</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>PHP 之 Smarty 模板引擎使用汇总</title>
    <link href="https://jueee.github.io/2020/10/2020-10-20-PHP%E4%B9%8BSmarty%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E4%BD%BF%E7%94%A8%E6%B1%87%E6%80%BB/"/>
    <id>https://jueee.github.io/2020/10/2020-10-20-PHP%E4%B9%8BSmarty%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E4%BD%BF%E7%94%A8%E6%B1%87%E6%80%BB/</id>
    <published>2020-10-20T00:00:00.000Z</published>
    <updated>2020-10-20T03:15:36.627Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Smarty-介绍"><a href="#Smarty-介绍" class="headerlink" title="Smarty 介绍"></a>Smarty 介绍</h3><p>Smarty 是 PHP 的一个引擎模板，可以更好的进行逻辑与显示的分离，即我们常说的 MVC，这个引擎的作用就是将 C 分离出来。</p><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuc21hcnR5Lm5ldC8=">官网<i class="fa fa-external-link-alt"></i></span>：<span class="exturl" data-url="aHR0cHM6Ly93d3cuc21hcnR5Lm5ldC8=">https://www.smarty.net/<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuc21hcnR5Lm5ldC9kb2NzL3poX0NOLw==">中文手册<i class="fa fa-external-link-alt"></i></span>：<span class="exturl" data-url="aHR0cHM6Ly93d3cuc21hcnR5Lm5ldC9kb2NzL3poX0NOLw==">https://www.smarty.net/docs/zh_CN/<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NtYXJ0eS1waHAvc21hcnR5Lw==">GitHub<i class="fa fa-external-link-alt"></i></span>：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NtYXJ0eS1waHAvc21hcnR5Lw==">https://github.com/smarty-php/smarty/<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NtYXJ0eS1waHAvc21hcnR5L3JlbGVhc2Vz">下载<i class="fa fa-external-link-alt"></i></span>：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NtYXJ0eS1waHAvc21hcnR5L3JlbGVhc2Vz">https://github.com/smarty-php/smarty/releases<i class="fa fa-external-link-alt"></i></span></li></ul><a id="more"></a><h3 id="Smarty-安装"><a href="#Smarty-安装" class="headerlink" title="Smarty 安装"></a>Smarty 安装</h3><p>在网上下载 Smarty 包直接将其解压，我们需要的仅仅是里面的 libs 文件夹。</p><p>Libs 文件里面都是库文件，我们不应该修改里面的任何内容。</p><p>解压完毕后就直接将 libs 文件夹放入到我们需要使用的网站根目录。</p><p><img src="/images/2020/10/1603086382391.png" alt="image-20201019173920839" loading="lazy"></p><h3 id="Smarty-配置"><a href="#Smarty-配置" class="headerlink" title="Smarty 配置"></a>Smarty 配置</h3><p>首先打开 Smarty.class.php 文件看看里面的一些代码：</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">protected</span> <span class="token variable">$template_dir</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'./templates/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">protected</span> <span class="token variable">$config_dir</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'./configs/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">protected</span> <span class="token variable">$compile_dir</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'./templates_c/'</span><span class="token punctuation">;</span><span class="token keyword">protected</span> <span class="token variable">$cache_dir</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'./cache/'</span><span class="token punctuation">;</span></code></pre><p>Smarty 的构造器：</p><ul><li>templates：默认存放模板文件夹</li><li> templates_c：默认存放混编文件的文件夹</li><li> cache：存放缓存</li><li> configs：存放配置文件</li></ul><p>默认左右边界符：</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span> <span class="token variable">$left_delimiter</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"{"</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token variable">$right_delimiter</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"}"</span><span class="token punctuation">;</span></code></pre><h3 id="Smarty-简单使用"><a href="#Smarty-简单使用" class="headerlink" title="Smarty 简单使用"></a>Smarty 简单使用</h3><p>从上文了解到 Smarty 需要一些文件夹用来分别存放不同类别的文件。有 templates、templates_c、cache、configs 等文件夹。这是默认文件夹名称，你可以根据你的喜好对它们进行更改。</p><p>下面是我建立的文件夹：</p><p><img src="/images/2020/10/1603087940434.png" alt="1603087940434" loading="lazy"></p><p>简单实例：</p><ol><li><p>先在 templates 文件夹下准备自己需要的模板文件。test1.html</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>smarty test1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>我的名字叫{$name}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span></code></pre></li><li><p>在根目录下建立访问的逻辑文件。test1.php</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">require</span> <span class="token single-quoted-string string">'./libs/Smarty.class.php'</span><span class="token punctuation">;</span><span class="token variable">$smarty</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Smarty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$name</span><span class="token operator">=</span><span class="token single-quoted-string string">'小决'</span><span class="token punctuation">;</span><span class="token variable">$smarty</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">assign</span><span class="token punctuation">(</span> <span class="token single-quoted-string string">'name'</span> <span class="token punctuation">,</span> <span class="token variable">$name</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$smarty</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'./test1.html'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre></li><li><p>访问 test1.php 结果为：</p><p><img src="/images/2020/10/1603088135288.png" alt="1603088135288" loading="lazy"></p></li><li><p>当访问完后将会在 templates_c 中生成一个相应的混编文件。</p></li></ol><h3 id="Smarty-常用语法"><a href="#Smarty-常用语法" class="headerlink" title="Smarty 常用语法"></a>Smarty 常用语法</h3><h4 id="普通变量的声明与使用"><a href="#普通变量的声明与使用" class="headerlink" title="普通变量的声明与使用"></a>普通变量的声明与使用</h4><p>一共有两种声明变量的方法。</p><ol><li>即 $smarty-&gt;assign ('name',' 值 ');</li><li> 第二种：在模板文件中声明（html 中），即 {assignvar='name'value=' 值 '}</li></ol><p>使用：{$name}</p><p>注意：也可以定义与使用数组。假若上面定义的 name 为一个一维数组，使用时即：{$name [2]}、{$name ['aa']}={$name.aa} 等等使用方式。</p><h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token punctuation">{</span><span class="token operator">*</span>这里面是注释内容<span class="token operator">*</span><span class="token punctuation">}</span></code></pre><p>Smarty 的注释是不会在最终页面输出显示的，即：若在 html 里则效果像 <code>&lt;!--注释--&gt;</code> 一样，不过也有一定的区别，Smarty 的注释在浏览器里查看源代码也是不显示的，而 html 的注释是显示的。</p><p>代码：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--HTML注释--&gt;</span>{* 这里面是注释内容 *}我的名字叫{$name}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span></code></pre><p>结果：</p><p><img src="/images/2020/10/1603088825916.png" alt="1603088825916" loading="lazy"></p><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><p>Smarty 对数组的使用：数组 [下标]、数组。下标</p><h4 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h4><p>对象的声明和变量一样，通过 assign 来声明使用采用 -&gt; 来调用对象的属性。</p><ol><li><p>test2.php</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">require</span> <span class="token single-quoted-string string">'./libs/Smarty.class.php'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token variable">$name</span><span class="token operator">=</span><span class="token double-quoted-string string">"小决"</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token variable">$sex</span><span class="token operator">=</span><span class="token double-quoted-string string">"男"</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token variable">$age</span><span class="token operator">=</span><span class="token single-quoted-string string">'18'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$smarty</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Smarty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$test</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$smarty</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">assign</span><span class="token punctuation">(</span> <span class="token single-quoted-string string">'test'</span> <span class="token punctuation">,</span> <span class="token variable">$test</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$smarty</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'./test2.html'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre></li><li><p>test2.html</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>smarty test2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>名字：{$test-&gt;name}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>br</span><span class="token punctuation">&gt;</span></span>性别：{$test-&gt;sex}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>br</span><span class="token punctuation">&gt;</span></span>年龄：{$test-&gt;age}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>br</span><span class="token punctuation">&gt;</span></span>{$smarty.now}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span></code></pre></li><li><p>结果：</p><p><img src="/images/2020/10/1603089300156.png" alt="1603089300156" loading="lazy"></p></li></ol><h4 id="保留变量"><a href="#保留变量" class="headerlink" title="保留变量"></a>保留变量</h4><p>Smarty 中有一个特殊的变量（就是 smarty）可以通过这个变量很容易就可以访问到一些环境变量。就像 PHP 中的超全局变量一样神奇。</p><p><strong>注意</strong>：在使用这个保留变量的时候：smarty 是对于大小写敏感的，我们需要的是小写的 smarty。</p><p>例子：</p><ol><li><p>使用 smarty 访问 PHP 中的超全局数组变量：</p><ul><li>获取 <code>$_GET{$smarty.get.name}</code> 获取 get 中的 name 值</li><li>获取 <code>$_POST{$smarty.post.name}</code> 获取 post 中的 name 值</li><li>获取 <code>$_COOKIE{$smarty.cooke.name}</code> 获取 cookie 中的 name 值</li></ul><p>同理，还可以获取 <code>$_SERVER</code>,<code>$_ENV</code> 和 <code>$_SESSION</code> 等等。</p><p>注意：虽然 Smarty 提供了较方便直接访问 PHP 超全局变量的方法，但必须谨慎使用。直接访问超全局变量会弄乱应用程序底层代码和模板语法。</p><p>最佳的实践是从 PHP 将需要的变量对模板进行赋值再使用。</p></li><li><p>获取当前时间戳 <code>{$smarty.now}</code> 其原理就是调用了 <code>timr()</code> 函数</p></li><li><p>直接访问 PHP 常量 <code>{$smarty.const.常量名}</code>，即：<code>{$smarty.const.AGE}</code></p><p>PHP 定义常量 smarty 直接调用常量结果</p></li><li><p>其他</p><ul><li>获取配置变量：{$smarty.config}</li><li> 返回当前模板名称：{$smarty.template}</li><li> 返回当前模板对象：{$smarty.template_object}</li><li> 返回当前目录名称：{$smarty.current_dir}</li></ul></li></ol><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><p>在之前根据需求建立的 Configs 文件夹下，建立 Smarty.conf 配置文件（命名任意，木有明确规定），配置文件可以让设计者将全局的模板变量以文件的方式管理起来。</p><p>首先我们先来定义一些配置变量来对它进行简单的了解：</p><ol><li><p>定义如下所示 的 <code>Smarty.conf</code> 文件：</p><pre class="language-conf" data-language="conf"><code class="language-conf">title='标题'bodyColor='#eee'</code></pre></li><li><p>引入配置文件：{config_loadfile='Smarty.conf'}</p></li><li><p>引用配置变量：、{$smarty.config. 配置变量}</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>{config_load  file='Smarty.conf'}配置变量1：{#title#}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>br</span><span class="token punctuation">&gt;</span></span>配置变量2：{$smarty.config.bodyColor}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span></code></pre></li><li><p>查看：</p><p><img src="/images/2020/10/image-20201020095437334.png" alt="image-20201020095437334" loading="lazy"></p></li></ol><h4 id="段落变量"><a href="#段落变量" class="headerlink" title="段落变量"></a>段落变量</h4><p>在 Smarty 配置文件中大体分为两种变量，一种为全局变量，另一种为段落变量。</p><ul><li>全局全局变量故名思议就是就是每次载入这个配置文件的时候这些变量都会被加载</li><li>段落变量则有选择的进行加载。</li></ul><p>段落变量的定义语法：[段落名字]</p><p>段落名字：这里可以是任意字符但不包括 <code>[</code> 和 <code>]</code>。</p><p>调用段落变量：在引入配置文件后面加上这段代码 <code>section='段落名字'</code>。</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token punctuation">{</span>config_load file<span class="token operator">=</span><span class="token single-quoted-string string">'Smarty.conf'</span> section<span class="token operator">=</span><span class="token single-quoted-string string">'firstStyle'</span><span class="token punctuation">}</span></code></pre><p><strong>注意</strong>：section 只能使用一次，若有多个 section 引入多个段落变量则最后一个会覆盖前面的所有 section 引入的段落变量，即只有最后一个引入的段落变量有用其他作废。</p><p>特别说明：</p><ol><li>若全局变量与被加载的段落变量有相同的变量名，则段落名的值将覆盖全局变量的值。</li><li>若某个段落变量里含有相同的变量名，则最后一个的变量的值将会覆盖前面的值。</li><li>在整个 smarty.conf 文件中，点（.）拥有相对较高的权限的。点的作用是将一个变量或者整个段落隐藏，不能被使用。（我的理解就是相当于被注释掉不能被使用）</li></ol><p>简单应用：</p><ol><li><p>配置文件：<code>test5.conf</code></p><pre class="language-conf" data-language="conf"><code class="language-conf">#段落变量#第一种颜色风格[firstStyle]color='#00f'width='300px'height='300px'content='第一种风格'#第二种颜色风格[secondStyle]color='#0f0'width='500px'height='500px'content='第二种风格'</code></pre></li><li><p>php 文件：<code>test5.php</code></p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">require</span> <span class="token single-quoted-string string">'./libs/Smarty.class.php'</span><span class="token punctuation">;</span><span class="token variable">$smarty</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Smarty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$smarty</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'./test5.html'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre></li><li><p>模板文件：<code>test5.html</code></p><pre class="language-html" data-language="html"><code class="language-html">{config_load file='Smarty.conf' section='firstStyle'}<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>smarty test1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css"><span class="token selector">#aa</span><span class="token punctuation">{</span> <span class="token selector">width:</span> <span class="token punctuation">{</span>#width#<span class="token punctuation">}</span><span class="token selector">;height:</span> <span class="token punctuation">{</span>#height#<span class="token punctuation">}</span><span class="token selector">;background:</span> <span class="token punctuation">{</span>#color#<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>aa<span class="token punctuation">'</span></span><span class="token punctuation">&gt;</span></span>这是一个div<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>{#content#}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span></code></pre></li><li><p>效果：</p><p><img src="/images/2020/10/image-20201020102811027.png" alt="image-20201020102811027" loading="lazy"></p></li><li><p>特别说明：</p><p>若 <code>#aa{width: 200px;height: 200px;background: red;}</code>。</p><p>则报错：</p><blockquote><p><strong>Fatal error</strong>: Uncaught --&gt; Smarty Compiler: Syntax error in template "file:E:\software\php\php-page\Smarty\templates\test5.html" on line 8 "#aa{width: ;height: ;background: ;}" - Unexpected ": ", expected one of: "}" &lt;-- thrown in <strong>E:\software\php\php-page\Smarty\libs\sysplugins\smarty_internal_templatecompilerbase.php</strong> on line <strong>8</strong></p></blockquote><p>这是由于使用了 smarty 模板，所以在 html 的所有 {} 将会被 smarty 解析。</p><p>解决办法：</p><ol><li><p>更换定界符</p></li><li><p>在 <code>{</code> 前面加一个空格：<code>#aa{ width: </code></p></li><li><p>使用 {literal}{/literal}  literal: 原样的，原义的</p><pre class="language-html" data-language="html"><code class="language-html">{literal}#aa{width{/literal}: {#width#};height: {#height#};background: {#color#};}</code></pre><p><strong>{literal} 标签会影响变量的解析！</strong></p></li></ol></li></ol><h4 id="模板布局"><a href="#模板布局" class="headerlink" title="模板布局"></a>模板布局</h4><p>即是模板的继承问题。使用的关键字主要有 block、extends</p><ol><li><p>先在站点建立一个 layout 文件夹（主要用来存放父模板文件），在文件夹下建立一个模板文件 template.html</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>这个是模板文件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>这个是模板文件输出的<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">/&gt;</span></span>子输出一：{block name='first'}{/block}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">/&gt;</span></span>子输出二：{block name='second'}{/block}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>这个是模板文件输出的<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span></code></pre></li><li><p>再建立模板文件 test.html，此模板需要继承上面的父模板</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token punctuation">{</span><span class="token keyword">extends</span> <span class="token class-name">file</span><span class="token operator">=</span><span class="token single-quoted-string string">'layout/template.html'</span><span class="token punctuation">}</span><span class="token punctuation">{</span>block name<span class="token operator">=</span><span class="token single-quoted-string string">'first'</span><span class="token punctuation">}</span>这里是test中的first<span class="token punctuation">{</span><span class="token operator">/</span>block<span class="token punctuation">}</span><span class="token punctuation">{</span>block name<span class="token operator">=</span><span class="token single-quoted-string string">'second'</span><span class="token punctuation">}</span>这里是test中的second<span class="token punctuation">{</span><span class="token operator">/</span>block<span class="token punctuation">}</span></code></pre></li><li><p>php 逻辑文件调用 smarty</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">require</span> <span class="token single-quoted-string string">'./libs/Smarty.class.php'</span><span class="token punctuation">;</span><span class="token variable">$smarty</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Smarty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$smarty</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'./test6.html'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre></li><li><p>访问结果</p><p><img src="/images/2020/10/image-20201020103849371.png" alt="image-20201020103849371" loading="lazy"></p></li></ol><p>若含较多的公共部分，则采用布局文件；含公共部分较少，则采用包含文件 {include file=' 文件路径 '}</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;Smarty-介绍&quot;&gt;&lt;a href=&quot;#Smarty-介绍&quot; class=&quot;headerlink&quot; title=&quot;Smarty 介绍&quot;&gt;&lt;/a&gt;Smarty 介绍&lt;/h3&gt;&lt;p&gt;Smarty 是 PHP 的一个引擎模板，可以更好的进行逻辑与显示的分离，即我们常说的 MVC，这个引擎的作用就是将 C 分离出来。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.smarty.net/&quot;&gt;官网&lt;/a&gt;：&lt;a href=&quot;https://www.smarty.net/&quot;&gt;https://www.smarty.net/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.smarty.net/docs/zh_CN/&quot;&gt;中文手册&lt;/a&gt;：&lt;a href=&quot;https://www.smarty.net/docs/zh_CN/&quot;&gt;https://www.smarty.net/docs/zh_CN/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/smarty-php/smarty/&quot;&gt;GitHub&lt;/a&gt;：&lt;a href=&quot;https://github.com/smarty-php/smarty/&quot;&gt;https://github.com/smarty-php/smarty/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/smarty-php/smarty/releases&quot;&gt;下载&lt;/a&gt;：&lt;a href=&quot;https://github.com/smarty-php/smarty/releases&quot;&gt;https://github.com/smarty-php/smarty/releases&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="PHP" scheme="https://jueee.github.io/categories/PHP/"/>
    
    
    <category term="PHP" scheme="https://jueee.github.io/tags/PHP/"/>
    
    <category term="Smarty" scheme="https://jueee.github.io/tags/Smarty/"/>
    
  </entry>
  
  <entry>
    <title>github 连接报 “ssh connect to host github.com port 22 Connection timed out” 错误</title>
    <link href="https://jueee.github.io/2020/10/2020-10-19-github%E8%BF%9E%E6%8E%A5%E6%8A%A5ssh%20connect%20to%20host%20github.com%20port%2022%20Connection%20timed%20out%E9%94%99%E8%AF%AF/"/>
    <id>https://jueee.github.io/2020/10/2020-10-19-github%E8%BF%9E%E6%8E%A5%E6%8A%A5ssh%20connect%20to%20host%20github.com%20port%2022%20Connection%20timed%20out%E9%94%99%E8%AF%AF/</id>
    <published>2020-10-19T00:00:00.000Z</published>
    <updated>2020-10-19T08:18:38.772Z</updated>
    
    <content type="html"><![CDATA[<p>Git 在提交 代码时，报错：</p><pre class="language-none"><code class="language-none">ssh: connect to host github.com port 22: Connection timed outfatal: Could not read from remote repository.</code></pre><a id="more"></a><p>在连接 github 时，执行”ssh -T <span class="exturl" data-url="bWFpbHRvOmdpdEBnaXRodWIuY29t">git@github.com<i class="fa fa-external-link-alt"></i></span>” 命令时，出现：</p><pre class="language-none"><code class="language-none">$ ssh -T git@github.comssh: connect to host github.com port 22: Connection timed out</code></pre><p>在存放公钥私钥 (id_rsa 和 id_rsa.pub) 的同级文件夹中，新建 config 文本，内容如下：</p><pre class="language-none"><code class="language-none">Host github.comUser hellojue@foxmail.comHostname ssh.github.comPreferredAuthentications publickeyIdentityFile ~/.ssh/id_rsaPort 443</code></pre><p>其中 User 为登录 github 的账号名称。</p><p>再次执行”ssh -T <span class="exturl" data-url="bWFpbHRvOmdpdEBnaXRodWIuY29t">git@github.com<i class="fa fa-external-link-alt"></i></span>” 时，这时验证就可以通过。</p><pre class="language-none"><code class="language-none">$ ssh -T git@github.comHi Jueee! You've successfully authenticated, but GitHub does not provide shell access.</code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;Git 在提交 代码时，报错：&lt;/p&gt;
&lt;pre class=&quot;language-none&quot;&gt;&lt;code class=&quot;language-none&quot;&gt;ssh: connect to host github.com port 22: Connection timed out
fatal: Could not read from remote repository.&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="Git" scheme="https://jueee.github.io/categories/Git/"/>
    
    
    <category term="Git" scheme="https://jueee.github.io/tags/Git/"/>
    
    <category term="GitHub" scheme="https://jueee.github.io/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>PHP 之通过 PDO 操作 MySQL 数据库</title>
    <link href="https://jueee.github.io/2020/10/2020-10-18-PHP%E4%B9%8B%E9%80%9A%E8%BF%87PDO%E6%93%8D%E4%BD%9CMySQL%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>https://jueee.github.io/2020/10/2020-10-18-PHP%E4%B9%8B%E9%80%9A%E8%BF%87PDO%E6%93%8D%E4%BD%9CMySQL%E6%95%B0%E6%8D%AE%E5%BA%93/</id>
    <published>2020-10-18T00:00:00.000Z</published>
    <updated>2020-10-20T03:14:30.778Z</updated>
    
    <content type="html"><![CDATA[<h3 id="PDO介绍"><a href="#PDO介绍" class="headerlink" title="PDO介绍"></a>PDO 介绍</h3><p><strong>PDO (PHP Data Objects)</strong> 提供了 PHP 操作多种数据库的统一的接口。</p><h4 id="PDO特点"><a href="#PDO特点" class="headerlink" title="PDO特点"></a>PDO 特点</h4><ul><li><p><strong>编码的一致性</strong></p><p>由于 PHP 可用的各种数据库扩展是由不同发行者编写的，所以尽管所有的扩展都提供了基本相同的特性，却不 满 足编码的一致性。PDO 消除了这种不一致，提供了可用于各种数据库的单一接口；</p></li><li><p><strong>灵活性</strong></p></li></ul><p>  因为 PDO 在运行时加载必须的数据库驱动程序，所以不需要在每次使用不同数据库时重新配置和重新编译 PHP。例如，如果数据库需要从 SQL 切换到 MySQL，只需要加载 PDO_MYSQL 驱动程序就可以了。</p><ul><li><strong>面向对象特性</strong></li></ul><p>  PDO 利用 PHP5 的面向对象特性，可以获得更强大、更高效的数据库通信。</p><ul><li><strong>高性能</strong></li></ul><p>  PDO 是用 C 编写的，编译为 PHP，与用 PHP 编写的其他解决方案相比，虽然其他都相同，但提供了更高的性能。</p><a id="more"></a><h3 id="PDO安装"><a href="#PDO安装" class="headerlink" title="PDO安装"></a>PDO 安装</h3><p>For 安装详细信息，请查看： <span class="exturl" data-url="aHR0cDovL3BocC5uZXQvbWFudWFsL2VuL3Bkby5pbnN0YWxsYXRpb24ucGhw">http://php.net/manual/en/pdo.installation.php<i class="fa fa-external-link-alt"></i></span></p><p>可以通过 phpinfo () 查看是否安装成功：</p><p><img src="/images/2020/10/1603077433392.png" alt="1603077433392" loading="lazy"></p><h3 id="连接-MySQL"><a href="#连接-MySQL" class="headerlink" title="连接 MySQL"></a>连接 MySQL</h3><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$servername</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"localhost"</span><span class="token punctuation">;</span><span class="token variable">$username</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"username"</span><span class="token punctuation">;</span><span class="token variable">$password</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"password"</span><span class="token punctuation">;</span> <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PDO</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"mysql:host=<span class="token interpolation"><span class="token variable">$servername</span></span>;"</span><span class="token punctuation">,</span> <span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token double-quoted-string string">"连接成功"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>PDOException <span class="token variable">$e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token variable">$e</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter important">?&gt;</span></span></code></pre><h3 id="关闭连接"><a href="#关闭连接" class="headerlink" title="关闭连接"></a>关闭连接</h3><p>连接在脚本执行完后会自动关闭。你也可以使用以下代码来关闭连接：</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span></code></pre><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$servername</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"localhost"</span><span class="token punctuation">;</span><span class="token variable">$username</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"username"</span><span class="token punctuation">;</span><span class="token variable">$password</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"password"</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PDO</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"mysql:host=<span class="token interpolation"><span class="token variable">$servername</span></span>"</span><span class="token punctuation">,</span> <span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 设置 PDO 错误模式为异常</span>    <span class="token variable">$conn</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token constant">PDO</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">ATTR_ERRMODE</span><span class="token punctuation">,</span> <span class="token constant">PDO</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">ERRMODE_EXCEPTION</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"CREATE DATABASE myDBPDO"</span><span class="token punctuation">;</span>    <span class="token comment">// 使用 exec() ，因为没有结果返回</span>    <span class="token variable">$conn</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token double-quoted-string string">"数据库创建成功&lt;br&gt;"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>PDOException <span class="token variable">$e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token variable">$sql</span> <span class="token punctuation">.</span> <span class="token double-quoted-string string">"&lt;br&gt;"</span> <span class="token punctuation">.</span> <span class="token variable">$e</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span></code></pre><h3 id="创建-MySQL-表"><a href="#创建-MySQL-表" class="headerlink" title="创建 MySQL 表"></a>创建 MySQL 表</h3><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$servername</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"localhost"</span><span class="token punctuation">;</span><span class="token variable">$username</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"username"</span><span class="token punctuation">;</span><span class="token variable">$password</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"password"</span><span class="token punctuation">;</span><span class="token variable">$dbname</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"myDBPDO"</span><span class="token punctuation">;</span> <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PDO</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"mysql:host=<span class="token interpolation"><span class="token variable">$servername</span></span>;dbname=<span class="token interpolation"><span class="token variable">$dbname</span></span>"</span><span class="token punctuation">,</span> <span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 设置 PDO 错误模式，用于抛出异常</span>    <span class="token variable">$conn</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token constant">PDO</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">ATTR_ERRMODE</span><span class="token punctuation">,</span> <span class="token constant">PDO</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">ERRMODE_EXCEPTION</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 使用 sql 创建数据表</span>    <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"CREATE TABLE MyGuests (    id INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY,     firstname VARCHAR(30) NOT NULL,    lastname VARCHAR(30) NOT NULL,    email VARCHAR(50),    reg_date TIMESTAMP    )"</span><span class="token punctuation">;</span>     <span class="token comment">// 使用 exec() ，没有结果返回 </span>    <span class="token variable">$conn</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token double-quoted-string string">"数据表 MyGuests 创建成功"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>PDOException <span class="token variable">$e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token variable">$sql</span> <span class="token punctuation">.</span> <span class="token double-quoted-string string">"&lt;br&gt;"</span> <span class="token punctuation">.</span> <span class="token variable">$e</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span></code></pre><h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$servername</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"localhost"</span><span class="token punctuation">;</span><span class="token variable">$username</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"username"</span><span class="token punctuation">;</span><span class="token variable">$password</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"password"</span><span class="token punctuation">;</span><span class="token variable">$dbname</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"myDBPDO"</span><span class="token punctuation">;</span> <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PDO</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"mysql:host=<span class="token interpolation"><span class="token variable">$servername</span></span>;dbname=<span class="token interpolation"><span class="token variable">$dbname</span></span>"</span><span class="token punctuation">,</span> <span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 设置 PDO 错误模式，用于抛出异常</span>    <span class="token variable">$conn</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token constant">PDO</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">ATTR_ERRMODE</span><span class="token punctuation">,</span> <span class="token constant">PDO</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">ERRMODE_EXCEPTION</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"INSERT INTO MyGuests (firstname, lastname, email)    VALUES ('John', 'Doe', 'john@example.com')"</span><span class="token punctuation">;</span>    <span class="token comment">// 使用 exec() ，没有结果返回 </span>    <span class="token variable">$conn</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token double-quoted-string string">"新记录插入成功"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>PDOException <span class="token variable">$e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token variable">$sql</span> <span class="token punctuation">.</span> <span class="token double-quoted-string string">"&lt;br&gt;"</span> <span class="token punctuation">.</span> <span class="token variable">$e</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span></code></pre><h3 id="插入多条数据"><a href="#插入多条数据" class="headerlink" title="插入多条数据"></a>插入多条数据</h3><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$servername</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"localhost"</span><span class="token punctuation">;</span><span class="token variable">$username</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"username"</span><span class="token punctuation">;</span><span class="token variable">$password</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"password"</span><span class="token punctuation">;</span><span class="token variable">$dbname</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"myDBPDO"</span><span class="token punctuation">;</span> <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PDO</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"mysql:host=<span class="token interpolation"><span class="token variable">$servername</span></span>;dbname=<span class="token interpolation"><span class="token variable">$dbname</span></span>"</span><span class="token punctuation">,</span> <span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// set the PDO error mode to exception</span>    <span class="token variable">$conn</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token constant">PDO</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">ATTR_ERRMODE</span><span class="token punctuation">,</span> <span class="token constant">PDO</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">ERRMODE_EXCEPTION</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 开始事务</span>    <span class="token variable">$conn</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">beginTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// SQL 语句</span>    <span class="token variable">$conn</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"INSERT INTO MyGuests (firstname, lastname, email)     VALUES ('John', 'Doe', 'john@example.com')"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$conn</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"INSERT INTO MyGuests (firstname, lastname, email)     VALUES ('Mary', 'Moe', 'mary@example.com')"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$conn</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"INSERT INTO MyGuests (firstname, lastname, email)     VALUES ('Julie', 'Dooley', 'julie@example.com')"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 提交事务</span>    <span class="token variable">$conn</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token double-quoted-string string">"新记录插入成功"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>PDOException <span class="token variable">$e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">// 如果执行失败回滚</span>    <span class="token variable">$conn</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token variable">$sql</span> <span class="token punctuation">.</span> <span class="token double-quoted-string string">"&lt;br&gt;"</span> <span class="token punctuation">.</span> <span class="token variable">$e</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span></code></pre><h3 id="使用预处理语句"><a href="#使用预处理语句" class="headerlink" title="使用预处理语句"></a>使用预处理语句</h3><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$servername</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"localhost"</span><span class="token punctuation">;</span><span class="token variable">$username</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"username"</span><span class="token punctuation">;</span><span class="token variable">$password</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"password"</span><span class="token punctuation">;</span><span class="token variable">$dbname</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"myDBPDO"</span><span class="token punctuation">;</span> <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PDO</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"mysql:host=<span class="token interpolation"><span class="token variable">$servername</span></span>;dbname=<span class="token interpolation"><span class="token variable">$dbname</span></span>"</span><span class="token punctuation">,</span> <span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 设置 PDO 错误模式为异常</span>    <span class="token variable">$conn</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token constant">PDO</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">ATTR_ERRMODE</span><span class="token punctuation">,</span> <span class="token constant">PDO</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">ERRMODE_EXCEPTION</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 预处理 SQL 并绑定参数</span>    <span class="token variable">$stmt</span> <span class="token operator">=</span> <span class="token variable">$conn</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"INSERT INTO MyGuests (firstname, lastname, email)     VALUES (:firstname, :lastname, :email)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$stmt</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">bindParam</span><span class="token punctuation">(</span><span class="token single-quoted-string string">':firstname'</span><span class="token punctuation">,</span> <span class="token variable">$firstname</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$stmt</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">bindParam</span><span class="token punctuation">(</span><span class="token single-quoted-string string">':lastname'</span><span class="token punctuation">,</span> <span class="token variable">$lastname</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$stmt</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">bindParam</span><span class="token punctuation">(</span><span class="token single-quoted-string string">':email'</span><span class="token punctuation">,</span> <span class="token variable">$email</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 插入行</span>    <span class="token variable">$firstname</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"John"</span><span class="token punctuation">;</span>    <span class="token variable">$lastname</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"Doe"</span><span class="token punctuation">;</span>    <span class="token variable">$email</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"john@example.com"</span><span class="token punctuation">;</span>    <span class="token variable">$stmt</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 插入其他行</span>    <span class="token variable">$firstname</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"Mary"</span><span class="token punctuation">;</span>    <span class="token variable">$lastname</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"Moe"</span><span class="token punctuation">;</span>    <span class="token variable">$email</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"mary@example.com"</span><span class="token punctuation">;</span>    <span class="token variable">$stmt</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 插入其他行</span>    <span class="token variable">$firstname</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"Julie"</span><span class="token punctuation">;</span>    <span class="token variable">$lastname</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"Dooley"</span><span class="token punctuation">;</span>    <span class="token variable">$email</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"julie@example.com"</span><span class="token punctuation">;</span>    <span class="token variable">$stmt</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">echo</span> <span class="token double-quoted-string string">"新记录插入成功"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>PDOException <span class="token variable">$e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token double-quoted-string string">"Error: "</span> <span class="token punctuation">.</span> <span class="token variable">$e</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span></code></pre><h3 id="查询读取数据"><a href="#查询读取数据" class="headerlink" title="查询读取数据"></a>查询读取数据</h3><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;table style='border: solid 1px black;'&gt;"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;tr&gt;&lt;th&gt;Id&lt;/th&gt;&lt;th&gt;Firstname&lt;/th&gt;&lt;th&gt;Lastname&lt;/th&gt;&lt;/tr&gt;"</span><span class="token punctuation">;</span> <span class="token keyword">class</span> <span class="token class-name">TableRows</span> <span class="token keyword">extends</span> <span class="token class-name">RecursiveIteratorIterator</span> <span class="token punctuation">{</span>    <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$it</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">parent</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$it</span><span class="token punctuation">,</span> self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">LEAVES_ONLY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">function</span> <span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token double-quoted-string string">"&lt;td style='width:150px;border:1px solid black;'&gt;"</span> <span class="token punctuation">.</span> <span class="token keyword">parent</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span> <span class="token double-quoted-string string">"&lt;/td&gt;"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">function</span> <span class="token function">beginChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;tr&gt;"</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>      <span class="token keyword">function</span> <span class="token function">endChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;/tr&gt;"</span> <span class="token punctuation">.</span> <span class="token double-quoted-string string">"\n"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span>  <span class="token variable">$servername</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"localhost"</span><span class="token punctuation">;</span><span class="token variable">$username</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"username"</span><span class="token punctuation">;</span><span class="token variable">$password</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"password"</span><span class="token punctuation">;</span><span class="token variable">$dbname</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"myDBPDO"</span><span class="token punctuation">;</span> <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PDO</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"mysql:host=<span class="token interpolation"><span class="token variable">$servername</span></span>;dbname=<span class="token interpolation"><span class="token variable">$dbname</span></span>"</span><span class="token punctuation">,</span> <span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$conn</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token constant">PDO</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">ATTR_ERRMODE</span><span class="token punctuation">,</span> <span class="token constant">PDO</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">ERRMODE_EXCEPTION</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$stmt</span> <span class="token operator">=</span> <span class="token variable">$conn</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"SELECT id, firstname, lastname FROM MyGuests"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token variable">$stmt</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 设置结果集为关联数组</span>    <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$stmt</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">setFetchMode</span><span class="token punctuation">(</span><span class="token constant">PDO</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">FETCH_ASSOC</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TableRows</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RecursiveArrayIterator</span><span class="token punctuation">(</span><span class="token variable">$stmt</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">fetchAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token variable">$k</span><span class="token operator">=</span><span class="token operator">&gt;</span><span class="token variable">$v</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">echo</span> <span class="token variable">$v</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>PDOException <span class="token variable">$e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token double-quoted-string string">"Error: "</span> <span class="token punctuation">.</span> <span class="token variable">$e</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;/table&gt;"</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span></code></pre><p>结果如下：</p><p><img src="/images/2020/10/1603079266750.png" alt="1603079266750" loading="lazy"></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;PDO介绍&quot;&gt;&lt;a href=&quot;#PDO介绍&quot; class=&quot;headerlink&quot; title=&quot;PDO介绍&quot;&gt;&lt;/a&gt;PDO 介绍&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;PDO (PHP Data Objects)&lt;/strong&gt; 提供了 PHP 操作多种数据库的统一的接口。&lt;/p&gt;
&lt;h4 id=&quot;PDO特点&quot;&gt;&lt;a href=&quot;#PDO特点&quot; class=&quot;headerlink&quot; title=&quot;PDO特点&quot;&gt;&lt;/a&gt;PDO 特点&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;编码的一致性&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;由于 PHP 可用的各种数据库扩展是由不同发行者编写的，所以尽管所有的扩展都提供了基本相同的特性，却不 满 足编码的一致性。PDO 消除了这种不一致，提供了可用于各种数据库的单一接口；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;灵活性&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;  因为 PDO 在运行时加载必须的数据库驱动程序，所以不需要在每次使用不同数据库时重新配置和重新编译 PHP。例如，如果数据库需要从 SQL 切换到 MySQL，只需要加载 PDO_MYSQL 驱动程序就可以了。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;面向对象特性&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;  PDO 利用 PHP5 的面向对象特性，可以获得更强大、更高效的数据库通信。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;高性能&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;  PDO 是用 C 编写的，编译为 PHP，与用 PHP 编写的其他解决方案相比，虽然其他都相同，但提供了更高的性能。&lt;/p&gt;</summary>
    
    
    
    <category term="MySQL" scheme="https://jueee.github.io/categories/MySQL/"/>
    
    <category term="PHP" scheme="https://jueee.github.io/categories/PHP/"/>
    
    
    <category term="MySQL" scheme="https://jueee.github.io/tags/MySQL/"/>
    
    <category term="PHP" scheme="https://jueee.github.io/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>PHP 之通过 MySQLi 操作 MySQL 数据库</title>
    <link href="https://jueee.github.io/2020/10/2020-10-17-PHP%E4%B9%8B%E9%80%9A%E8%BF%87MySQLi%E6%93%8D%E4%BD%9CMySQL%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>https://jueee.github.io/2020/10/2020-10-17-PHP%E4%B9%8B%E9%80%9A%E8%BF%87MySQLi%E6%93%8D%E4%BD%9CMySQL%E6%95%B0%E6%8D%AE%E5%BA%93/</id>
    <published>2020-10-17T00:00:00.000Z</published>
    <updated>2020-10-20T03:14:47.016Z</updated>
    
    <content type="html"><![CDATA[<h3 id="MySQLi-介绍"><a href="#MySQLi-介绍" class="headerlink" title="MySQLi 介绍"></a>MySQLi 介绍</h3><p>MySQLi 扩展使得用户可以利用 MySQL 4.1 及其更高版本的新功能，与 mysql 扩展相比，MySQLi 扩展在以下方面有了明显的提高。</p><ul><li><p><strong>兼容性与维护性</strong>：</p><p>MySQLi 扩展可以很容易地使用 MySQL 的新功能，所以 MySQLi 拥有与 MySQL 更高的兼容性。即使 MySQL 的新版本又出现了更多功能，MySQLi 扩展也可以很容易的支持。</p></li><li><p><strong>面向对象</strong>：</p><p>MySQLi 扩展已封装到一个类中，从而可使用面向对象的方式编程。即使对面向对象不了解，MySQLi 扩展也提供了面向过程的编程方式来供用户选择。</p></li><li><p><strong>速度和安全性</strong>：</p><p>MySQLi 扩展执行的速度要比之前版本的 mysql 扩展快了很多。MySQLi 扩展支持 MySQL 新版本的密码杂凑（Password Hashes）和验证程序，更加提高了应用程序的安全性。</p></li><li><p><strong>预准备语句</strong>：</p><p>预准备语句可提高重复使用的语句的性能，MySQLi 扩展提供了对预准备语句的支持。</p></li><li><p><strong>调试功能</strong>：</p><p>MySQLi 扩展进一步改进了调试功能，提高了开发效率。</p></li></ul><a id="more"></a><h3 id="MySQLi-安装"><a href="#MySQLi-安装" class="headerlink" title="MySQLi 安装"></a>MySQLi 安装</h3><p>Linux 和 Windows: 在 php7 mysql 包安装时 MySQLi 扩展多数情况下是自动安装的。</p><p>安装详细信息，请查看： <span class="exturl" data-url="aHR0cDovL3BocC5uZXQvbWFudWFsL2VuL215c3FsaS5pbnN0YWxsYXRpb24ucGhw">http://php.net/manual/en/mysqli.installation.php<i class="fa fa-external-link-alt"></i></span></p><p>可以通过 phpinfo () 查看是否安装成功：</p><p><img src="/images/2020/10/1603075261487.png" alt="1603075261487" loading="lazy"></p><h3 id="连接-MySQL"><a href="#连接-MySQL" class="headerlink" title="连接 MySQL"></a>连接 MySQL</h3><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$servername</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"localhost"</span><span class="token punctuation">;</span><span class="token variable">$username</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"user"</span><span class="token punctuation">;</span><span class="token variable">$password</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"password"</span><span class="token punctuation">;</span> <span class="token comment">// 创建连接</span><span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token function">mysqli_connect</span><span class="token punctuation">(</span><span class="token variable">$servername</span><span class="token punctuation">,</span> <span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 检测连接</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$conn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"Connection failed: "</span> <span class="token punctuation">.</span> <span class="token function">mysqli_connect_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">echo</span> <span class="token double-quoted-string string">"连接成功"</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span></code></pre><h3 id="关闭连接"><a href="#关闭连接" class="headerlink" title="关闭连接"></a>关闭连接</h3><p>连接在脚本执行完后会自动关闭。你也可以使用以下代码来关闭连接：</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token function">mysqli_close</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$servername</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"localhost"</span><span class="token punctuation">;</span><span class="token variable">$username</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"username"</span><span class="token punctuation">;</span><span class="token variable">$password</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"password"</span><span class="token punctuation">;</span> <span class="token comment">// 创建连接</span><span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token function">mysqli_connect</span><span class="token punctuation">(</span><span class="token variable">$servername</span><span class="token punctuation">,</span> <span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 检测连接</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$conn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"连接失败: "</span> <span class="token punctuation">.</span> <span class="token function">mysqli_connect_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment">// 创建数据库</span><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"CREATE DATABASE myDB"</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span> <span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token double-quoted-string string">"数据库创建成功"</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token double-quoted-string string">"Error creating database: "</span> <span class="token punctuation">.</span> <span class="token function">mysqli_error</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token function">mysqli_close</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span></code></pre><h3 id="创建-MySQL-表"><a href="#创建-MySQL-表" class="headerlink" title="创建 MySQL 表"></a>创建 MySQL 表</h3><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$servername</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"localhost"</span><span class="token punctuation">;</span><span class="token variable">$username</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"username"</span><span class="token punctuation">;</span><span class="token variable">$password</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"password"</span><span class="token punctuation">;</span><span class="token variable">$dbname</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"myDB"</span><span class="token punctuation">;</span> <span class="token comment">// 创建连接</span><span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token function">mysqli_connect</span><span class="token punctuation">(</span><span class="token variable">$servername</span><span class="token punctuation">,</span> <span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">,</span> <span class="token variable">$dbname</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 检测连接</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$conn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"连接失败: "</span> <span class="token punctuation">.</span> <span class="token function">mysqli_connect_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment">// 使用 sql 创建数据表</span><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"CREATE TABLE MyGuests (id INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY, firstname VARCHAR(30) NOT NULL,lastname VARCHAR(30) NOT NULL,email VARCHAR(50),reg_date TIMESTAMP)"</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span> <span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token double-quoted-string string">"数据表 MyGuests 创建成功"</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token double-quoted-string string">"创建数据表错误: "</span> <span class="token punctuation">.</span> <span class="token function">mysqli_error</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token function">mysqli_close</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span></code></pre><h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$servername</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"localhost"</span><span class="token punctuation">;</span><span class="token variable">$username</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"username"</span><span class="token punctuation">;</span><span class="token variable">$password</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"password"</span><span class="token punctuation">;</span><span class="token variable">$dbname</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"myDB"</span><span class="token punctuation">;</span> <span class="token comment">// 创建连接</span><span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token function">mysqli_connect</span><span class="token punctuation">(</span><span class="token variable">$servername</span><span class="token punctuation">,</span> <span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">,</span> <span class="token variable">$dbname</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 检测连接</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$conn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"Connection failed: "</span> <span class="token punctuation">.</span> <span class="token function">mysqli_connect_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"INSERT INTO MyGuests (firstname, lastname, email)VALUES ('John', 'Doe', 'john@example.com')"</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span> <span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token double-quoted-string string">"新记录插入成功"</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token double-quoted-string string">"Error: "</span> <span class="token punctuation">.</span> <span class="token variable">$sql</span> <span class="token punctuation">.</span> <span class="token double-quoted-string string">"&lt;br&gt;"</span> <span class="token punctuation">.</span> <span class="token function">mysqli_error</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token function">mysqli_close</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span></code></pre><p><code>mysqli_multi_query()</code> 函数可用来执行多条 SQL 语句。</p><h3 id="使用预处理语句"><a href="#使用预处理语句" class="headerlink" title="使用预处理语句"></a>使用预处理语句</h3><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$servername</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"localhost"</span><span class="token punctuation">;</span><span class="token variable">$username</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"username"</span><span class="token punctuation">;</span><span class="token variable">$password</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"password"</span><span class="token punctuation">;</span><span class="token variable">$dbname</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"myDB"</span><span class="token punctuation">;</span> <span class="token comment">// 创建连接</span><span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">mysqli</span><span class="token punctuation">(</span><span class="token variable">$servername</span><span class="token punctuation">,</span> <span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">,</span> <span class="token variable">$dbname</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 检测连接</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">connect_error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"连接失败: "</span> <span class="token punctuation">.</span> <span class="token variable">$conn</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">connect_error</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"INSERT INTO MyGuests(firstname, lastname, email)  VALUES(?, ?, ?)"</span><span class="token punctuation">;</span>     <span class="token comment">// 为 mysqli_stmt_prepare() 初始化 statement 对象</span>    <span class="token variable">$stmt</span> <span class="token operator">=</span> <span class="token function">mysqli_stmt_init</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//预处理语句</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">mysqli_stmt_prepare</span><span class="token punctuation">(</span><span class="token variable">$stmt</span><span class="token punctuation">,</span> <span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 绑定参数</span>        <span class="token function">mysqli_stmt_bind_param</span><span class="token punctuation">(</span><span class="token variable">$stmt</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'sss'</span><span class="token punctuation">,</span> <span class="token variable">$firstname</span><span class="token punctuation">,</span> <span class="token variable">$lastname</span><span class="token punctuation">,</span> <span class="token variable">$email</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 设置参数并执行</span>        <span class="token variable">$firstname</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'John'</span><span class="token punctuation">;</span>        <span class="token variable">$lastname</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'Doe'</span><span class="token punctuation">;</span>        <span class="token variable">$email</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'john@example.com'</span><span class="token punctuation">;</span>        <span class="token function">mysqli_stmt_execute</span><span class="token punctuation">(</span><span class="token variable">$stmt</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token variable">$firstname</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'Mary'</span><span class="token punctuation">;</span>        <span class="token variable">$lastname</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'Moe'</span><span class="token punctuation">;</span>        <span class="token variable">$email</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'mary@example.com'</span><span class="token punctuation">;</span>        <span class="token function">mysqli_stmt_execute</span><span class="token punctuation">(</span><span class="token variable">$stmt</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token variable">$firstname</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'Julie'</span><span class="token punctuation">;</span>        <span class="token variable">$lastname</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'Dooley'</span><span class="token punctuation">;</span>        <span class="token variable">$email</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'julie@example.com'</span><span class="token punctuation">;</span>        <span class="token function">mysqli_stmt_execute</span><span class="token punctuation">(</span><span class="token variable">$stmt</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token delimiter important">?&gt;</span></span></code></pre><p>注意参数的绑定。让我们看下 mysqli_stmt_bind_param () 中的代码：</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token function">mysqli_stmt_bind_param</span><span class="token punctuation">(</span><span class="token variable">$stmt</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'sss'</span><span class="token punctuation">,</span> <span class="token variable">$firstname</span><span class="token punctuation">,</span> <span class="token variable">$lastname</span><span class="token punctuation">,</span> <span class="token variable">$email</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>该函数绑定参数查询并将参数传递给数据库。第二个参数是 "sss" 。以下列表展示了参数的类型。 s 字符告诉 mysql 参数是字符串。</p><p>可以是以下四种参数:</p><ul><li>i - 整数</li><li> d - 双精度浮点数</li><li> s - 字符串</li><li> b - 布尔值</li></ul><p>每个参数必须指定类型，来保证数据的安全性。</p><p>通过类型的判断可以减少 SQL 注入漏洞带来的风险。</p><h3 id="查询读取数据"><a href="#查询读取数据" class="headerlink" title="查询读取数据"></a>查询读取数据</h3><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$servername</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"localhost"</span><span class="token punctuation">;</span><span class="token variable">$username</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"user"</span><span class="token punctuation">;</span><span class="token variable">$password</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"password"</span><span class="token punctuation">;</span><span class="token variable">$dbname</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"myDB"</span><span class="token punctuation">;</span> <span class="token comment">// 创建连接</span><span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token function">mysqli_connect</span><span class="token punctuation">(</span><span class="token variable">$servername</span><span class="token punctuation">,</span> <span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">,</span> <span class="token variable">$dbname</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Check connection</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$conn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"连接失败: "</span> <span class="token punctuation">.</span> <span class="token function">mysqli_connect_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"SELECT id, firstname, lastname FROM MyGuests"</span><span class="token punctuation">;</span><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span> <span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">mysqli_num_rows</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 输出数据</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token variable">$row</span> <span class="token operator">=</span> <span class="token function">mysqli_fetch_assoc</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token double-quoted-string string">"id: "</span> <span class="token punctuation">.</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"id"</span><span class="token punctuation">]</span><span class="token punctuation">.</span> <span class="token double-quoted-string string">" - Name: "</span> <span class="token punctuation">.</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"firstname"</span><span class="token punctuation">]</span><span class="token punctuation">.</span> <span class="token double-quoted-string string">" "</span> <span class="token punctuation">.</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"lastname"</span><span class="token punctuation">]</span><span class="token punctuation">.</span> <span class="token double-quoted-string string">"&lt;br&gt;"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token double-quoted-string string">"0 结果"</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token function">mysqli_close</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;MySQLi-介绍&quot;&gt;&lt;a href=&quot;#MySQLi-介绍&quot; class=&quot;headerlink&quot; title=&quot;MySQLi 介绍&quot;&gt;&lt;/a&gt;MySQLi 介绍&lt;/h3&gt;&lt;p&gt;MySQLi 扩展使得用户可以利用 MySQL 4.1 及其更高版本的新功能，与 mysql 扩展相比，MySQLi 扩展在以下方面有了明显的提高。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;兼容性与维护性&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;MySQLi 扩展可以很容易地使用 MySQL 的新功能，所以 MySQLi 拥有与 MySQL 更高的兼容性。即使 MySQL 的新版本又出现了更多功能，MySQLi 扩展也可以很容易的支持。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;面向对象&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;MySQLi 扩展已封装到一个类中，从而可使用面向对象的方式编程。即使对面向对象不了解，MySQLi 扩展也提供了面向过程的编程方式来供用户选择。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;速度和安全性&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;MySQLi 扩展执行的速度要比之前版本的 mysql 扩展快了很多。MySQLi 扩展支持 MySQL 新版本的密码杂凑（Password Hashes）和验证程序，更加提高了应用程序的安全性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;预准备语句&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;预准备语句可提高重复使用的语句的性能，MySQLi 扩展提供了对预准备语句的支持。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;调试功能&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;MySQLi 扩展进一步改进了调试功能，提高了开发效率。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="MySQL" scheme="https://jueee.github.io/categories/MySQL/"/>
    
    <category term="PHP" scheme="https://jueee.github.io/categories/PHP/"/>
    
    
    <category term="MySQL" scheme="https://jueee.github.io/tags/MySQL/"/>
    
    <category term="PHP" scheme="https://jueee.github.io/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>Windows 系统下 PHP 环境搭建</title>
    <link href="https://jueee.github.io/2020/10/2020-10-16-Windows%E7%B3%BB%E7%BB%9F%E4%B8%8BPHP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>https://jueee.github.io/2020/10/2020-10-16-Windows%E7%B3%BB%E7%BB%9F%E4%B8%8BPHP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</id>
    <published>2020-10-16T00:00:00.000Z</published>
    <updated>2020-10-16T11:18:04.281Z</updated>
    
    <content type="html"><![CDATA[<h3 id="下载-PHP"><a href="#下载-PHP" class="headerlink" title="下载 PHP"></a>下载 PHP</h3><p>下载地址：<span class="exturl" data-url="aHR0cDovL3BocC5uZXQvZG93bmxvYWRzLnBocA==">http://php.net/downloads.php<i class="fa fa-external-link-alt"></i></span></p><p>Windows 下载：<span class="exturl" data-url="aHR0cHM6Ly93aW5kb3dzLnBocC5uZXQvZG93bmxvYWQv">https://windows.php.net/download/<i class="fa fa-external-link-alt"></i></span></p><p>版本选择：</p><ul><li>如果是与 Apache 搭配，建议选择 Thread Safe 版本（有 php7apache2_4.dll）。</li><li>如果是与 CGI 或者 FAST-CGI 搭配，建议选择 Non Thread Safe 版本。</li></ul><a id="more"></a><h3 id="安装Apache-服务器"><a href="#安装Apache-服务器" class="headerlink" title="安装Apache 服务器"></a>安装 Apache 服务器</h3><p>PHP 环境搭建的前提是 Apache HTTP Server （Apache 服务器）已经安装部署成功，并可以正常访问到服务器的主页面。</p><p>Apache HTTP Server 的安装部署可以点击 “ <a href="https://jueee.github.io/2020/10/2020-10-15-Windows%E7%B3%BB%E7%BB%9F%E4%B8%8B%E5%AE%89%E8%A3%85Apache%E6%9C%8D%E5%8A%A1%E5%99%A8">Windows 系统下安装 Apache 服务器</a>” 查看具体操作。</p><h3 id="配置-PHP"><a href="#配置-PHP" class="headerlink" title="配置 PHP"></a>配置 PHP</h3><p>将 PHP 的根目录下的 php.ini-development 或者 php.ini-production 复制一份并改名为 php.ini，作为 PHP 的配置文件。</p><h4 id="修改扩展文件的路径"><a href="#修改扩展文件的路径" class="headerlink" title="修改扩展文件的路径"></a>修改扩展文件的路径</h4><pre class="language-ini" data-language="ini"><code class="language-ini"><span class="token comment">; extension_dir = "ext" </span></code></pre><p>取消注释，或者改为： </p><pre class="language-ini" data-language="ini"><code class="language-ini"><span class="token constant">extension_dir</span> <span class="token attr-value"><span class="token punctuation">=</span> "${phphome}\ext"</span></code></pre><p>注意：如果是与 Apache 搭配，建议将扩展文件路径改为绝对路径，因为有可能加载不了。</p><h4 id="设置默认的时区"><a href="#设置默认的时区" class="headerlink" title="设置默认的时区"></a>设置默认的时区</h4><pre class="language-ini" data-language="ini"><code class="language-ini"><span class="token selector">[Date]</span><span class="token comment">; https://www.php.net/manual/zh/timezones.php 选择时区列表网址</span><span class="token constant">date.timezone</span> <span class="token attr-value"><span class="token punctuation">=</span> Asia/Shanghai</span></code></pre><h4 id="设置-ssl"><a href="#设置-ssl" class="headerlink" title="设置 ssl"></a>设置 ssl</h4><pre class="language-ini" data-language="ini"><code class="language-ini"><span class="token selector">[openssl]</span><span class="token constant">openssl.cafile</span><span class="token attr-value"><span class="token punctuation">=</span> cacert.pem</span></code></pre><h3 id="修改-Apache服务器"><a href="#修改-Apache服务器" class="headerlink" title="修改 Apache服务器"></a>修改 Apache 服务器</h3><p>修改 Apache24\conf\ 目录下的 httpd.conf 配置 Apache ，让 Apache 和 PHP 协同工作。</p><h4 id="DocumentRoot-设置"><a href="#DocumentRoot-设置" class="headerlink" title="DocumentRoot 设置"></a>DocumentRoot 设置</h4><p>修改前：默认的是 Apache24 下的 htdocs 目录：</p><p><img src="/images/2020/10/1602831496444.png" alt="1602831496444" loading="lazy"></p><p>修改后：指定到自定义的路径，但是要记住这个路径。</p><pre class="language-none"><code class="language-none">DocumentRoot "E:/software/php/php-page"&lt;Directory "E:/software/php/php-page"&gt;</code></pre><h4 id="默认索引"><a href="#默认索引" class="headerlink" title="默认索引"></a>默认索引</h4><p>修改默认的索引，以支持 PHP 。</p><p>修改前：</p><pre class="language-conf" data-language="conf"><code class="language-conf">&lt;IfModule dir_module&gt;    DirectoryIndex index.html&lt;/IfModule&gt;</code></pre><p>修改后：</p><pre class="language-conf" data-language="conf"><code class="language-conf">&lt;IfModule dir_module&gt;    DirectoryIndex index.html  index.php index.htm&lt;/IfModule&gt;</code></pre><h4 id="开启-rewrite-功能"><a href="#开启-rewrite-功能" class="headerlink" title="开启 rewrite 功能"></a>开启 rewrite 功能</h4><p>将下面这行代码前面的 # 去掉：</p><pre class="language-conf" data-language="conf"><code class="language-conf">LoadModule rewrite_module modules/mod_rewrite.so</code></pre><h4 id="加载-PHP-模块"><a href="#加载-PHP-模块" class="headerlink" title="加载 PHP 模块"></a>加载 PHP 模块</h4><p>如果是 PHP 7，则相应的更改，示例如下（<strong>注意绝对路径</strong>）：</p><pre class="language-none"><code class="language-none">#php7LoadModule php7_module E:/software/php/php-7.4.11/php7apache2_4.dll&lt;IfModule php7_module&gt;     PHPIniDir "D:/soft/php-7.x.x/"     AddType application/x-httpd-php .php    AddType application/x-httpd-php-source .phps&lt;/IfModule&gt;</code></pre><h4 id="dll-复制"><a href="#dll-复制" class="headerlink" title="dll 复制"></a>dll 复制</h4><p>如果安装的 PHP x64 位版本，Apache 也需要是 x64 位版本的。</p><p>然后还要将 php 目录下的 libeay32.dll、ssleay32.dll、libssh2.dll 以及 ext 目录下的 php_curl.dll 等四个文件，都复制放到 System32 目录下。否则 curl 扩展无法使用。</p><p>参考链接：<span class="exturl" data-url="aHR0cDovL215Lm9zY2hpbmEubmV0L2xzZm9wL2Jsb2cvNDk2MTgx">http://my.oschina.net/lsfop/blog/496181<i class="fa fa-external-link-alt"></i></span> 。</p><h3 id="启动运行测试"><a href="#启动运行测试" class="headerlink" title="启动运行测试"></a>启动运行测试</h3><p>在 <code>E:\software\php\php-page</code> 目录下，创建 index.php 文件，文本内容如下：</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">echo</span> <span class="token function">phpinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span></code></pre><p>打开浏览地址栏输入： localhost:80/index.php 或者 127.0.0.1:80/index.php , 就可以打开 PHP 页面。</p><p><img src="/images/2020/10/1602831917955.png" alt="1602831917955" loading="lazy"></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;下载-PHP&quot;&gt;&lt;a href=&quot;#下载-PHP&quot; class=&quot;headerlink&quot; title=&quot;下载 PHP&quot;&gt;&lt;/a&gt;下载 PHP&lt;/h3&gt;&lt;p&gt;下载地址：&lt;a href=&quot;http://php.net/downloads.php&quot;&gt;http://php.net/downloads.php&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Windows 下载：&lt;a href=&quot;https://windows.php.net/download/&quot;&gt;https://windows.php.net/download/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;版本选择：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果是与 Apache 搭配，建议选择 Thread Safe 版本（有 php7apache2_4.dll）。&lt;/li&gt;
&lt;li&gt;如果是与 CGI 或者 FAST-CGI 搭配，建议选择 Non Thread Safe 版本。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="软件" scheme="https://jueee.github.io/categories/%E8%BD%AF%E4%BB%B6/"/>
    
    <category term="PHP" scheme="https://jueee.github.io/categories/PHP/"/>
    
    
    <category term="软件" scheme="https://jueee.github.io/tags/%E8%BD%AF%E4%BB%B6/"/>
    
    <category term="PHP" scheme="https://jueee.github.io/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>Windows 系统下安装 Apache 服务器</title>
    <link href="https://jueee.github.io/2020/10/2020-10-15-Windows%E7%B3%BB%E7%BB%9F%E4%B8%8B%E5%AE%89%E8%A3%85Apache%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>https://jueee.github.io/2020/10/2020-10-15-Windows%E7%B3%BB%E7%BB%9F%E4%B8%8B%E5%AE%89%E8%A3%85Apache%E6%9C%8D%E5%8A%A1%E5%99%A8/</id>
    <published>2020-10-15T00:00:00.000Z</published>
    <updated>2020-10-16T07:23:34.654Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Apache-amp-Tomcat"><a href="#Apache-amp-Tomcat" class="headerlink" title="Apache &amp; Tomcat"></a>Apache &amp; Tomcat</h3><p>Apache 与 Tomcat 都是 Apache 开源组织开发的用于处理 HTTP 服务的项目，两者都是免费的，都可以做为独立的 Web 服务器运行。</p><p>Apache 是 Web 服务器而 Tomcat 是 Java 应用服务器。</p><a id="more"></a><h4 id="Apache"><a href="#Apache" class="headerlink" title="Apache"></a>Apache</h4><p>Apache：是 C 语言实现的，专门用来提供 HTTP 服务。</p><p>特性：简单、速度快、性能稳定、可配置（代理）</p><ol><li>主要用于解析静态文本，并发性能高，侧重于 HTTP 服务；</li><li>支持静态页（HTML），不支持动态请求如：CGI、Servlet/JSP、PHP、ASP 等；</li><li>具有很强的可扩展性，可以通过插件支持 PHP，还可以单向 Apache 连接 Tomcat 实现连通；</li><li>Apache 是世界使用排名第一的 Web 服务器。</li></ol><h4 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h4><p>Tomcat：是 Java 开发的一个符合 JavaEE 的 Servlet 规范的 JSP 服务器（Servlet 容器），是 Apache 的扩展。</p><p>特性：免费的 Java 应用服务器。</p><ol><li>主要用于解析 JSP/Servlet，侧重于 Servlet 引擎；</li><li>支持静态页，但效率没有 Apache 高；支持 Servlet、JSP 请求；</li><li>Tomcat 本身也内置了一个 HTTP 服务器用于支持静态内容，可以通过 Tomcat 的配置管理工具实现与 Apache 整合。</li></ol><h4 id="Apache-Tomcat"><a href="#Apache-Tomcat" class="headerlink" title="Apache + Tomcat"></a>Apache + Tomcat</h4><p>Apache + Tomcat 两者整合后优点：<br>如果请求是静态网页则由 Apache 处理，并将结果返回；如果是动态请求，Apache 会将解析工作转发给 Tomcat 处理，Tomcat 处理后将结果通过 Apache 返回。这样可以达到分工合作，实现负载远衡，提高系统的性能。</p><h3 id="下载Apache服务器"><a href="#下载Apache服务器" class="headerlink" title="下载Apache服务器"></a>下载 Apache 服务器</h3><p>Apache HTTP Servcer 下载地址：<span class="exturl" data-url="aHR0cHM6Ly9odHRwZC5hcGFjaGUub3JnLw==">https://httpd.apache.org/<i class="fa fa-external-link-alt"></i></span></p><p>Windows 版本下载：<span class="exturl" data-url="aHR0cHM6Ly9odHRwZC5hcGFjaGUub3JnL2RvY3MvY3VycmVudC9wbGF0Zm9ybS93aW5kb3dzLmh0bWwjZG93bg==">https://httpd.apache.org/docs/current/platform/windows.html#down<i class="fa fa-external-link-alt"></i></span></p><h3 id="配置Apache服务器"><a href="#配置Apache服务器" class="headerlink" title="配置Apache服务器"></a>配置 Apache 服务器</h3><p>打开 Apache24\conf 目录下的 httpd.conf，修改配置信息。</p><h4 id="修改-ServerRoot-路径"><a href="#修改-ServerRoot-路径" class="headerlink" title="修改 ServerRoot 路径"></a>修改 ServerRoot 路径</h4><pre class="language-conf" data-language="conf"><code class="language-conf">Define SRVROOT "E:\software\php\Apache24"ServerRoot "${SRVROOT}"</code></pre><p>如果不修改会出现如下错误：</p><blockquote><p>httpd.exe: Syntax error on line 39 of E:/software/php/Apache24/conf/httpd.conf: ServerRoot must be a valid directory</p></blockquote><h4 id="修改端口号"><a href="#修改端口号" class="headerlink" title="修改端口号"></a>修改端口号</h4><p>默认的是 80 端口，但是多数情况下，80 端口被占用，所以需要修改 80 端口。如果确定 80 端口未被占用则可以不修改。</p><pre class="language-conf" data-language="conf"><code class="language-conf">Listen 80ServerName localhost:80</code></pre><p>如果不修改可能会提示错误：</p><blockquote><p>(OS 10048) 通常每个套接字地址 (协议 / 网络地址 / 端口) 只允许使用一次。: AH00072: make_sock: could not bind to address [::]:8081</p><p>(OS 10048) 通常每个套接字地址 (协议 / 网络地址 / 端口) 只允许使用一次。 : AH00072: make_sock: could not bind to address 0.0.0.0:8081<br>AH00451: no listening sockets available, shutting down<br>AH00015: Unable to open logs</p></blockquote><h4 id="443-端口被占用"><a href="#443-端口被占用" class="headerlink" title="443 端口被占用"></a>443 端口被占用</h4><p>如果 443 端口被占用，会有如下报错信息：</p><blockquote><p>(OS 10048) 通常每个套接字地址 (协议 / 网络地址 / 端口) 只允许使用一次。  : AH00072: make_sock: could not bind to address [::]:443</p><p>(OS 10048) 通常每个套接字地址 (协议 / 网络地址 / 端口) 只允许使用一次。  : AH00072: make_sock: could not bind to address 0.0.0.0:443 AH00451: no listening sockets available, shutting down</p></blockquote><p>解决 443 端口被占用的问题：</p><p>在 httpd.conf 中，找到加载 ssl_module 的那一行，加 #号注释掉就好了：</p><pre class="language-conf" data-language="conf"><code class="language-conf"># LoadModule ssl_module modules/mod_ssl.so</code></pre><h3 id="安装Apache服务器"><a href="#安装Apache服务器" class="headerlink" title="安装Apache服务器"></a>安装 Apache 服务器</h3><h4 id="常见的dos操作命令"><a href="#常见的dos操作命令" class="headerlink" title="常见的dos操作命令"></a>常见的 dos 操作命令</h4><ol><li>把 apache24 安装成系统服务：httpd -k install</li><li> 启动服务 apcache24 服务 ：httpd -k star</li><li> 停止服务 apcache24 服务 ：httpd -k stop</li><li> 重启服务 apcache24 服务 ：httpd -k restart</li><li> 卸载 apcache24 服务 ：httpd -k uninstall</li><li> 测试 apache24 配置语法 ：httpd -t</li><li> 版本信息 ：httpd -V</li><li> 查看 cmd 命令：httpd -h</li></ol><h4 id="安装成系统服务"><a href="#安装成系统服务" class="headerlink" title="安装成系统服务"></a>安装成系统服务</h4><p>以管理员身份运行：<code>.\httpd.exe  -k install</code></p><p><img src="/images/2020/10/1602828782266.png" alt="1602828782266" loading="lazy"></p><h3 id="启动Apache服务器"><a href="#启动Apache服务器" class="headerlink" title="启动Apache服务器"></a>启动 Apache 服务器</h3><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p>双击 <code>Apache24\bin\httpd.exe</code> 即可启动 Apache 服务器。</p><h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><p>打开系统服务窗口，找到 Apache2.4，选择启动或停止。</p><p><img src="/images/2020/10/1602828954797.png" alt="1602828954797" loading="lazy"></p><h4 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h4><p>打开 Apache24\bin 找到 ApacheMonitor.exe 双击打开 Apache24 启停管理器。</p><p><img src="/images/2020/10/1602829021497.png" alt="1602829021497" loading="lazy"></p><h4 id="访问页面"><a href="#访问页面" class="headerlink" title="访问页面"></a>访问页面</h4><p>然后打开浏览器在地址栏输入 <span class="exturl" data-url="aHR0cDovL2xvY2FsaG9zdC8=">http://localhost:80/<i class="fa fa-external-link-alt"></i></span> 就可以访问页面，页面如下：</p><p><img src="/images/2020/10/1602828320892.png" alt="1602828320892" loading="lazy"></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;Apache-amp-Tomcat&quot;&gt;&lt;a href=&quot;#Apache-amp-Tomcat&quot; class=&quot;headerlink&quot; title=&quot;Apache &amp;amp; Tomcat&quot;&gt;&lt;/a&gt;Apache &amp;amp; Tomcat&lt;/h3&gt;&lt;p&gt;Apache 与 Tomcat 都是 Apache 开源组织开发的用于处理 HTTP 服务的项目，两者都是免费的，都可以做为独立的 Web 服务器运行。&lt;/p&gt;
&lt;p&gt;Apache 是 Web 服务器而 Tomcat 是 Java 应用服务器。&lt;/p&gt;</summary>
    
    
    
    <category term="软件" scheme="https://jueee.github.io/categories/%E8%BD%AF%E4%BB%B6/"/>
    
    
    <category term="Apache" scheme="https://jueee.github.io/tags/Apache/"/>
    
    <category term="软件" scheme="https://jueee.github.io/tags/%E8%BD%AF%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>k8s 配置使用 NFS 动态存储</title>
    <link href="https://jueee.github.io/2020/10/2020-10-14-k8s%E9%85%8D%E7%BD%AE%E4%BD%BF%E7%94%A8NFS%E5%8A%A8%E6%80%81%E5%AD%98%E5%82%A8/"/>
    <id>https://jueee.github.io/2020/10/2020-10-14-k8s%E9%85%8D%E7%BD%AE%E4%BD%BF%E7%94%A8NFS%E5%8A%A8%E6%80%81%E5%AD%98%E5%82%A8/</id>
    <published>2020-10-14T00:00:00.000Z</published>
    <updated>2020-10-16T07:27:21.744Z</updated>
    
    <content type="html"><![CDATA[<h3 id="部署nfs服务"><a href="#部署nfs服务" class="headerlink" title="部署nfs服务"></a>部署 nfs 服务</h3><p>1、主机安装 nfs 服务器</p><pre class="language-none"><code class="language-none">sudo apt-get install nfs-kernel-serversudo apt-get install nfs-common</code></pre><a id="more"></a><p>2、主机共享 NFS 文件夹</p><p>编辑  /etc/exports 文件</p><p>sudo vi /etc/exports<br>在文件末尾添加（nfs 共享目录，它可以作为开发板的根文件系统通过 nfs 挂载。）：</p><pre class="language-none"><code class="language-none">/home/vmuser/Share                *(insecure,rw,sync,no_root_squash)</code></pre><p>修改完成后，保存。 </p><p>该目录必须存在<br>然后启动或重启 NFS 服务。</p><p>在终端中执行如下命令，可以启动 NFS 服务：</p><pre class="language-none"><code class="language-none">$ sudo /etc/init.d/nfs-kernel-server start</code></pre><p>执行如下命令则可以重新启动 NFS 服务：</p><pre class="language-none"><code class="language-none">$ sudo /etc/init.d/nfs-kernel-server restart</code></pre><p>3、其他设备挂载 NFS 服务器</p><pre class="language-none"><code class="language-none">$ sudo mount -t nfs 192.168.12.123:/home/vmuser/Share    /mnt/nfsdata -o nolock  </code></pre><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><ul><li><p>共享 NFS 文件夹权限必须为 777 ，<code>chmod 777 Share</code></p></li><li><p>配置文件 /etc/exports，需要加入 insecure 选项。否则其他机器挂载失败。</p><pre class="language-none"><code class="language-none">mount.nfs: access denied by server while mounting 10.110.10.10:/mnt/dfs/3/k8snfs</code></pre></li></ul><h3 id="新建-PV"><a href="#新建-PV" class="headerlink" title="新建 PV"></a>新建 PV</h3><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> PersistentVolume<span class="token key atrule">metadata</span><span class="token punctuation">:</span>   <span class="token key atrule">name</span><span class="token punctuation">:</span> nfs<span class="token punctuation">-</span>mysqldata<span class="token key atrule">spec</span><span class="token punctuation">:</span>   <span class="token key atrule">capacity</span><span class="token punctuation">:</span>      <span class="token key atrule">storage</span><span class="token punctuation">:</span> 50Gi   <span class="token key atrule">accessModes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ReadWriteOnce   <span class="token key atrule">persistentVolumeReclaimPolicy</span><span class="token punctuation">:</span> Retain   <span class="token key atrule">storageClassName</span><span class="token punctuation">:</span> mysqldata   <span class="token key atrule">nfs</span><span class="token punctuation">:</span>      <span class="token key atrule">path</span><span class="token punctuation">:</span> /mnt/dfs/3/k8snfs/mysqldata      <span class="token key atrule">server</span><span class="token punctuation">:</span> hostname1</code></pre><h3 id="新建-PVC"><a href="#新建-PVC" class="headerlink" title="新建 PVC"></a>新建 PVC</h3><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> PersistentVolumeClaim<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> mysqldata  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> manti<span class="token punctuation">-</span>infra<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">accessModes</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> ReadWriteOnce  <span class="token key atrule">resources</span><span class="token punctuation">:</span>    <span class="token key atrule">requests</span><span class="token punctuation">:</span>      <span class="token key atrule">storage</span><span class="token punctuation">:</span> 50Gi  <span class="token key atrule">storageClassName</span><span class="token punctuation">:</span> mysqldata</code></pre><h3 id="新建-Deployment"><a href="#新建-Deployment" class="headerlink" title="新建 Deployment"></a>新建 Deployment</h3><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment<span class="token key atrule">metadata</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> mysql    <span class="token key atrule">namespace</span><span class="token punctuation">:</span> manti<span class="token punctuation">-</span>infra<span class="token key atrule">spec</span><span class="token punctuation">:</span>    <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">1</span>    <span class="token key atrule">selector</span><span class="token punctuation">:</span>        <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>            <span class="token key atrule">app</span><span class="token punctuation">:</span> mysql    <span class="token key atrule">template</span><span class="token punctuation">:</span>        <span class="token key atrule">metadata</span><span class="token punctuation">:</span>            <span class="token key atrule">labels</span><span class="token punctuation">:</span>                <span class="token key atrule">app</span><span class="token punctuation">:</span> mysql        <span class="token key atrule">spec</span><span class="token punctuation">:</span>            <span class="token key atrule">imagePullSecrets</span><span class="token punctuation">:</span>              <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> harborsecret            <span class="token key atrule">containers</span><span class="token punctuation">:</span>              <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> mysql                <span class="token key atrule">image</span><span class="token punctuation">:</span> mysql<span class="token punctuation">:</span>v1.0.7                <span class="token key atrule">imagePullPolicy</span><span class="token punctuation">:</span> IfNotPresent                <span class="token key atrule">ports</span><span class="token punctuation">:</span>                  <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">3306</span>                <span class="token key atrule">env</span><span class="token punctuation">:</span>                  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> MYSQL_ROOT_PASSWORD                    <span class="token key atrule">value</span><span class="token punctuation">:</span> Test321                <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>                  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> mysqldata                    <span class="token key atrule">subPath</span><span class="token punctuation">:</span> mysql                    <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /var/lib/mysql            <span class="token key atrule">volumes</span><span class="token punctuation">:</span>              <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> mysqldata                <span class="token key atrule">persistentVolumeClaim</span><span class="token punctuation">:</span>                    <span class="token key atrule">claimName</span><span class="token punctuation">:</span> mysqldata            <span class="token key atrule">initContainers</span><span class="token punctuation">:</span>              <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> increase<span class="token punctuation">-</span>fd<span class="token punctuation">-</span>ulimit                <span class="token key atrule">image</span><span class="token punctuation">:</span> qz<span class="token punctuation">-</span>nis<span class="token punctuation">-</span>harbor.netease.com/ftd<span class="token punctuation">-</span>phishing/busybox                <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"sh"</span><span class="token punctuation">,</span> <span class="token string">"-c"</span><span class="token punctuation">,</span> <span class="token string">"ulimit -n 65536"</span><span class="token punctuation">]</span>                <span class="token key atrule">securityContext</span><span class="token punctuation">:</span>                    <span class="token key atrule">privileged</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></code></pre><p>新建 </p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Service<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> mysql<span class="token punctuation">-</span>out  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> manti<span class="token punctuation">-</span>infra  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> mysql<span class="token punctuation">-</span>out<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> NodePort  <span class="token key atrule">ports</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> mysql<span class="token punctuation">-</span>out      <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">3306</span>      <span class="token key atrule">nodePort</span><span class="token punctuation">:</span> <span class="token number">30102</span>      <span class="token key atrule">targetPort</span><span class="token punctuation">:</span> <span class="token number">3306</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> mysql<span class="token punctuation">---</span><span class="token key atrule">kind</span><span class="token punctuation">:</span> Service<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> mysql  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> manti<span class="token punctuation">-</span>infra  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> mysql<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> mysql  <span class="token key atrule">clusterIP</span><span class="token punctuation">:</span> None  <span class="token key atrule">ports</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">3306</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> client</code></pre>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;部署nfs服务&quot;&gt;&lt;a href=&quot;#部署nfs服务&quot; class=&quot;headerlink&quot; title=&quot;部署nfs服务&quot;&gt;&lt;/a&gt;部署 nfs 服务&lt;/h3&gt;&lt;p&gt;1、主机安装 nfs 服务器&lt;/p&gt;
&lt;pre class=&quot;language-none&quot;&gt;&lt;code class=&quot;language-none&quot;&gt;sudo apt-get install nfs-kernel-server
sudo apt-get install nfs-common&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://jueee.github.io/categories/Linux/"/>
    
    <category term="软件" scheme="https://jueee.github.io/categories/Linux/%E8%BD%AF%E4%BB%B6/"/>
    
    <category term="k8s" scheme="https://jueee.github.io/categories/k8s/"/>
    
    
    <category term="k8s" scheme="https://jueee.github.io/tags/k8s/"/>
    
    <category term="NFS" scheme="https://jueee.github.io/tags/NFS/"/>
    
  </entry>
  
  <entry>
    <title>Python 转化文件编码为 UTF8</title>
    <link href="https://jueee.github.io/2020/10/2020-10-10-Python%E8%BD%AC%E5%8C%96%E6%96%87%E4%BB%B6%E7%BC%96%E7%A0%81%E4%B8%BAUTF8/"/>
    <id>https://jueee.github.io/2020/10/2020-10-10-Python%E8%BD%AC%E5%8C%96%E6%96%87%E4%BB%B6%E7%BC%96%E7%A0%81%E4%B8%BAUTF8/</id>
    <published>2020-10-10T00:00:00.000Z</published>
    <updated>2020-10-10T09:27:42.694Z</updated>
    
    <content type="html"><![CDATA[<p>使用编译器若遇到文件编码问题，当文件中有中文时，则会出现乱码，会因为编码问题导致各种错误。</p><p>所以写了个 python 脚本来检测原文件编码并转换为目标编码，以下代码以目标编码为 utf-8 为例：</p><p>需要安装 chardet，详情：<span class="exturl" data-url="aHR0cHM6Ly9weXBpLnB5dGhvbi5vcmcvcHlwaS9jaGFyZGV0">https://pypi.python.org/pypi/chardet<i class="fa fa-external-link-alt"></i></span> </p><a id="more"></a><h3 id="Python2"><a href="#Python2" class="headerlink" title="Python2"></a>Python2</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> codecs<span class="token keyword">import</span> os<span class="token keyword">import</span> sys<span class="token keyword">import</span> shutil<span class="token keyword">import</span> re<span class="token keyword">import</span> chardetconvertdir <span class="token operator">=</span> <span class="token string">"E:\\code\\GitCode\\test-demo\\src\\main\\java"</span>convertfiletypes <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token string">".java"</span><span class="token punctuation">,</span>  <span class="token string">".h"</span><span class="token punctuation">,</span>  <span class="token string">".hpp"</span>  <span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">convert_encoding</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> target_encoding<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># Backup the origin file.</span>    <span class="token comment"># convert file from the source encoding to target encoding</span>    content <span class="token operator">=</span> codecs<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    source_encoding <span class="token operator">=</span> chardet<span class="token punctuation">.</span>detect<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'encoding'</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> source_encoding <span class="token operator">!=</span> <span class="token string">'utf-8'</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> source_encoding<span class="token punctuation">,</span> filename        content <span class="token operator">=</span> content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span>source_encoding<span class="token punctuation">,</span> <span class="token string">'ignore'</span><span class="token punctuation">)</span> <span class="token comment">#.encode(source_encoding)</span>        codecs<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span>target_encoding<span class="token punctuation">)</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> root<span class="token punctuation">,</span> dirs<span class="token punctuation">,</span> files <span class="token keyword">in</span> os<span class="token punctuation">.</span>walk<span class="token punctuation">(</span>convertdir<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> f <span class="token keyword">in</span> files<span class="token punctuation">:</span>            <span class="token keyword">for</span> filetype <span class="token keyword">in</span> convertfiletypes<span class="token punctuation">:</span>                <span class="token keyword">if</span> f<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>endswith<span class="token punctuation">(</span>filetype<span class="token punctuation">)</span><span class="token punctuation">:</span>                    filename <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>root<span class="token punctuation">,</span> f<span class="token punctuation">)</span>                    <span class="token keyword">try</span><span class="token punctuation">:</span>                        convert_encoding<span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span>                    <span class="token keyword">except</span> Exception<span class="token punctuation">,</span> e<span class="token punctuation">:</span>                        <span class="token keyword">print</span> filename<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> codecs<span class="token keyword">import</span> os<span class="token keyword">import</span> sys<span class="token keyword">import</span> shutil<span class="token keyword">import</span> re<span class="token keyword">import</span> chardetconvertdir <span class="token operator">=</span> <span class="token string">"E:\\code\\GitCode\\test-demo\\src\\main\\java"</span>convertfiletypes <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token string">".java"</span><span class="token punctuation">,</span>  <span class="token string">".h"</span><span class="token punctuation">,</span>  <span class="token string">".hpp"</span>  <span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">convert_encoding</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> target_encoding<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># Backup the origin file.</span>    <span class="token comment"># convert file from the source encoding to target encoding</span>    content <span class="token operator">=</span> codecs<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    source_encoding <span class="token operator">=</span> chardet<span class="token punctuation">.</span>detect<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'encoding'</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> source_encoding <span class="token operator">!=</span> <span class="token string">'utf-8'</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>source_encoding<span class="token punctuation">,</span> filename<span class="token punctuation">)</span>        content <span class="token operator">=</span> content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span>source_encoding<span class="token punctuation">,</span> <span class="token string">'ignore'</span><span class="token punctuation">)</span> <span class="token comment">#.encode(source_encoding)</span>        codecs<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span>target_encoding<span class="token punctuation">)</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> root<span class="token punctuation">,</span> dirs<span class="token punctuation">,</span> files <span class="token keyword">in</span> os<span class="token punctuation">.</span>walk<span class="token punctuation">(</span>convertdir<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> f <span class="token keyword">in</span> files<span class="token punctuation">:</span>            <span class="token keyword">for</span> filetype <span class="token keyword">in</span> convertfiletypes<span class="token punctuation">:</span>                <span class="token keyword">if</span> f<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>endswith<span class="token punctuation">(</span>filetype<span class="token punctuation">)</span><span class="token punctuation">:</span>                    filename <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>root<span class="token punctuation">,</span> f<span class="token punctuation">)</span>                    <span class="token keyword">try</span><span class="token punctuation">:</span>                        convert_encoding<span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span>                    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>                        <span class="token keyword">print</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span>   </code></pre><h4 id="问题处理"><a href="#问题处理" class="headerlink" title="问题处理"></a>问题处理</h4><p>若报错：</p><blockquote><p>'gbk' codec can't decode byte 0xae in position 758: illegal multibyte sequence</p></blockquote><p>此种错误，可能是要处理的字符串本身不是 gbk 编码，但是却以 gbk 编码去解码 。比如，字符串本身是 utf-8 的，但是却用 gbk 去解码 utf-8 的字符串，所以结果不用说，则必然出错。</p><p>通过查阅资料，在读取文本的时候加入参数‘b’, 不会提示错误，通过输出读取的数据显示。</p><pre class="language-python" data-language="python"><code class="language-python">content <span class="token operator">=</span> codecs<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;使用编译器若遇到文件编码问题，当文件中有中文时，则会出现乱码，会因为编码问题导致各种错误。&lt;/p&gt;
&lt;p&gt;所以写了个 python 脚本来检测原文件编码并转换为目标编码，以下代码以目标编码为 utf-8 为例：&lt;/p&gt;
&lt;p&gt;需要安装 chardet，详情：&lt;a href=&quot;https://pypi.python.org/pypi/chardet&quot;&gt;https://pypi.python.org/pypi/chardet&lt;/a&gt; &lt;/p&gt;</summary>
    
    
    
    <category term="Python" scheme="https://jueee.github.io/categories/Python/"/>
    
    
    <category term="Python" scheme="https://jueee.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 博客添加 Live2D 看板娘</title>
    <link href="https://jueee.github.io/2020/10/2020-10-09-Hexo%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0Live2D%E7%9C%8B%E6%9D%BF%E5%A8%98/"/>
    <id>https://jueee.github.io/2020/10/2020-10-09-Hexo%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0Live2D%E7%9C%8B%E6%9D%BF%E5%A8%98/</id>
    <published>2020-10-09T00:00:00.000Z</published>
    <updated>2020-10-10T01:36:48.078Z</updated>
    
    <content type="html"><![CDATA[<h3 id="资料汇总"><a href="#资料汇总" class="headerlink" title="资料汇总"></a>资料汇总</h3><ul><li>GitHub：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0VZSE4vaGV4by1oZWxwZXItbGl2ZTJk">https://github.com/EYHN/hexo-helper-live2d<i class="fa fa-external-link-alt"></i></span></li><li> 配置说明：<span class="exturl" data-url="aHR0cHM6Ly9sMmR3aWRnZXQuanMub3JnL2RvY3MvY2xhc3Mvc3JjL2luZGV4LmpzfkwyRHdpZGdldC5odG1s">https://l2dwidget.js.org/docs/class/src/index.js~L2Dwidget.html<i class="fa fa-external-link-alt"></i></span></li><li> 模型仓库：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3hpYXpleXUvbGl2ZTJkLXdpZGdldC1tb2RlbHM=">https://github.com/xiazeyu/live2d-widget-models<i class="fa fa-external-link-alt"></i></span></li><li> 模型预览：<span class="exturl" data-url="aHR0cHM6Ly9odWFqaTgudG9wL3Bvc3QvbGl2ZTJkLXBsdWdpbi0yLjAv">https://huaji8.top/post/live2d-plugin-2.0/<i class="fa fa-external-link-alt"></i></span></li></ul><a id="more"></a><h3 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h3><p>首先，安装 npm 包：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save hexo-helper-live2d</code></pre><p>然后在 hexo 的配置文件<code>_config.yml</code> 中添加如下配置，详细配置可以参考<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0VZSE4vaGV4by1oZWxwZXItbGl2ZTJkL2Jsb2IvbWFzdGVyL1JFQURNRS56aC1DTi5tZA==">文档<i class="fa fa-external-link-alt"></i></span>：</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">live2d</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">scriptFrom</span><span class="token punctuation">:</span> local  <span class="token key atrule">pluginRootPath</span><span class="token punctuation">:</span> live2dw/  <span class="token key atrule">pluginJsPath</span><span class="token punctuation">:</span> lib/  <span class="token key atrule">pluginModelPath</span><span class="token punctuation">:</span> assets/  <span class="token key atrule">tagMode</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">debug</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">model</span><span class="token punctuation">:</span>    <span class="token key atrule">use</span><span class="token punctuation">:</span> live2d<span class="token punctuation">-</span>widget<span class="token punctuation">-</span>model<span class="token punctuation">-</span>wanko  <span class="token key atrule">display</span><span class="token punctuation">:</span>    <span class="token key atrule">position</span><span class="token punctuation">:</span> right    <span class="token key atrule">width</span><span class="token punctuation">:</span> <span class="token number">150</span>    <span class="token key atrule">height</span><span class="token punctuation">:</span> <span class="token number">300</span>  <span class="token key atrule">mobile</span><span class="token punctuation">:</span>    <span class="token key atrule">show</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">react</span><span class="token punctuation">:</span>    <span class="token key atrule">opacity</span><span class="token punctuation">:</span> <span class="token number">0.7</span></code></pre><p>然后下载模型，模型名称可以到<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3hpYXpleXUvbGl2ZTJkLXdpZGdldC1tb2RlbHM=">这里<i class="fa fa-external-link-alt"></i></span>参考，一些模型的预览可以在<span class="exturl" data-url="aHR0cHM6Ly9odWFqaTgudG9wL3Bvc3QvbGl2ZTJkLXBsdWdpbi0yLjAv">这里<i class="fa fa-external-link-alt"></i></span>。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> live2d-widget-model-shizuku</code></pre><h3 id="效果预览"><a href="#效果预览" class="headerlink" title="效果预览"></a>效果预览</h3><p><img src="/images/2020/10/1602240328748.png" alt="1602240328748" loading="lazy"></p><h3 id="配置解释"><a href="#配置解释" class="headerlink" title="配置解释"></a>配置解释</h3><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Live2D</span><span class="token comment">## https://github.com/EYHN/hexo-helper-live2d</span><span class="token comment">## https://l2dwidget.js.org/docs/class/src/index.js~L2Dwidget.html#instance-method-init</span><span class="token key atrule">live2d</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment">#enable: false</span>  <span class="token key atrule">scriptFrom</span><span class="token punctuation">:</span> local <span class="token comment"># 默认</span>  <span class="token key atrule">pluginRootPath</span><span class="token punctuation">:</span> live2dw/ <span class="token comment"># 插件在站点上的根目录(相对路径)</span>  <span class="token key atrule">pluginJsPath</span><span class="token punctuation">:</span> lib/ <span class="token comment"># 脚本文件相对与插件根目录路径</span>  <span class="token key atrule">pluginModelPath</span><span class="token punctuation">:</span> assets/ <span class="token comment"># 模型文件相对与插件根目录路径</span>  <span class="token comment"># scriptFrom: jsdelivr # jsdelivr CDN</span>  <span class="token comment"># scriptFrom: unpkg # unpkg CDN</span>  <span class="token comment"># scriptFrom: https://cdn.jsdelivr.net/npm/live2d-widget@3.x/lib/L2Dwidget.min.js # 你的自定义 url</span>  <span class="token key atrule">tagMode</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 标签模式, 是否仅替换 live2d tag标签而非插入到所有页面中</span>  <span class="token key atrule">debug</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 调试, 是否在控制台输出日志</span>  <span class="token key atrule">model</span><span class="token punctuation">:</span>    <span class="token key atrule">use</span><span class="token punctuation">:</span> live2d<span class="token punctuation">-</span>widget<span class="token punctuation">-</span>model<span class="token punctuation">-</span>hibiki    <span class="token comment"># use: live2d-widget-model-wanko # npm-module package name</span>    <span class="token comment"># use: wanko # 博客根目录/live2d_models/ 下的目录名</span>    <span class="token comment"># use: ./wives/wanko # 相对于博客根目录的路径</span>    <span class="token comment"># use: https://cdn.jsdelivr.net/npm/live2d-widget-model-wanko@1.0.5/assets/wanko.model.json # 你的自定义 url</span>  <span class="token key atrule">display</span><span class="token punctuation">:</span>    <span class="token key atrule">position</span><span class="token punctuation">:</span> right    <span class="token key atrule">width</span><span class="token punctuation">:</span> <span class="token number">145</span>    <span class="token key atrule">height</span><span class="token punctuation">:</span> <span class="token number">315</span>  <span class="token key atrule">mobile</span><span class="token punctuation">:</span>    <span class="token key atrule">show</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 是否在移动设备上显示</span>    <span class="token key atrule">scale</span><span class="token punctuation">:</span> <span class="token number">0.5</span> <span class="token comment"># 移动设备上的缩放</span>  <span class="token key atrule">react</span><span class="token punctuation">:</span>    <span class="token key atrule">opacityDefault</span><span class="token punctuation">:</span> <span class="token number">0.7</span>    <span class="token key atrule">opacityOnHover</span><span class="token punctuation">:</span> <span class="token number">0.8</span></code></pre><h3 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h3><h4 id="position-left-不生效"><a href="#position-left-不生效" class="headerlink" title="position: left 不生效"></a>position: left 不生效</h4><blockquote><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0VZSE4vaGV4by1oZWxwZXItbGl2ZTJkL2lzc3Vlcy8xMDA=">https://github.com/EYHN/hexo-helper-live2d/issues/100<i class="fa fa-external-link-alt"></i></span></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;资料汇总&quot;&gt;&lt;a href=&quot;#资料汇总&quot; class=&quot;headerlink&quot; title=&quot;资料汇总&quot;&gt;&lt;/a&gt;资料汇总&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;GitHub：&lt;a href=&quot;https://github.com/EYHN/hexo-helper-live2d&quot;&gt;https://github.com/EYHN/hexo-helper-live2d&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; 配置说明：&lt;a href=&quot;https://l2dwidget.js.org/docs/class/src/index.js~L2Dwidget.html&quot;&gt;https://l2dwidget.js.org/docs/class/src/index.js~L2Dwidget.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; 模型仓库：&lt;a href=&quot;https://github.com/xiazeyu/live2d-widget-models&quot;&gt;https://github.com/xiazeyu/live2d-widget-models&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; 模型预览：&lt;a href=&quot;https://huaji8.top/post/live2d-plugin-2.0/&quot;&gt;https://huaji8.top/post/live2d-plugin-2.0/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Blog" scheme="https://jueee.github.io/categories/Blog/"/>
    
    
    <category term="Blog" scheme="https://jueee.github.io/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>FastDFS 容器化安装实践</title>
    <link href="https://jueee.github.io/2020/09/2020-09-24-FastDFS%E5%AE%B9%E5%99%A8%E5%8C%96%E5%AE%89%E8%A3%85%E5%AE%9E%E8%B7%B5/"/>
    <id>https://jueee.github.io/2020/09/2020-09-24-FastDFS%E5%AE%B9%E5%99%A8%E5%8C%96%E5%AE%89%E8%A3%85%E5%AE%9E%E8%B7%B5/</id>
    <published>2020-09-24T00:00:00.000Z</published>
    <updated>2020-09-24T10:56:48.043Z</updated>
    
    <content type="html"><![CDATA[<h3 id="FastDFS-容器化安装"><a href="#FastDFS-容器化安装" class="headerlink" title="FastDFS 容器化安装"></a>FastDFS 容器化安装</h3><h4 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h4><p>新增 .env 文件如下：</p><pre class="language-none"><code class="language-none">HOSTNAME_COMMAND=xxx.xxx.xxx.xxx</code></pre><p>其中，<code>xxx.xxx.xxx.xxx&nbsp;</code>为 服务器 IP 地址。</p><h4 id="nginx-conf-配置"><a href="#nginx-conf-配置" class="headerlink" title="nginx.conf&nbsp;配置"></a>nginx.conf&nbsp;配置</h4><p><code>nginx.conf</code> 文件增加配置如下：</p><pre class="language-none"><code class="language-none">location /group1/M00 {root /fastdfs/storage/data;ngx_fastdfs_module;}</code></pre><h4 id="docker-compose"><a href="#docker-compose" class="headerlink" title="docker-compose"></a>docker-compose</h4><p><code>docker-compose.yml</code> 文件如下：</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'2'</span><span class="token key atrule">services</span><span class="token punctuation">:</span>    <span class="token key atrule">fastdfs-tracker</span><span class="token punctuation">:</span>        <span class="token key atrule">hostname</span><span class="token punctuation">:</span> fastdfs<span class="token punctuation">-</span>tracker        <span class="token key atrule">container_name</span><span class="token punctuation">:</span> fastdfs<span class="token punctuation">-</span>tracker        <span class="token key atrule">image</span><span class="token punctuation">:</span> season/fastdfs<span class="token punctuation">:</span><span class="token number">1.2</span>        <span class="token key atrule">network_mode</span><span class="token punctuation">:</span> <span class="token string">"host"</span>        <span class="token key atrule">command</span><span class="token punctuation">:</span> tracker        <span class="token key atrule">volumes</span><span class="token punctuation">:</span>          <span class="token punctuation">-</span> ./data/tracker_data<span class="token punctuation">:</span>/fastdfs/tracker/data    <span class="token key atrule">fastdfs-storage</span><span class="token punctuation">:</span>        <span class="token key atrule">hostname</span><span class="token punctuation">:</span> fastdfs<span class="token punctuation">-</span>storage        <span class="token key atrule">container_name</span><span class="token punctuation">:</span> fastdfs<span class="token punctuation">-</span>storage        <span class="token key atrule">image</span><span class="token punctuation">:</span> season/fastdfs<span class="token punctuation">:</span><span class="token number">1.2</span>        <span class="token key atrule">network_mode</span><span class="token punctuation">:</span> <span class="token string">"host"</span>        <span class="token key atrule">volumes</span><span class="token punctuation">:</span>          <span class="token punctuation">-</span> ./data/storage_data<span class="token punctuation">:</span>/fastdfs/storage/data          <span class="token punctuation">-</span> ./data/store_path<span class="token punctuation">:</span>/fastdfs/store_path        <span class="token key atrule">environment</span><span class="token punctuation">:</span>          <span class="token punctuation">-</span> TRACKER_SERVER=$<span class="token punctuation">{</span>HOSTNAME_COMMAND<span class="token punctuation">}</span><span class="token punctuation">:</span><span class="token number">22122</span>        <span class="token key atrule">command</span><span class="token punctuation">:</span> storage        <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>          <span class="token punctuation">-</span> fastdfs<span class="token punctuation">-</span>tracker    <span class="token key atrule">fastdfs-nginx</span><span class="token punctuation">:</span>        <span class="token key atrule">hostname</span><span class="token punctuation">:</span> fastdfs<span class="token punctuation">-</span>nginx        <span class="token key atrule">container_name</span><span class="token punctuation">:</span> fastdfs<span class="token punctuation">-</span>nginx        <span class="token key atrule">image</span><span class="token punctuation">:</span> season/fastdfs<span class="token punctuation">:</span><span class="token number">1.2</span>        <span class="token key atrule">network_mode</span><span class="token punctuation">:</span> <span class="token string">"host"</span>        <span class="token key atrule">volumes</span><span class="token punctuation">:</span>          <span class="token punctuation">-</span> ./nginx.conf<span class="token punctuation">:</span>/etc/nginx/conf/nginx.conf          <span class="token punctuation">-</span> ./data/store_path<span class="token punctuation">:</span>/fastdfs/store_path        <span class="token key atrule">environment</span><span class="token punctuation">:</span>          <span class="token punctuation">-</span> TRACKER_SERVER=$<span class="token punctuation">{</span>HOSTNAME_COMMAND<span class="token punctuation">}</span><span class="token punctuation">:</span><span class="token number">22122</span>        <span class="token key atrule">command</span><span class="token punctuation">:</span> nginx</code></pre><p>需要注意：</p><ul><li>network_mode 必须是 host, 原因是当上传文件时，tracker 会把 storage 的 IP 和端口发给 client，如果是 bridge 模式，则发送的是内网 IP，client 无法访问到。</li><li>image 采用 season/fastdfs:1.2 ，不要用 lastest, 因为 lastest 不包含 nginx 服务，其他 fasdfs 镜像均没有 season 的精简。</li></ul><h3 id="测试-FastDFS"><a href="#测试-FastDFS" class="headerlink" title="测试 FastDFS"></a>测试 FastDFS</h3><p>命令行测试上传</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ fdfs_upload_file /etc/fdfs/client.conf /home/ant/test group1/M00/00/00/CqD3YF3kwS-ACYbMAAAAHDDhFHI6820520</code></pre><p>命令行测试下载：</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ fdfs_download_file /etc/fdfs/client.conf group1/M00/00/00/CqD3YF3kwS-ACYbMAAAAHDDhFHI6820520</code></pre><p>http 测试下载：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> http://xxx.xxx.xxx.xxx/group1/M00/00/00/CmmIP19sbZ6ABzkBAAAXTnaiWqo2684096?filename<span class="token operator">=</span>testfile</code></pre><h3 id="访问-FastDFS"><a href="#访问-FastDFS" class="headerlink" title="访问 FastDFS"></a>访问 FastDFS</h3><p>其他容器如需按照域名访问 FastDFS，可增加配置：</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">web-admin</span><span class="token punctuation">:</span>   <span class="token key atrule">container_name</span><span class="token punctuation">:</span> web<span class="token punctuation">-</span>admin   <span class="token key atrule">extra_hosts</span><span class="token punctuation">:</span>       <span class="token punctuation">-</span> <span class="token string">"fastdfs.manti-infra.svc:${HOSTNAME_COMMAND}"</span></code></pre><h3 id="问题处理"><a href="#问题处理" class="headerlink" title="问题处理"></a>问题处理</h3><h4 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h4><p>报错问题：</p><pre class="language-none"><code class="language-none">[error] 13#0: *1 open() "/etc/nginx/html/group1/M00/00/00/CmmIP19sbZ6ABzkBAAAXTnaiWqo2684096" failed (2: No such file or directory)</code></pre><p>修复：修改 nginx.conf 中的 location 配置为：</p><pre class="language-none"><code class="language-none">location/group1/M00/ {alias /fastdfs/store_path/data;ngx_fastdfs_module;}</code></pre><h4 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h4><p>报错问题：</p><pre class="language-none"><code class="language-none">ERROR - file: ../common/fdfs_global.c, line:52, the format of filename"group1/M00/00/00/wKgAA1cLh12AI0kfAAAADzbdjmQ50_big.html"is invalid</code></pre><p>原因：nginx 的 fdfs 的 MOD 里面默认没有开启 url_have_group_name</p><p>修复：开启 mod_fastdfs.conf 文件中的 url_have_group_name 选项，后重启 nginx</p><h4 id="问题三"><a href="#问题三" class="headerlink" title="问题三"></a>问题三</h4><pre class="language-none"><code class="language-none">/usr/src/fastdfs-nginx-module/src/common.c:21:25:致命错误：fdfs_define.h：没有那个文件或目录#include "fdfs_define.h" 编译中断。</code></pre><p>原因：编译安装 nginx 的 fastdfs 插件的头文件没有找到，由于编译 nginx 时候系统会到／usr/local/include，而编译安装 fastdfs-nginx-module 时则默认保存在了 /usr/include 目录。</p><p>修复：ln -s /usr/include/fast* /usr/local/include/</p><h4 id="问题四"><a href="#问题四" class="headerlink" title="问题四"></a>问题四</h4><p>Nginx 启动后 error.log 日志报错</p><pre class="language-none"><code class="language-none">ERROR - file:../storage/trunk_mgr/trunk_shared.c, line: 177, "No such file ordirectory" can't be accessed, error info: /data/fastdfs</code></pre><p>原因：nginx 的 fdfs 插件没有在 /etc/fdfs 目录中找到 http.conf 和 mime.types。</p><p>修复：复制或者创建对应文件的软连接<br>cp/usr/local/FastDFS/conf/http.conf /etc/fdfs/<br>cp/usr/local/FastDFS/conf/mime.types /etc/fdfs/</p><h4 id="问题五"><a href="#问题五" class="headerlink" title="问题五"></a>问题五</h4><p>页面访问动态缩略图返回 415</p><p>原因：</p><ul><li>首先需要排除文件类型的问题，image_filter 只支持 jpg、git 和 png 三种格式的图片文件，调用其他格式的 图片文件 会返回 415。</li><li>其次要确认设置的 image_filter 缓存是否小于上传的图片大小，如果小于同样会报 415 错误。</li></ul><p>如果排除以上两种可能性，那么出现的问题应该是没有在 Nginx 页面的 DocumentRoot 目录创建 FastDFS 数据存储的软连接。</p><p>修复：执行下列命令创建软连接：</p><pre class="language-none"><code class="language-none"># mkdir -pv/usr/local/nginx/html/group1# ln -s /data/fastdfs_store/data/usr/local/nginx/html/group1/M00</code></pre><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20veWxvdmVkL3AvMTI2NDk1NjkuaHRtbA==">https://www.cnblogs.com/yloved/p/12649569.html<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYWxpeXVuLmNvbS9hcnRpY2xlLzU0NTAxNg==">https://developer.aliyun.com/article/545016<i class="fa fa-external-link-alt"></i></span></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;FastDFS-容器化安装&quot;&gt;&lt;a href=&quot;#FastDFS-容器化安装&quot; class=&quot;headerlink&quot; title=&quot;FastDFS 容器化安装&quot;&gt;&lt;/a&gt;FastDFS 容器化安装&lt;/h3&gt;&lt;h4 id=&quot;环境变量&quot;&gt;&lt;a href=&quot;#环境变量&quot;</summary>
      
    
    
    
    <category term="Linux" scheme="https://jueee.github.io/categories/Linux/"/>
    
    <category term="软件" scheme="https://jueee.github.io/categories/Linux/%E8%BD%AF%E4%BB%B6/"/>
    
    <category term="Docker" scheme="https://jueee.github.io/categories/Docker/"/>
    
    
    <category term="Docker" scheme="https://jueee.github.io/tags/Docker/"/>
    
    <category term="FastDFS" scheme="https://jueee.github.io/tags/FastDFS/"/>
    
  </entry>
  
  <entry>
    <title>Docker 容器日志管理最佳实践</title>
    <link href="https://jueee.github.io/2020/09/2020-09-22-Docker%E5%AE%B9%E5%99%A8%E6%97%A5%E5%BF%97%E7%AE%A1%E7%90%86%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"/>
    <id>https://jueee.github.io/2020/09/2020-09-22-Docker%E5%AE%B9%E5%99%A8%E6%97%A5%E5%BF%97%E7%AE%A1%E7%90%86%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</id>
    <published>2020-09-22T00:00:00.000Z</published>
    <updated>2020-09-22T09:52:32.133Z</updated>
    
    <content type="html"><![CDATA[<p>Docker 日志分为两类：</p><ul><li>Docker 引擎日志 (也就是 dockerd 运行时的日志)，</li><li>容器的日志，容器内的服务产生的日志。</li></ul><a id="more"></a><h3 id="Docker-引擎日志"><a href="#Docker-引擎日志" class="headerlink" title="Docker 引擎日志"></a>Docker 引擎日志</h3><p>Docker 引擎日志一般是交给了 Upstart (Ubuntu 14.04) 或者 systemd (CentOS 7, Ubuntu 16.04)。前者一般位于 /var/log/upstart/docker.log 下，后者我们一般 通过 <code>journalctl -u docker </code>来进行查看。</p><table><thead><tr><th>系统</th><th>日志位置</th></tr></thead><tbody><tr><td> Ubuntu(14.04)</td><td><code>/var/log/upstart/docker.log</code></td></tr><tr><td>Ubuntu(16.04)</td><td><code>journalctl -u docker.service</code></td></tr><tr><td>CentOS 7/RHEL 7/Fedora</td><td><code>journalctl -u docker.service</code></td></tr><tr><td>CoreOS</td><td><code>journalctl -u docker.service</code></td></tr><tr><td>OpenSuSE</td><td><code>journalctl -u docker.service</code></td></tr><tr><td>OSX</td><td><code>~/Library/Containers/com.docker.docker/Data/com.docker.driver.amd64-linux/log/d‌ocker.log</code></td></tr><tr><td>Debian GNU/Linux 7</td><td><code>/var/log/daemon.log</code></td></tr><tr><td>Debian GNU/Linux 8</td><td><code>journalctl -u docker.service</code></td></tr><tr><td>Boot2Docker</td><td><code>/var/log/docker.log</code></td></tr></tbody></table><p>以上内容来自：<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmxhYjk5Lm9yZy9wb3N0L2RvY2tlci0yMDE2LTA3LTE0LWZhcS5odG1s">https://blog.lab99.org/post/docker-2016-07-14-faq.html<i class="fa fa-external-link-alt"></i></span></p><h3 id="容器日志"><a href="#容器日志" class="headerlink" title="容器日志"></a>容器日志</h3><h4 id="Docker-日志命令"><a href="#Docker-日志命令" class="headerlink" title="Docker 日志命令"></a>Docker 日志命令</h4><p><code>docker logs CONTAINER</code> 显示当前运行的容器的日志信息， UNIX 和 Linux 的命令有三种 输入输出，分别是 STDIN (标准输入)、STDOUT (标准输出)、STDERR (标准错误输出)，docker logs 显示的内容包含 STOUT 和 STDERR。在生产环境，如果我们的应用输出到我们的日志文件里，所以我们在使用 docker logs 一般收集不到太多重要的日志信息。</p><blockquote><ul><li>nginx 官方镜像，使用了一种方式，让日志输出到 STDOUT，也就是 创建一个符号链接 <code>/var/log/nginx/access.log</code> 到 <code>/dev/stdout</code>。</li><li>httpd 使用的是 让其输出到指定文件 ，正常日志输出到 <code>/proc/self/fd/1</code> (STDOUT) ，错误日志输出到 <code>/proc/self/fd/2</code> (STDERR)。</li><li>当日志量比较大的时候，我们使用 docker logs 来查看日志，会对 docker daemon 造成比较大的压力，容器导致容器创建慢等一系列问题。</li><li><strong>只有使用了 local 、json-file、journald 的日志驱动的容器才可以使用 docker logs 捕获日志，使用其他日志驱动无法使用 docker logs</strong></li></ul></blockquote><h4 id="Docker-日志驱动"><a href="#Docker-日志驱动" class="headerlink" title="Docker 日志驱动"></a>Docker 日志驱动</h4><p>Docker 提供了两种模式用于将消息从容器到日志驱动。</p><ul><li>(默认) 拒绝，阻塞从容器到容器驱动</li><li>非阻塞传递，日志将储存在容器的缓冲区。</li></ul><blockquote><p>当缓冲区满，旧的日志将被丢弃。</p></blockquote><p>在 mode 日志选项控制使用 <code>blocking(默认)</code> 或者 <code>non-blocking</code>, 当设置为 <code>non-blocking</code> 需要设置 <code>max-buffer-size</code> 参数 (默认为 1MB)。</p><p>支持的驱动</p><table><thead><tr><th></th><th>描述</th></tr></thead><tbody><tr><td><code>none</code></td><td>运行的容器没有日志，<code>docker logs</code> 也不返回任何输出。</td></tr><tr><td><a href="https://docs.docker.com/config/containers/logging/local/"><code>local</code></a></td><td>日志以自定义格式存储，旨在实现最小开销。</td></tr><tr><td><a href="https://docs.docker.com/config/containers/logging/json-file/"><code>json-file</code></a></td><td>日志格式为 JSON。Docker 的默认日志记录驱动程序。</td></tr><tr><td><a href="https://docs.docker.com/config/containers/logging/syslog/"><code>syslog</code></a></td><td>将日志消息写入 <code>syslog</code>。该 <code>syslog</code> 守护程序必须在主机上运行。</td></tr><tr><td><a href="https://docs.docker.com/config/containers/logging/journald/"><code>journald</code></a></td><td>将日志消息写入 <code>journald</code>。该 <code>journald</code> 守护程序必须在主机上运行。</td></tr><tr><td><a href="https://docs.docker.com/config/containers/logging/gelf/"><code>gelf</code></a></td><td>将日志消息写入 Graylog 扩展日志格式（GELF）端点，例如 Graylog 或 Logstash。</td></tr><tr><td><a href="https://docs.docker.com/config/containers/logging/fluentd/"><code>fluentd</code></a></td><td>将日志消息写入 <code>fluentd</code>（转发输入）。该 <code>fluentd</code> 守护程序必须在主机上运行。</td></tr><tr><td><a href="https://docs.docker.com/config/containers/logging/awslogs/"><code>awslogs</code></a></td><td>将日志消息写入 Amazon CloudWatch Logs。</td></tr><tr><td><a href="https://docs.docker.com/config/containers/logging/splunk/"><code>splunk</code></a></td><td>使用 HTTP 事件收集器将日志消息写入 <code>splunk</code>。</td></tr><tr><td><a href="https://docs.docker.com/config/containers/logging/etwlogs/"><code>etwlogs</code></a></td><td>将日志消息写为 Windows 事件跟踪（ETW）事件。仅适用于 Windows 平台。</td></tr><tr><td><a href="https://docs.docker.com/config/containers/logging/gcplogs/"><code>gcplogs</code></a></td><td>将日志消息写入 Google Cloud Platform（GCP）Logging。</td></tr><tr><td><a href="https://docs.docker.com/config/containers/logging/logentries/"><code>logentries</code></a></td><td>将日志消息写入 Rapid7 Logentries。</td></tr></tbody></table><p>使用 Docker-CE 版本，<code>docker logs </code>命令 仅仅适用于以下驱动程序 (前面 docker logs 详解也提及到了)</p><ul><li>local</li><li>json-file</li><li>journald</li></ul><p><img src="/images/2020/09/1600768133957.png" alt="1600768133957" loading="lazy"></p><p><strong>Docker 日志驱动常用命令</strong></p><p>查看系统当前设置的日志驱动</p><pre class="language-none"><code class="language-none">docker  info |grep  "Logging Driver"  / docker info --format '{{.LoggingDriver}}'</code></pre><p>查看单个容器的设置的日志驱动</p><pre class="language-none"><code class="language-none">docker inspect  -f '{{.HostConfig.LogConfig.Type}}'   容器id</code></pre><p><strong>Docker 日志驱动全局配置更改</strong></p><p>修改日志驱动，在配置文件 <code>/etc/docker/daemon.json</code>（注意该文件内容是 JSON 格式的）进行配置即可。</p><p>示例：</p><pre class="language-none"><code class="language-none">{  "log-driver": "syslog"}</code></pre><p>以上更改是针对所有的容器的日志驱动的。我们也可以单独为单一容器设置日志驱动。</p><p><strong>Docker 单一容器日志驱动配置</strong></p><p>在 运行容器的时候指定 日志驱动 <code>--log-driver</code>。</p><pre class="language-none"><code class="language-none">docker  run  -itd --log-driver none alpine ash # 这里指定的日志驱动为 none </code></pre><h3 id="日志驱动"><a href="#日志驱动" class="headerlink" title="日志驱动"></a>日志驱动</h3><h4 id="local"><a href="#local" class="headerlink" title="local"></a>local</h4><p><code>local</code> 日志驱动 记录从容器的 <code>STOUT/STDERR</code> 的输出，并写到宿主机的磁盘。</p><p>默认情况下，local 日志驱动为每个容器保留 100MB 的日志信息，并启用自动压缩来保存。(经过测试，保留 100MB 的日志是指没有经过压缩的日志)</p><p>local 日志驱动的储存位置 <code>/var/lib/docker/containers/容器id/local-logs/</code> 以 <code>container.log</code> 命名。</p><p><strong>local 驱动支持的选项</strong></p><table><thead><tr><th>选项</th><th>描述</th><th>示例值</th></tr></thead><tbody><tr><td><code>max-size</code></td><td>切割之前日志的最大大小。可取值为 (k,m,g)， 默认为 20m。</td><td><code>--log-opt max-size=10m</code></td></tr><tr><td><code>max-file</code></td><td>可以存在的最大日志文件数。如果超过最大值，则会删除最旧的文件。** 仅在 max-size 设置时有效。默认为 5。</td><td><code>--log-opt max-file=3</code></td></tr><tr><td><code>compress</code></td><td>对应切割日志文件是否启用压缩。默认情况下启用。</td><td><code>--log-opt compress=false</code></td></tr></tbody></table><p><strong>全局日志驱动设置为 —local</strong></p><p>在配置文件 <code>/etc/docker/daemon.json</code>（注意该文件内容是 JSON 格式的）进行配置即可。</p><pre class="language-none"><code class="language-none">{  "log-driver": "local",  "log-opts": {    "max-size": "10m"  }}</code></pre><p>重启 docker 即可生效。</p><p><strong>单个容器日志驱动设置为 —local</strong></p><p>运行容器并设定为 <code>local</code> 驱动。</p><pre class="language-none"><code class="language-none">#  运行一个容器 ，并设定日志驱动为 local ，并运行命令 ping www.baidu.com[root@localhost docker]# docker run  -itd  --log-driver  local  alpine  ping www.baidu.com 3795b6483534961c1d5223359ad1106433ce2bf25e18b981a47a2d79ad7a3156#  查看运行的容器的 日志驱动是否是 local[root@localhost docker]# docker inspect  -f '{{.HostConfig.LogConfig.Type}}'   3795b6483534961clocal# 查看日志[root@localhost local-logs]# tail -f  /var/lib/docker/containers/3795b6483534961c1d5223359ad1106433ce2bf25e18b981a47a2d79ad7a3156/local-logs/container.log NNdoutםѰ͕̈:64 bytes from 14.215.177.38: seq=816 ttl=55 time=5.320 msNNdoutهµ͕̈͡:64 bytes from 14.215.177.38: seq=817 ttl=55 time=4.950 ms</code></pre><blockquote><p>注意事项： 经过测试，当我们产生了 100 MB 大小的日志时 会有 四个压缩文件和一个 <code>container.log</code>：</p><pre class="language-none"><code class="language-none">[root@localhost local-logs]# ls -ltotal 32544-rw-r-----. 1 root root 18339944 May 16 09:41 container.log-rw-r-----. 1 root root  3698660 May 16 09:41 container.log.1.gz-rw-r-----. 1 root root  3726315 May 16 09:41 container.log.2.gz-rw-r-----. 1 root root  3805668 May 16 09:41 container.log.3.gz-rw-r-----. 1 root root  3744104 May 16 09:41 container.log.4.gz</code></pre><p>那么当超过了 100MB 的日志文件，日志文件会继续写入到 <code>container.log</code>，但是会将 <code>container.log</code> 日志中老的日志删除，追加新的，也就是 当写满 100MB 日志后 ，再产生一条新日志，会删除 <code>container.log</code> 中的一条老日志，保存 100MB 的大小。<strong>这个 对我们是会有一些影响的，</strong></p><pre class="language-none"><code class="language-none">当我运行系统时 第一天由于bug产生了 100MB 日志，那么之前的日志就已经有 80MB 日志变成的压缩包，所以我在后续的运行中，只能获取最近的 20MB日志。</code></pre></blockquote><h4 id="json-file（默认）"><a href="#json-file（默认）" class="headerlink" title="json-file（默认）"></a>json-file（默认）</h4><p><strong>所有容器默认的日志驱动 json-file</strong>。</p><p><code>json-file</code> 日志驱动 记录从容器的 <code>STOUT/STDERR</code> 的输出 ，用 JSON 的格式写到文件中，日志中不仅包含着 输出日志，还有时间戳和 输出格式。下面是一个 <code>ping www.baidu.com</code> 对应的 JSON 日志</p><pre class="language-none"><code class="language-none">{"log":"64 bytes from 14.215.177.39: seq=34 ttl=55 time=7.067 ms\r\n","stream":"stdout","time":"2019-05-16T14:14:15.030612567Z"}</code></pre><p>json-file 日志的路径位于 <code>/var/lib/docker/containers/container_id/container_id-json.log</code>。</p><p><code>json-file</code> 的 日志驱动支持以下选项：</p><table><thead><tr><th>选项</th><th>描述</th><th>示例值</th></tr></thead><tbody><tr><td><code>max-size</code></td><td>切割之前日志的最大大小。可取值单位为 (k,m,g)， 默认为 - 1（表示无限制）。</td><td><code>--log-opt max-size=10m</code></td></tr><tr><td><code>max-file</code></td><td>可以存在的最大日志文件数。如果切割日志会创建超过阈值的文件数，则会删除最旧的文件。<strong>仅在 max-size 设置时有效。</strong>正整数。默认为 1。</td><td><code>--log-opt max-file=3</code></td></tr><tr><td><code>labels</code></td><td>适用于启动 Docker 守护程序时。此守护程序接受的以逗号分隔的与日志记录相关的标签列表。</td><td><code>--log-opt labels=production_status,geo</code></td></tr><tr><td><code>env</code></td><td>适用于启动 Docker 守护程序时。此守护程序接受的以逗号分隔的与日志记录相关的环境变量列表。</td><td><code>--log-opt env=os,customer</code></td></tr><tr><td><code>env-regex</code></td><td>类似于并兼容 <code>env</code>。用于匹配与日志记录相关的环境变量的正则表达式。</td><td>`--log-opt env-regex=^(os</td></tr><tr><td><code>compress</code></td><td>切割的日志是否进行压缩。默认是 <code>disabled</code>。</td><td><code>--log-opt compress=true</code></td></tr></tbody></table><p><strong>json-file 的日志驱动示例</strong></p><pre class="language-none"><code class="language-none"># 设置 日志驱动为 json-file ，我们也可以不设置，因为默认就是 json-filedocker run  -itd  --name  test-log-json  --log-driver json-file   alpine  ping www.baidu.com199608b2e2c52136d2a17e539e9ef7fbacf97f1293678aded421dadbdb006a5e# 查看日志,日志名称就是 容器名称-json.logtail -f /var/lib/docker/containers/199608b2e2c52136d2a17e539e9ef7fbacf97f1293678aded421dadbdb006a5e/199608b2e2c52136d2a17e539e9ef7fbacf97f1293678aded421dadbdb006a5e-json.log{"log":"64 bytes from 14.215.177.39: seq=13 ttl=55 time=15.023 ms\r\n","stream":"stdout","time":"2019-05-16T14:13:54.003118877Z"}{"log":"64 bytes from 14.215.177.39: seq=14 ttl=55 time=9.640 ms\r\n","stream":"stdout","time":"2019-05-16T14:13:54.999011017Z"}{"log":"64 bytes from 14.215.177.39: seq=15 ttl=55 time=8.938 ms\r\n","stream":"stdout","time":"2019-05-16T14:13:55.998612636Z"}{"log":"64 bytes from 14.215.177.39: seq=16 ttl=55 time=18.086 ms\r\n","stream":"stdout","time":"2019-05-16T14:13:57.011235913Z"}{"log":"64 bytes from 14.215.177.39: seq=17 ttl=55 time=12.615 ms\r\n","stream":"stdout","time":"2019-05-16T14:13:58.007104112Z"}{"log":"64 bytes from 14.215.177.39: seq=18 ttl=55 time=11.001 ms\r\n","stream":"stdout","time":"2019-05-16T14:13:59.007559413Z"}</code></pre><h4 id="syslog"><a href="#syslog" class="headerlink" title="syslog"></a>syslog</h4><p>syslog 日志驱动将日志路由到 syslog 服务器，syslog 以原始的字符串作为 日志消息元数据，接收方可以提取以下的消息：</p><ul><li>level 日志等级 ，如 <code>debug</code>，<code>warning</code>，<code>error</code>，<code>info</code>。</li><li>timestamp 时间戳</li><li> hostname 事件发生的主机</li><li> facillty 系统模块</li><li>进程名称和进程 ID</li></ul><p><strong>syslog 日志驱动全局配置</strong></p><p>编辑 <code>/etc/docker/daemon.json</code> 文件</p><pre class="language-none"><code class="language-none">{  "log-driver": "syslog",  "log-opts": {    "syslog-address": "udp://1.2.3.4:1111"  }}</code></pre><p>重启 docker 即可生效。</p><table><thead><tr><th>Option</th><th>Description</th><th>Example value</th></tr></thead><tbody><tr><td><code>syslog-address</code></td><td>指定 syslog 服务所在的服务器和使用的协议和端口。 格式：`[tcp</td><td>udp</td></tr><tr><td><code>syslog-facility</code></td><td>使用的 <code>syslog</code> 的设备， 具体设备名称见 <span class="exturl" data-url="aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzU0MjQjc2VjdGlvbi02LjIuMQ==">syslog documentation<i class="fa fa-external-link-alt"></i></span>.</td><td><code>--log-opt syslog-facility=daemon</code></td></tr><tr><td><code>syslog-tls-ca-cert</code></td><td>如果使用的是 <code>tcp+tls</code> 的地址，指定 CA 证书的地址，如果没有使用，则不设置该选项。</td><td><code>--log-opt syslog-tls-ca-cert=/etc/ca-certificates/custom/ca.pem</code></td></tr><tr><td><code>syslog-tls-cert</code></td><td>如果使用的是 <code>tcp+tls</code> 的地址，指定 TLS 证书的地址，如果没有使用，则不设置该选项。</td><td><code>--log-opt syslog-tls-cert=/etc/ca-certificates/custom/cert.pem</code></td></tr><tr><td><code>syslog-tls-key</code></td><td>如果使用的是 <code>tcp+tls</code> 的地址，指定 TLS 证书 key 的地址，如果没有使用，则不设置该选项。**</td><td><code>--log-opt syslog-tls-key=/etc/ca-certificates/custom/key.pem</code></td></tr><tr><td><code>syslog-tls-skip-verify</code></td><td>如果设置为 true ，会跳过 TLS 验证，默认为 false</td><td><code>--log-opt syslog-tls-skip-verify=true</code></td></tr><tr><td><code>tag</code></td><td>将应用程序的名称附加到 <code>syslog</code> 消息中，默认情况下使用容器 ID 的前 12 位去 标记这个日志信息。</td><td><code>--log-opt tag=mailer</code></td></tr><tr><td><code>syslog-format</code></td><td><code>syslog</code> 使用的消息格式 如果未指定则使用本地 UNIX syslog 格式，rfc5424micro 格式具有微妙时间戳。</td><td><code>--log-opt syslog-format=rfc5424micro</code></td></tr><tr><td><code>labels</code></td><td>启动 docker 时，配置与日志相关的标签，以逗号分割</td><td><code>--log-opt labels=production_status,geo</code></td></tr><tr><td><code>env</code></td><td>启动 docker 时，指定环境变量用于日志中，以逗号分隔</td><td><code>--log-opt env=os,customer</code></td></tr><tr><td><code>env-regex</code></td><td>类似并兼容 <code>env</code>，</td><td>`--log-opt env-regex=^(os</td></tr></tbody></table><p>** 单个容器日志驱动设置为 —syslog **</p><p><code>Linux</code> 系统中 我们用的系统日志模块时 <code>rsyslog</code> ，它是基于 <code>syslog</code> 的标准实现。我们要使用 syslog 驱动需要使用 系统自带的 <code>rsyslog</code> 服务。</p><pre class="language-none"><code class="language-none"># 查看当前 rsyslog 版本和基本信息[root@localhost harbor]# rsyslogd  -vrsyslogd 8.24.0, compiled with:PLATFORM:x86_64-redhat-linux-gnuPLATFORM (lsb_release -d):FEATURE_REGEXP:YesGSSAPI Kerberos 5 support:YesFEATURE_DEBUG (debug build, slow code):No32bit Atomic operations supported:Yes64bit Atomic operations supported:Yesmemory allocator:system defaultRuntime Instrumentation (slow code):Nouuid support:YesNumber of Bits in RainerScript integers: 64See http://www.rsyslog.com for more information.</code></pre><p>配置 syslog , 在配置文件 <code>/etc/rsyslog.conf</code> 大约 14-20 行，我们可以看到两个配置，一个 udp，一个 tcp ，都是监听 514 端口，提供 syslog 的接收。选择 tcp 就将 tcp 的两个配置的前面 # 号注释即可。</p><pre class="language-none"><code class="language-none"># Provides UDP syslog reception#$ModLoad imudp#$UDPServerRun 514# Provides TCP syslog reception#$ModLoad imtcp  #$InputTCPServerRun 514</code></pre><p>然后重启 rsyslog，我们可以看到 514 端口在监听。</p><pre class="language-none"><code class="language-none">systemctl restart  rsyslog[root@localhost harbor]# netstat -ntul |grep 514tcp        0      0 0.0.0.0:514             0.0.0.0:*               LISTEN     tcp6       0      0 :::514                  :::*                    LISTEN  </code></pre><p>启动一个以 <code>syslog</code> 为驱动的容器。</p><pre class="language-none"><code class="language-none">docker  run -d -it  -p 87:80 --log-driver syslog --log-opt syslog-address=tcp://127.0.0.1:514  --name nginx-syslog   nginx</code></pre><p>访问并查看日志</p><pre class="language-none"><code class="language-none"># 访问nginxcurl 127.0.0.1:87# 查看访问日志tail -f  /var/log/messagesMay 17 15:56:48 localhost fe18924aefde[6141]: 172.17.0.1 - - [17/May/2019:07:56:48 +0000] "GET / HTTP/1.1" 200 612 "-" "curl/7.29.0" "-"#015May 17 15:58:16 localhost fe18924aefde[6141]: 172.17.0.1 - - [17/May/2019:07:58:16 +0000] "GET / HTTP/1.1" 200 612 "-" "curl/7.29.0" "-"#015</code></pre><h4 id="Journald"><a href="#Journald" class="headerlink" title="Journald"></a>Journald</h4><p><code>journald</code> 日志驱动程序将容器的日志发送到 <code>systemd journal</code>, 可以使用 <code>journal API</code> 或者使用 <code>docker logs</code> 来查日志。</p><p>除了日志本身以外， <code>journald</code> 日志驱动还会在日志加上下面的数据与消息一起储存。</p><table><thead><tr><th>Field</th><th>Description</th></tr></thead><tbody><tr><td><code>CONTAINER_ID</code></td><td>容器 ID, 为 12 个字符</td></tr><tr><td><code>CONTAINER_ID_FULL</code></td><td>完整的容器 ID，为 64 个字符</td></tr><tr><td><code>CONTAINER_NAME</code></td><td>启动时容器的名称，如果容器后面更改了名称，日志中的名称不会更改。</td></tr><tr><td><code>CONTAINER_TAG</code>, <code>SYSLOG_IDENTIFIER</code></td><td>容器的 tag.</td></tr><tr><td><code>CONTAINER_PARTIAL_MESSAGE</code></td><td>当日志比较长的时候使用标记来表示 (显示日志的大小)</td></tr></tbody></table><p>选项</p><table><thead><tr><th>选项</th><th>是否必须</th><th>描述</th></tr></thead><tbody><tr><td><code>tag</code></td><td>可选的</td><td>指定要在日志中设置 <code>CONTAINER_TAG</code> 和 <code>SYSLOG_IDENTIFIER</code> 值的模板。</td></tr><tr><td><code>labels</code></td><td>可选的</td><td>以逗号分隔的标签列表，如果为容器指定了这些标签，则应包含在消息中。</td></tr><tr><td><code>env</code></td><td>可选的</td><td>如果为容器指定了这些变量，则以逗号分隔的环境变量键列表（应包含在消息中）。</td></tr><tr><td><code>env-regex</code></td><td>可选的</td><td>与 env 类似并兼容。用于匹配与日志记录相关的环境变量的正则表达式 。</td></tr></tbody></table><p><strong>journald 日志驱动全局配置</strong></p><p>编辑 <code>/etc/docker/daemon.json</code> 文件</p><pre class="language-none"><code class="language-none">{  "log-driver": "journald"}</code></pre><p><strong>单个容器日志驱动设置为 —journald</strong></p><pre class="language-none"><code class="language-none">docker  run  -d -it --log-driver=journald \    --log-opt labels=location \    --log-opt env=TEST \    --env "TEST=false" \    --label location=china \    --name  nginx-journald\    -p 80:80\    nginx</code></pre><p>查看日志 <code>journalctl</code></p><pre class="language-none"><code class="language-none"># 只查询指定容器的相关消息 journalctl CONTAINER_NAME=webserver# -b 指定从上次启动以来的所有消息 journalctl -b CONTAINER_NAME=webserver# -o 指定日志消息格式，-o json 表示以json 格式返回日志消息 journalctl -o json CONTAINER_NAME=webserver# -f 一直捕获日志输出 journalctl -f CONTAINER_NAME=webserver</code></pre><blockquote><p>如果我们的容器在启动的时候加了 -t 参数，启用了 TTY 的话，那么我查看日志是会像下面一样</p><pre class="language-none"><code class="language-none">May 17 17:19:26 localhost.localdomain 2a338e4631fe[6141]: [104B blob data]May 17 17:19:32 localhost.localdomain 2a338e4631fe[6141]: [104B blob data]</code></pre><p>显示 <code>[104B blob data]</code> 而不是完整日志原因是因为有 <code>\r</code> 的存在，如果我们要完整显示，需要加上参数 <code>--all</code> 。</p></blockquote><h3 id="生产环境中储存容器日志"><a href="#生产环境中储存容器日志" class="headerlink" title="生产环境中储存容器日志"></a>生产环境中储存容器日志</h3><p>我们在上面看到了 Docker 官方提供了 很多日志驱动，但是上面的这些驱动都是针对的 标准输出的日志驱动。</p><h4 id="容器日志分类"><a href="#容器日志分类" class="headerlink" title="容器日志分类"></a>容器日志分类</h4><p>容器的日志实际是有两大类的：</p><ul><li><strong>标准输出的</strong> ，也就是 STDOUT 、STDERR , <strong>这类日志我们可以通过 Docker 官方的日志驱动进行收集。</strong></li></ul><p>示例：Nginx 日志，Nginx 日志有 <code>access.log</code> 和 <code>error.log</code> ，我们在 Docker Hub 上可以看到 Nginx 的 dockerfile 对于这两个日志的处理是：</p><pre class="language-none"><code class="language-none">RUN ln -sf /dev/stdout /var/log/nginx/access.log \&amp;&amp; ln -sf /dev/stderr /var/log/nginx/error.log</code></pre><p>都软连接到 <code>/dev/stdout</code> 和 <code>/dev/stderr</code> ，也就是标准输出，所以这类 容器是可以使用 Docker 官方的日志驱动。</p><ul><li><p><strong>文本日志</strong>，存在在于容器内部，并没有重定向到 容器的标准输出的日志。</p><p>示例： Tomcat 日志，Tomcat 有 catalina、localhost、manager、admin、host-manager，我们可以在 Docker Hub 看到 Tomcat 的 dockerfile 只有对于 catalina 进行处理，其它日志将储存在容器里。</p><pre class="language-none"><code class="language-none">CMD ["catalina.sh", "run"]</code></pre><p>我们运行了一个 Tomcat 容器 ，然后进行访问后，并登陆到容器内部，我们可以看到产生了文本日志：</p><pre class="language-none"><code class="language-none">root@25ba00fdab97:/usr/local/tomcat/logs# ls -ltotal 16-rw-r-----. 1 root root 6822 May 17 14:36 catalina.2019-05-17.log-rw-r-----. 1 root root    0 May 17 14:36 host-manager.2019-05-17.log-rw-r-----. 1 root root  459 May 17 14:36 localhost.2019-05-17.log-rw-r-----. 1 root root 1017 May 17 14:37 localhost_access_log.2019-05-17.txt-rw-r-----. 1 root root    0 May 17 14:36 manager.2019-05-17.log</code></pre><p>这类容器我们下面有专门的方案来应对。</p></li></ul><h4 id="标准输出的存储"><a href="#标准输出的存储" class="headerlink" title="标准输出的存储"></a>标准输出的存储</h4><p>当是完全是标准输出的类型的容器，我们可以选择 json-file 、syslog、local 等 Docker 支持的日志驱动。</p><h4 id="文本日志的存储"><a href="#文本日志的存储" class="headerlink" title="文本日志的存储"></a>文本日志的存储</h4><p>当有文件文本日志的类型容器</p><h5 id="挂载目录-bind"><a href="#挂载目录-bind" class="headerlink" title="挂载目录 bind"></a>挂载目录 bind</h5><p>创建一个目录，将目录挂载到 容器中产生日志的目录。</p><pre class="language-none"><code class="language-none">--mount  type=bind,src=/opt/logs/,dst=/usr/local/tomcat/logs/ </code></pre><p>示例：</p><pre class="language-none"><code class="language-none"># 创建挂载目录/opt/logs[root@fy-local-2 /]# mkdir  /opt/logs# 创建容器tomcat-bind 并将 /opt/logs 挂载至 /usr/local/tomcat/logs/[root@fy-local-2 /]# docker  run -d  --name  tomcat-bind  -P  --mount  type=bind,src=/opt/logs/,dst=/usr/local/tomcat/logs/   tomcat [root@fy-local-2 /]# ls -l /opt/logs/total 12-rw-r----- 1 root root 6820 May 22 17:31 catalina.2019-05-22.log-rw-r----- 1 root root    0 May 22 17:31 host-manager.2019-05-22.log-rw-r----- 1 root root  459 May 22 17:31 localhost.2019-05-22.log-rw-r----- 1 root root    0 May 22 17:31 localhost_access_log.2019-05-22.txt-rw-r----- 1 root root    0 May 22 17:31 manager.2019-05-22.log</code></pre><h5 id="使用数据卷-volume"><a href="#使用数据卷-volume" class="headerlink" title="使用数据卷 volume"></a>使用数据卷 volume</h5><p>创建数据卷，创建容器时绑定数据卷，</p><pre class="language-none"><code class="language-none">--mount  type=volume  src=volume_name  dst=/usr/local/tomcat/logs/ </code></pre><p>示例：</p><pre class="language-none"><code class="language-none"># 创建tomcat应用数据卷名称为 tomcat[root@fy-local-2 /]# docker volume  create  tomcat# 创建容器tomcat-volume 并指定数据卷为 tomcat，绑定至 /usr/local/tomcat/logs/[root@fy-local-2 /]# docker  run -d  --name  tomcat-volume   -P  --mount  type=volume,src=tomcat,dst=/usr/local/tomcat/logs/   tomcat# 查看数据卷里面的内容[root@fy-local-2 /]# ls -l /var/lib/docker/volumes/tomcat/_data/total 12-rw-r----- 1 root root 6820 May 22 17:33 catalina.2019-05-22.log-rw-r----- 1 root root    0 May 22 17:33 host-manager.2019-05-22.log-rw-r----- 1 root root  459 May 22 17:33 localhost.2019-05-22.log-rw-r----- 1 root root    0 May 22 17:33 localhost_access_log.2019-05-22.txt-rw-r----- 1 root root    0 May 22 17:33 manager.2019-05-22.log</code></pre><h5 id="计算容器-rootfs-挂载点"><a href="#计算容器-rootfs-挂载点" class="headerlink" title="计算容器 rootfs 挂载点"></a>计算容器 rootfs 挂载点</h5><p>此方案的文字内容摘抄于 <span class="exturl" data-url="aHR0cHM6Ly95cS5hbGl5dW4uY29tL2FydGljbGVzLzY3MjA1NA==">https://yq.aliyun.com/articles/672054<i class="fa fa-external-link-alt"></i></span></p><p>使用挂载宿主机目录的方式采集日志对应用会有一定的侵入性，因为它要求容器启动的时候包含挂载命令。如果采集过程能对用户透明那就太棒了。事实上，可以通过计算容器 rootfs 挂载点来达到这种目的。</p><p>和容器 rootfs 挂载点密不可分的一个概念是 <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vc3RvcmFnZS9zdG9yYWdlZHJpdmVyLw==">storage driver<i class="fa fa-external-link-alt"></i></span>。实际使用过程中，用户往往会根据 linux 版本、文件系统类型、容器读写情况等因素选择合适的 storage driver。不同 storage driver 下，容器的 rootfs 挂载点遵循一定规律，因此我们可以根据 storage driver 的类型推断出容器的 rootfs 挂载点，进而采集容器内部日志。下表展示了部分 storage dirver 的 rootfs 挂载点及其计算方法。</p><table><thead><tr><th>Storage driver</th><th>rootfs 挂载点</th><th>计算方法</th></tr></thead><tbody><tr><td> aufs</td><td>/var/lib/docker/aufs/mnt/</td><td>id 可以从如下文件读到。 <code>/var/lib/docker/image/aufs/layerdb/mounts/&lt;container-id&gt;/mount-id</code></td></tr><tr><td>overlay</td><td>/var/lib/docker/overlay//merged</td><td> 完整路径可以通过如下命令得到。 <code>docker inspect -f '{{.GraphDriver.Data.MergedDir}}' &lt;container-id&gt;</code></td></tr><tr><td>overlay2</td><td>/var/lib/docker/overlay2//merged</td><td> 完整路径可以通过如下命令得到。 <code>docker inspect -f '{{.GraphDriver.Data.MergedDir}}' &lt;container-id&gt;</code></td></tr><tr><td>devicemapper</td><td>/var/lib/docker/devicemapper/mnt//rootfs</td><td>id 可以通过如下命令得到。 <code>docker inspect -f '{{.GraphDriver.Data.DeviceName}}' &lt;container-id&gt;</code></td></tr></tbody></table><p>示例：</p><pre class="language-none"><code class="language-none"># 创建容器 tomcat-test[root@fy-local-2 /]# docker  run -d  --name  tomcat-test  -P  tomcat36510dd653ae7dcac1d017174b1c38b3f9a226f9c4e329d0ff656cfe041939ff  # 查看tomcat-test 容器的 挂载点位置[root@fy-local-2 /]# docker inspect -f '{{.GraphDriver.Data.MergedDir}}' 36510dd653ae7dcac1d017174b1c38b3f9a226f9c4e329d0ff656cfe041939ff  /var/lib/docker/overlay2/c10ec54bab8f3fccd2c5f1a305df6f3b1e53068776363ab0c104d253216b799d/merged# 查看挂载点的目录结构[root@fy-local-2 /]# ls -l /var/lib/docker/overlay2/c10ec54bab8f3fccd2c5f1a305df6f3b1e53068776363ab0c104d253216b799d/mergedtotal 4drwxr-xr-x 1 root root  179 May  8 13:05 bindrwxr-xr-x 2 root root    6 Mar 28 17:12 bootdrwxr-xr-x 1 root root   43 May 22 17:27 devlrwxrwxrwx 1 root root   33 May  8 13:08 docker-java-home -&gt; /usr/lib/jvm/java-8-openjdk-amd64drwxr-xr-x 1 root root   66 May 22 17:27 etcdrwxr-xr-x 2 root root    6 Mar 28 17:12 homedrwxr-xr-x 1 root root    6 May 16 08:50 libdrwxr-xr-x 2 root root   34 May  6 08:00 lib64drwxr-xr-x 2 root root    6 May  6 08:00 mediadrwxr-xr-x 2 root root    6 May  6 08:00 mntdrwxr-xr-x 2 root root    6 May  6 08:00 optdrwxr-xr-x 2 root root    6 Mar 28 17:12 procdrwx------ 1 root root   27 May 22 17:29 rootdrwxr-xr-x 3 root root   30 May  6 08:00 rundrwxr-xr-x 2 root root 4096 May  6 08:00 sbindrwxr-xr-x 2 root root    6 May  6 08:00 srvdrwxr-xr-x 2 root root    6 Mar 28 17:12 sysdrwxrwxrwt 1 root root   29 May 16 08:50 tmpdrwxr-xr-x 1 root root   19 May  6 08:00 usrdrwxr-xr-x 1 root root   41 May  6 08:00 var# 查看日志[root@fy-local-2 /]# ls -l /var/lib/docker/overlay2/c10ec54bab8f3fccd2c5f1a305df6f3b1e53068776363ab0c104d253216b799d/merged/usr/local/tomcat/logs/total 20-rw-r----- 1 root root 14514 May 22 17:40 catalina.2019-05-22.log-rw-r----- 1 root root     0 May 22 17:27 host-manager.2019-05-22.log-rw-r----- 1 root root  1194 May 22 17:40 localhost.2019-05-22.log-rw-r----- 1 root root     0 May 22 17:27 localhost_access_log.2019-05-22.txt-rw-r----- 1 root root     0 May 22 17:27 manager.2019-05-22.log</code></pre><h5 id="将日志写入kafka"><a href="#将日志写入kafka" class="headerlink" title="将日志写入kafka"></a>将日志写入 kafka</h5><p>docker -&gt; kafka -&gt; Logstash -&gt; Elasticsearch</p><p>通过代码层面，直接将日志写入 <code>kafka</code>, 最后写入 <code>Elasticsearch</code>。</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vb3BlcmF0aW9uaG9tZS9wLzEwOTA3NTkxLmh0bWw=">https://www.cnblogs.com/operationhome/p/10907591.html<i class="fa fa-external-link-alt"></i></span></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;Docker 日志分为两类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Docker 引擎日志 (也就是 dockerd 运行时的日志)，&lt;/li&gt;
&lt;li&gt;容器的日志，容器内的服务产生的日志。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Docker" scheme="https://jueee.github.io/categories/Docker/"/>
    
    
    <category term="HTML" scheme="https://jueee.github.io/tags/HTML/"/>
    
    <category term="Docker" scheme="https://jueee.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>在 eclipse 中安装 lombok.jar</title>
    <link href="https://jueee.github.io/2020/09/2020-09-21-%E5%9C%A8eclipse%E4%B8%AD%E5%AE%89%E8%A3%85lombok.jar/"/>
    <id>https://jueee.github.io/2020/09/2020-09-21-%E5%9C%A8eclipse%E4%B8%AD%E5%AE%89%E8%A3%85lombok.jar/</id>
    <published>2020-09-21T00:00:00.000Z</published>
    <updated>2020-09-22T09:52:32.130Z</updated>
    
    <content type="html"><![CDATA[<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p><strong>下载 lombok.jar（一定要最新版）</strong></p><p>下载地址：<span class="exturl" data-url="aHR0cHM6Ly9wcm9qZWN0bG9tYm9rLm9yZy9kb3dubG9hZA==">https://projectlombok.org/download<i class="fa fa-external-link-alt"></i></span></p><a id="more"></a><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ol><li><p><strong>复制 lombok.jar 到 eclipse.ini 所在目录</strong></p></li><li><p><strong>安装 lombok.jar</strong>：shift + 右键唤出命令窗口，运行 <strong>java -jar lombok.jar</strong>  或者 直接双击 lombok.jar（后者操作更简单）</p><p><img src="/images/2020/09/image-20200921103421844.png" alt="image-20200921103421844" loading="lazy"></p></li><li><p>选择 eclipse.exe：<br><img src="/images/2020/09/image-20200921103504337.png" alt="image-20200921103504337" loading="lazy"></p></li><li><p>确认 eclipse.exe：<img src="/images/2020/09/image-20200921103526313.png" alt="image-20200921103526313" loading="lazy"></p></li><li><p>快速安装：<br><img src="/images/2020/09/image-20200921103543338.png" alt="image-20200921103543338" loading="lazy"></p></li><li><p>操作完成后发现 eclipse.ini 多了一行配置：<br><img src="/images/2020/09/image-20200921103619161.png" alt="image-20200921103619161" loading="lazy"></p></li></ol><h3 id="安装成功后操作"><a href="#安装成功后操作" class="headerlink" title="安装成功后操作"></a><strong>安装成功后操作</strong></h3><p>重启 eclipse 并刷新项目，之前报错的 set () get () 等方法不再报错。</p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a><strong>注意事项</strong></h3><p>lombok.jar 一定要从官网下载最新，否则安装后 get () set () 等方法仍会报错。</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;下载&quot;&gt;&lt;a href=&quot;#下载&quot; class=&quot;headerlink&quot; title=&quot;下载&quot;&gt;&lt;/a&gt;下载&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;下载 lombok.jar（一定要最新版）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;下载地址：&lt;a href=&quot;https://projectlombok.org/download&quot;&gt;https://projectlombok.org/download&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="软件" scheme="https://jueee.github.io/categories/%E8%BD%AF%E4%BB%B6/"/>
    
    <category term="IDE" scheme="https://jueee.github.io/categories/%E8%BD%AF%E4%BB%B6/IDE/"/>
    
    
    <category term="软件" scheme="https://jueee.github.io/tags/%E8%BD%AF%E4%BB%B6/"/>
    
    <category term="IDE" scheme="https://jueee.github.io/tags/IDE/"/>
    
    <category term="eclipse" scheme="https://jueee.github.io/tags/eclipse/"/>
    
  </entry>
  
  <entry>
    <title>使用 Python 遍历备份 docker-compose 文件中的镜像</title>
    <link href="https://jueee.github.io/2020/09/2020-09-15-%E4%BD%BF%E7%94%A8Python%E9%81%8D%E5%8E%86%E5%A4%87%E4%BB%BDdocker-compose%E6%96%87%E4%BB%B6%E4%B8%AD%E7%9A%84%E9%95%9C%E5%83%8F/"/>
    <id>https://jueee.github.io/2020/09/2020-09-15-%E4%BD%BF%E7%94%A8Python%E9%81%8D%E5%8E%86%E5%A4%87%E4%BB%BDdocker-compose%E6%96%87%E4%BB%B6%E4%B8%AD%E7%9A%84%E9%95%9C%E5%83%8F/</id>
    <published>2020-09-15T00:00:00.000Z</published>
    <updated>2020-09-22T09:52:32.121Z</updated>
    
    <content type="html"><![CDATA[<p>Python 脚本如下：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">def</span> <span class="token function">get_images</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"docker-compose.yml"</span><span class="token punctuation">)</span>     images <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> line <span class="token keyword">in</span> <span class="token builtin">file</span><span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>           line <span class="token operator">=</span> line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>           <span class="token keyword">if</span> <span class="token string">"image"</span> <span class="token keyword">in</span> line<span class="token punctuation">:</span>             image <span class="token operator">=</span> line<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"image:"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>             images<span class="token punctuation">.</span>append<span class="token punctuation">(</span>image<span class="token punctuation">)</span>    <span class="token keyword">return</span> images<span class="token keyword">def</span> <span class="token function">pull_images</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    images <span class="token operator">=</span> get_images<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> image <span class="token keyword">in</span> images<span class="token punctuation">:</span>        pull_commond <span class="token operator">=</span> <span class="token string">"docker pull "</span> <span class="token operator">+</span> image        <span class="token keyword">print</span><span class="token punctuation">(</span>pull_commond<span class="token punctuation">)</span>        os<span class="token punctuation">.</span>system<span class="token punctuation">(</span>pull_commond<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">save_imaegs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    images <span class="token operator">=</span> get_images<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> image <span class="token keyword">in</span> images<span class="token punctuation">:</span>        sub_name <span class="token operator">=</span> image<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">,</span><span class="token string">"_"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">".tar"</span>        <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>sub_name<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>sub_name<span class="token punctuation">,</span><span class="token string">'is exists!'</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            save_commond <span class="token operator">=</span> <span class="token string">"docker save "</span> <span class="token operator">+</span> image <span class="token operator">+</span> <span class="token string">" -o "</span> <span class="token operator">+</span> sub_name            <span class="token keyword">print</span><span class="token punctuation">(</span>save_commond<span class="token punctuation">)</span>            os<span class="token punctuation">.</span>system<span class="token punctuation">(</span>save_commond<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">load_images</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    files <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token builtin">file</span> <span class="token keyword">in</span> files<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token string">".tar"</span> <span class="token keyword">in</span> <span class="token builtin">file</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span>            load_commond <span class="token operator">=</span> <span class="token string">"docker load -i "</span> <span class="token operator">+</span> <span class="token builtin">file</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>load_commond<span class="token punctuation">)</span>            os<span class="token punctuation">.</span>system<span class="token punctuation">(</span>load_commond<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">start_deal</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> num <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        pull_images<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> num <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>        save_imaegs<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> num <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span>        load_images<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">"__main__"</span><span class="token punctuation">:</span>    start_deal<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    </code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Python 脚本如下：&lt;/p&gt;
&lt;pre class=&quot;language-python&quot; data-language=&quot;python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/sp</summary>
      
    
    
    
    <category term="Python" scheme="https://jueee.github.io/categories/Python/"/>
    
    <category term="Docker" scheme="https://jueee.github.io/categories/Docker/"/>
    
    
    <category term="Python" scheme="https://jueee.github.io/tags/Python/"/>
    
    <category term="Docker" scheme="https://jueee.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Linux 进行磁盘自动挂载</title>
    <link href="https://jueee.github.io/2020/09/2020-09-16-Linux%E8%BF%9B%E8%A1%8C%E7%A3%81%E7%9B%98%E8%87%AA%E5%8A%A8%E6%8C%82%E8%BD%BD/"/>
    <id>https://jueee.github.io/2020/09/2020-09-16-Linux%E8%BF%9B%E8%A1%8C%E7%A3%81%E7%9B%98%E8%87%AA%E5%8A%A8%E6%8C%82%E8%BD%BD/</id>
    <published>2020-09-15T00:00:00.000Z</published>
    <updated>2020-09-22T09:52:32.124Z</updated>
    
    <content type="html"><![CDATA[<p>在给系统新增了磁盘以后，如果重启系统我们会发现找不到存储了；但是使用 fdisk -l 可以看到存储空间，说明存储还在。这是因为关机后，挂载已经自动卸载掉了。我们当然可以手动再次将其挂载，但如果每次重启都需要这样手动操作会很不方便；因此我们可以利用自动挂载，这样系统每次开机的时候就可以自动将磁盘挂载上去了。</p><a id="more"></a><h3 id="手动挂载磁盘"><a href="#手动挂载磁盘" class="headerlink" title="手动挂载磁盘"></a>手动挂载磁盘</h3><p>使用 <code>fdisk -l</code> 检查磁盘：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># fdisk -l</span>Disk /dev/sdb: <span class="token number">465.8</span> GiB, <span class="token number">500107862016</span> bytes, <span class="token number">976773168</span> sectorsUnits: sectors of <span class="token number">1</span> * <span class="token number">512</span> <span class="token operator">=</span> <span class="token number">512</span> bytesSector size <span class="token punctuation">(</span>logical/physical<span class="token punctuation">)</span>: <span class="token number">512</span> bytes / <span class="token number">4096</span> bytesI/O size <span class="token punctuation">(</span>minimum/optimal<span class="token punctuation">)</span>: <span class="token number">4096</span> bytes / <span class="token number">4096</span> bytesDisklabel type: dosDisk identifier: 0x944e14cfDevice     Boot Start       End   Sectors   Size Id Type/dev/sdb1        <span class="token number">2048</span> <span class="token number">976773167</span> <span class="token number">976771120</span> <span class="token number">465</span>.8G <span class="token number">83</span> Linux</code></pre><p>使用 <code>mount</code> 进行磁盘挂载</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">mount</span> /dev/sdb1 /data1/</code></pre><p>将 mount 命令添加进 <code>/etc/rc.d/rc.local</code> 文件是另一种实现开机自动挂载的方式</p><h3 id="配置自动挂载"><a href="#配置自动挂载" class="headerlink" title="配置自动挂载"></a>配置自动挂载</h3><p>修改 /etc/fstab 文件</p><p>用 vim 打开 fstab 文件，可以看到文件格式如下：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># /etc/fstab: static file system information.</span><span class="token comment">#</span><span class="token comment"># &lt;file sys&gt;    &lt;mount point&gt;   &lt;type&gt;  &lt;options&gt;       &lt;dump&gt;  &lt;pass&gt;</span><span class="token comment"># device during installation: /dev/sda1</span><span class="token assign-left variable">UUID</span><span class="token operator">=</span>9ca41ea4-2a2d-413a-8114-502b3dbc2d3e       /       ext4    rw,errors<span class="token operator">=</span>remount-ro    <span class="token number">0</span>       <span class="token number">1</span><span class="token comment"># device during installation: /dev/sda8</span><span class="token assign-left variable">UUID</span><span class="token operator">=</span>d9f40848-a9d0-4849-96a0-9d11231b0dec       /home   ext4    rw      <span class="token number">0</span>       <span class="token number">2</span><span class="token comment"># device during installation: /dev/sda7</span><span class="token assign-left variable">UUID</span><span class="token operator">=</span>b953aa93-1b30-43d0-938b-0fd9fffc6034       /tmp    ext4    rw      <span class="token number">0</span>       <span class="token number">2</span><span class="token comment"># device during installation: /dev/sda5</span><span class="token assign-left variable">UUID</span><span class="token operator">=</span>ad67642a-b2d7-48fb-927c-b83492533c48       /usr    ext4    rw      <span class="token number">0</span>       <span class="token number">2</span><span class="token comment"># device during installation: /dev/sda6</span><span class="token assign-left variable">UUID</span><span class="token operator">=</span>e39dbbca-a3c4-4c3c-a51b-ca6c3520d07b       /var    ext4    rw      <span class="token number">0</span>       <span class="token number">2</span></code></pre><p>可以很明显的看到文件有 6 列。</p><ul><li>第 1 列是设备名或者卷标</li><li>第 2 列是挂载点（也就是挂载目录）</li><li>第 3 列是所要挂载设备的文件系统或者文件系统类型</li><li>第 4 列是挂载选项，通常使用 defaults 就可以</li><li>第 5 列设置是否使用 dump 备份，置 0 为不备份，置 1，2 为备份，但 2 的备份重要性比 1 小</li><li>第 6 列设置是否开机的时候使用 fsck 检验所挂载的磁盘，置 0 为不检验，置 1，2 为检验，但置 2 盘比置 1 的盘晚检验。</li></ul><p>加入磁盘配置</p><pre class="language-bash" data-language="bash"><code class="language-bash">/dev/sdb1       /data1    ext4    rw      <span class="token number">0</span>       <span class="token number">0</span></code></pre><p>将上面的命令添加进 fstab 后，为了避免可能的错误，我们可以使用 mount -a 命令来检验编辑的内容是否有错。执行 mount -a 命令后，用 df -h 查看会发现磁盘已经挂载成功，说明输入没有错误。下次重启的时候系统就可以自动进行挂载了。</p><p><strong>注意</strong>：</p><ol><li>根目录必须优先于其他挂载点</li><li>挂载点必须为已经存在的目录</li><li>卸载时必须保证当前磁盘没有发生读写操作</li></ol><h5 id=""><a href="#" class="headerlink" title=""></a></h5>]]></content>
    
    
    <summary type="html">&lt;p&gt;在给系统新增了磁盘以后，如果重启系统我们会发现找不到存储了；但是使用 fdisk -l 可以看到存储空间，说明存储还在。这是因为关机后，挂载已经自动卸载掉了。我们当然可以手动再次将其挂载，但如果每次重启都需要这样手动操作会很不方便；因此我们可以利用自动挂载，这样系统每次开机的时候就可以自动将磁盘挂载上去了。&lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://jueee.github.io/categories/Linux/"/>
    
    
    <category term="Linux" scheme="https://jueee.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>自动删除 Elasticsearch 索引</title>
    <link href="https://jueee.github.io/2020/09/2020-09-07-%E8%87%AA%E5%8A%A8%E5%88%A0%E9%99%A4%20Elasticsearch%20%E7%B4%A2%E5%BC%95/"/>
    <id>https://jueee.github.io/2020/09/2020-09-07-%E8%87%AA%E5%8A%A8%E5%88%A0%E9%99%A4%20Elasticsearch%20%E7%B4%A2%E5%BC%95/</id>
    <published>2020-09-07T00:00:00.000Z</published>
    <updated>2020-09-22T09:52:32.119Z</updated>
    
    <content type="html"><![CDATA[<p>索引文件保留在服务器中，大大减小服务器的性能，占用硬盘空间，<br>因此使用脚本自动删除 elk 中的历史索引以释放空间。</p><h3 id="清理索引命令行"><a href="#清理索引命令行" class="headerlink" title="清理索引命令行"></a>清理索引命令行</h3><p>查看所有的索引文件：</p><blockquote><p>curl -XGET <span class="exturl" data-url="aHR0cDovL2xvY2FsaG9zdDo5MjAwL19jYXQvaW5kaWNlcz92">http://localhost:9200/_cat/indices?v<i class="fa fa-external-link-alt"></i></span></p></blockquote><p>删除索引文件以释放空间：</p><blockquote><p>curl -XDELETE <span class="exturl" data-url="aHR0cDovL2xvY2FsaG9zdDo5MjAwL2ZpbGViZWF0LTIwMTYuMTIuMjg=">http://localhost:9200/filebeat-2016.12.28<i class="fa fa-external-link-alt"></i></span></p></blockquote><a id="more"></a><h3 id="清理索引脚本"><a href="#清理索引脚本" class="headerlink" title="清理索引脚本"></a>清理索引脚本</h3><p>新增 Shell 脚本：</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment">#!/bin/bash</span><span class="token comment"># auto delete 7 day ago elasticsearch index</span>eshost=<span class="token string">'127.0.0.1:9200'</span>dtime=`date <span class="token operator">-</span>d <span class="token string">"7 day ago"</span> <span class="token operator">+</span><span class="token operator">%</span>Y-<span class="token operator">%</span>m-<span class="token operator">%</span>d`dtime_stamp=`date <span class="token operator">-</span>d <span class="token string">"<span class="token variable">$dtime</span>"</span> <span class="token operator">+</span><span class="token operator">%</span>s`<span class="token function">echo</span> `date` <span class="token string">'start clean '</span> <span class="token variable">$dtime</span> &gt;&gt; clean<span class="token operator">-</span>log<span class="token punctuation">.</span>logindexs=`curl <span class="token operator">-</span>s <span class="token string">'http://'</span><span class="token variable">$eshost</span><span class="token string">'/_cat/indices'</span> <span class="token punctuation">|</span> awk <span class="token string">'$3~/^logstash/{print $3}'</span>`<span class="token keyword">for</span> line in <span class="token variable">$indexs</span><span class="token punctuation">;</span><span class="token keyword">do</span>  index=<span class="token variable">$line</span>  itime=`<span class="token function">echo</span> <span class="token variable">$line</span> <span class="token punctuation">|</span> awk <span class="token operator">-</span>F <span class="token operator">-</span> <span class="token string">'{print $3}'</span> <span class="token punctuation">|</span> tr <span class="token string">'.'</span> <span class="token string">'-'</span>`  itime_stamp=`date <span class="token operator">-</span>d <span class="token string">"<span class="token variable">$itime</span>"</span> <span class="token operator">+</span><span class="token operator">%</span>s`  <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$itime_stamp</span> <span class="token operator">-lt</span> <span class="token variable">$dtime_stamp</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>then    <span class="token function">echo</span> <span class="token variable">$index</span> &gt;&gt; clean<span class="token operator">-</span>log<span class="token punctuation">.</span>log    curl <span class="token operator">-</span>X DELETE <span class="token string">"http://<span class="token variable">$eshost</span>/<span class="token variable">$index</span>"</span> &gt; <span class="token operator">/</span>dev<span class="token operator">/</span>null 2&gt;&amp;1  fidone</code></pre><p>每天 2 点定时删除 es 中指定日期的数据，配置 crontab：</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">0 2 <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">*</span> sh <span class="token operator">/</span>home<span class="token operator">/</span><span class="token function">dir</span><span class="token operator">/</span>auto<span class="token operator">-</span>clean<span class="token operator">-</span>log<span class="token punctuation">.</span>sh &gt;&gt; <span class="token operator">/</span>home<span class="token operator">/</span><span class="token function">dir</span><span class="token operator">/</span>clean<span class="token operator">-</span>log<span class="token punctuation">.</span>log 2&gt;&amp;1</code></pre><h3 id="容器中获取-es-地址"><a href="#容器中获取-es-地址" class="headerlink" title="容器中获取 es 地址"></a>容器中获取 es 地址</h3><p>对于 docker 搭建的 es 环境，可以通过如下参数获取 es 的 IP：</p><pre class="language-none"><code class="language-none">esip=`docker inspect -f "{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}" elasticsearch.manti-infra.svc`eshost="$esip:9200"</code></pre><p>对于 k8s 搭建的 es 环境，可以通过如下参数获取 es 的 IP：</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">esip=`kubectl describe svc elasticsearch  <span class="token operator">-</span>n manti<span class="token operator">-</span>infra <span class="token punctuation">|</span> grep IP <span class="token punctuation">|</span> awk <span class="token string">'{print $2}'</span>`eshost=<span class="token string">"<span class="token variable">$esip</span>:9200"</span></code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;索引文件保留在服务器中，大大减小服务器的性能，占用硬盘空间，&lt;br&gt;因此使用脚本自动删除 elk 中的历史索引以释放空间。&lt;/p&gt;
&lt;h3 id=&quot;清理索引命令行&quot;&gt;&lt;a href=&quot;#清理索引命令行&quot; class=&quot;headerlink&quot; title=&quot;清理索引命令行&quot;&gt;&lt;/a&gt;清理索引命令行&lt;/h3&gt;&lt;p&gt;查看所有的索引文件：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;curl -XGET &lt;a href=&quot;http://localhost:9200/_cat/indices?v&quot;&gt;http://localhost:9200/_cat/indices?v&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;删除索引文件以释放空间：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;curl -XDELETE &lt;a href=&quot;http://localhost:9200/filebeat-2016.12.28&quot;&gt;http://localhost:9200/filebeat-2016.12.28&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://jueee.github.io/categories/Linux/"/>
    
    <category term="Shell" scheme="https://jueee.github.io/categories/Linux/Shell/"/>
    
    <category term="Elasticsearch" scheme="https://jueee.github.io/categories/Elasticsearch/"/>
    
    
    <category term="Elasticsearch" scheme="https://jueee.github.io/tags/Elasticsearch/"/>
    
    <category term="Shell" scheme="https://jueee.github.io/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>k8s 在 tomcat 多副本时的 session 会话保持</title>
    <link href="https://jueee.github.io/2020/09/2020-09-05-k8s%E5%9C%A8tomcat%E5%A4%9A%E5%89%AF%E6%9C%AC%E6%97%B6%E7%9A%84session%E4%BC%9A%E8%AF%9D%E4%BF%9D%E6%8C%81/"/>
    <id>https://jueee.github.io/2020/09/2020-09-05-k8s%E5%9C%A8tomcat%E5%A4%9A%E5%89%AF%E6%9C%AC%E6%97%B6%E7%9A%84session%E4%BC%9A%E8%AF%9D%E4%BF%9D%E6%8C%81/</id>
    <published>2020-09-05T00:00:00.000Z</published>
    <updated>2020-09-22T09:52:32.116Z</updated>
    
    <content type="html"><![CDATA[<h3 id="出现问题"><a href="#出现问题" class="headerlink" title="出现问题"></a>出现问题</h3><p>通过 kubernetes 部署了 tomcat+mysql 服务，设置 tomcat 多副本时发现首页登陆无法跳转的情况，经排查是由于 session 问题引起的。</p><p>kubernetes 上可以多实例（pod）高负载运行，但是如果应用如果没有做 session 同步的话，就会导致 session 不一致。<br>kubernetes 有 session 亲和性的功能（每个 client 每次访问，都会匹配到对应 session 的后端）。</p><a id="more"></a><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>此时，在 service 的配置文件中加入 <code>sessionAffinity: ClientIP</code>，功能是选择与请求来源 ip 更接近的 pod，这样就会固定同一个 session。</p><p>如下图所示：</p><p><img src="/images/2020/09/1599216595277.png" alt="1599216595277" loading="lazy"></p><p>备注：这种方法目前只适用使用 nodeport 暴露服务的情况。</p><p><code>spec.sessionAffinity</code> 字段用于定义要使用的粘性会话的类型，它仅支持使用 “None” 和 “ ClientIP” 两种属性值。</p><p>也可以使用打补丁的方式进行修改 yaml 内的内容，如下：</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># session保持，同一ip访问同一个pod</span>kubectl patch svc myapp <span class="token operator">-</span>p <span class="token string">'{"spec":{"sessionAffinity":"ClusterIP"}}'</span>  <span class="token comment"># 取消session </span>kubectl patch svc myapp <span class="token operator">-</span>p <span class="token string">'{"spec":{"sessionAffinity":"None"}}'</span>    </code></pre><h3 id="Session-超时时间"><a href="#Session-超时时间" class="headerlink" title="Session 超时时间"></a>Session 超时时间</h3><p>Service affinity 的效果仅仅在一段时间内生效，默认值为 10800 秒，超出时长，客户端再次访问会重新调度。</p><p>该机制仅能基于客户端 IP 地址识别客户端身份，它会将经由同一个 NAT 服务器进行原地址转换的所有客户端识别为同一个客户端，由此可知，其调度的效果并不理想。</p><p>Service 资源 通过 <code>.spec.sessionAffinity</code> 和 <code>.spec.sessionAffinityConfig</code> 两个字段配置粘性会话。</p><p>如果您还想指定时间，则需要添加以下内容：</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">sessionAffinityConfig</span><span class="token punctuation">:</span>  <span class="token key atrule">clientIP</span><span class="token punctuation">:</span>    <span class="token key atrule">timeoutSeconds</span><span class="token punctuation">:</span> <span class="token number">10</span></code></pre><h3 id="Session-Affinity"><a href="#Session-Affinity" class="headerlink" title="Session Affinity"></a>Session Affinity</h3><p>会话保持 (Session Affinity), 有时又称粘滞会话 (Sticky Sessions), 是负载均衡领域设计需要着力解决的重要问题之一，也是一个相对比较复杂的问题。</p><p>会话保持是指在负载均衡器上的一种机制，在完成负载均衡任务的同时，还负责一系列相关连的访问请求会分配到一台服务器上｡</p><p>当用户向服务器发起请求，服务器创建一个 session，并把 session id 以 cookie 的形式写回给客户。</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;出现问题&quot;&gt;&lt;a href=&quot;#出现问题&quot; class=&quot;headerlink&quot; title=&quot;出现问题&quot;&gt;&lt;/a&gt;出现问题&lt;/h3&gt;&lt;p&gt;通过 kubernetes 部署了 tomcat+mysql 服务，设置 tomcat 多副本时发现首页登陆无法跳转的情况，经排查是由于 session 问题引起的。&lt;/p&gt;
&lt;p&gt;kubernetes 上可以多实例（pod）高负载运行，但是如果应用如果没有做 session 同步的话，就会导致 session 不一致。&lt;br&gt;kubernetes 有 session 亲和性的功能（每个 client 每次访问，都会匹配到对应 session 的后端）。&lt;/p&gt;</summary>
    
    
    
    <category term="k8s" scheme="https://jueee.github.io/categories/k8s/"/>
    
    
    <category term="k8s" scheme="https://jueee.github.io/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>k8s 动态扩容 Ceph 持久卷</title>
    <link href="https://jueee.github.io/2020/09/2020-09-04-k8s%E5%8A%A8%E6%80%81%E6%89%A9%E5%AE%B9Ceph%E6%8C%81%E4%B9%85%E5%8D%B7/"/>
    <id>https://jueee.github.io/2020/09/2020-09-04-k8s%E5%8A%A8%E6%80%81%E6%89%A9%E5%AE%B9Ceph%E6%8C%81%E4%B9%85%E5%8D%B7/</id>
    <published>2020-09-04T00:00:00.000Z</published>
    <updated>2020-09-22T09:52:32.111Z</updated>
    
    <content type="html"><![CDATA[<p>主要是针对 ceph 的 rbd 创建的 pv 进行扩容操作。</p><h3 id="StorageClass-配置自动扩容"><a href="#StorageClass-配置自动扩容" class="headerlink" title="StorageClass 配置自动扩容"></a>StorageClass 配置自动扩容</h3><p>需要配置 storage class，开启允许扩容选项 <code>allowVolumeExpansion</code></p><pre class="language-none"><code class="language-none">apiVersion: storage.k8s.io/v1kind: StorageClassallowVolumeExpansion: trueprovisioner: ceph.com/rbd</code></pre><p>任何从这一 <code>StorageClass</code> 中创建的 PVC 都能够通过编辑的方式来申请更多空间。Kubernetes 会处理 Storage 字段的变更，据此申请空间，触发卷的扩容。</p><a id="more"></a><h3 id="对已创建的-PV-进行扩容"><a href="#对已创建的-PV-进行扩容" class="headerlink" title="对已创建的 PV 进行扩容"></a>对已创建的 PV 进行扩容</h3><ol><li><p><strong>查看 PV 信息</strong></p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">$ kubectl describe pv pvc<span class="token operator">-</span>3e1e651c<span class="token operator">-</span>fcce<span class="token operator">-</span>4a31<span class="token operator">-</span>8283<span class="token operator">-</span>8b5d7f4859fc <span class="token punctuation">|</span>grep Image    RBDImage:      kubernetes<span class="token operator">-</span>dynamic<span class="token operator">-</span>pvc<span class="token operator">-</span>dbaa94d7<span class="token operator">-</span>ecdd<span class="token operator">-</span>11ea<span class="token operator">-</span>a4f5<span class="token operator">-</span>aedb151bd819</code></pre></li><li><p><strong>查看 rbd 镜像信息</strong></p><pre class="language-shell" data-language="shell"><code class="language-shell">$ rbd info kcha/kubernetes-dynamic-pvc-dbaa94d7-ecdd-11ea-a4f5-aedb151bd819rbd image <span class="token string">'kubernetes-dynamic-pvc-dbaa94d7-ecdd-11ea-a4f5-aedb151bd819'</span><span class="token builtin class-name">:</span>        size <span class="token number">30</span> GB <span class="token keyword">in</span> <span class="token number">256000</span> objects        order <span class="token number">22</span> <span class="token punctuation">(</span><span class="token number">4096</span> kB objects<span class="token punctuation">)</span>        block_name_prefix: rbd_data.b642e6b8b4567        format: <span class="token number">2</span>        features: layering        flags:</code></pre></li><li><p><strong>修改 rbd 大小</strong></p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">$ rbd resize <span class="token operator">--</span>size 1024000 kcha<span class="token operator">/</span>kubernetes<span class="token operator">-</span>dynamic<span class="token operator">-</span>pvc<span class="token operator">-</span>dbaa94d7<span class="token operator">-</span>ecdd<span class="token operator">-</span>11ea<span class="token operator">-</span>a4f5<span class="token operator">-</span>aedb151bd819</code></pre></li><li><p><strong>更新 PV 大小</strong></p><pre class="language-none"><code class="language-none">$ kubectl edit pv pvc-3e1e651c-fcce-4a31-8283-8b5d7f4859fc</code></pre><p>修改其中的 <code>storage: 30Gi</code> 大小。然后 <code>kubectl get pv</code> 查看更新。</p></li><li><p><strong>更新 PVC 大小</strong></p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">$ kubectl edit pvc esdata<span class="token operator">-</span>es<span class="token operator">-</span>0</code></pre><p>修改其中的 <code>storage: 30Gi</code> 大小。然后 <code>kubectl get pvc</code> 查看更新。</p></li><li><p><strong>重启挂载该 PVC 的 Pod。</strong></p></li></ol><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
    
    
    <summary type="html">&lt;p&gt;主要是针对 ceph 的 rbd 创建的 pv 进行扩容操作。&lt;/p&gt;
&lt;h3 id=&quot;StorageClass-配置自动扩容&quot;&gt;&lt;a href=&quot;#StorageClass-配置自动扩容&quot; class=&quot;headerlink&quot; title=&quot;StorageClass 配置自动扩容&quot;&gt;&lt;/a&gt;StorageClass 配置自动扩容&lt;/h3&gt;&lt;p&gt;需要配置 storage class，开启允许扩容选项 &lt;code&gt;allowVolumeExpansion&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&quot;language-none&quot;&gt;&lt;code class=&quot;language-none&quot;&gt;apiVersion: storage.k8s.io/v1
kind: StorageClass
allowVolumeExpansion: true
provisioner: ceph.com/rbd&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;任何从这一 &lt;code&gt;StorageClass&lt;/code&gt; 中创建的 PVC 都能够通过编辑的方式来申请更多空间。Kubernetes 会处理 Storage 字段的变更，据此申请空间，触发卷的扩容。&lt;/p&gt;</summary>
    
    
    
    <category term="Ceph" scheme="https://jueee.github.io/categories/Ceph/"/>
    
    <category term="k8s" scheme="https://jueee.github.io/categories/k8s/"/>
    
    
    <category term="Ceph" scheme="https://jueee.github.io/tags/Ceph/"/>
    
    <category term="k8s" scheme="https://jueee.github.io/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>修改 k8s 的 nodeport 类型端口范围</title>
    <link href="https://jueee.github.io/2020/09/2020-09-04-%E4%BF%AE%E6%94%B9k8s%E7%9A%84nodeport%E7%B1%BB%E5%9E%8B%E7%AB%AF%E5%8F%A3%E8%8C%83%E5%9B%B4/"/>
    <id>https://jueee.github.io/2020/09/2020-09-04-%E4%BF%AE%E6%94%B9k8s%E7%9A%84nodeport%E7%B1%BB%E5%9E%8B%E7%AB%AF%E5%8F%A3%E8%8C%83%E5%9B%B4/</id>
    <published>2020-09-04T00:00:00.000Z</published>
    <updated>2020-09-22T09:52:32.114Z</updated>
    
    <content type="html"><![CDATA[<h3 id="出现问题"><a href="#出现问题" class="headerlink" title="出现问题"></a>出现问题</h3><p>在 Kubernetes (k8s) 创建 service 使用 nodePort 暴露 外部端口 8192 时报错：</p><blockquote><p>The Service "web-admin" is invalid: spec.ports[0].nodePort: Invalid value: 8192: provided port is not in the valid range. The range of valid ports is 30000-32767</p></blockquote><a id="more"></a><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>编辑 <code>kube-apiserver.yaml</code> 文件</p><pre class="language-none"><code class="language-none">vim /etc/kubernetes/manifests/kube-apiserver.yaml</code></pre><p>找到 <code>--service-cluster-ip-range</code> 这一行，在这一行的下一行增加 如下内容</p><pre class="language-none"><code class="language-none">- --service-node-port-range=1-65535</code></pre><p>最后修改效果如下：</p><p><img src="/images/2020/09/1599200375796.png" alt="1599200375796" loading="lazy"></p><p>最后 重启 kubelet</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">systemctl daemon<span class="token operator">-</span>reloadsystemctl restart kubelet</code></pre>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;出现问题&quot;&gt;&lt;a href=&quot;#出现问题&quot; class=&quot;headerlink&quot; title=&quot;出现问题&quot;&gt;&lt;/a&gt;出现问题&lt;/h3&gt;&lt;p&gt;在 Kubernetes (k8s) 创建 service 使用 nodePort 暴露 外部端口 8192 时报错：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The Service &quot;web-admin&quot; is invalid: spec.ports[0].nodePort: Invalid value: 8192: provided port is not in the valid range. The range of valid ports is 30000-32767&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="k8s" scheme="https://jueee.github.io/categories/k8s/"/>
    
    
    <category term="k8s" scheme="https://jueee.github.io/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>k8s 动态 PV 集成 ceph 块设备存储</title>
    <link href="https://jueee.github.io/2020/09/2020-09-03-k8s%E5%8A%A8%E6%80%81PV%E9%9B%86%E6%88%90ceph%E5%9D%97%E8%AE%BE%E5%A4%87%E5%AD%98%E5%82%A8/"/>
    <id>https://jueee.github.io/2020/09/2020-09-03-k8s%E5%8A%A8%E6%80%81PV%E9%9B%86%E6%88%90ceph%E5%9D%97%E8%AE%BE%E5%A4%87%E5%AD%98%E5%82%A8/</id>
    <published>2020-09-03T00:00:00.000Z</published>
    <updated>2020-09-22T09:52:32.107Z</updated>
    
    <content type="html"><![CDATA[<h3 id="动态-PV-使用步骤"><a href="#动态-PV-使用步骤" class="headerlink" title="动态 PV 使用步骤"></a>动态 PV 使用步骤</h3><ol><li>创建存储池并启用 RBD 功能。</li><li>创建 Ceph 用户，提供给 k8s 使用。</li><li>在 k8s 上安装 ceph-common 客户端。</li><li>复制 <code>ceph.conf</code> 以及 admin 用户的 keyring 文件到 k8s 节点（master and node）。</li><li>创建 Secret 资源，以 keyring 的 key 为 data。</li><li>动态 PV 使用<ol><li>创建 StorageClass</li><li> 创建 PVC</li><li> 创建 POD</li></ol></li></ol><a id="more"></a><h3 id="安装-ceph-客户端"><a href="#安装-ceph-客户端" class="headerlink" title="安装 ceph 客户端"></a>安装 ceph 客户端</h3><p>在部署 kubernetes 之前我们就已经有了 Ceph 集群，因此我们可以直接拿来用。但是 kubernetes 的所有节点（尤其是 master 节点）上依然需要安装 ceph 客户端。</p><pre class="language-none"><code class="language-none">apt-get install -y ceph-common</code></pre><p>还需要将 ceph 的配置文件 <code>ceph.conf</code> 放在所有节点的 <code>/etc/ceph</code> 目录下。</p><h3 id="配置-Secret-资源"><a href="#配置-Secret-资源" class="headerlink" title="配置 Secret 资源"></a>配置 Secret 资源</h3><p>生成 Ceph secret</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># ceph auth get-key client.admin |base64</span>QVFBS1RobGZEVysySXhBQXBVekozNGZ0RG1OTVVhRGlWL1NCMEE9PQ==</code></pre><p>创建 <code>ceph-secret.yaml</code> 文件内容为：</p><pre class="language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Secret<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> ceph<span class="token punctuation">-</span>secret<span class="token key atrule">data</span><span class="token punctuation">:</span>  <span class="token key atrule">key</span><span class="token punctuation">:</span> QVFBS1RobGZEVysySXhBQXBVekozNGZ0RG1OTVVhRGlWL1NCMEE9PQo=</code></pre><h3 id="创建-pool"><a href="#创建-pool" class="headerlink" title="创建 pool"></a>创建 pool</h3><p>Ceph 创建 pool </p><h3 id="创建-StorageClass"><a href="#创建-StorageClass" class="headerlink" title="创建 StorageClass"></a>创建 StorageClass</h3><p>创建 <code>storage-class.yaml</code> 文件内容为：</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> storage.k8s.io/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> StorageClass<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> kchadata  <span class="token key atrule">annotations</span><span class="token punctuation">:</span>    <span class="token key atrule">storageclass.beta.kubernetes.io/is-default-class</span><span class="token punctuation">:</span> <span class="token string">"true"</span><span class="token key atrule">provisioner</span><span class="token punctuation">:</span> ceph.com/rbd<span class="token key atrule">parameters</span><span class="token punctuation">:</span>  <span class="token key atrule">monitors</span><span class="token punctuation">:</span> 172.18.32.119<span class="token punctuation">:</span><span class="token number">6789</span><span class="token punctuation">,</span>172.18.83.170<span class="token punctuation">:</span><span class="token number">6789</span>  <span class="token key atrule">adminId</span><span class="token punctuation">:</span> admin  <span class="token key atrule">adminSecretName</span><span class="token punctuation">:</span> ceph<span class="token punctuation">-</span>secret  <span class="token key atrule">adminSecretNamespace</span><span class="token punctuation">:</span> default  <span class="token key atrule">pool</span><span class="token punctuation">:</span> kcha  <span class="token key atrule">userId</span><span class="token punctuation">:</span> admin  <span class="token key atrule">userSecretName</span><span class="token punctuation">:</span> ceph<span class="token punctuation">-</span>secret  <span class="token key atrule">userSecretNamespace</span><span class="token punctuation">:</span> default  <span class="token key atrule">fsType</span><span class="token punctuation">:</span> ext4  <span class="token key atrule">imageFormat</span><span class="token punctuation">:</span> <span class="token string">"2"</span>  <span class="token key atrule">imageFeatures</span><span class="token punctuation">:</span> <span class="token string">"layering"</span><span class="token key atrule">reclaimPolicy</span><span class="token punctuation">:</span> Retain</code></pre><h3 id="创建-PVC"><a href="#创建-PVC" class="headerlink" title="创建 PVC"></a>创建 PVC</h3><p>创建 <code>pvc-zkdata.yaml</code> 文件内容为：</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> PersistentVolumeClaim<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> zkdata<span class="token punctuation">-</span>zk<span class="token punctuation">-</span><span class="token number">0</span><span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">accessModes</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> ReadWriteOnce  <span class="token key atrule">resources</span><span class="token punctuation">:</span>    <span class="token key atrule">requests</span><span class="token punctuation">:</span>      <span class="token key atrule">storage</span><span class="token punctuation">:</span> 10Gi<span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> PersistentVolumeClaim<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> zkdata<span class="token punctuation">-</span>zk<span class="token punctuation">-</span><span class="token number">1</span><span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">accessModes</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> ReadWriteOnce  <span class="token key atrule">resources</span><span class="token punctuation">:</span>    <span class="token key atrule">requests</span><span class="token punctuation">:</span>      <span class="token key atrule">storage</span><span class="token punctuation">:</span> 10Gi<span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> PersistentVolumeClaim<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> zkdata<span class="token punctuation">-</span>zk<span class="token punctuation">-</span><span class="token number">2</span><span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">accessModes</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> ReadWriteOnce  <span class="token key atrule">resources</span><span class="token punctuation">:</span>    <span class="token key atrule">requests</span><span class="token punctuation">:</span>      <span class="token key atrule">storage</span><span class="token punctuation">:</span> 10Gi</code></pre><p>查看 PVC 和 PV，可以看到 PVC 是 Bound 状态，而且 PV 已经自动创建：</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">$ kg pvcNAME          STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS   AGEzkdata<span class="token operator">-</span>zk<span class="token operator">-</span>0   Bound    pvc<span class="token operator">-</span>b5acf208<span class="token operator">-</span>86a1<span class="token operator">-</span>4eb9<span class="token operator">-</span>b5f2<span class="token operator">-</span>5f99a9621ffa   10Gi       RWO            kchadata       9m5szkdata<span class="token operator">-</span>zk<span class="token operator">-</span>1   Bound    pvc<span class="token operator">-</span>9cc38190<span class="token operator">-</span>7cd1<span class="token operator">-</span>43b9<span class="token operator">-</span>948e<span class="token operator">-</span>7addd205bbeb   10Gi       RWO            kchadata       9m5szkdata<span class="token operator">-</span>zk<span class="token operator">-</span>2   Bound    pvc<span class="token operator">-</span>33494a8b<span class="token operator">-</span>a119<span class="token operator">-</span>45a0<span class="token operator">-</span>9741<span class="token operator">-</span>f09aa31008b3   10Gi       RWO            kchadata       9m5s$ kg pvNAME                                       CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                     STORAGECLASS   REASON   AGEpvc<span class="token operator">-</span>33494a8b<span class="token operator">-</span>a119<span class="token operator">-</span>45a0<span class="token operator">-</span>9741<span class="token operator">-</span>f09aa31008b3   10Gi       RWO            Retain           Bound    manti<span class="token operator">-</span>infra<span class="token operator">/</span>zkdata<span class="token operator">-</span>zk<span class="token operator">-</span>2   kchadata                9m34spvc<span class="token operator">-</span>9cc38190<span class="token operator">-</span>7cd1<span class="token operator">-</span>43b9<span class="token operator">-</span>948e<span class="token operator">-</span>7addd205bbeb   10Gi       RWO            Retain           Bound    manti<span class="token operator">-</span>infra<span class="token operator">/</span>zkdata<span class="token operator">-</span>zk<span class="token operator">-</span>1   kchadata                9m34spvc<span class="token operator">-</span>b5acf208<span class="token operator">-</span>86a1<span class="token operator">-</span>4eb9<span class="token operator">-</span>b5f2<span class="token operator">-</span>5f99a9621ffa   10Gi       RWO            Retain           Bound    manti<span class="token operator">-</span>infra<span class="token operator">/</span>zkdata<span class="token operator">-</span>zk<span class="token operator">-</span>0   kchadata                9m34s</code></pre><h3 id="创建POD"><a href="#创建POD" class="headerlink" title="创建POD"></a>创建 POD</h3><p>省略</p><h3 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h3><h4 id="Failed-to-provision-volume"><a href="#Failed-to-provision-volume" class="headerlink" title="Failed to provision volume"></a>Failed to provision volume</h4><pre class="language-none"><code class="language-none">$ k describe pvc zkdata-zk-0Failed to provision volume with StorageClass "kchadata": failed to create rbd image: executable file not found in $PATH, command output:</code></pre><p>需要安装 ceph-common 工具插件来操作 Ceph，上边报错应该就是找不到该插件导致的。</p><p><strong>方案一</strong>：添加 ceph-common 到 hyperkube image 中，构建一个新的安装了 ceph-common 的同名镜像 hyperkube-amd64 替换官方镜像</p><pre class="language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">$ vim DockerfileFROM gcr.io/google_containers/hyperkube-amd64:v1.2.1 RUN curl https://raw.githubusercontent.com/ceph/ceph/master/keys/release.asc | apt-key add - &amp;&amp; \    echo deb http://download.ceph.com/debian-hammer/ jessie main | tee /etc/apt/sources.list.d/ceph.list &amp;&amp; \    apt-get update &amp;&amp; \    DEBIAN_FRONTEND=noninteractive apt-get install -q -y ceph-common &amp;&amp; \    apt-get clean &amp;&amp; rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* $ docker build -t custom/hyperkube-amd64:v1.2.1 .    </code></pre><p><strong>方案二：</strong>使用 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2t1YmVybmV0ZXMtaW5jdWJhdG9yL2V4dGVybmFsLXN0b3JhZ2U=">扩展存储卷插件<i class="fa fa-external-link-alt"></i></span> 来帮我们完成这一步。</p><pre class="language-none"><code class="language-none">$ git clone https://github.com/kubernetes-incubator/external-storage.git$ tree external-storage/ceph/rbd/deploy/├── README.md├── non-rbac│   └── deployment.yaml└── rbac    ├── clusterrole.yaml    ├── clusterrolebinding.yaml    ├── deployment.yaml    └── serviceaccount.yaml</code></pre><p>这里提供 rbac 和 no-rbac 两种方式，如果搭建 k8s 集群时开启了 rbac 认证的，需要采用 rbac 方式来创建该 deployment。</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">NAMESPACE=default <span class="token comment"># change this if you want to deploy it in another namespace</span>sed <span class="token operator">-</span>r <span class="token operator">-</span>i <span class="token string">"s/namespace: [^ ]+/namespace: <span class="token variable">$NAMESPACE</span>/g"</span> <span class="token punctuation">.</span><span class="token operator">/</span>rbac<span class="token operator">/</span>clusterrolebinding<span class="token punctuation">.</span>yaml <span class="token punctuation">.</span><span class="token operator">/</span>rbac<span class="token operator">/</span>rolebinding<span class="token punctuation">.</span>yamlkubectl <span class="token operator">-</span>n <span class="token variable">$NAMESPACE</span> apply <span class="token operator">-</span>f <span class="token punctuation">.</span><span class="token operator">/</span>rbac</code></pre><p>然后修改 <code>storage-class.yaml</code> 文件，将 <code>provisioner: kubernetes.io/rbd</code> 修改为 <code>provisioner: ceph.com/rbd</code>，意思就是不使用 k8s 内部提供的 rbd 存储类型，而是使用我们刚创建的扩展 rbd 存储。</p><p>参考：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2t1YmVybmV0ZXMva3ViZXJuZXRlcy9pc3N1ZXMvMzg5MjM=">https://github.com/kubernetes/kubernetes/issues/38923<i class="fa fa-external-link-alt"></i></span></p><h4 id="master节点不能部署"><a href="#master节点不能部署" class="headerlink" title="master节点不能部署"></a>master 节点不能部署</h4><pre class="language-none"><code class="language-none">0/3 nodes are available: 1 node(s) had taint {node-role.kubernetes.io/master: }, that the pod didn't tolerate, 2 node(s) didn't match pod affinity/anti-affinity, 2 node(s) didn't satisfy existing pods anti-affinity rules.</code></pre><p>解决：</p><pre class="language-none"><code class="language-none">kubectl taint nodes --all node-role.kubernetes.io/master-</code></pre><p>重新加入污点：</p><pre class="language-none"><code class="language-none">kubectl taint nodes master-hostname node-role.kubernetes.io/master=true:NoSchedule</code></pre>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;动态-PV-使用步骤&quot;&gt;&lt;a href=&quot;#动态-PV-使用步骤&quot; class=&quot;headerlink&quot; title=&quot;动态 PV 使用步骤&quot;&gt;&lt;/a&gt;动态 PV 使用步骤&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;创建存储池并启用 RBD 功能。&lt;/li&gt;
&lt;li&gt;创建 Ceph 用户，提供给 k8s 使用。&lt;/li&gt;
&lt;li&gt;在 k8s 上安装 ceph-common 客户端。&lt;/li&gt;
&lt;li&gt;复制 &lt;code&gt;ceph.conf&lt;/code&gt; 以及 admin 用户的 keyring 文件到 k8s 节点（master and node）。&lt;/li&gt;
&lt;li&gt;创建 Secret 资源，以 keyring 的 key 为 data。&lt;/li&gt;
&lt;li&gt;动态 PV 使用&lt;ol&gt;
&lt;li&gt;创建 StorageClass&lt;/li&gt;
&lt;li&gt; 创建 PVC&lt;/li&gt;
&lt;li&gt; 创建 POD&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="Ceph" scheme="https://jueee.github.io/categories/Ceph/"/>
    
    <category term="k8s" scheme="https://jueee.github.io/categories/k8s/"/>
    
    
    <category term="Ceph" scheme="https://jueee.github.io/tags/Ceph/"/>
    
    <category term="k8s" scheme="https://jueee.github.io/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>Arthas 之使用 profiler 做复杂链路分析</title>
    <link href="https://jueee.github.io/2020/09/2020-09-02-Arthas%E4%B9%8B%E4%BD%BF%E7%94%A8profiler%E5%81%9A%E5%A4%8D%E6%9D%82%E9%93%BE%E8%B7%AF%E5%88%86%E6%9E%90/"/>
    <id>https://jueee.github.io/2020/09/2020-09-02-Arthas%E4%B9%8B%E4%BD%BF%E7%94%A8profiler%E5%81%9A%E5%A4%8D%E6%9D%82%E9%93%BE%E8%B7%AF%E5%88%86%E6%9E%90/</id>
    <published>2020-09-02T00:00:00.000Z</published>
    <updated>2020-09-22T09:52:32.102Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Arthas-的-profiler-命令"><a href="#Arthas-的-profiler-命令" class="headerlink" title="Arthas 的 profiler 命令"></a>Arthas 的 profiler 命令</h3><h4 id="命令说明"><a href="#命令说明" class="headerlink" title="命令说明"></a>命令说明</h4><p><code>profiler</code> 命令支持生成应用热点的火焰图。本质上是通过不断的采样，然后把收集到的采样结果生成火焰图。</p><blockquote><p>文档：<span class="exturl" data-url="aHR0cHM6Ly9hcnRoYXMuYWxpeXVuLmNvbS9kb2MvcHJvZmlsZXIuaHRtbA==">https://arthas.aliyun.com/doc/profiler.html<i class="fa fa-external-link-alt"></i></span></p></blockquote><p><code>profiler</code> 命令的实现依赖于开源 <code>async-profiler</code>：</p><blockquote><p>GitHub：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2p2bS1wcm9maWxpbmctdG9vbHMvYXN5bmMtcHJvZmlsZXI=">https://github.com/jvm-profiling-tools/async-profiler<i class="fa fa-external-link-alt"></i></span></p></blockquote><a id="more"></a><h4 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h4><table><thead><tr><th>参数名称</th><th>参数说明</th></tr></thead><tbody><tr><td><em> action</em></td><td> 要执行的操作</td></tr><tr><td><em> actionArg</em></td><td> 属性名模式</td></tr><tr><td> [i:]</td><td> 采样间隔（单位：ns）（默认值：10'000'000，即 10 ms）</td></tr><tr><td>[f:]</td><td> 将输出转储到指定路径</td></tr><tr><td> [d:]</td><td> 运行评测指定秒</td></tr><tr><td> [e:]</td><td> 要跟踪哪个事件（cpu, alloc, lock, cache-misses 等），默认是 cpu</td></tr></tbody></table><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><p><code>profiler</code> 命令的使用，有以下注意事项：</p><ol><li><p>Windows 系统不支持 profiler 命令，只有  Linux/Mac 支持。</p><blockquote><p>Current OS do not support AsyncProfiler, Only support Linux/Mac.</p></blockquote></li><li><p><code>$ /lib/x86_64-linux-gnu/libc.so.6 --version</code> 版本大于 2.14</p><blockquote><p>/lib/x86_64-linux-gnu/libc.so.6: version `GLIBC_2.14' not found</p></blockquote></li></ol><h3 id="使用-profiler-命令"><a href="#使用-profiler-命令" class="headerlink" title="使用 profiler 命令"></a>使用 profiler 命令</h3><h4 id="启动profiler"><a href="#启动profiler" class="headerlink" title="启动profiler"></a>启动 profiler</h4><pre class="language-powershell" data-language="powershell"><code class="language-powershell">$ profiler <span class="token function">start</span>Started <span class="token namespace">[cpu]</span> profiling</code></pre><blockquote><p>默认情况下，生成的是 cpu 的火焰图，即 event 为 <code>cpu</code>。可以用 <code>--event</code> 参数来指定。</p></blockquote><h4 id="获取数量"><a href="#获取数量" class="headerlink" title="获取数量"></a>获取数量</h4><p>获取已采集的 sample 的数量</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">$ profiler getSamples23</code></pre><h4 id="查看状态"><a href="#查看状态" class="headerlink" title="查看状态"></a>查看状态</h4><pre class="language-powershell" data-language="powershell"><code class="language-powershell">$ profiler status<span class="token namespace">[cpu]</span> profiling is running <span class="token keyword">for</span> 4 seconds</code></pre><p>可以查看当前 profiler 在采样哪种 <code>event</code> 和采样时间。</p><h4 id="停止profiler"><a href="#停止profiler" class="headerlink" title="停止profiler"></a>停止 profiler</h4><p>默认生成 svg 格式结果</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">$ profiler stopprofiler output file: <span class="token operator">/</span>tmp<span class="token operator">/</span>demo<span class="token operator">/</span>arthas<span class="token operator">-</span>output<span class="token operator">/</span>20191125<span class="token operator">-</span>135546<span class="token punctuation">.</span>svgOK</code></pre><p>默认情况下，生成的结果保存到应用的<code>工作目录</code>下的 <code>arthas-output</code> 目录。可以通过 <code>--file</code> 参数来指定输出结果路径。比如：</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">$ profiler stop <span class="token operator">--</span>file <span class="token operator">/</span>tmp<span class="token operator">/</span>output<span class="token punctuation">.</span>svgprofiler output file: <span class="token operator">/</span>tmp<span class="token operator">/</span>output<span class="token punctuation">.</span>svgOK</code></pre><h4 id="生成html格式"><a href="#生成html格式" class="headerlink" title="生成html格式"></a>生成 html 格式</h4><p>默认情况下，结果文件是 <code>svg</code> 格式，如果想生成 <code>html</code> 格式，可以用 <code>--format</code> 参数指定：</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">$ profiler stop <span class="token operator">--</span>format htmlprofiler output file: <span class="token operator">/</span>tmp<span class="token operator">/</span>test<span class="token operator">/</span>arthas<span class="token operator">-</span>output<span class="token operator">/</span>20191125<span class="token operator">-</span>143329<span class="token punctuation">.</span>htmlOK</code></pre><p>或者在 <code>--file</code> 参数里用文件名指名格式。比如 <code>--file /tmp/result.html</code> 。</p><h3 id="做复杂链路分析"><a href="#做复杂链路分析" class="headerlink" title="做复杂链路分析"></a>做复杂链路分析</h3><h4 id="采样生成jfr文件"><a href="#采样生成jfr文件" class="headerlink" title="采样生成jfr文件"></a>采样生成 jfr 文件</h4><p>启动 arthas 之后，执行以下采样命令：</p><pre class="language-none"><code class="language-none">profiler start -f /home/admin/yourAppName/target/arthas-output/%t.jfr -d 180</code></pre><p>% t 表示当前时间，-d 后面是采样秒数。</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;Arthas-的-profiler-命令&quot;&gt;&lt;a href=&quot;#Arthas-的-profiler-命令&quot; class=&quot;headerlink&quot; title=&quot;Arthas 的 profiler 命令&quot;&gt;&lt;/a&gt;Arthas 的 profiler 命令&lt;/h3&gt;&lt;h4 id=&quot;命令说明&quot;&gt;&lt;a href=&quot;#命令说明&quot; class=&quot;headerlink&quot; title=&quot;命令说明&quot;&gt;&lt;/a&gt;命令说明&lt;/h4&gt;&lt;p&gt;&lt;code&gt;profiler&lt;/code&gt; 命令支持生成应用热点的火焰图。本质上是通过不断的采样，然后把收集到的采样结果生成火焰图。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;文档：&lt;a href=&quot;https://arthas.aliyun.com/doc/profiler.html&quot;&gt;https://arthas.aliyun.com/doc/profiler.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;profiler&lt;/code&gt; 命令的实现依赖于开源 &lt;code&gt;async-profiler&lt;/code&gt;：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;GitHub：&lt;a href=&quot;https://github.com/jvm-profiling-tools/async-profiler&quot;&gt;https://github.com/jvm-profiling-tools/async-profiler&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Java" scheme="https://jueee.github.io/categories/Java/"/>
    
    <category term="Arthas" scheme="https://jueee.github.io/categories/Java/Arthas/"/>
    
    
    <category term="Java" scheme="https://jueee.github.io/tags/Java/"/>
    
    <category term="Java诊断" scheme="https://jueee.github.io/tags/Java%E8%AF%8A%E6%96%AD/"/>
    
    <category term="Arthas" scheme="https://jueee.github.io/tags/Arthas/"/>
    
  </entry>
  
</feed>
