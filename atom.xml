<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小决的专栏</title>
  
  <subtitle>进一寸有一寸的欢喜</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://jueee.github.io/"/>
  <updated>2020-09-22T03:23:18.125Z</updated>
  <id>https://jueee.github.io/</id>
  
  <author>
    <name>小决</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>在 eclipse 中安装 lombok.jar</title>
    <link href="https://jueee.github.io/2020/09/2020-09-21-%E5%9C%A8eclipse%E4%B8%AD%E5%AE%89%E8%A3%85lombok.jar/"/>
    <id>https://jueee.github.io/2020/09/2020-09-21-%E5%9C%A8eclipse%E4%B8%AD%E5%AE%89%E8%A3%85lombok.jar/</id>
    <published>2020-09-21T00:00:00.000Z</published>
    <updated>2020-09-22T03:23:18.125Z</updated>
    
    <content type="html"><![CDATA[<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p><strong>下载 lombok.jar（一定要最新版）</strong></p><p>下载地址：<span class="exturl" data-url="aHR0cHM6Ly9wcm9qZWN0bG9tYm9rLm9yZy9kb3dubG9hZA==">https://projectlombok.org/download<i class="fa fa-external-link-alt"></i></span></p><a id="more"></a><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ol><li><p><strong>复制 lombok.jar 到 eclipse.ini 所在目录</strong></p></li><li><p><strong>安装 lombok.jar</strong>：shift + 右键唤出命令窗口，运行 <strong>java -jar lombok.jar</strong>  或者 直接双击 lombok.jar（后者操作更简单）</p><p><img src="/images/2020/09/image-20200921103421844.png" alt="image-20200921103421844" loading="lazy"></p></li><li><p>选择 eclipse.exe：<br><img src="/images/2020/09/image-20200921103504337.png" alt="image-20200921103504337" loading="lazy"></p></li><li><p>确认 eclipse.exe：<img src="/images/2020/09/image-20200921103526313.png" alt="image-20200921103526313" loading="lazy"></p></li><li><p>快速安装：<br><img src="/images/2020/09/image-20200921103543338.png" alt="image-20200921103543338" loading="lazy"></p></li><li><p>操作完成后发现 eclipse.ini 多了一行配置：<br><img src="/images/2020/09/image-20200921103619161.png" alt="image-20200921103619161" loading="lazy"></p></li></ol><h3 id="安装成功后操作"><a href="#安装成功后操作" class="headerlink" title="安装成功后操作"></a><strong>安装成功后操作</strong></h3><p>重启 eclipse 并刷新项目，之前报错的 set () get () 等方法不再报错。</p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a><strong>注意事项</strong></h3><p>lombok.jar 一定要从官网下载最新，否则安装后 get () set () 等方法仍会报错。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;下载&quot;&gt;&lt;a href=&quot;#下载&quot; class=&quot;headerlink&quot; title=&quot;下载&quot;&gt;&lt;/a&gt;下载&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;下载lombok.jar（一定要最新版）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;下载地址：&lt;a href=&quot;https://projectlombok.org/download&quot;&gt;https://projectlombok.org/download&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="软件" scheme="https://jueee.github.io/categories/%E8%BD%AF%E4%BB%B6/"/>
    
      <category term="IDE" scheme="https://jueee.github.io/categories/%E8%BD%AF%E4%BB%B6/IDE/"/>
    
    
      <category term="软件" scheme="https://jueee.github.io/tags/%E8%BD%AF%E4%BB%B6/"/>
    
      <category term="IDE" scheme="https://jueee.github.io/tags/IDE/"/>
    
      <category term="eclipse" scheme="https://jueee.github.io/tags/eclipse/"/>
    
  </entry>
  
  <entry>
    <title>使用 Python 遍历备份 docker-compose 文件中的镜像</title>
    <link href="https://jueee.github.io/2020/09/2020-09-15-%E4%BD%BF%E7%94%A8Python%E9%81%8D%E5%8E%86%E5%A4%87%E4%BB%BDdocker-compose%E6%96%87%E4%BB%B6%E4%B8%AD%E7%9A%84%E9%95%9C%E5%83%8F/"/>
    <id>https://jueee.github.io/2020/09/2020-09-15-%E4%BD%BF%E7%94%A8Python%E9%81%8D%E5%8E%86%E5%A4%87%E4%BB%BDdocker-compose%E6%96%87%E4%BB%B6%E4%B8%AD%E7%9A%84%E9%95%9C%E5%83%8F/</id>
    <published>2020-09-15T00:00:00.000Z</published>
    <updated>2020-09-15T03:34:29.182Z</updated>
    
    <content type="html"><![CDATA[<p>Python 脚本如下：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">def</span> <span class="token function">get_images</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"docker-compose.yml"</span><span class="token punctuation">)</span>     images <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> line <span class="token keyword">in</span> <span class="token builtin">file</span><span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>           line <span class="token operator">=</span> line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>           <span class="token keyword">if</span> <span class="token string">"image"</span> <span class="token keyword">in</span> line<span class="token punctuation">:</span>             image <span class="token operator">=</span> line<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"image:"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>             images<span class="token punctuation">.</span>append<span class="token punctuation">(</span>image<span class="token punctuation">)</span>    <span class="token keyword">return</span> images<span class="token keyword">def</span> <span class="token function">pull_images</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    images <span class="token operator">=</span> get_images<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> image <span class="token keyword">in</span> images<span class="token punctuation">:</span>        pull_commond <span class="token operator">=</span> <span class="token string">"docker pull "</span> <span class="token operator">+</span> image        <span class="token keyword">print</span><span class="token punctuation">(</span>pull_commond<span class="token punctuation">)</span>        os<span class="token punctuation">.</span>system<span class="token punctuation">(</span>pull_commond<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">save_imaegs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    images <span class="token operator">=</span> get_images<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> image <span class="token keyword">in</span> images<span class="token punctuation">:</span>        sub_name <span class="token operator">=</span> image<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">,</span><span class="token string">"_"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">".tar"</span>        <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>sub_name<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>sub_name<span class="token punctuation">,</span><span class="token string">'is exists!'</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            save_commond <span class="token operator">=</span> <span class="token string">"docker save "</span> <span class="token operator">+</span> image <span class="token operator">+</span> <span class="token string">" -o "</span> <span class="token operator">+</span> sub_name            <span class="token keyword">print</span><span class="token punctuation">(</span>save_commond<span class="token punctuation">)</span>            os<span class="token punctuation">.</span>system<span class="token punctuation">(</span>save_commond<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">load_images</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    files <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token builtin">file</span> <span class="token keyword">in</span> files<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token string">".tar"</span> <span class="token keyword">in</span> <span class="token builtin">file</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span>            load_commond <span class="token operator">=</span> <span class="token string">"docker load -i "</span> <span class="token operator">+</span> <span class="token builtin">file</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>load_commond<span class="token punctuation">)</span>            os<span class="token punctuation">.</span>system<span class="token punctuation">(</span>load_commond<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">start_deal</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> num <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        pull_images<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> num <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>        save_imaegs<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> num <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span>        load_images<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">"__main__"</span><span class="token punctuation">:</span>    start_deal<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    </code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Python 脚本如下：&lt;/p&gt;
&lt;pre class=&quot;language-python&quot; data-language=&quot;python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/sp
      
    
    </summary>
    
    
      <category term="Python" scheme="https://jueee.github.io/categories/Python/"/>
    
      <category term="Docker" scheme="https://jueee.github.io/categories/Docker/"/>
    
    
      <category term="Python" scheme="https://jueee.github.io/tags/Python/"/>
    
      <category term="Docker" scheme="https://jueee.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Linux 进行磁盘自动挂载</title>
    <link href="https://jueee.github.io/2020/09/2020-09-16-Linux%E8%BF%9B%E8%A1%8C%E7%A3%81%E7%9B%98%E8%87%AA%E5%8A%A8%E6%8C%82%E8%BD%BD/"/>
    <id>https://jueee.github.io/2020/09/2020-09-16-Linux%E8%BF%9B%E8%A1%8C%E7%A3%81%E7%9B%98%E8%87%AA%E5%8A%A8%E6%8C%82%E8%BD%BD/</id>
    <published>2020-09-15T00:00:00.000Z</published>
    <updated>2020-09-16T03:05:03.533Z</updated>
    
    <content type="html"><![CDATA[<p>在给系统新增了磁盘以后，如果重启系统我们会发现找不到存储了；但是使用 fdisk -l 可以看到存储空间，说明存储还在。这是因为关机后，挂载已经自动卸载掉了。我们当然可以手动再次将其挂载，但如果每次重启都需要这样手动操作会很不方便；因此我们可以利用自动挂载，这样系统每次开机的时候就可以自动将磁盘挂载上去了。</p><a id="more"></a><h3 id="手动挂载磁盘"><a href="#手动挂载磁盘" class="headerlink" title="手动挂载磁盘"></a>手动挂载磁盘</h3><p>使用 <code>fdisk -l</code> 检查磁盘：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># fdisk -l</span>Disk /dev/sdb: <span class="token number">465.8</span> GiB, <span class="token number">500107862016</span> bytes, <span class="token number">976773168</span> sectorsUnits: sectors of <span class="token number">1</span> * <span class="token number">512</span> <span class="token operator">=</span> <span class="token number">512</span> bytesSector size <span class="token punctuation">(</span>logical/physical<span class="token punctuation">)</span>: <span class="token number">512</span> bytes / <span class="token number">4096</span> bytesI/O size <span class="token punctuation">(</span>minimum/optimal<span class="token punctuation">)</span>: <span class="token number">4096</span> bytes / <span class="token number">4096</span> bytesDisklabel type: dosDisk identifier: 0x944e14cfDevice     Boot Start       End   Sectors   Size Id Type/dev/sdb1        <span class="token number">2048</span> <span class="token number">976773167</span> <span class="token number">976771120</span> <span class="token number">465</span>.8G <span class="token number">83</span> Linux</code></pre><p>使用 <code>mount</code> 进行磁盘挂载</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">mount</span> /dev/sdb1 /data1/</code></pre><p>将 mount 命令添加进 <code>/etc/rc.d/rc.local</code> 文件是另一种实现开机自动挂载的方式</p><h3 id="配置自动挂载"><a href="#配置自动挂载" class="headerlink" title="配置自动挂载"></a>配置自动挂载</h3><p>修改 /etc/fstab 文件</p><p>用 vim 打开 fstab 文件，可以看到文件格式如下：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># /etc/fstab: static file system information.</span><span class="token comment">#</span><span class="token comment"># &lt;file sys&gt;    &lt;mount point&gt;   &lt;type&gt;  &lt;options&gt;       &lt;dump&gt;  &lt;pass&gt;</span><span class="token comment"># device during installation: /dev/sda1</span><span class="token assign-left variable">UUID</span><span class="token operator">=</span>9ca41ea4-2a2d-413a-8114-502b3dbc2d3e       /       ext4    rw,errors<span class="token operator">=</span>remount-ro    <span class="token number">0</span>       <span class="token number">1</span><span class="token comment"># device during installation: /dev/sda8</span><span class="token assign-left variable">UUID</span><span class="token operator">=</span>d9f40848-a9d0-4849-96a0-9d11231b0dec       /home   ext4    rw      <span class="token number">0</span>       <span class="token number">2</span><span class="token comment"># device during installation: /dev/sda7</span><span class="token assign-left variable">UUID</span><span class="token operator">=</span>b953aa93-1b30-43d0-938b-0fd9fffc6034       /tmp    ext4    rw      <span class="token number">0</span>       <span class="token number">2</span><span class="token comment"># device during installation: /dev/sda5</span><span class="token assign-left variable">UUID</span><span class="token operator">=</span>ad67642a-b2d7-48fb-927c-b83492533c48       /usr    ext4    rw      <span class="token number">0</span>       <span class="token number">2</span><span class="token comment"># device during installation: /dev/sda6</span><span class="token assign-left variable">UUID</span><span class="token operator">=</span>e39dbbca-a3c4-4c3c-a51b-ca6c3520d07b       /var    ext4    rw      <span class="token number">0</span>       <span class="token number">2</span></code></pre><p>可以很明显的看到文件有 6 列。</p><ul><li>第 1 列是设备名或者卷标</li><li>第 2 列是挂载点（也就是挂载目录）</li><li>第 3 列是所要挂载设备的文件系统或者文件系统类型</li><li>第 4 列是挂载选项，通常使用 defaults 就可以</li><li>第 5 列设置是否使用 dump 备份，置 0 为不备份，置 1，2 为备份，但 2 的备份重要性比 1 小</li><li>第 6 列设置是否开机的时候使用 fsck 检验所挂载的磁盘，置 0 为不检验，置 1，2 为检验，但置 2 盘比置 1 的盘晚检验。</li></ul><p>加入磁盘配置</p><pre class="language-bash" data-language="bash"><code class="language-bash">/dev/sdb1       /data1    ext4    rw      <span class="token number">0</span>       <span class="token number">0</span></code></pre><p>将上面的命令添加进 fstab 后，为了避免可能的错误，我们可以使用 mount -a 命令来检验编辑的内容是否有错。执行 mount -a 命令后，用 df -h 查看会发现磁盘已经挂载成功，说明输入没有错误。下次重启的时候系统就可以自动进行挂载了。</p><p><strong>注意</strong>：</p><ol><li>根目录必须优先于其他挂载点</li><li>挂载点必须为已经存在的目录</li><li>卸载时必须保证当前磁盘没有发生读写操作</li></ol><h5 id=""><a href="#" class="headerlink" title=""></a></h5>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在给系统新增了磁盘以后，如果重启系统我们会发现找不到存储了；但是使用 fdisk -l 可以看到存储空间，说明存储还在。这是因为关机后，挂载已经自动卸载掉了。我们当然可以手动再次将其挂载，但如果每次重启都需要这样手动操作会很不方便；因此我们可以利用自动挂载，这样系统每次开机的时候就可以自动将磁盘挂载上去了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://jueee.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://jueee.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>自动删除 Elasticsearch 索引</title>
    <link href="https://jueee.github.io/2020/09/2020-09-07-%E8%87%AA%E5%8A%A8%E5%88%A0%E9%99%A4%20Elasticsearch%20%E7%B4%A2%E5%BC%95/"/>
    <id>https://jueee.github.io/2020/09/2020-09-07-%E8%87%AA%E5%8A%A8%E5%88%A0%E9%99%A4%20Elasticsearch%20%E7%B4%A2%E5%BC%95/</id>
    <published>2020-09-07T00:00:00.000Z</published>
    <updated>2020-09-09T08:16:32.384Z</updated>
    
    <content type="html"><![CDATA[<p>索引文件保留在服务器中，大大减小服务器的性能，占用硬盘空间，<br>因此使用脚本自动删除 elk 中的历史索引以释放空间。</p><h3 id="清理索引命令行"><a href="#清理索引命令行" class="headerlink" title="清理索引命令行"></a>清理索引命令行</h3><p>查看所有的索引文件：</p><blockquote><p>curl -XGET <span class="exturl" data-url="aHR0cDovL2xvY2FsaG9zdDo5MjAwL19jYXQvaW5kaWNlcz92">http://localhost:9200/_cat/indices?v<i class="fa fa-external-link-alt"></i></span></p></blockquote><p>删除索引文件以释放空间：</p><blockquote><p>curl -XDELETE <span class="exturl" data-url="aHR0cDovL2xvY2FsaG9zdDo5MjAwL2ZpbGViZWF0LTIwMTYuMTIuMjg=">http://localhost:9200/filebeat-2016.12.28<i class="fa fa-external-link-alt"></i></span></p></blockquote><a id="more"></a><h3 id="清理索引脚本"><a href="#清理索引脚本" class="headerlink" title="清理索引脚本"></a>清理索引脚本</h3><p>新增 Shell 脚本：</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment">#!/bin/bash</span><span class="token comment"># auto delete 7 day ago elasticsearch index</span>eshost=<span class="token string">'127.0.0.1:9200'</span>dtime=`date <span class="token operator">-</span>d <span class="token string">"7 day ago"</span> <span class="token operator">+</span><span class="token operator">%</span>Y-<span class="token operator">%</span>m-<span class="token operator">%</span>d`dtime_stamp=`date <span class="token operator">-</span>d <span class="token string">"<span class="token variable">$dtime</span>"</span> <span class="token operator">+</span><span class="token operator">%</span>s`<span class="token function">echo</span> `date` <span class="token string">'start clean '</span> <span class="token variable">$dtime</span> &gt;&gt; clean<span class="token operator">-</span>log<span class="token punctuation">.</span>logindexs=`curl <span class="token operator">-</span>s <span class="token string">'http://'</span><span class="token variable">$eshost</span><span class="token string">'/_cat/indices'</span> <span class="token punctuation">|</span> awk <span class="token string">'$3~/^logstash/{print $3}'</span>`<span class="token keyword">for</span> line in <span class="token variable">$indexs</span><span class="token punctuation">;</span><span class="token keyword">do</span>  index=<span class="token variable">$line</span>  itime=`<span class="token function">echo</span> <span class="token variable">$line</span> <span class="token punctuation">|</span> awk <span class="token operator">-</span>F <span class="token operator">-</span> <span class="token string">'{print $3}'</span> <span class="token punctuation">|</span> tr <span class="token string">'.'</span> <span class="token string">'-'</span>`  itime_stamp=`date <span class="token operator">-</span>d <span class="token string">"<span class="token variable">$itime</span>"</span> <span class="token operator">+</span><span class="token operator">%</span>s`  <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$itime_stamp</span> <span class="token operator">-lt</span> <span class="token variable">$dtime_stamp</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>then    <span class="token function">echo</span> <span class="token variable">$index</span> &gt;&gt; clean<span class="token operator">-</span>log<span class="token punctuation">.</span>log    curl <span class="token operator">-</span>X DELETE <span class="token string">"http://<span class="token variable">$eshost</span>/<span class="token variable">$index</span>"</span> &gt; <span class="token operator">/</span>dev<span class="token operator">/</span>null 2&gt;&amp;1  fidone</code></pre><p>每天 2 点定时删除 es 中指定日期的数据，配置 crontab：</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">0 2 <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">*</span> sh <span class="token operator">/</span>home<span class="token operator">/</span><span class="token function">dir</span><span class="token operator">/</span>auto<span class="token operator">-</span>clean<span class="token operator">-</span>log<span class="token punctuation">.</span>sh &gt;&gt; <span class="token operator">/</span>home<span class="token operator">/</span><span class="token function">dir</span><span class="token operator">/</span>clean<span class="token operator">-</span>log<span class="token punctuation">.</span>log 2&gt;&amp;1</code></pre><h3 id="容器中获取-es-地址"><a href="#容器中获取-es-地址" class="headerlink" title="容器中获取 es 地址"></a>容器中获取 es 地址</h3><p>对于 docker 搭建的 es 环境，可以通过如下参数获取 es 的 IP：</p><pre class="language-none"><code class="language-none">esip=`docker inspect -f "{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}" elasticsearch.manti-infra.svc`eshost="$esip:9200"</code></pre><p>对于 k8s 搭建的 es 环境，可以通过如下参数获取 es 的 IP：</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">esip=`kubectl describe svc elasticsearch  <span class="token operator">-</span>n manti<span class="token operator">-</span>infra <span class="token punctuation">|</span> grep IP <span class="token punctuation">|</span> awk <span class="token string">'{print $2}'</span>`eshost=<span class="token string">"<span class="token variable">$esip</span>:9200"</span></code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;索引文件保留在服务器中，大大减小服务器的性能，占用硬盘空间，&lt;br&gt;因此使用脚本自动删除 elk 中的历史索引以释放空间。&lt;/p&gt;
&lt;h3 id=&quot;清理索引命令行&quot;&gt;&lt;a href=&quot;#清理索引命令行&quot; class=&quot;headerlink&quot; title=&quot;清理索引命令行&quot;&gt;&lt;/a&gt;清理索引命令行&lt;/h3&gt;&lt;p&gt;查看所有的索引文件：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;curl -XGET &lt;a href=&quot;http://localhost:9200/_cat/indices?v&quot;&gt;http://localhost:9200/_cat/indices?v&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;删除索引文件以释放空间：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;curl -XDELETE &lt;a href=&quot;http://localhost:9200/filebeat-2016.12.28&quot;&gt;http://localhost:9200/filebeat-2016.12.28&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://jueee.github.io/categories/Linux/"/>
    
      <category term="Shell" scheme="https://jueee.github.io/categories/Linux/Shell/"/>
    
      <category term="Elasticsearch" scheme="https://jueee.github.io/categories/Elasticsearch/"/>
    
    
      <category term="Elasticsearch" scheme="https://jueee.github.io/tags/Elasticsearch/"/>
    
      <category term="Shell" scheme="https://jueee.github.io/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>k8s 在 tomcat 多副本时的 session 会话保持</title>
    <link href="https://jueee.github.io/2020/09/2020-09-05-k8s%E5%9C%A8tomcat%E5%A4%9A%E5%89%AF%E6%9C%AC%E6%97%B6%E7%9A%84session%E4%BC%9A%E8%AF%9D%E4%BF%9D%E6%8C%81/"/>
    <id>https://jueee.github.io/2020/09/2020-09-05-k8s%E5%9C%A8tomcat%E5%A4%9A%E5%89%AF%E6%9C%AC%E6%97%B6%E7%9A%84session%E4%BC%9A%E8%AF%9D%E4%BF%9D%E6%8C%81/</id>
    <published>2020-09-05T00:00:00.000Z</published>
    <updated>2020-09-04T11:02:25.660Z</updated>
    
    <content type="html"><![CDATA[<h3 id="出现问题"><a href="#出现问题" class="headerlink" title="出现问题"></a>出现问题</h3><p>通过 kubernetes 部署了 tomcat+mysql 服务，设置 tomcat 多副本时发现首页登陆无法跳转的情况，经排查是由于 session 问题引起的。</p><p>kubernetes 上可以多实例（pod）高负载运行，但是如果应用如果没有做 session 同步的话，就会导致 session 不一致。<br>kubernetes 有 session 亲和性的功能（每个 client 每次访问，都会匹配到对应 session 的后端）。</p><a id="more"></a><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>此时，在 service 的配置文件中加入 <code>sessionAffinity: ClientIP</code>，功能是选择与请求来源 ip 更接近的 pod，这样就会固定同一个 session。</p><p>如下图所示：</p><p><img src="/images/2020/09/1599216595277.png" alt="1599216595277" loading="lazy"></p><p>备注：这种方法目前只适用使用 nodeport 暴露服务的情况。</p><p><code>spec.sessionAffinity</code> 字段用于定义要使用的粘性会话的类型，它仅支持使用 “None” 和 “ ClientIP” 两种属性值。</p><p>也可以使用打补丁的方式进行修改 yaml 内的内容，如下：</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># session保持，同一ip访问同一个pod</span>kubectl patch svc myapp <span class="token operator">-</span>p <span class="token string">'{"spec":{"sessionAffinity":"ClusterIP"}}'</span>  <span class="token comment"># 取消session </span>kubectl patch svc myapp <span class="token operator">-</span>p <span class="token string">'{"spec":{"sessionAffinity":"None"}}'</span>    </code></pre><h3 id="Session-超时时间"><a href="#Session-超时时间" class="headerlink" title="Session 超时时间"></a>Session 超时时间</h3><p>Service affinity 的效果仅仅在一段时间内生效，默认值为 10800 秒，超出时长，客户端再次访问会重新调度。</p><p>该机制仅能基于客户端 IP 地址识别客户端身份，它会将经由同一个 NAT 服务器进行原地址转换的所有客户端识别为同一个客户端，由此可知，其调度的效果并不理想。</p><p>Service 资源 通过 <code>.spec.sessionAffinity</code> 和 <code>.spec.sessionAffinityConfig</code> 两个字段配置粘性会话。</p><p>如果您还想指定时间，则需要添加以下内容：</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">sessionAffinityConfig</span><span class="token punctuation">:</span>  <span class="token key atrule">clientIP</span><span class="token punctuation">:</span>    <span class="token key atrule">timeoutSeconds</span><span class="token punctuation">:</span> <span class="token number">10</span></code></pre><h3 id="Session-Affinity"><a href="#Session-Affinity" class="headerlink" title="Session Affinity"></a>Session Affinity</h3><p>会话保持 (Session Affinity), 有时又称粘滞会话 (Sticky Sessions), 是负载均衡领域设计需要着力解决的重要问题之一，也是一个相对比较复杂的问题。</p><p>会话保持是指在负载均衡器上的一种机制，在完成负载均衡任务的同时，还负责一系列相关连的访问请求会分配到一台服务器上｡</p><p>当用户向服务器发起请求，服务器创建一个 session，并把 session id 以 cookie 的形式写回给客户。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;出现问题&quot;&gt;&lt;a href=&quot;#出现问题&quot; class=&quot;headerlink&quot; title=&quot;出现问题&quot;&gt;&lt;/a&gt;出现问题&lt;/h3&gt;&lt;p&gt;通过 kubernetes 部署了 tomcat+mysql 服务，设置 tomcat 多副本时发现首页登陆无法跳转的情况，经排查是由于 session 问题引起的。&lt;/p&gt;
&lt;p&gt;kubernetes 上可以多实例（pod）高负载运行，但是如果应用如果没有做 session 同步的话，就会导致 session 不一致。&lt;br&gt;kubernetes 有 session 亲和性的功能（每个 client 每次访问，都会匹配到对应 session 的后端）。&lt;/p&gt;
    
    </summary>
    
    
      <category term="k8s" scheme="https://jueee.github.io/categories/k8s/"/>
    
    
      <category term="k8s" scheme="https://jueee.github.io/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>k8s 动态扩容 Ceph 持久卷</title>
    <link href="https://jueee.github.io/2020/09/2020-09-04-k8s%E5%8A%A8%E6%80%81%E6%89%A9%E5%AE%B9Ceph%E6%8C%81%E4%B9%85%E5%8D%B7/"/>
    <id>https://jueee.github.io/2020/09/2020-09-04-k8s%E5%8A%A8%E6%80%81%E6%89%A9%E5%AE%B9Ceph%E6%8C%81%E4%B9%85%E5%8D%B7/</id>
    <published>2020-09-04T00:00:00.000Z</published>
    <updated>2020-09-04T08:47:48.620Z</updated>
    
    <content type="html"><![CDATA[<p>主要是针对 ceph 的 rbd 创建的 pv 进行扩容操作。</p><h3 id="StorageClass-配置自动扩容"><a href="#StorageClass-配置自动扩容" class="headerlink" title="StorageClass 配置自动扩容"></a>StorageClass 配置自动扩容</h3><p>需要配置 storage class，开启允许扩容选项 <code>allowVolumeExpansion</code></p><pre class="language-none"><code class="language-none">apiVersion: storage.k8s.io/v1kind: StorageClassallowVolumeExpansion: trueprovisioner: ceph.com/rbd</code></pre><p>任何从这一 <code>StorageClass</code> 中创建的 PVC 都能够通过编辑的方式来申请更多空间。Kubernetes 会处理 Storage 字段的变更，据此申请空间，触发卷的扩容。</p><a id="more"></a><h3 id="对已创建的-PV-进行扩容"><a href="#对已创建的-PV-进行扩容" class="headerlink" title="对已创建的 PV 进行扩容"></a>对已创建的 PV 进行扩容</h3><ol><li><p><strong>查看 PV 信息</strong></p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">$ kubectl describe pv pvc<span class="token operator">-</span>3e1e651c<span class="token operator">-</span>fcce<span class="token operator">-</span>4a31<span class="token operator">-</span>8283<span class="token operator">-</span>8b5d7f4859fc <span class="token punctuation">|</span>grep Image RBDImage:      kubernetes<span class="token operator">-</span>dynamic<span class="token operator">-</span>pvc<span class="token operator">-</span>dbaa94d7<span class="token operator">-</span>ecdd<span class="token operator">-</span>11ea<span class="token operator">-</span>a4f5<span class="token operator">-</span>aedb151bd819</code></pre></li><li><p><strong>查看 rbd 镜像信息</strong></p><pre class="language-shell" data-language="shell"><code class="language-shell">$ rbd info kcha/kubernetes-dynamic-pvc-dbaa94d7-ecdd-11ea-a4f5-aedb151bd819rbd image 'kubernetes-dynamic-pvc-dbaa94d7-ecdd-11ea-a4f5-aedb151bd819':     size 30 GB in 256000 objects     order 22 (4096 kB objects)     block_name_prefix: rbd_data.b642e6b8b4567     format: 2     features: layering     flags:</code></pre></li><li><p><strong>修改 rbd 大小</strong></p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">$ rbd resize <span class="token operator">--</span>size 1024000 kcha<span class="token operator">/</span>kubernetes<span class="token operator">-</span>dynamic<span class="token operator">-</span>pvc<span class="token operator">-</span>dbaa94d7<span class="token operator">-</span>ecdd<span class="token operator">-</span>11ea<span class="token operator">-</span>a4f5<span class="token operator">-</span>aedb151bd819</code></pre></li><li><p><strong>更新 PV 大小</strong></p><pre class="language-none"><code class="language-none">$ kubectl edit pv pvc-3e1e651c-fcce-4a31-8283-8b5d7f4859fc</code></pre><p>修改其中的 <code>storage: 30Gi</code> 大小。然后 <code>kubectl get pv</code> 查看更新。</p></li><li><p><strong>更新 PVC 大小</strong></p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">$ kubectl edit pvc esdata<span class="token operator">-</span>es<span class="token operator">-</span>0</code></pre><p>修改其中的 <code>storage: 30Gi</code> 大小。然后 <code>kubectl get pvc</code> 查看更新。</p></li><li><p><strong>重启挂载该 PVC 的 Pod。</strong></p></li></ol><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;主要是针对 ceph 的 rbd 创建的 pv 进行扩容操作。&lt;/p&gt;
&lt;h3 id=&quot;StorageClass-配置自动扩容&quot;&gt;&lt;a href=&quot;#StorageClass-配置自动扩容&quot; class=&quot;headerlink&quot; title=&quot;StorageClass 配置自动扩容&quot;&gt;&lt;/a&gt;StorageClass 配置自动扩容&lt;/h3&gt;&lt;p&gt;需要配置 storage class，开启允许扩容选项 &lt;code&gt;allowVolumeExpansion&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&quot;language-none&quot;&gt;&lt;code class=&quot;language-none&quot;&gt;apiVersion: storage.k8s.io/v1
kind: StorageClass
allowVolumeExpansion: true
provisioner: ceph.com/rbd&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;任何从这一 &lt;code&gt;StorageClass&lt;/code&gt; 中创建的 PVC 都能够通过编辑的方式来申请更多空间。Kubernetes 会处理 Storage 字段的变更，据此申请空间，触发卷的扩容。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Ceph" scheme="https://jueee.github.io/categories/Ceph/"/>
    
      <category term="k8s" scheme="https://jueee.github.io/categories/k8s/"/>
    
    
      <category term="Ceph" scheme="https://jueee.github.io/tags/Ceph/"/>
    
      <category term="k8s" scheme="https://jueee.github.io/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>修改 k8s 的 nodeport 类型端口范围</title>
    <link href="https://jueee.github.io/2020/09/2020-09-04-%E4%BF%AE%E6%94%B9k8s%E7%9A%84nodeport%E7%B1%BB%E5%9E%8B%E7%AB%AF%E5%8F%A3%E8%8C%83%E5%9B%B4/"/>
    <id>https://jueee.github.io/2020/09/2020-09-04-%E4%BF%AE%E6%94%B9k8s%E7%9A%84nodeport%E7%B1%BB%E5%9E%8B%E7%AB%AF%E5%8F%A3%E8%8C%83%E5%9B%B4/</id>
    <published>2020-09-04T00:00:00.000Z</published>
    <updated>2020-09-04T08:47:48.621Z</updated>
    
    <content type="html"><![CDATA[<h3 id="出现问题"><a href="#出现问题" class="headerlink" title="出现问题"></a>出现问题</h3><p>在 Kubernetes (k8s) 创建 service 使用 nodePort 暴露 外部端口 8192 时报错：</p><blockquote><p>The Service "web-admin" is invalid: spec.ports[0].nodePort: Invalid value: 8192: provided port is not in the valid range. The range of valid ports is 30000-32767</p></blockquote><a id="more"></a><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>编辑 <code>kube-apiserver.yaml</code> 文件</p><pre class="language-none"><code class="language-none">vim /etc/kubernetes/manifests/kube-apiserver.yaml</code></pre><p>找到 <code>--service-cluster-ip-range</code> 这一行，在这一行的下一行增加 如下内容</p><pre class="language-none"><code class="language-none">- --service-node-port-range=1-65535</code></pre><p>最后修改效果如下：</p><p><img src="/images/2020/09/1599200375796.png" alt="1599200375796" loading="lazy"></p><p>最后 重启 kubelet</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">systemctl daemon<span class="token operator">-</span>reloadsystemctl restart kubelet</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;出现问题&quot;&gt;&lt;a href=&quot;#出现问题&quot; class=&quot;headerlink&quot; title=&quot;出现问题&quot;&gt;&lt;/a&gt;出现问题&lt;/h3&gt;&lt;p&gt;在 Kubernetes (k8s) 创建 service 使用 nodePort 暴露 外部端口 8192 时报错：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The Service &quot;web-admin&quot; is invalid: spec.ports[0].nodePort: Invalid value: 8192: provided port is not in the valid range. The range of valid ports is 30000-32767&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="k8s" scheme="https://jueee.github.io/categories/k8s/"/>
    
    
      <category term="k8s" scheme="https://jueee.github.io/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>k8s 动态 PV 集成 ceph 块设备存储</title>
    <link href="https://jueee.github.io/2020/09/2020-09-03-k8s%E5%8A%A8%E6%80%81PV%E9%9B%86%E6%88%90ceph%E5%9D%97%E8%AE%BE%E5%A4%87%E5%AD%98%E5%82%A8/"/>
    <id>https://jueee.github.io/2020/09/2020-09-03-k8s%E5%8A%A8%E6%80%81PV%E9%9B%86%E6%88%90ceph%E5%9D%97%E8%AE%BE%E5%A4%87%E5%AD%98%E5%82%A8/</id>
    <published>2020-09-03T00:00:00.000Z</published>
    <updated>2020-09-04T08:47:48.619Z</updated>
    
    <content type="html"><![CDATA[<h3 id="动态-PV-使用步骤"><a href="#动态-PV-使用步骤" class="headerlink" title="动态 PV 使用步骤"></a>动态 PV 使用步骤</h3><ol><li>创建存储池并启用 RBD 功能。</li><li>创建 Ceph 用户，提供给 k8s 使用。</li><li>在 k8s 上安装 ceph-common 客户端。</li><li>复制 <code>ceph.conf</code> 以及 admin 用户的 keyring 文件到 k8s 节点（master and node）。</li><li>创建 Secret 资源，以 keyring 的 key 为 data。</li><li>动态 PV 使用<ol><li>创建 StorageClass</li><li> 创建 PVC</li><li> 创建 POD</li></ol></li></ol><a id="more"></a><h3 id="安装-ceph-客户端"><a href="#安装-ceph-客户端" class="headerlink" title="安装 ceph 客户端"></a>安装 ceph 客户端</h3><p>在部署 kubernetes 之前我们就已经有了 Ceph 集群，因此我们可以直接拿来用。但是 kubernetes 的所有节点（尤其是 master 节点）上依然需要安装 ceph 客户端。</p><pre class="language-none"><code class="language-none">apt-get install -y ceph-common</code></pre><p>还需要将 ceph 的配置文件 <code>ceph.conf</code> 放在所有节点的 <code>/etc/ceph</code> 目录下。</p><h3 id="配置-Secret-资源"><a href="#配置-Secret-资源" class="headerlink" title="配置 Secret 资源"></a>配置 Secret 资源</h3><p>生成 Ceph secret</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># ceph auth get-key client.admin |base64</span>QVFBS1RobGZEVysySXhBQXBVekozNGZ0RG1OTVVhRGlWL1NCMEE9PQ==</code></pre><p>创建 <code>ceph-secret.yaml</code> 文件内容为：</p><pre class="language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Secret<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> ceph<span class="token punctuation">-</span>secret<span class="token key atrule">data</span><span class="token punctuation">:</span>  <span class="token key atrule">key</span><span class="token punctuation">:</span> QVFBS1RobGZEVysySXhBQXBVekozNGZ0RG1OTVVhRGlWL1NCMEE9PQo=</code></pre><h3 id="创建-pool"><a href="#创建-pool" class="headerlink" title="创建 pool"></a>创建 pool</h3><p>Ceph 创建 pool </p><h3 id="创建-StorageClass"><a href="#创建-StorageClass" class="headerlink" title="创建 StorageClass"></a>创建 StorageClass</h3><p>创建 <code>storage-class.yaml</code> 文件内容为：</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> storage.k8s.io/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> StorageClass<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> kchadata  <span class="token key atrule">annotations</span><span class="token punctuation">:</span>    <span class="token key atrule">storageclass.beta.kubernetes.io/is-default-class</span><span class="token punctuation">:</span> <span class="token string">"true"</span><span class="token key atrule">provisioner</span><span class="token punctuation">:</span> ceph.com/rbd<span class="token key atrule">parameters</span><span class="token punctuation">:</span>  <span class="token key atrule">monitors</span><span class="token punctuation">:</span> 172.18.32.119<span class="token punctuation">:</span><span class="token number">6789</span><span class="token punctuation">,</span>172.18.83.170<span class="token punctuation">:</span><span class="token number">6789</span>  <span class="token key atrule">adminId</span><span class="token punctuation">:</span> admin  <span class="token key atrule">adminSecretName</span><span class="token punctuation">:</span> ceph<span class="token punctuation">-</span>secret  <span class="token key atrule">adminSecretNamespace</span><span class="token punctuation">:</span> default  <span class="token key atrule">pool</span><span class="token punctuation">:</span> kcha  <span class="token key atrule">userId</span><span class="token punctuation">:</span> admin  <span class="token key atrule">userSecretName</span><span class="token punctuation">:</span> ceph<span class="token punctuation">-</span>secret  <span class="token key atrule">userSecretNamespace</span><span class="token punctuation">:</span> default  <span class="token key atrule">fsType</span><span class="token punctuation">:</span> ext4  <span class="token key atrule">imageFormat</span><span class="token punctuation">:</span> <span class="token string">"2"</span>  <span class="token key atrule">imageFeatures</span><span class="token punctuation">:</span> <span class="token string">"layering"</span><span class="token key atrule">reclaimPolicy</span><span class="token punctuation">:</span> Retain</code></pre><h3 id="创建-PVC"><a href="#创建-PVC" class="headerlink" title="创建 PVC"></a>创建 PVC</h3><p>创建 <code>pvc-zkdata.yaml</code> 文件内容为：</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> PersistentVolumeClaim<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> zkdata<span class="token punctuation">-</span>zk<span class="token punctuation">-</span><span class="token number">0</span><span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">accessModes</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> ReadWriteOnce  <span class="token key atrule">resources</span><span class="token punctuation">:</span>    <span class="token key atrule">requests</span><span class="token punctuation">:</span>      <span class="token key atrule">storage</span><span class="token punctuation">:</span> 10Gi<span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> PersistentVolumeClaim<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> zkdata<span class="token punctuation">-</span>zk<span class="token punctuation">-</span><span class="token number">1</span><span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">accessModes</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> ReadWriteOnce  <span class="token key atrule">resources</span><span class="token punctuation">:</span>    <span class="token key atrule">requests</span><span class="token punctuation">:</span>      <span class="token key atrule">storage</span><span class="token punctuation">:</span> 10Gi<span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> PersistentVolumeClaim<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> zkdata<span class="token punctuation">-</span>zk<span class="token punctuation">-</span><span class="token number">2</span><span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">accessModes</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> ReadWriteOnce  <span class="token key atrule">resources</span><span class="token punctuation">:</span>    <span class="token key atrule">requests</span><span class="token punctuation">:</span>      <span class="token key atrule">storage</span><span class="token punctuation">:</span> 10Gi</code></pre><p>查看 PVC 和 PV，可以看到 PVC 是 Bound 状态，而且 PV 已经自动创建：</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">$ kg pvcNAME          STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS   AGEzkdata<span class="token operator">-</span>zk<span class="token operator">-</span>0   Bound    pvc<span class="token operator">-</span>b5acf208<span class="token operator">-</span>86a1<span class="token operator">-</span>4eb9<span class="token operator">-</span>b5f2<span class="token operator">-</span>5f99a9621ffa   10Gi       RWO            kchadata       9m5szkdata<span class="token operator">-</span>zk<span class="token operator">-</span>1   Bound    pvc<span class="token operator">-</span>9cc38190<span class="token operator">-</span>7cd1<span class="token operator">-</span>43b9<span class="token operator">-</span>948e<span class="token operator">-</span>7addd205bbeb   10Gi       RWO            kchadata       9m5szkdata<span class="token operator">-</span>zk<span class="token operator">-</span>2   Bound    pvc<span class="token operator">-</span>33494a8b<span class="token operator">-</span>a119<span class="token operator">-</span>45a0<span class="token operator">-</span>9741<span class="token operator">-</span>f09aa31008b3   10Gi       RWO            kchadata       9m5s$ kg pvNAME                                       CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                     STORAGECLASS   REASON   AGEpvc<span class="token operator">-</span>33494a8b<span class="token operator">-</span>a119<span class="token operator">-</span>45a0<span class="token operator">-</span>9741<span class="token operator">-</span>f09aa31008b3   10Gi       RWO            Retain           Bound    manti<span class="token operator">-</span>infra<span class="token operator">/</span>zkdata<span class="token operator">-</span>zk<span class="token operator">-</span>2   kchadata                9m34spvc<span class="token operator">-</span>9cc38190<span class="token operator">-</span>7cd1<span class="token operator">-</span>43b9<span class="token operator">-</span>948e<span class="token operator">-</span>7addd205bbeb   10Gi       RWO            Retain           Bound    manti<span class="token operator">-</span>infra<span class="token operator">/</span>zkdata<span class="token operator">-</span>zk<span class="token operator">-</span>1   kchadata                9m34spvc<span class="token operator">-</span>b5acf208<span class="token operator">-</span>86a1<span class="token operator">-</span>4eb9<span class="token operator">-</span>b5f2<span class="token operator">-</span>5f99a9621ffa   10Gi       RWO            Retain           Bound    manti<span class="token operator">-</span>infra<span class="token operator">/</span>zkdata<span class="token operator">-</span>zk<span class="token operator">-</span>0   kchadata                9m34s</code></pre><h3 id="创建POD"><a href="#创建POD" class="headerlink" title="创建POD"></a>创建 POD</h3><p>省略</p><h3 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h3><h4 id="Failed-to-provision-volume"><a href="#Failed-to-provision-volume" class="headerlink" title="Failed to provision volume"></a>Failed to provision volume</h4><pre class="language-none"><code class="language-none">$ k describe pvc zkdata-zk-0Failed to provision volume with StorageClass "kchadata": failed to create rbd image: executable file not found in $PATH, command output:</code></pre><p>需要安装 ceph-common 工具插件来操作 Ceph，上边报错应该就是找不到该插件导致的。</p><p><strong>方案一</strong>：添加 ceph-common 到 hyperkube image 中，构建一个新的安装了 ceph-common 的同名镜像 hyperkube-amd64 替换官方镜像</p><pre class="language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">$ vim DockerfileFROM gcr.io/google_containers/hyperkube-amd64:v1.2.1RUN curl https://raw.githubusercontent.com/ceph/ceph/master/keys/release.asc | apt-key add - &amp;&amp; \    echo deb http://download.ceph.com/debian-hammer/ jessie main | tee /etc/apt/sources.list.d/ceph.list &amp;&amp; \    apt-get update &amp;&amp; \    DEBIAN_FRONTEND=noninteractive apt-get install -q -y ceph-common &amp;&amp; \    apt-get clean &amp;&amp; rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*$ docker build -t custom/hyperkube-amd64:v1.2.1 .    </code></pre><p><strong>方案二：</strong>使用 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2t1YmVybmV0ZXMtaW5jdWJhdG9yL2V4dGVybmFsLXN0b3JhZ2U=">扩展存储卷插件<i class="fa fa-external-link-alt"></i></span> 来帮我们完成这一步。</p><pre class="language-none"><code class="language-none">$ git clone https://github.com/kubernetes-incubator/external-storage.git$ tree external-storage/ceph/rbd/deploy/├── README.md├── non-rbac│   └── deployment.yaml└── rbac    ├── clusterrole.yaml    ├── clusterrolebinding.yaml    ├── deployment.yaml    └── serviceaccount.yaml</code></pre><p>这里提供 rbac 和 no-rbac 两种方式，如果搭建 k8s 集群时开启了 rbac 认证的，需要采用 rbac 方式来创建该 deployment。</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">NAMESPACE=default <span class="token comment"># change this if you want to deploy it in another namespace</span>sed <span class="token operator">-</span>r <span class="token operator">-</span>i <span class="token string">"s/namespace: [^ ]+/namespace: <span class="token variable">$NAMESPACE</span>/g"</span> <span class="token punctuation">.</span><span class="token operator">/</span>rbac<span class="token operator">/</span>clusterrolebinding<span class="token punctuation">.</span>yaml <span class="token punctuation">.</span><span class="token operator">/</span>rbac<span class="token operator">/</span>rolebinding<span class="token punctuation">.</span>yamlkubectl <span class="token operator">-</span>n <span class="token variable">$NAMESPACE</span> apply <span class="token operator">-</span>f <span class="token punctuation">.</span><span class="token operator">/</span>rbac</code></pre><p>然后修改 <code>storage-class.yaml</code> 文件，将 <code>provisioner: kubernetes.io/rbd</code> 修改为 <code>provisioner: ceph.com/rbd</code>，意思就是不使用 k8s 内部提供的 rbd 存储类型，而是使用我们刚创建的扩展 rbd 存储。</p><p>参考：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2t1YmVybmV0ZXMva3ViZXJuZXRlcy9pc3N1ZXMvMzg5MjM=">https://github.com/kubernetes/kubernetes/issues/38923<i class="fa fa-external-link-alt"></i></span></p><h4 id="master节点不能部署"><a href="#master节点不能部署" class="headerlink" title="master节点不能部署"></a>master 节点不能部署</h4><pre class="language-none"><code class="language-none">0/3 nodes are available: 1 node(s) had taint {node-role.kubernetes.io/master: }, that the pod didn't tolerate, 2 node(s) didn't match pod affinity/anti-affinity, 2 node(s) didn't satisfy existing pods anti-affinity rules.</code></pre><p>解决：</p><pre class="language-none"><code class="language-none">kubectl taint nodes --all node-role.kubernetes.io/master-</code></pre><p>重新加入污点：</p><pre class="language-none"><code class="language-none">kubectl taint nodes master-hostname node-role.kubernetes.io/master=true:NoSchedule</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;动态-PV-使用步骤&quot;&gt;&lt;a href=&quot;#动态-PV-使用步骤&quot; class=&quot;headerlink&quot; title=&quot;动态 PV 使用步骤&quot;&gt;&lt;/a&gt;动态 PV 使用步骤&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;创建存储池并启用 RBD 功能。&lt;/li&gt;
&lt;li&gt;创建 Ceph 用户，提供给 k8s 使用。&lt;/li&gt;
&lt;li&gt;在 k8s 上安装 ceph-common 客户端。&lt;/li&gt;
&lt;li&gt;复制 &lt;code&gt;ceph.conf&lt;/code&gt; 以及 admin 用户的 keyring 文件到 k8s 节点（master and node）。&lt;/li&gt;
&lt;li&gt;创建 Secret 资源，以 keyring 的 key 为 data。&lt;/li&gt;
&lt;li&gt;动态 PV 使用&lt;ol&gt;
&lt;li&gt;创建 StorageClass&lt;/li&gt;
&lt;li&gt; 创建 PVC&lt;/li&gt;
&lt;li&gt; 创建 POD&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="Ceph" scheme="https://jueee.github.io/categories/Ceph/"/>
    
      <category term="k8s" scheme="https://jueee.github.io/categories/k8s/"/>
    
    
      <category term="Ceph" scheme="https://jueee.github.io/tags/Ceph/"/>
    
      <category term="k8s" scheme="https://jueee.github.io/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>k8s 静态 PV 集成 ceph 块设备存储</title>
    <link href="https://jueee.github.io/2020/09/2020-09-02-k8s%E9%9D%99%E6%80%81PV%E9%9B%86%E6%88%90ceph%E5%9D%97%E8%AE%BE%E5%A4%87%E5%AD%98%E5%82%A8/"/>
    <id>https://jueee.github.io/2020/09/2020-09-02-k8s%E9%9D%99%E6%80%81PV%E9%9B%86%E6%88%90ceph%E5%9D%97%E8%AE%BE%E5%A4%87%E5%AD%98%E5%82%A8/</id>
    <published>2020-09-02T00:00:00.000Z</published>
    <updated>2020-09-04T08:47:48.617Z</updated>
    
    <content type="html"><![CDATA[<h3 id="静态-PV-使用步骤"><a href="#静态-PV-使用步骤" class="headerlink" title="静态 PV 使用步骤"></a>静态 PV 使用步骤</h3><ol><li>创建存储池并启用 RBD 功能。</li><li>创建 Ceph 用户，提供给 k8s 使用。</li><li>在 k8s 上安装 ceph-common 客户端。</li><li>复制 <code>ceph.conf</code> 以及 admin 用户的 keyring 文件到 k8s 节点（master and node）。</li><li>创建 Secret 资源，以 keyring 的 key 为 data。</li><li>静态 PV 使用：<ol><li>创建 PV</li><li> 创建 PVC</li><li> 在 Ceph 存储池里创建对应的 RBDImage</li><li> 创建 POD</li></ol></li></ol><a id="more"></a><h3 id="安装-ceph-客户端"><a href="#安装-ceph-客户端" class="headerlink" title="安装 ceph 客户端"></a>安装 ceph 客户端</h3><p>在部署 kubernetes 之前我们就已经有了 Ceph 集群，因此我们可以直接拿来用。但是 kubernetes 的所有节点（尤其是 master 节点）上依然需要安装 ceph 客户端。</p><pre class="language-none"><code class="language-none">apt-get install -y ceph-common</code></pre><p>还需要将 ceph 的配置文件 <code>ceph.conf</code> 放在所有节点的 <code>/etc/ceph</code> 目录下。</p><h3 id="配置-Secret-资源"><a href="#配置-Secret-资源" class="headerlink" title="配置 Secret 资源"></a>配置 Secret 资源</h3><p>生成 Ceph secret</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># ceph auth get-key client.admin |base64</span>QVFBS1RobGZEVysySXhBQXBVekozNGZ0RG1OTVVhRGlWL1NCMEE9PQ==</code></pre><p>创建 <code>ceph-secret.yaml</code> 文件内容为：</p><pre class="language-yml" data-language="yml"><code class="language-yml">apiVersion: v1kind: Secretmetadata:  name: ceph-secretdata:  key: QVFBS1RobGZEVysySXhBQXBVekozNGZ0RG1OTVVhRGlWL1NCMEE9PQ==</code></pre><h3 id="创建块存储"><a href="#创建块存储" class="headerlink" title="创建块存储"></a>创建块存储</h3><p>创建 pool kcha</p><p>创建 rbd</p><pre class="language-shell" data-language="shell"><code class="language-shell">$ rbd create --size 102400 kcha/mysqldata</code></pre><p>移除 features</p><pre class="language-shell" data-language="shell"><code class="language-shell">$ rbd feature disable kcha/mysqldata exclusive-lock, object-map, fast-diff, deep-flatten</code></pre><h3 id="查看-mon"><a href="#查看-mon" class="headerlink" title="查看 mon"></a>查看 mon</h3><p>查看 mon 状态：</p><pre class="language-none"><code class="language-none"># ceph mon state2: 2 mons at {a=[v2:172.18.32.119:3300/0,v1:172.18.32.119:6789/0],b=[v2:172.18.83.170:3300/0,v1:172.18.83.170:6789/0]}, election epoch 16, leader 0 a, quorum 0,1 a,b</code></pre><h3 id="创建-PV"><a href="#创建-PV" class="headerlink" title="创建 PV"></a>创建 PV</h3><p>创建 <code>pv-mysql.yaml</code> 文件内容为：</p><pre class="language-yml" data-language="yml"><code class="language-yml">apiVersion: v1kind: PersistentVolumemetadata:  name: mysqldata  namespace: manti-infraspec:  capacity:    storage: 10Gi  accessModes:    - ReadWriteOnce  rbd:    monitors:    - 172.18.32.119:6789    - 172.18.83.170:6789    pool: kcha    image: mysqldata    user: admin    secretRef:      name: ceph-secret      namespace: default    fsType: ext4    readOnly: false  persistentVolumeReclaimPolicy: Recycle  storageClassName: mysqldata</code></pre><h3 id="创建-PVC"><a href="#创建-PVC" class="headerlink" title="创建 PVC"></a>创建 PVC</h3><p>创建 <code>pvc-mysql.yaml</code> 文件内容为：</p><pre class="language-yml" data-language="yml"><code class="language-yml">apiVersion: v1kind: PersistentVolumeClaimmetadata:  name: mysqldata  namespace: manti-infraspec:  accessModes:    - ReadWriteOnce  resources:    requests:      storage: 10Gi  storageClassName: mysqldata</code></pre><h3 id="创建-pod"><a href="#创建-pod" class="headerlink" title="创建 pod"></a>创建 pod</h3><pre class="language-yml" data-language="yml"><code class="language-yml">apiVersion: apps/v1kind: Deploymentmetadata:    name: mysql    namespace: manti-infraspec:    replicas: 1    selector:        matchLabels:            app: mysql    template:        metadata:            labels:                app: mysql        spec:            imagePullSecrets:              - name: harborsecret            containers:              - name: mysql                image: mysql:v1.0.6                imagePullPolicy: IfNotPresent                ports:                  - containerPort: 3306                env:                  - name: MYSQL_ROOT_PASSWORD                    value: 123456                volumeMounts:                  - name: mysqldata                    subPath: mysql                    mountPath: /var/lib/mysql            volumes:              - name: mysqldata                persistentVolumeClaim:                    claimName: mysqldata            initContainers:              - name: increase-fd-ulimit                image: busybox                command: ["sh", "-c", "ulimit -n 65536"]                securityContext:                    privileged: true</code></pre><h3 id="验证服务"><a href="#验证服务" class="headerlink" title="验证服务"></a>验证服务</h3><pre class="language-powershell" data-language="powershell"><code class="language-powershell">$ kg pod <span class="token operator">-</span>o wideNAME                     READY   STATUS    RESTARTS   AGE   IP              mysql<span class="token operator">-</span>544c557fdb<span class="token operator">-</span>nrp92   1<span class="token operator">/</span>1     Running   0          25m   192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>74<span class="token punctuation">.</span>76   $ mysql <span class="token operator">-</span>h192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>74<span class="token punctuation">.</span>76 <span class="token operator">-</span>P3306 <span class="token operator">-</span>uroot <span class="token operator">-</span>p123456</code></pre><h3 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h3><h4 id="rbd-feature-disable"><a href="#rbd-feature-disable" class="headerlink" title="rbd feature disable"></a>rbd feature disable</h4><pre class="language-none"><code class="language-none">RBD image feature set mismatch. You can disable features unsupported by the kernel with "rbd feature disable".In some cases useful info is found in syslog - try "dmesg | tail" or so.rbd: map failed: (6) No such device or address</code></pre><p>移除 features</p><pre class="language-shell" data-language="shell"><code class="language-shell">$ rbd feature disable kcha/mysqldata exclusive-lock, object-map, fast-diff, deep-flatten</code></pre><h4 id="data-directory-has-files"><a href="#data-directory-has-files" class="headerlink" title="data directory has files"></a>data directory has files</h4><p>部署后日志报错：</p><pre class="language-shell" data-language="shell"><code class="language-shell">$ k logs mysql-66946b4c48-7dngnInitializing database2020-09-01T10:34:38.008752-00:00 0 [ERROR] --initialize specified but the data directory has files in it. Aborting.2020-09-01T10:34:38.008819-00:00 0 [ERROR] Aborting</code></pre><p>参考资料：</p><ul><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2RvY2tlci1saWJyYXJ5L215c3FsL2lzc3Vlcy8xODY=">https://github.com/docker-library/mysql/issues/186<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9kZXYubXlzcWwuY29tL2RvYy9yZWZtYW4vNS43L2VuL3NlcnZlci1vcHRpb25zLmh0bWwjb3B0aW9uX215c3FsZF9pZ25vcmUtZGItZGly">https://dev.mysql.com/doc/refman/5.7/en/server-options.html#option_mysqld_ignore-db-dir<i class="fa fa-external-link-alt"></i></span></li></ul><p>原因：</p><p>一个新的 ext4 磁盘分区通常不为空。有一个 <code>lost+found</code> 目录，已知 mysql 会阻塞该目录。您可以尝试添加 <code>--ignore-db-dir=lost+found</code> 到，<code>CMD</code> 以确保确定。</p><p>解决方案：</p><ol><li><p>增加启动参数：</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">name</span><span class="token punctuation">:</span> mysql<span class="token punctuation">-</span>master<span class="token key atrule">image</span><span class="token punctuation">:</span> mysql<span class="token punctuation">:</span><span class="token number">5.7</span><span class="token key atrule">args</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token string">"--ignore-db-dir=lost+found"</span></code></pre></li><li><p>增加子目录</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> mysqldata <span class="token key atrule">subPath</span><span class="token punctuation">:</span> mysql <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /var/lib/mysql</code></pre></li></ol><h3 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h3><ul><li><span class="exturl" data-url="aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL3poL2RvY3MvY29uY2VwdHMvc3RvcmFnZS9zdG9yYWdlLWNsYXNzZXMvI2NlcGgtcmJk">https://kubernetes.io/zh/docs/concepts/storage/storage-classes/#ceph-rbd<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL2RvY3MvY29uY2VwdHMvc3RvcmFnZS9zdG9yYWdlLWNsYXNzZXMv">https://kubernetes.io/docs/concepts/storage/storage-classes/<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9qaW1teXNvbmcuaW8va3ViZXJuZXRlcy1oYW5kYm9vay9wcmFjdGljZS91c2luZy1jZXBoLWZvci1wZXJzaXN0ZW50LXN0b3JhZ2UuaHRtbA==">https://jimmysong.io/kubernetes-handbook/practice/using-ceph-for-persistent-storage.html<i class="fa fa-external-link-alt"></i></span></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;静态-PV-使用步骤&quot;&gt;&lt;a href=&quot;#静态-PV-使用步骤&quot; class=&quot;headerlink&quot; title=&quot;静态 PV 使用步骤&quot;&gt;&lt;/a&gt;静态 PV 使用步骤&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;创建存储池并启用 RBD 功能。&lt;/li&gt;
&lt;li&gt;创建 Ceph 用户，提供给 k8s 使用。&lt;/li&gt;
&lt;li&gt;在 k8s 上安装 ceph-common 客户端。&lt;/li&gt;
&lt;li&gt;复制 &lt;code&gt;ceph.conf&lt;/code&gt; 以及 admin 用户的 keyring 文件到 k8s 节点（master and node）。&lt;/li&gt;
&lt;li&gt;创建 Secret 资源，以 keyring 的 key 为 data。&lt;/li&gt;
&lt;li&gt;静态 PV 使用：&lt;ol&gt;
&lt;li&gt;创建 PV&lt;/li&gt;
&lt;li&gt; 创建 PVC&lt;/li&gt;
&lt;li&gt; 在 Ceph 存储池里创建对应的 RBDImage&lt;/li&gt;
&lt;li&gt; 创建 POD&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="Ceph" scheme="https://jueee.github.io/categories/Ceph/"/>
    
      <category term="k8s" scheme="https://jueee.github.io/categories/k8s/"/>
    
    
      <category term="Ceph" scheme="https://jueee.github.io/tags/Ceph/"/>
    
      <category term="k8s" scheme="https://jueee.github.io/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>Arthas 之使用 profiler 做复杂链路分析</title>
    <link href="https://jueee.github.io/2020/09/2020-09-02-Arthas%E4%B9%8B%E4%BD%BF%E7%94%A8profiler%E5%81%9A%E5%A4%8D%E6%9D%82%E9%93%BE%E8%B7%AF%E5%88%86%E6%9E%90/"/>
    <id>https://jueee.github.io/2020/09/2020-09-02-Arthas%E4%B9%8B%E4%BD%BF%E7%94%A8profiler%E5%81%9A%E5%A4%8D%E6%9D%82%E9%93%BE%E8%B7%AF%E5%88%86%E6%9E%90/</id>
    <published>2020-09-02T00:00:00.000Z</published>
    <updated>2020-09-03T01:53:06.006Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Arthas-的-profiler-命令"><a href="#Arthas-的-profiler-命令" class="headerlink" title="Arthas 的 profiler 命令"></a>Arthas 的 profiler 命令</h3><h4 id="命令说明"><a href="#命令说明" class="headerlink" title="命令说明"></a>命令说明</h4><p><code>profiler</code> 命令支持生成应用热点的火焰图。本质上是通过不断的采样，然后把收集到的采样结果生成火焰图。</p><blockquote><p>文档：<span class="exturl" data-url="aHR0cHM6Ly9hcnRoYXMuYWxpeXVuLmNvbS9kb2MvcHJvZmlsZXIuaHRtbA==">https://arthas.aliyun.com/doc/profiler.html<i class="fa fa-external-link-alt"></i></span></p></blockquote><p><code>profiler</code> 命令的实现依赖于开源 <code>async-profiler</code>：</p><blockquote><p>GitHub：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2p2bS1wcm9maWxpbmctdG9vbHMvYXN5bmMtcHJvZmlsZXI=">https://github.com/jvm-profiling-tools/async-profiler<i class="fa fa-external-link-alt"></i></span></p></blockquote><a id="more"></a><h4 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h4><table><thead><tr><th>参数名称</th><th>参数说明</th></tr></thead><tbody><tr><td><em> action</em></td><td> 要执行的操作</td></tr><tr><td><em> actionArg</em></td><td> 属性名模式</td></tr><tr><td> [i:]</td><td> 采样间隔（单位：ns）（默认值：10'000'000，即 10 ms）</td></tr><tr><td>[f:]</td><td> 将输出转储到指定路径</td></tr><tr><td> [d:]</td><td> 运行评测指定秒</td></tr><tr><td> [e:]</td><td> 要跟踪哪个事件（cpu, alloc, lock, cache-misses 等），默认是 cpu</td></tr></tbody></table><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><p><code>profiler</code> 命令的使用，有以下注意事项：</p><ol><li><p>Windows 系统不支持 profiler 命令，只有  Linux/Mac 支持。</p><blockquote><p>Current OS do not support AsyncProfiler, Only support Linux/Mac.</p></blockquote></li><li><p><code>$ /lib/x86_64-linux-gnu/libc.so.6 --version</code> 版本大于 2.14</p><blockquote><p>/lib/x86_64-linux-gnu/libc.so.6: version `GLIBC_2.14' not found</p></blockquote></li></ol><h3 id="使用-profiler-命令"><a href="#使用-profiler-命令" class="headerlink" title="使用 profiler 命令"></a>使用 profiler 命令</h3><h4 id="启动profiler"><a href="#启动profiler" class="headerlink" title="启动profiler"></a>启动 profiler</h4><pre class="language-powershell" data-language="powershell"><code class="language-powershell">$ profiler <span class="token function">start</span>Started <span class="token namespace">[cpu]</span> profiling</code></pre><blockquote><p>默认情况下，生成的是 cpu 的火焰图，即 event 为 <code>cpu</code>。可以用 <code>--event</code> 参数来指定。</p></blockquote><h4 id="获取数量"><a href="#获取数量" class="headerlink" title="获取数量"></a>获取数量</h4><p>获取已采集的 sample 的数量</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">$ profiler getSamples23</code></pre><h4 id="查看状态"><a href="#查看状态" class="headerlink" title="查看状态"></a>查看状态</h4><pre class="language-powershell" data-language="powershell"><code class="language-powershell">$ profiler status<span class="token namespace">[cpu]</span> profiling is running <span class="token keyword">for</span> 4 seconds</code></pre><p>可以查看当前 profiler 在采样哪种 <code>event</code> 和采样时间。</p><h4 id="停止profiler"><a href="#停止profiler" class="headerlink" title="停止profiler"></a>停止 profiler</h4><p>默认生成 svg 格式结果</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">$ profiler stopprofiler output file: <span class="token operator">/</span>tmp<span class="token operator">/</span>demo<span class="token operator">/</span>arthas<span class="token operator">-</span>output<span class="token operator">/</span>20191125<span class="token operator">-</span>135546<span class="token punctuation">.</span>svgOK</code></pre><p>默认情况下，生成的结果保存到应用的<code>工作目录</code>下的 <code>arthas-output</code> 目录。可以通过 <code>--file</code> 参数来指定输出结果路径。比如：</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">$ profiler stop <span class="token operator">--</span>file <span class="token operator">/</span>tmp<span class="token operator">/</span>output<span class="token punctuation">.</span>svgprofiler output file: <span class="token operator">/</span>tmp<span class="token operator">/</span>output<span class="token punctuation">.</span>svgOK</code></pre><h4 id="生成html格式"><a href="#生成html格式" class="headerlink" title="生成html格式"></a>生成 html 格式</h4><p>默认情况下，结果文件是 <code>svg</code> 格式，如果想生成 <code>html</code> 格式，可以用 <code>--format</code> 参数指定：</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">$ profiler stop <span class="token operator">--</span>format htmlprofiler output file: <span class="token operator">/</span>tmp<span class="token operator">/</span>test<span class="token operator">/</span>arthas<span class="token operator">-</span>output<span class="token operator">/</span>20191125<span class="token operator">-</span>143329<span class="token punctuation">.</span>htmlOK</code></pre><p>或者在 <code>--file</code> 参数里用文件名指名格式。比如 <code>--file /tmp/result.html</code> 。</p><h3 id="做复杂链路分析"><a href="#做复杂链路分析" class="headerlink" title="做复杂链路分析"></a>做复杂链路分析</h3><h4 id="采样生成jfr文件"><a href="#采样生成jfr文件" class="headerlink" title="采样生成jfr文件"></a>采样生成 jfr 文件</h4><p>启动 arthas 之后，执行以下采样命令：</p><pre class="language-none"><code class="language-none">profiler start -f /home/admin/yourAppName/target/arthas-output/%t.jfr -d 180</code></pre><p>% t 表示当前时间，-d 后面是采样秒数。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Arthas-的-profiler-命令&quot;&gt;&lt;a href=&quot;#Arthas-的-profiler-命令&quot; class=&quot;headerlink&quot; title=&quot;Arthas 的 profiler 命令&quot;&gt;&lt;/a&gt;Arthas 的 profiler 命令&lt;/h3&gt;&lt;h4 id=&quot;命令说明&quot;&gt;&lt;a href=&quot;#命令说明&quot; class=&quot;headerlink&quot; title=&quot;命令说明&quot;&gt;&lt;/a&gt;命令说明&lt;/h4&gt;&lt;p&gt;&lt;code&gt;profiler&lt;/code&gt; 命令支持生成应用热点的火焰图。本质上是通过不断的采样，然后把收集到的采样结果生成火焰图。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;文档：&lt;a href=&quot;https://arthas.aliyun.com/doc/profiler.html&quot;&gt;https://arthas.aliyun.com/doc/profiler.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;profiler&lt;/code&gt; 命令的实现依赖于开源 &lt;code&gt;async-profiler&lt;/code&gt;：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;GitHub：&lt;a href=&quot;https://github.com/jvm-profiling-tools/async-profiler&quot;&gt;https://github.com/jvm-profiling-tools/async-profiler&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://jueee.github.io/categories/Java/"/>
    
      <category term="Arthas" scheme="https://jueee.github.io/categories/Java/Arthas/"/>
    
    
      <category term="Java" scheme="https://jueee.github.io/tags/Java/"/>
    
      <category term="Java诊断" scheme="https://jueee.github.io/tags/Java%E8%AF%8A%E6%96%AD/"/>
    
      <category term="Arthas" scheme="https://jueee.github.io/tags/Arthas/"/>
    
  </entry>
  
  <entry>
    <title>Ceph 块设备 rbd 相关学习</title>
    <link href="https://jueee.github.io/2020/09/2020-09-01-Ceph%E5%9D%97%E8%AE%BE%E5%A4%87rbd%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/"/>
    <id>https://jueee.github.io/2020/09/2020-09-01-Ceph%E5%9D%97%E8%AE%BE%E5%A4%87rbd%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/</id>
    <published>2020-09-01T00:00:00.000Z</published>
    <updated>2020-09-04T02:58:30.955Z</updated>
    
    <content type="html"><![CDATA[<h3 id="块设备相关文档"><a href="#块设备相关文档" class="headerlink" title="块设备相关文档"></a>块设备相关文档</h3><p><span class="exturl" data-url="aHR0cDovL2RvY3MuY2VwaC5vcmcuY24vcmJkL3JiZC8=">http://docs.ceph.org.cn/rbd/rbd/<i class="fa fa-external-link-alt"></i></span></p><h3 id="rbd-命令"><a href="#rbd-命令" class="headerlink" title="rbd 命令"></a>rbd 命令</h3><p>创建 rbd</p><pre class="language-shell" data-language="shell"><code class="language-shell">$ rbd create --size 10240 kcha/mysqldata</code></pre><p>查看 rbd</p><pre class="language-shell" data-language="shell"><code class="language-shell">$ rbd list kchamysqldata</code></pre><p>调整块设备映像大小：</p><pre class="language-shell" data-language="shell"><code class="language-shell">$ rbd resize --size 10240 kcha/mysqldataResizing image: 100% complete...done.</code></pre><p>查看信息：</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">$ rbd info kcha<span class="token operator">/</span>mysqldatarbd image <span class="token string">'mysqldata'</span>:        size 10240 MB in 2560 objects        order 22 <span class="token punctuation">(</span>4096 kB objects<span class="token punctuation">)</span>        block_name_prefix: rbd_data<span class="token punctuation">.</span>b21066b8b4567        format: 2        features: layering<span class="token punctuation">,</span> exclusive<span class="token operator">-</span>lock<span class="token punctuation">,</span> object<span class="token operator">-</span>map<span class="token punctuation">,</span> fast<span class="token operator">-</span><span class="token function">diff</span><span class="token punctuation">,</span> deep<span class="token operator">-</span>flatten        flags:</code></pre><p>移除 features</p><pre class="language-shell" data-language="shell"><code class="language-shell">$ rbd feature disable kcha/mysqldata exclusive-lock, object-map, fast-diff, deep-flatten</code></pre><h4 id="rbd-占用"><a href="#rbd-占用" class="headerlink" title="rbd 占用"></a>rbd 占用</h4><p>查看 rbd 实际占用：</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">$ rbd <span class="token function">diff</span> kcha<span class="token operator">/</span>mysqldata <span class="token punctuation">|</span> awk <span class="token string">'{ SUM += $2 } END { print SUM/1024/1024 " MB" }'</span>860<span class="token punctuation">.</span>449 MB$ rbd <span class="token function">diff</span> kcha<span class="token operator">/</span>mysqldata <span class="token punctuation">|</span> awk <span class="token string">'{ SUM += $2 } END { print SUM/1024/1024/1024 " GB" }'</span>0<span class="token punctuation">.</span>840282 GB</code></pre><h4 id="删除-rbd"><a href="#删除-rbd" class="headerlink" title="删除 rbd"></a>删除 rbd</h4><p>直接删除：</p><pre class="language-shell" data-language="shell"><code class="language-shell">$ rbd rm kcha/mysqldataRemoving image: 100% complete...done.</code></pre><p>若 rbd 被占用，则需要先将占用加入黑名单，后再删除。</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 加入黑名单</span>$ ceph osd blacklist add 10<span class="token punctuation">.</span>105<span class="token punctuation">.</span>136<span class="token punctuation">.</span>63:0<span class="token operator">/</span>1081512968blacklisting 10<span class="token punctuation">.</span>105<span class="token punctuation">.</span>136<span class="token punctuation">.</span>63:0<span class="token operator">/</span>1081512968 <span class="token keyword">until</span> 2020<span class="token operator">-</span>09<span class="token operator">-</span>01T10:46:28<span class="token punctuation">.</span>920245<span class="token operator">+</span>0000 <span class="token punctuation">(</span>3600 sec<span class="token punctuation">)</span><span class="token comment"># 删除</span>$ rbd <span class="token function">rm</span> kcha<span class="token operator">/</span>mysqldataRemoving image: 100<span class="token operator">%</span> complete<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>done<span class="token punctuation">.</span><span class="token comment"># 查看黑名单</span>$ ceph osd blacklist <span class="token function">ls</span>listed 1 entries10<span class="token punctuation">.</span>105<span class="token punctuation">.</span>136<span class="token punctuation">.</span>63:0<span class="token operator">/</span>1081512968 2020<span class="token operator">-</span>09<span class="token operator">-</span>01T10:46:28<span class="token punctuation">.</span>920245<span class="token operator">+</span>0000<span class="token comment"># 移除黑名单</span>$ ceph osd blacklist <span class="token function">rm</span> 10<span class="token punctuation">.</span>105<span class="token punctuation">.</span>136<span class="token punctuation">.</span>63:0<span class="token operator">/</span>1081512968un<span class="token operator">-</span>blacklisting 10<span class="token punctuation">.</span>105<span class="token punctuation">.</span>136<span class="token punctuation">.</span>63:0<span class="token operator">/</span>1081512968</code></pre><h4 id="导入导出"><a href="#导入导出" class="headerlink" title="导入导出"></a>导入导出</h4><pre class="language-none"><code class="language-none">$ rbd export kcha/mysqldata ~/mysqldataExporting image: 100% complete...done.</code></pre><pre class="language-none"><code class="language-none">$ rbd import ~/mysqldata  mantidata/mysqldata --image-format 2Importing image: 100% complete...done.</code></pre><h3 id="RBD特性解析"><a href="#RBD特性解析" class="headerlink" title="RBD特性解析"></a>RBD 特性解析</h3><h4 id="特性一览表"><a href="#特性一览表" class="headerlink" title="特性一览表"></a>特性一览表</h4><p>RBD 支持的特性，及具体 BIT 值的计算如下</p><table><thead><tr><th>属性</th><th>功能</th><th> BIT 码</th></tr></thead><tbody><tr><td> layering</td><td> 支持分层</td><td> 1</td></tr><tr><td>striping</td><td> 支持条带化 v2</td><td>2</td></tr><tr><td>exclusive-lock</td><td> 支持独占锁</td><td> 4</td></tr><tr><td>object-map</td><td> 支持对象映射（依赖 exclusive-lock ）</td><td>8</td></tr><tr><td>fast-diff</td><td> 快速计算差异（依赖 object-map ）</td><td>16</td></tr><tr><td>deep-flatten</td><td> 支持快照扁平化操作</td><td> 32</td></tr><tr><td>journaling</td><td> 支持记录 IO 操作（依赖独占锁）</td><td>64</td></tr></tbody></table><h4 id="默认属性值"><a href="#默认属性值" class="headerlink" title="默认属性值"></a>默认属性值</h4><p>ceph kraken 版本默认属性值</p><pre class="language-none"><code class="language-none"># ceph --show-config|grep rbd|grep featuresrbd_default_features = 61</code></pre><p>为啥是 61？我们创建一个默认配置的 rbd 看看</p><pre class="language-none"><code class="language-none"># rbd create test-feature --size 64# rbd info rbd/test-featurerbd image 'test-feature':    size 65536 kB in 16 objects    order 22 (4096 kB objects)    block_name_prefix: rbd_data.107d238e1f29    format: 2    features: layering, exclusive-lock, object-map, fast-diff, deep-flatten    flags:</code></pre><p><strong>1+4+8+16+32 = 61</strong></p><p>就是说除了特性：striping 和 journaling 外都开启了。</p><h4 id="控制属性"><a href="#控制属性" class="headerlink" title="控制属性"></a>控制属性</h4><p>有三种方法来开启需要的特性</p><p>1、在创建 image 时，通过 <code>--image-feature</code> 来指定需要开启的特性</p><p>2、对已存在的 image 可以通过如下命令开启和关闭</p><pre class="language-none"><code class="language-none">rbd feature enable &lt;pool-name&gt;/&lt;image-name&gt; &lt;feature-name&gt;rbd feature disable &lt;pool-name&gt;/&lt;image-name&gt; &lt;feature-name&gt;</code></pre><p>3、当然，每次通过 enable 和 disable 来不是很便捷，可以通过修改配置文件来解决</p><pre class="language-none"><code class="language-none">vim /etc/ceph/ceph.conf...rbd_default_features = 1...</code></pre><p>具体该设为多少可以通过上面 BIT 值查表计算得出。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;块设备相关文档&quot;&gt;&lt;a href=&quot;#块设备相关文档&quot; class=&quot;headerlink&quot; title=&quot;块设备相关文档&quot;&gt;&lt;/a&gt;块设备相关文档&lt;/h3&gt;&lt;p&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cDovL2RvY3MuY2V
      
    
    </summary>
    
    
      <category term="Ceph" scheme="https://jueee.github.io/categories/Ceph/"/>
    
    
      <category term="Ceph" scheme="https://jueee.github.io/tags/Ceph/"/>
    
  </entry>
  
  <entry>
    <title>Arthas 之查看类加载信息的相关命令</title>
    <link href="https://jueee.github.io/2020/09/2020-09-01-Arthas%E4%B9%8B%E6%9F%A5%E7%9C%8B%E7%B1%BB%E5%8A%A0%E8%BD%BD%E4%BF%A1%E6%81%AF%E7%9A%84%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/"/>
    <id>https://jueee.github.io/2020/09/2020-09-01-Arthas%E4%B9%8B%E6%9F%A5%E7%9C%8B%E7%B1%BB%E5%8A%A0%E8%BD%BD%E4%BF%A1%E6%81%AF%E7%9A%84%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/</id>
    <published>2020-09-01T00:00:00.000Z</published>
    <updated>2020-09-01T02:51:19.866Z</updated>
    
    <content type="html"><![CDATA[<p>通过 Arthas 中的 trace/monitor/watch/stack/tt 等命令，可以查看方法内部调用信息，从而定位定位方法调用问题。</p><h3 id="sc（已加载的类信息）"><a href="#sc（已加载的类信息）" class="headerlink" title="sc（已加载的类信息）"></a>sc（已加载的类信息）</h3><h4 id="方法介绍"><a href="#方法介绍" class="headerlink" title="方法介绍"></a>方法介绍</h4><p>“Search-Class” 的简写，这个命令能搜索出所有已经加载到 JVM 中的 Class 信息。</p><p>官方文档：</p><blockquote><p><span class="exturl" data-url="aHR0cHM6Ly9hcnRoYXMuYWxpeXVuLmNvbS9kb2Mvc2MuaHRtbA==">https://arthas.aliyun.com/doc/sc.html<i class="fa fa-external-link-alt"></i></span></p></blockquote><h4 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h4><p>使用 <code>sc --help</code> 获取 sc 命令的帮助信息：</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[arthas@32344]</span>$ <span class="token function">sc</span> <span class="token operator">-</span>help USAGE:   <span class="token function">sc</span> <span class="token punctuation">[</span><span class="token operator">-</span>c &lt;value&gt;<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">-</span>d<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">-</span>x &lt;value&gt;<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">-</span>f<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">-</span>h<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">-</span>E<span class="token punctuation">]</span> <span class="token keyword">class</span><span class="token operator">-</span>pattern SUMMARY:   Search all the classes loaded by JVM EXAMPLES:   <span class="token function">sc</span> <span class="token operator">-</span>d org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>StringUtils   <span class="token function">sc</span> <span class="token operator">-</span>d org<span class="token operator">/</span>apache<span class="token operator">/</span>commons<span class="token operator">/</span>lang<span class="token operator">/</span>StringUtils   <span class="token function">sc</span> <span class="token operator">-</span>d <span class="token operator">*</span>StringUtils   <span class="token function">sc</span> <span class="token operator">-</span>d <span class="token operator">-</span>f org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>StringUtils   <span class="token function">sc</span> <span class="token operator">-</span>E org\\<span class="token punctuation">.</span>apache\\<span class="token punctuation">.</span>commons\\<span class="token punctuation">.</span>lang\\<span class="token punctuation">.</span>StringUtils WIKI:   https:<span class="token operator">/</span><span class="token operator">/</span>alibaba<span class="token punctuation">.</span>github<span class="token punctuation">.</span>io<span class="token operator">/</span>arthas<span class="token operator">/</span><span class="token function">sc</span> OPTIONS: <span class="token operator">-</span>c<span class="token punctuation">,</span> <span class="token operator">--</span>classloader &lt;value&gt;               The hash code of the special <span class="token keyword">class</span><span class="token string">'s classLoader -d, --details                           Display the details of class -x, --expand &lt;value&gt;                    Expand level of object (0 by default) -f, --field                             Display all the member variables -h, --help                              this help -E, --regex                             Enable regular expression to match (wildcard matching by default) &lt;class-pattern&gt;                         Class name pattern, use either '</span><span class="token punctuation">.</span><span class="token string">' or '</span><span class="token operator">/</span>' as separator</code></pre><p>主要参数说明如下：</p><table><thead><tr><th>参数名称</th><th>参数说明</th></tr></thead><tbody><tr><td><em> class-pattern</em></td><td> 类名表达式匹配</td></tr><tr><td><em> method-pattern</em></td><td> 方法名表达式匹配</td></tr><tr><td> [d]</td><td> 输出当前类的详细信息，包括这个类所加载的原始文件来源、类的声明、加载的 ClassLoader 等详细信息。 如果一个类被多个 ClassLoader 所加载，则会出现多次</td></tr><tr><td> [E]</td><td> 开启正则表达式匹配，默认为通配符匹配</td></tr><tr><td> [f]</td><td> 输出当前类的成员变量信息（需要配合参数 - d 一起使用）</td></tr><tr><td>[x:]</td><td> 指定输出静态变量时属性的遍历深度，默认为 0，即直接使用 <code>toString</code> 输出</td></tr><tr><td><code>[c:]</code></td><td>指定 class 的 ClassLoader 的 hashcode</td></tr><tr><td><code>[classLoaderClass:]</code></td><td>指定执行表达式的 ClassLoader 的 class name</td></tr><tr><td><code>[n:]</code></td><td>具有详细信息的匹配类的最大数量（默认为 100）</td></tr></tbody></table><h4 id="查看已加载的类信息"><a href="#查看已加载的类信息" class="headerlink" title="查看已加载的类信息"></a>查看已加载的类信息</h4><p>模糊搜索：</p><pre class="language-none"><code class="language-none">[arthas@32344]$ sc sample.*sample.demo.ServerDemoApplicationsample.demo.ServerDemoApplication$$EnhancerBySpringCGLIB$$1a055512sample.demo.controller.UserControllersample.demo.service.UserServiceAffect(row-cnt:4) cost in 7 ms.</code></pre><p>打印类的详细信息：</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[arthas@32344]</span>$ <span class="token function">sc</span> <span class="token operator">-</span>d sample<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>controller<span class="token punctuation">.</span>UserController <span class="token keyword">class</span><span class="token operator">-</span>info        sample<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>controller<span class="token punctuation">.</span>UserController code<span class="token operator">-</span>source       <span class="token operator">/</span>C:<span class="token operator">/</span>Codes<span class="token operator">/</span>JavaWorkSpace<span class="token operator">/</span>workspace48<span class="token operator">/</span>arthas<span class="token operator">-</span>demo<span class="token operator">/</span>target<span class="token operator">/</span>classes<span class="token operator">/</span> name              sample<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>controller<span class="token punctuation">.</span>UserController isInterface       false isAnnotation      false isEnum            false isAnonymousClass  false isArray           false isLocalClass      false isMemberClass     false isPrimitive       false isSynthetic       false simple<span class="token operator">-</span>name       UserController modifier          public annotation        org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>scheduling<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>EnableScheduling<span class="token punctuation">,</span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>                   RestController interfaces super<span class="token operator">-</span><span class="token keyword">class</span>       <span class="token operator">+</span><span class="token operator">-</span>java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Object <span class="token keyword">class</span><span class="token operator">-</span>loader      <span class="token operator">+</span><span class="token operator">-</span>sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span>Launcher<span class="token variable">$AppClassLoader</span>@73d16e93                     <span class="token operator">+</span><span class="token operator">-</span>sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span>Launcher<span class="token variable">$ExtClassLoader</span>@2752f6e2 classLoaderHash   73d16e93Affect<span class="token punctuation">(</span>row<span class="token operator">-</span>cnt:1<span class="token punctuation">)</span> cost in 19 ms<span class="token punctuation">.</span></code></pre><p>打印出类的 Field 信息：</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[arthas@32344]</span>$ <span class="token function">sc</span> <span class="token operator">-</span>d <span class="token operator">-</span>f sample<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>controller<span class="token punctuation">.</span>UserController <span class="token keyword">class</span><span class="token operator">-</span>info        sample<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>controller<span class="token punctuation">.</span>UserController code<span class="token operator">-</span>source       <span class="token operator">/</span>C:<span class="token operator">/</span>Codes<span class="token operator">/</span>JavaWorkSpace<span class="token operator">/</span>workspace48<span class="token operator">/</span>arthas<span class="token operator">-</span>demo<span class="token operator">/</span>target<span class="token operator">/</span>classes<span class="token operator">/</span> name              sample<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>controller<span class="token punctuation">.</span>UserController isInterface       false isAnnotation      false isEnum            false isAnonymousClass  false isArray           false isLocalClass      false isMemberClass     false isPrimitive       false isSynthetic       false simple<span class="token operator">-</span>name       UserController modifier          public annotation        org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>scheduling<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>EnableScheduling<span class="token punctuation">,</span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>                   RestController interfaces super<span class="token operator">-</span><span class="token keyword">class</span>       <span class="token operator">+</span><span class="token operator">-</span>java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Object <span class="token keyword">class</span><span class="token operator">-</span>loader      <span class="token operator">+</span><span class="token operator">-</span>sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span>Launcher<span class="token variable">$AppClassLoader</span>@73d16e93                     <span class="token operator">+</span><span class="token operator">-</span>sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span>Launcher<span class="token variable">$ExtClassLoader</span>@2752f6e2 classLoaderHash   73d16e93 fields            name     log                   <span class="token function">type</span>     org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Logger                   modifier final<span class="token punctuation">,</span>private<span class="token punctuation">,</span>static                   value    Logger<span class="token namespace">[sample.demo.controller.UserController]</span>                   name       userService                   <span class="token function">type</span>       sample<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>service<span class="token punctuation">.</span>UserService                   modifier   private                   annotation org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>AutowiredAffect<span class="token punctuation">(</span>row<span class="token operator">-</span>cnt:1<span class="token punctuation">)</span> cost in 6 ms<span class="token punctuation">.</span></code></pre><h3 id="sm（已加载类的方法信息）"><a href="#sm（已加载类的方法信息）" class="headerlink" title="sm（已加载类的方法信息）"></a>sm（已加载类的方法信息）</h3><h4 id="方法介绍-1"><a href="#方法介绍-1" class="headerlink" title="方法介绍"></a>方法介绍</h4><p>“Search-Method” 的简写，这个命令能搜索出所有已经加载了 Class 信息的方法信息。</p><p>官方文档：</p><blockquote><p><span class="exturl" data-url="aHR0cHM6Ly9hcnRoYXMuYWxpeXVuLmNvbS9kb2Mvc20uaHRtbA==">https://arthas.aliyun.com/doc/sm.html<i class="fa fa-external-link-alt"></i></span></p></blockquote><h4 id="参数说明-1"><a href="#参数说明-1" class="headerlink" title="参数说明"></a>参数说明</h4><p>使用 <code>sm --help</code> 获取 thread 命令的帮助信息：</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[arthas@32344]</span>$ sm <span class="token operator">--</span>help USAGE:   sm <span class="token punctuation">[</span><span class="token operator">-</span>c &lt;value&gt;<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">-</span>d<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">-</span>h<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">-</span>E<span class="token punctuation">]</span> <span class="token keyword">class</span><span class="token operator">-</span>pattern <span class="token namespace">[method-pattern]</span> SUMMARY:   Search the method of classes loaded by JVM EXAMPLES:   sm java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String   sm <span class="token operator">-</span>d org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>StringUtils   sm <span class="token operator">-</span>d org<span class="token operator">/</span>apache<span class="token operator">/</span>commons<span class="token operator">/</span>lang<span class="token operator">/</span>StringUtils   sm <span class="token operator">*</span>StringUtils <span class="token operator">*</span>   sm <span class="token operator">-</span>Ed org\\<span class="token punctuation">.</span>apache\\<span class="token punctuation">.</span>commons\\<span class="token punctuation">.</span>lang\<span class="token punctuation">.</span>StringUtils <span class="token punctuation">.</span><span class="token operator">*</span> WIKI:   https:<span class="token operator">/</span><span class="token operator">/</span>alibaba<span class="token punctuation">.</span>github<span class="token punctuation">.</span>io<span class="token operator">/</span>arthas<span class="token operator">/</span>sm OPTIONS: <span class="token operator">-</span>c<span class="token punctuation">,</span> <span class="token operator">--</span>classloader &lt;value&gt;               The hash code of the special <span class="token keyword">class</span><span class="token string">'s classLoader -d, --details                           Display the details of method -h, --help                              this help -E, --regex                             Enable regular expression to match (wildcard matching by default) &lt;class-pattern&gt;                         Class name pattern, use either '</span><span class="token punctuation">.</span><span class="token string">' or '</span><span class="token operator">/</span>' as separator &lt;method<span class="token operator">-</span>pattern&gt;                        Method name pattern</code></pre><p>主要参数说明如下：</p><table><thead><tr><th>参数名称</th><th>参数说明</th></tr></thead><tbody><tr><td><em> class-pattern</em></td><td> 类名表达式匹配</td></tr><tr><td><em> method-pattern</em></td><td> 方法名表达式匹配</td></tr><tr><td> [d]</td><td> 展示每个方法的详细信息</td></tr><tr><td> [E]</td><td> 开启正则表达式匹配，默认为通配符匹配</td></tr><tr><td><code>[c:]</code></td><td>指定 class 的 ClassLoader 的 hashcode</td></tr><tr><td><code>[classLoaderClass:]</code></td><td>指定执行表达式的 ClassLoader 的 class name</td></tr><tr><td><code>[n:]</code></td><td>具有详细信息的匹配类的最大数量（默认为 100）</td></tr></tbody></table><h4 id="查看方法信息"><a href="#查看方法信息" class="headerlink" title="查看方法信息"></a>查看方法信息</h4><p>展示类的所有方法：</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[arthas@32344]</span>$ sm  sample<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>controller<span class="token punctuation">.</span>UserControllersample<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>controller<span class="token punctuation">.</span>UserController &lt;init&gt;<span class="token punctuation">(</span><span class="token punctuation">)</span>Vsample<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>controller<span class="token punctuation">.</span>UserController getUser<span class="token punctuation">(</span>Ljava<span class="token operator">/</span>lang<span class="token operator">/</span>Integer<span class="token punctuation">;</span><span class="token punctuation">)</span>Ljava<span class="token operator">/</span>util<span class="token operator">/</span>HashMap<span class="token punctuation">;</span>sample<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>controller<span class="token punctuation">.</span>UserController sample<span class="token punctuation">(</span><span class="token punctuation">)</span>VAffect<span class="token punctuation">(</span>row<span class="token operator">-</span>cnt:3<span class="token punctuation">)</span> cost in 33 ms<span class="token punctuation">.</span></code></pre><p>展示方法的详细信息：</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[arthas@32344]</span>$ sm <span class="token operator">-</span>d sample<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>controller<span class="token punctuation">.</span>UserController getUser declaring<span class="token operator">-</span><span class="token keyword">class</span>  sample<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>controller<span class="token punctuation">.</span>UserController method<span class="token operator">-</span>name      getUser modifier         public annotation       org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>GetMapping parameters       java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Integer <span class="token keyword">return</span>           java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap exceptions       java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Exception classLoaderHash  73d16e93Affect<span class="token punctuation">(</span>row<span class="token operator">-</span>cnt:1<span class="token punctuation">)</span> cost in 4 ms<span class="token punctuation">.</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;通过 Arthas 中的 trace/monitor/watch/stack/tt 等命令，可以查看方法内部调用信息，从而定位定位方法调用问题。&lt;/p&gt;
&lt;h3 id=&quot;sc（已加载的类信息）&quot;&gt;&lt;a href=&quot;#sc（已加载的类信息）&quot; class=&quot;headerlin
      
    
    </summary>
    
    
      <category term="Java" scheme="https://jueee.github.io/categories/Java/"/>
    
      <category term="Arthas" scheme="https://jueee.github.io/categories/Java/Arthas/"/>
    
    
      <category term="Java" scheme="https://jueee.github.io/tags/Java/"/>
    
      <category term="Java诊断" scheme="https://jueee.github.io/tags/Java%E8%AF%8A%E6%96%AD/"/>
    
      <category term="Arthas" scheme="https://jueee.github.io/tags/Arthas/"/>
    
  </entry>
  
  <entry>
    <title>Ceph 常用命令行汇总</title>
    <link href="https://jueee.github.io/2020/08/2020-08-31-Ceph%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%B1%87%E6%80%BB/"/>
    <id>https://jueee.github.io/2020/08/2020-08-31-Ceph%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%B1%87%E6%80%BB/</id>
    <published>2020-08-31T00:00:00.000Z</published>
    <updated>2020-09-02T09:00:11.037Z</updated>
    
    <content type="html"><![CDATA[<h3 id="ceph-基础命令"><a href="#ceph-基础命令" class="headerlink" title="ceph 基础命令"></a>ceph 基础命令</h3><p>查看版本：</p><pre class="language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># ceph -v</span>ceph version <span class="token number">15.2</span>.4 <span class="token punctuation">(</span>7447c15c6ff58d7fce91843b705a268a1917325c<span class="token punctuation">)</span> octopus <span class="token punctuation">(</span>stable<span class="token punctuation">)</span></code></pre><a id="more"></a><p>查看集群状态：</p><pre class="language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># ceph -s</span>  cluster:    id:     dacae2ee-013b-413c-83c9-7c1b96ec84f1    health: HEALTH_WARN            Degraded data redundancy: <span class="token number">32</span> pgs undersized  services:    mon: <span class="token number">2</span> daemons, quorum a,b <span class="token punctuation">(</span>age 6d<span class="token punctuation">)</span>    mgr: a<span class="token punctuation">(</span>active, since 2w<span class="token punctuation">)</span>    osd: <span class="token number">3</span> osds: <span class="token number">3</span> up <span class="token punctuation">(</span>since 2w<span class="token punctuation">)</span>, <span class="token number">3</span> <span class="token keyword">in</span> <span class="token punctuation">(</span>since 5w<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token number">1</span> remapped pgs  data:    pools:   <span class="token number">2</span> pools, <span class="token number">33</span> pgs    objects: <span class="token number">3</span> objects, <span class="token number">0</span> B    usage:   <span class="token number">3.1</span> GiB used, <span class="token number">11</span> TiB / <span class="token number">11</span> TiB avail    pgs:     <span class="token number">3</span>/9 objects misplaced <span class="token punctuation">(</span><span class="token number">33.333</span>%<span class="token punctuation">)</span>             <span class="token number">32</span> active+undersized             <span class="token number">1</span>  active+clean+remapped</code></pre><p>查看磁盘占用：</p><pre class="language-shell" data-language="shell"><code class="language-shell">$ ceph <span class="token function">df</span>--- RAW STORAGE ---CLASS  SIZE    AVAIL   USED    RAW USED  %RAW USEDhdd    <span class="token number">11</span> TiB  <span class="token number">11</span> TiB  <span class="token number">69</span> MiB   <span class="token number">3.1</span> GiB       <span class="token number">0.03</span>TOTAL  <span class="token number">11</span> TiB  <span class="token number">11</span> TiB  <span class="token number">69</span> MiB   <span class="token number">3.1</span> GiB       <span class="token number">0.03</span>--- POOLS ---POOL                   ID  STORED  OBJECTS  USED     %USED  MAX AVAILdevice_health_metrics   <span class="token number">1</span>  <span class="token number">30</span> KiB        <span class="token number">3</span>   <span class="token number">90</span> KiB      <span class="token number">0</span>    <span class="token number">3.5</span> TiB<span class="token builtin class-name">test</span>                    <span class="token number">2</span>     <span class="token number">0</span> B        <span class="token number">0</span>      <span class="token number">0</span> B      <span class="token number">0</span>    <span class="token number">3.5</span> TiBkcha                    <span class="token number">3</span>   <span class="token number">691</span> B        <span class="token number">4</span>  <span class="token number">256</span> KiB      <span class="token number">0</span>    <span class="token number">5.2</span> TiB</code></pre><h3 id="ceph-auth-命令"><a href="#ceph-auth-命令" class="headerlink" title="ceph auth 命令"></a>ceph auth 命令</h3><p>获取 Ceph <code>ceph.client.admin.keyring</code> 并生成 secret key：</p><pre class="language-none"><code class="language-none"># ceph auth get client.adminexported keyring for client.admin[client.admin]        key = AQAKThlfDW+2IxAApUzJ34ftDmNMUaDiV/SB0A==        caps mds = "allow *"        caps mgr = "allow *"        caps mon = "allow *"        caps osd = "allow *"</code></pre><p>k8s secret 认证 key 需要使用 base64 编码：</p><pre class="language-none"><code class="language-none"># echo "AQAKThlfDW+2IxAApUzJ34ftDmNMUaDiV/SB0A==" | base64QVFBS1RobGZEVysySXhBQXBVekozNGZ0RG1OTVVhRGlWL1NCMEE9PQo=</code></pre><p>以上两步可以合并为：</p><pre class="language-none"><code class="language-none"># ceph auth get-key client.admin |base64QVFBS1RobGZEVysySXhBQXBVekozNGZ0RG1OTVVhRGlWL1NCMEE9PQ==</code></pre><h3 id="ceph-osd-命令"><a href="#ceph-osd-命令" class="headerlink" title="ceph osd 命令"></a>ceph osd 命令</h3><p>OSD 全称 Object Storage Device，也就是负责响应客户端请求返回具体数据的进程。</p><p>查看 osd 状态</p><pre class="language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># ceph osd status</span>ID  HOST   USED  AVAIL  WR OPS  WR DATA  RD OPS  RD DATA  STATE <span class="token number">0</span>  host1  1045M  3724G      <span class="token number">0</span>        <span class="token number">0</span>       <span class="token number">0</span>        <span class="token number">0</span>   exists,up <span class="token number">1</span>  host2  1045M  3724G      <span class="token number">0</span>        <span class="token number">0</span>       <span class="token number">0</span>        <span class="token number">0</span>   exists,up <span class="token number">2</span>  host3  1045M  3724G      <span class="token number">0</span>        <span class="token number">0</span>       <span class="token number">0</span>        <span class="token number">0</span>   exists,up</code></pre><p>查看 osd 目录树</p><pre class="language-none"><code class="language-none"># ceph osd treeID  CLASS  WEIGHT    TYPE NAME                    STATUS  REWEIGHT  PRI-AFF-1         10.91460  root default-3          7.27640      host host1 0    hdd   3.63820          osd.0                    up   1.00000  1.00000 1    hdd   3.63820          osd.1                    up   1.00000  1.00000-5          3.63820      host host2 2    hdd   3.63820          osd.2                    up   1.00000  1.00000</code></pre><p>列出存储池</p><pre class="language-shell" data-language="shell"><code class="language-shell">$ ceph osd lspools<span class="token number">1</span> device_health_metrics<span class="token number">2</span> <span class="token builtin class-name">test</span><span class="token number">3</span> kcha</code></pre><h3 id="ceph-mon-命令"><a href="#ceph-mon-命令" class="headerlink" title="ceph mon 命令"></a>ceph mon 命令</h3><p>查看 mon 状态：</p><pre class="language-none"><code class="language-none"># ceph mon state2: 2 mons at {a=[v2:172.18.32.119:3300/0,v1:172.18.32.119:6789/0],b=[v2:172.18.83.170:3300/0,v1:172.18.83.170:6789/0]}, election epoch 16, leader 0 a, quorum 0,1 a,b</code></pre><h3 id="ceph-pg-命令"><a href="#ceph-pg-命令" class="headerlink" title="ceph pg 命令"></a>ceph pg 命令</h3><p>查看 pg 状态：</p><pre class="language-none"><code class="language-none"># ceph pg stat33 pgs: 1 active+clean+remapped, 32 active+undersized; 0 B data, 63 MiB used, 11 TiB / 11 TiB avail; 3/9 objects misplaced (33.333%)</code></pre><h3 id="rados-命令"><a href="#rados-命令" class="headerlink" title="rados 命令"></a>rados 命令</h3><pre class="language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># rados df</span>POOL_NAME                USED  OBJECTS  CLONES  COPIES  MISSING_ON_PRIMARY  UNFOUND  DEGRADED  RD_OPS       RD  WR_OPS       WR  USED COMPR  UNDER COMPRdevice_health_metrics  <span class="token number">90</span> KiB        <span class="token number">3</span>       <span class="token number">0</span>       <span class="token number">9</span>                   <span class="token number">0</span>        <span class="token number">0</span>         <span class="token number">0</span>     <span class="token number">104</span>  <span class="token number">104</span> KiB     <span class="token number">108</span>  <span class="token number">108</span> KiB         <span class="token number">0</span> B          <span class="token number">0</span> B<span class="token builtin class-name">test</span>                      <span class="token number">0</span> B        <span class="token number">0</span>       <span class="token number">0</span>       <span class="token number">0</span>                   <span class="token number">0</span>        <span class="token number">0</span>         <span class="token number">0</span>       <span class="token number">0</span>      <span class="token number">0</span> B       <span class="token number">0</span>      <span class="token number">0</span> B         <span class="token number">0</span> B          <span class="token number">0</span> Btotal_objects    <span class="token number">3</span>total_used       <span class="token number">3.1</span> GiBtotal_avail      <span class="token number">11</span> TiBtotal_space      <span class="token number">11</span> TiB</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;ceph-基础命令&quot;&gt;&lt;a href=&quot;#ceph-基础命令&quot; class=&quot;headerlink&quot; title=&quot;ceph 基础命令&quot;&gt;&lt;/a&gt;ceph 基础命令&lt;/h3&gt;&lt;p&gt;查看版本：&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot; data-language=&quot;shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# ceph -v&lt;/span&gt;
ceph version &lt;span class=&quot;token number&quot;&gt;15.2&lt;/span&gt;.4 &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;7447c15c6ff58d7fce91843b705a268a1917325c&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; octopus &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;stable&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="Ceph" scheme="https://jueee.github.io/categories/Ceph/"/>
    
    
      <category term="Ceph" scheme="https://jueee.github.io/tags/Ceph/"/>
    
  </entry>
  
  <entry>
    <title>在 k8s 中使用 rook-ceph</title>
    <link href="https://jueee.github.io/2020/08/2020-08-30-%E5%9C%A8k8s%E4%B8%AD%E4%BD%BF%E7%94%A8rook-ceph/"/>
    <id>https://jueee.github.io/2020/08/2020-08-30-%E5%9C%A8k8s%E4%B8%AD%E4%BD%BF%E7%94%A8rook-ceph/</id>
    <published>2020-08-30T00:00:00.000Z</published>
    <updated>2020-09-04T08:00:16.579Z</updated>
    
    <content type="html"><![CDATA[<h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><p>rook-ceph 官方指导：</p><blockquote><p><span class="exturl" data-url="aHR0cHM6Ly9yb29rLmlvL2RvY3Mvcm9vay92MS4xL2NlcGgtZXhhbXBsZXMuaHRtbA==">https://rook.io/docs/rook/v1.1/ceph-examples.html<i class="fa fa-external-link-alt"></i></span> </p></blockquote><p>github 项目地址：</p><blockquote><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3Jvb2svcm9vay90cmVlL21hc3Rlci9jbHVzdGVyL2V4YW1wbGVzL2t1YmVybmV0ZXMvY2VwaA==">https://github.com/rook/rook/tree/master/cluster/examples/kubernetes/ceph<i class="fa fa-external-link-alt"></i></span> </p></blockquote><a id="more"></a><h3 id="rook-ceph-tools使用"><a href="#rook-ceph-tools使用" class="headerlink" title="rook-ceph-tools使用"></a>rook-ceph-tools 使用</h3><ol><li><p>执行 toolbox.yaml，生成 rook-ceph-tools-xxxx pod</p></li><li><p>使用如下命令进入 ceph 的管理中：</p><pre class="language-shell" data-language="shell"><code class="language-shell">$ kubectl -n rook-ceph exec -it $(kubectl -n rook-ceph get pod -l "app=rook-ceph-tools" -o jsonpath='{.items[0].metadata.name}') bash</code></pre><pre class="language-shell" data-language="shell"><code class="language-shell">$ kubectl exec -it rook-ceph-tools-9c9d7744b-2tpwn bash -n rook-ceph</code></pre></li><li><p>ceph 常用命令</p><pre class="language-none"><code class="language-none">ceph -s 查看集群状态ceph osd status 查看osd状态ceph pg stat 查看pg状态ceph osd pool set pool pg_num 64 设置pg数量ceph osd pool set pool pgp_num 64 设置pgp数量，在集群规模较小，pg数量过少会导致监控警告，此两条命令需一起使用</code></pre></li></ol><h3 id="在宿主机使用-ceph-命令行"><a href="#在宿主机使用-ceph-命令行" class="headerlink" title="在宿主机使用 ceph 命令行"></a>在宿主机使用 ceph 命令行</h3><ol><li>安装 <code>ceph-common</code>：<code>apt-get install ceph-common</code>。</li><li>进入 <code>rook-ceph-tools-9c9d7744b-2tpwn</code> 容器，将 <code>/etc/ceph/ceph.conf</code> 和 <code>/etc/ceph/keyring</code> 拷贝到宿主机的 <code>/etc/ceph/</code> 文件夹下即可。</li></ol><h3 id="获取dashboard密码"><a href="#获取dashboard密码" class="headerlink" title="获取dashboard密码"></a>获取 dashboard 密码</h3><pre class="language-none"><code class="language-none">kubectl -n rook-ceph get secret rook-ceph-dashboard-password -o jsonpath="{['data']['password']}" | base64 --decode &amp;&amp; echo</code></pre><h3 id="问题处理"><a href="#问题处理" class="headerlink" title="问题处理"></a>问题处理</h3><pre class="language-none"><code class="language-none">(combined from similar events): MountVolume.SetUp failed for volume "mysqldata" : CephFS: mount failed: mount failed: exit status 32</code></pre><p><span class="exturl" data-url="aHR0cHM6Ly9wa2dzLm9yZy9kb3dubG9hZC9jZXBoLWNvbW1vbg==">https://pkgs.org/download/ceph-common<i class="fa fa-external-link-alt"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLjUxY3RvLmNvbS9sZWVqaWEvMjUwMTA4MA==">https://blog.51cto.com/leejia/2501080<i class="fa fa-external-link-alt"></i></span></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;相关链接&quot;&gt;&lt;a href=&quot;#相关链接&quot; class=&quot;headerlink&quot; title=&quot;相关链接&quot;&gt;&lt;/a&gt;相关链接&lt;/h3&gt;&lt;p&gt;rook-ceph 官方指导：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://rook.io/docs/rook/v1.1/ceph-examples.html&quot;&gt;https://rook.io/docs/rook/v1.1/ceph-examples.html&lt;/a&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;github 项目地址：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rook/rook/tree/master/cluster/examples/kubernetes/ceph&quot;&gt;https://github.com/rook/rook/tree/master/cluster/examples/kubernetes/ceph&lt;/a&gt; &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Ceph" scheme="https://jueee.github.io/categories/Ceph/"/>
    
      <category term="k8s" scheme="https://jueee.github.io/categories/k8s/"/>
    
    
      <category term="Ceph" scheme="https://jueee.github.io/tags/Ceph/"/>
    
      <category term="k8s" scheme="https://jueee.github.io/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>Ceph 分布式存储系统介绍</title>
    <link href="https://jueee.github.io/2020/08/2020-08-29-Ceph%E5%88%86%E5%B8%83%E5%BC%8F%E5%AD%98%E5%82%A8%E7%B3%BB%E7%BB%9F%E4%BB%8B%E7%BB%8D/"/>
    <id>https://jueee.github.io/2020/08/2020-08-29-Ceph%E5%88%86%E5%B8%83%E5%BC%8F%E5%AD%98%E5%82%A8%E7%B3%BB%E7%BB%9F%E4%BB%8B%E7%BB%8D/</id>
    <published>2020-08-29T00:00:00.000Z</published>
    <updated>2020-09-02T09:00:11.035Z</updated>
    
    <content type="html"><![CDATA[<h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><ul><li><span class="exturl" data-url="aHR0cDovL2RvY3MuY2VwaC5vcmcuY24v">Ceph 中文文档<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cDovL2NlcGgub3JnLmNuLw==">Ceph 中文社区<i class="fa fa-external-link-alt"></i></span></li></ul><a id="more"></a><h3 id="Ceph-架构"><a href="#Ceph-架构" class="headerlink" title="Ceph 架构"></a>Ceph 架构</h3><p>Ceph 生态系统可以大致划分为四部分：</p><ul><li>客户端（数据使用者）</li><li>元数据服务器（缓冲及同步分布的元数据）</li><li>对象存储集群（以对象方式存储数据与元数据，实现其它主要职责）</li><li>集群监控（实现监控功能）</li></ul><p>Ceph 生态系统的概念架构：</p><p><img src="/images/2020/08/1598611098897.png" alt="1598611098897" loading="lazy"></p><p>Ceph 生态系统的简化分层视图：</p><p><img src="/images/2020/08/1598611214479.png" alt="1598611214479" loading="lazy"></p><h3 id="Ceph-生态系统"><a href="#Ceph-生态系统" class="headerlink" title="Ceph 生态系统"></a>Ceph 生态系统</h3><p><img src="/images/2020/08/1598611164703.png" alt="1598611164703" loading="lazy"></p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cub3NjaGluYS5uZXQvdHJhbnNsYXRlL2NlcGg=">https://www.oschina.net/translate/ceph<i class="fa fa-external-link-alt"></i></span></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;相关链接&quot;&gt;&lt;a href=&quot;#相关链接&quot; class=&quot;headerlink&quot; title=&quot;相关链接&quot;&gt;&lt;/a&gt;相关链接&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.ceph.org.cn/&quot;&gt;Ceph 中文文档&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ceph.org.cn/&quot;&gt;Ceph 中文社区&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Ceph" scheme="https://jueee.github.io/categories/Ceph/"/>
    
    
      <category term="Ceph" scheme="https://jueee.github.io/tags/Ceph/"/>
    
  </entry>
  
  <entry>
    <title>Java 的 JIT 知识整理</title>
    <link href="https://jueee.github.io/2020/08/2020-08-28-Java%E7%9A%84JIT%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/"/>
    <id>https://jueee.github.io/2020/08/2020-08-28-Java%E7%9A%84JIT%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/</id>
    <published>2020-08-28T00:00:00.000Z</published>
    <updated>2020-09-02T09:00:11.034Z</updated>
    
    <content type="html"><![CDATA[<h3 id="JIT-介绍"><a href="#JIT-介绍" class="headerlink" title="JIT 介绍"></a>JIT 介绍</h3><p>JIT 编译器（just in time 即时编译器），当虚拟机发现某个方法或代码块运行特别频繁时，就会把这些代码认定为 热点代码（Hot Spot Code），为了提高热点代码的执行效率，在运行时，虚拟机将会把这些代码编译成与本地平台相关的机器码，并进行各层次的优化，完成这项任务的正是 <strong>JIT 编译器</strong>。</p><a id="more"></a><h3 id="JIT的工作原理"><a href="#JIT的工作原理" class="headerlink" title="JIT的工作原理"></a>JIT 的工作原理</h3><p><img src="/images/2020/08/1598525622168.png" alt="1598525622168" loading="lazy"></p><h3 id="JIT编译"><a href="#JIT编译" class="headerlink" title="JIT编译"></a>JIT 编译</h3><p>对于 Java 代码，刚开始都是<code>被编译器编译成字节码文件</code>，<code>然后字节码文件会被交由 JVM 解释执行</code>，所以可以说 Java 本身是一种<strong>半编译半解释执行的语言</strong>。</p><p>当 JIT 编译启用时（默认是启用的），JVM 读入<code>.class文件解释后</code>，将其<code>发给JIT编译器</code>。JIT 编译器<code>将字节码编译成本机机器代码</code>。</p><p>通常 <code>Javac将程序源码编译</code>，<code>转换成java字节码</code>，<code>JVM通过解释字节码将其翻译成相应的机器指令</code>，逐条读入，逐条解释翻译。<br> 经过解释运行，其运行速度必定会比可运行的二进制字节码程序慢。为了提高运行速度，引入了 JIT 技术。</p><p>在执行时 JIT 会把翻译过的机器码保存起来，已备下次使用，因此从理论上来说，采用该 JIT 技术能够，能够接近曾经纯编译技术。</p><p>运行过程中会被即时编译器编译的<code>热点代码</code>有两类：<strong>被多次调用的方法</strong>、<strong>被多次调用的循环体</strong>。<br>这两种情况，编译器都是以<strong>整个方法作为编译对象</strong>，这种编译也是虚拟机中标准的编译方式。要知道一段代码或方法是不是热点代码，是不是需要触发即时编译，需要进行 <code>Hot Spot Detection（热点探测）</code>。</p><h3 id="热点判定方式"><a href="#热点判定方式" class="headerlink" title="热点判定方式"></a>热点判定方式</h3><p>目前主要的热点 判定方式有以下两种：</p><ol><li><strong>基于采样的热点探测</strong>：<br> 采用这种方法的虚拟机会周期性地检查各个线程的栈顶，如果发现某些方法经常出现在栈顶，那这段方法代码就是 “热点代码”。这种探测方法的好处是实现简单高效，还可以很容易地获取方法调用关系，缺点是很难精确地确认一个方法的热度，容易因为受到线程阻塞或别的外界因素的影响而扰乱热点探测。</li><li><strong>基于计数器的热点探测</strong>：<br> 采用这种方法的虚拟机会为每个方法，甚至是代码块建立计数器，统计方法的执行次数，如果执行次数超过一定的阀值，就认为它是 “热点方法”。这种统计方法实现复杂一些，需要为每个方法建立并维护计数器，而且不能直接获取到方法的调用关系，但是它的统计结果相对更加精确严谨。</li></ol><p>HotSpot 虚拟机中使用的是第二种: <strong>基于计数器的热点探测方法</strong>，因此它为每个方法准备了两个计数器：<code>方法调用计数器和回边计数器</code>。</p><ul><li><p><strong>方法调用计数器</strong></p><p>方法调用计数器用来统计方法调用的次数，在默认设置下，方法调用计数器统计的并不是方法被调用的绝对次数，而是一个相对的执行频率，即一段时间内方法被调用的次数。</p></li><li><p><strong>回边计数器</strong></p><p>用于统计一个方法中循环体代码执行的次数（准确地说，应该是回边的次数，因为并非所有的循环都是回边），在字节码中遇到控制流向后跳转的指令就称为 “回边”。</p></li></ul><p>方法调用计数器触发即时编译的流程：</p><p><img src="/images/2020/08/1598525962562.png" alt="1598525962562" loading="lazy"></p><h3 id="设置热点阈值"><a href="#设置热点阈值" class="headerlink" title="设置热点阈值"></a>设置热点阈值</h3><p>一段代码需要执行多少次才会触发 JIT 优化呢？通常这个值由 <code>-XX:CompileThreshold</code> 参数进行设置：</p><ol><li><p>使用 client 编译器时，默认为 1500。</p></li><li><p>使用 server 编译器时，默认为 10000。</p></li></ol><h3 id="JIT优化"><a href="#JIT优化" class="headerlink" title="JIT优化"></a>JIT 优化</h3><ol><li><p><strong>开启服务端模式</strong></p><p>开启服务端模式以后就有即时编译器和解释器两种执行引擎，执行效率最高的是即时编译器，所以我们做 JIT 优化的目的是尽量使代码使用即时编译器</p><p>参数设置：<code>-server</code></p></li><li><p><strong>增加内联函数的可能性</strong></p><p>增加函数内联的可能性能减少栈帧的创建，节约内存空间</p><p>参数设置：</p><p>使用 final 修饰函数向编译器建议可以内联，启动参数不宜设置，注意只是建议，具体是否内联看 JVM 决定</p></li><li><p><strong>提高使用即时编译器的可能性</strong></p><p>小方法：写方法时尽量不要写得太大，让 JVM 尽可能使用即时编译器编译代码</p><p>在启动项配置参数 - XX:CompileThreshold=10000，使得一个方法被调用超过 10000 次以后使用即时编译器编译为机器码</p><p><strong>OSR 编译阈值</strong></p><ul><li><strong>调用计数器</strong>，即方法被调用的次数，CompileThreshold，该值是指当方法被调用多少次后，就编译为机器码，client 模式默认为 1500 次，server 模式默认为 1 万次，可以在启动时添加 - XX:CompileThreshold=10000 来设置该值。</li><li><strong>回边计数器</strong>，即方法中循环执行部分代码的执行次数，OnStackReplacePercentage，该值用于 / 参与计算是否触发 OSR 编译的阈值，client 默认为 933，sever 默认为 140，可以通过 - XX:OnStackReplacePercentage=140 来设置。</li></ul><p>client 模式下的计算规则为：</p><pre class="language-none"><code class="language-none">CompileThreshold*OnStackReplacePercentage/100</code></pre><p>server 模式下计算规则为：</p><pre class="language-none"><code class="language-none">CompileThreshold *（OnStackReplacePercentage-InterpreterProfilePercentage）/100</code></pre><p>InterpreterProfilePercentage，默认为 33。</p></li><li><p><strong>降低线程优先级</strong></p><p>Linux 不能设置，需要 root 权限</p></li><li><p><strong>热度衰减与半衰周期</strong></p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;JIT-介绍&quot;&gt;&lt;a href=&quot;#JIT-介绍&quot; class=&quot;headerlink&quot; title=&quot;JIT 介绍&quot;&gt;&lt;/a&gt;JIT 介绍&lt;/h3&gt;&lt;p&gt;JIT编译器（just in time 即时编译器），当虚拟机发现某个方法或代码块运行特别频繁时，就会把这些代码认定为 热点代码（Hot Spot Code），为了提高热点代码的执行效率，在运行时，虚拟机将会把这些代码编译成与本地平台相关的机器码，并进行各层次的优化，完成这项任务的正是 &lt;strong&gt;JIT编译器&lt;/strong&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://jueee.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://jueee.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java 字节码操纵框架 ASM</title>
    <link href="https://jueee.github.io/2020/08/2020-08-27-Java%E5%AD%97%E8%8A%82%E7%A0%81%E6%93%8D%E7%BA%B5%E6%A1%86%E6%9E%B6ASM/"/>
    <id>https://jueee.github.io/2020/08/2020-08-27-Java%E5%AD%97%E8%8A%82%E7%A0%81%E6%93%8D%E7%BA%B5%E6%A1%86%E6%9E%B6ASM/</id>
    <published>2020-08-27T00:00:00.000Z</published>
    <updated>2020-09-07T06:36:45.830Z</updated>
    
    <content type="html"><![CDATA[<h3 id="ASM-介绍"><a href="#ASM-介绍" class="headerlink" title="ASM 介绍"></a>ASM 介绍</h3><p>ASM 是一个 java 字节码操纵框架，它能被用来动态生成类或者增强既有类的功能。</p><p>ASM 可以直接产生二进制 class 文件，也可以在类被加载入 Java 虚拟机之前动态改变类行为。Java class 被存储在严格格式定义的 .class 文件里，这些类文件拥有足够的元数据来解析类中的所有元素：类名称、方法、属性以及 Java 字节码（指令）。ASM 从类文件中读入信息后，能够改变类行为，分析类信息，甚至能够根据用户要求生成新类。</p><a id="more"></a><p>官网：<span class="exturl" data-url="aHR0cHM6Ly9hc20ub3cyLmlvLw==">https://asm.ow2.io/<i class="fa fa-external-link-alt"></i></span></p><p>文档：<span class="exturl" data-url="aHR0cHM6Ly9hc20ub3cyLmlvL2phdmFkb2Mvb3ZlcnZpZXctc3VtbWFyeS5odG1s">https://asm.ow2.io/javadoc/overview-summary.html<i class="fa fa-external-link-alt"></i></span></p><p>下载：<span class="exturl" data-url="aHR0cHM6Ly9tdm5yZXBvc2l0b3J5LmNvbS9hcnRpZmFjdC9vcmcub3cyLmFzbS9hc20=">https://mvnrepository.com/artifact/org.ow2.asm/asm<i class="fa fa-external-link-alt"></i></span></p><p>使用 ASM 框架需要导入 asm 的 jar 包：</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.ow2.asm<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>asm<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>8.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></code></pre><p>ASM 框架中的核心类有以下几个：</p><ul><li><strong>ClassReader</strong>：该类用来解析编译过的 class 字节码文件。</li><li><strong>ClassWriter</strong>：该类用来重新构建编译后的类，比如说修改类名、属性以及方法，甚至可以生成新的类的字节码文件。</li><li><strong>ClassAdapter</strong>：该类也实现了 ClassVisitor 接口，它将对它的方法调用委托给另一个 ClassVisitor 对象。</li></ul><h3 id="字节码处理流程"><a href="#字节码处理流程" class="headerlink" title="字节码处理流程"></a>字节码处理流程</h3><p>asm 字节码处理流程：</p><p>目标类 class bytes -&gt; ClassReader 解析 -&gt; ClassVisitor 增强修改字节码 -&gt; ClassWriter 生成增强后的 class bytes -&gt; 通过 Instrumentation 解析加载为新的 Class。</p><p>如下图所示：</p><p><img src="/images/2020/08/1599459538607.png" alt="1599459538607" loading="lazy"></p><h3 id="ASM动态操作方法"><a href="#ASM动态操作方法" class="headerlink" title="ASM动态操作方法"></a>ASM 动态操作方法</h3><p>示例代码 <code>com.demo.Foo</code>：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>demo</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"test changed method name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">changeMethodContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"test changed method"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><code>com.asm.MethodChangeClassAdapter</code>：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>asm</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>objectweb<span class="token punctuation">.</span>asm<span class="token punctuation">.</span></span><span class="token class-name">ClassVisitor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>objectweb<span class="token punctuation">.</span>asm<span class="token punctuation">.</span></span><span class="token class-name">MethodVisitor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>objectweb<span class="token punctuation">.</span>asm<span class="token punctuation">.</span></span><span class="token class-name">Opcodes</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MethodChangeClassAdapter</span> <span class="token keyword">extends</span> <span class="token class-name">ClassVisitor</span> <span class="token keyword">implements</span> <span class="token class-name">Opcodes</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">MethodChangeClassAdapter</span><span class="token punctuation">(</span><span class="token class-name">ClassVisitor</span> cv<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token class-name">Opcodes</span><span class="token punctuation">.</span>ASM4<span class="token punctuation">,</span> cv<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visit</span><span class="token punctuation">(</span><span class="token keyword">int</span> version<span class="token punctuation">,</span> <span class="token keyword">int</span> access<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> signature<span class="token punctuation">,</span> <span class="token class-name">String</span> superName<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> interfaces<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cv <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            cv<span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span>version<span class="token punctuation">,</span> access<span class="token punctuation">,</span> name<span class="token punctuation">,</span> signature<span class="token punctuation">,</span> superName<span class="token punctuation">,</span> interfaces<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">MethodVisitor</span> <span class="token function">visitMethod</span><span class="token punctuation">(</span><span class="token keyword">int</span> access<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> desc<span class="token punctuation">,</span> <span class="token class-name">String</span> signature<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> exceptions<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 当方法名为execute时，修改方法名为execute1</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cv <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token string">"execute"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> cv<span class="token punctuation">.</span><span class="token function">visitMethod</span><span class="token punctuation">(</span>access<span class="token punctuation">,</span> name <span class="token operator">+</span> <span class="token string">"1"</span><span class="token punctuation">,</span> desc<span class="token punctuation">,</span> signature<span class="token punctuation">,</span> exceptions<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 此处的changeMethodContent即为需要修改的方法 ，修改方法內容</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"changeMethodContent"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 先得到原始的方法</span>            <span class="token class-name">MethodVisitor</span> mv <span class="token operator">=</span> cv<span class="token punctuation">.</span><span class="token function">visitMethod</span><span class="token punctuation">(</span>access<span class="token punctuation">,</span> name<span class="token punctuation">,</span> desc<span class="token punctuation">,</span> signature<span class="token punctuation">,</span> exceptions<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">MethodVisitor</span> newMethod <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token comment">// 访问需要修改的方法</span>            newMethod <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AsmMethodVisit</span><span class="token punctuation">(</span>mv<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> newMethod<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cv <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> cv<span class="token punctuation">.</span><span class="token function">visitMethod</span><span class="token punctuation">(</span>access<span class="token punctuation">,</span> name<span class="token punctuation">,</span> desc<span class="token punctuation">,</span> signature<span class="token punctuation">,</span> exceptions<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><code>com.asm.AsmMethodVisit</code>：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>asm</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>objectweb<span class="token punctuation">.</span>asm<span class="token punctuation">.</span></span><span class="token class-name">MethodVisitor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>objectweb<span class="token punctuation">.</span>asm<span class="token punctuation">.</span></span><span class="token class-name">Opcodes</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AsmMethodVisit</span> <span class="token keyword">extends</span> <span class="token class-name">MethodVisitor</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">AsmMethodVisit</span><span class="token punctuation">(</span><span class="token class-name">MethodVisitor</span> mv<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token class-name">Opcodes</span><span class="token punctuation">.</span>ASM4<span class="token punctuation">,</span> mv<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visitMethodInsn</span><span class="token punctuation">(</span><span class="token keyword">int</span> opcode<span class="token punctuation">,</span> <span class="token class-name">String</span> owner<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> desc<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">visitMethodInsn</span><span class="token punctuation">(</span>opcode<span class="token punctuation">,</span> owner<span class="token punctuation">,</span> name<span class="token punctuation">,</span> desc<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visitCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 此方法在访问方法的头部时被访问到，仅被访问一次</span>        <span class="token comment">// 此处可插入新的指令</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">visitCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visitInsn</span><span class="token punctuation">(</span><span class="token keyword">int</span> opcode<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 此方法可以获取方法中每一条指令的操作类型，被访问多次</span>        <span class="token comment">// 如应在方法结尾处添加新指令，则应判断：</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>opcode <span class="token operator">==</span> <span class="token class-name">Opcodes</span><span class="token punctuation">.</span>RETURN<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// pushes the 'out' field (of type PrintStream) of the System class</span>            mv<span class="token punctuation">.</span><span class="token function">visitFieldInsn</span><span class="token punctuation">(</span><span class="token class-name">Opcodes</span><span class="token punctuation">.</span>GETSTATIC<span class="token punctuation">,</span> <span class="token string">"java/lang/System"</span><span class="token punctuation">,</span> <span class="token string">"out"</span><span class="token punctuation">,</span> <span class="token string">"Ljava/io/PrintStream;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// pushes the "Hello World!" String constant</span>            mv<span class="token punctuation">.</span><span class="token function">visitLdcInsn</span><span class="token punctuation">(</span><span class="token string">"this is a modify method!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// invokes the 'println' method (defined in the PrintStream class)</span>            mv<span class="token punctuation">.</span><span class="token function">visitMethodInsn</span><span class="token punctuation">(</span><span class="token class-name">Opcodes</span><span class="token punctuation">.</span>INVOKEVIRTUAL<span class="token punctuation">,</span> <span class="token string">"java/io/PrintStream"</span><span class="token punctuation">,</span> <span class="token string">"println"</span><span class="token punctuation">,</span> <span class="token string">"(Ljava/lang/String;)V"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">visitInsn</span><span class="token punctuation">(</span>opcode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>测试类 <code>com.asm.AsmExample</code>：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>asm</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileOutputStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">InvocationTargetException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>objectweb<span class="token punctuation">.</span>asm<span class="token punctuation">.</span></span><span class="token class-name">ClassReader</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>objectweb<span class="token punctuation">.</span>asm<span class="token punctuation">.</span></span><span class="token class-name">ClassVisitor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>objectweb<span class="token punctuation">.</span>asm<span class="token punctuation">.</span></span><span class="token class-name">ClassWriter</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>objectweb<span class="token punctuation">.</span>asm<span class="token punctuation">.</span></span><span class="token class-name">MethodVisitor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>objectweb<span class="token punctuation">.</span>asm<span class="token punctuation">.</span></span><span class="token class-name">Opcodes</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>demo<span class="token punctuation">.</span></span><span class="token class-name">Foo</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AsmExample</span> <span class="token keyword">extends</span> <span class="token class-name">ClassLoader</span> <span class="token keyword">implements</span> <span class="token class-name">Opcodes</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">,</span> <span class="token class-name">SecurityException</span><span class="token punctuation">,</span>            <span class="token class-name">IllegalAccessException</span><span class="token punctuation">,</span> <span class="token class-name">InvocationTargetException</span><span class="token punctuation">,</span> <span class="token class-name">InstantiationException</span> <span class="token punctuation">{</span>        <span class="token class-name">ClassReader</span> cr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassReader</span><span class="token punctuation">(</span><span class="token class-name">Foo</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ClassWriter</span> cw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassWriter</span><span class="token punctuation">(</span>cr<span class="token punctuation">,</span> <span class="token class-name">ClassWriter</span><span class="token punctuation">.</span>COMPUTE_MAXS<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ClassVisitor</span> cv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MethodChangeClassAdapter</span><span class="token punctuation">(</span>cw<span class="token punctuation">)</span><span class="token punctuation">;</span>        cr<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>cv<span class="token punctuation">,</span> <span class="token class-name">Opcodes</span><span class="token punctuation">.</span>ASM4<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 新增加一个方法</span>        <span class="token class-name">MethodVisitor</span> mw <span class="token operator">=</span> cw<span class="token punctuation">.</span><span class="token function">visitMethod</span><span class="token punctuation">(</span>ACC_PUBLIC <span class="token operator">+</span> ACC_STATIC<span class="token punctuation">,</span> <span class="token string">"add"</span><span class="token punctuation">,</span> <span class="token string">"([Ljava/lang/String;)V"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mw<span class="token punctuation">.</span><span class="token function">visitFieldInsn</span><span class="token punctuation">(</span>GETSTATIC<span class="token punctuation">,</span> <span class="token string">"java/lang/System"</span><span class="token punctuation">,</span> <span class="token string">"out"</span><span class="token punctuation">,</span> <span class="token string">"Ljava/io/PrintStream;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mw<span class="token punctuation">.</span><span class="token function">visitLdcInsn</span><span class="token punctuation">(</span><span class="token string">"this is add method print!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mw<span class="token punctuation">.</span><span class="token function">visitMethodInsn</span><span class="token punctuation">(</span>INVOKEVIRTUAL<span class="token punctuation">,</span> <span class="token string">"java/io/PrintStream"</span><span class="token punctuation">,</span> <span class="token string">"println"</span><span class="token punctuation">,</span> <span class="token string">"(Ljava/lang/String;)V"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mw<span class="token punctuation">.</span><span class="token function">visitInsn</span><span class="token punctuation">(</span>RETURN<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// this code uses a maximum of two stack elements and two local</span>        <span class="token comment">// variables</span>        mw<span class="token punctuation">.</span><span class="token function">visitMaxs</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mw<span class="token punctuation">.</span><span class="token function">visitEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> code <span class="token operator">=</span> cw<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">AsmExample</span> loader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AsmExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> exampleClass <span class="token operator">=</span> loader<span class="token punctuation">.</span><span class="token function">defineClass</span><span class="token punctuation">(</span><span class="token class-name">Foo</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> code<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> code<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Method</span> method <span class="token operator">:</span> exampleClass<span class="token punctuation">.</span><span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"***************************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// uses the dynamically generated class to print 'Helloworld'</span>        <span class="token comment">// 調用changeMethodContent，修改方法內容</span>        exampleClass<span class="token punctuation">.</span><span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>exampleClass<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"***************************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 調用execute,修改方法名</span>        exampleClass<span class="token punctuation">.</span><span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>exampleClass<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// gets the bytecode of the Example class, and loads it dynamically</span>        <span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"e:\\Example.class"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>        fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>输出结果：</p><pre class="language-none"><code class="language-none">public static void com.demo.Foo.add(java.lang.String[])public void com.demo.Foo.changeMethodContent()public void com.demo.Foo.execute1()public final void java.lang.Object.wait() throws java.lang.InterruptedExceptionpublic final void java.lang.Object.wait(long,int) throws java.lang.InterruptedExceptionpublic final native void java.lang.Object.wait(long) throws java.lang.InterruptedExceptionpublic boolean java.lang.Object.equals(java.lang.Object)public java.lang.String java.lang.Object.toString()public native int java.lang.Object.hashCode()public final native java.lang.Class java.lang.Object.getClass()public final native void java.lang.Object.notify()public final native void java.lang.Object.notifyAll()***************************test changed methodthis is a modify method!***************************test changed method name</code></pre><p>通过反编译软件，查看 E 盘生成的 Example.class，结果如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>demo</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"test changed method name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">changeMethodContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"test changed method"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"this is a modify method!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrstring<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"this is add method print!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;ASM-介绍&quot;&gt;&lt;a href=&quot;#ASM-介绍&quot; class=&quot;headerlink&quot; title=&quot;ASM 介绍&quot;&gt;&lt;/a&gt;ASM 介绍&lt;/h3&gt;&lt;p&gt;ASM 是一个 java 字节码操纵框架，它能被用来动态生成类或者增强既有类的功能。&lt;/p&gt;
&lt;p&gt;ASM 可以直接产生二进制 class 文件，也可以在类被加载入 Java 虚拟机之前动态改变类行为。Java class 被存储在严格格式定义的 .class 文件里，这些类文件拥有足够的元数据来解析类中的所有元素：类名称、方法、属性以及 Java 字节码（指令）。ASM 从类文件中读入信息后，能够改变类行为，分析类信息，甚至能够根据用户要求生成新类。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://jueee.github.io/categories/Java/"/>
    
      <category term="JavaJar" scheme="https://jueee.github.io/categories/Java/JavaJar/"/>
    
    
      <category term="Java" scheme="https://jueee.github.io/tags/Java/"/>
    
      <category term="JavaJar" scheme="https://jueee.github.io/tags/JavaJar/"/>
    
  </entry>
  
  <entry>
    <title>Arthas 之热更新原理，并实现简易版热更新功能</title>
    <link href="https://jueee.github.io/2020/08/2020-08-26-Arthas%E4%B9%8B%E7%83%AD%E6%9B%B4%E6%96%B0%E5%8E%9F%E7%90%86%EF%BC%8C%E5%B9%B6%E5%AE%9E%E7%8E%B0%E7%AE%80%E6%98%93%E7%89%88%E7%83%AD%E6%9B%B4%E6%96%B0%E5%8A%9F%E8%83%BD/"/>
    <id>https://jueee.github.io/2020/08/2020-08-26-Arthas%E4%B9%8B%E7%83%AD%E6%9B%B4%E6%96%B0%E5%8E%9F%E7%90%86%EF%BC%8C%E5%B9%B6%E5%AE%9E%E7%8E%B0%E7%AE%80%E6%98%93%E7%89%88%E7%83%AD%E6%9B%B4%E6%96%B0%E5%8A%9F%E8%83%BD/</id>
    <published>2020-08-26T00:00:00.000Z</published>
    <updated>2020-09-02T09:00:11.031Z</updated>
    
    <content type="html"><![CDATA[<h3 id="热更新原理"><a href="#热更新原理" class="headerlink" title="热更新原理"></a>热更新原理</h3><p>Arthas 热更新功能看起来很神奇，实际上离不开 JDK 一些 API，分别为 instrument API 与 attach API。</p><a id="more"></a><h4 id="Instrumentation"><a href="#Instrumentation" class="headerlink" title="Instrumentation"></a>Instrumentation</h4><p>Java Instrumentation 是 JDK5 之后提供接口。使用这组接口，我们可以获取到正在运行 JVM 相关信息，使用这些信息我们构建相关监控程序检测 JVM。另外， 最重要我们可以<strong>替换</strong>和<strong>修改</strong>类的，这样就实现了热更新。</p><p>Instrumentation 存在两种使用方式，一种为 <code>pre-main</code> 方式，这种方式需要在虚拟机参数指定 Instrumentation 程序，然后程序启动之前将会完成修改或替换类。使用方式如下:</p><pre class="language-shell" data-language="shell"><code class="language-shell">java -javaagent:jar Instrumentation_jar -jar xxx.jar</code></pre><p>这种方式只能在应用启动之前生效，存在一定的局限性。</p><p>JDK6 针对这种情况作出了改进，增加 <code>agent-main</code> 方式。我们可以在应用启动之后，再运行 <code>Instrumentation</code> 程序。启动之后，只有连接上相应的应用，我们才能做出相应改动，这里我们就需要使用 Java 提供 attach API。</p><h4 id="Attach-API"><a href="#Attach-API" class="headerlink" title="Attach API"></a>Attach API</h4><p>Attach API 位于 tools.jar 包，可以用来连接目标 JVM。Attach API 非常简单，内部只有两个主要的类，<code>VirtualMachine</code> 与 <code>VirtualMachineDescriptor</code>。</p><p><code>VirtualMachine</code> 代表一个 JVM 实例， 使用它提供 <code>attach</code> 方法，我们就可以连接上目标 JVM。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">VirtualMachine</span> vm <span class="token operator">=</span> <span class="token class-name">VirtualMachine</span><span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span>pid<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>VirtualMachineDescriptor</code> 则是一个描述虚拟机的容器类，通过该实例我们可以获取到 JVM PID (进程 ID), 该实例主要通过  <code>VirtualMachine#list</code> 方法获取。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">VirtualMachineDescriptor</span> descriptor <span class="token operator">:</span> <span class="token class-name">VirtualMachine</span><span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><p>介绍完热更新涉及的相关原理，接下去使用上面 API 实现热更新功能。</p><h3 id="实现热更新功能"><a href="#实现热更新功能" class="headerlink" title="实现热更新功能"></a>实现热更新功能</h3><h4 id="实现-agent-main"><a href="#实现-agent-main" class="headerlink" title="实现 agent-main"></a>实现 agent-main</h4><p>首先需要编写一个类，包含以下两个方法：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> agentmain <span class="token punctuation">(</span><span class="token class-name">String</span> agentArgs<span class="token punctuation">,</span> <span class="token class-name">Instrumentation</span> inst<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> agentmain <span class="token punctuation">(</span><span class="token class-name">String</span> agentArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span></code></pre><blockquote><p>上面的方法只需要实现一个即可。若两个都实现，  [1] 优先级大于 [2]，将会被优先执行。</p></blockquote><p>接着读取外部传入 class 文件，调用 <code>Instrumentation#redefineClasses</code>，这个方法将会使用新 class 替换当前正在运行的 class，这样我们就完成了类的修改。</p><p><code>com.agent.AgentMain</code> 的代码如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>agent</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">RandomAccessFile</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>instrument<span class="token punctuation">.</span></span><span class="token class-name">ClassDefinition</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>instrument<span class="token punctuation">.</span></span><span class="token class-name">Instrumentation</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>instrument<span class="token punctuation">.</span></span><span class="token class-name">UnmodifiableClassException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>objectweb<span class="token punctuation">.</span>asm<span class="token punctuation">.</span></span><span class="token class-name">ClassReader</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AgentMain</span>  <span class="token punctuation">{</span>    <span class="token comment">/**     * @param agentArgs 外部传入的参数，类似于 main 函数 args     * @param inst     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">agentmain</span><span class="token punctuation">(</span><span class="token class-name">String</span> agentArgs<span class="token punctuation">,</span> <span class="token class-name">Instrumentation</span> inst<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 从 agentArgs 获取外部参数</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"start agentmain."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 这里将会传入 class 文件路径</span>        <span class="token class-name">String</span> path <span class="token operator">=</span> agentArgs<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment">// 读取 class 文件字节码</span>            <span class="token class-name">RandomAccessFile</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RandomAccessFile</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> f<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            f<span class="token punctuation">.</span><span class="token function">readFully</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 使用 asm 框架获取类名</span>            <span class="token keyword">final</span> <span class="token class-name">String</span> clazzName <span class="token operator">=</span> <span class="token function">readClassName</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// inst.getAllLoadedClasses 方法将会获取所有已加载的 class</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Class</span> clazz <span class="token operator">:</span> inst<span class="token punctuation">.</span><span class="token function">getAllLoadedClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// 匹配需要替换 class</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>clazz<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>clazzName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token class-name">ClassDefinition</span> definition <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassDefinition</span><span class="token punctuation">(</span>clazz<span class="token punctuation">,</span> bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// 使用指定的 class 替换当前系统正在使用 class</span>                    inst<span class="token punctuation">.</span><span class="token function">redefineClasses</span><span class="token punctuation">(</span>definition<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"agentmain error."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/**      *  使用 asm 读取类名     * @param bytes     * @return     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">readClassName</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ClassReader</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>其中，<code>ClassReader</code> 类需要引入 Jar 包：</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>asm<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>asm<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></code></pre><h4 id="配置-MANIFEST-MF"><a href="#配置-MANIFEST-MF" class="headerlink" title="配置 MANIFEST.MF"></a>配置 MANIFEST.MF</h4><p>完成代码之后，我们还需要往 jar 包 <code>MANIFEST.MF</code> 写入以下属性。</p><pre class="language-none"><code class="language-none">## 指定 agent-main 全名Agent-Class: com.agent.AgentMain## 设置权限，默认为 false，没有权限替换 classCan-Redefine-Classes: true</code></pre><p>使用 <code>maven-assembly-plugin</code>，将上面的属性写入文件中：</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>maven-assembly-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>finalName</span><span class="token punctuation">&gt;</span></span>hotswap-jdk<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>finalName</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appendAssemblyId</span><span class="token punctuation">&gt;</span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appendAssemblyId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>descriptorRefs</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>descriptorRef</span><span class="token punctuation">&gt;</span></span>jar-with-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>descriptorRef</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>descriptorRefs</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>archive</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>manifestEntries</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Agent-Class</span><span class="token punctuation">&gt;</span></span>com.agent.AgentMain<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Agent-Class</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Can-Redefine-Classes</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Can-Redefine-Classes</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Can-Retransform-Classes</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Can-Retransform-Classes</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>manifestEntries</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>manifest</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mainClass</span><span class="token punctuation">&gt;</span></span>com.main.JvmAttachMain<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mainClass</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>manifest</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>archive</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executions</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>make-assembly<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>phase</span><span class="token punctuation">&gt;</span></span>package<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>phase</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">&gt;</span></span>single<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executions</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span></code></pre><h4 id="使用-Attach-API"><a href="#使用-Attach-API" class="headerlink" title="使用 Attach API"></a>使用 Attach API</h4><p>以上完成热更新主要代码，接着使用 Attach API，连接目标虚拟机，触发热更新的代码。</p><p>在这个启动类，我们最终调用 <code>VirtualMachine#loadAgent</code>，JVM 将会使用上面 AgentMain 方法使用传入 class 文件替换正在运行 class。</p><p><code>com.main.JvmAttachMain</code> 的代码如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>main</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>tools<span class="token punctuation">.</span>attach<span class="token punctuation">.</span></span><span class="token class-name">VirtualMachine</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JvmAttachMain</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">String</span> pid <span class="token operator">=</span> <span class="token string">"41556"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> classPath <span class="token operator">=</span> <span class="token string">"E:\\RedefineSuccess.class"</span><span class="token punctuation">;</span>        <span class="token comment">// 获取 Agent jar 路径</span>        <span class="token class-name">String</span> jarPath <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"user.dir"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token class-name">File</span><span class="token punctuation">.</span>separator <span class="token operator">+</span> <span class="token string">"target"</span> <span class="token operator">+</span> <span class="token class-name">File</span><span class="token punctuation">.</span>separator <span class="token operator">+</span> <span class="token string">"hotswap-jdk.jar"</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"this redefine jar path:"</span> <span class="token operator">+</span> jarPath<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">VirtualMachine</span> vm <span class="token operator">=</span> <span class="token class-name">VirtualMachine</span><span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span>pid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 待绑定的jvm进程的pid号</span>            <span class="token comment">// 运行最终 AgentMain 中方法</span>            vm<span class="token punctuation">.</span><span class="token function">loadAgent</span><span class="token punctuation">(</span>jarPath<span class="token punctuation">,</span>classPath<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ERROR:"</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h4><ol><li>将 <code>com.agent.AgentMain</code> 打包成 <code>hotswap-jdk.jar</code></li><li>运行测试类 RedefineSuccess.java</li><li> 通过 <code>jps</code> 获取到进程 ID</li><li> 将进程 ID 和反编译生成的 class 文件传入 <code>com.main.JvmAttachMain</code> </li><li>运行 <code>com.main.JvmAttachMain</code> </li></ol><p><img src="/images/2020/08/1598497095868.png" alt="1598497095868" loading="lazy"></p><h3 id="相关问题"><a href="#相关问题" class="headerlink" title="相关问题"></a>相关问题</h3><h4 id="编译引入-tools-jar"><a href="#编译引入-tools-jar" class="headerlink" title="编译引入 tools.jar"></a>编译引入 tools.jar</h4><p>由于 Attach API 位于 tools.jar 中，而在 JDK8 之前 tools.jar 与我们常用 JDK jar 包并不在同一个位置，所以编译与运行过程可能找不到该 jar 包，从而导致报错。</p><p>则需要 Maven 引入：</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.sun<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>tools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${java.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>system<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>systemPath</span><span class="token punctuation">&gt;</span></span>${java.home}/../lib/tools.jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>systemPath</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></code></pre><h4 id="程序运行中-tools-jar"><a href="#程序运行中-tools-jar" class="headerlink" title="程序运行中 tools.jar"></a>程序运行中 tools.jar</h4><p>运行程序时抛出 <code>java.lang.NoClassDefFoundError</code>，主要原因还是系统未找到 tools.jar 导致。</p><p><img src="/images/2020/08/1598497278943.png" alt="1598497278943" loading="lazy"></p><p>在运行参数加入 <code>-Xbootclasspath/a:${java_home}/lib/tools.jar</code>，完整运行命令如下：</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">java <span class="token operator">-</span>Xbootclasspath<span class="token operator">/</span>a:$<span class="token punctuation">{</span>java_home<span class="token punctuation">}</span>\lib\tools<span class="token punctuation">.</span>jar <span class="token operator">-</span>jar hotswap<span class="token operator">-</span>jdk<span class="token punctuation">.</span>jar 22132 E:\RedefineSuccess<span class="token punctuation">.</span><span class="token keyword">class</span></code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;热更新原理&quot;&gt;&lt;a href=&quot;#热更新原理&quot; class=&quot;headerlink&quot; title=&quot;热更新原理&quot;&gt;&lt;/a&gt;热更新原理&lt;/h3&gt;&lt;p&gt;Arthas 热更新功能看起来很神奇，实际上离不开 JDK 一些 API，分别为 instrument API 与 attach API。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://jueee.github.io/categories/Java/"/>
    
      <category term="Arthas" scheme="https://jueee.github.io/categories/Java/Arthas/"/>
    
    
      <category term="Java" scheme="https://jueee.github.io/tags/Java/"/>
    
      <category term="Java诊断" scheme="https://jueee.github.io/tags/Java%E8%AF%8A%E6%96%AD/"/>
    
      <category term="Arthas" scheme="https://jueee.github.io/tags/Arthas/"/>
    
  </entry>
  
  <entry>
    <title>使用 lambda 表达式进行集合类型转换</title>
    <link href="https://jueee.github.io/2020/08/2020-08-24-%E4%BD%BF%E7%94%A8lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%BF%9B%E8%A1%8C%E9%9B%86%E5%90%88%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"/>
    <id>https://jueee.github.io/2020/08/2020-08-24-%E4%BD%BF%E7%94%A8lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%BF%9B%E8%A1%8C%E9%9B%86%E5%90%88%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</id>
    <published>2020-08-24T00:00:00.000Z</published>
    <updated>2020-09-02T09:00:11.030Z</updated>
    
    <content type="html"><![CDATA[<h3 id="目标类型-List"><a href="#目标类型-List" class="headerlink" title="目标类型 List"></a>目标类型 List</h3><h4 id="转-List"><a href="#转-List" class="headerlink" title="转 List"></a>转 List</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list1 <span class="token operator">=</span> <span class="token class-name">Lists</span><span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list2 <span class="token operator">=</span> list1<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>string <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"stream().map()处理之后："</span> <span class="token operator">+</span> string<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><a id="more"></a><h4 id="转-Map"><a href="#转-Map" class="headerlink" title="转 Map"></a>转 Map</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SystemTabMenu</span><span class="token punctuation">&gt;</span></span> allList <span class="token operator">=</span> <span class="token class-name">Lists</span><span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> allList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>    <span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span><span class="token class-name">SystemTabMenu</span><span class="token operator">::</span><span class="token function">getParentid</span><span class="token punctuation">,</span> <span class="token class-name">SystemTabMenu</span><span class="token operator">::</span><span class="token function">getParentid</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="转-Map-lt-String-List-gt"><a href="#转-Map-lt-String-List-gt" class="headerlink" title="转 Map<String, List>"></a>转 Map&lt;String, List&gt;</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SystemTabMenu</span><span class="token punctuation">&gt;</span></span> allList <span class="token operator">=</span> <span class="token class-name">Lists</span><span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">SystemTabMenu</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> allList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>    <span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">groupingBy</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span> e<span class="token punctuation">.</span><span class="token function">getParentid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="过滤出一个元素"><a href="#过滤出一个元素" class="headerlink" title="过滤出一个元素"></a>过滤出一个元素</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> users <span class="token operator">=</span> <span class="token class-name">Lists</span><span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">User</span> match <span class="token operator">=</span> users<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> user<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findAny</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;目标类型-List&quot;&gt;&lt;a href=&quot;#目标类型-List&quot; class=&quot;headerlink&quot; title=&quot;目标类型 List&quot;&gt;&lt;/a&gt;目标类型 List&lt;/h3&gt;&lt;h4 id=&quot;转-List&quot;&gt;&lt;a href=&quot;#转-List&quot; class=&quot;headerlink&quot; title=&quot;转 List&quot;&gt;&lt;/a&gt;转 List&lt;/h4&gt;&lt;pre class=&quot;language-java&quot; data-language=&quot;java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; list1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Lists&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;newArrayList&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token class-name&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; list2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; list1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;string &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;stream().map()处理之后：&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; string&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Collectors&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toList&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://jueee.github.io/categories/Java/"/>
    
      <category term="JavaClass" scheme="https://jueee.github.io/categories/Java/JavaClass/"/>
    
    
      <category term="JavaClass" scheme="https://jueee.github.io/tags/JavaClass/"/>
    
      <category term="Java" scheme="https://jueee.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>通过 UnxUtils 在 Windows 上使用 Unix 命令</title>
    <link href="https://jueee.github.io/2020/08/2020-08-21-%E9%80%9A%E8%BF%87UnxUtils%E5%9C%A8Windows%E4%B8%8A%E4%BD%BF%E7%94%A8Unix%E5%91%BD%E4%BB%A4/"/>
    <id>https://jueee.github.io/2020/08/2020-08-21-%E9%80%9A%E8%BF%87UnxUtils%E5%9C%A8Windows%E4%B8%8A%E4%BD%BF%E7%94%A8Unix%E5%91%BD%E4%BB%A4/</id>
    <published>2020-08-21T00:00:00.000Z</published>
    <updated>2020-09-02T09:00:11.027Z</updated>
    
    <content type="html"><![CDATA[<p>UnxUtils 是一个可以支持<strong>在 Windows 下使用 linux 命令的工具</strong>，用习惯了 linux 之后，感觉 Windows 的 dos 命令实在是太难用了，发现了这个工具，非常的小，装了它之后，把路径加入到环境变量中就支持常用的 linux 命令了。</p><a id="more"></a><p>介绍：<span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvVW54VXRpbHM=">https://en.wikipedia.org/wiki/UnxUtils<i class="fa fa-external-link-alt"></i></span></p><p>下载：<span class="exturl" data-url="aHR0cHM6Ly9zb3VyY2Vmb3JnZS5uZXQvcHJvamVjdHMvdW54dXRpbHMv">https://sourceforge.net/projects/unxutils/<i class="fa fa-external-link-alt"></i></span></p><p>下载完成后，解压 UnxUtils.zip，然后把 UnxUtils 这个目录下的 \usr\local\wbin 加入到环境变量里面就可以了。</p><p><img src="/images/2020/08/1598008019072.png" alt="1598008019072" loading="lazy"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;UnxUtils是一个可以支持&lt;strong&gt;在Windows下使用linux命令的工具&lt;/strong&gt;，用习惯了linux之后，感觉Windows的dos命令实在是太难用了，发现了这个工具，非常的小，装了它之后，把路径加入到环境变量中就支持常用的linux命令了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="软件" scheme="https://jueee.github.io/categories/%E8%BD%AF%E4%BB%B6/"/>
    
    
      <category term="软件" scheme="https://jueee.github.io/tags/%E8%BD%AF%E4%BB%B6/"/>
    
  </entry>
  
</feed>
