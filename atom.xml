<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小决的专栏</title>
  
  <subtitle>进一寸有一寸的欢喜</subtitle>
  <link href="https://jueee.github.io/atom.xml" rel="self"/>
  
  <link href="https://jueee.github.io/"/>
  <updated>2021-06-07T11:12:13.187Z</updated>
  <id>https://jueee.github.io/</id>
  
  <author>
    <name>小决</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux 安装 MySQL7 版本</title>
    <link href="https://jueee.github.io/2021/06/2021-06-04-Linux%E5%AE%89%E8%A3%85MySQL7%E7%89%88%E6%9C%AC/"/>
    <id>https://jueee.github.io/2021/06/2021-06-04-Linux%E5%AE%89%E8%A3%85MySQL7%E7%89%88%E6%9C%AC/</id>
    <published>2021-06-04T00:00:00.000Z</published>
    <updated>2021-06-07T11:12:13.187Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><h4 id="查看服务器版本"><a href="#查看服务器版本" class="headerlink" title="查看服务器版本"></a>查看服务器版本</h4><p>系统版本：</p><pre class="language-none"><code class="language-none">$ lsb_release -crRelease:        9.12Codename:       stretch</code></pre><p>内核版本：</p><pre class="language-none"><code class="language-none">$ uname -r4.9.0-12-amd64</code></pre><h4 id="下载-MySQL"><a href="#下载-MySQL" class="headerlink" title="下载 MySQL"></a>下载 MySQL</h4><p>根据服务器版本，下载 MySQL 安装包。</p><p>下载地址：<span class="exturl" data-url="aHR0cHM6Ly9kb3dubG9hZHMubXlzcWwuY29tL2FyY2hpdmVzL2NvbW11bml0eS8=">https://downloads.mysql.com/archives/community/<i class="fa fa-external-link-alt"></i></span></p><h4 id="安装-MySQL"><a href="#安装-MySQL" class="headerlink" title="安装 MySQL"></a>安装 MySQL</h4><p>以下载的 <code>mysql-server_5.7.18-1debian9_amd64.deb-bundle.tar</code> 为例进行说明。</p><p>解压 tar：</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">gzip</span> mysql-server_5.7.18-1debian9_amd64.deb-bundle.tar</code></pre><p>解压 tar.gz：</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">tar</span> -zxvf mysql-server_5.7.18-1debian9_amd64.deb-bundle.tar.gz</code></pre><p>安装 deb 包：</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ dpkg -i *.deb</code></pre><h4 id="初始化-MySQL"><a href="#初始化-MySQL" class="headerlink" title="初始化 MySQL"></a>初始化 MySQL</h4><pre class="language-bash" data-language="bash"><code class="language-bash">$ /usr/sbin/mysqld --defaults-file<span class="token operator">=</span>/home/ddb/mysql/my3306.cnf --user<span class="token operator">=</span>ddb --initialize</code></pre><h4 id="启动-MySQL"><a href="#启动-MySQL" class="headerlink" title="启动 MySQL"></a>启动 MySQL</h4><pre class="language-bash" data-language="bash"><code class="language-bash">$ mysqld_safe --defaults-file<span class="token operator">=</span>/home/ddb/mysql/my3306.cnf <span class="token operator">&amp;</span></code></pre><h4 id="查看-root-密码"><a href="#查看-root-密码" class="headerlink" title="查看 root 密码"></a>查看 root 密码</h4><p>查看 MySQL 数据目录下的 <code>mysqld.log</code> 日志文件，如下图所示红框的地方即为 root 的初始密码。</p><p><img src="/images/2021/06/image-20210604114352669.png" alt="image-20210604114352669" loading="lazy"></p><h4 id="访问-root"><a href="#访问-root" class="headerlink" title="访问 root"></a>访问 root</h4><pre class="language-bash" data-language="bash"><code class="language-bash">$ mysql  --defaults-file<span class="token operator">=</span>/home/ddb/mysql/my4336.cnf -uroot -pEnter password:mysql<span class="token operator">&gt;</span> show databases<span class="token punctuation">;</span>ERROR <span class="token number">1820</span> <span class="token punctuation">(</span>HY000<span class="token punctuation">)</span>: You must reset your password using ALTER <span class="token environment constant">USER</span> statement before executing this statement.</code></pre><p>此时，必须修改 root 密码。</p><h4 id="修改-root-密码"><a href="#修改-root-密码" class="headerlink" title="修改 root 密码"></a>修改 root 密码</h4><pre class="language-mysql" data-language="mysql"><code class="language-mysql">SET PASSWORD = PASSWORD('newpassword');ALTER USER 'root'@'localhost' PASSWORD EXPIRE NEVER;FLUSH PRIVILEGES;</code></pre><h3 id="问题处理"><a href="#问题处理" class="headerlink" title="问题处理"></a>问题处理</h3><h4 id="安装-deb-异常"><a href="#安装-deb-异常" class="headerlink" title="安装 deb 异常"></a>安装 deb 异常</h4><p>安装 deb 包时出现如下异常：</p><pre class="language-none"><code class="language-none">dpkg: dependency problems prevent configuration of mysql-community-server: mysql-community-server depends on libaio1 (&gt;= 0.3.93); however:  Package libaio1 is not installed. mysql-community-server depends on libmecab2; however:  Package libmecab2 is not installed. mysql-community-server depends on libnuma1 (&gt;= 2.0.11); however:  Package libnuma1 is not installed.</code></pre><p>解决方式：</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">apt-get</span> <span class="token function">install</span> libaio1 libmecab2 libnuma1</code></pre><h4 id="初始化异常"><a href="#初始化异常" class="headerlink" title="初始化异常"></a>初始化异常</h4><pre class="language-none"><code class="language-none">2021-06-04T11:13:04.485999+08:00 0 [Warning] TIMESTAMP with implicit DEFAULT value is deprecated. Please use --explicit_defaults_for_timestamp server option (see documentation for more details).2021-06-04T11:13:04.487043+08:00 0 [ERROR] --initialize specified but the data directory has files in it. Aborting.2021-06-04T11:13:04.487070+08:00 0 [ERROR] Aborting</code></pre><p>这是由于初始化数据目录不为空，清空数据目录下的所有文件即可。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;安装步骤&quot;&gt;&lt;a href=&quot;#安装步骤&quot; class=&quot;headerlink&quot; title=&quot;安装步骤&quot;&gt;&lt;/a&gt;安装步骤&lt;/h3&gt;&lt;h4 id=&quot;查看服务器版本&quot;&gt;&lt;a href=&quot;#查看服务器版本&quot; class=&quot;headerlink&quot; title=&quot;查看服</summary>
      
    
    
    
    <category term="Database" scheme="https://jueee.github.io/categories/Database/"/>
    
    <category term="MySQL" scheme="https://jueee.github.io/categories/Database/MySQL/"/>
    
    
    <category term="MySQL" scheme="https://jueee.github.io/tags/MySQL/"/>
    
    <category term="Database" scheme="https://jueee.github.io/tags/Database/"/>
    
  </entry>
  
  <entry>
    <title>Windows 安装 MySQL8 版本</title>
    <link href="https://jueee.github.io/2021/06/2021-06-03-Windows%E5%AE%89%E8%A3%85MySQL8%E7%89%88%E6%9C%AC/"/>
    <id>https://jueee.github.io/2021/06/2021-06-03-Windows%E5%AE%89%E8%A3%85MySQL8%E7%89%88%E6%9C%AC/</id>
    <published>2021-06-03T00:00:00.000Z</published>
    <updated>2021-06-07T11:12:13.164Z</updated>
    
    <content type="html"><![CDATA[<p>之前本地只安装了 MySQL 7 的版本，现在需要再安装一个 MySQL 8 版本。并同时运行两个 MySQL 实例。</p><a id="more"></a><h3 id="安装-MySQL-8"><a href="#安装-MySQL-8" class="headerlink" title="安装 MySQL 8"></a>安装 MySQL 8</h3><h4 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h4><p>首先去官网下载安装包。</p><p>下载地址：<span class="exturl" data-url="aHR0cHM6Ly9kZXYubXlzcWwuY29tL2Rvd25sb2Fkcy9teXNxbC8=">https://dev.mysql.com/downloads/mysql/<i class="fa fa-external-link-alt"></i></span></p><h4 id="初始化配置文件"><a href="#初始化配置文件" class="headerlink" title="初始化配置文件"></a>初始化配置文件</h4><p>在 MySQL 8 安装目录下，新增 my.ini 文件。</p><pre class="language-ini" data-language="ini"><code class="language-ini"><span class="token selector">[mysqld]</span><span class="token comment"># 设置3308端口</span><span class="token constant">port</span><span class="token attr-value"><span class="token punctuation">=</span>3308</span><span class="token comment"># 设置mysql的安装目录</span><span class="token constant">basedir</span><span class="token attr-value"><span class="token punctuation">=</span>"C:/Program Files (x86)/MySQL/mysql-8.0.25-winx64/"</span><span class="token comment"># 设置mysql数据库的数据的存放目录</span><span class="token constant">datadir</span><span class="token attr-value"><span class="token punctuation">=</span>"C:/ProgramData/MySQL/mysql-8.0.25-winx64/data/"</span><span class="token comment"># 允许最大连接数</span><span class="token constant">max_connections</span><span class="token attr-value"><span class="token punctuation">=</span>200</span><span class="token comment"># 允许连接失败的次数。这是为了防止有人从该主机试图攻击数据库系统</span><span class="token constant">max_connect_errors</span><span class="token attr-value"><span class="token punctuation">=</span>10</span><span class="token comment"># 服务端使用的字符集默认为utf8mb4</span><span class="token constant">character-set-server</span><span class="token attr-value"><span class="token punctuation">=</span>utf8mb4</span><span class="token comment"># 创建新表时将使用的默认存储引擎</span><span class="token constant">default-storage-engine</span><span class="token attr-value"><span class="token punctuation">=</span>INNODB</span><span class="token selector">[mysql]</span><span class="token comment"># 设置mysql客户端默认字符集</span><span class="token constant">default-character-set</span><span class="token attr-value"><span class="token punctuation">=</span>utf8</span><span class="token selector">[client]</span><span class="token comment"># 设置mysql客户端连接服务端时默认使用的端口</span><span class="token constant">port</span><span class="token attr-value"><span class="token punctuation">=</span>3308</span><span class="token constant">default-character-set</span><span class="token attr-value"><span class="token punctuation">=</span>utf8mb4</span></code></pre><h4 id="初始化-MySQL-8"><a href="#初始化-MySQL-8" class="headerlink" title="初始化 MySQL 8"></a>初始化 MySQL 8</h4><pre class="language-none"><code class="language-none">$ mysqld.exe --initialize --user=mysql --console2021-06-03T07:33:21.066330Z 0 [System] [MY-013169] [Server] C:\Program Files (x86)\MySQL\mysql-8.0.25-winx64\bin\mysqld.exe (mysqld 8.0.25) initializing of server in progress as process 245122021-06-03T07:33:21.077089Z 1 [System] [MY-013576] [InnoDB] InnoDB initialization has started.2021-06-03T07:33:22.039158Z 1 [System] [MY-013577] [InnoDB] InnoDB initialization has ended.2021-06-03T07:33:24.440831Z 6 [Note] [MY-010454] [Server] A temporary password is generated for root@localhost: Gy8=d#vCL&gt;uy</code></pre><h4 id="注册服务"><a href="#注册服务" class="headerlink" title="注册服务"></a>注册服务</h4><pre class="language-none"><code class="language-none">$ mysqld --install mysql8 --defaults-file="C:\Program Files (x86)\MySQL\mysql-8.0.25-winx64\my.ini" mysql8</code></pre><h4 id="修改注册表"><a href="#修改注册表" class="headerlink" title="修改注册表"></a>修改注册表</h4><p>注册表位置：计算机 \HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\mysql8</p><p><img src="/images/2021/06/image-20210603154340439.png" alt="image-20210603154340439" loading="lazy"></p><h4 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h4><pre class="language-none"><code class="language-none">$ net start mysql8mysql8 服务正在启动 .mysql8 服务已经启动成功。</code></pre><h4 id="登录-MySQL"><a href="#登录-MySQL" class="headerlink" title="登录 MySQL"></a>登录 MySQL</h4><p>这时提示需要密码，然后就是用你上面初始化 MySQL 最后的密码登录</p><pre class="language-none"><code class="language-none">$ mysql -u root -pEnter password: ************Welcome to the MySQL monitor.  Commands end with ; or \g.Your MySQL connection id is 8Server version: 8.0.25</code></pre><h4 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h4><pre class="language-none"><code class="language-none">mysql&gt; ALTER USER root@localhost IDENTIFIED  BY 'password';Query OK, 0 rows affected (0.01 sec)</code></pre><h4 id="修改身份验证机制"><a href="#修改身份验证机制" class="headerlink" title="修改身份验证机制"></a>修改身份验证机制</h4><p>MySQL 8.0 默认使用 caching_sha2_password 身份验证机制，可能使一些客户端访问异常，建议修改身份验证机制为原先的 mysql_native_password。</p><pre class="language-none"><code class="language-none">mysql&gt; alter user 'root'@'localhost' identified by 'password' password expire never;Query OK, 0 rows affected (0.01 sec)mysql&gt; alter user 'root'@'localhost' identified with mysql_native_password by 'password';Query OK, 0 rows affected (0.01 sec)mysql&gt; flush privileges;Query OK, 0 rows affected (0.00 sec)</code></pre><h4 id="访问-MySQL"><a href="#访问-MySQL" class="headerlink" title="访问 MySQL"></a>访问 MySQL</h4><pre class="language-none"><code class="language-none">mysql&gt; select version();+-----------+| version() |+-----------+| 8.0.25    |+-----------+1 row in set (0.00 sec)</code></pre><h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><h4 id="删除-data-文件夹"><a href="#删除-data-文件夹" class="headerlink" title="删除 data 文件夹"></a>删除 data 文件夹</h4><p>初始化 MySQL 时出现如下异常：</p><pre class="language-none"><code class="language-none">$ mysqld.exe --initialize --user=mysql --console2021-06-03T07:22:20.315062Z 0 [System] [MY-013169] [Server] C:\Program Files (x86)\MySQL\mysql-8.0.25-winx64\bin\mysqld.exe (mysqld 8.0.25) initializing of server in progress as process 282522021-06-03T07:22:20.317336Z 0 [ERROR] [MY-010457] [Server] --initialize specified but the data directory has files in it. Aborting.2021-06-03T07:22:20.317345Z 0 [ERROR] [MY-013236] [Server] The designated data directory C:\ProgramData\MySQL\mysql-8.0.25-winx64\data\ is unusable. You can remove all files that the server added to it.2021-06-03T07:22:20.317909Z 0 [ERROR] [MY-010119] [Server] Aborting2021-06-03T07:22:20.318138Z 0 [System] [MY-010910] [Server] C:\Program Files (x86)\MySQL\mysql-8.0.25-winx64\bin\mysqld.exe: Shutdown complete (mysqld 8.0.25)  MySQL Community Server - GPL.</code></pre><p>my.ini 配置文件有问题，在查询日志并解决后，删除 data 目录下的所有文件，再次初始化即可。</p><h4 id="服务启动异常"><a href="#服务启动异常" class="headerlink" title="服务启动异常"></a>服务启动异常</h4><p>使用 net 启动服务时，发现异常：</p><pre class="language-none"><code class="language-none">$ net start mysql8mysql8 服务正在启动 .mysql8 服务无法启动。服务没有报告任何错误。请键入 NET HELPMSG 3534 以获得更多的帮助。</code></pre><p>很可能是注册表中的 ImagePath 路径有问题，按照安装说明中进行修改即可。</p><h4 id="客户端连接异常"><a href="#客户端连接异常" class="headerlink" title="客户端连接异常"></a>客户端连接异常</h4><p>客户端连接 MySQL 8 出现异常：</p><pre class="language-none"><code class="language-none">Unable to load authentication plugin 'caching_sha2_password'.</code></pre><p>这是 MySQL 8.0 版本才出现的问题，原因是 MySQL 8.0 默认使用 caching_sha2_password 身份验证机制 —— 从原来的 mysql_native_password 更改为 caching_sha2_password。</p><p>解决办法：</p><p>可以更换版本但是感觉治标不治本，建议修改身份验证机制</p><ol><li><p>登陆 MySQL ，输入：mysql -uroot -p   接着输入密码</p></li><li><p>登陆 mysql 成功之后输入：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">user</span> <span class="token string">'root'</span><span class="token variable">@'localhost'</span> identified <span class="token keyword">by</span> <span class="token string">'password'</span> password expire never<span class="token punctuation">;</span><span class="token keyword">alter</span> <span class="token keyword">user</span> <span class="token string">'root'</span><span class="token variable">@'localhost'</span> identified <span class="token keyword">with</span> mysql_native_password <span class="token keyword">by</span> <span class="token string">'password'</span>flush <span class="token keyword">privileges</span><span class="token punctuation">;</span></code></pre><p>其中 password 为 MySQL 的密码。</p></li></ol><p>再次使用客户端连接，即可正常。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;之前本地只安装了 MySQL 7 的版本，现在需要再安装一个 MySQL 8 版本。并同时运行两个MySQL 实例。&lt;/p&gt;</summary>
    
    
    
    <category term="Database" scheme="https://jueee.github.io/categories/Database/"/>
    
    <category term="MySQL" scheme="https://jueee.github.io/categories/Database/MySQL/"/>
    
    
    <category term="MySQL" scheme="https://jueee.github.io/tags/MySQL/"/>
    
    <category term="Database" scheme="https://jueee.github.io/tags/Database/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 操作 Json 数据相关使用总结</title>
    <link href="https://jueee.github.io/2021/06/2021-06-02-MySQL%E6%93%8D%E4%BD%9CJson%E6%95%B0%E6%8D%AE%E7%9B%B8%E5%85%B3%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"/>
    <id>https://jueee.github.io/2021/06/2021-06-02-MySQL%E6%93%8D%E4%BD%9CJson%E6%95%B0%E6%8D%AE%E7%9B%B8%E5%85%B3%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</id>
    <published>2021-06-02T00:00:00.000Z</published>
    <updated>2021-06-07T11:12:13.124Z</updated>
    
    <content type="html"><![CDATA[<p>在项目中，有部分数据是以 JsonObject 和 JsonArray 的形式直接存储在 MySQL 中的。</p><p>如果想对 这部分数据进行查询 等操作，非常不便。</p><p>经查询，MySQL 5.7.8 新增了对 Json 数据的相关支持，MySQL 8.0.4 新增了 Json 表函数的功能。</p><p>通过使用 内置的 函数，可以非常方便的对以 JsonObject 和 JsonArray 的形式直接存储在 MySQL 中的字段，进行查找、排序等操作。</p><p>本文总结了 MySQL 对 Json 操作的相关用法。</p><a id="more"></a><h3 id="MySQL-Json-支持"><a href="#MySQL-Json-支持" class="headerlink" title="MySQL Json 支持"></a>MySQL Json 支持</h3><p>MySQL 5.7.8 新增了对 Json 数据的相关支持，可以对 JsonObject 数据进行解析、查询等操作。</p><p>MySQL 8.0.4 新增了 Json 表函数的功能，可以将 JsonArray 数据解析为表格形式，再进行查询等操作。</p><p>同时，也可以通过 Json 函数建立虚拟列，并加相关索引，提供检索效率。</p><p>本博客总结 MySQL 对 Json 操作的相关用法。</p><p>对字符串列 JSON 格式的字符串：</p><ul><li>自动验证存储在 Json 列中的 Json 文档 。无效的文档会产生错误。</li><li>优化的存储格式。存储在 Json 列中的 Json 文档 被转换为允许有效访问文档元素的内部格式。</li></ul><p>此外，还可以使用 SQL 函数对 Json 值进行操作，例如创建、操作和搜索。</p><h4 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h4><ul><li><span class="exturl" data-url="aHR0cHM6Ly9kZXYubXlzcWwuY29tL2RvYy9yZWxub3Rlcy9teXNxbC81LjcvZW4v">MySQL 5.7 更新日志<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9kZXYubXlzcWwuY29tL2RvYy9yZWxub3Rlcy9teXNxbC81LjcvZW4vbmV3cy01LTctOC5odG1sI215c3FsZC01LTctOC1qc29u">MySQL 5.7.8 中 Json 更新说明<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9kZXYubXlzcWwuY29tL2RvYy9yZWZtYW4vNS43L2VuL2pzb24uaHRtbA==">MySQL 5.7.8 中 Json 数据类型<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9kZXYubXlzcWwuY29tL2RvYy9yZWxub3Rlcy9teXNxbC84LjAvZW4v">MySQL 8.0 更新日志<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9kZXYubXlzcWwuY29tL2RvYy9yZWZtYW4vOC4wL2VuL2pzb24tdGFibGUtZnVuY3Rpb25zLmh0bWw=">MySQL 8.0.4 中 Json 表函数<i class="fa fa-external-link-alt"></i></span></li></ul><h3 id="Json-函数汇总"><a href="#Json-函数汇总" class="headerlink" title="Json 函数汇总"></a>Json 函数汇总</h3><p><span class="exturl" data-url="aHR0cHM6Ly9kZXYubXlzcWwuY29tL2RvYy9yZWZtYW4vNS43L2VuL2pzb24tZnVuY3Rpb25zLmh0bWw=">MySQL 官方<i class="fa fa-external-link-alt"></i></span> 列出 json 相关的函数，完整列表如下:</p><table><thead><tr><th align="left">分类</th><th align="left">函数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><span class="exturl" data-url="aHR0cHM6Ly9kZXYubXlzcWwuY29tL2RvYy9yZWZtYW4vNS43L2VuL2pzb24tY3JlYXRpb24tZnVuY3Rpb25zLmh0bWw=">创建 json<i class="fa fa-external-link-alt"></i></span></td><td align="left"><span class="exturl" data-url="aHR0cHM6Ly9kZXYubXlzcWwuY29tL2RvYy9yZWZtYW4vNS43L2VuL2pzb24tY3JlYXRpb24tZnVuY3Rpb25zLmh0bWwjZnVuY3Rpb25fanNvbi1hcnJheQ==">JSON_ARRAY<i class="fa fa-external-link-alt"></i></span></td><td align="left">创建 json 数组</td></tr><tr><td align="left"></td><td align="left"><span class="exturl" data-url="aHR0cHM6Ly9kZXYubXlzcWwuY29tL2RvYy9yZWZtYW4vNS43L2VuL2pzb24tY3JlYXRpb24tZnVuY3Rpb25zLmh0bWwjZnVuY3Rpb25fanNvbi1vYmplY3Q="> JSON_OBJECT<i class="fa fa-external-link-alt"></i></span></td><td align="left">创建 json 对象</td></tr><tr><td align="left"></td><td align="left"><span class="exturl" data-url="aHR0cHM6Ly9kZXYubXlzcWwuY29tL2RvYy9yZWZtYW4vNS43L2VuL2pzb24tY3JlYXRpb24tZnVuY3Rpb25zLmh0bWwjZnVuY3Rpb25fanNvbi1xdW90ZQ=="> JSON_QUOTE<i class="fa fa-external-link-alt"></i></span></td><td align="left">将 json 转成 json 字符串类型</td></tr><tr><td align="left"><span class="exturl" data-url="aHR0cHM6Ly9kZXYubXlzcWwuY29tL2RvYy9yZWZtYW4vNS43L2VuL2pzb24tc2VhcmNoLWZ1bmN0aW9ucy5odG1s">查询 json<i class="fa fa-external-link-alt"></i></span></td><td align="left"><span class="exturl" data-url="aHR0cHM6Ly9kZXYubXlzcWwuY29tL2RvYy9yZWZtYW4vNS43L2VuL2pzb24tc2VhcmNoLWZ1bmN0aW9ucy5odG1sI2Z1bmN0aW9uX2pzb24tY29udGFpbnM=">JSON_CONTAINS<i class="fa fa-external-link-alt"></i></span></td><td align="left">判断是否包含某个 json 值</td></tr><tr><td align="left"></td><td align="left"><span class="exturl" data-url="aHR0cHM6Ly9kZXYubXlzcWwuY29tL2RvYy9yZWZtYW4vNS43L2VuL2pzb24tc2VhcmNoLWZ1bmN0aW9ucy5odG1sI2Z1bmN0aW9uX2pzb24tY29udGFpbnMtcGF0aA=="> JSON_CONTAINS_PATH<i class="fa fa-external-link-alt"></i></span></td><td align="left">判断某个路径下是否包含 json 值</td></tr><tr><td align="left"></td><td align="left"><span class="exturl" data-url="aHR0cHM6Ly9kZXYubXlzcWwuY29tL2RvYy9yZWZtYW4vNS43L2VuL2pzb24tc2VhcmNoLWZ1bmN0aW9ucy5odG1sI2Z1bmN0aW9uX2pzb24tZXh0cmFjdA=="> JSON_EXTRACT<i class="fa fa-external-link-alt"></i></span></td><td align="left">提取 json 值</td></tr><tr><td align="left"></td><td align="left"><span class="exturl" data-url="aHR0cHM6Ly9kZXYubXlzcWwuY29tL2RvYy9yZWZtYW4vNS43L2VuL2pzb24tc2VhcmNoLWZ1bmN0aW9ucy5odG1sI29wZXJhdG9yX2pzb24tY29sdW1uLXBhdGg="> column-&gt;path<i class="fa fa-external-link-alt"></i></span></td><td align="left">JSON_EXTRACT 的简洁写法，MySQL 5.7.9 开始支持</td></tr><tr><td align="left"></td><td align="left"><span class="exturl" data-url="aHR0cHM6Ly9kZXYubXlzcWwuY29tL2RvYy9yZWZtYW4vNS43L2VuL2pzb24tc2VhcmNoLWZ1bmN0aW9ucy5odG1sI29wZXJhdG9yX2pzb24taW5saW5lLXBhdGg="> column-&gt;&gt;path<i class="fa fa-external-link-alt"></i></span></td><td align="left">JSON_UNQUOTE (column -&gt; path) 的简洁写法</td></tr><tr><td align="left"></td><td align="left"><span class="exturl" data-url="aHR0cHM6Ly9kZXYubXlzcWwuY29tL2RvYy9yZWZtYW4vNS43L2VuL2pzb24tc2VhcmNoLWZ1bmN0aW9ucy5odG1sI2Z1bmN0aW9uX2pzb24ta2V5cw=="> JSON_KEYS<i class="fa fa-external-link-alt"></i></span></td><td align="left">提取 json 中的键值为 json 数组</td></tr><tr><td align="left"></td><td align="left"><span class="exturl" data-url="aHR0cHM6Ly9kZXYubXlzcWwuY29tL2RvYy9yZWZtYW4vNS43L2VuL2pzb24tc2VhcmNoLWZ1bmN0aW9ucy5odG1sI2Z1bmN0aW9uX2pzb24tc2VhcmNo"> JSON_SEARCH<i class="fa fa-external-link-alt"></i></span></td><td align="left">按给定字符串关键字搜索 json，返回匹配的路径</td></tr><tr><td align="left"><span class="exturl" data-url="aHR0cHM6Ly9kZXYubXlzcWwuY29tL2RvYy9yZWZtYW4vNS43L2VuL2pzb24tbW9kaWZpY2F0aW9uLWZ1bmN0aW9ucy5odG1s">修改 json<i class="fa fa-external-link-alt"></i></span></td><td align="left"><span class="exturl" data-url="aHR0cHM6Ly9kZXYubXlzcWwuY29tL2RvYy9yZWZtYW4vNS43L2VuL2pzb24tbW9kaWZpY2F0aW9uLWZ1bmN0aW9ucy5odG1sI2Z1bmN0aW9uX2pzb24tYXBwZW5k">JSON_APPEND<i class="fa fa-external-link-alt"></i></span></td><td align="left">废弃，MySQL 5.7.9 开始改名为 json_array_append</td></tr><tr><td align="left"></td><td align="left"><span class="exturl" data-url="aHR0cHM6Ly9kZXYubXlzcWwuY29tL2RvYy9yZWZtYW4vNS43L2VuL2pzb24tbW9kaWZpY2F0aW9uLWZ1bmN0aW9ucy5odG1sI2Z1bmN0aW9uX2pzb24tYXJyYXktYXBwZW5k">JSON_ARRAY_APPEND<i class="fa fa-external-link-alt"></i></span></td><td align="left">末尾添加数组元素</td></tr><tr><td align="left"></td><td align="left"><span class="exturl" data-url="aHR0cHM6Ly9kZXYubXlzcWwuY29tL2RvYy9yZWZtYW4vNS43L2VuL2pzb24tbW9kaWZpY2F0aW9uLWZ1bmN0aW9ucy5odG1sI2Z1bmN0aW9uX2pzb24tYXJyYXktaW5zZXJ0"> JSON_ARRAY_INSERT<i class="fa fa-external-link-alt"></i></span></td><td align="left">插入数组元素</td></tr><tr><td align="left"></td><td align="left"><span class="exturl" data-url="aHR0cHM6Ly9kZXYubXlzcWwuY29tL2RvYy9yZWZtYW4vNS43L2VuL2pzb24tbW9kaWZpY2F0aW9uLWZ1bmN0aW9ucy5odG1sI2Z1bmN0aW9uX2pzb24taW5zZXJ0"> JSON_INSERT<i class="fa fa-external-link-alt"></i></span></td><td align="left">插入值（插入新值，但不替换已经存在的旧值）</td></tr><tr><td align="left"></td><td align="left"><span class="exturl" data-url="aHR0cHM6Ly9kZXYubXlzcWwuY29tL2RvYy9yZWZtYW4vNS43L2VuL2pzb24tbW9kaWZpY2F0aW9uLWZ1bmN0aW9ucy5odG1sI2Z1bmN0aW9uX2pzb24tbWVyZ2U=">JSON_MERGE<i class="fa fa-external-link-alt"></i></span></td><td align="left">合并 json 数组或对象</td></tr><tr><td align="left"></td><td align="left"><span class="exturl" data-url="aHR0cHM6Ly9kZXYubXlzcWwuY29tL2RvYy9yZWZtYW4vNS43L2VuL2pzb24tbW9kaWZpY2F0aW9uLWZ1bmN0aW9ucy5odG1sI2Z1bmN0aW9uX2pzb24tcmVtb3Zl"> JSON_REMOVE<i class="fa fa-external-link-alt"></i></span></td><td align="left">删除 json 数据</td></tr><tr><td align="left"></td><td align="left"><span class="exturl" data-url="aHR0cHM6Ly9kZXYubXlzcWwuY29tL2RvYy9yZWZtYW4vNS43L2VuL2pzb24tbW9kaWZpY2F0aW9uLWZ1bmN0aW9ucy5odG1sI2Z1bmN0aW9uX2pzb24tcmVwbGFjZQ=="> JSON_REPLACE<i class="fa fa-external-link-alt"></i></span></td><td align="left">替换值（只替换已经存在的旧值）</td></tr><tr><td align="left"></td><td align="left"><span class="exturl" data-url="aHR0cHM6Ly9kZXYubXlzcWwuY29tL2RvYy9yZWZtYW4vNS43L2VuL2pzb24tbW9kaWZpY2F0aW9uLWZ1bmN0aW9ucy5odG1sI2Z1bmN0aW9uX2pzb24tc2V0">JSON_SET<i class="fa fa-external-link-alt"></i></span></td><td align="left">设置值（替换旧值，并插入不存在的新值）</td></tr><tr><td align="left"></td><td align="left"><span class="exturl" data-url="aHR0cHM6Ly9kZXYubXlzcWwuY29tL2RvYy9yZWZtYW4vNS43L2VuL2pzb24tbW9kaWZpY2F0aW9uLWZ1bmN0aW9ucy5odG1sI2Z1bmN0aW9uX2pzb24tdW5xdW90ZQ==">JSON_UNQUOTE<i class="fa fa-external-link-alt"></i></span></td><td align="left">去除 json 字符串的引号，将值转成 string 类型</td></tr><tr><td align="left"><span class="exturl" data-url="aHR0cHM6Ly9kZXYubXlzcWwuY29tL2RvYy9yZWZtYW4vNS43L2VuL2pzb24tYXR0cmlidXRlLWZ1bmN0aW9ucy5odG1s">返回 json 属性<i class="fa fa-external-link-alt"></i></span></td><td align="left"><span class="exturl" data-url="aHR0cHM6Ly9kZXYubXlzcWwuY29tL2RvYy9yZWZtYW4vNS43L2VuL2pzb24tYXR0cmlidXRlLWZ1bmN0aW9ucy5odG1sI2Z1bmN0aW9uX2pzb24tZGVwdGg=">JSON_DEPTH<i class="fa fa-external-link-alt"></i></span></td><td align="left">返回 json 文档的最大深度</td></tr><tr><td align="left"></td><td align="left"><span class="exturl" data-url="aHR0cHM6Ly9kZXYubXlzcWwuY29tL2RvYy9yZWZtYW4vNS43L2VuL2pzb24tYXR0cmlidXRlLWZ1bmN0aW9ucy5odG1sJTIzZnVuY3Rpb25fanNvbi1sZW5ndGg="> JSON_LENGTH<i class="fa fa-external-link-alt"></i></span></td><td align="left">返回 json 文档的长度</td></tr><tr><td align="left"></td><td align="left"><span class="exturl" data-url="aHR0cHM6Ly9kZXYubXlzcWwuY29tL2RvYy9yZWZtYW4vNS43L2VuL2pzb24tYXR0cmlidXRlLWZ1bmN0aW9ucy5odG1sJTIzZnVuY3Rpb25fanNvbi10eXBl"> JSON_TYPE<i class="fa fa-external-link-alt"></i></span></td><td align="left">返回 json 值得类型</td></tr><tr><td align="left"></td><td align="left"><span class="exturl" data-url="aHR0cHM6Ly9kZXYubXlzcWwuY29tL2RvYy9yZWZtYW4vNS43L2VuL2pzb24tYXR0cmlidXRlLWZ1bmN0aW9ucy5odG1sJTIzZnVuY3Rpb25fanNvbi12YWxpZA=="> JSON_VALID<i class="fa fa-external-link-alt"></i></span></td><td align="left">判断是否为合法 json 文档</td></tr></tbody></table><h3 id="创建-JSON"><a href="#创建-JSON" class="headerlink" title="创建 JSON"></a>创建 JSON</h3><p>如想插入如下所示的 Json 对中：</p><pre class="language-simple" data-language="simple"><code class="language-simple">version: My MySQL version is "5.7.33".</code></pre><h4 id="JSON-OBJECT"><a href="#JSON-OBJECT" class="headerlink" title="JSON_OBJECT"></a>JSON_OBJECT</h4><p>在这种情况下，必须使用<strong>反斜杠</strong>对每个引号字符进行转义，如下所示：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> json_demo<span class="token punctuation">(</span>json_data<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span>JSON_OBJECT<span class="token punctuation">(</span><span class="token string">"version"</span><span class="token punctuation">,</span> <span class="token string">"My MySQL version is \"5.7.33\"."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>具有与文档中先前找到的键重复的键的成员将被丢弃（即使值不同）</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> JSON_OBJECT<span class="token punctuation">(</span><span class="token string">'key1'</span><span class="token punctuation">,</span> <span class="token string">'aaa'</span><span class="token punctuation">,</span> <span class="token string">'key2'</span><span class="token punctuation">,</span> <span class="token string">'bbb'</span><span class="token punctuation">,</span> <span class="token string">'key1'</span><span class="token punctuation">,</span> <span class="token string">'ccc'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&gt;&gt;</span> {<span class="token string">"key1"</span>: <span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"key2"</span>: <span class="token string">"bbb"</span>}</code></pre><h4 id="Json-对象文本"><a href="#Json-对象文本" class="headerlink" title="Json 对象文本"></a>Json 对象文本</h4><p>如果将值作为 Json 对象文本插入，必须使用<strong>双反斜杠</strong>转义序列，如下所示：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> json_demo<span class="token punctuation">(</span>json_data<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'{"version": "My MySQL version is \\"5.7.33\\"."}'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="JSON-ARRAY"><a href="#JSON-ARRAY" class="headerlink" title="JSON_ARRAY"></a>JSON_ARRAY</h4><p>创建 Json Array</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> JSON_ARRAY<span class="token punctuation">(</span>JSON_OBJECT<span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">,</span> <span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>JSON_OBJECT<span class="token punctuation">(</span><span class="token string">"key2"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>JSON_OBJECT<span class="token punctuation">(</span><span class="token string">"key3"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&gt;&gt;</span> <span class="token punctuation">[</span>{<span class="token string">"key1"</span>: <span class="token string">"aaa"</span>}<span class="token punctuation">,</span> {<span class="token string">"key2"</span>: <span class="token string">"bbb"</span>}<span class="token punctuation">,</span> {<span class="token string">"key3"</span>: <span class="token string">"ccc"</span>}<span class="token punctuation">]</span><span class="token keyword">SELECT</span> JSON_ARRAY<span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span>JSON_OBJECT<span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">,</span> <span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'bbb'</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&gt;&gt;</span> <span class="token punctuation">[</span><span class="token boolean">true</span><span class="token punctuation">,</span> {<span class="token string">"key1"</span>: <span class="token string">"aaa"</span>}<span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span></code></pre><h4 id="JSON-QUOTE"><a href="#JSON-QUOTE" class="headerlink" title="JSON_QUOTE"></a>JSON_QUOTE</h4><p>通过用双引号字符包裹字符串并转义内部引号和其他字符，将 <code>utf8mb4</code> 字符串引用为 Json 值，然后将结果作为字符串返回 。</p><pre class="language-sql" data-language="sql"><code class="language-sql">原始 json_data 列数据：<span class="token operator">&gt;&gt;</span> {<span class="token string">"a"</span>: <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"b"</span>: {<span class="token string">"c"</span>: <span class="token number">30</span>}}<span class="token keyword">SELECT</span> JSON_QUOTE<span class="token punctuation">(</span>json_data<span class="token punctuation">)</span> <span class="token keyword">FROM</span> json_demo<span class="token punctuation">;</span><span class="token operator">&gt;&gt;</span> <span class="token string">"{\"a\": 1, \"b\": {\"c\": 30}}"</span></code></pre><h3 id="查找-JSON"><a href="#查找-JSON" class="headerlink" title="查找 JSON"></a>查找 JSON</h3><h4 id="JSON-EXTRACT"><a href="#JSON-EXTRACT" class="headerlink" title="JSON_EXTRACT"></a>JSON_EXTRACT</h4><p>要查找 version 用作关键字的特定句子 ，您可以使用列路径运算符 **-&gt;**，如下所示：</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">SELECT json_data-&gt;'$.version' FROM json_demo;&gt;&gt; "My MySQL version is \"5.7.33\"."</code></pre><p>或者：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> JSON_EXTRACT<span class="token punctuation">(</span>json_data<span class="token punctuation">,</span> <span class="token string">'$.version'</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> json_demo<span class="token punctuation">;</span><span class="token operator">&gt;&gt;</span> <span class="token string">"My MySQL version is \"5.7.33\"."</span></code></pre><h4 id="JSON-UNQUOTE"><a href="#JSON-UNQUOTE" class="headerlink" title="JSON_UNQUOTE"></a>JSON_UNQUOTE</h4><p>如果想不包括周围的引号或任何转义符，请使用内联路径运算符  <strong>-&gt;&gt;</strong> ，如下所示：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> json_data<span class="token punctuation">,</span>json_data<span class="token operator">-</span><span class="token operator">&gt;&gt;</span><span class="token string">'$.version'</span> <span class="token keyword">FROM</span> json_demo<span class="token punctuation">;</span><span class="token operator">&gt;&gt;</span> My MySQL version <span class="token operator">is</span> <span class="token string">"5.7.33"</span><span class="token punctuation">.</span></code></pre><p>或者 使用 <code>JSON_UNQUOTE</code> 函数 ，可以去除 Json 字符串的引号，将值转成 String 类型：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> JSON_UNQUOTE<span class="token punctuation">(</span>JSON_EXTRACT<span class="token punctuation">(</span>json_data<span class="token punctuation">,</span> <span class="token string">'$.version'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> json_demo<span class="token punctuation">;</span><span class="token operator">&gt;&gt;</span> My MySQL version <span class="token operator">is</span> <span class="token string">"5.7.33"</span><span class="token punctuation">.</span></code></pre><h4 id="JSON-CONTAINS"><a href="#JSON-CONTAINS" class="headerlink" title="JSON_CONTAINS"></a>JSON_CONTAINS</h4><p>格式如：<code>JSON_CONTAINS(target, candidate[, path])</code></p><p>通过返回 1 或 0 指示给定的 candidate Json 文档是否包含在 target Json 文档中。</p><p>如果提供了 *<code>path</code>* 参数，则在目标内的特定路径中查找候选者。</p><pre class="language-sql" data-language="sql"><code class="language-sql">原始 json_data 列数据：<span class="token operator">&gt;&gt;</span> {<span class="token string">"a"</span>: <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"b"</span>: {<span class="token string">"c"</span>: <span class="token number">30</span>}}查询文档 <span class="token string">"a"</span>:<span class="token number">1</span> 是否在上述 Json 中<span class="token keyword">SELECT</span> JSON_CONTAINS<span class="token punctuation">(</span>json_data<span class="token punctuation">,</span>JSON_OBJECT<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> json_demo<span class="token punctuation">;</span><span class="token operator">&gt;&gt;</span> <span class="token number">1</span>查询 <span class="token number">30</span> 是否在指定的 JsonPath 中<span class="token keyword">SELECT</span> JSON_CONTAINS<span class="token punctuation">(</span>json_data<span class="token punctuation">,</span><span class="token string">'30'</span><span class="token punctuation">,</span><span class="token string">'$.b.c'</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> json_demo<span class="token punctuation">;</span><span class="token operator">&gt;&gt;</span> <span class="token number">1</span></code></pre><h4 id="JSON-CONTAINS-PATH"><a href="#JSON-CONTAINS-PATH" class="headerlink" title="JSON_CONTAINS_PATH"></a>JSON_CONTAINS_PATH</h4><p>格式如：<code>JSON_CONTAINS_PATH(json_doc, one_or_all, path[, path] ...)</code></p><p>返回 0 或 1 以指示 Json 文档是否包含给定路径或多个路径中的数据。</p><p>如果文档中不存在指定路径，则返回值为 0。否则，返回值取决于 *<code>one_or_all</code>* 参数：</p><ul><li><code>'one'</code>: 如果文档中至少存在一个路径，则为 1，否则为 0。</li><li><code>'all'</code>: 1 如果文档中存在所有路径，否则为 0。</li></ul><pre class="language-sql" data-language="sql"><code class="language-sql">原始 json_data 列数据：<span class="token operator">&gt;&gt;</span> {<span class="token string">"a"</span>: <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"b"</span>: {<span class="token string">"c"</span>: <span class="token number">30</span>}}查询 one ，至少存在一个<span class="token keyword">SELECT</span> JSON_CONTAINS_PATH<span class="token punctuation">(</span>json_data<span class="token punctuation">,</span><span class="token string">'one'</span><span class="token punctuation">,</span><span class="token string">'$.a'</span><span class="token punctuation">,</span><span class="token string">'$.b'</span><span class="token punctuation">,</span><span class="token string">'$.c'</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> json_demo<span class="token punctuation">;</span><span class="token operator">&gt;&gt;</span> <span class="token number">1</span>查询 <span class="token keyword">all</span> <span class="token punctuation">,</span> 存在所有路径<span class="token keyword">SELECT</span> JSON_CONTAINS_PATH<span class="token punctuation">(</span>json_data<span class="token punctuation">,</span><span class="token string">'all'</span><span class="token punctuation">,</span><span class="token string">'$.a'</span><span class="token punctuation">,</span><span class="token string">'$.b'</span><span class="token punctuation">,</span><span class="token string">'$.c'</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> json_demo<span class="token punctuation">;</span><span class="token operator">&gt;&gt;</span> <span class="token number">0</span></code></pre><h4 id="JSON-KEYS"><a href="#JSON-KEYS" class="headerlink" title="JSON_KEYS"></a>JSON_KEYS</h4><p>将 Json 对象的顶级值中的键作为 Json 数组返回，或者，如果 path 给出了参数，则返回所选路径中的顶级键。</p><pre class="language-sql" data-language="sql"><code class="language-sql">原始 json_data 列数据：<span class="token operator">&gt;&gt;</span> {<span class="token string">"a"</span>: <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"b"</span>: {<span class="token string">"c"</span>: <span class="token number">30</span>}}<span class="token keyword">SELECT</span> JSON_KEYS<span class="token punctuation">(</span>json_data<span class="token punctuation">)</span> <span class="token keyword">FROM</span> json_demo<span class="token punctuation">;</span><span class="token operator">&gt;&gt;</span> <span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">]</span><span class="token keyword">SELECT</span> JSON_KEYS<span class="token punctuation">(</span>json_data<span class="token punctuation">,</span><span class="token string">'$.b'</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> json_demo<span class="token punctuation">;</span><span class="token operator">&gt;&gt;</span> <span class="token punctuation">[</span><span class="token string">"c"</span><span class="token punctuation">]</span></code></pre><h4 id="JSON-SEARCH"><a href="#JSON-SEARCH" class="headerlink" title="JSON_SEARCH"></a>JSON_SEARCH</h4><p>格式如：<code>JSON_SEARCH(json_doc, one_or_all, search_str[, escape_char[, path] ...])</code></p><p>返回 Json 文档中给定字符串的路径。</p><p>该 *<code>one_or_all</code>* 参数影响搜索如下：</p><ul><li><code>'one'</code>：搜索在第一次匹配后终止并返回一个路径字符串。未定义首先考虑哪个匹配。</li><li><code>'all'</code>：搜索返回所有匹配的路径字符串，这样就不会包含重复的路径。如果有多个字符串，它们会自动包装为一个数组。数组元素的顺序未定义。</li></ul><pre class="language-sql" data-language="sql"><code class="language-sql">原始 json_data 列数据：<span class="token operator">&gt;&gt;</span> <span class="token punctuation">[</span><span class="token string">"abc"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>{<span class="token string">"k"</span>: <span class="token string">"10"</span>}<span class="token punctuation">,</span> <span class="token string">"def"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> {<span class="token string">"x"</span>:<span class="token string">"abc"</span>}<span class="token punctuation">,</span> {<span class="token string">"y"</span>:<span class="token string">"bcd"</span>}<span class="token punctuation">]</span>one 第一次匹配<span class="token keyword">SELECT</span> JSON_SEARCH<span class="token punctuation">(</span>json_data<span class="token punctuation">,</span><span class="token string">'one'</span><span class="token punctuation">,</span><span class="token string">'abc'</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> json_demo<span class="token punctuation">;</span><span class="token operator">&gt;&gt;</span> <span class="token string">"$[0]"</span><span class="token keyword">all</span> 所有匹配<span class="token keyword">SELECT</span> JSON_SEARCH<span class="token punctuation">(</span>json_data<span class="token punctuation">,</span><span class="token string">'all'</span><span class="token punctuation">,</span><span class="token string">'abc'</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> json_demo<span class="token punctuation">;</span><span class="token operator">&gt;&gt;</span> <span class="token punctuation">[</span><span class="token string">"$[0]"</span><span class="token punctuation">,</span> <span class="token string">"$[2].x"</span><span class="token punctuation">]</span></code></pre><h4 id="SQL-运用"><a href="#SQL-运用" class="headerlink" title="SQL 运用"></a>SQL 运用</h4><p>通过 <code>json_data-&gt;'$.version'</code> 或 <code>json_data-&gt;&gt;'$.version'</code> 提取出来的 Json 字段，可以直接运用在 SQL 语句中，比如进行条件查询或者 order 排序等操作。</p><p>例如：</p><pre class="language-sql" data-language="sql"><code class="language-sql">原始 json_data 列数据：<span class="token operator">&gt;&gt;</span> {<span class="token string">"name"</span>: <span class="token string">"wyq"</span><span class="token punctuation">,</span> <span class="token string">"age"</span>: <span class="token number">29</span>}<span class="token operator">=</span> 查询：<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> json_demo <span class="token keyword">where</span> json_data<span class="token operator">-</span><span class="token operator">&gt;&gt;</span><span class="token string">'$.name'</span> <span class="token operator">=</span><span class="token string">'wyq'</span><span class="token punctuation">;</span><span class="token operator">like</span> 查询：<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> json_demo <span class="token keyword">where</span> json_data<span class="token operator">-</span><span class="token operator">&gt;&gt;</span><span class="token string">'$.name'</span> <span class="token operator">like</span> <span class="token string">'%wyq%'</span><span class="token punctuation">;</span>大小于查询：<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> json_demo <span class="token keyword">where</span> json_data<span class="token operator">-</span><span class="token operator">&gt;&gt;</span><span class="token string">'$.age'</span> <span class="token operator">&lt;</span> <span class="token number">35</span><span class="token punctuation">;</span>排序：<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> json_demo <span class="token keyword">order</span> <span class="token keyword">by</span> json_data<span class="token operator">-</span><span class="token operator">&gt;&gt;</span><span class="token string">'$.age'</span> <span class="token keyword">desc</span><span class="token punctuation">;</span></code></pre><h3 id="修改-JSON"><a href="#修改-JSON" class="headerlink" title="修改 JSON"></a>修改 JSON</h3><h4 id="JSON-MERGE：合并"><a href="#JSON-MERGE：合并" class="headerlink" title="JSON_MERGE：合并"></a>JSON_MERGE：合并</h4><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> JSON_MERGE<span class="token punctuation">(</span><span class="token string">'{"key1": 1, "key2": 2}'</span><span class="token punctuation">,</span> <span class="token string">'{"key3": 3, "key1": 4}'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&gt;&gt;</span> {<span class="token string">"key1"</span>: <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"key2"</span>: <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"key3"</span>: <span class="token number">3</span>}</code></pre><p>将对象自动包装为数组、合并两个数组和对象值：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> JSON_MERGE<span class="token punctuation">(</span><span class="token string">'[10, 20]'</span><span class="token punctuation">,</span> <span class="token string">'{"a": "x", "b": "y"}'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&gt;&gt;</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> {<span class="token string">"a"</span>: <span class="token string">"x"</span><span class="token punctuation">,</span> <span class="token string">"b"</span>: <span class="token string">"y"</span>}<span class="token punctuation">]</span></code></pre><h4 id="JSON-SET：替换"><a href="#JSON-SET：替换" class="headerlink" title="JSON_SET：替换"></a>JSON_SET：替换</h4><p>JSON_SET () 可以替换存在路径的值、或者为不存在的路径添加值：</p><pre class="language-sql" data-language="sql"><code class="language-sql">原始 json_data 列数据：<span class="token operator">&gt;&gt;</span> {<span class="token string">"version"</span>: <span class="token string">"My MySQL version is \"5.7.33\"."</span>}修改 <span class="token keyword">value</span> 值：<span class="token keyword">SELECT</span> JSON_SET<span class="token punctuation">(</span>json_data<span class="token punctuation">,</span> <span class="token string">'$.version'</span><span class="token punctuation">,</span> <span class="token string">'new version info'</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> json_demo<span class="token punctuation">;</span><span class="token operator">&gt;&gt;</span> {<span class="token string">"version"</span>: <span class="token string">"new version info"</span>}添加值：<span class="token keyword">SELECT</span> JSON_SET<span class="token punctuation">(</span>json_data<span class="token punctuation">,</span> <span class="token string">'$[1]'</span><span class="token punctuation">,</span> JSON_OBJECT<span class="token punctuation">(</span><span class="token string">"newkey"</span><span class="token punctuation">,</span><span class="token string">"new info"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> json_demo<span class="token punctuation">;</span><span class="token operator">&gt;&gt;</span> <span class="token punctuation">[</span>{<span class="token string">"version"</span>: <span class="token string">"My MySQL version is \"5.7.33\"."</span>}<span class="token punctuation">,</span> {<span class="token string">"newkey"</span>: <span class="token string">"new info"</span>}<span class="token punctuation">]</span></code></pre><h4 id="JSON-INSERT：添加"><a href="#JSON-INSERT：添加" class="headerlink" title="JSON_INSERT：添加"></a>JSON_INSERT：添加</h4><p>JSON_INSERT () 添加新值但不替换现有值。</p><h4 id="JSON-REPLACE：替换"><a href="#JSON-REPLACE：替换" class="headerlink" title="JSON_REPLACE：替换"></a>JSON_REPLACE：替换</h4><p>JSON_REPLACE () 替换现有值并忽略新值。</p><h4 id="JSON-REMOVE：删除"><a href="#JSON-REMOVE：删除" class="headerlink" title="JSON_REMOVE：删除"></a>JSON_REMOVE：删除</h4><p>JSON_REMOVE () 接受一个 Json 文档和一个或多个指定要从文档中删除的值的路径。</p><p>返回值是原始文档减去文档中存在的路径选择的值：</p><pre class="language-sql" data-language="sql"><code class="language-sql">原始 json_data 列数据：<span class="token operator">&gt;&gt;</span> {<span class="token string">"version"</span>: <span class="token string">"My MySQL version is \"5.7.33\"."</span>}<span class="token keyword">SELECT</span> JSON_REMOVE<span class="token punctuation">(</span>json_data<span class="token punctuation">,</span> <span class="token string">'$.version'</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> json_demo<span class="token punctuation">;</span><span class="token operator">&gt;&gt;</span> {}</code></pre><pre class="language-sql" data-language="sql"><code class="language-sql">原始 json_data 列数据：<span class="token operator">&gt;&gt;</span> <span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> {<span class="token string">"b"</span>: <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">]</span>}<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token keyword">SELECT</span> JSON_REMOVE<span class="token punctuation">(</span>json_data<span class="token punctuation">,</span> <span class="token string">'$[2]'</span><span class="token punctuation">,</span> <span class="token string">'$[1].b[1]'</span><span class="token punctuation">,</span> <span class="token string">'$[1].b[1]'</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> json_demo<span class="token punctuation">;</span><span class="token operator">&gt;&gt;</span> <span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> {<span class="token string">"b"</span>: <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>}<span class="token punctuation">]</span></code></pre><h3 id="Json-属性"><a href="#Json-属性" class="headerlink" title="Json 属性"></a>Json 属性</h3><h4 id="JSON-DEPTH：深度"><a href="#JSON-DEPTH：深度" class="headerlink" title="JSON_DEPTH：深度"></a>JSON_DEPTH：深度</h4><p>返回 Json 文档的最大深度。</p><p>空数组、空对象或标量值的深度为 1。仅包含深度为 1 的元素的非空数组或仅包含深度为 1 的成员值的非空对象的深度为 2。</p><pre class="language-sql" data-language="sql"><code class="language-sql">原始 json_data 列数据：<span class="token operator">&gt;&gt;</span> {<span class="token string">"a"</span>: <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"b"</span>: {<span class="token string">"c"</span>: <span class="token number">30</span>}}<span class="token keyword">SELECT</span> JSON_DEPTH<span class="token punctuation">(</span>json_data<span class="token punctuation">)</span> <span class="token keyword">FROM</span> json_demo<span class="token punctuation">;</span><span class="token operator">&gt;&gt;</span> <span class="token number">3</span></code></pre><pre class="language-sql" data-language="sql"><code class="language-sql">原始 json_data 列数据：<span class="token operator">&gt;&gt;</span> <span class="token punctuation">[</span><span class="token string">"abc"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>{<span class="token string">"k"</span>: <span class="token string">"10"</span>}<span class="token punctuation">,</span> <span class="token string">"def"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> {<span class="token string">"x"</span>:<span class="token string">"abc"</span>}<span class="token punctuation">,</span> {<span class="token string">"y"</span>:<span class="token string">"bcd"</span>}<span class="token punctuation">]</span><span class="token keyword">SELECT</span> JSON_DEPTH<span class="token punctuation">(</span>json_data<span class="token punctuation">)</span> <span class="token keyword">FROM</span> json_demo<span class="token punctuation">;</span><span class="token operator">&gt;&gt;</span> <span class="token number">4</span></code></pre><h4 id="JSON-LENGTH：长度"><a href="#JSON-LENGTH：长度" class="headerlink" title="JSON_LENGTH：长度"></a>JSON_LENGTH：长度</h4><p>返回 Json 文档的长度。</p><p>文档的长度确定如下：</p><ul><li>标量的长度为 1。</li><li>数组的长度是数组元素的数量。</li><li>对象的长度是对象成员的数量。</li><li>长度不计算嵌套数组或对象的长度。</li></ul><pre class="language-sql" data-language="sql"><code class="language-sql">原始 json_data 列数据：<span class="token operator">&gt;&gt;</span> {<span class="token string">"a"</span>: <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"b"</span>: {<span class="token string">"c"</span>: <span class="token number">30</span>}}<span class="token keyword">SELECT</span> JSON_LENGTH<span class="token punctuation">(</span>json_data<span class="token punctuation">)</span> <span class="token keyword">FROM</span> json_demo<span class="token punctuation">;</span><span class="token operator">&gt;&gt;</span> <span class="token number">2</span></code></pre><pre class="language-sql" data-language="sql"><code class="language-sql">原始 json_data 列数据：<span class="token operator">&gt;&gt;</span> <span class="token punctuation">[</span><span class="token string">"abc"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>{<span class="token string">"k"</span>: <span class="token string">"10"</span>}<span class="token punctuation">,</span> <span class="token string">"def"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> {<span class="token string">"x"</span>:<span class="token string">"abc"</span>}<span class="token punctuation">,</span> {<span class="token string">"y"</span>:<span class="token string">"bcd"</span>}<span class="token punctuation">]</span><span class="token keyword">SELECT</span> JSON_LENGTH<span class="token punctuation">(</span>json_data<span class="token punctuation">)</span> <span class="token keyword">FROM</span> json_demo<span class="token punctuation">;</span><span class="token operator">&gt;&gt;</span> <span class="token number">4</span></code></pre><h4 id="JSON-TYPE：类型"><a href="#JSON-TYPE：类型" class="headerlink" title="JSON_TYPE：类型"></a>JSON_TYPE：类型</h4><p>返回 <code>utf8mb4</code> 指示 Json 值类型的字符串。这可以是 OBJECT、ARRAY、INTEGER、BOOLEAN。</p><pre class="language-sql" data-language="sql"><code class="language-sql">原始 json_data 列数据：<span class="token operator">&gt;&gt;</span> <span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> {<span class="token string">"b"</span>: <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">]</span>}<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token keyword">SELECT</span> JSON_TYPE<span class="token punctuation">(</span>json_data<span class="token punctuation">)</span> <span class="token keyword">FROM</span> json_demo<span class="token punctuation">;</span><span class="token operator">&gt;&gt;</span> ARRAY            <span class="token keyword">SELECT</span> JSON_TYPE<span class="token punctuation">(</span>JSON_EXTRACT<span class="token punctuation">(</span>json_data<span class="token punctuation">,</span> <span class="token string">'$[1]'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> json_demo<span class="token punctuation">;</span><span class="token operator">&gt;&gt;</span> OBJECT<span class="token keyword">SELECT</span> JSON_TYPE<span class="token punctuation">(</span>JSON_EXTRACT<span class="token punctuation">(</span>json_data<span class="token punctuation">,</span> <span class="token string">'$[1].b[1]'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> json_demo<span class="token punctuation">;</span><span class="token operator">&gt;&gt;</span> <span class="token keyword">BOOLEAN</span></code></pre><h4 id="JSON-VALID：有效"><a href="#JSON-VALID：有效" class="headerlink" title="JSON_VALID：有效"></a>JSON_VALID：有效</h4><p>返回 0 或 1 以指示值是否为有效的 JSON。</p><pre class="language-sql" data-language="sql"><code class="language-sql">原始 json_data 列数据：<span class="token operator">&gt;&gt;</span> <span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> {<span class="token string">"b"</span>: <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">]</span>}<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token keyword">SELECT</span> JSON_VALID<span class="token punctuation">(</span>json_data<span class="token punctuation">)</span> <span class="token keyword">FROM</span> json_demo<span class="token punctuation">;</span><span class="token operator">&gt;&gt;</span> <span class="token number">1</span>  </code></pre><pre class="language-sql" data-language="sql"><code class="language-sql">原始 json_data 列数据：<span class="token operator">&gt;&gt;</span> hello<span class="token keyword">SELECT</span> JSON_VALID<span class="token punctuation">(</span>json_data<span class="token punctuation">)</span> <span class="token keyword">FROM</span> json_demo<span class="token punctuation">;</span><span class="token operator">&gt;&gt;</span> <span class="token number">0</span></code></pre><pre class="language-sql" data-language="sql"><code class="language-sql">原始 json_data 列数据：<span class="token operator">&gt;&gt;</span> <span class="token string">"hello"</span><span class="token keyword">SELECT</span> JSON_VALID<span class="token punctuation">(</span>json_data<span class="token punctuation">)</span> <span class="token keyword">FROM</span> json_demo<span class="token punctuation">;</span><span class="token operator">&gt;&gt;</span> <span class="token number">1</span></code></pre><h3 id="JSON-TABLE-表操作"><a href="#JSON-TABLE-表操作" class="headerlink" title="JSON_TABLE 表操作"></a>JSON_TABLE 表操作</h3><p>在 MySQL 8.0.4 及更高版本中，JSON_TABLE 函数可以将 Json 数据转换为表格数据的 Json 函数的信息。</p><p>格式为：</p><pre class="language-none"><code class="language-none">JSON_TABLE(    expr,    path COLUMNS (column_list))   [AS] alias</code></pre><p>注意：</p><ul><li>必须起别名 alias，否则会报错 <code>Every table function must have an alias</code>。</li></ul><p>示例：</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">set @jsoninfo='[{"name":"Alice"},{"name":"Bob"},{"name":"Cindy"}]';SELECT * from JSON_TABLE(@jsoninfo,                         "$[*]" COLUMNS(                              rowid FOR ORDINALITY,                             name VARCHAR(100) PATH "$.name")) as t;查询结果：+-------+-------+| rowid | name  |+-------+-------+|     1 | Alice ||     2 | Bob   ||     3 | Cindy |+-------+-------+</code></pre><p>从数据库中进行取值：</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">原始 json_data 列数据：&gt;&gt; [{"name":"Alice"},{"name":"Bob"},{"name":"Cindy"}]SELECT t.* from json_demo,JSON_TABLE(json_data,"$[*]" COLUMNS( rowid FOR ORDINALITY,name VARCHAR(100) PATH "$.name")) as t;查询结果：+-------+-------+| rowid | name  |+-------+-------+|     1 | Alice ||     2 | Bob   ||     3 | Cindy |+-------+-------+</code></pre><pre class="language-none"><code class="language-none">原始 json_data 列数据（在表中 id = 2）：&gt;&gt; [{"x":2,"y":"8"},{"x":"3","y":"7"},{"x":"4","y":6}]SELECT t.* from json_demo a,JSON_TABLE(json_data,"$[*]" COLUMNS(     rowid FOR ORDINALITY,xval VARCHAR(100) PATH "$.x",    yval VARCHAR(100) PATH "$.y")) as twhere a.id=2;查询结果：+-------+------+------+| rowid | xval | yval |+-------+------+------+|     1 | 2    | 8    ||     2 | 3    | 7    ||     3 | 4    | 6    |+-------+------+------+</code></pre><h3 id="Json-虚拟列"><a href="#Json-虚拟列" class="headerlink" title="Json 虚拟列"></a>Json 虚拟列</h3><h4 id="新增虚拟列"><a href="#新增虚拟列" class="headerlink" title="新增虚拟列"></a>新增虚拟列</h4><p>建立 员工信息表 如下所示，其中 JSON_EXTRACT 和 JSON_UNQUOTE 都是上面介绍过的：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>employee<span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">int</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>json_data<span class="token punctuation">`</span> <span class="token keyword">mediumtext</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> GENERATED ALWAYS <span class="token keyword">AS</span> <span class="token punctuation">(</span>JSON_UNQUOTE<span class="token punctuation">(</span>JSON_EXTRACT<span class="token punctuation">(</span><span class="token punctuation">`</span>json_data<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token string">'$.name'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> VIRTUAL <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">KEY</span> <span class="token punctuation">`</span>name_index<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span></code></pre><p>或者使用内联路径运算符  <strong>-&gt;&gt;</strong> ，如下所示：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>employee<span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">int</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>json_data<span class="token punctuation">`</span> <span class="token keyword">mediumtext</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> GENERATED ALWAYS <span class="token keyword">AS</span> <span class="token punctuation">(</span>json_data<span class="token operator">-</span><span class="token operator">&gt;&gt;</span><span class="token string">'$.name'</span><span class="token punctuation">)</span> VIRTUAL <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">KEY</span> <span class="token punctuation">`</span>name_index<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span></code></pre><p>其中，name 列即为虚拟字段，它是根据 json_data 列的 Json 数据，自动生成的。</p><p>对表中插入数据：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">// Json 中包含 name </span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> employee <span class="token punctuation">(</span><span class="token punctuation">`</span>json_data<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'{"name":"Alice","age":25}'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> employee <span class="token punctuation">(</span><span class="token punctuation">`</span>json_data<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'{"name":"Bob","age":28}'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> employee <span class="token punctuation">(</span><span class="token punctuation">`</span>json_data<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'{"name":"Cindy","age":24}'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Json 中不包含 name </span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> employee <span class="token punctuation">(</span><span class="token punctuation">`</span>json_data<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'{"sex":"male","age":24}'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 插入非 Json 的数据</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> employee <span class="token punctuation">(</span><span class="token punctuation">`</span>json_data<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'test text info'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>可以发现，前面四条数据都添加成功了，第四条由于不包含 name ，所以 name 虚拟列为 null。</p><p>但五条数据报错，因为它不是 Json 格式：</p><pre class="language-none"><code class="language-none">Invalid Json text in argument 1 to function json_extract: "Invalid value." at position 1</code></pre><p>使用 JSON_SET 更新某条 Json 数据，可以发现虚拟列也同步进行了更新：</p><pre class="language-none"><code class="language-none">原始 json_data 列数据：&gt;&gt; {"name":"Bob","age":28}update employee set json_data=JSON_SET(json_data, '$.name', 'Bassam') where id=2;更新后数据：+----+-------------------------------+--------+| id | json_data                     | name   |+----+-------------------------------+--------+|  2 | {"age": 28, "name": "Bassam"} | Bassam |+----+-------------------------------+--------+</code></pre><h4 id="虚拟列索引"><a href="#虚拟列索引" class="headerlink" title="虚拟列索引"></a>虚拟列索引</h4><p>分析查询语句可以发现：</p><pre class="language-none"><code class="language-none">explain SELECT name FROM employee where name='Bob';</code></pre><p><img src="/images/2021/06/image-20210603174344730.png" alt="image-20210603174344730" loading="lazy"></p><p>会用到 name 虚拟列的 <code>name_index</code> 索引。</p><p>通过 <code>json_data-&gt;'$.name'</code> 查询，也会用到 虚拟列的 <code>name_index</code> 索引。</p><pre class="language-none"><code class="language-none">explain SELECT name FROM employee where json_data-&gt;'$.name'='Bob';</code></pre><h4 id="省略虚拟列"><a href="#省略虚拟列" class="headerlink" title="省略虚拟列"></a>省略虚拟列</h4><p>建立索引的时候，也可以省略虚拟列，直接创建索引。</p><p>建表示例如下：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>employee<span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">int</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>json_data<span class="token punctuation">`</span> <span class="token keyword">mediumtext</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">KEY</span> <span class="token punctuation">`</span>json_data_name_index<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>cast<span class="token punctuation">(</span><span class="token punctuation">`</span>json_data<span class="token punctuation">`</span><span class="token operator">-</span><span class="token operator">&gt;&gt;</span><span class="token string">'$.name'</span> <span class="token keyword">as</span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span></code></pre><p>新增索引格式：</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">ALTER TABLE table_name ADD KEY ( (CAST(column_name -&gt; '$' AS UNSIGNED ARRAY)) );</code></pre><p>新增语句如前所述。</p><p>查看 explain 执行计划：</p><pre class="language-none"><code class="language-none">explain SELECT * FROM `test`.`employee` where json_data-&gt;&gt;'$.name'='Bob';</code></pre><p>可以发现并没有用到所创建的索引。</p><p><img src="/images/2021/06/image-20210603192327275.png" alt="image-20210603192327275" loading="lazy"></p><p>这是由于前面表定义中的索引表达式 <code>WHERE</code> 与查询中的子句表达式之间存在排序规则不匹配，<span class="exturl" data-url="aHR0cHM6Ly9kZXYubXlzcWwuY29tL2RvYy9yZWZtYW4vOC4wL2VuL2NyZWF0ZS1pbmRleC5odG1s">参考<i class="fa fa-external-link-alt"></i></span>。</p><p>可以在查询中指定完整表达式：</p><pre class="language-none"><code class="language-none">explain SELECT * FROM `test`.`employee` where CAST(json_data-&gt;&gt;'$.name'AS CHAR(25))='Bob';</code></pre><p>即可看到，使用了所创建的索引。</p><p><img src="/images/2021/06/image-20210603192300147.png" alt="image-20210603192300147" loading="lazy"></p><pre class="language-none"><code class="language-none">explain FORMAT=TREE SELECT * FROM `test`.`employee` where CAST(json_data-&gt;&gt;'$.name'AS CHAR(25))='Bob';&gt;&gt; -&gt; Index lookup on employee using json_data_name_index (cast(json_unquote(json_extract(json_data,_utf8mb3'$.name')) as char(25) charset utf8)='Bob')  (cost=0.35 rows=1)</code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;在项目中，有部分数据是以 JsonObject 和 JsonArray 的形式直接存储在 MySQL 中的。&lt;/p&gt;
&lt;p&gt;如果想对 这部分数据进行查询 等操作，非常不便。&lt;/p&gt;
&lt;p&gt;经查询，MySQL 5.7.8 新增了对 Json 数据的相关支持，MySQL 8.0.4 新增了 Json 表函数的功能。&lt;/p&gt;
&lt;p&gt;通过使用 内置的 函数，可以非常方便的对以 JsonObject 和 JsonArray 的形式直接存储在 MySQL 中的字段，进行查找、排序等操作。&lt;/p&gt;
&lt;p&gt;本文总结了 MySQL 对 Json 操作的相关用法。&lt;/p&gt;</summary>
    
    
    
    <category term="Database" scheme="https://jueee.github.io/categories/Database/"/>
    
    <category term="MySQL" scheme="https://jueee.github.io/categories/Database/MySQL/"/>
    
    
    <category term="MySQL" scheme="https://jueee.github.io/tags/MySQL/"/>
    
    <category term="Database" scheme="https://jueee.github.io/tags/Database/"/>
    
  </entry>
  
  <entry>
    <title>tomcat 运行报错：This is very likely to create a memory leak</title>
    <link href="https://jueee.github.io/2021/05/2021-05-28-tomcat%20%E8%BF%90%E8%A1%8C%E6%8A%A5%E9%94%99%EF%BC%9AThis%20is%20very%20likely%20to%20create%20a%20memory%20leak/"/>
    <id>https://jueee.github.io/2021/05/2021-05-28-tomcat%20%E8%BF%90%E8%A1%8C%E6%8A%A5%E9%94%99%EF%BC%9AThis%20is%20very%20likely%20to%20create%20a%20memory%20leak/</id>
    <published>2021-05-28T00:00:00.000Z</published>
    <updated>2021-05-27T02:18:42.963Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>tomcat 运行时，报如下异常：</p><pre class="language-none"><code class="language-none">SLF4J: Class path contains multiple SLF4J bindings.SLF4J: Found binding in [jar:file:/C:/Users/Jueee/.m2/repository/org/slf4j/slf4j-log4j12/1.7.21/slf4j-log4j12-1.7.21.jar!/org/slf4j/impl/StaticLoggerBinder.class]SLF4J: Found binding in [jar:file:/C:/Users/Jueee/.m2/repository/org/apache/logging/log4j/log4j-slf4j-impl/2.13.3/log4j-slf4j-impl-2.13.3.jar!/org/slf4j/impl/StaticLoggerBinder.class]SLF4J: See http://www.slf4j.org/codes.html#multiple_bindings for an explanation.SLF4J: Detected both log4j-over-slf4j.jar AND slf4j-log4j12.jar on the class path, preempting StackOverflowError. SLF4J: See also http://www.slf4j.org/codes.html#log4jDelegationLoop for more details.26-May-2021 18:44:40.531 严重 [localhost-startStop-1] org.apache.catalina.core.StandardContext.startInternal One or more listeners failed to start. Full details will be found in the appropriate container log file26-May-2021 18:44:40.531 严重 [localhost-startStop-1] org.apache.catalina.core.StandardContext.startInternal Context [/adminWeb] startup failed due to previous errors26-May-2021 18:44:40.545 警告 [localhost-startStop-1] org.apache.catalina.loader.WebappClassLoaderBase.clearReferencesThreads The web application [adminWeb] appears to have started a thread named [Timer-0] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread: java.lang.Object.wait(Native Method) java.lang.Object.wait(Object.java:502) java.util.TimerThread.mainLoop(Timer.java:526) java.util.TimerThread.run(Timer.java:505)</code></pre><a id="more"></a><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>根据提示，查看 <span class="exturl" data-url="aHR0cDovL3d3dy5zbGY0ai5vcmcvY29kZXMuaHRtbCNsb2c0akRlbGVnYXRpb25Mb29w">http://www.slf4j.org/codes.html#log4jDelegationLoop<i class="fa fa-external-link-alt"></i></span> 获取报错详情。</p><p>可以发现是由于 slf4j-log4j12-1.7.21.jar 和 log4j-slf4j-impl-2.13.3.jar 两个 Jar 包冲突导致的。</p><p>使用如下命令导致 maven 依赖关系树：</p><pre class="language-none"><code class="language-none">mvn dependency:tree&gt;tree.txt</code></pre><p>从树中找到上述的两个 Jar 包 依赖关系，根据项目需要，保留一个，排除另一个即可。</p><p><img src="/images/2021/05/image-20210527100457799.png" alt="image-20210527100457799" loading="lazy"></p><p>排除 Jar 包：</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>xxx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>xxx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>xxx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>slf4j-log4j12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h3&gt;&lt;p&gt;tomcat 运行时，报如下异常：&lt;/p&gt;
&lt;pre class=&quot;language-none&quot;&gt;&lt;code class=&quot;language-none&quot;&gt;SLF4J: Class path contains multiple SLF4J bindings.
SLF4J: Found binding in [jar:file:&amp;#x2F;C:&amp;#x2F;Users&amp;#x2F;Jueee&amp;#x2F;.m2&amp;#x2F;repository&amp;#x2F;org&amp;#x2F;slf4j&amp;#x2F;slf4j-log4j12&amp;#x2F;1.7.21&amp;#x2F;slf4j-log4j12-1.7.21.jar!&amp;#x2F;org&amp;#x2F;slf4j&amp;#x2F;impl&amp;#x2F;StaticLoggerBinder.class]
SLF4J: Found binding in [jar:file:&amp;#x2F;C:&amp;#x2F;Users&amp;#x2F;Jueee&amp;#x2F;.m2&amp;#x2F;repository&amp;#x2F;org&amp;#x2F;apache&amp;#x2F;logging&amp;#x2F;log4j&amp;#x2F;log4j-slf4j-impl&amp;#x2F;2.13.3&amp;#x2F;log4j-slf4j-impl-2.13.3.jar!&amp;#x2F;org&amp;#x2F;slf4j&amp;#x2F;impl&amp;#x2F;StaticLoggerBinder.class]
SLF4J: See http:&amp;#x2F;&amp;#x2F;www.slf4j.org&amp;#x2F;codes.html#multiple_bindings for an explanation.
SLF4J: Detected both log4j-over-slf4j.jar AND slf4j-log4j12.jar on the class path, preempting StackOverflowError. 
SLF4J: See also http:&amp;#x2F;&amp;#x2F;www.slf4j.org&amp;#x2F;codes.html#log4jDelegationLoop for more details.
26-May-2021 18:44:40.531 严重 [localhost-startStop-1] org.apache.catalina.core.StandardContext.startInternal One or more listeners failed to start. Full details will be found in the appropriate container log file
26-May-2021 18:44:40.531 严重 [localhost-startStop-1] org.apache.catalina.core.StandardContext.startInternal Context [&amp;#x2F;adminWeb] startup failed due to previous errors
26-May-2021 18:44:40.545 警告 [localhost-startStop-1] org.apache.catalina.loader.WebappClassLoaderBase.clearReferencesThreads The web application [adminWeb] appears to have started a thread named [Timer-0] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.lang.Object.wait(Native Method)
 java.lang.Object.wait(Object.java:502)
 java.util.TimerThread.mainLoop(Timer.java:526)
 java.util.TimerThread.run(Timer.java:505)&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="Apache" scheme="https://jueee.github.io/categories/Apache/"/>
    
    <category term="Maven" scheme="https://jueee.github.io/categories/Apache/Maven/"/>
    
    
    <category term="Apache" scheme="https://jueee.github.io/tags/Apache/"/>
    
    <category term="Maven" scheme="https://jueee.github.io/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>maven 打包找不到程序包 java.lang</title>
    <link href="https://jueee.github.io/2021/05/2021-05-27-maven%E6%89%93%E5%8C%85%E6%89%BE%E4%B8%8D%E5%88%B0%E7%A8%8B%E5%BA%8F%E5%8C%85%20java.lang/"/>
    <id>https://jueee.github.io/2021/05/2021-05-27-maven%E6%89%93%E5%8C%85%E6%89%BE%E4%B8%8D%E5%88%B0%E7%A8%8B%E5%BA%8F%E5%8C%85%20java.lang/</id>
    <published>2021-05-27T00:00:00.000Z</published>
    <updated>2021-05-27T02:18:42.960Z</updated>
    
    <content type="html"><![CDATA[<p>maven 打包项目时出现如下问题：</p><pre class="language-none"><code class="language-none">[ERROR] Failure executing javac, but could not parse the error:致命错误: 在类路径或引导类路径中找不到程序包 java.lang</code></pre><a id="more"></a><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>这是在基于 maven 编写 java 项目的时候，使用 mvn install 时发生的异常，异常信息如下</p><pre class="language-none"><code class="language-none">[INFO] --- maven-compiler-plugin:2.5.1:compile (default-compile) @ webAdmin ---[INFO] Compiling 537 source files to E:\code\webAdmin\target\classes[INFO] -------------------------------------------------------------[ERROR] COMPILATION ERROR :[INFO] -------------------------------------------------------------[ERROR] Failure executing javac, but could not parse the error:致命错误: 在类路径或引导类路径中找不到程序包 java.lang[INFO] 1 error[INFO] -------------------------------------------------------------[INFO] ------------------------------------------------------------------------[INFO] BUILD FAILURE[INFO] ------------------------------------------------------------------------[INFO] Total time: 01:26 min[INFO] Finished at: 2021-05-26T17:10:55+08:00[INFO] Final Memory: 65M/1934M</code></pre><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>原因在于 compiler 插件的配置。</p><p>如下所示的配置很特殊：windows 下使用分号（;）分隔，linux/mac 下使用冒号（:）分隔</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>maven-compiler-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${maven.compiler.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span><span class="token punctuation">&gt;</span></span>${java.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>source</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span><span class="token punctuation">&gt;</span></span>${java.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoding</span><span class="token punctuation">&gt;</span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoding</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- 不是maven推荐的方式，只是为了方便管理后台人员频繁开发的jar包 --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>compilerArguments</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>extdirs</span><span class="token punctuation">&gt;</span></span>src\main\webapp\WEB-INF\lib<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>extdirs</span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!-- 这个配置很特殊：windows下使用分号（;）分隔，linux/mac下使用冒号（:）分隔 --&gt;</span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bootclasspath</span><span class="token punctuation">&gt;</span></span>${java.home}/lib/rt.jar:${java.home}/lib/jce.jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bootclasspath</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>compilerArguments</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span></code></pre><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>修改为 使用分号（;）分隔后，再次打包，即可成功。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;maven 打包项目时出现如下问题：&lt;/p&gt;
&lt;pre class=&quot;language-none&quot;&gt;&lt;code class=&quot;language-none&quot;&gt;[ERROR] Failure executing javac, but could not parse the error:
致命错误: 在类路径或引导类路径中找不到程序包 java.lang&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="Apache" scheme="https://jueee.github.io/categories/Apache/"/>
    
    <category term="Maven" scheme="https://jueee.github.io/categories/Apache/Maven/"/>
    
    
    <category term="Apache" scheme="https://jueee.github.io/tags/Apache/"/>
    
    <category term="Maven" scheme="https://jueee.github.io/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>Python 调用 Shell 脚本常用方法</title>
    <link href="https://jueee.github.io/2021/05/2021-05-26-Python%E8%B0%83%E7%94%A8Shell%E8%84%9A%E6%9C%AC%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <id>https://jueee.github.io/2021/05/2021-05-26-Python%E8%B0%83%E7%94%A8Shell%E8%84%9A%E6%9C%AC%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/</id>
    <published>2021-05-26T00:00:00.000Z</published>
    <updated>2021-05-27T02:18:42.958Z</updated>
    
    <content type="html"><![CDATA[<h3 id="使用-os-system"><a href="#使用-os-system" class="headerlink" title="使用 os.system()"></a>使用 os.system ()</h3><p>Python 示例：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> osval <span class="token operator">=</span> os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'ls -al'</span><span class="token punctuation">)</span><span class="token keyword">print</span> val</code></pre><h4 id="返回的状态码"><a href="#返回的状态码" class="headerlink" title="返回的状态码"></a>返回的状态码</h4><p>正常输出的情况下，sh 返回的状态码是 0</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">$ python test1<span class="token punctuation">.</span>pytotal 12drwxr<span class="token operator">-</span>xr<span class="token operator">-</span>x 2 jue root 4096 May 25 11:18 <span class="token punctuation">.</span>drwx-<span class="token operator">--</span>-<span class="token operator">--</span> 4 jue root 4096 May 25 11:18 <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">-</span>rw<span class="token operator">-</span>r-<span class="token operator">-</span>r-<span class="token operator">-</span> 1 jue root   46 May 25 11:18 test1<span class="token punctuation">.</span>py0</code></pre><p>没有找到时，sh 返回的状态码是 1，而适用 Python 调用，返回的是：256</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> osval <span class="token operator">=</span> os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'ls -al|grep jue'</span><span class="token punctuation">)</span><span class="token keyword">print</span> val</code></pre><p>调用 Python</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ python test1.py<span class="token number">256</span></code></pre><h3 id="使用-os-popen"><a href="#使用-os-popen" class="headerlink" title="使用 os.popen()"></a>使用 os.popen ()</h3><h3 id="使用-commands-模块"><a href="#使用-commands-模块" class="headerlink" title="使用 commands 模块"></a>使用 commands 模块</h3><p>有三个方法可以使用：</p><ol><li>commands.getstatusoutput (cmd)，其以字符串的形式返回的是输出结果和状态码，即（status,output）。</li><li>commands.getoutput (cmd)，返回 cmd 的输出结果。</li><li>commands.getstatus (file)，返回 ls -l file 的执行结果字符串，调用了 getoutput，不建议使用此方法</li></ol><h3 id="使用-subprocess-模块"><a href="#使用-subprocess-模块" class="headerlink" title="使用 subprocess 模块"></a>使用 subprocess 模块</h3><p>subprocess 模块允许创建很多子进程，创建的时候能指定子进程和子进程的输入、输出、错误输出管道，执行后能获取输出结果和执行状态。</p><ol><li>subprocess.run ()：python3.5 中新增的函数， 执行指定的命令， 等待命令执行完成后返回一个包含执行结果的 CompletedProcess 类的实例。</li><li>subprocess.call ()：执行指定的命令， 返回命令执行状态， 功能类似 os.system（cmd）。</li><li>subprocess.check_call ()：python2.5 中新增的函数，执行指定的命令，如果执行成功则返回状态码， 否则抛出异常。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;使用-os-system&quot;&gt;&lt;a href=&quot;#使用-os-system&quot; class=&quot;headerlink&quot; title=&quot;使用 os.system()&quot;&gt;&lt;/a&gt;使用 os.system ()&lt;/h3&gt;&lt;p&gt;Python 示例：&lt;/p&gt;
&lt;pre class</summary>
      
    
    
    
    <category term="Python" scheme="https://jueee.github.io/categories/Python/"/>
    
    <category term="Shell" scheme="https://jueee.github.io/categories/Shell/"/>
    
    
    <category term="Python" scheme="https://jueee.github.io/tags/Python/"/>
    
    <category term="Shell" scheme="https://jueee.github.io/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>Shell 调用 Python 脚本常用方法</title>
    <link href="https://jueee.github.io/2021/05/2021-05-25-Shell%E8%B0%83%E7%94%A8Python%E8%84%9A%E6%9C%AC%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <id>https://jueee.github.io/2021/05/2021-05-25-Shell%E8%B0%83%E7%94%A8Python%E8%84%9A%E6%9C%AC%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/</id>
    <published>2021-05-25T00:00:00.000Z</published>
    <updated>2021-05-27T02:18:42.933Z</updated>
    
    <content type="html"><![CDATA[<h3 id="普通调用"><a href="#普通调用" class="headerlink" title="普通调用"></a>普通调用</h3><h4 id="Python脚本示例"><a href="#Python脚本示例" class="headerlink" title="Python脚本示例"></a>Python 脚本示例</h4><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> datetime<span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>    today <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>today<span class="token punctuation">(</span><span class="token punctuation">)</span>    yesterday <span class="token operator">=</span> today <span class="token operator">-</span> datetime<span class="token punctuation">.</span>timedelta<span class="token punctuation">(</span>days<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>    keyWord <span class="token operator">=</span> yesterday<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span> <span class="token string">'%Y-%m-%d'</span> <span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>keyWord <span class="token operator">+</span><span class="token string">" 测试！"</span><span class="token punctuation">)</span></code></pre><h4 id="Shell-脚本示例"><a href="#Shell-脚本示例" class="headerlink" title="Shell 脚本示例"></a>Shell 脚本示例</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#! /bin/bash</span><span class="token assign-left variable">thispath</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">cd</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">dirname</span> <span class="token string">"<span class="token variable">$0</span>"</span><span class="token variable">)</span></span>"</span><span class="token punctuation">;</span> <span class="token builtin class-name">pwd</span><span class="token variable">)</span></span><span class="token assign-left variable">pyfile</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$thispath</span>/test.py"</span><span class="token assign-left variable">result</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span>python $pyfile<span class="token variable">`</span></span><span class="token builtin class-name">echo</span> <span class="token variable">$result</span> <span class="token operator">&gt;&gt;</span> <span class="token variable">$thispath</span>/out.log</code></pre><h4 id="调用结果"><a href="#调用结果" class="headerlink" title="调用结果"></a>调用结果</h4><pre class="language-bash" data-language="bash"><code class="language-bash">$ ./runAlarm.sh<span class="token number">2021</span>-05-24 测试！</code></pre><h3 id="带参数调用"><a href="#带参数调用" class="headerlink" title="带参数调用"></a>带参数调用</h3><h4 id="Python-脚本示例"><a href="#Python-脚本示例" class="headerlink" title="Python 脚本示例"></a>Python 脚本示例</h4><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> sys<span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"param one:"</span><span class="token operator">+</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"param two:"</span><span class="token operator">+</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>运行脚本：</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ python test0.py  a bparam one:aparam two:b</code></pre><h4 id="Shell-脚本示例-1"><a href="#Shell-脚本示例-1" class="headerlink" title="Shell 脚本示例"></a>Shell 脚本示例</h4><pre class="language-shell" data-language="shell"><code class="language-shell"><span class="token shebang important">#! /bin/bash</span><span class="token assign-left variable">thispath</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">cd</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">dirname</span> <span class="token string">"<span class="token variable">$0</span>"</span><span class="token variable">)</span></span>"</span><span class="token punctuation">;</span> <span class="token builtin class-name">pwd</span><span class="token variable">)</span></span><span class="token assign-left variable">pyfile</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$thispath</span>/test0.py"</span><span class="token assign-left variable">result</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span>python $pyfile ttt ccc<span class="token variable">`</span></span><span class="token builtin class-name">echo</span> <span class="token variable">$result</span></code></pre><p>运行结果：</p><pre class="language-none"><code class="language-none">param one:ttt param two:ccc</code></pre><p>向 Shell 脚本传递参数：</p><pre class="language-shell" data-language="shell"><code class="language-shell"><span class="token shebang important">#! /bin/bash</span><span class="token assign-left variable">thispath</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">cd</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">dirname</span> <span class="token string">"<span class="token variable">$0</span>"</span><span class="token variable">)</span></span>"</span><span class="token punctuation">;</span> <span class="token builtin class-name">pwd</span><span class="token variable">)</span></span><span class="token assign-left variable">pyfile</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$thispath</span>/test0.py"</span><span class="token assign-left variable">result</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span>python $pyfile $1 $2<span class="token variable">`</span></span><span class="token builtin class-name">echo</span> <span class="token variable">$result</span></code></pre><p>运行结果：</p><pre class="language-none"><code class="language-none">$ bash test0.sh aaa bbbparam one:aaa param two:bbb</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;普通调用&quot;&gt;&lt;a href=&quot;#普通调用&quot; class=&quot;headerlink&quot; title=&quot;普通调用&quot;&gt;&lt;/a&gt;普通调用&lt;/h3&gt;&lt;h4 id=&quot;Python脚本示例&quot;&gt;&lt;a href=&quot;#Python脚本示例&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="Python" scheme="https://jueee.github.io/categories/Python/"/>
    
    <category term="Shell" scheme="https://jueee.github.io/categories/Shell/"/>
    
    
    <category term="Python" scheme="https://jueee.github.io/tags/Python/"/>
    
    <category term="Shell" scheme="https://jueee.github.io/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>Ant 打包常用语法汇总</title>
    <link href="https://jueee.github.io/2021/05/2021-05-21-Ant%E6%89%93%E5%8C%85%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95%E6%B1%87%E6%80%BB/"/>
    <id>https://jueee.github.io/2021/05/2021-05-21-Ant%E6%89%93%E5%8C%85%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95%E6%B1%87%E6%80%BB/</id>
    <published>2021-05-21T00:00:00.000Z</published>
    <updated>2021-05-21T10:51:04.400Z</updated>
    
    <content type="html"><![CDATA[<h3 id="排除特定文件"><a href="#排除特定文件" class="headerlink" title="排除特定文件"></a>排除特定文件</h3><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>copy</span> <span class="token attr-name">todir</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${build.dir}<span class="token punctuation">"</span></span> <span class="token attr-name">overwrite</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fileset</span> <span class="token attr-name">dir</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${src.dir}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclude</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>**/*.java<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span> <span class="token comment">&lt;!-- 排除所有java文件 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclude</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>helloworld/<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span> <span class="token comment">&lt;!-- 排除根目录下整个helloworld文件夹 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclude</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>**/test/<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span> <span class="token comment">&lt;!-- 排除test子目录本身及其子目录下的所有文件夹 --&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fileset</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>copy</span><span class="token punctuation">&gt;</span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;排除特定文件&quot;&gt;&lt;a href=&quot;#排除特定文件&quot; class=&quot;headerlink&quot; title=&quot;排除特定文件&quot;&gt;&lt;/a&gt;排除特定文件&lt;/h3&gt;&lt;pre class=&quot;language-xml&quot; data-language=&quot;xml&quot;&gt;&lt;code class</summary>
      
    
    
    
    <category term="Apache" scheme="https://jueee.github.io/categories/Apache/"/>
    
    <category term="Ant" scheme="https://jueee.github.io/categories/Apache/Ant/"/>
    
    
    <category term="Apache" scheme="https://jueee.github.io/tags/Apache/"/>
    
    <category term="Ant" scheme="https://jueee.github.io/tags/Ant/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 锁表问题的排查和处理</title>
    <link href="https://jueee.github.io/2021/05/2021-05-19-MySQL%E9%94%81%E8%A1%A8%E9%97%AE%E9%A2%98%E7%9A%84%E6%8E%92%E6%9F%A5%E5%92%8C%E5%A4%84%E7%90%86/"/>
    <id>https://jueee.github.io/2021/05/2021-05-19-MySQL%E9%94%81%E8%A1%A8%E9%97%AE%E9%A2%98%E7%9A%84%E6%8E%92%E6%9F%A5%E5%92%8C%E5%A4%84%E7%90%86/</id>
    <published>2021-05-19T00:00:00.000Z</published>
    <updated>2021-05-21T10:51:04.398Z</updated>
    
    <content type="html"><![CDATA[<p>我们可以用下面三张 <code>INFORMATION_SCHEMA</code> 库中的表来查原因：</p><ul><li><strong>innodb_trx</strong>：当前运行的所有事务</li><li><strong> innodb_locks</strong>：当前出现的锁</li><li><strong> innodb_lock_waits</strong>：锁等待的对应关系</li></ul><a id="more"></a><h3 id="排查锁表"><a href="#排查锁表" class="headerlink" title="排查锁表"></a>排查锁表</h3><p>锁表查看命令</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> INFORMATION_SCHEMA<span class="token punctuation">.</span>INNODB_LOCK_WAITS<span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> INFORMATION_SCHEMA<span class="token punctuation">.</span>INNODB_TRX<span class="token punctuation">;</span></code></pre><p>组合查询：</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">SELECT r.trx_id waiting_trx_id,   r.trx_mysql_thread_id waiting_thread, r.trx_query waiting_query,   b.trx_id blocking_trx_id,   b.trx_mysql_thread_id blocking_thread,   b.trx_query blocking_query FROM information_schema.innodb_lock_waits w INNER JOIN information_schema.innodb_trx b   ON b.trx_id = w.blocking_trx_id INNER JOIN information_schema.innodb_trx r ON r.trx_id = w.requesting_trx_id;</code></pre><p>如下图所示：</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; SELECT * FROM information_schema.INNODB_TRX\G*************************** 1. row ***************************                    trx_id: 1081258251                 trx_state: ROLLING BACK               trx_started: 2021-05-19 09:31:10     trx_requested_lock_id: NULL          trx_wait_started: NULL                trx_weight: 2311922       trx_mysql_thread_id: 83833568                 trx_query: update XXXX set status=0 where id=0       trx_operation_state: rollback of SQL statement         trx_tables_in_use: 1         trx_tables_locked: 1          trx_lock_structs: 644407     trx_lock_memory_bytes: 58073296           trx_rows_locked: 5021486         trx_rows_modified: 1667515   trx_concurrency_tickets: 0       trx_isolation_level: READ COMMITTED         trx_unique_checks: 1    trx_foreign_key_checks: 1trx_last_foreign_key_error: NULL trx_adaptive_hash_latched: 0 trx_adaptive_hash_timeout: 0          trx_is_read_only: 0trx_autocommit_non_locking: 0</code></pre><h3 id="系统表的表结构"><a href="#系统表的表结构" class="headerlink" title="系统表的表结构"></a>系统表的表结构</h3><h4 id="innodb-locks"><a href="#innodb-locks" class="headerlink" title="innodb_locks"></a>innodb_locks</h4><p><strong>desc information_schema.innodb_locks;</strong></p><table><thead><tr><th>Field</th><th>Type</th><th>Null</th><th>Key</th><th>Default</th><th>Extra</th></tr></thead><tbody><tr><td>lock_id</td><td>varchar(81)</td><td>NO</td><td></td><td></td><td> 锁 ID</td></tr><tr><td>lock_trx_id</td><td>varchar(18)</td><td>NO</td><td></td><td></td><td> 拥有锁的事务 ID</td></tr><tr><td>lock_mode</td><td>varchar(32)</td><td>NO</td><td></td><td></td><td> 锁模式</td></tr><tr><td> lock_type</td><td>varchar(32)</td><td>NO</td><td></td><td></td><td> 锁类型</td></tr><tr><td> lock_table</td><td>varchar(1024)</td><td>NO</td><td></td><td></td><td> 被锁的表</td></tr><tr><td> lock_index</td><td>varchar(1024)</td><td>YES</td><td></td><td></td><td> 被锁的索引</td></tr><tr><td> lock_space</td><td>bigint(21) unsigned</td><td>YES</td><td></td><td></td><td> 被锁的表空间号</td></tr><tr><td> lock_page</td><td>bigint(21) unsigned</td><td>YES</td><td></td><td></td><td> 被锁的页号</td></tr><tr><td> lock_rec</td><td>bigint(21) unsigned</td><td>YES</td><td></td><td></td><td> 被锁的记录号</td></tr><tr><td> lock_data</td><td>varchar(8192)</td><td>YES</td><td></td><td></td><td> 被锁的数据</td></tr></tbody></table><h4 id="innodb-lock-waits"><a href="#innodb-lock-waits" class="headerlink" title="innodb_lock_waits"></a><strong>innodb_lock_waits</strong></h4><p><strong>desc information_schema.innodb_lock_waits;</strong></p><table><thead><tr><th>Field</th><th>Type</th><th>Null</th><th>Key</th><th>Default</th><th>Remark</th></tr></thead><tbody><tr><td>requesting_trx_id</td><td>varchar(18)</td><td>NO</td><td></td><td></td><td> 请求锁的事务 ID</td></tr><tr><td>requested_lock_id</td><td>varchar(81)</td><td>NO</td><td></td><td></td><td> 请求锁的锁 ID</td></tr><tr><td>blocking_trx_id</td><td>varchar(18)</td><td>NO</td><td></td><td></td><td> 当前拥有锁的事务 ID</td></tr><tr><td>blocking_lock_id</td><td>varchar(81)</td><td>NO</td><td></td><td></td><td> 当前拥有锁的锁 ID</td></tr></tbody></table><h4 id="innodb-trx"><a href="#innodb-trx" class="headerlink" title="innodb_trx"></a>innodb_trx</h4><p><strong>desc information_schema.innodb_trx;</strong></p><table><thead><tr><th>Field</th><th>Type</th><th>Null</th><th>Key</th><th>Default</th><th>Extra</th><th>Remark</th></tr></thead><tbody><tr><td>trx_id</td><td>varchar(18)</td><td>NO</td><td></td><td></td><td></td><td> 事务 ID</td></tr><tr><td>trx_state</td><td>varchar(13)</td><td>NO</td><td></td><td></td><td></td><td> 事务状态</td></tr><tr><td> trx_started</td><td>datetime</td><td>NO</td><td></td><td>0000-00-00 00:00:00</td><td> 事务开始时间</td><td></td></tr><tr><td> trx_requested_lock_id</td><td>varchar(81)</td><td>YES</td><td></td><td></td><td></td><td>innodb_locks.lock_id</td></tr><tr><td>trx_wait_started</td><td>datetime</td><td>YES</td><td></td><td></td><td></td><td> 事务开始等待的时间</td></tr><tr><td> trx_weight</td><td>bigint(21) unsigned</td><td>NO</td><td></td><td>0</td><td></td><td>#</td></tr><tr><td>trx_mysql_thread_id</td><td>bigint(21) unsigned</td><td>NO</td><td></td><td>0</td><td></td><td> 事务线程 ID</td></tr><tr><td>trx_query</td><td>varchar(1024)</td><td>YES</td><td></td><td></td><td></td><td> 具体 SQL 语句</td></tr><tr><td> trx_operation_state</td><td>varchar(64)</td><td>YES</td><td></td><td></td><td></td><td> 事务当前操作状态</td></tr><tr><td> trx_tables_in_use</td><td>bigint(21) unsigned</td><td>NO</td><td></td><td>0</td><td></td><td> 事务中有多少个表被使用</td></tr><tr><td> trx_tables_locked</td><td>bigint(21) unsigned</td><td>NO</td><td></td><td>0</td><td></td><td> 事务拥有多少个锁</td></tr><tr><td> trx_lock_structs</td><td>bigint(21) unsigned</td><td>NO</td><td></td><td>0</td><td></td><td>#</td></tr><tr><td>trx_lock_memory_bytes</td><td>bigint(21) unsigned</td><td>NO</td><td></td><td>0</td><td></td><td> 事务锁住的内存大小（B）</td></tr><tr><td>trx_rows_locked</td><td>bigint(21) unsigned</td><td>NO</td><td></td><td>0</td><td></td><td> 事务锁住的行数</td></tr><tr><td> trx_rows_modified</td><td>bigint(21) unsigned</td><td>NO</td><td></td><td>0</td><td></td><td> 事务更改的行数</td></tr><tr><td> trx_concurrency_tickets</td><td>bigint(21) unsigned</td><td>NO</td><td></td><td>0</td><td></td><td> 事务并发票数</td></tr><tr><td> trx_isolation_level</td><td>varchar(16)</td><td>NO</td><td></td><td></td><td></td><td> 事务隔离级别</td></tr><tr><td> trx_unique_checks</td><td>int(1)</td><td>NO</td><td></td><td>0</td><td></td><td> 是否唯一性检查</td></tr><tr><td> trx_foreign_key_checks</td><td>int(1)</td><td>NO</td><td></td><td>0</td><td></td><td> 是否外键检查</td></tr><tr><td> trx_last_foreign_key_error</td><td>varchar(256)</td><td>YES</td><td></td><td></td><td></td><td> 最后的外键错误</td></tr><tr><td> trx_adaptive_hash_latched</td><td>int(1)</td><td>NO</td><td></td><td>0</td><td></td><td>#</td></tr><tr><td>trx_adaptive_hash_timeout</td><td>bigint(21) unsigned</td><td>NO</td><td></td><td>0</td><td></td><td>#</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;p&gt;我们可以用下面三张 &lt;code&gt;INFORMATION_SCHEMA&lt;/code&gt; 库中的表来查原因：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;innodb_trx&lt;/strong&gt;：当前运行的所有事务&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; innodb_locks&lt;/strong&gt;：当前出现的锁&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; innodb_lock_waits&lt;/strong&gt;：锁等待的对应关系&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="MySQL" scheme="https://jueee.github.io/categories/MySQL/"/>
    
    
    <category term="MySQL" scheme="https://jueee.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>fastjson 常用汇总</title>
    <link href="https://jueee.github.io/2021/05/2021-05-18-fastjson%E5%B8%B8%E7%94%A8%E6%B1%87%E6%80%BB/"/>
    <id>https://jueee.github.io/2021/05/2021-05-18-fastjson%E5%B8%B8%E7%94%A8%E6%B1%87%E6%80%BB/</id>
    <published>2021-05-18T00:00:00.000Z</published>
    <updated>2021-05-21T10:51:04.394Z</updated>
    
    <content type="html"><![CDATA[<h3 id="fastjson"><a href="#fastjson" class="headerlink" title="fastjson"></a>fastjson</h3><ul><li>GitHub：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvZmFzdGpzb24=">https://github.com/alibaba/fastjson<i class="fa fa-external-link-alt"></i></span></li><li> 文档：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvZmFzdGpzb24vd2lraS9RdWljay1TdGFydC1DTg==">https://github.com/alibaba/fastjson/wiki/Quick-Start-CN<i class="fa fa-external-link-alt"></i></span></li></ul><h4 id="依赖引入"><a href="#依赖引入" class="headerlink" title="依赖引入"></a>依赖引入</h4><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/fastjson --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>fastjson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.2.76<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></code></pre><a id="more"></a><h3 id="JSONArray-转换"><a href="#JSONArray-转换" class="headerlink" title="JSONArray 转换"></a>JSONArray 转换</h3><p><strong>List 转 JSONArray</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">JSONArray</span> jsonArray <span class="token operator">=</span> <span class="token class-name">JSONArray</span><span class="token punctuation">.</span><span class="token function">parseArray</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>metaInfoFeatures<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>字符串转对象</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Info</span><span class="token punctuation">&gt;</span></span> infos <span class="token operator">=</span> <span class="token class-name">JSONArray</span><span class="token punctuation">.</span><span class="token function">parseArray</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> <span class="token class-name">Info</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;fastjson&quot;&gt;&lt;a href=&quot;#fastjson&quot; class=&quot;headerlink&quot; title=&quot;fastjson&quot;&gt;&lt;/a&gt;fastjson&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;GitHub：&lt;a href=&quot;https://github.com/alibaba/fastjson&quot;&gt;https://github.com/alibaba/fastjson&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; 文档：&lt;a href=&quot;https://github.com/alibaba/fastjson/wiki/Quick-Start-CN&quot;&gt;https://github.com/alibaba/fastjson/wiki/Quick-Start-CN&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;依赖引入&quot;&gt;&lt;a href=&quot;#依赖引入&quot; class=&quot;headerlink&quot; title=&quot;依赖引入&quot;&gt;&lt;/a&gt;依赖引入&lt;/h4&gt;&lt;pre class=&quot;language-xml&quot; data-language=&quot;xml&quot;&gt;&lt;code class=&quot;language-xml&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- https://mvnrepository.com/artifact/com.alibaba/fastjson --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;dependency&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;groupId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;com.alibaba&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;groupId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;artifactId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;fastjson&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;artifactId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;version&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;1.2.76&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;version&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;dependency&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="Java" scheme="https://jueee.github.io/categories/Java/"/>
    
    <category term="JavaJar" scheme="https://jueee.github.io/categories/Java/JavaJar/"/>
    
    
    <category term="Java" scheme="https://jueee.github.io/tags/Java/"/>
    
    <category term="JavaJar" scheme="https://jueee.github.io/tags/JavaJar/"/>
    
    <category term="JSON" scheme="https://jueee.github.io/tags/JSON/"/>
    
  </entry>
  
  <entry>
    <title>ElementUI 实现文件上传下载</title>
    <link href="https://jueee.github.io/2021/05/2021-05-17-ElementUI%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD/"/>
    <id>https://jueee.github.io/2021/05/2021-05-17-ElementUI%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD/</id>
    <published>2021-05-17T00:00:00.000Z</published>
    <updated>2021-05-21T10:51:04.388Z</updated>
    
    <content type="html"><![CDATA[<p>通过 ElementUI 实现文件上传下载。</p><a id="more"></a><h3 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h3><h4 id="ElementUI"><a href="#ElementUI" class="headerlink" title="ElementUI"></a>ElementUI</h4><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">icon</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>el-icon-download<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>downJson<span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span>导出<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">&gt;</span></span></code></pre><h4 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h4><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">downJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> $<span class="token keyword">this</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> res <span class="token operator">=</span> axios    <span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        url<span class="token operator">:</span> <span class="token string">"/exportJson"</span><span class="token punctuation">,</span>        method<span class="token operator">:</span> <span class="token string">"post"</span><span class="token punctuation">,</span>        responseType<span class="token operator">:</span> <span class="token string">"blob"</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> data <span class="token operator">=</span> res<span class="token punctuation">.</span>data<span class="token punctuation">;</span>        <span class="token keyword">let</span> url <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将二进制文件转化为可访问的账号</span>        <span class="token keyword">var</span> a <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token punctuation">.</span>href <span class="token operator">=</span> url<span class="token punctuation">;</span>        a<span class="token punctuation">.</span>download <span class="token operator">=</span> <span class="token string">"XXX.json"</span><span class="token punctuation">;</span>        a<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        window<span class="token punctuation">.</span><span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">revokeObjectURL</span><span class="token punctuation">(</span><span class="token constant">URL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> </code></pre><h4 id="Java接口"><a href="#Java接口" class="headerlink" title="Java接口"></a>Java 接口</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/exportJson"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">exportJson</span><span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> infos <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token class-name">ByteArrayOutputStream</span> os <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">JSONArray</span> jsonArray <span class="token operator">=</span> <span class="token class-name">JSONArray</span><span class="token punctuation">.</span><span class="token function">parseArray</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>infos<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        os<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>jsonArray<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> content <span class="token operator">=</span> os<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">InputStream</span> is <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">IOUtils</span><span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>is<span class="token punctuation">,</span> response<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">flushBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><h4 id="ElementUI-1"><a href="#ElementUI-1" class="headerlink" title="ElementUI"></a>ElementUI</h4><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-dialog</span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>上传<span class="token punctuation">"</span></span> <span class="token attr-name">:visible.sync</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>uploadDialogVisible<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>40%<span class="token punctuation">"</span></span> <span class="token attr-name">@close</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>closeUploadDialog<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-row</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-upload</span>                       <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>upload-demo<span class="token punctuation">"</span></span>                       <span class="token attr-name">:auto-upload</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>                       <span class="token attr-name">multiple</span>                       <span class="token attr-name">action</span>                       <span class="token attr-name">:file-list</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>uploadFileList<span class="token punctuation">"</span></span>                       <span class="token attr-name">:on-change</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>uploadFileChange<span class="token punctuation">"</span></span>                       <span class="token attr-name">:limit</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>small<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>点击上传<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tip<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>el-upload__tip<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>只能上传 json 文件，且不超过500kb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-upload</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-row</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dialog-footer<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>uploadDialogVisible = false<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>取 消<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>uploadJson<span class="token punctuation">"</span></span> <span class="token attr-name">:disabled</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btnDisabled<span class="token punctuation">"</span></span> <span class="token attr-name">:loading</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btnLoading<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>确 定<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-dialog</span><span class="token punctuation">&gt;</span></span></code></pre><p>注：action 属性必须存在，可以为空值。</p><h4 id="Vue-1"><a href="#Vue-1" class="headerlink" title="Vue"></a>Vue</h4><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      uploadDialogVisible<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">//添加弹框是否显示</span>      uploadFileList<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>methods<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token function">uploadFileChange</span> <span class="token punctuation">(</span><span class="token parameter">file<span class="token punctuation">,</span> fileList</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>uploadFileList <span class="token operator">=</span> fileList<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function-variable function">uploadJson</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">let</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>          headers<span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token string">'Content-Type'</span><span class="token operator">:</span> <span class="token string">'multipart/form-data;'</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> letdata <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      letdata<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"file"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>uploadFileList<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>raw<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">const</span> <span class="token punctuation">{</span>data<span class="token operator">:</span> res<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$http<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>              <span class="token string">"/uploadJson"</span><span class="token punctuation">,</span>              letdata<span class="token punctuation">,</span>config      <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$message<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token string">"上传成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>uploadDialogVisible<span class="token operator">=</span><span class="token boolean">false</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getmetaInfoFeatureList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"上传失败:"</span> <span class="token operator">+</span> res<span class="token punctuation">.</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>必须使用 <code>new FormData()</code> 提交 form 表单，同时携带 <code>Content-Type</code> 头信息。</p><p>否则加请求头报 no multipart boundary was found，删掉又报 Current request is not a multipart request。</p><p>没有设置 boundary 边界，正确的消息头应该是 <code>'Content-Type':'multipart/form-data;boundary='+随机数</code>。</p><p>如下图所示：</p><p><img src="/images/2021/05/image-20210518190117832.png" alt="image-20210518190117832" loading="lazy"></p><h4 id="Java-接口"><a href="#Java-接口" class="headerlink" title="Java 接口"></a>Java 接口</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/uploadJson"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ResponseBody</span><span class="token keyword">public</span> <span class="token class-name">ResponseBean</span> <span class="token function">uploadJson</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"file"</span><span class="token punctuation">)</span> <span class="token class-name">MultipartFile</span> file<span class="token punctuation">)</span> <span class="token punctuation">{</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"size:"</span><span class="token operator">+</span>file<span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">ResponseBean</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="跨域配置"><a href="#跨域配置" class="headerlink" title="跨域配置"></a>跨域配置</h3><p>解决跨域上传文件：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CrosConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addCorsMappings</span><span class="token punctuation">(</span><span class="token class-name">CorsRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        registry<span class="token punctuation">.</span><span class="token function">addMapping</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">allowedOrigins</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">allowedMethods</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span> <span class="token string">"HEAD"</span><span class="token punctuation">,</span> <span class="token string">"POST"</span><span class="token punctuation">,</span> <span class="token string">"PUT"</span><span class="token punctuation">,</span> <span class="token string">"DELETE"</span><span class="token punctuation">,</span> <span class="token string">"OPTIONS"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">allowCredentials</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">//这两句不加不能跨域上传文件，</span>                <span class="token punctuation">.</span><span class="token function">maxAge</span><span class="token punctuation">(</span><span class="token number">3600</span><span class="token punctuation">)</span>   <span class="token comment">//加上去就可以了</span>                <span class="token punctuation">.</span><span class="token function">allowedHeaders</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;通过 ElementUI 实现文件上传下载。&lt;/p&gt;</summary>
    
    
    
    <category term="Vue" scheme="https://jueee.github.io/categories/Vue/"/>
    
    
    <category term="Vue" scheme="https://jueee.github.io/tags/Vue/"/>
    
    <category term="ElementUI" scheme="https://jueee.github.io/tags/ElementUI/"/>
    
  </entry>
  
  <entry>
    <title>Vue 之 ElementUI 动态创建输入框</title>
    <link href="https://jueee.github.io/2021/05/2021-05-13-Vue%E4%B9%8BelementUI%E5%8A%A8%E6%80%81%E5%88%9B%E5%BB%BA%E8%BE%93%E5%85%A5%E6%A1%86/"/>
    <id>https://jueee.github.io/2021/05/2021-05-13-Vue%E4%B9%8BelementUI%E5%8A%A8%E6%80%81%E5%88%9B%E5%BB%BA%E8%BE%93%E5%85%A5%E6%A1%86/</id>
    <published>2021-05-13T00:00:00.000Z</published>
    <updated>2021-05-21T10:51:04.365Z</updated>
    
    <content type="html"><![CDATA[<h3 id="动态添加属性"><a href="#动态添加属性" class="headerlink" title="动态添加属性"></a>动态添加属性</h3><h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h4><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form</span> <span class="token attr-name">:model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataForm<span class="token punctuation">"</span></span> <span class="token attr-name">label-width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100px<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span>                 <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(domain, index) in dataForm.domains<span class="token punctuation">"</span></span>                <span class="token attr-name">:label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>domain.key</span>                <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>domain.key<span class="token punctuation">"</span></span>                <span class="token attr-name">:prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>domains.<span class="token punctuation">'</span> + index + <span class="token punctuation">'</span>.value<span class="token punctuation">'</span><span class="token punctuation">"</span></span>                <span class="token attr-name">:rules</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{ required: true, message: <span class="token punctuation">'</span>属性不能为空<span class="token punctuation">'</span>, trigger: <span class="token punctuation">'</span>blur<span class="token punctuation">'</span>}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-row</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-col</span> <span class="token attr-name">:span</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>6<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>domain.value<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-input</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-col</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-col</span> <span class="token attr-name">:span</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>4<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">@click.prevent</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>removeDomain(domain)<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>删除<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-col</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-row</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submitForm(<span class="token punctuation">'</span>dataForm<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>提交属性 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>addDomain<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>新增属性<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        dataForm<span class="token operator">:</span> <span class="token punctuation">{</span>          domains<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>            key<span class="token operator">:</span> <span class="token string">'属性a'</span><span class="token punctuation">,</span>            value<span class="token operator">:</span> <span class="token string">'aaa'</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>            key<span class="token operator">:</span> <span class="token string">'属性b'</span><span class="token punctuation">,</span>            value<span class="token operator">:</span> <span class="token string">'bbb'</span>          <span class="token punctuation">}</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token function">removeDomain</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dataForm<span class="token punctuation">.</span>domains<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>dataForm<span class="token punctuation">.</span>domains<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token function">addDomain</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$prompt</span><span class="token punctuation">(</span><span class="token string">'请输入属性'</span><span class="token punctuation">,</span> <span class="token string">'提示'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>          confirmButtonText<span class="token operator">:</span> <span class="token string">'确定'</span><span class="token punctuation">,</span>          cancelButtonText<span class="token operator">:</span> <span class="token string">'取消'</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> value <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>dataForm<span class="token punctuation">.</span>domains<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            value<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>            key<span class="token operator">:</span> value          <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$message</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            type<span class="token operator">:</span> <span class="token string">'info'</span><span class="token punctuation">,</span>            message<span class="token operator">:</span> <span class="token string">'取消输入'</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></code></pre><h4 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h4><p>默认：</p><p><img src="/images/2021/05/image-20210513153916188.png" alt="image-20210513153916188" loading="lazy"></p><p>增加属性：</p><p><img src="/images/2021/05/image-20210513153943479.png" alt="image-20210513153943479" loading="lazy"></p><p>增加后：</p><p><img src="/images/2021/05/image-20210513153956956.png" alt="image-20210513153956956" loading="lazy"></p><p>删除：</p><p><img src="/images/2021/05/image-20210513154011220.png" alt="image-20210513154011220" loading="lazy"></p><h3 id="动态添加输入框"><a href="#动态添加输入框" class="headerlink" title="动态添加输入框"></a>动态添加输入框</h3><h4 id="示例代码-1"><a href="#示例代码-1" class="headerlink" title="示例代码"></a>示例代码</h4><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form</span> <span class="token attr-name">:model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataForm<span class="token punctuation">"</span></span> <span class="token attr-name">label-width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100px<span class="token punctuation">"</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>small<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>名称匹配<span class="token punctuation">"</span></span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-row</span> <span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(domain, index) in dataForm.domains<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-col</span> <span class="token attr-name">:span</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>domain.value<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-input</span><span class="token punctuation">&gt;</span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-col</span><span class="token punctuation">&gt;</span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-col</span> <span class="token attr-name">:span</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span>  <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>removeDomain(index)<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>删除<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">&gt;</span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-col</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-col</span> <span class="token attr-name">:span</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span>  <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>addDomain<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>新增<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-col</span><span class="token punctuation">&gt;</span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-row</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submitForm(<span class="token punctuation">'</span>dataForm<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>提交属性 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        dataForm<span class="token operator">:</span> <span class="token punctuation">{</span>          domains<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>value<span class="token operator">:</span><span class="token string">"aaa"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>value<span class="token operator">:</span><span class="token string">"bbb"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>value<span class="token operator">:</span><span class="token string">"ccc"</span><span class="token punctuation">}</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token function">removeDomain</span><span class="token punctuation">(</span><span class="token parameter">index</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>dataForm<span class="token punctuation">.</span>domains<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token function">addDomain</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>dataForm<span class="token punctuation">.</span>domains<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>value<span class="token operator">:</span><span class="token string">""</span><span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></code></pre><h4 id="实现效果-1"><a href="#实现效果-1" class="headerlink" title="实现效果"></a>实现效果</h4><p><img src="/images/2021/05/image-20210513170442637.png" alt="image-20210513170442637" loading="lazy"></p><h4 id="优化效果"><a href="#优化效果" class="headerlink" title="优化效果"></a>优化效果</h4><p>通过 <code>clearable @clear=''</code> 来实现删除效果。</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form</span> <span class="token attr-name">:model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataForm<span class="token punctuation">"</span></span> <span class="token attr-name">label-width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100px<span class="token punctuation">"</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>small<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>名称匹配<span class="token punctuation">"</span></span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-row</span> <span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-col</span> <span class="token attr-name">:span</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(domain, index) in dataForm.domains<span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>domain.value<span class="token punctuation">"</span></span> <span class="token attr-name">clearable</span> <span class="token attr-name">@clear</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>removeDomain(index)<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-input</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-col</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-col</span> <span class="token attr-name">:span</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span>  <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>addDomain<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>新增<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-col</span><span class="token punctuation">&gt;</span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-row</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submitForm(<span class="token punctuation">'</span>dataForm<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>提交属性 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span></code></pre><p><img src="/images/2021/05/image-20210513171431164.png" alt="image-20210513171431164" loading="lazy"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;动态添加属性&quot;&gt;&lt;a href=&quot;#动态添加属性&quot; class=&quot;headerlink&quot; title=&quot;动态添加属性&quot;&gt;&lt;/a&gt;动态添加属性&lt;/h3&gt;&lt;h4 id=&quot;示例代码&quot;&gt;&lt;a href=&quot;#示例代码&quot; class=&quot;headerlink&quot; title=&quot;示</summary>
      
    
    
    
    <category term="Vue" scheme="https://jueee.github.io/categories/Vue/"/>
    
    
    <category term="Vue" scheme="https://jueee.github.io/tags/Vue/"/>
    
    <category term="ElementUI" scheme="https://jueee.github.io/tags/ElementUI/"/>
    
  </entry>
  
  <entry>
    <title>Bootstrap Table 列宽拖动的方法</title>
    <link href="https://jueee.github.io/2021/05/2021-05-12-Bootstrap%20Table%E5%88%97%E5%AE%BD%E6%8B%96%E5%8A%A8%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>https://jueee.github.io/2021/05/2021-05-12-Bootstrap%20Table%E5%88%97%E5%AE%BD%E6%8B%96%E5%8A%A8%E7%9A%84%E6%96%B9%E6%B3%95/</id>
    <published>2021-05-12T00:00:00.000Z</published>
    <updated>2021-05-12T08:26:55.239Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Bootstrap"><a href="#Bootstrap" class="headerlink" title="Bootstrap"></a>Bootstrap</h3><ul><li>官方插件：<span class="exturl" data-url="aHR0cHM6Ly9ib290c3RyYXAtdGFibGUuY29tL2RvY3MvZXh0ZW5zaW9ucy9yZXNpemFibGUv">https://bootstrap-table.com/docs/extensions/resizable/<i class="fa fa-external-link-alt"></i></span></li></ul><h3 id="方法一：colResizable"><a href="#方法一：colResizable" class="headerlink" title="方法一：colResizable"></a>方法一：colResizable</h3><ul><li>官网介绍：<span class="exturl" data-url="aHR0cDovL3d3dy5iYWN1YmFjdS5jb20vY29scmVzaXphYmxlLw==">http://www.bacubacu.com/colresizable/<i class="fa fa-external-link-alt"></i></span></li><li>GitHub：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FsdmFyby1wcmlldG8vY29sUmVzaXphYmxl">https://github.com/alvaro-prieto/colResizable<i class="fa fa-external-link-alt"></i></span></li></ul><h4 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h4><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.bacubacu.com/colresizable/js/colResizable-1.6.min.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></code></pre><h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h4><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>colResizable<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.bacubacu.com/colresizable/js/colResizable-1.6.min.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">     <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#table"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">colResizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>table<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>table table-bordered table-hover<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>thead</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span> 19.09%<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span>ID<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span> 33.56%<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span>Item Name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span> 47.28%<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span>Item Price<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>thead</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tbody</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">data-index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>Item 0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>$0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">data-index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>Item 1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>$1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">data-index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>Item 10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>$10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tbody</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span></code></pre><h3 id="方法二：resizableColumns"><a href="#方法二：resizableColumns" class="headerlink" title="方法二：resizableColumns"></a>方法二：resizableColumns</h3><ul><li>GitHub：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2RvYnRjby9qcXVlcnktcmVzaXphYmxlLWNvbHVtbnM=">https://github.com/dobtco/jquery-resizable-columns<i class="fa fa-external-link-alt"></i></span></li><li> 官方示例：<span class="exturl" data-url="aHR0cDovL2RvYnRjby5naXRodWIuaW8vanF1ZXJ5LXJlc2l6YWJsZS1jb2x1bW5zLw==">http://dobtco.github.io/jquery-resizable-columns/<i class="fa fa-external-link-alt"></i></span></li></ul><h4 id="引入依赖-1"><a href="#引入依赖-1" class="headerlink" title="引入依赖"></a>引入依赖</h4><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>js/main/jquery.resizableColumns.min.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>css/main/jquery.resizableColumns.css<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span></code></pre><h4 id="示例代码-1"><a href="#示例代码-1" class="headerlink" title="示例代码"></a>示例代码</h4><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://dobtco.github.io/jquery-resizable-columns/dist/jquery.resizableColumns.css<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://dobtco.github.io/jquery-resizable-columns/dist/jquery.resizableColumns.min.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>table<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>table table-bordered table-hover<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>thead</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span> 19.09%<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span>ID<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span> 33.56%<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span>Item Name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span> 47.28%<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span>Item Price<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>thead</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tbody</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">data-index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>Item 0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>$0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">data-index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>Item 1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>$1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">data-index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>Item 10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>$10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tbody</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#table"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">resizableColumns</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    store<span class="token operator">:</span> window<span class="token punctuation">.</span>store  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></code></pre><p><img src="/images/2021/05/image-20210512155456453.png" alt="image-20210512155456453" loading="lazy"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Bootstrap&quot;&gt;&lt;a href=&quot;#Bootstrap&quot; class=&quot;headerlink&quot; title=&quot;Bootstrap&quot;&gt;&lt;/a&gt;Bootstrap&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;官方插件：&lt;span class=&quot;exturl&quot; data-url=&quot;</summary>
      
    
    
    
    <category term="HTML" scheme="https://jueee.github.io/categories/HTML/"/>
    
    
    <category term="HTML" scheme="https://jueee.github.io/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>ElementUI 中的对列的值进行处理</title>
    <link href="https://jueee.github.io/2021/04/2021-04-29-ElementUI%E4%B8%AD%E7%9A%84%E5%AF%B9%E5%88%97%E7%9A%84%E5%80%BC%E8%BF%9B%E8%A1%8C%E5%A4%84%E7%90%86/"/>
    <id>https://jueee.github.io/2021/04/2021-04-29-ElementUI%E4%B8%AD%E7%9A%84%E5%AF%B9%E5%88%97%E7%9A%84%E5%80%BC%E8%BF%9B%E8%A1%8C%E5%A4%84%E7%90%86/</id>
    <published>2021-04-29T00:00:00.000Z</published>
    <updated>2021-05-20T09:35:07.040Z</updated>
    
    <content type="html"><![CDATA[<h3 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h3><p>普通超链接</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>URL<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot-scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>scope<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-link</span> <span class="token attr-name">:href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>scope.row.urlString<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>buttonText<span class="token punctuation">"</span></span>  <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">:underline</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> {{ scope.row.keyword }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-link</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">&gt;</span></span></code></pre><p>函数超链接</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-link</span> <span class="token attr-name">:href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>toConfig(scope.row.name)<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span> {{ scope.row.name }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-link</span><span class="token punctuation">&gt;</span></span>    toConfig(name){      return "XXX?name="+name;    },</code></pre><h3 id="类型翻译"><a href="#类型翻译" class="headerlink" title="类型翻译"></a>类型翻译</h3><h4 id="使用-formatter"><a href="#使用-formatter" class="headerlink" title="使用 formatter"></a>使用 formatter</h4><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>anttype<span class="token punctuation">"</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>类型<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>120<span class="token punctuation">"</span></span> <span class="token attr-name">:formatter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>anttypeFormat<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">&gt;</span></span></code></pre><p>以下函数无效：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">anttypeFormat</span><span class="token punctuation">(</span><span class="token parameter">row<span class="token punctuation">,</span> column</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>markerCategorys<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">t</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>id <span class="token operator">==</span> row<span class="token punctuation">.</span>anttype<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> t<span class="token punctuation">.</span>name<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><p>需要修改为：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">anttypeFormat</span><span class="token punctuation">(</span><span class="token parameter">row<span class="token punctuation">,</span> column</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>markerCategorys<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>markerCategorys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id <span class="token operator">==</span> row<span class="token punctuation">.</span>anttype<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>markerCategorys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><p>这是由于 Vue 中的 forEach 循环无法终止程序 return 无效。需要改为用 for 循环即可。</p><h4 id="使用-过滤器"><a href="#使用-过滤器" class="headerlink" title="使用 过滤器"></a>使用 过滤器</h4><h5 id="普通过滤器"><a href="#普通过滤器" class="headerlink" title="普通过滤器"></a>普通过滤器</h5><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>日期<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>180<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot-scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>scope<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>{{ scope.row.date | formatDate('HH:mm:ss') }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">&gt;</span></span></code></pre><p>定义函数</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">dateFormat</span><span class="token punctuation">(</span><span class="token parameter">row<span class="token punctuation">,</span>column</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">var</span> date <span class="token operator">=</span> row<span class="token punctuation">[</span>column<span class="token punctuation">.</span>property<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>date <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">''</span>  <span class="token punctuation">}</span>  <span class="token keyword">var</span> dT<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//row 表示一行数据, dateTime 表示要格式化的字段名称</span>  <span class="token keyword">return</span> dT<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"-"</span><span class="token operator">+</span><span class="token punctuation">(</span>dT<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"-"</span><span class="token operator">+</span>dT<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span>dT<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>dT<span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>dT<span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h5 id="this-过滤器"><a href="#this-过滤器" class="headerlink" title="this 过滤器"></a>this 过滤器</h5><p>Vue 局部过滤器获取不到 this，可以在 data 里面加个字段赋值 this，然后在过滤器里传入参数。</p><p>定义函数</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      that<span class="token operator">:</span><span class="token keyword">this</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  filters<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token function">anttypeFormat</span><span class="token punctuation">(</span><span class="token parameter">anttype<span class="token punctuation">,</span>that</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> that<span class="token punctuation">.</span>markerCategorys<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>that<span class="token punctuation">.</span>markerCategorys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id <span class="token operator">==</span> anttype<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> that<span class="token punctuation">.</span>markerCategorys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>所有过滤器</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>备注描述<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot-scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>scope<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>!scope.row.anttype==<span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>{{ scope.row.anttype | anttypeFormat(that) }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">&gt;</span></span></code></pre><h3 id="状态-switch"><a href="#状态-switch" class="headerlink" title="状态 switch"></a>状态 switch</h3><p>Java 状态：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>exist <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token class-name">Boolean</span> statusVO<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Boolean</span> <span class="token function">getStatusVO</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token class-name">DisableStatusEnum</span><span class="token punctuation">.</span><span class="token function">getStatusVO</span><span class="token punctuation">(</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>其中：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">DisableStatusEnum</span> <span class="token punctuation">{</span>    <span class="token function">DISABLE</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">AVAILABLE</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> statusCode<span class="token punctuation">;</span>    <span class="token class-name">DisableStatusEnum</span><span class="token punctuation">(</span><span class="token keyword">int</span> statusCode<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>statusCode <span class="token operator">=</span> statusCode<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> statusCode<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setStatusCode</span><span class="token punctuation">(</span><span class="token keyword">int</span> statusCode<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>statusCode <span class="token operator">=</span> statusCode<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Boolean</span> <span class="token function">getStatusVO</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> status<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>status<span class="token operator">!=</span><span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> status<span class="token operator">==</span> AVAILABLE<span class="token punctuation">.</span><span class="token function">getStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token class-name">Boolean</span> status<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> status<span class="token operator">?</span> <span class="token class-name">DisableStatusEnum</span><span class="token punctuation">.</span>DISABLE<span class="token punctuation">.</span><span class="token function">getStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token class-name">DisableStatusEnum</span><span class="token punctuation">.</span>AVAILABLE<span class="token punctuation">.</span><span class="token function">getStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>ElementUI</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>状态<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>80<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot-scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>scope<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-switch</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>scope.row.statusVO<span class="token punctuation">"</span></span> <span class="token attr-name">@change</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>changStatus(scope.row)<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-switch</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">&gt;</span></span></code></pre><p>Vue</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">//改变特征禁用状态</span><span class="token keyword">async</span> <span class="token function">changStatus</span><span class="token punctuation">(</span><span class="token parameter">row</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span> data<span class="token operator">:</span> res <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$http<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>    <span class="token string">"updateStatus/"</span> <span class="token operator">+</span> row<span class="token punctuation">.</span>id <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> row<span class="token punctuation">.</span>statusVO  <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>code <span class="token operator">!==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>$message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"更新状态失败:"</span> <span class="token operator">+</span> res<span class="token punctuation">.</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    row<span class="token punctuation">.</span>statusVO <span class="token operator">=</span> <span class="token operator">!</span>row<span class="token punctuation">.</span>statusVO<span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>$message<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token string">"更新状态成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><p>Java 接口</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@PutMapping</span><span class="token punctuation">(</span><span class="token string">"/updateStatus/{id}/{status}"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">ResponseBean</span> <span class="token function">updateStatus</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">Integer</span> id<span class="token punctuation">,</span> <span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">Boolean</span> status<span class="token punctuation">)</span> <span class="token punctuation">{</span>    service<span class="token punctuation">.</span><span class="token function">updateStatus</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">ResponseBean</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;超链接&quot;&gt;&lt;a href=&quot;#超链接&quot; class=&quot;headerlink&quot; title=&quot;超链接&quot;&gt;&lt;/a&gt;超链接&lt;/h3&gt;&lt;p&gt;普通超链接&lt;/p&gt;
&lt;pre class=&quot;language-html&quot; data-language=&quot;html&quot;&gt;&lt;code cl</summary>
      
    
    
    
    <category term="Vue" scheme="https://jueee.github.io/categories/Vue/"/>
    
    
    <category term="Vue" scheme="https://jueee.github.io/tags/Vue/"/>
    
    <category term="ElementUI" scheme="https://jueee.github.io/tags/ElementUI/"/>
    
  </entry>
  
  <entry>
    <title>Java 全排列递归算法</title>
    <link href="https://jueee.github.io/2021/04/2021-04-23-Java%E5%85%A8%E6%8E%92%E5%88%97%E9%80%92%E5%BD%92%E7%AE%97%E6%B3%95/"/>
    <id>https://jueee.github.io/2021/04/2021-04-23-Java%E5%85%A8%E6%8E%92%E5%88%97%E9%80%92%E5%BD%92%E7%AE%97%E6%B3%95/</id>
    <published>2021-04-23T00:00:00.000Z</published>
    <updated>2021-04-25T03:35:49.252Z</updated>
    
    <content type="html"><![CDATA[<h3 id="无重复项的全排列"><a href="#无重复项的全排列" class="headerlink" title="无重复项的全排列"></a>无重复项的全排列</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">permute</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> lists <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">permulation</span><span class="token punctuation">(</span>lists<span class="token punctuation">,</span> nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> lists<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">permulation</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> lists<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">==</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment">// 当n定位到最后一个数时，即到递归出口</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token operator">:</span>nums<span class="token punctuation">)</span><span class="token punctuation">{</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        lists<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> start<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 交换位置</span>        <span class="token function">permulation</span><span class="token punctuation">(</span>lists<span class="token punctuation">,</span> nums<span class="token punctuation">,</span> start <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> start<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 恢复原来的顺序，进行下一次交换</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> temp<span class="token operator">=</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="有重复项的全排列"><a href="#有重复项的全排列" class="headerlink" title="有重复项的全排列"></a>有重复项的全排列</h3><p>将这个问题看作有 <em>n</em> 个排列成一行的空格，我们需要从左往右依次填入题目给定的 <em>n</em> 个数，每个数只能使用一次。</p><p>那么很直接的可以想到一种穷举的算法，即从左往右每一个位置都依此尝试填入一个数，看能不能填完这 <em>n</em> 个空格，在程序中我们可以用「回溯法」来模拟这个过程。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">permuteUnique</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> ans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> perm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> vis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">backtrack</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> ans<span class="token punctuation">,</span> vis<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> perm<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">backtrack</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> ans<span class="token punctuation">,</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> vis<span class="token punctuation">,</span> <span class="token keyword">int</span> idx<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> perm<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>idx <span class="token operator">==</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ans<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>perm<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 对原数组排序，保证相同的数字都相邻，然后每次填入的数一定是这个数所在重复数集合中「从左往右第一个未被填过的数字」，即如下的判断条件：</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>vis<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        perm<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token function">backtrack</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> ans<span class="token punctuation">,</span> vis<span class="token punctuation">,</span> idx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> perm<span class="token punctuation">)</span><span class="token punctuation">;</span>        vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        perm<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;无重复项的全排列&quot;&gt;&lt;a href=&quot;#无重复项的全排列&quot; class=&quot;headerlink&quot; title=&quot;无重复项的全排列&quot;&gt;&lt;/a&gt;无重复项的全排列&lt;/h3&gt;&lt;pre class=&quot;language-java&quot; data-language=&quot;java&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="Java" scheme="https://jueee.github.io/categories/Java/"/>
    
    <category term="算法" scheme="https://jueee.github.io/categories/Java/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="Java" scheme="https://jueee.github.io/tags/Java/"/>
    
    <category term="算法" scheme="https://jueee.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Java 计算两个整数的最大公约数</title>
    <link href="https://jueee.github.io/2021/04/2021-04-11-Java%E8%AE%A1%E7%AE%97%E4%B8%A4%E4%B8%AA%E6%95%B4%E6%95%B0%E7%9A%84%E6%9C%80%E5%A4%A7%E5%85%AC%E7%BA%A6%E6%95%B0/"/>
    <id>https://jueee.github.io/2021/04/2021-04-11-Java%E8%AE%A1%E7%AE%97%E4%B8%A4%E4%B8%AA%E6%95%B4%E6%95%B0%E7%9A%84%E6%9C%80%E5%A4%A7%E5%85%AC%E7%BA%A6%E6%95%B0/</id>
    <published>2021-04-12T00:00:00.000Z</published>
    <updated>2021-04-25T03:30:57.573Z</updated>
    
    <content type="html"><![CDATA[<h3 id="辗转相除法"><a href="#辗转相除法" class="headerlink" title="辗转相除法"></a>辗转相除法</h3><p>辗转相除法， 又名欧几里德算法（Euclidean algorithm），是求最大公约数的一种方法。它的具体做法是：用较大数除以较小数，再用出现的余数（第一余数）去除除数，再用出现的余数（第二余数）去除第一余数，如此反复，直到最后余数是 0 为止。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getVal</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> mid<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>b <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        mid <span class="token operator">=</span> a <span class="token operator">%</span> b<span class="token punctuation">;</span>        a <span class="token operator">=</span> b<span class="token punctuation">;</span>        b <span class="token operator">=</span> mid<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> a<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="更相减损术"><a href="#更相减损术" class="headerlink" title="更相减损术"></a>更相减损术</h3><p>更相减损术是出自《九章算术》的一种求最大公约数的算法，它原本是为约分而设计的，但它适用于任何需要求最大公约数的场合。</p><p>原文是：</p><pre class="language-none"><code class="language-none">可半者半之，不可半者，副置分母、子之数，以少减多，更相减损，求其等也。以等数约之。</code></pre><p>白话文译文：</p><p>（如果需要对分数进行约分，那么）可以折半的话，就折半（也就是用 2 来约分）。如果不可以折半的话，那么就比较分母和分子的大小，用大数减去小数，互相减来减去，一直到减数与差相等为止，用这个相等的数字来约分。</p><p>更相减损术原理：两个正整数 a 和 b（a&gt;b），它们的最大公约数等于 a-b 的差值 c 和较小数 b 的最大公约数。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getGCD</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>m <span class="token operator">!=</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">&gt;</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>            m <span class="token operator">-=</span> n<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            n <span class="token operator">-=</span> m<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> m<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;辗转相除法&quot;&gt;&lt;a href=&quot;#辗转相除法&quot; class=&quot;headerlink&quot; title=&quot;辗转相除法&quot;&gt;&lt;/a&gt;辗转相除法&lt;/h3&gt;&lt;p&gt;辗转相除法， 又名欧几里德算法（Euclidean algorithm），是求最大公约数的一种方法。它的具体做法是：</summary>
      
    
    
    
    <category term="Java" scheme="https://jueee.github.io/categories/Java/"/>
    
    <category term="算法" scheme="https://jueee.github.io/categories/Java/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="Java" scheme="https://jueee.github.io/tags/Java/"/>
    
    <category term="算法" scheme="https://jueee.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Linux 清理日志文件汇总</title>
    <link href="https://jueee.github.io/2021/04/2021-04-12-Linux%E6%B8%85%E7%90%86%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6%E6%B1%87%E6%80%BB/"/>
    <id>https://jueee.github.io/2021/04/2021-04-12-Linux%E6%B8%85%E7%90%86%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6%E6%B1%87%E6%80%BB/</id>
    <published>2021-04-12T00:00:00.000Z</published>
    <updated>2021-04-12T06:18:34.900Z</updated>
    
    <content type="html"><![CDATA[<h3 id="按日期清理"><a href="#按日期清理" class="headerlink" title="按日期清理"></a>按日期清理</h3><p>要删除超过 10 天的日志文件，可以使用以下命令。</p><pre class="language-none"><code class="language-none">Unixfind /path/to/httplogs/ -name "*.log" -type f -mtime +10 -exec rm -f {} \;For Windows Server OS:forfiles /p "C:\path\to\httplogs" /s /m *.log /d -10 /c "cmd /c del @PATH"</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;按日期清理&quot;&gt;&lt;a href=&quot;#按日期清理&quot; class=&quot;headerlink&quot; title=&quot;按日期清理&quot;&gt;&lt;/a&gt;按日期清理&lt;/h3&gt;&lt;p&gt;要删除超过 10 天的日志文件，可以使用以下命令。&lt;/p&gt;
&lt;pre class=&quot;language-none&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="Linux" scheme="https://jueee.github.io/categories/Linux/"/>
    
    
    <category term="Linux" scheme="https://jueee.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Java 中的 Map 排序汇总</title>
    <link href="https://jueee.github.io/2021/04/2021-04-09-Java%E4%B8%AD%E7%9A%84Map%E6%8E%92%E5%BA%8F%E6%B1%87%E6%80%BB/"/>
    <id>https://jueee.github.io/2021/04/2021-04-09-Java%E4%B8%AD%E7%9A%84Map%E6%8E%92%E5%BA%8F%E6%B1%87%E6%80%BB/</id>
    <published>2021-04-09T00:00:00.000Z</published>
    <updated>2021-04-09T08:32:18.598Z</updated>
    
    <content type="html"><![CDATA[<h3 id="按-Key-升序"><a href="#按-Key-升序" class="headerlink" title="按 Key 升序"></a>按 Key 升序</h3><h4 id="Comparator-实现"><a href="#Comparator-实现" class="headerlink" title="Comparator 实现"></a>Comparator 实现</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> sortMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>        <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> o1<span class="token punctuation">,</span> <span class="token class-name">Integer</span> o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> o1<span class="token operator">-</span>o2<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="lambda-实现"><a href="#lambda-实现" class="headerlink" title="lambda 实现"></a>lambda 实现</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">LinkedHashMap</span> sortMap <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token class-name">Entry</span><span class="token punctuation">.</span><span class="token function">comparingByKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token class-name">Entry</span><span class="token operator">::</span><span class="token function">getKey</span><span class="token punctuation">,</span><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token class-name">Entry</span><span class="token operator">::</span><span class="token function">getValue</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>e1<span class="token punctuation">,</span> e2<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> e2<span class="token punctuation">,</span> <span class="token class-name">LinkedHashMap</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="按-Key-降序"><a href="#按-Key-降序" class="headerlink" title="按 Key 降序"></a>按 Key 降序</h3><h4 id="Comparator-实现-1"><a href="#Comparator-实现-1" class="headerlink" title="Comparator 实现"></a>Comparator 实现</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> sortMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>        <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> o1<span class="token punctuation">,</span> <span class="token class-name">Integer</span> o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> o2<span class="token operator">-</span>o1<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="lambda-实现-1"><a href="#lambda-实现-1" class="headerlink" title="lambda 实现"></a>lambda 实现</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">LinkedHashMap</span> sortMap <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">reverseOrder</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token class-name">Entry</span><span class="token punctuation">.</span><span class="token function">comparingByKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token class-name">Entry</span><span class="token operator">::</span><span class="token function">getKey</span><span class="token punctuation">,</span><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token class-name">Entry</span><span class="token operator">::</span><span class="token function">getValue</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>e1<span class="token punctuation">,</span> e2<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> e2<span class="token punctuation">,</span> <span class="token class-name">LinkedHashMap</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="按-Value-升序"><a href="#按-Value-升序" class="headerlink" title="按 Value 升序"></a>按 Value 升序</h3><h4 id="Comparator-实现-2"><a href="#Comparator-实现-2" class="headerlink" title="Comparator 实现"></a>Comparator 实现</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 定义 Map</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 排序</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> sortMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token class-name">Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> entryList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token class-name">Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>entryList<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token class-name">Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> o1<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> o1<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>o2<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 遍历输出</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> tmpEntry<span class="token operator">:</span>entryList<span class="token punctuation">)</span><span class="token punctuation">{</span>    sortMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>tmpEntry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> tmpEntry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="lambda-实现-2"><a href="#lambda-实现-2" class="headerlink" title="lambda 实现"></a>lambda 实现</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">LinkedHashMap</span> sortMap <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token class-name">Entry</span><span class="token punctuation">.</span><span class="token function">comparingByValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token class-name">Entry</span><span class="token operator">::</span><span class="token function">getKey</span><span class="token punctuation">,</span><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token class-name">Entry</span><span class="token operator">::</span><span class="token function">getValue</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>e1<span class="token punctuation">,</span> e2<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> e2<span class="token punctuation">,</span> <span class="token class-name">LinkedHashMap</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="按-Value-降序"><a href="#按-Value-降序" class="headerlink" title="按 Value 降序"></a>按 Value 降序</h3><h4 id="Comparator-实现-3"><a href="#Comparator-实现-3" class="headerlink" title="Comparator 实现"></a>Comparator 实现</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 定义 Map</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 排序</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> sortMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token class-name">Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> entryList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token class-name">Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>entryList<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token class-name">Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> o1<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> o2<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>o1<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 遍历输出</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> tmpEntry<span class="token operator">:</span>entryList<span class="token punctuation">)</span><span class="token punctuation">{</span>    sortMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>tmpEntry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> tmpEntry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="lambda-实现-3"><a href="#lambda-实现-3" class="headerlink" title="lambda 实现"></a>lambda 实现</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">LinkedHashMap</span> sortMap <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">reverseOrder</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token class-name">Entry</span><span class="token punctuation">.</span><span class="token function">comparingByValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token class-name">Entry</span><span class="token operator">::</span><span class="token function">getKey</span><span class="token punctuation">,</span><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token class-name">Entry</span><span class="token operator">::</span><span class="token function">getValue</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>e1<span class="token punctuation">,</span> e2<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> e2<span class="token punctuation">,</span> <span class="token class-name">LinkedHashMap</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="自定义复杂排序"><a href="#自定义复杂排序" class="headerlink" title="自定义复杂排序"></a>自定义复杂排序</h3><p>按照每个值的频率 <strong>升序</strong> 排序。如果有多个值的频率相同，按照数值本身将它们 <strong>降序</strong> 排序。 </p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 定义 Map</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 排序</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token class-name">Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token class-name">Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token class-name">Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> o1<span class="token punctuation">,</span>                       <span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> val <span class="token operator">=</span> o1<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>o2<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> o2<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> o1<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> val<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 遍历输出</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> entry <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;按-Key-升序&quot;&gt;&lt;a href=&quot;#按-Key-升序&quot; class=&quot;headerlink&quot; title=&quot;按 Key 升序&quot;&gt;&lt;/a&gt;按 Key 升序&lt;/h3&gt;&lt;h4 id=&quot;Comparator-实现&quot;&gt;&lt;a href=&quot;#Comparator-实现&quot; c</summary>
      
    
    
    
    <category term="Java" scheme="https://jueee.github.io/categories/Java/"/>
    
    <category term="JavaClass" scheme="https://jueee.github.io/categories/Java/JavaClass/"/>
    
    
    <category term="JavaClass" scheme="https://jueee.github.io/tags/JavaClass/"/>
    
    <category term="Java" scheme="https://jueee.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Intellij IDEA 运行前报错 Command line is too long</title>
    <link href="https://jueee.github.io/2021/04/2021-04-08-Intellij%20IDEA%E8%BF%90%E8%A1%8C%E5%89%8D%E6%8A%A5%E9%94%99Command%20line%20is%20too%20long/"/>
    <id>https://jueee.github.io/2021/04/2021-04-08-Intellij%20IDEA%E8%BF%90%E8%A1%8C%E5%89%8D%E6%8A%A5%E9%94%99Command%20line%20is%20too%20long/</id>
    <published>2021-04-08T00:00:00.000Z</published>
    <updated>2021-04-08T09:19:19.182Z</updated>
    
    <content type="html"><![CDATA[<h3 id="报错内容"><a href="#报错内容" class="headerlink" title="报错内容"></a>报错内容</h3><p>Error running ‘HelloWorld’: Command line is too long. Shorten command line for HelloWorld or also for Application default configuration.</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>修改项目下 .idea\workspace.xml，找到标签</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>PropertiesComponent<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span></code></pre><p>在标签里加一行</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dynamic.classpath<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span></code></pre><p>如下图所示：</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>PropertiesComponent<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>RunOnceActivity.OpenProjectViewOnStart<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>last_opened_file_path<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$PROJECT_DIR$/src/test/java/com/XXX/util<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>project.structure.last.edited<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Global Libraries<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>project.structure.proportion<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0.0<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>project.structure.side.proportion<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0.2<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dynamic.classpath<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component</span><span class="token punctuation">&gt;</span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;报错内容&quot;&gt;&lt;a href=&quot;#报错内容&quot; class=&quot;headerlink&quot; title=&quot;报错内容&quot;&gt;&lt;/a&gt;报错内容&lt;/h3&gt;&lt;p&gt;Error running ‘HelloWorld’: Command line is too long. Shorten </summary>
      
    
    
    
    <category term="软件" scheme="https://jueee.github.io/categories/%E8%BD%AF%E4%BB%B6/"/>
    
    <category term="IDE" scheme="https://jueee.github.io/categories/%E8%BD%AF%E4%BB%B6/IDE/"/>
    
    
    <category term="软件" scheme="https://jueee.github.io/tags/%E8%BD%AF%E4%BB%B6/"/>
    
    <category term="IDE" scheme="https://jueee.github.io/tags/IDE/"/>
    
    <category term="idea" scheme="https://jueee.github.io/tags/idea/"/>
    
  </entry>
  
  <entry>
    <title>CSS 实现把文字写在边框上效果</title>
    <link href="https://jueee.github.io/2021/03/2021-03-29-CSS%E5%AE%9E%E7%8E%B0%E6%8A%8A%E6%96%87%E5%AD%97%E5%86%99%E5%9C%A8%E8%BE%B9%E6%A1%86%E4%B8%8A%E6%95%88%E6%9E%9C/"/>
    <id>https://jueee.github.io/2021/03/2021-03-29-CSS%E5%AE%9E%E7%8E%B0%E6%8A%8A%E6%96%87%E5%AD%97%E5%86%99%E5%9C%A8%E8%BE%B9%E6%A1%86%E4%B8%8A%E6%95%88%E6%9E%9C/</id>
    <published>2021-03-29T00:00:00.000Z</published>
    <updated>2021-03-29T07:44:40.908Z</updated>
    
    <content type="html"><![CDATA[<h3 id="fieldset-标签实现"><a href="#fieldset-标签实现" class="headerlink" title="fieldset 标签实现"></a>fieldset 标签实现</h3><h4 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h4><p>CSS 样式如下：</p><pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">fieldset.test</span> <span class="token punctuation">{</span><span class="token property">font-size</span><span class="token punctuation">:</span>12px<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span>10px<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span>10px<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span>270px<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span>#333<span class="token punctuation">;</span>     <span class="token property">border</span><span class="token punctuation">:</span>#06c solid 1px<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token selector">legend</span> <span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span>#06c<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span>5px 10px<span class="token punctuation">;</span>    <span class="token property">font-weight</span><span class="token punctuation">:</span>800<span class="token punctuation">;</span>     <span class="token property">background</span><span class="token punctuation">:</span>white<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h4><p>示例 HTML 如下：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fieldset</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>legend</span><span class="token punctuation">&gt;</span></span>文字标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>legend</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>文字内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fieldset</span><span class="token punctuation">&gt;</span></span></code></pre><h4 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h4><p>加入上述 css 样式：</p><p><img src="/images/2021/03/image-20210329145848708.png" alt="image-20210329145848708" loading="lazy"></p><p>原生样式效果：</p><p><img src="/images/2021/03/image-20210329150306772.png" alt="image-20210329150306772" loading="lazy"></p><h3 id="bootstrap-引入冲突"><a href="#bootstrap-引入冲突" class="headerlink" title="bootstrap 引入冲突"></a>bootstrap 引入冲突</h3><h4 id="出现问题"><a href="#出现问题" class="headerlink" title="出现问题"></a>出现问题</h4><p>当页面引入 bootstrap 时，fieldset 效果消失，如下：</p><p><img src="/images/2021/03/image-20210329150711376.png" alt="image-20210329150711376" loading="lazy"></p><p>这是由于 bootstrap 重写了 <strong>fieldset</strong> 标签和其中的 <strong>legend</strong> 标签样式。</p><h4 id="还原设置"><a href="#还原设置" class="headerlink" title="还原设置"></a>还原设置</h4><pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">fieldset</span> <span class="token punctuation">{</span>    <span class="token property">padding</span><span class="token punctuation">:</span> .35em .625em .75em<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 0 2px<span class="token punctuation">;</span>    <span class="token property">border</span><span class="token punctuation">:</span> 1px solid silver<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token selector">legend</span> <span class="token punctuation">{</span>    <span class="token property">padding</span><span class="token punctuation">:</span> .5em<span class="token punctuation">;</span>    <span class="token property">border</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>    <span class="token property">margin-bottom</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><p>效果如下：</p><p><img src="/images/2021/03/image-20210329150638185.png" alt="image-20210329150638185" loading="lazy"></p><h3 id="纯CSS实现效果一"><a href="#纯CSS实现效果一" class="headerlink" title="纯CSS实现效果一"></a>纯 CSS 实现效果一</h3><p>在边框上添加文字。</p><h4 id="CSS-1"><a href="#CSS-1" class="headerlink" title="CSS"></a>CSS</h4><p>CSS 样式如下：</p><pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">.wrap</span><span class="token punctuation">{</span>  <span class="token property">margin</span><span class="token punctuation">:</span> 100px auto<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/* 方法实现 */</span><span class="token selector">.method-fieldset</span><span class="token punctuation">{</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span> 1px solid #ccc<span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>  <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.method-fieldset .title</span><span class="token punctuation">{</span><span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span><span class="token property">top</span><span class="token punctuation">:</span> -13px<span class="token punctuation">;</span><span class="token property">left</span><span class="token punctuation">:</span> 10%<span class="token punctuation">;</span><span class="token property">line-height</span><span class="token punctuation">:</span> 2em<span class="token punctuation">;</span><span class="token property">padding</span><span class="token punctuation">:</span> 0 1em<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="HTML-1"><a href="#HTML-1" class="headerlink" title="HTML"></a>HTML</h4><p>示例 HTML 如下：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>method-fieldset wrap<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>文字标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>文字内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></code></pre><h4 id="实现效果-1"><a href="#实现效果-1" class="headerlink" title="实现效果"></a>实现效果</h4><p><img src="/images/2021/03/image-20210329144954417.png" alt="image-20210329144954417" loading="lazy"></p><h3 id="纯CSS实现效果二"><a href="#纯CSS实现效果二" class="headerlink" title="纯CSS实现效果二"></a>纯 CSS 实现效果二</h3><p>文字 <code>.title:before</code>&nbsp;实现分隔效果，并通过 <code>z-index: -1;</code>&nbsp;置于底部。</p><h4 id="CSS-2"><a href="#CSS-2" class="headerlink" title="CSS"></a>CSS</h4><p>CSS 样式如下：</p><pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">.wrap</span><span class="token punctuation">{</span>  <span class="token property">margin</span><span class="token punctuation">:</span> 100px auto<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.method-fieldset .title</span><span class="token punctuation">{</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.method-fieldset .title:before</span><span class="token punctuation">{</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span>  <span class="token property">right</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>  <span class="token property">border-top</span><span class="token punctuation">:</span> 1px solid #ccc<span class="token punctuation">;</span>  <span class="token property">z-index</span><span class="token punctuation">:</span> -1<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.method-fieldset .title span</span><span class="token punctuation">{</span>  <span class="token property">padding</span><span class="token punctuation">:</span> 0 1em<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.method-fieldset .content</span><span class="token punctuation">{</span>  <span class="token property">padding</span><span class="token punctuation">:</span>20px<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="HTML-2"><a href="#HTML-2" class="headerlink" title="HTML"></a>HTML</h4><p>示例 HTML 如下：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>method-fieldset wrap<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>文字标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>文字内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></code></pre><h4 id="实现效果-2"><a href="#实现效果-2" class="headerlink" title="实现效果"></a>实现效果</h4><p><img src="/images/2021/03/image-20210329145357043.png" alt="image-20210329145357043" loading="lazy"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;fieldset-标签实现&quot;&gt;&lt;a href=&quot;#fieldset-标签实现&quot; class=&quot;headerlink&quot; title=&quot;fieldset 标签实现&quot;&gt;&lt;/a&gt;fieldset 标签实现&lt;/h3&gt;&lt;h4 id=&quot;CSS&quot;&gt;&lt;a href=&quot;#CSS&quot; c</summary>
      
    
    
    
    <category term="CSS" scheme="https://jueee.github.io/categories/CSS/"/>
    
    
    <category term="CSS" scheme="https://jueee.github.io/tags/CSS/"/>
    
  </entry>
  
</feed>
