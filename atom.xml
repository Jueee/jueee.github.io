<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小决的专栏</title>
  
  <subtitle>进一寸有一寸的欢喜</subtitle>
  <link href="https://jueee.github.io/atom.xml" rel="self"/>
  
  <link href="https://jueee.github.io/"/>
  <updated>2020-11-06T11:20:54.374Z</updated>
  <id>https://jueee.github.io/</id>
  
  <author>
    <name>小决</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java 安全框架 Apache Shiro 介绍</title>
    <link href="https://jueee.github.io/2020/11/2020-11-08-Java%E5%AE%89%E5%85%A8%E6%A1%86%E6%9E%B6ApacheShiro%E4%BB%8B%E7%BB%8D/"/>
    <id>https://jueee.github.io/2020/11/2020-11-08-Java%E5%AE%89%E5%85%A8%E6%A1%86%E6%9E%B6ApacheShiro%E4%BB%8B%E7%BB%8D/</id>
    <published>2020-11-08T00:00:00.000Z</published>
    <updated>2020-11-06T11:20:54.374Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Apache-Shiro-介绍"><a href="#Apache-Shiro-介绍" class="headerlink" title="Apache Shiro 介绍"></a>Apache Shiro 介绍</h3><p>Apache Shiro 是一个强大灵活的开源安全框架。</p><p>Apache Shiro 可以帮助我们完成：认证、授权、加密、会话管理、与 Web 集成、缓存等。</p><ul><li>官网：<span class="exturl" data-url="aHR0cHM6Ly9zaGlyby5hcGFjaGUub3JnLw==">https://shiro.apache.org/<i class="fa fa-external-link-alt"></i></span></li><li>GitHub：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FwYWNoZS9zaGlybw==">https://github.com/apache/shiro<i class="fa fa-external-link-alt"></i></span></li></ul><a id="more"></a><h4 id="Jar-引入"><a href="#Jar-引入" class="headerlink" title="Jar 引入"></a>Jar 引入</h4><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.shiro/shiro-spring --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.shiro<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>shiro-spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.7.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></code></pre><h4 id="基本功能点"><a href="#基本功能点" class="headerlink" title="基本功能点"></a>基本功能点</h4><p><img src="/images/2020/11/image-20201106155220875.png" alt="image-20201106155220875" loading="lazy"></p><ul><li><strong>Authentication</strong>：身份认证 / 登录，验证用户是不是拥有相应的身份；</li><li><strong>Authorization</strong>：授权，即权限验证，验证某个已认证的用户是否拥有某个权限；即判断用户是否能做事情，常见的如：验证某个用户是否拥有某个角色。或者细粒度的验证某个用户对某个资源是否具有某个权限；</li><li><strong>Session</strong> <strong>Management</strong>：会话管理，即用户登录后就是一次会话，在没有退出之前，它的所有信息都在会话中；会话可以是普通 JavaSE 环境的，也可以是如 Web 环境的；</li><li><strong>Cryptography</strong>：加密，保护数据的安全性，如密码加密存储到数据库，而不是明文存储；</li><li><strong>Web Support</strong>：Web 支持，可以非常容易的集成到 Web 环境；</li><li><strong>Caching</strong>：缓存，比如用户登录后，其用户信息、拥有的角色 / 权限不必每次去查，这样可以提高效率；</li><li><strong>Concurrency</strong>：shiro 支持多线程应用的并发验证，即如在一个线程中开启另一个线程，能把权限自动传播过去；</li><li><strong>Testing</strong>：提供测试支持；</li><li><strong>Run As</strong>：允许一个用户假装为另一个用户（如果他们允许）的身份进行访问；</li><li><strong>Remember Me</strong>：记住我，这个是非常常见的功能，即一次登录后，下次再来的话不用登录了。</li></ul><p><strong>记住一点，Shiro 不会去维护用户、维护权限；这些需要我们自己去设计 / 提供；然后通过相应的接口注入给 Shiro 即可。</strong></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;Apache-Shiro-介绍&quot;&gt;&lt;a href=&quot;#Apache-Shiro-介绍&quot; class=&quot;headerlink&quot; title=&quot;Apache Shiro 介绍&quot;&gt;&lt;/a&gt;Apache Shiro 介绍&lt;/h3&gt;&lt;p&gt;Apache Shiro 是一个强大灵活的开源安全框架。&lt;/p&gt;
&lt;p&gt;Apache Shiro 可以帮助我们完成：认证、授权、加密、会话管理、与 Web 集成、缓存等。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;官网：&lt;a href=&quot;https://shiro.apache.org/&quot;&gt;https://shiro.apache.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;GitHub：&lt;a href=&quot;https://github.com/apache/shiro&quot;&gt;https://github.com/apache/shiro&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Java" scheme="https://jueee.github.io/categories/Java/"/>
    
    <category term="JavaJar" scheme="https://jueee.github.io/categories/Java/JavaJar/"/>
    
    
    <category term="Apache" scheme="https://jueee.github.io/tags/Apache/"/>
    
    <category term="Java" scheme="https://jueee.github.io/tags/Java/"/>
    
    <category term="JavaJar" scheme="https://jueee.github.io/tags/JavaJar/"/>
    
  </entry>
  
  <entry>
    <title>Java 的 JWT 实现库 java-jwt 介绍</title>
    <link href="https://jueee.github.io/2020/11/2020-11-07-Java%E7%9A%84JWT%E5%AE%9E%E7%8E%B0%E5%BA%93java-jwt%E4%BB%8B%E7%BB%8D/"/>
    <id>https://jueee.github.io/2020/11/2020-11-07-Java%E7%9A%84JWT%E5%AE%9E%E7%8E%B0%E5%BA%93java-jwt%E4%BB%8B%E7%BB%8D/</id>
    <published>2020-11-07T00:00:00.000Z</published>
    <updated>2020-11-06T11:20:54.361Z</updated>
    
    <content type="html"><![CDATA[<h3 id="java-jwt-介绍"><a href="#java-jwt-介绍" class="headerlink" title="java-jwt 介绍"></a>java-jwt 介绍</h3><p>auth0 的 java-jwt 是一个 JSON WEB TOKEN（JWT）的一个实现。</p><p>GitHub：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2F1dGgwL2phdmEtand0">https://github.com/auth0/java-jwt<i class="fa fa-external-link-alt"></i></span></p><h4 id="依赖引入"><a href="#依赖引入" class="headerlink" title="依赖引入"></a>依赖引入</h4><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/com.auth0/java-jwt --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.auth0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>java-jwt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.11.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></code></pre><a id="more"></a><h3 id="已实现的算法"><a href="#已实现的算法" class="headerlink" title="已实现的算法"></a>已实现的算法</h3><p>该库使用以下算法实现 JWT 验证和签名:</p><table><thead><tr><th align="left">JWS</th><th align="left"> 算法</th><th align="left">介绍</th></tr></thead><tbody><tr><td align="left"> HS256</td><td align="left">HMAC256</td><td align="left">HMAC with SHA-256</td></tr><tr><td align="left">HS384</td><td align="left">HMAC384</td><td align="left">HMAC with SHA-384</td></tr><tr><td align="left">HS512</td><td align="left">HMAC512</td><td align="left">HMAC with SHA-512</td></tr><tr><td align="left">RS256</td><td align="left">RSA256</td><td align="left">RSASSA-PKCS1-v1_5 with SHA-256</td></tr><tr><td align="left">RS384</td><td align="left">RSA384</td><td align="left">RSASSA-PKCS1-v1_5 with SHA-384</td></tr><tr><td align="left">RS512</td><td align="left">RSA512</td><td align="left">RSASSA-PKCS1-v1_5 with SHA-512</td></tr><tr><td align="left">ES256</td><td align="left">ECDSA256</td><td align="left">ECDSA with curve P-256 and SHA-256</td></tr><tr><td align="left">ES384</td><td align="left">ECDSA384</td><td align="left">ECDSA with curve P-384 and SHA-384</td></tr><tr><td align="left">ES512</td><td align="left">ECDSA512</td><td align="left">ECDSA with curve P-521 and SHA-512</td></tr></tbody></table><h3 id="JWT-基本使用"><a href="#JWT-基本使用" class="headerlink" title="JWT 基本使用"></a>JWT 基本使用</h3><h4 id="产生加密Token"><a href="#产生加密Token" class="headerlink" title="产生加密Token"></a>产生加密 Token</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> token <span class="token operator">=</span> JWT<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withExpiresAt</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 设置过期时间</span><span class="token punctuation">.</span><span class="token function">withAudience</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span> <span class="token comment">// 设置接受方信息，一般时登录用户</span><span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span><span class="token class-name">Algorithm</span><span class="token punctuation">.</span><span class="token function">HMAC256</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 使用HMAC算法，123456作为密钥加密</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJyb290IiwiZXhwIjoxNjA0NjMyMTY0fQ.5JbpimPPzTnXSVX9LL6eekH7tkFc6ApRkhIUnTGt0BY</span></code></pre><h4 id="解密Token获取负载信息"><a href="#解密Token获取负载信息" class="headerlink" title="解密Token获取负载信息"></a>解密 Token 获取负载信息</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">DecodedJWT</span> jwt1 <span class="token operator">=</span> JWT<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> userId <span class="token operator">=</span> jwt1<span class="token punctuation">.</span><span class="token function">getAudience</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// root</span></code></pre><h4 id="验证Token是否有效"><a href="#验证Token是否有效" class="headerlink" title="验证Token是否有效"></a>验证 Token 是否有效</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Algorithm</span> algorithm <span class="token operator">=</span> <span class="token class-name">Algorithm</span><span class="token punctuation">.</span><span class="token function">HMAC256</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">JWTVerifier</span> jwtVerifier <span class="token operator">=</span> JWT<span class="token punctuation">.</span><span class="token function">require</span><span class="token punctuation">(</span>algorithm<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withIssuer</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">DecodedJWT</span> jwt2 <span class="token operator">=</span> jwtVerifier<span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jwt2<span class="token punctuation">.</span><span class="token function">getAudience</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// root</span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;java-jwt-介绍&quot;&gt;&lt;a href=&quot;#java-jwt-介绍&quot; class=&quot;headerlink&quot; title=&quot;java-jwt 介绍&quot;&gt;&lt;/a&gt;java-jwt 介绍&lt;/h3&gt;&lt;p&gt;auth0 的 java-jwt 是一个 JSON WEB TOKEN（JWT）的一个实现。&lt;/p&gt;
&lt;p&gt;GitHub：&lt;a href=&quot;https://github.com/auth0/java-jwt&quot;&gt;https://github.com/auth0/java-jwt&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;依赖引入&quot;&gt;&lt;a href=&quot;#依赖引入&quot; class=&quot;headerlink&quot; title=&quot;依赖引入&quot;&gt;&lt;/a&gt;依赖引入&lt;/h4&gt;&lt;pre class=&quot;language-xml&quot; data-language=&quot;xml&quot;&gt;&lt;code class=&quot;language-xml&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- https://mvnrepository.com/artifact/com.auth0/java-jwt --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;dependency&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;groupId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;com.auth0&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;groupId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;artifactId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;java-jwt&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;artifactId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;version&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;3.11.0&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;version&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;dependency&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="Java" scheme="https://jueee.github.io/categories/Java/"/>
    
    <category term="JavaJar" scheme="https://jueee.github.io/categories/Java/JavaJar/"/>
    
    
    <category term="Java" scheme="https://jueee.github.io/tags/Java/"/>
    
    <category term="JavaJar" scheme="https://jueee.github.io/tags/JavaJar/"/>
    
    <category term="JWT" scheme="https://jueee.github.io/tags/JWT/"/>
    
  </entry>
  
  <entry>
    <title>跨域认证解决方案 JWT 介绍</title>
    <link href="https://jueee.github.io/2020/11/2020-11-06-%E8%B7%A8%E5%9F%9F%E8%AE%A4%E8%AF%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88JWT%E4%BB%8B%E7%BB%8D/"/>
    <id>https://jueee.github.io/2020/11/2020-11-06-%E8%B7%A8%E5%9F%9F%E8%AE%A4%E8%AF%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88JWT%E4%BB%8B%E7%BB%8D/</id>
    <published>2020-11-06T00:00:00.000Z</published>
    <updated>2020-11-05T11:05:11.821Z</updated>
    
    <content type="html"><![CDATA[<h3 id="JWT-简介"><a href="#JWT-简介" class="headerlink" title="JWT 简介"></a>JWT 简介</h3><p>JSON Web Token（JWT）是目前最流行的跨域身份验证解决方案。是基于 Json 的一个公开规范，这个规范允许我们使用 JWT 在用户和服务器之间传递安全可靠的信息。</p><p>JWT 的两大使用场景是：认证和数据交换。使用起来就是，由服务端根据规范生成一个令牌（token），并且发放给客户端。此时客户端请求服务端的时候就可以携带者令牌，以令牌来证明自己的身份信息。</p><p><strong>作用</strong>：类似 session 保持登录状态 的办法，通过 token 来代表用户身份。</p><ul><li>官网：<span class="exturl" data-url="aHR0cHM6Ly9qd3QuaW8v">https://jwt.io/<i class="fa fa-external-link-alt"></i></span></li></ul><a id="more"></a><h3 id="跨域认证的问题"><a href="#跨域认证的问题" class="headerlink" title="跨域认证的问题"></a>跨域认证的问题</h3><p>互联网服务离不开用户认证。一般流程是下面这样。</p><blockquote><p>1、用户向服务器发送用户名和密码。</p><p>2、服务器验证通过后，在当前对话（session）里面保存相关数据，比如用户角色、登录时间等等。</p><p>3、服务器向用户返回一个 session_id，写入用户的 Cookie。</p><p>4、用户随后的每一次请求，都会通过 Cookie，将 session_id 传回服务器。</p><p>5、服务器收到 session_id，找到前期保存的数据，由此得知用户的身份。</p></blockquote><p>这种模式的问题在于，扩展性（scaling）不好。单机当然没有问题，如果是服务器集群，或者是跨域的服务导向架构，就要求 session 数据共享，每台服务器都能够读取 session。</p><p>举例来说，A 网站和 B 网站是同一家公司的关联服务。现在要求，用户只要在其中一个网站登录，再访问另一个网站就会自动登录，请问怎么实现？</p><ul><li>一种解决方案是 session 数据持久化，写入数据库或别的持久层。各种服务收到请求后，都向持久层请求数据。这种方案的优点是架构清晰，缺点是工程量比较大。另外，持久层万一挂了，就会单点失败。</li><li>另一种方案是服务器索性不保存 session 数据了，所有数据都保存在客户端，每次请求都发回服务器。JWT 就是这种方案的一个代表。</li></ul><h3 id="JWT-的原理"><a href="#JWT-的原理" class="headerlink" title="JWT 的原理"></a>JWT 的原理</h3><p>JWT 的原理是，服务器认证以后，生成一个 JSON 对象，发回给用户，就像下面这样。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">{</span>  <span class="token string">"姓名"</span><span class="token operator">:</span> <span class="token string">"张三"</span><span class="token punctuation">,</span>  <span class="token string">"角色"</span><span class="token operator">:</span> <span class="token string">"管理员"</span><span class="token punctuation">,</span>  <span class="token string">"到期时间"</span><span class="token operator">:</span> <span class="token string">"2018年7月1日0点0分"</span><span class="token punctuation">}</span></code></pre><p>以后，用户与服务端通信的时候，都要发回这个 JSON 对象。服务器完全只靠这个对象认定用户身份。</p><p>为了防止用户篡改数据，服务器在生成这个对象的时候，会加上签名（详见后文）。</p><p>这样服务器就不保存任何 session 数据了，也就是说，服务器变成无状态了，从而比较容易实现扩展。</p><h3 id="JWT-的数据结构"><a href="#JWT-的数据结构" class="headerlink" title="JWT 的数据结构"></a>JWT 的数据结构</h3><p>JSON Web Token 由三部分组成，它们之间用圆点 (.) 连接。这三部分分别是：</p><ul><li>Header：JWT 头</li><li> Payload：有效载荷</li><li> Signature：签名</li></ul><p>因此，一个典型的 JWT 看起来是这个样子的：</p><blockquote><p>xxxxx.yyyyy.zzzzz</p></blockquote><h4 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h4><p>Header 部分是一个 JSON 对象，描述 JWT 的元数据，通常是下面的样子。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">{</span>  <span class="token string">"alg"</span><span class="token operator">:</span> <span class="token string">"HS256"</span><span class="token punctuation">,</span>  <span class="token string">"typ"</span><span class="token operator">:</span> <span class="token string">"JWT"</span><span class="token punctuation">}</span></code></pre><p>上面代码中，<code>alg</code> 属性表示签名的算法（algorithm），默认是 HMAC SHA256（写成 HS256）；<code>typ</code> 属性表示这个令牌（token）的类型（type），JWT 令牌统一写为 <code>JWT</code>。</p><p>最后，将上面的 JSON 对象使用 Base64URL 算法转成字符串。</p><h4 id="Payload"><a href="#Payload" class="headerlink" title="Payload"></a>Payload</h4><p>Payload 部分也是一个 JSON 对象，用来存放实际需要传递的数据。</p><p>JWT 规定了 7 个官方字段，供选用。</p><ul><li>iss (issuer)：签发人</li><li> exp (expiration time)：过期时间</li><li> sub (subject)：主题</li><li> aud (audience)：受众</li><li> nbf (Not Before)：生效时间</li><li> iat (Issued At)：签发时间</li><li> jti (JWT ID)：编号</li></ul><p>除了官方字段，你还可以在这个部分定义私有字段，下面就是一个例子。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">{</span>  <span class="token string">"sub"</span><span class="token operator">:</span> <span class="token string">"1234567890"</span><span class="token punctuation">,</span>  <span class="token string">"name"</span><span class="token operator">:</span> <span class="token string">"John Doe"</span><span class="token punctuation">,</span>  <span class="token string">"admin"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span></code></pre><p>注意，JWT 默认是不加密的，任何人都可以读到，所以不要把秘密信息放在这个部分。</p><p>这个 JSON 对象也要使用 Base64URL 算法转成字符串。</p><h4 id="Signature"><a href="#Signature" class="headerlink" title="Signature"></a>Signature</h4><p>Signature 部分是对前两部分的签名，防止数据篡改。</p><p>首先，需要指定一个密钥（secret）。这个密钥只有服务器才知道，不能泄露给用户。然后，使用 Header 里面指定的签名算法（默认是 HMAC SHA256），按照下面的公式产生签名。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token constant">HMACSHA256</span><span class="token punctuation">(</span>  <span class="token function">base64UrlEncode</span><span class="token punctuation">(</span>header<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span>  <span class="token function">base64UrlEncode</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">,</span>  secret<span class="token punctuation">)</span></code></pre><p>算出签名以后，把 Header、Payload、Signature 三个部分拼成一个字符串，每个部分之间用 "点"（<code>.</code>）分隔，就可以返回给用户。</p><h4 id="Base64URL"><a href="#Base64URL" class="headerlink" title="Base64URL"></a>Base64URL</h4><p>Header 和 Payload 串型化的算法是 Base64URL。这个算法跟 Base64 算法基本类似，但有一些小的不同。</p><p>JWT 作为一个令牌（token），有些场合可能会放到 URL（比如 api.example.com/?token=xxx）。</p><p>Base64 有三个字符 <code>+</code>、<code>/</code> 和 <code>=</code>，在 URL 里面有特殊含义，所以要被替换掉：<code>=</code> 被省略、<code>+</code> 替换成 <code>-</code>，<code>/</code> 替换成<code>_</code> 。这就是 Base64URL 算法。</p><h3 id="JWT-的使用方式"><a href="#JWT-的使用方式" class="headerlink" title="JWT 的使用方式"></a>JWT 的使用方式</h3><p>客户端收到服务器返回的 JWT，可以储存在 Cookie 里面，也可以储存在 localStorage。</p><p>此后，客户端每次与服务器通信，都要带上这个 JWT。你可以把它放在 Cookie 里面自动发送，但是这样不能跨域，所以更好的做法是放在 HTTP 请求的头信息 <code>Authorization</code> 字段里面。</p><blockquote><pre class="language-javascript" data-language="javascript"><code class="language-javascript">Authorization<span class="token operator">:</span> Bearer <span class="token operator">&lt;</span>token<span class="token operator">&gt;</span></code></pre></blockquote><p>另一种做法是，跨域的时候，JWT 就放在 POST 请求的数据体里面。</p><h3 id="JWT-的几个特点"><a href="#JWT-的几个特点" class="headerlink" title="JWT 的几个特点"></a>JWT 的几个特点</h3><ol><li>JWT 默认是不加密，但也是可以加密的。生成原始 Token 以后，可以用密钥再加密一次。</li><li>JWT 不加密的情况下，不能将秘密数据写入 JWT。</li><li>JWT 不仅可以用于认证，也可以用于交换信息。有效使用 JWT，可以降低服务器查询数据库的次数。</li><li>JWT 的最大缺点是，由于服务器不保存 session 状态，因此无法在使用过程中废止某个 token，或者更改 token 的权限。也就是说，一旦 JWT 签发了，在到期之前就会始终有效，除非服务器部署额外的逻辑。</li><li>JWT 本身包含了认证信息，一旦泄露，任何人都可以获得该令牌的所有权限。为了减少盗用，JWT 的有效期应该设置得比较短。对于一些比较重要的权限，使用时应该再次对用户进行认证。</li><li>为了减少盗用，JWT 不应该使用 HTTP 协议明码传输，要使用 HTTPS 协议传输。</li></ol><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><span class="exturl" data-url="aHR0cHM6Ly9qd3QuaW8vaW50cm9kdWN0aW9uLw==">Introduction to JSON Web Tokens<i class="fa fa-external-link-alt"></i></span>， by Auth0</li><li><span class="exturl" data-url="aHR0cHM6Ly9tZWRpdW0uY29tL0Bicnlhbm1hbnVlbGUvc2Vzc2lvbmxlc3MtYXV0aGVudGljYXRpb24td2l0aGUtand0cy13aXRoLW5vZGUtZXhwcmVzcy1wYXNzcG9ydC1qcy02OWIwNTllNGIyMmM=">Sessionless Authentication using JWTs (with Node + Express + Passport JS)<i class="fa fa-external-link-alt"></i></span>, by Bryan Manuele</li><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2R3eWwvbGVhcm4tanNvbi13ZWItdG9rZW5zL2Jsb2IvbWFzdGVyL1JFQURNRS5tZA==">Learn how to use JSON Web Tokens<i class="fa fa-external-link-alt"></i></span>, by dwyl</li></ul>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;JWT-简介&quot;&gt;&lt;a href=&quot;#JWT-简介&quot; class=&quot;headerlink&quot; title=&quot;JWT 简介&quot;&gt;&lt;/a&gt;JWT 简介&lt;/h3&gt;&lt;p&gt;JSON Web Token（JWT）是目前最流行的跨域身份验证解决方案。是基于 Json 的一个公开规范，这个规范允许我们使用 JWT 在用户和服务器之间传递安全可靠的信息。&lt;/p&gt;
&lt;p&gt;JWT 的两大使用场景是：认证和数据交换。使用起来就是，由服务端根据规范生成一个令牌（token），并且发放给客户端。此时客户端请求服务端的时候就可以携带者令牌，以令牌来证明自己的身份信息。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;作用&lt;/strong&gt;：类似 session 保持登录状态 的办法，通过 token 来代表用户身份。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;官网：&lt;a href=&quot;https://jwt.io/&quot;&gt;https://jwt.io/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Node.js" scheme="https://jueee.github.io/categories/Node-js/"/>
    
    
    <category term="Json" scheme="https://jueee.github.io/tags/Json/"/>
    
    <category term="JWT" scheme="https://jueee.github.io/tags/JWT/"/>
    
  </entry>
  
  <entry>
    <title>Kafka 常用命令之 kafka-topics.sh</title>
    <link href="https://jueee.github.io/2020/11/2020-11-05-Kafka%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E4%B9%8Bkafka-topics.sh/"/>
    <id>https://jueee.github.io/2020/11/2020-11-05-Kafka%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E4%B9%8Bkafka-topics.sh/</id>
    <published>2020-11-05T00:00:00.000Z</published>
    <updated>2020-11-05T03:25:56.836Z</updated>
    
    <content type="html"><![CDATA[<p>kafka-topics.sh 脚本主要负责 topic 相关的操作。它的具体实现是通过 kafka-run-class 来调用 <code>TopicCommand</code> 类，并根据参数执行指定的功能。</p><a id="more"></a><h3 id="场景再现"><a href="#场景再现" class="headerlink" title="场景再现"></a>场景再现</h3><p>若程序报错：</p><blockquote><p> [Producer clientId=producer-1] Error while fetching metadata with correlation id 312 : {logger-channel=UNKNOWN_TOPIC_OR_PARTITION}</p></blockquote><p>可能原因：</p><p>topic 不存在，切自动创建失败</p><p>需要设置：</p><pre class="language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">auto.create.topics.enable</span><span class="token punctuation">=</span><span class="token attr-value">true</span></code></pre><p>如果不方便修改配置，则需要手动创建 topic。</p><h3 id="查看-topic"><a href="#查看-topic" class="headerlink" title="查看 topic"></a>查看 topic</h3><pre class="language-bash" data-language="bash"><code class="language-bash">bin/kafka-topics.sh --list --zookeeper <span class="token number">127.0</span>.0.1:2181/spacemanti</code></pre><h3 id="创建-topic"><a href="#创建-topic" class="headerlink" title="创建 topic"></a>创建 topic</h3><pre class="language-bash" data-language="bash"><code class="language-bash">bin/kafka-topics.sh --create --zookeeper <span class="token number">127.0</span>.0.1:2181/spacemanti --config max.message.bytes<span class="token operator">=</span><span class="token number">128000000</span> --config flush.messages<span class="token operator">=</span><span class="token number">1</span> --replication-factor <span class="token number">1</span> --partitions <span class="token number">1</span> --topic logger-channel</code></pre><h3 id="查看-topic-1"><a href="#查看-topic-1" class="headerlink" title="查看 topic"></a>查看 topic</h3><pre class="language-bash" data-language="bash"><code class="language-bash">bin/kafka-topics.sh --describe --zookeeper <span class="token number">127.0</span>.0.1:2181/spacemanti  --topic manti-logger-channel                    Topic:manti-logger-channel      PartitionCount:1        ReplicationFactor:1     Configs:max.message.bytes<span class="token operator">=</span><span class="token number">128000000</span>,flush.messages<span class="token operator">=</span><span class="token number">1</span>        Topic: manti-logger-channel     Partition: <span class="token number">0</span>    Leader: <span class="token number">2</span>       Replicas: <span class="token number">2</span>     Isr: <span class="token number">2</span></code></pre><ul><li><p><strong>PartitionCount</strong>：partition 个数。</p></li><li><p><strong>ReplicationFactor</strong>：副本个数。</p></li><li><p><strong>Partition</strong>：partition 编号，从 0 开始递增。</p></li><li><p><strong>Leader</strong>：当前 partition 起作用的 breaker.id。</p></li><li><p><strong>Replicas</strong>: 当前副本数据所在的 breaker.id，是一个列表，排在最前面的其作用。</p></li><li><p><strong>Isr</strong>：当前 kakfa 集群中可用的 breaker.id 列表。</p></li></ul><h3 id="删除-topic"><a href="#删除-topic" class="headerlink" title="删除 topic"></a>删除 topic</h3><pre class="language-bash" data-language="bash"><code class="language-bash">bin/kafka-topics.sh --describe --zookeeper <span class="token number">127.0</span>.0.1:2181/spacemanti  --topic logger-channel</code></pre><ul><li>若 delete.topic.enable=true：直接彻底删除该 Topic。</li><li>若 delete.topic.enable=false：如果当前 Topic 没有使用过即没有传输过信息：可以彻底删除。<br> 如果当前 Topic 有使用过即有过传输过信息：并没有真正删除 Topic 只是把这个 Topic 标记为删除 (marked for deletion)，重启 Kafka Server 后删除。</li></ul><p> <strong>注</strong>：delete.topic.enable=true 配置信息位于配置文件 config/server.properties 中 (较新的版本中无显式配置，默认为 true)。</p><h3 id="修改-Topic"><a href="#修改-Topic" class="headerlink" title="修改 Topic"></a>修改 Topic</h3><ul><li><p><strong>增加分区数</strong></p><pre class="language-shell" data-language="shell"><code class="language-shell">bin/kafka-topics.sh --alter --bootstrap-server node1:9092,node2:9092,node3:9092 --topic topicName --partitions <span class="token number">3</span><span class="token number">1</span></code></pre><p>修改分区数时，仅能增加分区个数。若是用其减少 partition 个数，则会报如下错误信息：</p><pre class="language-none"><code class="language-none">  org.apache.kafka.common.errors.InvalidPartitionsException: The number of partitions for a topic can only be increased. Topic hadoop currently has 3 partitions, 2 would not be an increase.1</code></pre><p>不能用来修改副本个数。(请使用 kafka-reassign-partitions.sh 脚本增加副本数)</p></li><li><p><strong>增加配置</strong></p><pre class="language-shell" data-language="shell"><code class="language-shell">bin/kafka-topics.sh --alter --bootstrap-server node1:9092,node2:9092,node3:9092 --topic topicName --config flush.messages<span class="token operator">=</span><span class="token number">1</span><span class="token number">1</span></code></pre></li><li><p><strong>删除配置</strong></p><pre class="language-shell" data-language="shell"><code class="language-shell">bin/kafka-topics.sh --alter --bootstrap-server node1:9092,node2:9092,node3:9092 --topic topicName --delete-config flush.messages</code></pre></li></ul><h3 id="配置属性"><a href="#配置属性" class="headerlink" title="配置属性"></a>配置属性</h3><p>当如下所示的属性配置到 Topic 上时，将会覆盖 server.properties 上对应的属性。</p><table><thead><tr><th>属性名</th><th>值类型</th><th>默认值</th><th>有效值</th><th>服务器默认属性</th><th>描述</th></tr></thead><tbody><tr><td> cleanup.policy</td><td>list</td><td>delete</td><td>delete compact</td><td>log.cleanup.policy</td><td> 过期或达到上限日志的清理策略。 delete：删除 compact：压缩</td></tr><tr><td> compression.type</td><td>string</td><td>producer</td><td>uncompressed snappy lz4 gzip producer</td><td>compression.type</td><td> 指定给该 topic 最终的压缩类型</td></tr><tr><td> delete.retention.ms</td><td>long</td><td>86400000</td><td>[0,…]</td><td>log.cleaner.delete.retention.ms</td><td> 压缩的日志保留的最长时间，也是客户端消费消息的最长时间。 与 log.retention.minutes 的区别在于：一个控制未压缩的数据，一个控制压缩后的数据。</td></tr><tr><td>file.delete.delay.ms</td><td>long</td><td>60000</td><td>[0,…]</td><td>log.segment.delete.delay.ms</td><td> 从文件系统中删除前所等待的时间</td></tr><tr><td> flush.messages</td><td>long</td><td>9223372036854775807</td><td>[0,…]</td><td>log.flush.interval.messages</td><td> 在消息刷到磁盘之前，日志分区收集的消息数</td></tr><tr><td> flush.ms</td><td>long</td><td>9223372036854775807</td><td>[0,…]</td><td>log.flush.interval.ms</td><td> 消息在刷到磁盘之前，保存在内存中的最长时间，单位是 ms</td></tr><tr><td>index.interval.bytes</td><td>int</td><td>4096</td><td>[0,…]</td><td>log.index.interval.bytes</td><td> 执行 fetch 操作后，扫描最近的 offset 运行空间的大小。 设置越大，代表扫描速度越快，但是也更耗内存。 （一般情况下不需要设置此参数）</td></tr><tr><td>message.max.bytes</td><td>int</td><td>1000012</td><td>[0,…]</td><td>message.max.bytes</td><td>log 中能够容纳消息的最大字节数</td></tr><tr><td> min.cleanable.dirty.ratio</td><td>double</td><td>0.5</td><td>[0,…,1]</td><td>log.cleaner.min.cleanable.ratio</td><td> 日志清理的频率控制，占该 log 的百分比。 越大意味着更高效的清理，同时会存在空间浪费问题</td></tr><tr><td> retention.bytes</td><td>long</td><td>-1</td><td></td><td>log.retention.bytes</td><td>topic 每个分区的最大文件大小。 一个 topic 的大小限制 = 分区数 * log.retention.bytes。 -1 表示没有大小限制。</td></tr><tr><td>retention.ms</td><td>int</td><td>604800000</td><td>[-1,…]</td><td>log.retention.minutes</td><td> 日志文件保留的分钟数。 数据存储的最大时间超过这个时间会根据 log.cleanup.policy 设置的策略处理数据</td></tr><tr><td> segment.bytes</td><td>int</td><td>1073741824</td><td>[14,…]</td><td>log.segment.bytes</td><td> 每个 segment 的大小 (默认为 1G)</td></tr><tr><td>segment.index.bytes</td><td>int</td><td>10485760</td><td>[0,…]</td><td>log.index.size.max.bytes</td><td> 对于 segment 日志的索引文件大小限制 (默认为 10M)</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;p&gt;kafka-topics.sh 脚本主要负责 topic 相关的操作。它的具体实现是通过 kafka-run-class 来调用 &lt;code&gt;TopicCommand&lt;/code&gt; 类，并根据参数执行指定的功能。&lt;/p&gt;</summary>
    
    
    
    <category term="Kafka" scheme="https://jueee.github.io/categories/Kafka/"/>
    
    
    <category term="Kafka" scheme="https://jueee.github.io/tags/Kafka/"/>
    
  </entry>
  
  <entry>
    <title>Vue 拼图验证（vue-puzzle-vcode）</title>
    <link href="https://jueee.github.io/2020/11/2020-11-05-Vue%E6%8B%BC%E5%9B%BE%E9%AA%8C%E8%AF%81%EF%BC%88vue-puzzle-vcode%EF%BC%89/"/>
    <id>https://jueee.github.io/2020/11/2020-11-05-Vue%E6%8B%BC%E5%9B%BE%E9%AA%8C%E8%AF%81%EF%BC%88vue-puzzle-vcode%EF%BC%89/</id>
    <published>2020-11-05T00:00:00.000Z</published>
    <updated>2020-11-05T09:45:51.667Z</updated>
    
    <content type="html"><![CDATA[<h3 id="插件介绍"><a href="#插件介绍" class="headerlink" title="插件介绍"></a>插件介绍</h3><p>Vue 纯前端的拼图人机验证、右滑拼图验证。</p><ul><li>插件网站：<span class="exturl" data-url="aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvdnVlLXB1enpsZS12Y29kZQ==">https://www.npmjs.com/package/vue-puzzle-vcode<i class="fa fa-external-link-alt"></i></span></li><li>Demo：<span class="exturl" data-url="aHR0cHM6Ly9pc2x1by5jb20vd29yay92dWUtcHV6emxlLXZjb2RlLyMv">https://isluo.com/work/vue-puzzle-vcode/#/<i class="fa fa-external-link-alt"></i></span></li></ul><a id="more"></a><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> vue-puzzle-vcode --save</code></pre><h3 id="使用依赖"><a href="#使用依赖" class="headerlink" title="使用依赖"></a>使用依赖</h3><pre class="language-html" data-language="html"><code class="language-html">import Vcode from "vue-puzzle-vcode"; <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Vcode</span> <span class="token attr-name">:show</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>isShow<span class="token punctuation">"</span></span> <span class="token attr-name">@success</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>success<span class="token punctuation">"</span></span> <span class="token attr-name">@close</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>close<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span></code></pre><h3 id="简单例子"><a href="#简单例子" class="headerlink" title="简单例子"></a>简单例子</h3><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Vcode</span> <span class="token attr-name">:show</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>isShow<span class="token punctuation">"</span></span> <span class="token attr-name">@success</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>success<span class="token punctuation">"</span></span> <span class="token attr-name">@close</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>close<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">import</span> Vcode <span class="token keyword">from</span> <span class="token string">"vue-puzzle-vcode"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      isShow<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 验证码模态框是否出现</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  components<span class="token operator">:</span> <span class="token punctuation">{</span>    Vcode<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>isShow <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment">// 用户通过了验证</span>    <span class="token function">success</span><span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>isShow <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// 通过验证后，需要手动隐藏模态框</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment">// 用户点击遮罩层，应该关闭模态框</span>    <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>isShow <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></code></pre><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><table><thead><tr><th align="left">字段</th><th align="left">类型</th><th align="left">默认值</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"> show</td><td align="left">Boolean</td><td align="left">false</td><td align="left"> 是否显示验证码弹框</td></tr><tr><td align="left"> canvasWidth</td><td align="left">Number</td><td align="left">310</td><td align="left"> 主图区域的宽度，单位 px</td></tr><tr><td align="left">canvasHeight</td><td align="left">Number</td><td align="left">160</td><td align="left"> 主图区域的高度，单位 px</td></tr><tr><td align="left">puzzleScale</td><td align="left">Number</td><td align="left">1</td><td align="left"> 拼图块 (小的拼图) 的大小比例，0.2 ～ 2 ，数字越大，拼图越大</td></tr><tr><td align="left"> sliderSize</td><td align="left">Number</td><td align="left">50</td><td align="left"> 左下角用户拖动的那个滑块的尺寸，单位 px</td></tr><tr><td align="left">range</td><td align="left">Number</td><td align="left">10</td><td align="left"> 判断成功的误差范围，单位 px, 滑动的距离和拼图的距离小于等于此值时，会判定重合</td></tr><tr><td align="left"> imgs</td><td align="left">Array</td><td align="left">null</td><td align="left"> 自定义图片，见下方例子</td></tr><tr><td align="left"> successText</td><td align="left">String</td><td align="left">"验证通过！"</td><td align="left"> 验证成功时的提示文字</td></tr><tr><td align="left"> failText</td><td align="left">String</td><td align="left">"验证失败，请重试"</td><td align="left"> 验证失败时的提示文字</td></tr><tr><td align="left"> sliderText</td><td align="left">String</td><td align="left">"拖动滑块完成拼图"</td><td align="left"> 下方滑动条里的文字</td></tr></tbody></table><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><table><thead><tr><th align="left">事件名</th><th align="left">返回值</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"> success</td><td align="left"> 偏差值</td><td align="left">验证通过时会触发，返回值是用户移动的距离跟目标距离的偏差值 px</td></tr><tr><td align="left">fail</td><td align="left"> 偏差值</td><td align="left">验证失败时会触发，返回值同上</td></tr><tr><td align="left"> close</td><td align="left">null</td><td align="left"> 用户点击遮罩层的回调</td></tr></tbody></table><h3 id="自定义图片"><a href="#自定义图片" class="headerlink" title="自定义图片"></a>自定义图片</h3><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Vcode</span> <span class="token attr-name">:imgs</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>[Img1, Img2]<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">import</span> Img1 <span class="token keyword">from</span> <span class="token string">"~/assets/img1.png"</span><span class="token punctuation">;</span><span class="token keyword">import</span> Img2 <span class="token keyword">from</span> <span class="token string">"~/assets/img2.png"</span><span class="token punctuation">;</span> <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      Img1<span class="token punctuation">,</span>      Img2<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></code></pre><ul><li>也可以是网络图片完整 URL 路径，但注意图片跨域问题，因为 canvas api 无法调用跨 域的图片</li></ul><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><ul><li>当不传递 imgs 字段或图片加载出错时，会自动生成随机图片</li><li>模态框的显示和隐藏完全由父级控制，所以用户通过验证后，需要手动隐藏模态框</li></ul><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvdnVlLXB1enpsZS12Y29kZQ==">https://www.npmjs.com/package/vue-puzzle-vcode<i class="fa fa-external-link-alt"></i></span></li></ul>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;插件介绍&quot;&gt;&lt;a href=&quot;#插件介绍&quot; class=&quot;headerlink&quot; title=&quot;插件介绍&quot;&gt;&lt;/a&gt;插件介绍&lt;/h3&gt;&lt;p&gt;Vue 纯前端的拼图人机验证、右滑拼图验证。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;插件网站：&lt;a href=&quot;https://www.npmjs.com/package/vue-puzzle-vcode&quot;&gt;https://www.npmjs.com/package/vue-puzzle-vcode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Demo：&lt;a href=&quot;https://isluo.com/work/vue-puzzle-vcode/#/&quot;&gt;https://isluo.com/work/vue-puzzle-vcode/#/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Vue" scheme="https://jueee.github.io/categories/Vue/"/>
    
    
    <category term="Vue" scheme="https://jueee.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Spring Data Jpa 实现分页查询</title>
    <link href="https://jueee.github.io/2020/11/2020-11-04-SpringDataJpa%E5%AE%9E%E7%8E%B0%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2/"/>
    <id>https://jueee.github.io/2020/11/2020-11-04-SpringDataJpa%E5%AE%9E%E7%8E%B0%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2/</id>
    <published>2020-11-04T00:00:00.000Z</published>
    <updated>2020-11-04T08:21:17.596Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Spring-Data-Jpa"><a href="#Spring-Data-Jpa" class="headerlink" title="Spring Data Jpa"></a>Spring Data Jpa</h3><h4 id="引入-Jar"><a href="#引入-Jar" class="headerlink" title="引入 Jar"></a>引入 Jar</h4><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-data-jpa<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></code></pre><a id="more"></a><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><p>SpringBoot 配置文件 <code>application.yml</code>：</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/vuedb<span class="token punctuation">?</span>useUnicode=true<span class="token important">&amp;characterEncoding=UTF-8&amp;serverTimezone=Asia/Shanghai</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> jue    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver  <span class="token key atrule">jpa</span><span class="token punctuation">:</span>    <span class="token key atrule">show-sql</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 日志打印 SQL</span>    <span class="token key atrule">properties</span><span class="token punctuation">:</span>      <span class="token key atrule">hibernate</span><span class="token punctuation">:</span>        <span class="token key atrule">format_sql</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 格式化日志 SQL</span></code></pre><h3 id="方法一：本地SQL查询"><a href="#方法一：本地SQL查询" class="headerlink" title="方法一：本地SQL查询"></a>方法一：本地 SQL 查询</h3><p>本地 sql 查询，注意表名啥的都用数据库中的名称，适用于特定数据库的查询。</p><p>缺点：无法识别参数为空的情况。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BookDAO</span> <span class="token keyword">extends</span> <span class="token class-name">JpaRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"SELECT * FROM Book WHERE name like %:name% and author like %:author%"</span><span class="token punctuation">,</span>            countQuery <span class="token operator">=</span> <span class="token string">"SELECT count(*) FROM Book WHERE name like %:name% and author like %:author%"</span><span class="token punctuation">,</span>            nativeQuery <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">&gt;</span></span> <span class="token function">findAll1</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"author"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> author<span class="token punctuation">,</span> <span class="token class-name">Pageable</span> pageable<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> <span class="token class-name">BookDAO</span> bookRepository<span class="token punctuation">;</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/findAll/{page}/{size}"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">&gt;</span></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"page"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> page<span class="token punctuation">,</span> <span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"size"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> size<span class="token punctuation">,</span><span class="token class-name">Book</span> book<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">Pageable</span>  request <span class="token operator">=</span> <span class="token class-name">PageRequest</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> bookRepository<span class="token punctuation">.</span><span class="token function">findAll1</span><span class="token punctuation">(</span>book<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>book<span class="token punctuation">.</span><span class="token function">getAuthor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="方法二：分页接口"><a href="#方法二：分页接口" class="headerlink" title="方法二：分页接口"></a>方法二：分页接口</h3><p>jpa 已经实现的分页接口，适用于简单的分页查询。</p><p>缺点，无法增加查询条件。</p><p>接口说明：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PagingAndSortingRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> ID <span class="token keyword">extends</span> <span class="token class-name">Serializable</span><span class="token punctuation">&gt;</span></span>  <span class="token keyword">extends</span> <span class="token class-name">CrudRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> ID<span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>  <span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token class-name">Sort</span> sort<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token class-name">Pageable</span> pageable<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">Accessing</span> the second page of <span class="token class-name">User</span> by a page size of <span class="token number">20</span> you could simply <span class="token keyword">do</span> something like <span class="token keyword">this</span><span class="token operator">:</span><span class="token class-name">PagingAndSortingRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> repository <span class="token operator">=</span> <span class="token comment">// … get access to a bean</span><span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> users <span class="token operator">=</span> repository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PageRequest</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>示例如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> <span class="token class-name">BookDAO</span> bookRepository<span class="token punctuation">;</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/findAll/{page}/{size}"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">&gt;</span></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"page"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> page<span class="token punctuation">,</span> <span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"size"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> size<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">Pageable</span>  request <span class="token operator">=</span> <span class="token class-name">PageRequest</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> bookRepository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="方法三：动态sql查询"><a href="#方法三：动态sql查询" class="headerlink" title="方法三：动态sql查询"></a>方法三：动态 sql 查询</h3><p>扩充 findAll，适用于动态 sql 查询</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BookDAO</span> <span class="token keyword">extends</span> <span class="token class-name">JpaRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">&gt;</span></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token class-name">Specification</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">&gt;</span></span> spec<span class="token punctuation">,</span> <span class="token class-name">Pageable</span> pageable<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> <span class="token class-name">BookDAO</span> bookRepository<span class="token punctuation">;</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/findAll/{page}/{size}"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">&gt;</span></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"page"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> page<span class="token punctuation">,</span> <span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"size"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> size<span class="token punctuation">,</span><span class="token class-name">Book</span> book<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">Specification</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">&gt;</span></span> specification <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Specification</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">Predicate</span> <span class="token function">toPredicate</span><span class="token punctuation">(</span><span class="token class-name">Root</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">&gt;</span></span> root<span class="token punctuation">,</span> <span class="token class-name">CriteriaQuery</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> query<span class="token punctuation">,</span> <span class="token class-name">CriteriaBuilder</span> cb<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Predicate</span><span class="token punctuation">&gt;</span></span> predicates <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//所有的断言</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>book<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//添加断言</span><span class="token class-name">Predicate</span> likeNickName <span class="token operator">=</span> cb<span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">as</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"%"</span><span class="token operator">+</span>book<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"%"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>predicates<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>likeNickName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>book<span class="token punctuation">.</span><span class="token function">getAuthor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//添加断言</span><span class="token class-name">Predicate</span> likeNickName <span class="token operator">=</span> cb<span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"author"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">as</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"%"</span><span class="token operator">+</span>book<span class="token punctuation">.</span><span class="token function">getAuthor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"%"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>predicates<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>likeNickName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> cb<span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span>predicates<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Predicate</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token class-name">Pageable</span>  request <span class="token operator">=</span> <span class="token class-name">PageRequest</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> bookRepository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span>specification<span class="token punctuation">,</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="方法四：动态sql查询"><a href="#方法四：动态sql查询" class="headerlink" title="方法四：动态sql查询"></a>方法四：动态 sql 查询</h3><p>使用 entityManager，适用于动态 sql 查询</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@PersistenceContext</span><span class="token class-name">EntityManager</span> entityManager<span class="token punctuation">;</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/findAll/{page}/{size}"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">&gt;</span></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"page"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> page<span class="token punctuation">,</span> <span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"size"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> size<span class="token punctuation">,</span><span class="token class-name">Book</span> book<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">StringBuilder</span> whereSql <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>book<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>whereSql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" and name like :name "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>params<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"%"</span><span class="token operator">+</span>book<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"%"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>book<span class="token punctuation">.</span><span class="token function">getAuthor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>whereSql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" and author like :author "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>params<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"author"</span><span class="token punctuation">,</span><span class="token string">"%"</span><span class="token operator">+</span>book<span class="token punctuation">.</span><span class="token function">getAuthor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"%"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">StringBuilder</span> countSelectSql <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>countSelectSql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"select count(*) from Book where 1=1 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> countSql <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>countSelectSql<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>whereSql<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Query</span> countQuery <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>entityManager<span class="token punctuation">.</span><span class="token function">createQuery</span><span class="token punctuation">(</span>countSql<span class="token punctuation">,</span><span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setParameters</span><span class="token punctuation">(</span>countQuery<span class="token punctuation">,</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Long</span> count <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">)</span> countQuery<span class="token punctuation">.</span><span class="token function">getSingleResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">StringBuilder</span> selectSql <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>selectSql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"from Book where 1=1 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> querySql <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>selectSql<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>whereSql<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Query</span> query <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>entityManager<span class="token punctuation">.</span><span class="token function">createQuery</span><span class="token punctuation">(</span>querySql<span class="token punctuation">,</span> <span class="token class-name">Book</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setParameters</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">PageRequest</span> pageParam <span class="token operator">=</span> <span class="token class-name">PageRequest</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>query<span class="token punctuation">.</span><span class="token function">setFirstResult</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>pageParam<span class="token punctuation">.</span><span class="token function">getOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>query<span class="token punctuation">.</span><span class="token function">setMaxResults</span><span class="token punctuation">(</span>pageParam<span class="token punctuation">.</span><span class="token function">getPageSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">&gt;</span></span> incomeDailyList <span class="token operator">=</span> query<span class="token punctuation">.</span><span class="token function">getResultList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Pageable</span> pageable <span class="token operator">=</span> <span class="token class-name">PageRequest</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">&gt;</span></span> incomeDailyPage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PageImpl</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>incomeDailyList<span class="token punctuation">,</span> pageable<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> incomeDailyPage<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">setParameters</span><span class="token punctuation">(</span><span class="token class-name">Query</span> query<span class="token punctuation">,</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> params<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> entry<span class="token operator">:</span>params<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>query<span class="token punctuation">.</span><span class="token function">setParameter</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;Spring-Data-Jpa&quot;&gt;&lt;a href=&quot;#Spring-Data-Jpa&quot; class=&quot;headerlink&quot; title=&quot;Spring Data Jpa&quot;&gt;&lt;/a&gt;Spring Data Jpa&lt;/h3&gt;&lt;h4 id=&quot;引入-Jar&quot;&gt;&lt;a href=&quot;#引入-Jar&quot; class=&quot;headerlink&quot; title=&quot;引入 Jar&quot;&gt;&lt;/a&gt;引入 Jar&lt;/h4&gt;&lt;pre class=&quot;language-xml&quot; data-language=&quot;xml&quot;&gt;&lt;code class=&quot;language-xml&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;dependency&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;groupId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;groupId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;artifactId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;spring-boot-starter-data-jpa&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;artifactId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;dependency&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="Java" scheme="https://jueee.github.io/categories/Java/"/>
    
    <category term="JavaJar" scheme="https://jueee.github.io/categories/Java/JavaJar/"/>
    
    
    <category term="Java" scheme="https://jueee.github.io/tags/Java/"/>
    
    <category term="JavaJar" scheme="https://jueee.github.io/tags/JavaJar/"/>
    
  </entry>
  
  <entry>
    <title>基于 Vue 组件库 Element 搭建管理系统</title>
    <link href="https://jueee.github.io/2020/11/2020-11-03-%E5%9F%BA%E4%BA%8EVue%E7%BB%84%E4%BB%B6%E5%BA%93Element%E6%90%AD%E5%BB%BA%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
    <id>https://jueee.github.io/2020/11/2020-11-03-%E5%9F%BA%E4%BA%8EVue%E7%BB%84%E4%BB%B6%E5%BA%93Element%E6%90%AD%E5%BB%BA%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</id>
    <published>2020-11-03T00:00:00.000Z</published>
    <updated>2020-11-04T08:10:27.882Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Element-介绍"><a href="#Element-介绍" class="headerlink" title="Element 介绍"></a>Element 介绍</h3><p>Element，一套为开发者、设计师和产品经理准备的基于 Vue 2.0 的桌面端组件库。</p><p>Element 提供了配套设计资源，帮助你的网站快速成型。</p><p>是由饿了么公司前端团队开源的。</p><ul><li>官网：<span class="exturl" data-url="aHR0cHM6Ly9lbGVtZW50LmVsZW1lLmNuLw==">https://element.eleme.cn/<i class="fa fa-external-link-alt"></i></span></li><li>GitHub：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0VsZW1lRkUvZWxlbWVudC8=">https://github.com/ElemeFE/element/<i class="fa fa-external-link-alt"></i></span></li></ul><a id="more"></a><h3 id="安装-Element"><a href="#安装-Element" class="headerlink" title="安装 Element"></a>安装 Element</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i element-ui -S</code></pre><h3 id="引入-Element"><a href="#引入-Element" class="headerlink" title="引入 Element"></a>引入 Element</h3><p>在 main.js 中写入以下内容：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">import</span> ElementUI <span class="token keyword">from</span> <span class="token string">'element-ui'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'element-ui/lib/theme-chalk/index.css'</span><span class="token punctuation">;</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App.vue'</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>ElementUI<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  <span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token parameter">h</span> <span class="token operator">=&gt;</span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>若报错：</p><p><img src="/images/2020/11/image-20201102153341973.png" alt="image-20201102153341973" loading="lazy"></p><p>原因：缺少匹配规则</p><p>解决办法：在 webpack.config.js 文件中的 module 中增加如下 json</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>   test<span class="token operator">:</span> /\.(eot|svg|ttf|woff|woff2)(\?\S*)?$/<span class="token punctuation">,</span>   loader<span class="token operator">:</span> 'file-loader'<span class="token punctuation">}</span></code></pre><p>如下图所示：</p><p><img src="/images/2020/11/image-20201102153601127.png" alt="image-20201102153601127" loading="lazy"></p><h3 id="Element-警告处理"><a href="#Element-警告处理" class="headerlink" title="Element 警告处理"></a>Element 警告处理</h3><h4 id="explicit-keys"><a href="#explicit-keys" class="headerlink" title="explicit keys"></a>explicit keys</h4><p>Element for 循环报如下异常：</p><blockquote><p>component lists rendered with v-for should have explicit keys</p></blockquote><p>处理方案：加上 <code>:key="index"</code></p><p>v-for 列表渲染时，组件或元素中还要添加一个 :key="xxx"，这里可以看一下 item 有没有唯一标识 id，如果有，可以设置为 :key="item.id"</p><p>如果没有唯一标识，可以考虑 v-for="(item, idx) in items"，然后设置 :key="idx"</p><h3 id="增删改查示例"><a href="#增删改查示例" class="headerlink" title="增删改查示例"></a>增删改查示例</h3><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mini<span class="token punctuation">"</span></span> <span class="token attr-name">:inline</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">:model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>queryMap<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>demo-form-inline<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>图书名<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span> <span class="token attr-name">clearable</span> <span class="token attr-name">@clear</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>search<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>queryMap.name<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>图书名<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-input</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>作者<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span> <span class="token attr-name">clearable</span> <span class="token attr-name">@clear</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>search<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>queryMap.author<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>作者<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-input</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">icon</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>el-icon-search<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>search<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>查询<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>success<span class="token punctuation">"</span></span> <span class="token attr-name">icon</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>el-icon-circle-plus-outline<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>openAdd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>添加<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table</span>                <span class="token attr-name">:data</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tableData<span class="token punctuation">"</span></span>                <span class="token attr-name">border</span><span class="token style-attr language-css"><span class="token attr-name">                <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span> 70%</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span>                     <span class="token attr-name">fixed</span>                    <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span>                    <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>编号<span class="token punctuation">"</span></span>                    <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>150<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span>                    <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span>                    <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>图书名<span class="token punctuation">"</span></span>                    <span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span>                    <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>author<span class="token punctuation">"</span></span>                    <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>作者<span class="token punctuation">"</span></span>                    <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>120<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span>                    <span class="token attr-name">fixed</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span>                    <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>操作<span class="token punctuation">"</span></span>                    <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot-scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>scope<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>edit(scope.row)<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>small<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>修改<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>deleteBook(scope.row)<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>small<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>删除<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-pagination</span>                <span class="token attr-name">background</span>                <span class="token attr-name">layout</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prev, pager, next<span class="token punctuation">"</span></span>                <span class="token attr-name">:page-size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pageSize<span class="token punctuation">"</span></span>                <span class="token attr-name">:total</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>total<span class="token punctuation">"</span></span>                <span class="token attr-name">@current-change</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>page<span class="token punctuation">"</span></span>                <span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-pagination</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-dialog</span>        <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>添加物资去处<span class="token punctuation">"</span></span>        <span class="token attr-name">:visible.sync</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>addDialogVisible<span class="token punctuation">"</span></span>        <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>30%<span class="token punctuation">"</span></span>        <span class="token attr-name">@close</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>closeAddDialog<span class="token punctuation">"</span></span>      <span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form</span>            <span class="token attr-name">:model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>addRuleForm<span class="token punctuation">"</span></span>            <span class="token attr-name">:rules</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>addRules<span class="token punctuation">"</span></span>            <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>addRuleFormRef<span class="token punctuation">"</span></span>            <span class="token attr-name">label-width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100px<span class="token punctuation">"</span></span>            <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>demo-ruleForm<span class="token punctuation">"</span></span>          <span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>图书名称<span class="token punctuation">"</span></span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>addRuleForm.name<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-input</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>作者<span class="token punctuation">"</span></span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>author<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>addRuleForm.author<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-input</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dialog-footer<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>addDialogVisible = false<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>取 消<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>add<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>确 定<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-dialog</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>        methods<span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token function">deleteBook</span><span class="token punctuation">(</span><span class="token parameter">row</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">const</span> _this <span class="token operator">=</span> <span class="token keyword">this</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>$axios<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">'book/deleteById/'</span><span class="token operator">+</span>row<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resp</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    _this<span class="token punctuation">.</span><span class="token function">$alert</span><span class="token punctuation">(</span><span class="token string">'《'</span><span class="token operator">+</span>row<span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">'》删除成功！'</span><span class="token punctuation">,</span> <span class="token string">'消息'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>                        confirmButtonText<span class="token operator">:</span> <span class="token string">'确定'</span><span class="token punctuation">,</span>                        <span class="token function-variable function">callback</span><span class="token operator">:</span> <span class="token parameter">action</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                            window<span class="token punctuation">.</span>location<span class="token punctuation">.</span><span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function">edit</span><span class="token punctuation">(</span><span class="token parameter">row</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                    path<span class="token operator">:</span> <span class="token string">'/update'</span><span class="token punctuation">,</span>                    query<span class="token operator">:</span><span class="token punctuation">{</span>                        id<span class="token operator">:</span>row<span class="token punctuation">.</span>id                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function">page</span><span class="token punctuation">(</span><span class="token parameter">currentPage</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>queryMap<span class="token punctuation">.</span>pageNum <span class="token operator">=</span> currentPage<span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getConsumerList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token comment">//搜索</span>            <span class="token function">search</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">this</span><span class="token punctuation">.</span>queryMap<span class="token punctuation">.</span>pageNum <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>              <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getConsumerList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token keyword">async</span> <span class="token function">getConsumerList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">const</span> _this <span class="token operator">=</span> <span class="token keyword">this</span>              <span class="token keyword">this</span><span class="token punctuation">.</span>$axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'book/findAll/'</span><span class="token operator">+</span><span class="token punctuation">(</span>_this<span class="token punctuation">.</span>queryMap<span class="token punctuation">.</span>pageNum<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'/6'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>                  params<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>queryMap                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resp</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>resp<span class="token punctuation">)</span>                  _this<span class="token punctuation">.</span>tableData <span class="token operator">=</span> resp<span class="token punctuation">.</span>data<span class="token punctuation">.</span>content                  _this<span class="token punctuation">.</span>pageSize <span class="token operator">=</span> resp<span class="token punctuation">.</span>data<span class="token punctuation">.</span>size                  _this<span class="token punctuation">.</span>total <span class="token operator">=</span> resp<span class="token punctuation">.</span>data<span class="token punctuation">.</span>totalElements              <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function">openAdd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">this</span><span class="token punctuation">.</span>addDialogVisible <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token comment">//关闭弹出框</span>            <span class="token function">closeAddDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>addRuleFormRef<span class="token punctuation">.</span><span class="token function">clearValidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">this</span><span class="token punctuation">.</span>addRuleForm <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token comment">//添加</span>            <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>addRuleFormRef<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token parameter">valid</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>valid<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>addRuleForm<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                  <span class="token keyword">const</span> _this <span class="token operator">=</span> <span class="token keyword">this</span>                  <span class="token keyword">this</span><span class="token punctuation">.</span>$axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'book/save'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>addRuleForm<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resp</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                      <span class="token keyword">if</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>data <span class="token operator">==</span> <span class="token string">'success'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                          _this<span class="token punctuation">.</span>addDialogVisible <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                          _this<span class="token punctuation">.</span>$message<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token string">"添加成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                          _this<span class="token punctuation">.</span>addRuleForm <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>                          _this<span class="token punctuation">.</span><span class="token function">getConsumerList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"添加失败:"</span> <span class="token operator">+</span> res<span class="token punctuation">.</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token punctuation">}</span>                  <span class="token punctuation">}</span><span class="token punctuation">)</span>                                <span class="token punctuation">}</span>              <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span>                addDialogVisible<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">//添加弹框是否显示</span>                queryMap<span class="token operator">:</span> <span class="token punctuation">{</span> pageNum<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> pageSize<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">""</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">//查询对象</span>                pageSize<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                total<span class="token operator">:</span> <span class="token number">11</span><span class="token punctuation">,</span>                tableData<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>                    id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                    name<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>                    author<span class="token operator">:</span> <span class="token string">''</span>                <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                addRuleForm<span class="token operator">:</span> <span class="token punctuation">{</span>                    name<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>                    author<span class="token operator">:</span> <span class="token string">''</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                addRules<span class="token operator">:</span> <span class="token punctuation">{</span>                    name<span class="token operator">:</span> <span class="token punctuation">[</span>                        <span class="token punctuation">{</span> required<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> message<span class="token operator">:</span> <span class="token string">'图书名称不能为空'</span><span class="token punctuation">,</span> trigger<span class="token operator">:</span> <span class="token string">'blur'</span> <span class="token punctuation">}</span>                    <span class="token punctuation">]</span><span class="token punctuation">,</span>                    author<span class="token operator">:</span><span class="token punctuation">[</span>                        <span class="token punctuation">{</span> required<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> message<span class="token operator">:</span> <span class="token string">'作者不能为空'</span><span class="token punctuation">,</span> trigger<span class="token operator">:</span> <span class="token string">'blur'</span> <span class="token punctuation">}</span>                    <span class="token punctuation">]</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getConsumerList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></code></pre><p>效果如下：</p><p><img src="/images/2020/11/image-20201104161014813.png" alt="image-20201104161014813" loading="lazy"></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;Element-介绍&quot;&gt;&lt;a href=&quot;#Element-介绍&quot; class=&quot;headerlink&quot; title=&quot;Element 介绍&quot;&gt;&lt;/a&gt;Element 介绍&lt;/h3&gt;&lt;p&gt;Element，一套为开发者、设计师和产品经理准备的基于 Vue 2.0 的桌面端组件库。&lt;/p&gt;
&lt;p&gt;Element 提供了配套设计资源，帮助你的网站快速成型。&lt;/p&gt;
&lt;p&gt;是由饿了么公司前端团队开源的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;官网：&lt;a href=&quot;https://element.eleme.cn/&quot;&gt;https://element.eleme.cn/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;GitHub：&lt;a href=&quot;https://github.com/ElemeFE/element/&quot;&gt;https://github.com/ElemeFE/element/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Vue" scheme="https://jueee.github.io/categories/Vue/"/>
    
    
    <category term="Vue" scheme="https://jueee.github.io/tags/Vue/"/>
    
    <category term="Element" scheme="https://jueee.github.io/tags/Element/"/>
    
  </entry>
  
  <entry>
    <title>Element UI 表单设计及代码生成器 form-generator</title>
    <link href="https://jueee.github.io/2020/11/2020-11-04-ElementUI%E8%A1%A8%E5%8D%95%E8%AE%BE%E8%AE%A1%E5%8F%8A%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8form-generator/"/>
    <id>https://jueee.github.io/2020/11/2020-11-04-ElementUI%E8%A1%A8%E5%8D%95%E8%AE%BE%E8%AE%A1%E5%8F%8A%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8form-generator/</id>
    <published>2020-11-03T00:00:00.000Z</published>
    <updated>2020-11-03T11:40:12.391Z</updated>
    
    <content type="html"><![CDATA[<h3 id="form-generator"><a href="#form-generator" class="headerlink" title="form-generator"></a>form-generator</h3><p>Element UI 表单设计及代码生成器，可将生成的代码直接运行在基于 Element 的 vue 项目中；也可导出 JSON 表单，使用配套的解析器将 JSON 解析成真实的表单。</p><p><strong>源码：</strong></p><ul><li>GitHub：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0pha0h1YW5nL2Zvcm0tZ2VuZXJhdG9y">https://github.com/JakHuang/form-generator<i class="fa fa-external-link-alt"></i></span></li><li>Gitee：<span class="exturl" data-url="aHR0cHM6Ly9naXRlZS5jb20vbXJoai9mb3JtLWdlbmVyYXRvcg==">https://gitee.com/mrhj/form-generator<i class="fa fa-external-link-alt"></i></span></li></ul><p><strong>在线地址</strong>：</p><ul><li>国内预览地址：<span class="exturl" data-url="aHR0cHM6Ly9tcmhqLmdpdGVlLmlvL2Zvcm0tZ2VuZXJhdG9yLyMv">https://mrhj.gitee.io/form-generator/#/<i class="fa fa-external-link-alt"></i></span></li><li>vscode 插件：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0pha0h1YW5nL2Zvcm0tZ2VuZXJhdG9yLXBsdWdpbg==">https://github.com/JakHuang/form-generator-plugin<i class="fa fa-external-link-alt"></i></span></li></ul><a id="more"></a><h3 id="form-generator-plugin"><a href="#form-generator-plugin" class="headerlink" title="form-generator-plugin"></a>form-generator-plugin</h3><ul><li>GitHub：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0pha0h1YW5nL2Zvcm0tZ2VuZXJhdG9yLXBsdWdpbg==">https://github.com/JakHuang/form-generator-plugin<i class="fa fa-external-link-alt"></i></span></li></ul><h4 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h4><p>使用 vscode 搜索插件 <code>Form Generator Plugin</code>，并点击 install 进行安装。</p><p><img src="/images/2020/11/image-20201103100725339.png" alt="image-20201103100725339" loading="lazy"></p><h4 id="使用插件"><a href="#使用插件" class="headerlink" title="使用插件"></a>使用插件</h4><p>选择 vue 文件，邮件选择 “打开表单设计器”。</p><p><img src="/images/2020/11/image-20201103100909195.png" alt="image-20201103100909195" loading="lazy"></p><p>拖动控件进行布局：</p><p><img src="/images/2020/11/image-20201103193921825.png" alt="image-20201103193921825" loading="lazy"></p><p>导出或者复制代码，如下所示：</p><pre class="language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div&gt;    &lt;el-form ref="elForm" :model="formData" :rules="rules" size="medium" label-width="100px"&gt;      &lt;el-form-item label="单行文本" prop="field101"&gt;        &lt;el-input v-model="formData.field101" placeholder="请输入单行文本" clearable :style="{width: '100%'}"&gt;        &lt;/el-input&gt;      &lt;/el-form-item&gt;      &lt;el-form-item label="时间范围" prop="field104"&gt;        &lt;el-time-picker v-model="formData.field104" is-range format="HH:mm:ss" value-format="HH:mm:ss"          :style="{width: '100%'}" start-placeholder="开始时间" end-placeholder="结束时间" range-separator="至"          clearable&gt;&lt;/el-time-picker&gt;      &lt;/el-form-item&gt;      &lt;el-form-item label="多选框组" prop="field103"&gt;        &lt;el-checkbox-group v-model="formData.field103" size="medium"&gt;          &lt;el-checkbox v-for="(item, index) in field103Options" :key="index" :label="item.value"            :disabled="item.disabled"&gt;{{item.label}}&lt;/el-checkbox&gt;        &lt;/el-checkbox-group&gt;      &lt;/el-form-item&gt;      &lt;el-form-item label="评分" prop="field105"&gt;        &lt;el-rate v-model="formData.field105"&gt;&lt;/el-rate&gt;      &lt;/el-form-item&gt;      &lt;el-form-item label="上传" prop="field106" required&gt;        &lt;el-upload ref="field106" :file-list="field106fileList" :action="field106Action"          :before-upload="field106BeforeUpload"&gt;          &lt;el-button size="small" type="primary" icon="el-icon-upload"&gt;点击上传&lt;/el-button&gt;        &lt;/el-upload&gt;      &lt;/el-form-item&gt;      &lt;el-form-item size="large"&gt;        &lt;el-button type="primary" @click="submitForm"&gt;提交&lt;/el-button&gt;        &lt;el-button @click="resetForm"&gt;重置&lt;/el-button&gt;      &lt;/el-form-item&gt;    &lt;/el-form&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default {  components: {},  props: [],  data() {    return {      formData: {        field101: undefined,        field104: null,        field103: [],        field105: 0,        field106: null,      },      rules: {        field101: [{          required: true,          message: '请输入单行文本',          trigger: 'blur'        }],        field104: [{          required: true,          message: '时间范围不能为空',          trigger: 'change'        }],        field103: [{          required: true,          type: 'array',          message: '请至少选择一个field103',          trigger: 'change'        }],        field105: [{          required: true,          message: '评分不能为空',          trigger: 'change'        }],      },      field106Action: 'https://jsonplaceholder.typicode.com/posts/',      field106fileList: [],      field103Options: [{        "label": "选项一",        "value": 1      }, {        "label": "选项二",        "value": 2      }, {        "label": "选项三",        "value": ""      }, {        "label": "选项四",        "value": ""      }, {        "label": "选项五",        "value": ""      }],    }  },  computed: {},  watch: {},  created() {},  mounted() {},  methods: {    submitForm() {      this.$refs['elForm'].validate(valid =&gt; {        if (!valid) return        // TODO 提交表单      })    },    resetForm() {      this.$refs['elForm'].resetFields()    },    field106BeforeUpload(file) {      let isRightSize = file.size / 1024 / 1024 &lt; 2      if (!isRightSize) {        this.$message.error('文件大小超过 2MB')      }      return isRightSize    },  }}&lt;/script&gt;&lt;style&gt;.el-rate {  display: inline-block;  vertical-align: text-top;}.el-upload__tip {  line-height: 1.2;}&lt;/style&gt;</code></pre>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;form-generator&quot;&gt;&lt;a href=&quot;#form-generator&quot; class=&quot;headerlink&quot; title=&quot;form-generator&quot;&gt;&lt;/a&gt;form-generator&lt;/h3&gt;&lt;p&gt;Element UI表单设计及代码生成器，可将生成的代码直接运行在基于Element的vue项目中；也可导出JSON表单，使用配套的解析器将JSON解析成真实的表单。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;源码：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GitHub：&lt;a href=&quot;https://github.com/JakHuang/form-generator&quot;&gt;https://github.com/JakHuang/form-generator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Gitee：&lt;a href=&quot;https://gitee.com/mrhj/form-generator&quot;&gt;https://gitee.com/mrhj/form-generator&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;在线地址&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;国内预览地址：&lt;a href=&quot;https://mrhj.gitee.io/form-generator/#/&quot;&gt;https://mrhj.gitee.io/form-generator/#/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;vscode 插件：&lt;a href=&quot;https://github.com/JakHuang/form-generator-plugin&quot;&gt;https://github.com/JakHuang/form-generator-plugin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Vue" scheme="https://jueee.github.io/categories/Vue/"/>
    
    
    <category term="Vue" scheme="https://jueee.github.io/tags/Vue/"/>
    
    <category term="Element" scheme="https://jueee.github.io/tags/Element/"/>
    
  </entry>
  
  <entry>
    <title>NodeJS 版本管理工具 nvm 使用</title>
    <link href="https://jueee.github.io/2020/11/2020-11-02-NodeJS%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7nvm%E4%BD%BF%E7%94%A8/"/>
    <id>https://jueee.github.io/2020/11/2020-11-02-NodeJS%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7nvm%E4%BD%BF%E7%94%A8/</id>
    <published>2020-11-02T00:00:00.000Z</published>
    <updated>2020-11-03T08:58:41.172Z</updated>
    
    <content type="html"><![CDATA[<h3 id="nvm-介绍"><a href="#nvm-介绍" class="headerlink" title="nvm 介绍"></a>nvm 介绍</h3><p><code>nvm</code> 是一个 node 的版本管理工具，通俗来讲就是多个项目开发的时候，可能不是用的同一个版本的 <code>NodeJS</code> 开发的，这个时候我们进行二次开发调试的时候，就需要使用不同 <code>NodeJS</code> 的版本来进行测试，为了方便版本之间的切换，就需要使用的 <code>nvm</code> 来操作。</p><ul><li>GitHub：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2NvcmV5YnV0bGVyL252bS13aW5kb3dz">https://github.com/coreybutler/nvm-windows<i class="fa fa-external-link-alt"></i></span></li></ul><a id="more"></a><h3 id="nvm-安装"><a href="#nvm-安装" class="headerlink" title="nvm 安装"></a>nvm 安装</h3><p>GitHub 下载地址: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2NvcmV5YnV0bGVyL252bS13aW5kb3dzL3JlbGVhc2Vz">https://github.com/coreybutler/nvm-windows/releases<i class="fa fa-external-link-alt"></i></span></p><ul><li>nvm-noinstall.zip： 这个是绿色免安装版本，但是使用之前需要配置</li><li> nvm-setup.zip：这是一个安装包，下载之后点击安装，无需配置就可以使用，方便。</li><li>Source code (zip)：zip 压缩的源码</li><li> Sourc code (tar.gz)：tar.gz 的源码，一般用于 Linux 系统 </li></ul><pre class="language-bash" data-language="bash"><code class="language-bash">$ nvm version<span class="token number">1.1</span>.7</code></pre><h3 id="nvm-镜像修改"><a href="#nvm-镜像修改" class="headerlink" title="nvm 镜像修改"></a>nvm 镜像修改</h3><p>将 npm 镜像改为淘宝的镜像 <strong>(此步骤可选，非必要)</strong> 将镜像改为国内是为了，提高 npm 的下载速度，网速高有 vpn 者请忽略！</p><ol><li><p>找到安装目录下 <code>settings.txt</code> 文件并打开</p></li><li><p>新建行，加入以下代码 (切记：是新加 2 行，不要删除之前内容)</p><pre class="language-ruby" data-language="ruby"><code class="language-ruby">node_mirror<span class="token punctuation">:</span> https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>npm<span class="token punctuation">.</span>taobao<span class="token punctuation">.</span>org<span class="token operator">/</span>mirrors<span class="token regex">/node/</span> npm_mirror<span class="token punctuation">:</span> https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>npm<span class="token punctuation">.</span>taobao<span class="token punctuation">.</span>org<span class="token operator">/</span>mirrors<span class="token regex">/npm/</span></code></pre></li></ol><h3 id="nvm-使用"><a href="#nvm-使用" class="headerlink" title="nvm 使用"></a>nvm 使用</h3><ul><li><p><code>nvm version</code> 可以简写为 nvm v：查看 <code>NVM</code> 版本</p></li><li><p><code>nvm list</code>：查看已经安装 <code>NodeJS</code> 版本</p></li><li><p><code>nvm list available</code>：显示可下载版本</p></li><li><p><code>nvm install 版本号</code>：安装指定的版本</p><p>示例: <code>nvm install 11.15.0</code></p><p>安装最新版：<code>nvm install latest</code></p></li><li><p><code>nvm use [version] [arch]</code> [arch] 可以指定 32/64 位：切换到指定版本</p><p>示例: <code>nvm use 11.15.0</code></p></li><li><p><code>nvm uninstall &lt;version&gt;</code>：卸载指定版本</p><p>示例: <code>nvm uninstall 11.15.0</code></p></li><li><p><code>nvm root [path]</code> ：设置各版本安装目录，如果未设置，将使用当前目录。</p></li><li><p><code>nvm on</code>： 启用 node.js 版本管理。</p></li><li><p><code>nvm off</code>： 禁用 node.js 版本管理 (不卸载任何东西)</p></li></ul><h3 id="解决示例"><a href="#解决示例" class="headerlink" title="解决示例"></a>解决示例</h3><p>element UI 命令 et -I 出现 primordials is not defined</p><blockquote><p>ReferenceError: primordials is not defined</p></blockquote><p>这个问题的主要原因是 node 的版本过高<br>需要使用 11.15.0 以下版本</p><p>问题的解决方案</p><ul><li>nvm 切换 node 版本</li><li>卸载 node 重新安装 11.15.0</li></ul><p>此时，可以通过 nvm 来解决。</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ nvm <span class="token function">install</span> <span class="token number">11.15</span>.0$ nvm use <span class="token number">11.15</span>.0$ node -vv11.15.0$ npx et -i</code></pre>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;nvm-介绍&quot;&gt;&lt;a href=&quot;#nvm-介绍&quot; class=&quot;headerlink&quot; title=&quot;nvm 介绍&quot;&gt;&lt;/a&gt;nvm 介绍&lt;/h3&gt;&lt;p&gt;&lt;code&gt;nvm&lt;/code&gt;是一个node的版本管理工具,通俗来讲就是多个项目开发的时候,可能不是用的同一个版本的&lt;code&gt;NodeJS&lt;/code&gt;开发的,这个时候我们进行二次开发调试的时候,就需要使用不同&lt;code&gt;NodeJS&lt;/code&gt;的版本来进行测试,为了方便版本之间的切换,就需要使用的&lt;code&gt;nvm&lt;/code&gt;来操作。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GitHub：&lt;a href=&quot;https://github.com/coreybutler/nvm-windows&quot;&gt;https://github.com/coreybutler/nvm-windows&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="软件" scheme="https://jueee.github.io/categories/%E8%BD%AF%E4%BB%B6/"/>
    
    <category term="Windows" scheme="https://jueee.github.io/categories/%E8%BD%AF%E4%BB%B6/Windows/"/>
    
    <category term="Node.js" scheme="https://jueee.github.io/categories/Node-js/"/>
    
    
    <category term="软件" scheme="https://jueee.github.io/tags/%E8%BD%AF%E4%BB%B6/"/>
    
    <category term="Node.js" scheme="https://jueee.github.io/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>跨平台桌面应用开发工具 Electron 使用入门</title>
    <link href="https://jueee.github.io/2020/11/2020-11-02-%E8%B7%A8%E5%B9%B3%E5%8F%B0%E6%A1%8C%E9%9D%A2%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7Electron%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8/"/>
    <id>https://jueee.github.io/2020/11/2020-11-02-%E8%B7%A8%E5%B9%B3%E5%8F%B0%E6%A1%8C%E9%9D%A2%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7Electron%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8/</id>
    <published>2020-11-02T00:00:00.000Z</published>
    <updated>2020-11-03T08:58:41.181Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Electron介绍"><a href="#Electron介绍" class="headerlink" title="Electron介绍"></a>Electron 介绍</h3><p>Electron 提供了丰富的本地（操作系统）的 API，使你能够使用纯 JavaScript 来创建桌面应用程序。</p><p>与其它各种的 Node.js 运行时不同的是 Electron 专注于桌面应用程序而不是 Web 服务器。</p><ul><li>Electron 官网：<span class="exturl" data-url="aHR0cHM6Ly93d3cuZWxlY3Ryb25qcy5vcmcv">https://www.electronjs.org/<i class="fa fa-external-link-alt"></i></span></li><li>GitHub：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2VsZWN0cm9uL2VsZWN0cm9u">https://github.com/electron/electron<i class="fa fa-external-link-alt"></i></span></li><li>中文文档：<span class="exturl" data-url="aHR0cHM6Ly93d3cudzNjc2Nob29sLmNuL2VsZWN0cm9ubWFudWFsLw==">https://www.w3cschool.cn/electronmanual/<i class="fa fa-external-link-alt"></i></span></li></ul><a id="more"></a><h3 id="Electron-安装"><a href="#Electron-安装" class="headerlink" title="Electron 安装"></a>Electron 安装</h3><h4 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装 Node.js"></a>安装 Node.js</h4><p>安装 Electron 首先要确保安装 <span class="exturl" data-url="aHR0cHM6Ly9ub2RlanMub3JnL2VuL2Rvd25sb2FkLw==">Node.js<i class="fa fa-external-link-alt"></i></span>。</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ node -vv12.18.3$ <span class="token function">npm</span> -v<span class="token number">6.14</span>.6</code></pre><h4 id="安装-Electron"><a href="#安装-Electron" class="headerlink" title="安装 Electron"></a>安装 Electron</h4><p>创建文件夹，并安装：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> my-electron-app <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> my-electron-app<span class="token function">npm</span> init -y<span class="token function">npm</span> i --save-dev electron</code></pre><h3 id="创建应用程序"><a href="#创建应用程序" class="headerlink" title="创建应用程序"></a>创建应用程序</h3><p>一个 Electron 应用的目录结构如下：</p><pre class="language-none"><code class="language-none">your-app/├── package.json├── main.js└── index.html</code></pre><h4 id="main-js"><a href="#main-js" class="headerlink" title="main.js"></a>main.js</h4><p>主脚本指定 <code>main.js</code> 将运行 Main 进程的 Electron 应用程序（在本例中为文件）的入口点。</p><p>通常，在 Main 进程中运行的脚本控制应用程序的生命周期，显示图形用户界面及其元素，执行本机操作系统交互并在网页内创建 Renderer 进程。</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token punctuation">{</span> app<span class="token punctuation">,</span> BrowserWindow <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'electron'</span><span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">createWindow</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> win <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BrowserWindow</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    width<span class="token operator">:</span> <span class="token number">800</span><span class="token punctuation">,</span>    height<span class="token operator">:</span> <span class="token number">600</span><span class="token punctuation">,</span>    webPreferences<span class="token operator">:</span> <span class="token punctuation">{</span>      nodeIntegration<span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  win<span class="token punctuation">.</span><span class="token function">loadFile</span><span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">)</span>  win<span class="token punctuation">.</span>webContents<span class="token punctuation">.</span><span class="token function">openDevTools</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>app<span class="token punctuation">.</span><span class="token function">whenReady</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>createWindow<span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'window-all-closed'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>platform <span class="token operator">!==</span> <span class="token string">'darwin'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    app<span class="token punctuation">.</span><span class="token function">quit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'activate'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>BrowserWindow<span class="token punctuation">.</span><span class="token function">getAllWindows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">createWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><ul><li>第 1 行：首先，导入包的 <code>app</code> 和 <code>BrowserWindow</code> 模块，<code>electron</code> 以便能够管理应用程序的生命周期事件，以及创建和控制浏览器窗口。</li><li>第 3 行：此后，您定义一个函数，该函数创建一个启用了节点集成的<span class="exturl" data-url="aHR0cHM6Ly93d3cuZWxlY3Ryb25qcy5vcmcvZG9jcy9hcGkvYnJvd3Nlci13aW5kb3cjbmV3LWJyb3dzZXJ3aW5kb3dvcHRpb25z">新浏览器窗口<i class="fa fa-external-link-alt"></i></span>，将 <code>index.html</code> 文件加载到该窗口中（第 12 行，我们将在后面讨论文件）并打开 Developer Tools（第 13 行）。</li><li>第 16 行：<code>createWindow</code> 在<span class="exturl" data-url="aHR0cHM6Ly93d3cuZWxlY3Ryb25qcy5vcmcvZG9jcy9hcGkvYXBwI2FwcHdoZW5yZWFkeQ==">初始化<i class="fa fa-external-link-alt"></i></span>Electron 应用程序后，通过调用函数来创建新的浏览器窗口。</li><li>第 18 行：您添加了一个新的侦听器，当它不再有打开的窗口时，它会尝试退出该应用程序。由于操作系统的<span class="exturl" data-url="aHR0cHM6Ly9zdXBwb3J0LmFwcGxlLmNvbS9lbi1jYS9ndWlkZS9tYWMtaGVscC9tY2hscDI0NjkvbWFj">窗口管理行为，<i class="fa fa-external-link-alt"></i></span>该侦听器在 macOS 上是禁止操作的。</li><li>第 24 行：您添加了一个新的侦听器，该侦听器仅在应用程序被激活后没有可见窗口时才创建新的浏览器窗口。例如，在第一次启动应用程序后，或重新启动已经运行的应用程序。</li></ul><h4 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h4><p>初始化应用程序后，这就是您要显示的网页。该网页代表渲染器过程。您可以创建多个浏览器窗口，其中每个窗口使用其自己的独立渲染器。可以选择通过 <code>nodeIntegration</code> 首选项为每个窗口授予对 Node.js API 的完全访问权限。</p><p>该 <code>index.html</code> 页面如下所示：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Hello World!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Content-Security-Policy<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>script-src <span class="token punctuation">'</span>self<span class="token punctuation">'</span> <span class="token punctuation">'</span>unsafe-inline<span class="token punctuation">'</span>;<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>Hello World!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>    We are using node <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>versions<span class="token punctuation">.</span>node<span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>,    Chrome <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>versions<span class="token punctuation">.</span>chrome<span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>,    and Electron <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>versions<span class="token punctuation">.</span>electron<span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span></code></pre><h4 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h4><p>Electron 应用程序使用 <code>package.json</code> 文件作为主要入口点（与任何其他 Node.js 应用程序一样）。</p><p>应用程序的主要脚本是 <code>main.js</code>，因此请相应地修改 <code>package.json</code> 文件：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"electrontest"</span><span class="token punctuation">,</span>  <span class="token property">"main"</span><span class="token operator">:</span> <span class="token string">"main.js"</span><span class="token punctuation">,</span>  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"start"</span><span class="token operator">:</span> <span class="token string">"electron ."</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  ...<span class="token punctuation">}</span></code></pre><h4 id="运行应用程序"><a href="#运行应用程序" class="headerlink" title="运行应用程序"></a>运行应用程序</h4><pre class="language-none"><code class="language-none">npm start</code></pre><p>效果如下：</p><p><img src="/images/2020/11/image-20201102144240472.png" alt="image-20201102144240472" loading="lazy"></p><h3 id="打包应用程序"><a href="#打包应用程序" class="headerlink" title="打包应用程序"></a>打包应用程序</h3><h4 id="安装打包软件"><a href="#安装打包软件" class="headerlink" title="安装打包软件"></a>安装打包软件</h4><p><strong>全局安装</strong>打包神器</p><pre class="language-none"><code class="language-none">cnpm install electron-packager -g</code></pre><h4 id="打包应用程序-1"><a href="#打包应用程序-1" class="headerlink" title="打包应用程序"></a>打包应用程序</h4><p>在项目文件夹下面，也就是根目录下面打开 DOS 执行打包命令：</p><pre class="language-none"><code class="language-none">electron-packager . HelloWorld --platform=win32 --arch=x64 --icon=computer.ico --out=./out --asar --app-version=0.0.1 --overwrite --ignore=node_modules --electron-version 5.0.0</code></pre><p>各个参数介绍：</p><ul><li>HelloWorld ：你将要生成的 exe 文件的名称</li><li> --platform=win32：确定了你要构建哪个平台的应用，可取的值有 darwin, linux, mas, win32</li><li>--arch=x64：决定了使用 x86 还是 x64 还是两个架构都用</li><li> --icon=computer.ico：自定义设置应用图标</li><li> --out=./out：指定打包文件输出的文件夹位置，当前指定的为项目目录下的 out 文件夹</li><li> --asar：该参数可以不加，如果加上，打包之后应用的源码会以.asar 格式存在，否则会以文件夹形式存在</li><li> --app-version=0.0.1：生成应用的版本号</li><li> --overwrite：覆盖原有的 build, 让新生成的包覆盖原来的包</li><li> --ignore=node_modules：如果加上该参数，项目里 node_modules 模块不会被打包进去</li><li> --electron-version 5.0.0：指定当前要构建的 electron 的版本，需要和当前的版本一致，具体可以在 package.json 文件中查看，可以不加该参数，如果不一致，会自动下载</li></ul><h4 id="package-json设置打包"><a href="#package-json设置打包" class="headerlink" title="package.json设置打包"></a>package.json 设置打包</h4><p>建议将打包的命令设置在 <code>package.json</code> 的<code>script</code>中，设置如下:</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token property">"package"</span><span class="token operator">:</span><span class="token string">"electron-packager . HelloWorld --platform=win32 --arch=x64 --icon=computer.ico --out=./out --asar --app-version=0.0.1 --overwrite --ignore=node_modules"</span>  <span class="token punctuation">}</span></code></pre><p>然后在项目文件夹 DOS 窗口下执行命令：</p><pre class="language-none"><code class="language-none">npm run package</code></pre><p>打包效果如下图所示：</p><p><img src="/images/2020/11/image-20201102145110935.png" alt="image-20201102145110935" loading="lazy"></p><p>双击 <code>electrontest.exe</code> 即可运行。</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuZWxlY3Ryb25qcy5vcmcvZG9jcy90dXRvcmlhbC9xdWljay1zdGFydA==">https://www.electronjs.org/docs/tutorial/quick-start<i class="fa fa-external-link-alt"></i></span></li></ul>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;Electron介绍&quot;&gt;&lt;a href=&quot;#Electron介绍&quot; class=&quot;headerlink&quot; title=&quot;Electron介绍&quot;&gt;&lt;/a&gt;Electron介绍&lt;/h3&gt;&lt;p&gt;Electron提供了丰富的本地（操作系统）的API，使你能够使用纯JavaScript来创建桌面应用程序。&lt;/p&gt;
&lt;p&gt;与其它各种的Node.js运行时不同的是Electron专注于桌面应用程序而不是Web服务器。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Electron 官网：&lt;a href=&quot;https://www.electronjs.org/&quot;&gt;https://www.electronjs.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;GitHub：&lt;a href=&quot;https://github.com/electron/electron&quot;&gt;https://github.com/electron/electron&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;中文文档：&lt;a href=&quot;https://www.w3cschool.cn/electronmanual/&quot;&gt;https://www.w3cschool.cn/electronmanual/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="软件" scheme="https://jueee.github.io/categories/%E8%BD%AF%E4%BB%B6/"/>
    
    <category term="Windows" scheme="https://jueee.github.io/categories/%E8%BD%AF%E4%BB%B6/Windows/"/>
    
    
    <category term="软件" scheme="https://jueee.github.io/tags/%E8%BD%AF%E4%BB%B6/"/>
    
    <category term="Windows" scheme="https://jueee.github.io/tags/Windows/"/>
    
    <category term="Electron" scheme="https://jueee.github.io/tags/Electron/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot+Vue 前后端分离开发实例</title>
    <link href="https://jueee.github.io/2020/11/2020-11-01-Spring%20Boot+Vue%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E5%BC%80%E5%8F%91%E5%AE%9E%E4%BE%8B/"/>
    <id>https://jueee.github.io/2020/11/2020-11-01-Spring%20Boot+Vue%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E5%BC%80%E5%8F%91%E5%AE%9E%E4%BE%8B/</id>
    <published>2020-11-01T00:00:00.000Z</published>
    <updated>2020-11-03T08:58:41.159Z</updated>
    
    <content type="html"><![CDATA[<h3 id="项目说明"><a href="#项目说明" class="headerlink" title="项目说明"></a>项目说明</h3><p>本项目基于 SpringBoot 和 Vue，搭建一个前后端分离项目的 demo。</p><p>主要效果是通过前后端分离，将 MySQL 数据库中的数据，展示显示在页面上。</p><p>基础依赖：</p><ul><li>数据库存储：MySQL</li><li> 前端项目：Vue</li><li> 后端项目：springboot</li></ul><a id="more"></a><h3 id="创建-SpringBoot-后端项目"><a href="#创建-SpringBoot-后端项目" class="headerlink" title="创建 SpringBoot 后端项目"></a>创建 SpringBoot 后端项目</h3><p>使用 idea 的 Spring Assistant 插件 创建项目：</p><ul><li>Developer Tools：Lombok</li><li>Web：Spring Web</li><li>SQL：Spring Data JPA、MySQL Driver</li></ul><h3 id="创建-vue-前端项目"><a href="#创建-vue-前端项目" class="headerlink" title="创建 vue 前端项目"></a>创建 vue 前端项目</h3><p>创建项目</p><pre class="language-none"><code class="language-none">vue init webpack-simple booktest</code></pre><p>运行项目</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> booktestcnpm <span class="token function">install</span> vue -gcnpm run dev</code></pre><h3 id="编写-SpringBoot-后端接口"><a href="#编写-SpringBoot-后端接口" class="headerlink" title="编写 SpringBoot 后端接口"></a>编写 SpringBoot 后端接口</h3><h4 id="代码文件"><a href="#代码文件" class="headerlink" title="代码文件"></a>代码文件</h4><p>配置文件</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/vuedb<span class="token punctuation">?</span>useUnicode=true<span class="token important">&amp;characterEncoding=UTF-8&amp;serverTimezone=Asia/Shanghai</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> jue    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver  <span class="token key atrule">jpa</span><span class="token punctuation">:</span>    <span class="token key atrule">show-sql</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 日志打印 SQL</span>    <span class="token key atrule">properties</span><span class="token punctuation">:</span>      <span class="token key atrule">hibernate</span><span class="token punctuation">:</span>        <span class="token key atrule">format_sql</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 格式化日志 SQL</span><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8181</span></code></pre><p>Bean</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Entity</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Book</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Id</span>    <span class="token annotation punctuation">@GeneratedValue</span><span class="token punctuation">(</span>strategy <span class="token operator">=</span> <span class="token class-name">GenerationType</span><span class="token punctuation">.</span>IDENTITY<span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> author<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>DAO</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BookDAO</span> <span class="token keyword">extends</span> <span class="token class-name">JpaRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>Controller</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/book"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BookController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">BookDAO</span> bookRepository<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/books"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">&gt;</span></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> bookRepository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BookControllerTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">BookDAO</span> repository<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">books</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">&gt;</span></span> bookList <span class="token operator">=</span> repository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bookList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>执行打印结果：</p><blockquote><p>[Book (id=1, name = 解忧杂货店，author = 东野圭吾), Book (id=2, name = 追风筝的人，author = 卡勒德・胡赛尼)]</p></blockquote><h4 id="接口验证"><a href="#接口验证" class="headerlink" title="接口验证"></a>接口验证</h4><p>访问接口：<span class="exturl" data-url="aHR0cDovL2xvY2FsaG9zdDo4MTgxL2Jvb2svYm9va3M=">http://localhost:8181/book/books<i class="fa fa-external-link-alt"></i></span></p><p><img src="/images/2020/11/image-20201102103119200.png" alt="image-20201102103119200" loading="lazy"></p><h3 id="编写-vue-前端项目"><a href="#编写-vue-前端项目" class="headerlink" title="编写 vue 前端项目"></a>编写 vue 前端项目</h3><h4 id="代码文件-1"><a href="#代码文件-1" class="headerlink" title="代码文件"></a>代码文件</h4><p>修改 App.vue：</p><pre class="language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div id="app"&gt;    &lt;table&gt;      &lt;tr&gt;        &lt;td&gt;编号&lt;/td&gt;        &lt;td&gt;书名&lt;/td&gt;        &lt;td&gt;作者&lt;/td&gt;      &lt;/tr&gt;      &lt;tr v-for="item in books"&gt;        &lt;td&gt;{{item.id}}&lt;/td&gt;        &lt;td&gt;{{item.name}}&lt;/td&gt;        &lt;td&gt;{{item.author}}&lt;/td&gt;      &lt;/tr&gt;    &lt;/table&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default {  name: 'app',  data () {    return {      books: [        {          id:1,          name:"test1",          author:"author1"        },        {          id:2,          name:"test2",          author:"author2"        },        {          id:3,          name:"test3",          author:"author3"        }      ]    }  }}&lt;/script&gt;</code></pre><h4 id="访问验证"><a href="#访问验证" class="headerlink" title="访问验证"></a>访问验证</h4><p>访问地址：<span class="exturl" data-url="aHR0cDovL2xvY2FsaG9zdDo4MDgwLw==">http://localhost:8080/<i class="fa fa-external-link-alt"></i></span></p><p>结果如下：</p><p><img src="/images/2020/11/image-20201102104348239.png" alt="image-20201102104348239" loading="lazy"></p><h3 id="前后端数据同步"><a href="#前后端数据同步" class="headerlink" title="前后端数据同步"></a>前后端数据同步</h3><h4 id="添加-axios"><a href="#添加-axios" class="headerlink" title="添加 axios"></a>添加 axios</h4><p>安装 axios</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> axios --save</code></pre><p>在 main.js 配置</p><pre class="language-none"><code class="language-none">import axios from 'axios'Vue.prototype.$axios = axios</code></pre><h4 id="修改-App-vue"><a href="#修改-App-vue" class="headerlink" title="修改  App.vue"></a>修改  App.vue</h4><pre class="language-vue" data-language="vue"><code class="language-vue">&lt;script&gt;export default {  name: 'app',  data () {    return ...  },  created(){    this.$axios.get('http://localhost:8181/book/books').then(function(resp){      console.log(resp)    })  }}&lt;/script&gt;</code></pre><p>此时访问：<span class="exturl" data-url="aHR0cDovL2xvY2FsaG9zdDo4MDgwLw==">http://localhost:8080/<i class="fa fa-external-link-alt"></i></span>，前端报错：</p><blockquote><p>Access to XMLHttpRequest at '<span class="exturl" data-url="aHR0cDovL2xvY2FsaG9zdDo4MTgxL2Jvb2svYm9va3MmIzM5Ow==">http://localhost:8181/book/books'<i class="fa fa-external-link-alt"></i></span> from origin '<span class="exturl" data-url="aHR0cDovL2xvY2FsaG9zdDo4MDgwJiMzOTs=">http://localhost:8080'<i class="fa fa-external-link-alt"></i></span> has been blocked by CORS policy: No 'Access-Control-Allow-Origin' header is present on the requested resource.</p></blockquote><p>这是由于 <strong>跨域问题</strong></p><p>什么是跨域？<br>当一个请求 url 的协议、域名、端口三者之间任意一个与当前页面 url 不同即为跨域！</p><h4 id="解决跨域问题"><a href="#解决跨域问题" class="headerlink" title="解决跨域问题"></a>解决跨域问题</h4><p>后端新增 Java 类并重新启动：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">CorsRegistry</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">WebMvcConfigurer</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CrosConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addCorsMappings</span><span class="token punctuation">(</span><span class="token class-name">CorsRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        registry<span class="token punctuation">.</span><span class="token function">addMapping</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">allowedOrigins</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">allowedMethods</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span> <span class="token string">"HEAD"</span><span class="token punctuation">,</span> <span class="token string">"POST"</span><span class="token punctuation">,</span> <span class="token string">"PUT"</span><span class="token punctuation">,</span> <span class="token string">"DELETE"</span><span class="token punctuation">,</span> <span class="token string">"OPTIONS"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">allowCredentials</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">maxAge</span><span class="token punctuation">(</span><span class="token number">3600</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">allowedHeaders</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>此时，跨域问题解决。</p><p>再次访问：<span class="exturl" data-url="aHR0cDovL2xvY2FsaG9zdDo4MDgwLw==">http://localhost:8080/<i class="fa fa-external-link-alt"></i></span>，前端打印如下所示：</p><p><img src="/images/2020/11/image-20201102110008781.png" alt="image-20201102110008781" loading="lazy"></p><h4 id="展示后端数据"><a href="#展示后端数据" class="headerlink" title="展示后端数据"></a>展示后端数据</h4><p>再次修改  App.vue</p><pre class="language-vue" data-language="vue"><code class="language-vue">created(){  var _this = this  this.$axios.get('http://localhost:8181/book/books/').then(function(resp){    _this.books=resp.data  })}</code></pre><p>再次访问：<span class="exturl" data-url="aHR0cDovL2xvY2FsaG9zdDo4MDgwLw==">http://localhost:8080/<i class="fa fa-external-link-alt"></i></span>，显示如下：</p><p><img src="/images/2020/11/image-20201102111045453.png" alt="image-20201102111045453" loading="lazy"></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;项目说明&quot;&gt;&lt;a href=&quot;#项目说明&quot; class=&quot;headerlink&quot; title=&quot;项目说明&quot;&gt;&lt;/a&gt;项目说明&lt;/h3&gt;&lt;p&gt;本项目基于 SpringBoot 和 Vue，搭建一个前后端分离项目的 demo。&lt;/p&gt;
&lt;p&gt;主要效果是通过前后端分离，将MySQL数据库中的数据，展示显示在页面上。&lt;/p&gt;
&lt;p&gt;基础依赖：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据库存储：MySQL&lt;/li&gt;
&lt;li&gt;前端项目：Vue&lt;/li&gt;
&lt;li&gt;后端项目：springboot&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Java" scheme="https://jueee.github.io/categories/Java/"/>
    
    <category term="SpringBoot" scheme="https://jueee.github.io/categories/Java/SpringBoot/"/>
    
    <category term="Vue" scheme="https://jueee.github.io/categories/Vue/"/>
    
    <category term="Node.js" scheme="https://jueee.github.io/categories/Node-js/"/>
    
    
    <category term="Java" scheme="https://jueee.github.io/tags/Java/"/>
    
    <category term="Vue" scheme="https://jueee.github.io/tags/Vue/"/>
    
    <category term="SpringBoot" scheme="https://jueee.github.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>Windows 环境搭建 Vue 开发环境</title>
    <link href="https://jueee.github.io/2020/10/2020-10-31-Windows%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BAVue%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    <id>https://jueee.github.io/2020/10/2020-10-31-Windows%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BAVue%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</id>
    <published>2020-10-31T00:00:00.000Z</published>
    <updated>2020-11-02T10:55:28.162Z</updated>
    
    <content type="html"><![CDATA[<h3 id="关于-Vue"><a href="#关于-Vue" class="headerlink" title="关于 Vue"></a>关于 Vue</h3><p>VueJS 是一个开源的渐进式 JavaScript 框架，用于开发交互式 Web 界面。</p><p>它是用于简化 Web 开发的着名框架之一，VueJS 专注于视图层。它可以很容易地集成到大型项目前端开发没有任何问题。</p><ul><li>Vue 中文网：<span class="exturl" data-url="aHR0cHM6Ly9jbi52dWVqcy5vcmcv">https://cn.vuejs.org/<i class="fa fa-external-link-alt"></i></span></li></ul><a id="more"></a><h3 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装 node.js</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>下载地址：<span class="exturl" data-url="aHR0cHM6Ly9ub2RlanMub3JnL2VuL2Rvd25sb2FkLw==">https://nodejs.org/en/download/<i class="fa fa-external-link-alt"></i></span></p><p>安装完成：</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> -v<span class="token number">6.14</span>.6</code></pre><h4 id="设置路径"><a href="#设置路径" class="headerlink" title="设置路径"></a>设置路径</h4><p><strong>设置 nodejs prefix（全局）和 cache（缓存）路径</strong></p><ol><li><p>在 nodejs 安装路径下，新建 node_global 和 node_cache 两个文件夹</p><p><img src="/images/2020/10/1604114210487.png" alt="1604114210487" loading="lazy"></p></li><li><p>设置缓存文件夹</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token builtin class-name">set</span> cache <span class="token string">"D:<span class="token entity" title="\v">\v</span>ueProject<span class="token entity" title="\n">\n</span>odejs<span class="token entity" title="\n">\n</span>ode_cache"</span></code></pre><p>设置全局模块存放路径</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token builtin class-name">set</span> prefix <span class="token string">"D:<span class="token entity" title="\v">\v</span>ueProject<span class="token entity" title="\n">\n</span>odejs<span class="token entity" title="\n">\n</span>ode_global"</span></code></pre></li></ol><p>设置成功后，之后用命令 npm install XXX -g 安装以后模块就在 D:\vueProject\nodejs\node_global 里</p><h4 id="安装镜像"><a href="#安装镜像" class="headerlink" title="安装镜像"></a>安装镜像</h4><p>基于 Node.js 安装 cnpm（淘宝镜像）</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g cnpm --registry<span class="token operator">=</span>https://registry.npm.taobao.org</code></pre><p> 安装完成：</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ cnpm -vcnpm@6.1.1 <span class="token punctuation">(</span>C:<span class="token punctuation">\</span>Users<span class="token punctuation">\</span>hello<span class="token punctuation">\</span>AppData<span class="token punctuation">\</span>Roaming<span class="token punctuation">\</span>npm<span class="token punctuation">\</span>node_modules<span class="token punctuation">\</span>cnpm<span class="token punctuation">\</span>lib<span class="token punctuation">\</span>parse_argv.js<span class="token punctuation">)</span>npm@6.14.8 <span class="token punctuation">(</span>C:<span class="token punctuation">\</span>Users<span class="token punctuation">\</span>hello<span class="token punctuation">\</span>AppData<span class="token punctuation">\</span>Roaming<span class="token punctuation">\</span>npm<span class="token punctuation">\</span>node_modules<span class="token punctuation">\</span>cnpm<span class="token punctuation">\</span>node_modules<span class="token punctuation">\</span>npm<span class="token punctuation">\</span>lib<span class="token punctuation">\</span>npm.js<span class="token punctuation">)</span>node@12.18.3 <span class="token punctuation">(</span>C:<span class="token punctuation">\</span>Program Files<span class="token punctuation">\</span>nodejs<span class="token punctuation">\</span>node.exe<span class="token punctuation">)</span>npminstall@3.28.0 <span class="token punctuation">(</span>C:<span class="token punctuation">\</span>Users<span class="token punctuation">\</span>hello<span class="token punctuation">\</span>AppData<span class="token punctuation">\</span>Roaming<span class="token punctuation">\</span>npm<span class="token punctuation">\</span>node_modules<span class="token punctuation">\</span>cnpm<span class="token punctuation">\</span>node_modules<span class="token punctuation">\</span>npminstall<span class="token punctuation">\</span>lib<span class="token punctuation">\</span>index.js<span class="token punctuation">)</span><span class="token assign-left variable">prefix</span><span class="token operator">=</span>C:<span class="token punctuation">\</span>Users<span class="token punctuation">\</span>hello<span class="token punctuation">\</span>AppData<span class="token punctuation">\</span>Roaming<span class="token punctuation">\</span>npmwin32 x64 <span class="token number">10.0</span>.18363<span class="token assign-left variable">registry</span><span class="token operator">=</span>https://r.npm.taobao.org</code></pre><h4 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h4><p>设置环境变量可以使得住任意目录下都可以使用 cnpm、vue 等命令，而不需要输入全路径。</p><ol><li><p>鼠标右键 "此电脑"，选择 “属性” 菜单，在弹出的 “系统” 对话框中左侧选择 “高级系统设置”，弹出 “系统属性” 对话框。</p></li><li><p>修改系统变量 PATH</p><p><strong>增加</strong>：D:\vueProject\nodejs\node_global</p><p><strong>默认</strong>：C:\Users\hello\AppData\Roaming\npm</p></li><li><p>新增系统变量 NODE_PATH，为 nodejs 安装目录下的 node_modules 文件夹。</p><p>增加：C:\Program Files\nodejs\node_modules\</p></li></ol><h3 id="安装-vue"><a href="#安装-vue" class="headerlink" title="安装 vue"></a>安装 vue</h3><p>安装 vue</p><pre class="language-bash" data-language="bash"><code class="language-bash">cnpm <span class="token function">install</span> vue -g</code></pre><p>安装 vue 命令行工具</p><pre class="language-bash" data-language="bash"><code class="language-bash">cnpm <span class="token function">install</span> vue-cli -g</code></pre><p>验证安装：</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ vue -V<span class="token number">2.9</span>.6</code></pre><h3 id="创建新项目"><a href="#创建新项目" class="headerlink" title="创建新项目"></a>创建新项目</h3><h4 id="根据模版创建新项目"><a href="#根据模版创建新项目" class="headerlink" title="根据模版创建新项目"></a>根据模版创建新项目</h4><p>在当前目录下输入 “vue init webpack-simple 项目名称（使用英文）”。</p><pre class="language-bash" data-language="bash"><code class="language-bash">vue init webpack-simple mytest</code></pre><p><img src="/images/2020/10/1604115030876.png" alt="1604115030876" loading="lazy"></p><p>初始化完成后的项目目录结构如下：</p><p><img src="/images/2020/10/1604115059665.png" alt="1604115059665" loading="lazy"></p><h4 id="安装工程依赖模块"><a href="#安装工程依赖模块" class="headerlink" title="安装工程依赖模块"></a>安装工程依赖模块</h4><p>定位到 mytest 的工程目录下，安装该工程依赖的模块。</p><p>这些模块将被安装在：mytest\node_module 目录下，node_module 文件夹会被新建，而且根据 package.json 的配置下载该项目的 modules</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">cd</span> mytest$ cnpm <span class="token function">install</span></code></pre><h4 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h4><p>测试一下该项目是否能够正常工作，这种方式是用 nodejs 来启动。</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ cnpm run dev</code></pre><p>如下所示：</p><p><img src="/images/2020/10/1604115322707.png" alt="1604115322707" loading="lazy"></p><p>此时，访问 <span class="exturl" data-url="aHR0cDovL2xvY2FsaG9zdDo4MDgwLw==">http://localhost:8080/<i class="fa fa-external-link-alt"></i></span> ，项目正常运行。</p><p><img src="/images/2020/10/1604115281655.png" alt="1604115281655" loading="lazy"></p><h3 id="项目导入-idea"><a href="#项目导入-idea" class="headerlink" title="项目导入 idea"></a>项目导入 idea</h3><h4 id="idea-导入项目"><a href="#idea-导入项目" class="headerlink" title="idea 导入项目"></a>idea 导入项目</h4><p>NodeJS 插件需要 IntelliJ IDEA Ultimate，因为它依赖于仅在商业版中提供的 JavaScript 插件。</p><h5 id="官网下载Vue-js插件"><a href="#官网下载Vue-js插件" class="headerlink" title="官网下载Vue.js插件"></a>官网下载 Vue.js 插件</h5><p>下载链接：<span class="exturl" data-url="aHR0cHM6Ly9wbHVnaW5zLmpldGJyYWlucy5jb20vcGx1Z2luLzk0NDItdnVlLWpzL3ZlcnNpb25z">Vue.js - Plugins<i class="fa fa-external-link-alt"></i></span></p><ol><li><p>下载合适版本的插件。</p></li><li><p>安装插件 settings -&gt; plugins -&gt; install plugin from disk，然后选择下载的插件。</p><p><img src="/images/2020/10/1604120026356.png" alt="1604120026356" loading="lazy"></p></li><li><p>重启 IDEA</p></li><li><p>导入项目。</p></li></ol><p><img src="/images/2020/10/1604116285451.png" alt="1604116285451" loading="lazy"></p><h4 id="vscode-导入项目"><a href="#vscode-导入项目" class="headerlink" title="vscode 导入项目"></a>vscode 导入项目</h4><ol><li><p>先安装 <span class="exturl" data-url="aHR0cHM6Ly9tYXJrZXRwbGFjZS52aXN1YWxzdHVkaW8uY29tL2l0ZW1zP2l0ZW1OYW1lPW9jdHJlZi52ZXR1cg==">vetur 插件<i class="fa fa-external-link-alt"></i></span>。</p><p><img src="/images/2020/10/1604157179067.png" alt="1604157179067" loading="lazy"></p></li><li><p>导入项目</p></li><li><p>启动项目，终端运行 <code>npm run dev</code></p><p><img src="/images/2020/10/1604229209982.png" alt="1604229209982" loading="lazy"></p></li></ol>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;关于-Vue&quot;&gt;&lt;a href=&quot;#关于-Vue&quot; class=&quot;headerlink&quot; title=&quot;关于 Vue&quot;&gt;&lt;/a&gt;关于 Vue&lt;/h3&gt;&lt;p&gt;VueJS是一个开源的渐进式JavaScript框架，用于开发交互式Web界面。&lt;/p&gt;
&lt;p&gt;它是用于简化Web开发的着名框架之一，VueJS专注于视图层。它可以很容易地集成到大型项目前端开发没有任何问题。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Vue 中文网：&lt;a href=&quot;https://cn.vuejs.org/&quot;&gt;https://cn.vuejs.org/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="软件" scheme="https://jueee.github.io/categories/%E8%BD%AF%E4%BB%B6/"/>
    
    <category term="Windows" scheme="https://jueee.github.io/categories/%E8%BD%AF%E4%BB%B6/Windows/"/>
    
    <category term="Vue" scheme="https://jueee.github.io/categories/Vue/"/>
    
    
    <category term="软件" scheme="https://jueee.github.io/tags/%E8%BD%AF%E4%BB%B6/"/>
    
    <category term="Windows" scheme="https://jueee.github.io/tags/Windows/"/>
    
    <category term="Vue" scheme="https://jueee.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 运维工具 percona-toolkit 的使用</title>
    <link href="https://jueee.github.io/2020/10/2020-10-31-MySQL%E8%BF%90%E7%BB%B4%E5%B7%A5%E5%85%B7percona-toolkit%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://jueee.github.io/2020/10/2020-10-31-MySQL%E8%BF%90%E7%BB%B4%E5%B7%A5%E5%85%B7percona-toolkit%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2020-10-31T00:00:00.000Z</published>
    <updated>2020-11-02T06:15:13.276Z</updated>
    
    <content type="html"><![CDATA[<p>percona-toolkit 是一组高级命令行工具的集合，可以查看当前服务的摘要信息，磁盘检测，分析慢查询日志，查找重复索引，实现表同步等等。</p><p>官网：<span class="exturl" data-url="aHR0cHM6Ly93d3cucGVyY29uYS5jb20vc29mdHdhcmUvZGF0YWJhc2UtdG9vbHMvcGVyY29uYS10b29sa2l0">https://www.percona.com/software/database-tools/percona-toolkit<i class="fa fa-external-link-alt"></i></span></p><a id="more"></a><h3 id="安装-percona-toolkit"><a href="#安装-percona-toolkit" class="headerlink" title="安装 percona-toolkit"></a>安装 percona-toolkit</h3><h4 id="仓库安装"><a href="#仓库安装" class="headerlink" title="仓库安装"></a>仓库安装</h4><ul><li><p>Debian</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">apt-cache</span> search percona-toolkitpercona-toolkit - Advanced MySQL and system command-line tools$ <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> percona-toolkit</code></pre></li></ul><h4 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h4><p>访问 <span class="exturl" data-url="aHR0cHM6Ly93d3cucGVyY29uYS5jb20vZG93bmxvYWRzL3BlcmNvbmEtdG9vbGtpdC9MQVRFU1Qv">下载地址<i class="fa fa-external-link-alt"></i></span>，根据系统版本选择对应的版本进行下载。</p><ul><li><p>Debian</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> dpkg -i percona-toolkit_3.2.1-1.buster_amd64.deb</code></pre></li></ul><h3 id="pt-query-digest"><a href="#pt-query-digest" class="headerlink" title="pt-query-digest"></a>pt-query-digest</h3><p>pt-query-digest 主要用来分析 mysql 的慢日志，并格式化输出以便于查看和分析。</p><h4 id="报告分析"><a href="#报告分析" class="headerlink" title="报告分析"></a>报告分析</h4><ul><li><strong>总体统计结果</strong><ul><li> Overall：总共有多少条查询 </li><li>Time range：查询执行的时间范围 </li><li>unique：唯一查询数量，即对查询条件进行参数化以后，总共有多少个不同的查询 </li><li>total：总计 </li><li>min：最小 </li><li>max：最大 </li><li>avg：平均 95%：把所有值从小到大排列，位置位于 95% 的那个数，这个数一般最具有参考价值 </li><li>median：中位数，把所有值从小到大排列，位置位于中间那个数</li></ul></li><li><strong>查询分组统计结果</strong><ul><li> Rank：所有语句的排名，默认按查询时间降序排列，通过 --order-by 指定 </li><li>Query ID：语句的 ID，（去掉多余空格和文本字符，计算 hash 值） </li><li>Response：总的响应时间 </li><li>time：该查询在本次分析中总的时间占比 </li><li>calls：执行次数，即本次分析总共有多少条这种类型的查询语句 </li><li>R/Call：平均每次执行的响应时间 </li><li>V/M：响应时间 Variance-to-mean 的比率 </li><li>Item：查询对象</li></ul></li><li><strong>每一种查询的详细统计结果</strong><ul><li> ID：查询的 ID 号，和上图的 Query ID 对应 </li><li>Databases：数据库名 </li><li>Users：各个用户执行的次数（占比） </li><li>Query_time distribution ：查询时间分布，长短体现区间占比。</li><li>Tables：查询中涉及到的表 </li><li>Explain：SQL 语句。</li></ul></li></ul><h4 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h4><ul><li><p>直接分析慢查询文件：</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ pt-query-digest mysql-bin.288298.log <span class="token operator">&gt;</span> report1.log</code></pre></li><li><p>解析 MySQL 的 Binlog 日志：</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ mysqlbinlog mysql-bin88.0001 <span class="token operator">&gt;</span> mysql-bin88.0001.sql$ pt-query-digest mysql-bin.288298.log <span class="token operator">&gt;</span> report1.log</code></pre></li></ul><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vamF2YXN0YWNrL3AvMTI2MDYxMDYuaHRtbA==">https://www.cnblogs.com/javastack/p/12606106.html<i class="fa fa-external-link-alt"></i></span></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;percona-toolkit 是一组高级命令行工具的集合，可以查看当前服务的摘要信息，磁盘检测，分析慢查询日志，查找重复索引，实现表同步等等。&lt;/p&gt;
&lt;p&gt;官网：&lt;a href=&quot;https://www.percona.com/software/database-tools/percona-toolkit&quot;&gt;https://www.percona.com/software/database-tools/percona-toolkit&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="MySQL" scheme="https://jueee.github.io/categories/MySQL/"/>
    
    
    <category term="MySQL" scheme="https://jueee.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot 集成 Druid</title>
    <link href="https://jueee.github.io/2020/10/2020-10-30-SpringBoot%E9%9B%86%E6%88%90Druid/"/>
    <id>https://jueee.github.io/2020/10/2020-10-30-SpringBoot%E9%9B%86%E6%88%90Druid/</id>
    <published>2020-10-30T00:00:00.000Z</published>
    <updated>2020-11-02T03:11:34.593Z</updated>
    
    <content type="html"><![CDATA[<p>Springboot 集成 Druid 有两种方案：</p><ul><li>在 POM 中直接配置 druid-spring-boot-starter，不用写任何代码。</li><li>配置 druid，写几行代码，可以加入。</li></ul><a id="more"></a><h3 id="使用druid-spring-boot-starter"><a href="#使用druid-spring-boot-starter" class="headerlink" title="使用druid-spring-boot-starter"></a>使用 druid-spring-boot-starter</h3><p>Druid Spring Boot Starter 用于帮助你在 Spring Boot 项目中轻松集成 Druid 数据库连接池和监控。</p><ul><li>GitHub：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvZHJ1aWQvdHJlZS9tYXN0ZXIvZHJ1aWQtc3ByaW5nLWJvb3Qtc3RhcnRlcg==">https://github.com/alibaba/druid/tree/master/druid-spring-boot-starter<i class="fa fa-external-link-alt"></i></span></li></ul><h4 id="引入-Jar"><a href="#引入-Jar" class="headerlink" title="引入 Jar"></a>引入 Jar</h4><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>druid-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.2.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></code></pre><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><p>配置文件 application.properties：</p><pre class="language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">spring.datasource.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://localhost:3306/test?serverTimezone=UTC</span><span class="token attr-name">spring.datasource.username</span><span class="token punctuation">=</span><span class="token attr-value">xxx</span><span class="token attr-name">spring.datasource.password</span><span class="token punctuation">=</span><span class="token attr-value">xxx</span><span class="token attr-name">spring.datasource.driverClassName</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.cj.jdbc.Driver</span><span class="token comment">#config druid</span><span class="token comment">#连接池的设置</span><span class="token comment">#初始化时建立物理连接的个数</span><span class="token attr-name">spring.datasource.druid.initial-size</span><span class="token punctuation">=</span><span class="token attr-value">5</span><span class="token comment">#最小连接池数量</span><span class="token attr-name">spring.datasource.druid.min-idle</span><span class="token punctuation">=</span><span class="token attr-value">5</span><span class="token comment">#最大连接池数量 maxIdle已经不再使用</span><span class="token attr-name">spring.datasource.druid.max-active</span><span class="token punctuation">=</span><span class="token attr-value">20</span><span class="token comment">#获取连接时最大等待时间，单位毫秒</span><span class="token attr-name">spring.datasource.druid.max-wait</span><span class="token punctuation">=</span><span class="token attr-value">60000</span><span class="token comment">#申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。</span><span class="token attr-name">spring.datasource.druid.test-while-idle</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token comment">#既作为检测的间隔时间又作为testWhileIdel执行的依据</span><span class="token attr-name">spring.datasource.druid.time-between-eviction-runs-millis</span><span class="token punctuation">=</span><span class="token attr-value">60000</span><span class="token comment">#销毁线程时检测当前连接的最后活动时间和当前时间差大于该值时，关闭当前连接</span><span class="token attr-name">spring.datasource.druid.min-evictable-idle-time-millis</span><span class="token punctuation">=</span><span class="token attr-value">30000</span><span class="token comment">#用来检测连接是否有效的sql 必须是一个查询语句</span><span class="token comment">#mysql中为 select 'x'</span><span class="token comment">#oracle中为 select 1 from dual</span><span class="token attr-name">spring.datasource.druid.validation-query</span><span class="token punctuation">=</span><span class="token attr-value">select 'x'</span><span class="token comment">#申请连接时会执行validationQuery检测连接是否有效,开启会降低性能,默认为true</span><span class="token attr-name">spring.datasource.druid.test-on-borrow</span><span class="token punctuation">=</span><span class="token attr-value">false</span><span class="token comment">#归还连接时会执行validationQuery检测连接是否有效,开启会降低性能,默认为true</span><span class="token attr-name">spring.datasource.druid.test-on-return</span><span class="token punctuation">=</span><span class="token attr-value">false</span><span class="token comment">#当数据库抛出不可恢复的异常时,抛弃该连接</span><span class="token comment">#spring.datasource.druid.exception-sorter=true</span><span class="token comment">#是否缓存preparedStatement,mysql5.5+建议开启</span><span class="token comment">#spring.datasource.druid.pool-prepared-statements=true</span><span class="token comment">#当值大于0时poolPreparedStatements会自动修改为true</span><span class="token attr-name">spring.datasource.druid.max-pool-prepared-statement-per-connection-size</span><span class="token punctuation">=</span><span class="token attr-value">20</span><span class="token comment">#配置扩展插件</span><span class="token attr-name">spring.datasource.druid.filters</span><span class="token punctuation">=</span><span class="token attr-value">stat,wall</span><span class="token comment">#通过connectProperties属性来打开mergeSql功能；慢SQL记录</span><span class="token attr-name">spring.datasource.druid.connection-properties</span><span class="token punctuation">=</span><span class="token attr-value">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</span><span class="token comment">#合并多个DruidDataSource的监控数据</span><span class="token attr-name">spring.datasource.druid.use-global-data-source-stat</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token comment"># 加入如下配置，实现验证登录</span><span class="token comment">## Druid WebStatFilter配置，说明请参考Druid Wiki，配置_配置WebStatFilter</span><span class="token attr-name">spring.datasource.druid.web-stat-filter.enabled</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token attr-name">spring.datasource.druid.web-stat-filter.url-pattern</span><span class="token punctuation">=</span><span class="token attr-value">/*</span><span class="token attr-name">spring.datasource.druid.web-stat-filter.exclusions</span><span class="token punctuation">=</span><span class="token attr-value">*.gif,*.png,*.jpg,*.html,*.js,*.css,*.ico,/druid/*</span><span class="token comment"># Druid StatViewServlet配置，说明请参考Druid Wiki，配置_StatViewServlet配置</span><span class="token attr-name">spring.datasource.druid.stat-view-servlet.enabled</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token attr-name">spring.datasource.druid.stat-view-servlet.url-pattern</span><span class="token punctuation">=</span><span class="token attr-value">/druid/*</span><span class="token attr-name">spring.datasource.druid.stat-view-servlet.reset-enable</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token comment">#设置访问druid监控页的账号和密码,默认没有</span><span class="token attr-name">spring.datasource.druid.stat-view-servlet.login-username</span><span class="token punctuation">=</span><span class="token attr-value">admin</span><span class="token attr-name">spring.datasource.druid.stat-view-servlet.login-password</span><span class="token punctuation">=</span><span class="token attr-value">admin</span><span class="token attr-name">spring.datasource.druid.stat-view-servlet.allow</span><span class="token punctuation">=</span><span class="token attr-name">spring.datasource.druid.stat-view-servlet.deny</span><span class="token punctuation">=</span></code></pre><h4 id="访问-druid"><a href="#访问-druid" class="headerlink" title="访问 druid"></a>访问 druid</h4><p>输入：<span class="exturl" data-url="aHR0cDovL2xvY2FsaG9zdDo4MDgwL2RydWlkLw==">http://localhost:8080/druid/<i class="fa fa-external-link-alt"></i></span>，查看 Druid 监控面板。</p><p><img src="/images/2020/10/image-20201030161817190.png" alt="image-20201030161817190" loading="lazy"></p><h3 id="配置druid"><a href="#配置druid" class="headerlink" title="配置druid"></a>配置 druid</h3><h4 id="引入-Jar-1"><a href="#引入-Jar-1" class="headerlink" title="引入 Jar"></a>引入 Jar</h4><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.2.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></code></pre><h4 id="配置文件-1"><a href="#配置文件-1" class="headerlink" title="配置文件"></a>配置文件</h4><p>配置文件 application.properties：</p><pre class="language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">spring.datasource.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://localhost:3306/test?serverTimezone=UTC</span><span class="token attr-name">spring.datasource.username</span><span class="token punctuation">=</span><span class="token attr-value">xxx</span><span class="token attr-name">spring.datasource.password</span><span class="token punctuation">=</span><span class="token attr-value">xxx</span><span class="token attr-name">spring.datasource.driverClassName</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.cj.jdbc.Driver</span></code></pre><h4 id="配置-druid"><a href="#配置-druid" class="headerlink" title="配置 druid"></a>配置 druid</h4><p>配置 druid 使其配置的参数生效。</p><p>新建一个类：DruidConfig，注意包的引入：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>pool<span class="token punctuation">.</span></span><span class="token class-name">DruidDataSource</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>support<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">StatViewServlet</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>support<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">WebStatFilter</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>context<span class="token punctuation">.</span>properties<span class="token punctuation">.</span></span><span class="token class-name">ConfigurationProperties</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">FilterRegistrationBean</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletRegistrationBean</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">DataSource</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DruidConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.datasource"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">DataSource</span> <span class="token function">getDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DruidDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 配置Druid监控</span>    <span class="token comment">// 配置一个管理后台的Servlet</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">ServletRegistrationBean</span> <span class="token function">statViewServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">ServletRegistrationBean</span> bean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServletRegistrationBean</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StatViewServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"/druid/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> initParams<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        initParams<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"loginUsername"</span><span class="token punctuation">,</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        initParams<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"loginPassword"</span><span class="token punctuation">,</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        initParams<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"allow"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 默认就是允许所有访问</span>       <span class="token comment">// initParams.put("deny","127.0.0.1"); // 拒绝哪个网址访问，优先级大于allow</span>        bean<span class="token punctuation">.</span><span class="token function">setInitParameters</span><span class="token punctuation">(</span>initParams<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//2、配置一个web监控的filter</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">FilterRegistrationBean</span> <span class="token function">webStatFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">FilterRegistrationBean</span> bean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilterRegistrationBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bean<span class="token punctuation">.</span><span class="token function">setFilter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WebStatFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> initParams <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 配置不拦截哪些请求</span>        initParams<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"exclusions"</span><span class="token punctuation">,</span><span class="token string">"*.js,*.css,/druid/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bean<span class="token punctuation">.</span><span class="token function">setInitParameters</span><span class="token punctuation">(</span>initParams<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 配置拦截所有请求</span>        bean<span class="token punctuation">.</span><span class="token function">setUrlPatterns</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"/*"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span>  bean<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="访问-druid-1"><a href="#访问-druid-1" class="headerlink" title="访问 druid"></a>访问 druid</h4><p>输入：<span class="exturl" data-url="aHR0cDovL2xvY2FsaG9zdDo4MDgwL2RydWlkLw==">http://localhost:8080/druid/<i class="fa fa-external-link-alt"></i></span>，观察 Druid 监控面板。</p><p><img src="/images/2020/10/image-20201030161817190.png" alt="image-20201030161817190" loading="lazy"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Springboot 集成 Druid 有两种方案：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在 POM 中直接配置 druid-spring-boot-starter，不用写任何代码。&lt;/li&gt;
&lt;li&gt;配置 druid，写几行代码，可以加入。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Java" scheme="https://jueee.github.io/categories/Java/"/>
    
    <category term="JavaJar" scheme="https://jueee.github.io/categories/Java/JavaJar/"/>
    
    <category term="SpringBoot" scheme="https://jueee.github.io/categories/Java/SpringBoot/"/>
    
    
    <category term="Java" scheme="https://jueee.github.io/tags/Java/"/>
    
    <category term="JavaJar" scheme="https://jueee.github.io/tags/JavaJar/"/>
    
    <category term="Alibaba" scheme="https://jueee.github.io/tags/Alibaba/"/>
    
  </entry>
  
  <entry>
    <title>XML 操作类库 XStream 的基本使用</title>
    <link href="https://jueee.github.io/2020/10/2020-10-29-XML%E6%93%8D%E4%BD%9C%E7%B1%BB%E5%BA%93XStream%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>https://jueee.github.io/2020/10/2020-10-29-XML%E6%93%8D%E4%BD%9C%E7%B1%BB%E5%BA%93XStream%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</id>
    <published>2020-10-29T00:00:00.000Z</published>
    <updated>2020-10-30T01:34:02.996Z</updated>
    
    <content type="html"><![CDATA[<h3 id="XStream-介绍"><a href="#XStream-介绍" class="headerlink" title="XStream 介绍"></a>XStream 介绍</h3><p>XStream 是一个简单的基于 Java 库，Java 对象序列化到 XML，反之亦然 (即：可以轻易的将 Java 对象和 xml 文档相互转换)。</p><ul><li>官网说明：<span class="exturl" data-url="aHR0cDovL3gtc3RyZWFtLmdpdGh1Yi5pby8=">http://x-stream.github.io/<i class="fa fa-external-link-alt"></i></span></li><li>GitHub：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3gtc3RyZWFtL3hzdHJlYW0=">https://github.com/x-stream/xstream<i class="fa fa-external-link-alt"></i></span></li><li>JavaDoc：<span class="exturl" data-url="aHR0cDovL3gtc3RyZWFtLmdpdGh1Yi5pby9qYXZhZG9jL2luZGV4Lmh0bWw=">http://x-stream.github.io/javadoc/index.html<i class="fa fa-external-link-alt"></i></span></li></ul><a id="more"></a><h4 id="XStream-特点"><a href="#XStream-特点" class="headerlink" title="XStream 特点"></a>XStream 特点</h4><ul><li><strong>使用方便</strong> - XStream 的 API 提供了一个高层次外观，以简化常用的用例。</li><li><strong>无需创建映射</strong> - XStream 的 API 提供了默认的映射大部分对象序列化。</li><li><strong>性能</strong> - XStream 快速和低内存占用，适合于大对象图或系统。</li><li><strong>干净的 XML</strong> - XStream 创建一个干净和紧凑 XML 结果，这很容易阅读。</li><li><strong>不需要修改对象</strong> - XStream 可序列化的内部字段，如私有和最终字段，支持非公有制和内部类。默认构造函数不是强制性的要求。</li><li><strong>完整对象图支持</strong> - XStream 允许保持在对象模型中遇到的重复引用，并支持循环引用。</li><li><strong>可自定义的转换策略</strong> - 定制策略可以允许特定类型的定制被表示为 XML 的注册。</li><li><strong>安全框架</strong> - XStream 提供了一个公平控制有关解组的类型，以防止操纵输入安全问题。</li><li><strong>错误消息</strong> - 出现异常是由于格式不正确的 XML 时，XStream 抛出一个统一的例外，提供了详细的诊断，以解决这个问题。</li><li><strong>另一种输出格式</strong> - XStream 支持其它的输出格式，如 JSON。</li></ul><h4 id="XStream-引入"><a href="#XStream-引入" class="headerlink" title="XStream 引入"></a>XStream 引入</h4><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/com.thoughtworks.xstream/xstream --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.thoughtworks.xstream<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>xstream<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.4.13<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></code></pre><h3 id="XStream-基本使用"><a href="#XStream-基本使用" class="headerlink" title="XStream 基本使用"></a>XStream 基本使用</h3><h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><ol><li><p><strong>创建 XStream 对象</strong>：通过它传递一个 StaxDriver 创建 XStream 对象。</p><p>StaxDriver 使用 SAX 解析器 (可从 Java6)，一个快速的 XML 解析器。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">XStream</span> xstream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StaxDriver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p><strong>序列化对象到 XML</strong>：使用 toXML () 方法来获取对象的 XML 字符串表示。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> xml <span class="token operator">=</span> xstream<span class="token punctuation">.</span><span class="token function">toXML</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p><strong>反序列化 XML 获得对象</strong>：使用 fromXML () 方法来从 XML 对象。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Student</span> student1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">)</span>xstream<span class="token punctuation">.</span><span class="token function">fromXML</span><span class="token punctuation">(</span>xml<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ol><h4 id="对象-到-XML-的转换"><a href="#对象-到-XML-的转换" class="headerlink" title="对象 到 XML 的转换"></a>对象 到 XML 的转换</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">XStream</span> xstream1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StaxDriver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> xml <span class="token operator">=</span> xstream1<span class="token punctuation">.</span><span class="token function">toXML</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>xml<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">formatXml</span><span class="token punctuation">(</span>xml<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="XML-到-对象-的转换"><a href="#XML-到-对象-的转换" class="headerlink" title="XML 到 对象 的转换"></a>XML 到 对象 的转换</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">XStream</span> xstream2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Student</span> student1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">)</span> xstream2<span class="token punctuation">.</span><span class="token function">fromXML</span><span class="token punctuation">(</span>xml<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student1<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>此时，能够正常打印，但会提示异常：</p><blockquote><p>Security framework of XStream not explicitly initialized, using predefined black list on your own risk.</p></blockquote><p>解决方案有两种：</p><ol><li><p>限制为所需的最小权限：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">XStream</span> xstream2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">XStream</span><span class="token punctuation">.</span><span class="token function">setupDefaultSecurity</span><span class="token punctuation">(</span>xstream2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> classes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token class-name">Student</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>xstream2<span class="token punctuation">.</span><span class="token function">allowTypes</span><span class="token punctuation">(</span>classes<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Student</span> student1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">)</span> xstream2<span class="token punctuation">.</span><span class="token function">fromXML</span><span class="token punctuation">(</span>xml<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student1<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>消除所有限制：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">XStream</span> xstream3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xstream3<span class="token punctuation">.</span><span class="token function">addPermission</span><span class="token punctuation">(</span><span class="token class-name">AnyTypePermission</span><span class="token punctuation">.</span>ANY<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Student</span> student2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">)</span> xstream3<span class="token punctuation">.</span><span class="token function">fromXML</span><span class="token punctuation">(</span>xml<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student2<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ol><p>参考资料：<span class="exturl" data-url="aHR0cDovL3gtc3RyZWFtLmdpdGh1Yi5pby9zZWN1cml0eS5odG1s">http://x-stream.github.io/security.html<i class="fa fa-external-link-alt"></i></span></p><h4 id="格式化-XML-字符串"><a href="#格式化-XML-字符串" class="headerlink" title="格式化 XML 字符串"></a>格式化 XML 字符串</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">formatXml</span><span class="token punctuation">(</span><span class="token class-name">String</span> xml<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token class-name">Transformer</span> serializer <span class="token operator">=</span> <span class="token class-name">SAXTransformerFactory</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newTransformer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>serializer<span class="token punctuation">.</span><span class="token function">setOutputProperty</span><span class="token punctuation">(</span><span class="token class-name">OutputKeys</span><span class="token punctuation">.</span>INDENT<span class="token punctuation">,</span> <span class="token string">"yes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>serializer<span class="token punctuation">.</span><span class="token function">setOutputProperty</span><span class="token punctuation">(</span><span class="token string">"{http://xml.apache.org/xslt}indent-amount"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Source</span> xmlSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SAXSource</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputSource</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>xml<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">StreamResult</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StreamResult</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>serializer<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span>xmlSource<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">)</span> res<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> xml<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="XStream-混叠"><a href="#XStream-混叠" class="headerlink" title="XStream 混叠"></a>XStream 混叠</h3><p>混叠是一种技术来定制生成 XML 或者使用 XStream 特定的格式化 XML。</p><h4 id="类混叠"><a href="#类混叠" class="headerlink" title="类混叠"></a>类混叠</h4><p>类混叠是用来创建一个类的 XML 完全限定名称的别名。</p><pre class="language-java" data-language="java"><code class="language-java">xstream<span class="token punctuation">.</span><span class="token function">alias</span><span class="token punctuation">(</span><span class="token string">"student"</span><span class="token punctuation">,</span> <span class="token class-name">Student</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xstream<span class="token punctuation">.</span><span class="token function">alias</span><span class="token punctuation">(</span><span class="token string">"note"</span><span class="token punctuation">,</span> <span class="token class-name">Note</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="字段混叠"><a href="#字段混叠" class="headerlink" title="字段混叠"></a>字段混叠</h4><p>字段混叠用于创建以 XML 字段的别名。</p><pre class="language-java" data-language="java"><code class="language-java">xstream<span class="token punctuation">.</span><span class="token function">aliasField</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token class-name">Student</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string">"studentName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="隐式集合混叠"><a href="#隐式集合混叠" class="headerlink" title="隐式集合混叠"></a>隐式集合混叠</h4><p>隐式集合混叠时使用的集合是表示在 XML 无需显示根。</p><p>例如，我们需要一个接一个，但不是在根节点来显示每一个节点。</p><pre class="language-java" data-language="java"><code class="language-java">xstream<span class="token punctuation">.</span><span class="token function">addImplicitCollection</span><span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string">"notes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="属性混叠"><a href="#属性混叠" class="headerlink" title="属性混叠"></a>属性混叠</h4><p>属性混叠用于创建一个成员变量作为 XML 属性序列化。</p><pre class="language-java" data-language="java"><code class="language-java">xstream<span class="token punctuation">.</span><span class="token function">useAttributeFor</span><span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string">"studentName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="包混叠"><a href="#包混叠" class="headerlink" title="包混叠"></a>包混叠</h4><p>包装混叠用于创建一个类 XML 的完全限定名称的别名到一个新的限定名称。</p><pre class="language-java" data-language="java"><code class="language-java">xstream<span class="token punctuation">.</span><span class="token function">aliasPackage</span><span class="token punctuation">(</span><span class="token string">"my.company.xstream"</span><span class="token punctuation">,</span> <span class="token string">"demo.xstream"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="XStream-注解"><a href="#XStream-注解" class="headerlink" title="XStream 注解"></a>XStream 注解</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@XStreamAlias</span><span class="token punctuation">(</span><span class="token string">"student"</span><span class="token punctuation">)</span> <span class="token comment">// 类混叠</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span><span class="token annotation punctuation">@XStreamAlias</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span> <span class="token comment">// 字段混叠</span><span class="token annotation punctuation">@XStreamAsAttribute</span> <span class="token comment">// 属性混叠</span><span class="token keyword">private</span> <span class="token class-name">String</span> studentName<span class="token punctuation">;</span><span class="token annotation punctuation">@XStreamImplicit</span> <span class="token comment">// 隐式集合混叠</span><span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Note</span><span class="token punctuation">&gt;</span></span> notes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Note</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@XStreamOmitField</span> <span class="token comment">// 忽略不属于 XML 的字段</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> type<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="XStream-对象流"><a href="#XStream-对象流" class="headerlink" title="XStream 对象流"></a>XStream 对象流</h3><p>XStream 提供 java.io.ObjectInputStream 和 java.io.ObjectOutputStream 替代实现，使对象流可以被序列化或 XML 序列化。</p><h4 id="输出文件-Output"><a href="#输出文件-Output" class="headerlink" title="输出文件 Output"></a>输出文件 Output</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">ObjectOutputStream</span> objectOutputStream <span class="token operator">=</span> xstream<span class="token punctuation">.</span><span class="token function">createObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>objectOutputStream<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>student1<span class="token punctuation">)</span><span class="token punctuation">;</span>objectOutputStream<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>student2<span class="token punctuation">)</span><span class="token punctuation">;</span>objectOutputStream<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>student3<span class="token punctuation">)</span><span class="token punctuation">;</span>objectOutputStream<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>student4<span class="token punctuation">)</span><span class="token punctuation">;</span>objectOutputStream<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>objectOutputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="读取文件-Input"><a href="#读取文件-Input" class="headerlink" title="读取文件 Input"></a>读取文件 Input</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">ObjectInputStream</span> objectInputStream <span class="token operator">=</span> xstream<span class="token punctuation">.</span><span class="token function">createObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Student</span> student5 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">)</span> objectInputStream<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Student</span> student6 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">)</span> objectInputStream<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Student</span> student7 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">)</span> objectInputStream<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Student</span> student8 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">)</span> objectInputStream<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> text <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> objectInputStream<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="XStream-自定义转换器"><a href="#XStream-自定义转换器" class="headerlink" title="XStream 自定义转换器"></a>XStream 自定义转换器</h3><p>XStream 允许从无到有写入转换器，这样开发人员可以编写一个完全新的实现，如何对象序列化到 XML，反之亦然。 转换器接口提供了三种方法。</p><ul><li><strong>canConvert</strong> - 检查支持的对象类型的序列化。</li><li><strong>marshal</strong> - 序列化对象到 XML。</li><li><strong>unmarshal</strong> - 从 XML 对象反序列化</li></ul><h4 id="实现转换器接口"><a href="#实现转换器接口" class="headerlink" title="实现转换器接口"></a>实现转换器接口</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">StudentConverter</span> <span class="token keyword">implements</span> <span class="token class-name">Converter</span> <span class="token punctuation">{</span><span class="token comment">// 序列化对象到XML</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">marshal</span><span class="token punctuation">(</span><span class="token class-name">Object</span> value<span class="token punctuation">,</span> <span class="token class-name">HierarchicalStreamWriter</span> writer<span class="token punctuation">,</span> <span class="token class-name">MarshallingContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">)</span> value<span class="token punctuation">;</span>writer<span class="token punctuation">.</span><span class="token function">startNode</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>writer<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFirstName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> student<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLastName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>writer<span class="token punctuation">.</span><span class="token function">endNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 从XML对象反序列化</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">unmarshal</span><span class="token punctuation">(</span><span class="token class-name">HierarchicalStreamReader</span> reader<span class="token punctuation">,</span> <span class="token class-name">UnmarshallingContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>reader<span class="token punctuation">.</span><span class="token function">moveDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nameparts <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>nameparts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nameparts<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>reader<span class="token punctuation">.</span><span class="token function">moveUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> student<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 检查支持的对象类型的序列化</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">canConvert</span><span class="token punctuation">(</span><span class="token class-name">Class</span> object<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> object<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span> </code></pre><h4 id="注册转换器"><a href="#注册转换器" class="headerlink" title="注册转换器"></a>注册转换器</h4><pre class="language-java" data-language="java"><code class="language-java">xstream<span class="token punctuation">.</span><span class="token function">registerConverter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StudentConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="XStream-编写JSON"><a href="#XStream-编写JSON" class="headerlink" title="XStream 编写JSON"></a>XStream 编写 JSON</h3><p>XStream 支持 JSON 通过初始化 XStream 对象适当的驱动程序。 </p><p>XStream 目前支持 JettisonMappedXmlDriver 和 JsonHierarchicalStreamDriver。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">XStream</span> xstream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JsonHierarchicalStreamDriver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token class-name">HierarchicalStreamWriter</span> <span class="token function">createWriter</span><span class="token punctuation">(</span><span class="token class-name">Writer</span> writer<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JsonWriter</span><span class="token punctuation">(</span>writer<span class="token punctuation">,</span> <span class="token class-name">JsonWriter</span><span class="token punctuation">.</span>DROP_ROOT_MODE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xstream<span class="token punctuation">.</span><span class="token function">setMode</span><span class="token punctuation">(</span><span class="token class-name">XStream</span><span class="token punctuation">.</span>NO_REFERENCES<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"Mahesh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>xstream<span class="token punctuation">.</span><span class="token function">toXML</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cueWlpYmFpLmNvbS94c3RyZWFt">https://www.yiibai.com/xstream<i class="fa fa-external-link-alt"></i></span></li></ul>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;XStream-介绍&quot;&gt;&lt;a href=&quot;#XStream-介绍&quot; class=&quot;headerlink&quot; title=&quot;XStream 介绍&quot;&gt;&lt;/a&gt;XStream 介绍&lt;/h3&gt;&lt;p&gt;XStream 是一个简单的基于 Java 库，Java 对象序列化到 XML，反之亦然 (即：可以轻易的将 Java 对象和 xml 文档相互转换)。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;官网说明：&lt;a href=&quot;http://x-stream.github.io/&quot;&gt;http://x-stream.github.io/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;GitHub：&lt;a href=&quot;https://github.com/x-stream/xstream&quot;&gt;https://github.com/x-stream/xstream&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;JavaDoc：&lt;a href=&quot;http://x-stream.github.io/javadoc/index.html&quot;&gt;http://x-stream.github.io/javadoc/index.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Java" scheme="https://jueee.github.io/categories/Java/"/>
    
    <category term="JavaJar" scheme="https://jueee.github.io/categories/Java/JavaJar/"/>
    
    
    <category term="Java" scheme="https://jueee.github.io/tags/Java/"/>
    
    <category term="JavaJar" scheme="https://jueee.github.io/tags/JavaJar/"/>
    
    <category term="XML" scheme="https://jueee.github.io/tags/XML/"/>
    
  </entry>
  
  <entry>
    <title>HTML 解析器 JSoup 的基本使用</title>
    <link href="https://jueee.github.io/2020/10/2020-10-28-HTML%E8%A7%A3%E6%9E%90%E5%99%A8JSoup%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>https://jueee.github.io/2020/10/2020-10-28-HTML%E8%A7%A3%E6%9E%90%E5%99%A8JSoup%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</id>
    <published>2020-10-28T00:00:00.000Z</published>
    <updated>2020-10-30T01:34:02.989Z</updated>
    
    <content type="html"><![CDATA[<h3 id="JSoup介绍"><a href="#JSoup介绍" class="headerlink" title="JSoup介绍"></a>JSoup 介绍</h3><p>JSoup 是一个用于处理 HTML 的 Java 库，它提供了一个非常方便类似于使用 DOM，CSS 和 jquery 的方法的 API 来提取和操作数据。</p><ul><li>官网：<span class="exturl" data-url="aHR0cHM6Ly9qc291cC5vcmcv">https://jsoup.org/<i class="fa fa-external-link-alt"></i></span></li><li>GitHub：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2poeS9qc291cC8=">https://github.com/jhy/jsoup/<i class="fa fa-external-link-alt"></i></span></li></ul><a id="more"></a><h4 id="JSoup-功能"><a href="#JSoup-功能" class="headerlink" title="JSoup 功能"></a>JSoup 功能</h4><p>jsoup 实现 WHATWG HTML5 规范，并将 HTML 解析为与现代浏览器相同的 DOM。</p><ul><li>从 URL，文件或字符串中提取并解析 HTML。</li><li>查找和提取数据，使用 DOM 遍历或 CSS 选择器。</li><li>操纵 HTML 元素，属性和文本。</li><li>根据安全的白名单清理用户提交的内容，以防止 XSS 攻击。</li><li>输出整洁的 HTML。</li></ul><h4 id="JSoup-引入"><a href="#JSoup-引入" class="headerlink" title="JSoup 引入"></a>JSoup 引入</h4><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/org.jsoup/jsoup --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.jsoup<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jsoup<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.13.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></code></pre><h3 id="JSoup-主要类"><a href="#JSoup-主要类" class="headerlink" title="JSoup 主要类"></a>JSoup 主要类</h3><p>大多数情况下，下面给出 <code>3</code> 个类是我们需要重点了解的。</p><h4 id="Jsoup类"><a href="#Jsoup类" class="headerlink" title="Jsoup类"></a>Jsoup 类</h4><p>Jsoup 类是任何 Jsoup 程序的入口点，并将提供从各种来源加载和解析 HTML 文档的方法。</p><p>Jsoup 类的一些重要方法如下：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>static Connection connect(String url)</code></td><td>创建并返回 URL 的连接。</td></tr><tr><td><code>static Document parse(File in, String charsetName)</code></td><td>将指定的字符集文件解析成文档。</td></tr><tr><td><code>static Document parse(String html)</code></td><td>将给定的 html 代码解析成文档。</td></tr><tr><td><code>static String clean(String bodyHtml, Whitelist whitelist)</code></td><td>从输入 HTML 返回安全的 HTML，通过解析输入 HTML 并通过允许的标签和属性的白名单进行过滤。</td></tr></tbody></table><p>Jsoup 类的其他重要方法可以参见 - <span class="exturl" data-url="aHR0cHM6Ly9qc291cC5vcmcvYXBpZG9jcy9vcmcvanNvdXAvSnNvdXAuaHRtbA==">https://jsoup.org/apidocs/org/jsoup/Jsoup.html<i class="fa fa-external-link-alt"></i></span></p><h4 id="Document类"><a href="#Document类" class="headerlink" title="Document类"></a>Document 类</h4><p>该类表示通过 Jsoup 库加载 HTML 文档。可以使用此类执行适用于整个 HTML 文档的操作。</p><p>Element 类的重要方法可以参见 - <span class="exturl" data-url="aHR0cDovL2pzb3VwLm9yZy9hcGlkb2NzL29yZy9qc291cC9ub2Rlcy9Eb2N1bWVudC5odG1s">http://jsoup.org/apidocs/org/jsoup/nodes/Document.html<i class="fa fa-external-link-alt"></i></span> 。</p><h4 id="Element类"><a href="#Element类" class="headerlink" title="Element类"></a>Element 类</h4><p>HTML 元素是由标签名称，属性和子节点组成。 使用 Element 类，您可以提取数据，遍历节点和操作 HTML。</p><p>Element 类的重要方法可参见 - <span class="exturl" data-url="aHR0cDovL2pzb3VwLm9yZy9hcGlkb2NzL29yZy9qc291cC9ub2Rlcy9FbGVtZW50Lmh0bWw=">http://jsoup.org/apidocs/org/jsoup/nodes/Element.html<i class="fa fa-external-link-alt"></i></span> 。</p><h3 id="JSoup-应用实例"><a href="#JSoup-应用实例" class="headerlink" title="JSoup 应用实例"></a>JSoup 应用实例</h3><h4 id="加载文档"><a href="#加载文档" class="headerlink" title="加载文档"></a>加载文档</h4><ul><li><p><strong>从 URL 加载文档</strong>：使用 <code>Jsoup.connect()</code> 方法</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Document</span> doc1 <span class="token operator">=</span> <span class="token class-name">Jsoup</span><span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">"https://www.baidu.com/"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </code></pre></li><li><p><strong>从文件加载文档</strong>：使用 <code>Jsoup.parse()</code> 方法</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Document</span> doc2 <span class="token operator">=</span> <span class="token class-name">Jsoup</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:/test/jsontest.html"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p><strong>从 String 加载文档</strong>：使用 <code>Jsoup.parse()</code> 方法</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> html <span class="token operator">=</span> <span class="token string">"&lt;html&gt;&lt;head&gt;&lt;title&gt;First parse&lt;/title&gt;&lt;/head&gt;"</span>                    <span class="token operator">+</span> <span class="token string">"&lt;body&gt;&lt;p&gt;Parsed HTML into a doc.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;"</span><span class="token punctuation">;</span><span class="token class-name">Document</span> doc3 <span class="token operator">=</span> <span class="token class-name">Jsoup</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><h4 id="获取元素"><a href="#获取元素" class="headerlink" title="获取元素"></a>获取元素</h4><p>以 百度首页为例：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Document</span> document <span class="token operator">=</span> <span class="token class-name">Jsoup</span><span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">"https://www.baidu.com/"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li><p>获取标题</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>获取页面的 Fav 图标</p><p>假设 <code>favicon</code> 图像将是 HTML 文档的 <code>&lt;head&gt;</code> 部分中的第一个图像，可以使用下面的代码：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> favImage <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token class-name">Element</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">head</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">"link[href~=.*\\.(ico|png)]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>element <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">head</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">"meta[itemprop=image]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>element <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        favImage <span class="token operator">=</span> element<span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"content"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    favImage <span class="token operator">=</span> element<span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"href"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>favImage<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// /favicon.ico</span></code></pre></li><li><p>获取页面中的所有链接</p><p>Element 类提供了 attr () 和 text () 方法来返回链接的链接和对应的文本。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Elements</span> links <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">"a[href]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Element</span> link <span class="token operator">:</span> links<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>link<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" - "</span> <span class="token operator">+</span> link<span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"href"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>结果如下：</p><p><img src="/images/2020/10/image-20201029193548876.png" alt="image-20201029193548876" loading="lazy"></p></li><li><p>获取页面中的所有图像</p><p>调用 <code>select()</code> 方法传递 <code>"img[src~=(?i)\\.(png|jpe?g|gif)]"</code>&nbsp;正则表达式作为参数，以便它可以打印 <code>png</code>，<code>jpeg</code> 或 <code>gif</code> 类型的图像。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Elements</span> images <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">"img[src~=(?i)\\.(png|jpe?g|gif)]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Element</span> image <span class="token operator">:</span> images<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>image<span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"alt"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" - "</span> <span class="token operator">+</span> image<span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"src"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>结果如下：</p><p><img src="/images/2020/10/image-20201029193832082.png" alt="image-20201029193832082" loading="lazy"></p></li><li><p>获取 URL 的元信息</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> description <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">"meta[name=description]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"content"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>description<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 全球最大的中文搜索引擎、致力于让网民更便捷地获取信息，找到所求。百度超过千亿的中文网页数据库，可以瞬间找到相关的搜索结果。</span></code></pre></li><li><p>在 HTML 页面中获取表单属性</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Element</span> formElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"form"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Elements</span> inputElements <span class="token operator">=</span> formElement<span class="token punctuation">.</span><span class="token function">getElementsByTag</span><span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Element</span> inputElement <span class="token operator">:</span> inputElements<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">String</span> key <span class="token operator">=</span> inputElement<span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> value <span class="token operator">=</span> inputElement<span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Param name: "</span> <span class="token operator">+</span> key <span class="token operator">+</span> <span class="token string">", Param value: "</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>结果如下：</p><p><img src="/images/2020/10/image-20201029194221980.png" alt="image-20201029194221980" loading="lazy"></p></li></ul><h4 id="更新元素"><a href="#更新元素" class="headerlink" title="更新元素"></a>更新元素</h4><p>只要您使用上述方法找到您想要的元素；可以使用 Jsoup API 来更新这些元素的属性或 innerHTML。 </p><p>例如，想更新文档中存在的 “<code>rel = nofollow</code>” 的所有链接。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Document</span> document <span class="token operator">=</span> <span class="token class-name">Jsoup</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:/test/jsontest.html"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Elements</span> links <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">"a[href]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  links<span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"rel"</span><span class="token punctuation">,</span> <span class="token string">"nofollow"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="消除不信任的HTML"><a href="#消除不信任的HTML" class="headerlink" title="消除不信任的HTML"></a>消除不信任的 HTML</h4><p>假设在应用程序中，想显示用户提交的 HTML 片段。 例如 用户可以在评论框中放入 HTML 内容。 这可能会导致非常严重的问题，如果您允许直接显示此 HTML。 用户可以在其中放入一些恶意脚本，并将用户重定向到另一个脏网站。</p><p>为了清理这个 HTML，Jsoup 提供 <code>Jsoup.clean()</code> 方法。 此方法期望 HTML 格式的字符串，并将返回清洁的 HTML。 要执行此任务，Jsoup 使用白名单过滤器。 jsoup 白名单过滤器通过解析输入 HTML (在安全的沙盒环境中) 工作，然后遍历解析树，只允许将已知安全的标签和属性 (和值) 通过清理后输出。</p><p>它不使用正则表达式，这对于此任务是不合适的。</p><p>清洁器不仅用于避免 XSS，还限制了用户可以提供的元素的范围：您可以使用文本，强元素，但不能构造 <code>div</code> 或表元素。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> dirtyHTML <span class="token operator">=</span> <span class="token string">"&lt;p&gt;&lt;a href='https://www.baidu.com/' onclick='sendCookiesToMe()'&gt;Link&lt;/a&gt;&lt;/p&gt;"</span><span class="token punctuation">;</span><span class="token class-name">String</span> cleanHTML <span class="token operator">=</span> <span class="token class-name">Jsoup</span><span class="token punctuation">.</span><span class="token function">clean</span><span class="token punctuation">(</span>dirtyHTML<span class="token punctuation">,</span> <span class="token class-name">Whitelist</span><span class="token punctuation">.</span><span class="token function">basic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cleanHTML<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>执行后输出结果如下：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://www.baidu.com/<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nofollow<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Link<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;JSoup介绍&quot;&gt;&lt;a href=&quot;#JSoup介绍&quot; class=&quot;headerlink&quot; title=&quot;JSoup介绍&quot;&gt;&lt;/a&gt;JSoup 介绍&lt;/h3&gt;&lt;p&gt;JSoup 是一个用于处理 HTML 的 Java 库，它提供了一个非常方便类似于使用 DOM，CSS 和 jquery 的方法的 API 来提取和操作数据。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;官网：&lt;a href=&quot;https://jsoup.org/&quot;&gt;https://jsoup.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;GitHub：&lt;a href=&quot;https://github.com/jhy/jsoup/&quot;&gt;https://github.com/jhy/jsoup/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="HTML" scheme="https://jueee.github.io/categories/HTML/"/>
    
    <category term="Java" scheme="https://jueee.github.io/categories/Java/"/>
    
    <category term="JavaJar" scheme="https://jueee.github.io/categories/Java/JavaJar/"/>
    
    
    <category term="HTML" scheme="https://jueee.github.io/tags/HTML/"/>
    
    <category term="Java" scheme="https://jueee.github.io/tags/Java/"/>
    
    <category term="JavaJar" scheme="https://jueee.github.io/tags/JavaJar/"/>
    
  </entry>
  
  <entry>
    <title>作业调度框架 Quartz 的基本使用</title>
    <link href="https://jueee.github.io/2020/10/2020-10-27-%E4%BD%9C%E4%B8%9A%E8%B0%83%E5%BA%A6%E6%A1%86%E6%9E%B6Quartz%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>https://jueee.github.io/2020/10/2020-10-27-%E4%BD%9C%E4%B8%9A%E8%B0%83%E5%BA%A6%E6%A1%86%E6%9E%B6Quartz%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</id>
    <published>2020-10-27T00:00:00.000Z</published>
    <updated>2020-10-27T10:53:05.686Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Quartz-介绍"><a href="#Quartz-介绍" class="headerlink" title="Quartz 介绍"></a>Quartz 介绍</h3><p>Quartz 是一个开源的作业调度框架，可以让计划的程序任务一个预定义的日期和时间运行。</p><p>Quartz 可以用来创建简单或复杂的日程安排执行几十，几百，甚至是十万的作业数。</p><p>Quartz 官网：<span class="exturl" data-url="aHR0cDovL3d3dy5xdWFydHotc2NoZWR1bGVyLm9yZy8=">http://www.quartz-scheduler.org/<i class="fa fa-external-link-alt"></i></span></p><p>GitHub：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3F1YXJ0ei1zY2hlZHVsZXI=">https://github.com/quartz-scheduler<i class="fa fa-external-link-alt"></i></span></p><a id="more"></a><h4 id="Quartz-功能"><a href="#Quartz-功能" class="headerlink" title="Quartz 功能"></a>Quartz 功能</h4><p>如果应用程序需要在给定时间执行任务，或者如果系统有连续维护作业，那么 Quartz 是理想的解决方案。</p><p>使用 Quartz 作业调度应用的示例：</p><ul><li><strong>驱动处理工作流程</strong>：作为一个新的订单被初始化放置，调度作业到在正好两个小时内，它将检查订单的状态，如果订单确认消息尚未收到命令触发警告通知，以及改变订单的状态为 “等待的干预”。</li><li><strong>系统维护</strong>：调度工作给数据库的内容，每个工作日（节假日除外平日）在 11:30 PM 转储到一个 XML 文件中。</li><li><strong>在应用程序内提供提醒服务</strong>。</li></ul><h4 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h4><ul><li>Quartz 可以运行嵌入在另一个独立式应用程序</li><li> Quartz 可以在应用程序服务器 (或 servlet 容器) 内被实例化，并且参与 XA 事务</li><li> Quartz 可以作为一个独立的程序运行 (其自己的 Java 虚拟机内)，可以通过 RMI 使用</li><li> Quartz 可以被实例化，作为独立的项目集群 (负载平衡和故障转移功能)，用于作业的执行</li></ul><h4 id="作业调度"><a href="#作业调度" class="headerlink" title="作业调度"></a>作业调度</h4><p>作业被安排在一个给定的触发时运行。触发器可以使用以下指令的接近任何组合来创建：</p><ul><li>在一天中的某个时间（到毫秒）</li><li>在一周的某几天</li><li>在每月的某一天</li><li>在一年中的某些日期</li><li>不在注册的日历中列出的特定日期（如商业节假日除外）</li><li>重复特定次数</li><li>重复进行，直到一个特定的时间 / 日期</li><li>无限重复</li><li>重复的延迟时间间隔</li></ul><p>作业是由其创建者赋予的名字，也可以组织成命名组。触发器也可以给予名称和放置在组中，以方便地将它们调度内组织。</p><p>作业可以被添加到所述调度器一次，而是具有多个触发器注册。</p><p>在企业 Java 环境中，作业可以执行自己的工作作为分布式（XA）事务的一部分。</p><h4 id="作业执行"><a href="#作业执行" class="headerlink" title="作业执行"></a>作业执行</h4><ul><li>作业可以实现简单的作业接口，为作业执行工作的任何 Java 类。</li><li>Job 类的实例可以通过 Quartz 被实例化，或者通过应用程序框架。</li><li>当触发时，调度通知实现 JobListener 和 TriggerListener 接口零个或多个 Java 对象（监听器可以是简单的 Java 对象，或 EJB，JMS 或发布者等）。这些监听器在作业已经执行之后通知。</li><li>由于作业完成后返回 JobCompletionCode，它通知的成功或失败的调度。JobCompletionCode 还可以指示的基础上，成功的话就采取行动调度 / 失败的代码 - 如立即重新执行作业。</li></ul><h4 id="作业持久性"><a href="#作业持久性" class="headerlink" title="作业持久性"></a>作业持久性</h4><ul><li>Quartz 的设计包括可被实现以提供的作业存储各种机制一个作业存储接口</li><li>通过使用包含的 JDBCJobStore，所有的作业和触发器配置为 “非挥发性” 都存储在通过 JDBC 关系数据库。</li><li>通过使用包含的 RAMJobStore，所有的作业和触发器存储在 RAM，因此不计划执行仍然存在 - 但这是无需使用外部数据库的优势。</li></ul><h4 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h4><ul><li>可以参与 JTA 事务，通过使用 JobStoreCMT（JDBCJobStore 的子类）。</li><li>Quartz 可以管理 JTA 事务（开始并提交它们）周围作业的执行，从而使作业执行的工作自动将 JTA 事务中发生。</li></ul><h4 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h4><ul><li>故障切换</li><li>负载均衡</li><li> Quartz 的内置的群集功能，通过 JDBCJobStore（如上所述）依靠数据库持久</li><li> Terracotta 扩展 Quartz 提供集群功能，而不需要一个支持数据库</li></ul><h4 id="监听器和插件"><a href="#监听器和插件" class="headerlink" title="监听器和插件"></a>监听器和插件</h4><ul><li>应用程序可以捕捉事件的调度监控或通过实现一个或多个监听器接口控制工作 / 触发行为。</li><li>插件机制，可以用来添加功能，Quartz 让作业执行过程中或工作负载和触发定义的历史不受限在一个文件中。</li><li>附带了一些 “工厂建有” 插件和监听器。</li></ul><h4 id="Quartz-引入"><a href="#Quartz-引入" class="headerlink" title="Quartz 引入"></a>Quartz 引入</h4><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/org.quartz-scheduler/quartz --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.quartz-scheduler<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>quartz<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.3.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></code></pre><h3 id="Quartz-简单示例"><a href="#Quartz-简单示例" class="headerlink" title="Quartz 简单示例"></a>Quartz 简单示例</h3><h4 id="Quartz-作业"><a href="#Quartz-作业" class="headerlink" title="Quartz 作业"></a>Quartz 作业</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloJob</span> <span class="token keyword">implements</span> <span class="token class-name">Job</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">JobExecutionContext</span> context<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">JobExecutionException</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello Quartz!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="Quartz-触发器"><a href="#Quartz-触发器" class="headerlink" title="Quartz 触发器"></a>Quartz 触发器</h4><p>定义 Quartz 触发器，运行在上面的 Quartz 作业。</p><p>Quartz 有两种类型的触发器在 Quartz2：</p><ul><li><p><strong>SimpleTrigger</strong> – 允许设置开始时间，结束时间，重复间隔。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Trigger</span> trigger <span class="token operator">=</span> <span class="token class-name">TriggerBuilder</span><span class="token punctuation">.</span><span class="token function">newTrigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span><span class="token string">"dummyTriggerName"</span><span class="token punctuation">,</span> <span class="token string">"group1"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">withSchedule</span><span class="token punctuation">(</span><span class="token class-name">SimpleScheduleBuilder</span><span class="token punctuation">.</span><span class="token function">simpleSchedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">withIntervalInSeconds</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">repeatForever</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p><strong>CronTrigger</strong> – 允许 UNIX cron 表达式来指定日期和时间来运行作业。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Trigger</span> trigger <span class="token operator">=</span> <span class="token class-name">TriggerBuilder</span><span class="token punctuation">.</span><span class="token function">newTrigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span><span class="token string">"dummyTriggerName"</span><span class="token punctuation">,</span> <span class="token string">"group1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withSchedule</span><span class="token punctuation">(</span><span class="token class-name">CronScheduleBuilder</span><span class="token punctuation">.</span><span class="token function">cronSchedule</span><span class="token punctuation">(</span><span class="token string">"0/5 * * * * ?"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><h4 id="Scheduler"><a href="#Scheduler" class="headerlink" title="Scheduler"></a>Scheduler</h4><p>调度类链接 “工作” 和 “触发器” 到一起，并执行它。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Scheduler</span> scheduler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StdSchedulerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>scheduler<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>scheduler<span class="token punctuation">.</span><span class="token function">scheduleJob</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span> trigger<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="完整示例"><a href="#完整示例" class="headerlink" title="完整示例"></a>完整示例</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">JobDetail</span> job <span class="token operator">=</span> <span class="token class-name">JobBuilder</span><span class="token punctuation">.</span><span class="token function">newJob</span><span class="token punctuation">(</span><span class="token class-name">HelloJob</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span><span class="token string">"dummyJobName"</span><span class="token punctuation">,</span> <span class="token string">"group1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Trigger</span> trigger <span class="token operator">=</span> <span class="token class-name">TriggerBuilder</span><span class="token punctuation">.</span><span class="token function">newTrigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span><span class="token string">"dummyTriggerName"</span><span class="token punctuation">,</span> <span class="token string">"group1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withSchedule</span><span class="token punctuation">(</span><span class="token class-name">CronScheduleBuilder</span><span class="token punctuation">.</span><span class="token function">cronSchedule</span><span class="token punctuation">(</span><span class="token string">"0/5 * * * * ?"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Scheduler</span> scheduler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StdSchedulerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>scheduler<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>scheduler<span class="token punctuation">.</span><span class="token function">scheduleJob</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span> trigger<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="Quartz-作业监听"><a href="#Quartz-作业监听" class="headerlink" title="Quartz 作业监听"></a>Quartz 作业监听</h3><h4 id="JobListener"><a href="#JobListener" class="headerlink" title="JobListener"></a>JobListener</h4><p>创建一个 JobListener，只是实现了 JobListener 接口，并覆盖所有的接口的方法。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloJobListener</span> <span class="token keyword">implements</span> <span class="token class-name">JobListener</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><h4 id="加入监听"><a href="#加入监听" class="headerlink" title="加入监听"></a>加入监听</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Scheduler</span> scheduler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StdSchedulerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>scheduler<span class="token punctuation">.</span><span class="token function">getListenerManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">.</span><span class="token function">addJobListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HelloJobListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">KeyMatcher</span><span class="token punctuation">.</span><span class="token function">keyEquals</span><span class="token punctuation">(</span>jobKey<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="Quartz-执行多作业"><a href="#Quartz-执行多作业" class="headerlink" title="Quartz 执行多作业"></a>Quartz 执行多作业</h3><p>在 Quartz 调度框架中，每个作业将被连接到一个唯一的触发，并且由调度器运行它。</p><p>P.S：在 Quartz 中，一个触发器触发多个作业是不可以的。 </p><p>使用 QuartzAPI 声明上述 3 个作业，分配它们到特定触发器并调度它。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">JobKey</span> jobKeyA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JobKey</span><span class="token punctuation">(</span><span class="token string">"jobA"</span><span class="token punctuation">,</span> <span class="token string">"group1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">JobDetail</span> jobA <span class="token operator">=</span> <span class="token class-name">JobBuilder</span><span class="token punctuation">.</span><span class="token function">newJob</span><span class="token punctuation">(</span><span class="token class-name">JobA</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span>jobKeyA<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">JobKey</span> jobKeyB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JobKey</span><span class="token punctuation">(</span><span class="token string">"jobB"</span><span class="token punctuation">,</span> <span class="token string">"group1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">JobDetail</span> jobB <span class="token operator">=</span> <span class="token class-name">JobBuilder</span><span class="token punctuation">.</span><span class="token function">newJob</span><span class="token punctuation">(</span><span class="token class-name">JobB</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span>jobKeyB<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">JobKey</span> jobKeyC <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JobKey</span><span class="token punctuation">(</span><span class="token string">"jobC"</span><span class="token punctuation">,</span> <span class="token string">"group1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">JobDetail</span> jobC <span class="token operator">=</span> <span class="token class-name">JobBuilder</span><span class="token punctuation">.</span><span class="token function">newJob</span><span class="token punctuation">(</span><span class="token class-name">JobC</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span>jobKeyC<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Trigger</span> trigger1 <span class="token operator">=</span> <span class="token class-name">TriggerBuilder</span><span class="token punctuation">.</span><span class="token function">newTrigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span><span class="token string">"dummyTriggerName1"</span><span class="token punctuation">,</span> <span class="token string">"group1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withSchedule</span><span class="token punctuation">(</span><span class="token class-name">CronScheduleBuilder</span><span class="token punctuation">.</span><span class="token function">cronSchedule</span><span class="token punctuation">(</span><span class="token string">"0/5 * * * * ?"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Trigger</span> trigger2 <span class="token operator">=</span> <span class="token class-name">TriggerBuilder</span><span class="token punctuation">.</span><span class="token function">newTrigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span><span class="token string">"dummyTriggerName2"</span><span class="token punctuation">,</span> <span class="token string">"group1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withSchedule</span><span class="token punctuation">(</span><span class="token class-name">CronScheduleBuilder</span><span class="token punctuation">.</span><span class="token function">cronSchedule</span><span class="token punctuation">(</span><span class="token string">"0/5 * * * * ?"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Trigger</span> trigger3 <span class="token operator">=</span> <span class="token class-name">TriggerBuilder</span><span class="token punctuation">.</span><span class="token function">newTrigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span><span class="token string">"dummyTriggerName3"</span><span class="token punctuation">,</span> <span class="token string">"group1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withSchedule</span><span class="token punctuation">(</span><span class="token class-name">CronScheduleBuilder</span><span class="token punctuation">.</span><span class="token function">cronSchedule</span><span class="token punctuation">(</span><span class="token string">"0/5 * * * * ?"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Scheduler</span> scheduler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StdSchedulerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>scheduler<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>scheduler<span class="token punctuation">.</span><span class="token function">scheduleJob</span><span class="token punctuation">(</span>jobA<span class="token punctuation">,</span> trigger1<span class="token punctuation">)</span><span class="token punctuation">;</span>scheduler<span class="token punctuation">.</span><span class="token function">scheduleJob</span><span class="token punctuation">(</span>jobB<span class="token punctuation">,</span> trigger2<span class="token punctuation">)</span><span class="token punctuation">;</span>scheduler<span class="token punctuation">.</span><span class="token function">scheduleJob</span><span class="token punctuation">(</span>jobC<span class="token punctuation">,</span> trigger3<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="列出调度器所有作业"><a href="#列出调度器所有作业" class="headerlink" title="列出调度器所有作业"></a>列出调度器所有作业</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Scheduler</span> scheduler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StdSchedulerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> groupName <span class="token operator">:</span> scheduler<span class="token punctuation">.</span><span class="token function">getJobGroupNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">JobKey</span> jobKey <span class="token operator">:</span> scheduler<span class="token punctuation">.</span><span class="token function">getJobKeys</span><span class="token punctuation">(</span><span class="token class-name">GroupMatcher</span><span class="token punctuation">.</span><span class="token function">jobGroupEquals</span><span class="token punctuation">(</span>groupName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">String</span> jobName <span class="token operator">=</span> jobKey<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> jobGroup <span class="token operator">=</span> jobKey<span class="token punctuation">.</span><span class="token function">getGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Trigger</span><span class="token punctuation">&gt;</span></span> triggers <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Trigger</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> scheduler<span class="token punctuation">.</span><span class="token function">getTriggersOfJob</span><span class="token punctuation">(</span>jobKey<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Date</span> nextFireTime <span class="token operator">=</span> triggers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getNextFireTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"[jobName] : "</span> <span class="token operator">+</span> jobName <span class="token operator">+</span> <span class="token string">" [groupName] : "</span> <span class="token operator">+</span> jobGroup <span class="token operator">+</span> <span class="token string">" - "</span> <span class="token operator">+</span> nextFireTime<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cueWlpYmFpLmNvbS9xdWFydHo=">https://www.yiibai.com/quartz<i class="fa fa-external-link-alt"></i></span></li></ul>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;Quartz-介绍&quot;&gt;&lt;a href=&quot;#Quartz-介绍&quot; class=&quot;headerlink&quot; title=&quot;Quartz 介绍&quot;&gt;&lt;/a&gt;Quartz 介绍&lt;/h3&gt;&lt;p&gt;Quartz 是一个开源的作业调度框架，可以让计划的程序任务一个预定义的日期和时间运行。&lt;/p&gt;
&lt;p&gt;Quartz 可以用来创建简单或复杂的日程安排执行几十，几百，甚至是十万的作业数。&lt;/p&gt;
&lt;p&gt;Quartz 官网：&lt;a href=&quot;http://www.quartz-scheduler.org/&quot;&gt;http://www.quartz-scheduler.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;GitHub：&lt;a href=&quot;https://github.com/quartz-scheduler&quot;&gt;https://github.com/quartz-scheduler&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://jueee.github.io/categories/Java/"/>
    
    <category term="JavaJar" scheme="https://jueee.github.io/categories/Java/JavaJar/"/>
    
    
    <category term="Java" scheme="https://jueee.github.io/tags/Java/"/>
    
    <category term="JavaJar" scheme="https://jueee.github.io/tags/JavaJar/"/>
    
  </entry>
  
  <entry>
    <title>Google 工具类 Gson 的基本使用</title>
    <link href="https://jueee.github.io/2020/10/2020-10-26-Google%E5%B7%A5%E5%85%B7%E7%B1%BBGson%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>https://jueee.github.io/2020/10/2020-10-26-Google%E5%B7%A5%E5%85%B7%E7%B1%BBGson%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</id>
    <published>2020-10-26T00:00:00.000Z</published>
    <updated>2020-10-27T11:02:43.219Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Gson-介绍"><a href="#Gson-介绍" class="headerlink" title="Gson 介绍"></a>Gson 介绍</h3><p>Google Gson 是一个简单的基于 Java 的库，用于将 Java 对象序列化为 JSON，反之亦然。 它是由 Google 开发的一个开源库。</p><p>以下几点说明为什么应该使用这个库 </p><ul><li><strong>标准化</strong> - Gson 是一个由 Google 管理的标准化库。</li><li><strong>高效</strong> - 这是对 Java 标准库的可靠，快速和高效的扩展。</li><li><strong>优化</strong> - Gson 库经过高度优化。</li><li><strong>支持泛型</strong> - 它为泛型提供了广泛的支持。</li><li><strong>支持复杂的内部类</strong> - 它支持具有深度继承层次结构的复杂对象。</li></ul><a id="more"></a><h4 id="Gson-的特点"><a href="#Gson-的特点" class="headerlink" title="Gson 的特点"></a>Gson 的特点</h4><p>这里列出了 Gson 的一些最显着的特点 </p><ul><li><strong>易于使用</strong> - Gson API 提供了一个高级外观来简化常用的用例。</li><li><strong>无需创建映射</strong> - Gson API 为大部分要序列化的对象提供了默认映射。</li><li><strong>性能优</strong> - Gson 速度相当快，内存占用量低。 它适用于大型对象图或系统。</li><li><strong>干净</strong> JSON - Gson 创建一个干净而紧凑的 JSON 结果，它易于阅读。</li><li><strong>无依赖性</strong> —Gson 库不需要 JDK 以外的任何其他库。</li><li><strong>开源</strong> - Gson 库是开源的；它是免费提供的。</li></ul><h4 id="处理JSON的方法"><a href="#处理JSON的方法" class="headerlink" title="处理JSON的方法"></a>处理 JSON 的方法</h4><p>Gson 提供了三种处理 JSON 的替代方法 - </p><ol><li><p><strong>流媒体 API</strong></p><p>它读取和写入 JSON 内容作为离散事件。 JsonReader 和 JsonWriter 将数据读取 / 写入令牌，称为 JsonToken。<br>这是处理 JSON 的三种方法中最强大的方法。 它具有最低的开销，并且在读 / 写操作中速度非常快。 它类似于用于 XML 的 Stax 解析器。</p></li><li><p><strong>树模型</strong></p><p>它准备 JSON 文档的内存树表示。 它构建了一个 JsonObject 节点树。 这是一种灵活的方法，类似于 XML 的 DOM 解析器。</p></li><li><p><strong>数据绑定</strong></p><p>它使用属性访问器将 JSON 转换为 POJO (普通旧 Java 对象) 并从中转换。 Gson 使用数据类型适配器读取 / 写入 JSON。 它类似于 XML 的 JAXB 解析器。</p></li></ol><h4 id="Gson-链接"><a href="#Gson-链接" class="headerlink" title="Gson 链接"></a>Gson 链接</h4><ul><li>GitHub：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZS9nc29u">https://github.com/google/gson<i class="fa fa-external-link-alt"></i></span></li><li> 用户指南：<span class="exturl" data-url="aHR0cHM6Ly9zaXRlcy5nb29nbGUuY29tL3NpdGUvZ3Nvbi9nc29uLXVzZXItZ3VpZGU=">https://sites.google.com/site/gson/gson-user-guide<i class="fa fa-external-link-alt"></i></span></li></ul><h4 id="Gson-引入"><a href="#Gson-引入" class="headerlink" title="Gson 引入"></a>Gson 引入</h4><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/com.google.code.gson/gson --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.google.code.gson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>gson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.8.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></code></pre><h3 id="Gson-入门程序"><a href="#Gson-入门程序" class="headerlink" title="Gson 入门程序"></a>Gson 入门程序</h3><p>Gson 是 Google Gson 库的主要操作类。 它提供了将 Java 对象转换为匹配的 JSON 结构的功能，反之亦然。 </p><p>Gson 首先使用 <code>GsonBuilder</code> 构建，然后使用 <code>toJson(Object)</code> 或 <code>fromJson(String，Class)</code> 方法读取 / 写入 JSON 构造。</p><ol><li><p>使用 <code>GsonBuilder</code> 创建 Gson 对象<br>创建一个 Gson 对象。 它是一个可重用的对象。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">GsonBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GsonBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> builder<span class="token punctuation">.</span><span class="token function">setPrettyPrinting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">Gson</span> gson <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>将 JSON 反序列化为对象<br>使用 <code>fromJson()</code> 方法从 JSON 获取对象。 传递 Json 字符串 / Json 字符串的源和对象类型作为参数。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//Object to JSON Conversion </span><span class="token class-name">Student</span> student <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">,</span> <span class="token class-name">Student</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>将对象序列化为 JSON<br>使用 <code>toJson()</code> 方法获取对象的 JSON 字符串表示形式。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//Object to JSON Conversion   </span>jsonString <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ol><p>示例如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> jsonString <span class="token operator">=</span> <span class="token string">"{\"name\":\"Maxsu\", \"age\":24}"</span><span class="token punctuation">;</span><span class="token class-name">GsonBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GsonBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>builder<span class="token punctuation">.</span><span class="token function">setPrettyPrinting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Gson</span> gson <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Student</span> student <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">,</span> <span class="token class-name">Student</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>jsonString <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="Gson-序列化"><a href="#Gson-序列化" class="headerlink" title="Gson 序列化"></a>Gson 序列化</h3><h4 id="对象序列化"><a href="#对象序列化" class="headerlink" title="对象序列化"></a>对象序列化</h4><p>序列化写入：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">writeJSON</span><span class="token punctuation">(</span><span class="token class-name">Student</span> student<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span><span class="token class-name">GsonBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GsonBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Gson</span> gson <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">FileWriter</span> writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"student.json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>gson<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>writer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>序列化读取：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">Student</span> <span class="token function">readJSON</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">FileNotFoundException</span> <span class="token punctuation">{</span><span class="token class-name">GsonBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GsonBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Gson</span> gson <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">BufferedReader</span> bufferedReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"student.json"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Student</span> student <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>bufferedReader<span class="token punctuation">,</span> <span class="token class-name">Student</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> student<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="数组序列化"><a href="#数组序列化" class="headerlink" title="数组序列化"></a>数组序列化</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 序列化 </span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> marks1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token number">85</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"marks:"</span> <span class="token operator">+</span> gson<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>marks1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 反序列化</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> marks2 <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span><span class="token string">"[100,90,85]"</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"marks:"</span> <span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>marks2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="集合序列化"><a href="#集合序列化" class="headerlink" title="集合序列化"></a>集合序列化</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 序列化 </span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> marks <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"marks:"</span> <span class="token operator">+</span> gson<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>marks<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 反序列化 </span><span class="token class-name">Type</span> listType <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TypeToken</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> marks <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span><span class="token string">"[100,90,85]"</span><span class="token punctuation">,</span> listType<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"marks:"</span> <span class="token operator">+</span>marks<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="泛型序列化"><a href="#泛型序列化" class="headerlink" title="泛型序列化"></a>泛型序列化</h4><p>Gson 使用 Java 反射 API 来获取要将 Json 文本映射到的对象的类型。 但是在泛型中，这些信息在序列化过程中丢失了。 </p><p>为了解决这个问题，Gson 提供了一个 <code>com.google.gson.reflect.TypeToken</code> 类来存储通用对象的类型。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Gson</span> gson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 创建泛型对象</span><span class="token class-name">Shape</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Circle</span><span class="token punctuation">&gt;</span></span> shape <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Shape</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Circle</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Circle</span> circle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token number">5.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>shape<span class="token punctuation">.</span><span class="token function">setShape</span><span class="token punctuation">(</span>circle<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 定义 TypeToken</span><span class="token class-name">Type</span> shapeType <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TypeToken</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Shape</span><span class="token punctuation">&lt;</span><span class="token class-name">Circle</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 序列化</span><span class="token class-name">String</span> jsonString <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>shape<span class="token punctuation">,</span> shapeType<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {"shape":{"radius":5.0}}</span><span class="token comment">// （错误）通过 类 反序列化</span><span class="token class-name">Shape</span> shape1 <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">,</span> <span class="token class-name">Shape</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>shape1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// class com.google.gson.internal.LinkedTreeMap</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>shape1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {radius=5.0}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>shape1<span class="token punctuation">.</span><span class="token function">getArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0.0</span><span class="token comment">// （正确）通过 TypeToken 反序列化</span><span class="token class-name">Shape</span> shape2 <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">,</span> shapeType<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>shape2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// class demo.google.gson.Circle</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>shape2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Circle</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>shape2<span class="token punctuation">.</span><span class="token function">getArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 78.5</span></code></pre><p>其中：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Shape</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">T</span> shape<span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setShape</span><span class="token punctuation">(</span><span class="token class-name">T</span> shape<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>shape <span class="token operator">=</span> shape<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">return</span> shape<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>shape <span class="token keyword">instanceof</span> <span class="token class-name">Circle</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Circle</span><span class="token punctuation">)</span> shape<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token number">0.0</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span>  <span class="token keyword">class</span> <span class="token class-name">Circle</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> radius<span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token keyword">double</span> radius<span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>radius <span class="token operator">=</span> radius<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">return</span> <span class="token string">"Circle"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getRadius</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">return</span> radius<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setRadius</span><span class="token punctuation">(</span><span class="token keyword">double</span> radius<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>radius <span class="token operator">=</span> radius<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">return</span> <span class="token punctuation">(</span>radius<span class="token operator">*</span>radius<span class="token operator">*</span><span class="token number">3.14</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><h4 id="内部类序列化"><a href="#内部类序列化" class="headerlink" title="内部类序列化"></a>内部类序列化</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>person<span class="token punctuation">.</span><span class="token function">setRollNo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token class-name">Name</span> name <span class="token operator">=</span> person<span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>name<span class="token punctuation">.</span>firstName <span class="token operator">=</span> <span class="token string">"Mahesh"</span><span class="token punctuation">;</span>name<span class="token punctuation">.</span>lastName <span class="token operator">=</span> <span class="token string">"Kumar"</span><span class="token punctuation">;</span>person<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Gson</span> gson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> jsonString <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {"rollNo":1,"name":{"firstName":"Mahesh","lastName":"Kumar"}}</span><span class="token comment">// 主类</span>person <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">,</span> <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">getRollNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span> person<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span> person<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>lastName<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1:Mahesh:Kumar</span><span class="token comment">// 内部类</span><span class="token class-name">String</span> nameString <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>nameString<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {"firstName":"Mahesh","lastName":"Kumar"}</span>name <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>nameString<span class="token punctuation">,</span> <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token class-name">Name</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// class demo.google.gson.Person$Name</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> name<span class="token punctuation">.</span>lastName<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Mahesh:Kumar</span></code></pre><p>其中：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token keyword">int</span> rollNo<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">Name</span> name<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getRollNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> rollNo<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setRollNo</span><span class="token punctuation">(</span><span class="token keyword">int</span> rollNo<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>rollNo <span class="token operator">=</span> rollNo<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">Name</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">Name</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Name</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token class-name">String</span> firstName<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">String</span> lastName<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="Gson-从序列化中排除字段"><a href="#Gson-从序列化中排除字段" class="headerlink" title="Gson 从序列化中排除字段"></a>Gson 从序列化中排除字段</h3><h4 id="使用excludeFieldsWithModifiers"><a href="#使用excludeFieldsWithModifiers" class="headerlink" title="使用excludeFieldsWithModifiers()"></a>使用 excludeFieldsWithModifiers ()</h4><p>GsonBuilder 使用序列化 / 反序列化过程中的 <code>excludeFieldsWithModifiers()</code> 方法提供对使用特定修饰符排除字段的控制。 </p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">GsonBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GsonBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> builder<span class="token punctuation">.</span><span class="token function">excludeFieldsWithModifiers</span><span class="token punctuation">(</span><span class="token class-name">Modifier</span><span class="token punctuation">.</span>TRANSIENT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Gson</span> gson <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </code></pre><h4 id="使用-Expose注解"><a href="#使用-Expose注解" class="headerlink" title="使用@Expose注解"></a>使用 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0V4cG9zZQ==">@Expose<i class="fa fa-external-link-alt"></i></span> 注解</h4><p>Gson 提供 <code>@Expose</code> 注解来根据其范围控制类的 Json 序列化 / 反序列化。</p><ol><li><p>类属性中具有 <code>@Expose</code> 支持的变量的类。 </p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Student2</span> <span class="token punctuation">{</span><span class="token annotation punctuation">@Expose</span><span class="token keyword">private</span> <span class="token keyword">int</span> rollNo<span class="token punctuation">;</span><span class="token annotation punctuation">@Expose</span><span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">boolean</span> verified<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> className<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在这个类中，<code>name</code> 和 <code>rollno</code> 变量将被暴露以进行序列化。 </p></li><li><p>使用 <code>GsonBuilder.excludeFieldsWithoutExposeAnnotation()</code> 方法来指示只有暴露的变量要被序列化 / 反序列化。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">GsonBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GsonBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>builder<span class="token punctuation">.</span><span class="token function">excludeFieldsWithoutExposeAnnotation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Gson</span> gson1 <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ol><h3 id="Gson-数据绑定"><a href="#Gson-数据绑定" class="headerlink" title="Gson 数据绑定"></a>Gson 数据绑定</h3><p>数据绑定 API 用于使用属性访问器或使用注释将 JSON 转换为 POJO (普通旧 Java 对象) 以及从 POJO (普通旧 Java 对象) 转换。 </p><p>它有两种类型，分别如下所示： </p><ul><li><strong>原始数据绑定</strong> - 将 JSON 转换为 Java 地图，列表，字符串，数字，布尔值和 NULL 对象。</li><li><strong>对象数据绑定</strong> - 从任何 JAVA 类型转换 JSON。</li></ul><p>Gson 为这两种类型的数据绑定读 / 写 JSON。 数据绑定类似于 XML 的 JAXB 解析器。</p><h4 id="原始数据绑定"><a href="#原始数据绑定" class="headerlink" title="原始数据绑定"></a>原始数据绑定</h4><p>基元数据绑定是指将 JSON 映射到 JAVA 核心数据类型和内置集合。 </p><p>Gson 提供了各种内置适配器，可用于序列化 / 反序列化原始数据类型。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Gson</span> gson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">"Maxsu"</span><span class="token punctuation">;</span><span class="token keyword">long</span> rollNo <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> verified <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> marks <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">85</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// 序列化</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"{"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name: "</span> <span class="token operator">+</span> gson<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"rollNo: "</span> <span class="token operator">+</span> gson<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>rollNo<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"verified: "</span> <span class="token operator">+</span> gson<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>verified<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"marks:"</span> <span class="token operator">+</span> gson<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>marks<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 反序列化</span>name <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span><span class="token string">"\"Maxsu\""</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>rollNo <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>verified <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span><span class="token string">"false"</span><span class="token punctuation">,</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>marks <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span><span class="token string">"[100,90,85]"</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="对象数据绑定"><a href="#对象数据绑定" class="headerlink" title="对象数据绑定"></a>对象数据绑定</h4><p>对象数据绑定是指将 JSON 映射到任何 JAVA 对象。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Gson</span> gson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>student<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">;</span>student<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"Maxsu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> jsonString <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Student</span> student1 <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">,</span> <span class="token class-name">Student</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student1<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="Gson-树模型"><a href="#Gson-树模型" class="headerlink" title="Gson 树模型"></a>Gson 树模型</h3><h4 id="从JSON创建树"><a href="#从JSON创建树" class="headerlink" title="从JSON创建树"></a>从 JSON 创建树</h4><p>在读取 JSON 之后，<code>JsonParser</code> 提供了一个指向树的根节点的指针。根节点可以用来遍历整个树。 </p><p>下面的代码片段来获取提供的 JSON 字符串的根节点。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">JsonParser</span> parser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JsonParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> jsonString <span class="token operator">=</span> <span class="token string">"{\"name\":\"Maxsu\", \"age\":26,\"verified\":false,\"marks\": [100,90,85]}"</span><span class="token punctuation">;</span><span class="token comment">// 从JSON创建树</span><span class="token class-name">JsonElement</span> rootNode <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="遍历树模型"><a href="#遍历树模型" class="headerlink" title="遍历树模型"></a>遍历树模型</h4><p>在遍历树并处理数据时，使用到根节点的相对路径获取每个节点。 </p><p>以下代码片段显示了如何遍历树。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 遍历树模型</span><span class="token keyword">if</span> <span class="token punctuation">(</span>rootNode<span class="token punctuation">.</span><span class="token function">isJsonObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token class-name">JsonObject</span> details <span class="token operator">=</span> rootNode<span class="token punctuation">.</span><span class="token function">getAsJsonObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">JsonElement</span> nameNode <span class="token operator">=</span> details<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Name: "</span> <span class="token operator">+</span> nameNode<span class="token punctuation">.</span><span class="token function">getAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">JsonElement</span> ageNode <span class="token operator">=</span> details<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Age: "</span> <span class="token operator">+</span> ageNode<span class="token punctuation">.</span><span class="token function">getAsInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">JsonElement</span> verifiedNode <span class="token operator">=</span> details<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"verified"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Verified: "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>verifiedNode<span class="token punctuation">.</span><span class="token function">getAsBoolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">"Yes"</span> <span class="token operator">:</span> <span class="token string">"No"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">JsonArray</span> marks <span class="token operator">=</span> details<span class="token punctuation">.</span><span class="token function">getAsJsonArray</span><span class="token punctuation">(</span><span class="token string">"marks"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> marks<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">JsonPrimitive</span> value <span class="token operator">=</span> marks<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAsJsonPrimitive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">getAsInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="Gson-数据流"><a href="#Gson-数据流" class="headerlink" title="Gson 数据流"></a>Gson 数据流</h3><p>Streaming API 用于通过令牌读取 JSON 令牌。 它读取和写入 JSON 内容作为离散事件。 </p><p><code>JsonReader</code> 和 <code>JsonWriter</code> 将数据读取 / 写入令牌，称为 <code>JsonToken</code>。</p><p>这是处理 JSON 的三种方法中最强大的方法。 它具有最低的开销，并且在读 / 写操作中速度非常快。 它类似于用于 XML 的 Stax 解析器。</p><p>下面，我们将展示使用 GSON streaming API 来读取 JSON 数据。 Streaming API 与令牌的概念一起工作，Json 的每个细节都要仔细处理。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 创建JsonReader对象，并将其传递给json文本。</span><span class="token class-name">JsonReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JsonReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringReader</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 开始读取   </span>reader<span class="token punctuation">.</span><span class="token function">beginObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取下一个</span><span class="token class-name">JsonToken</span> token <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 检查类型</span><span class="token keyword">if</span> <span class="token punctuation">(</span>token<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">JsonToken</span><span class="token punctuation">.</span>NAME<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 获取内容</span>   fieldname <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">nextName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><h3 id="Gson-自定义类型适配器"><a href="#Gson-自定义类型适配器" class="headerlink" title="Gson 自定义类型适配器"></a>Gson 自定义类型适配器</h3><p>Gson 使用其内置适配器执行对象的序列化 / 反序列化。 它也支持自定义适配器。 </p><h4 id="创建自定义适配器"><a href="#创建自定义适配器" class="headerlink" title="创建自定义适配器"></a>创建自定义适配器</h4><p>通过扩展 <code>TypeAdapter</code> 类并传递目标类型的对象来创建自定义适配器。 </p><p>重写读写方法分别执行自定义的反序列化和序列化。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">StudentAdapter</span> <span class="token keyword">extends</span> <span class="token class-name">TypeAdapter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Student</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token class-name">JsonReader</span> reader<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>       <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">JsonWriter</span> writer<span class="token punctuation">,</span> <span class="token class-name">Student</span> student<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><h4 id="注册自定义适配器"><a href="#注册自定义适配器" class="headerlink" title="注册自定义适配器"></a>注册自定义适配器</h4><p>使用 <code>GsonBuilder</code> 注册自定义适配器并使用 <code>GsonBuilder</code> 创建一个 Gson 实例。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">GsonBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GsonBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> builder<span class="token punctuation">.</span><span class="token function">registerTypeAdapter</span><span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">StudentAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">Gson</span> gson <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="完整示例"><a href="#完整示例" class="headerlink" title="完整示例"></a>完整示例</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomAdaptersDemo</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">GsonBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GsonBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>builder<span class="token punctuation">.</span><span class="token function">registerTypeAdapter</span><span class="token punctuation">(</span><span class="token class-name">Worker</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">WorkerAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>builder<span class="token punctuation">.</span><span class="token function">setPrettyPrinting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Gson</span> gson <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> jsonString <span class="token operator">=</span> <span class="token string">"{\"name\":\"Maxsu\", \"rollNo\":1}"</span><span class="token punctuation">;</span><span class="token class-name">Worker</span> worker <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">,</span> <span class="token class-name">Worker</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>worker<span class="token punctuation">)</span><span class="token punctuation">;</span>jsonString <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>worker<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">WorkerAdapter</span> <span class="token keyword">extends</span> <span class="token class-name">TypeAdapter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Worker</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">Worker</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token class-name">JsonReader</span> reader<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span><span class="token class-name">Worker</span> worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>reader<span class="token punctuation">.</span><span class="token function">beginObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> fieldname <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>reader<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">JsonToken</span> token <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>token<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">JsonToken</span><span class="token punctuation">.</span>NAME<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>fieldname <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">nextName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>fieldname<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>token <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>worker<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>reader<span class="token punctuation">.</span><span class="token function">nextString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"rollNo"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>fieldname<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>token <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>worker<span class="token punctuation">.</span><span class="token function">setRollNo</span><span class="token punctuation">(</span>reader<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>reader<span class="token punctuation">.</span><span class="token function">endObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> worker<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">JsonWriter</span> writer<span class="token punctuation">,</span> <span class="token class-name">Worker</span> worker<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>writer<span class="token punctuation">.</span><span class="token function">beginObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>writer<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>writer<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span>worker<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>writer<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">"rollNo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>writer<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span>worker<span class="token punctuation">.</span><span class="token function">getRollNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>writer<span class="token punctuation">.</span><span class="token function">endObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Worker</span> <span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token keyword">int</span> rollNo<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getRollNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> rollNo<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setRollNo</span><span class="token punctuation">(</span><span class="token keyword">int</span> rollNo<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>rollNo <span class="token operator">=</span> rollNo<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token string">"Worker[ name = "</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">", roll no: "</span> <span class="token operator">+</span> rollNo <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="Gson-空对象支持"><a href="#Gson-空对象支持" class="headerlink" title="Gson 空对象支持"></a>Gson 空对象支持</h3><p>Gson 默认生成优化的 Json 内容，忽略 <code>NULL</code> 值。 </p><p>但是 <code>GsonBuilder</code> 提供的标志使用 <code>GsonBuilder.serializeNulls()</code> 方法在 Json 输出中显示 <code>NULL</code> 值。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 默认</span><span class="token class-name">Gson</span> gson1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">demo</span><span class="token punctuation">(</span>gson1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {"age":1}</span><span class="token comment">// 使用serializeNulls</span><span class="token class-name">GsonBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GsonBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>builder<span class="token punctuation">.</span><span class="token function">serializeNulls</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>builder<span class="token punctuation">.</span><span class="token function">setPrettyPrinting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Gson</span> gson2 <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">demo</span><span class="token punctuation">(</span>gson2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {"name": null, "age": 1 }</span></code></pre><p>其中，</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token class-name">Gson</span> gson<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>student<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> jsonString <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="Gson-版本支持"><a href="#Gson-版本支持" class="headerlink" title="Gson 版本支持"></a>Gson 版本支持</h3><p>Gson 提供了 <code>@Since</code> 注解来控制基于其各种版本的类的 Json 序列化 / 反序列化。</p><p>以下具有版本支持的类：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span><span class="token annotation punctuation">@Since</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token keyword">int</span> rollNo<span class="token punctuation">;</span><span class="token annotation punctuation">@Since</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token annotation punctuation">@Since</span><span class="token punctuation">(</span><span class="token number">1.1</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token keyword">boolean</span> verified<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getRollNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> rollNo<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setRollNo</span><span class="token punctuation">(</span><span class="token keyword">int</span> rollNo<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>rollNo <span class="token operator">=</span> rollNo<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setVerified</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> verified<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>verified <span class="token operator">=</span> verified<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isVerified</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> verified<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>进行 Json 序列化 / 反序列化：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 构建对象</span><span class="token class-name">Demo</span> demo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>demo<span class="token punctuation">.</span><span class="token function">setRollNo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>demo<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"Maxsu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>demo<span class="token punctuation">.</span><span class="token function">setVerified</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 默认</span><span class="token class-name">Gson</span> gson1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> jsonString1 <span class="token operator">=</span> gson1<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>demo<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jsonString1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {"rollNo":1,"name":"Maxsu","verified":true}</span><span class="token comment">// 版本支持</span><span class="token class-name">GsonBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GsonBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>builder<span class="token punctuation">.</span><span class="token function">setVersion</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Gson</span> gson2 <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> jsonString2 <span class="token operator">=</span> gson2<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>demo<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jsonString2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {"rollNo":1,"name":"Maxsu"}</span></code></pre><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cueWlpYmFpLmNvbS9nc29u">https://www.yiibai.com/gson<i class="fa fa-external-link-alt"></i></span></li></ul>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;Gson-介绍&quot;&gt;&lt;a href=&quot;#Gson-介绍&quot; class=&quot;headerlink&quot; title=&quot;Gson 介绍&quot;&gt;&lt;/a&gt;Gson 介绍&lt;/h3&gt;&lt;p&gt;Google Gson 是一个简单的基于 Java 的库，用于将 Java 对象序列化为 JSON，反之亦然。 它是由 Google 开发的一个开源库。&lt;/p&gt;
&lt;p&gt;以下几点说明为什么应该使用这个库 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;标准化&lt;/strong&gt; - Gson 是一个由 Google 管理的标准化库。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;高效&lt;/strong&gt; - 这是对 Java 标准库的可靠，快速和高效的扩展。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;优化&lt;/strong&gt; - Gson 库经过高度优化。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;支持泛型&lt;/strong&gt; - 它为泛型提供了广泛的支持。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;支持复杂的内部类&lt;/strong&gt; - 它支持具有深度继承层次结构的复杂对象。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Java" scheme="https://jueee.github.io/categories/Java/"/>
    
    <category term="JavaJar" scheme="https://jueee.github.io/categories/Java/JavaJar/"/>
    
    
    <category term="Java" scheme="https://jueee.github.io/tags/Java/"/>
    
    <category term="JavaJar" scheme="https://jueee.github.io/tags/JavaJar/"/>
    
    <category term="Google" scheme="https://jueee.github.io/tags/Google/"/>
    
    <category term="JSON" scheme="https://jueee.github.io/tags/JSON/"/>
    
  </entry>
  
  <entry>
    <title>Neo4j 之 Cypher 相关 SQL 汇总</title>
    <link href="https://jueee.github.io/2020/10/2020-10-24-Neo4j%E4%B9%8BCypher%E7%9B%B8%E5%85%B3SQL%E6%B1%87%E6%80%BB/"/>
    <id>https://jueee.github.io/2020/10/2020-10-24-Neo4j%E4%B9%8BCypher%E7%9B%B8%E5%85%B3SQL%E6%B1%87%E6%80%BB/</id>
    <published>2020-10-24T00:00:00.000Z</published>
    <updated>2020-10-26T02:27:56.129Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Cypher-语句"><a href="#Cypher-语句" class="headerlink" title="Cypher 语句"></a>Cypher 语句</h3><p>Cypher 是图形数据库 Neo4j 的声明式查询语言。</p><p>Cypher 语句规则和具备的能力：</p><ul><li>Cypher 通过模式匹配图数据库中的节点和关系，来提取信息或者修改数据。</li><li>Cypher 语句中允许使用变量，用来表示命名、绑定元素和参数。</li><li>Cypher 语句可以对节点、关系、标签和属性进行创建、更新和删除操作。</li><li>Cypher 语句可以管理索引和约束。</li></ul><a id="more"></a><h3 id="Cypher-汇总"><a href="#Cypher-汇总" class="headerlink" title="Cypher 汇总"></a>Cypher 汇总</h3><p>节点总数</p><pre class="language-cypher" data-language="cypher"><code class="language-cypher"><span class="token keyword">match</span> <span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">count</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>关系总数</p><pre class="language-cypher" data-language="cypher"><code class="language-cypher"><span class="token keyword">match</span> p<span class="token operator">=</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token operator">-&gt;</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">count</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="Cypher-查询"><a href="#Cypher-查询" class="headerlink" title="Cypher 查询"></a>Cypher 查询</h3><h4 id="随机查询"><a href="#随机查询" class="headerlink" title="随机查询"></a>随机查询</h4><pre class="language-cypher" data-language="cypher"><code class="language-cypher"><span class="token keyword">match</span> p<span class="token operator">=</span><span class="token punctuation">(</span>n<span class="token operator">:</span><span class="token class-name">MAIL</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token operator">-&gt;</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token keyword">return</span> p <span class="token keyword">limit</span> <span class="token number">20</span></code></pre><h4 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h4><p>根据开始节点，筛选来往关系：</p><pre class="language-cypher" data-language="cypher"><code class="language-cypher"><span class="token keyword">MATCH</span> p<span class="token operator">=</span><span class="token punctuation">(</span>n<span class="token operator">:</span><span class="token class-name">Mail</span><span class="token punctuation">{</span>mail<span class="token operator">:</span><span class="token string">'test@163.com'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">[</span>send<span class="token operator">:</span><span class="token relationship property">Send</span><span class="token operator">*</span><span class="token number">1</span><span class="token operator">..</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-&gt;</span><span class="token punctuation">(</span>m<span class="token operator">:</span><span class="token class-name">Mail</span><span class="token punctuation">)</span> <span class="token keyword">RETURN</span> p<span class="token punctuation">;</span><span class="token keyword">MATCH</span> p<span class="token operator">=</span><span class="token punctuation">(</span>n<span class="token operator">:</span><span class="token class-name">Mail</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">[</span>send<span class="token operator">:</span><span class="token relationship property">Send</span><span class="token operator">*</span><span class="token number">1</span><span class="token operator">..</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-&gt;</span><span class="token punctuation">(</span>m<span class="token operator">:</span><span class="token class-name">Mail</span><span class="token punctuation">)</span> <span class="token keyword">where</span> n<span class="token punctuation">.</span>mail<span class="token operator">=</span><span class="token string">'test@126.com'</span> <span class="token keyword">RETURN</span> p<span class="token punctuation">;</span></code></pre><h4 id="来往次数查询"><a href="#来往次数查询" class="headerlink" title="来往次数查询"></a>来往次数查询</h4><p>根据来往次数，筛选来往关系：</p><pre class="language-cypher" data-language="cypher"><code class="language-cypher"><span class="token keyword">MATCH</span> <span class="token punctuation">(</span>a<span class="token operator">:</span><span class="token class-name">MAIL</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">[</span>r<span class="token operator">:</span><span class="token relationship property">SEND</span><span class="token punctuation">]</span><span class="token operator">-&gt;</span><span class="token punctuation">(</span>b<span class="token operator">:</span><span class="token class-name">MAIL</span><span class="token punctuation">)</span> <span class="token keyword">WITH</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token function">TAIL</span> <span class="token punctuation">(</span><span class="token function">COLLECT</span> <span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> rr <span class="token keyword">WHERE</span> <span class="token function">size</span><span class="token punctuation">(</span>rr<span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">3</span> <span class="token keyword">RETURN</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>rr<span class="token punctuation">;</span></code></pre><h4 id="多层级查询"><a href="#多层级查询" class="headerlink" title="多层级查询"></a>多层级查询</h4><p>根据条件，关联 3 级：</p><pre class="language-cypher" data-language="cypher"><code class="language-cypher"><span class="token keyword">MATCH</span> p<span class="token operator">=</span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token class-name">MAIL</span><span class="token punctuation">{</span>mail<span class="token operator">:</span><span class="token string">'test@163.com'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">[</span>rels<span class="token operator">*</span><span class="token number">1</span><span class="token operator">..</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token keyword">return</span> p <span class="token keyword">limit</span> <span class="token number">100</span></code></pre><h4 id="来往关系"><a href="#来往关系" class="headerlink" title="来往关系"></a>来往关系</h4><pre class="language-cypher" data-language="cypher"><code class="language-cypher"><span class="token keyword">MATCH</span> <span class="token punctuation">(</span>p1<span class="token operator">:</span><span class="token class-name">MAIL</span><span class="token punctuation">{</span>mail<span class="token operator">:</span><span class="token string">'test1@163.com'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>p2<span class="token operator">:</span><span class="token class-name">MAIL</span><span class="token punctuation">{</span>mail<span class="token operator">:</span><span class="token string">'test2@163.com'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      p<span class="token operator">=</span><span class="token function">shortestpath</span><span class="token punctuation">(</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">[</span>rels<span class="token operator">*</span><span class="token operator">..</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">where</span> <span class="token keyword">all</span><span class="token punctuation">(</span>t <span class="token keyword">IN</span> rels <span class="token keyword">where</span> t<span class="token punctuation">.</span>date<span class="token operator">&gt;=</span><span class="token string">'2020-10-17 00:00:00'</span> <span class="token keyword">and</span> t<span class="token punctuation">.</span>date <span class="token operator">&lt;=</span><span class="token string">'2020-10-17 23:59:59'</span><span class="token punctuation">)</span> <span class="token keyword">return</span> p </code></pre><h4 id="过滤路径"><a href="#过滤路径" class="headerlink" title="过滤路径"></a>过滤路径</h4><p>普通过滤：</p><pre class="language-cypher" data-language="cypher"><code class="language-cypher"><span class="token keyword">match</span> p<span class="token operator">=</span><span class="token punctuation">(</span>n<span class="token operator">:</span><span class="token class-name">MAIL</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token operator">-&gt;</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token keyword">where</span> t<span class="token punctuation">.</span>date<span class="token operator">&gt;=</span><span class="token string">'2020-10-23 00:00:00'</span> <span class="token keyword">and</span> t<span class="token punctuation">.</span>date <span class="token operator">&lt;=</span><span class="token string">'2020-10-23 23:59:59'</span><span class="token keyword">return</span> p <span class="token keyword">limit</span> <span class="token number">20</span></code></pre><p>根据条件，关联 3 级并过滤路径：</p><pre class="language-cypher" data-language="cypher"><code class="language-cypher"><span class="token keyword">MATCH</span> p<span class="token operator">=</span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token class-name">MAIL</span><span class="token punctuation">{</span>mail<span class="token operator">:</span><span class="token string">'test@163.com'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">[</span>rels<span class="token operator">*</span><span class="token number">1</span><span class="token operator">..</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token keyword">all</span><span class="token punctuation">(</span>t <span class="token keyword">IN</span> rels <span class="token keyword">where</span> t<span class="token punctuation">.</span>date<span class="token operator">&gt;=</span><span class="token string">'2020-10-23'</span> <span class="token keyword">and</span> t<span class="token punctuation">.</span>date <span class="token operator">&lt;=</span><span class="token string">'2020-10-24'</span><span class="token punctuation">)</span> <span class="token keyword">return</span> p <span class="token keyword">limit</span> <span class="token number">100</span></code></pre><div class="note warning"><p><strong>需采用 where all (t IN rels where ...) 的方式，否则会报错：</strong> </p><p><code>Type mismatch: expected Any, Map, Node, Relationship, Point, Duration, Date, Time, LocalTime, LocalDateTime or DateTime but was List&lt;Relationship&gt;</code></p></div><h3 id="Cypher-删除"><a href="#Cypher-删除" class="headerlink" title="Cypher 删除"></a>Cypher 删除</h3><h4 id="删除所有"><a href="#删除所有" class="headerlink" title="删除所有"></a>删除所有</h4><p>删除所有节点或关系的标签或属性：</p><pre class="language-cypher" data-language="cypher"><code class="language-cypher"><span class="token keyword">MATCH</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">[</span>rel<span class="token punctuation">]</span><span class="token operator">-</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token keyword">DELETE</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>rel<span class="token punctuation">;</span><span class="token keyword">MATCH</span> <span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token class-name">Mail_test</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">[</span>rel<span class="token punctuation">]</span><span class="token operator">-</span><span class="token punctuation">(</span>b<span class="token operator">:</span><span class="token class-name">Mail_test</span><span class="token punctuation">)</span> <span class="token keyword">DELETE</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>rel<span class="token punctuation">;</span></code></pre><p>删除所有节点：</p><pre class="language-cypher" data-language="cypher"><code class="language-cypher"><span class="token keyword">MATCH</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token keyword">DELETE</span> e<span class="token punctuation">;</span><span class="token keyword">MATCH</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> <span class="token class-name">Mail_test</span><span class="token punctuation">)</span> <span class="token keyword">DELETE</span> e<span class="token punctuation">;</span></code></pre><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC8yYmI5OGM4MWQ4ZWU=">https://www.jianshu.com/p/2bb98c81d8ee<i class="fa fa-external-link-alt"></i></span></li></ul>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;Cypher-语句&quot;&gt;&lt;a href=&quot;#Cypher-语句&quot; class=&quot;headerlink&quot; title=&quot;Cypher 语句&quot;&gt;&lt;/a&gt;Cypher 语句&lt;/h3&gt;&lt;p&gt;Cypher 是图形数据库 Neo4j 的声明式查询语言。&lt;/p&gt;
&lt;p&gt;Cypher 语句规则和具备的能力：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cypher 通过模式匹配图数据库中的节点和关系，来提取信息或者修改数据。&lt;/li&gt;
&lt;li&gt;Cypher 语句中允许使用变量，用来表示命名、绑定元素和参数。&lt;/li&gt;
&lt;li&gt;Cypher 语句可以对节点、关系、标签和属性进行创建、更新和删除操作。&lt;/li&gt;
&lt;li&gt;Cypher 语句可以管理索引和约束。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Neo4j" scheme="https://jueee.github.io/categories/Neo4j/"/>
    
    
    <category term="Neo4j" scheme="https://jueee.github.io/tags/Neo4j/"/>
    
  </entry>
  
  <entry>
    <title>启用 Windows10 下的 Linux 子系统</title>
    <link href="https://jueee.github.io/2020/10/2020-10-23-%E5%90%AF%E7%94%A8Windows10%E4%B8%8B%E7%9A%84Linux%E5%AD%90%E7%B3%BB%E7%BB%9F/"/>
    <id>https://jueee.github.io/2020/10/2020-10-23-%E5%90%AF%E7%94%A8Windows10%E4%B8%8B%E7%9A%84Linux%E5%AD%90%E7%B3%BB%E7%BB%9F/</id>
    <published>2020-10-23T00:00:00.000Z</published>
    <updated>2020-10-26T02:27:56.115Z</updated>
    
    <content type="html"><![CDATA[<h3 id="WSL-介绍"><a href="#WSL-介绍" class="headerlink" title="WSL 介绍"></a>WSL 介绍</h3><p>Windows Subsystem for Linux（简称 WSL）是一个在 Windows 10 上能够运行原生 Linux 二进制可执行文件（ELF 格式）的兼容层。</p><p>官网：<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vemgtY24vd2luZG93cy93c2wv">https://docs.microsoft.com/zh-cn/windows/wsl/<i class="fa fa-external-link-alt"></i></span></p><a id="more"></a><h3 id="启用-WSL"><a href="#启用-WSL" class="headerlink" title="启用 WSL"></a>启用 WSL</h3><p>需要先启用 “适用于 Linux 的 Windows 子系统” 可选功能，然后才能在 Windows 上安装 Linux 分发。</p><p>以管理员身份打开 PowerShell 并运行：</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">dism<span class="token punctuation">.</span>exe <span class="token operator">/</span>online <span class="token operator">/</span><span class="token function">enable-feature</span> <span class="token operator">/</span>featurename:Microsoft<span class="token operator">-</span>Windows<span class="token operator">-</span>Subsystem<span class="token operator">-</span>Linux <span class="token operator">/</span>all <span class="token operator">/</span>norestart</code></pre><p>如下图所示：</p><p><img src="/images/2020/10/image-20201022164416572.png" alt="image-20201022164416572" loading="lazy"></p><p>然后，<strong>重新启动计算机</strong>。</p><h3 id="安装-Linux"><a href="#安装-Linux" class="headerlink" title="安装 Linux"></a>安装 Linux</h3><p>打开 <span class="exturl" data-url="aHR0cHM6Ly9ha2EubXMvd3Nsc3RvcmU=">Microsoft Store<i class="fa fa-external-link-alt"></i></span>，并选择你偏好的 Linux 分发版。</p><p>单击以下链接会打开每个分发版的 Microsoft Store 页面：</p><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cubWljcm9zb2Z0LmNvbS9zdG9yZS9hcHBzLzlwam4zODhocDhjOQ==">Ubuntu 16.04 LTS<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cubWljcm9zb2Z0LmNvbS9zdG9yZS9hcHBzLzlOOVROR1ZOREwzUQ==">Ubuntu 18.04 LTS<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cubWljcm9zb2Z0LmNvbS9zdG9yZS9hcHBzLzluNnN2d3Mzcng3MQ==">Ubuntu 20.04 LTS<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cubWljcm9zb2Z0LmNvbS9zdG9yZS9hcHBzLzlOSkZaSzAwRkdLVg==">openSUSE Leap 15.1<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cubWljcm9zb2Z0LmNvbS9zdG9yZS9hcHBzLzlNWjNEMVRSUDhUMQ==">SUSE Linux Enterprise Server 12 SP5<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cubWljcm9zb2Z0LmNvbS9zdG9yZS9hcHBzLzlQTjQ5OFZQTUYzWg==">SUSE Linux Enterprise Server 15 SP1<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cubWljcm9zb2Z0LmNvbS9zdG9yZS9hcHBzLzlQS1IzNFROQ1YwNw==">Kali Linux<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cubWljcm9zb2Z0LmNvbS9zdG9yZS9hcHBzLzlNU1ZLUUM3OFBLNg==">Debian GNU/Linux<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cubWljcm9zb2Z0LmNvbS9zdG9yZS9hcHBzLzluNmdkbTRrMmhuYw==">Fedora Remix for WSL<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cubWljcm9zb2Z0LmNvbS9zdG9yZS9hcHBzLzlOVjFHVjFQWFo2UA==">Pengwin<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cubWljcm9zb2Z0LmNvbS9zdG9yZS9hcHBzLzlOOExQMFg5M1ZDUA==">Pengwin Enterprise<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cubWljcm9zb2Z0LmNvbS9zdG9yZS9hcHBzLzlwODA0Y3JmMDM5NQ==">Alpine WSL<i class="fa fa-external-link-alt"></i></span></li></ul><p>在分发版的页面中，选择 “获取”。</p><h3 id="设置新分发"><a href="#设置新分发" class="headerlink" title="设置新分发"></a>设置新分发</h3><p>首次启动新安装的 Linux 分发版时，将打开一个控制台窗口，系统会要求你等待一分钟或两分钟，以便文件解压缩并存储到电脑上。 </p><p>未来的所有启动时间应不到一秒。</p><p>然后，需要<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vemgtY24vd2luZG93cy93c2wvdXNlci1zdXBwb3J0">为新的 Linux 分发版创建用户帐户和密码<i class="fa fa-external-link-alt"></i></span>。</p><p><img src="/images/2020/10/image-20201022171700195.png" alt="image-20201022171700195" loading="lazy"></p><ul><li>此<strong>用户名</strong>和<strong>密码</strong>特定于安装的每个单独的 Linux 分发版，与 Windows 用户名无关。</li><li>创建<strong>用户名</strong>和<strong>密码</strong>后，该帐户将是分发版的默认用户，并将在启动时自动登录。</li><li>此帐户将被视为 Linux 管理员，能够运行 <code>sudo</code> (Super User Do) 管理命令。</li><li>在适用于 Linux 的 Windows 子系统上运行的每个 Linux 分发版都有其自身的 Linux 用户帐户和密码。 每当添加分发版、重新安装或重置时，都必须配置一个 Linux 用户帐户。</li></ul><h3 id="查看版本信息"><a href="#查看版本信息" class="headerlink" title="查看版本信息"></a>查看版本信息</h3><p>Debian 查看版本当前操作系统发行版信息：</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">cat</span> /etc/os-release<span class="token assign-left variable">PRETTY_NAME</span><span class="token operator">=</span><span class="token string">"Debian GNU/Linux 10 (buster)"</span><span class="token assign-left variable">NAME</span><span class="token operator">=</span><span class="token string">"Debian GNU/Linux"</span><span class="token assign-left variable">VERSION_ID</span><span class="token operator">=</span><span class="token string">"10"</span><span class="token assign-left variable">VERSION</span><span class="token operator">=</span><span class="token string">"10 (buster)"</span><span class="token assign-left variable">VERSION_CODENAME</span><span class="token operator">=</span>buster<span class="token assign-left variable">ID</span><span class="token operator">=</span>debian<span class="token assign-left variable">HOME_URL</span><span class="token operator">=</span><span class="token string">"https://www.debian.org/"</span><span class="token assign-left variable">SUPPORT_URL</span><span class="token operator">=</span><span class="token string">"https://www.debian.org/support"</span><span class="token assign-left variable">BUG_REPORT_URL</span><span class="token operator">=</span><span class="token string">"https://bugs.debian.org/"</span></code></pre><p>Debian 查看当前操作系统版本信息</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">cat</span> /proc/versionLinux version <span class="token number">4.4</span>.0-19041-Microsoft <span class="token punctuation">(</span>Microsoft@Microsoft.com<span class="token punctuation">)</span> <span class="token punctuation">(</span>gcc version <span class="token number">5.4</span>.0 <span class="token punctuation">(</span>GCC<span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token comment">#1-Microsoft Fri Dec 06 14:06:00 PST 2019</span></code></pre><p>Debian 查看版本当前操作系统内核信息</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">uname</span> -r<span class="token number">4.4</span>.0-19041-Microsoft</code></pre><h3 id="卸载-WSL"><a href="#卸载-WSL" class="headerlink" title="卸载 WSL"></a>卸载 WSL</h3><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p>在 powershell 中输入下面的代码</p><pre class="language-none"><code class="language-none">wslconfig /l  #显示出你安装的列表。wslconfig /u debian #debian为上述列表中的名字   注销子系统</code></pre><h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><p>打开开始菜单，右键卸载掉。</p><p><img src="/images/2020/10/image-20201023142313438.png" alt="image-20201023142313438" loading="lazy"></p><h3 id="更新和升级包"><a href="#更新和升级包" class="headerlink" title="更新和升级包"></a>更新和升级包</h3><p>大多数分发版随附了一个空的的包目录或最简单的包目录。</p><p>强烈建议定期更新包目录并使用分发版的首选包管理器升级已安装的包。 </p><p>对于 Debian/Ubuntu，请使用 apt，修改 <code>/etc/apt/sources.list</code>：</p><pre class="language-bash" data-language="bash"><code class="language-bash">deb http://mirrors.163.com/debian/ buster main contrib non-free<span class="token comment"># deb-src http://mirrors.163.com/debian/ buster main contrib non-free</span>deb http://mirrors.163.com/debian/ buster-updates main contrib non-free<span class="token comment"># deb-src http://mirrors.163.com/debian/ buster-updates main contrib non-free</span>deb http://mirrors.163.com/debian/ buster-backports main contrib non-free<span class="token comment"># deb-src http://mirrors.163.com/debian/ buster-backports main contrib non-free</span>deb http://mirrors.163.com/debian-security buster/updates main contrib non-free<span class="token comment"># deb-src http://mirrors.163.com/debian-security buster/updates main contrib non-free</span></code></pre><p>更新</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> update <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> <span class="token function">apt</span> upgrade</code></pre><h3 id="开启-ssh-连接"><a href="#开启-ssh-连接" class="headerlink" title="开启 ssh 连接"></a>开启 ssh 连接</h3><ol><li><p>卸载 ssh server</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> remove openssh-server</code></pre></li><li><p>安装 ssh server</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> openssh-server</code></pre></li><li><p>按需修改 ssh server 配置 </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">vim</span> /etc/ssh/sshd_config</code></pre><p>可能需要修改以下几项：</p><pre class="language-none"><code class="language-none">Port 2222  #默认的是22，但是windows有自己的ssh服务，也是监听的22端口，所以这里要改一下UsePrivilegeSeparation noPasswordAuthentication yesAllowUsers youusername # 这里改成你登陆WSL用的</code></pre></li><li><p>启动 ssh server</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">service</span> <span class="token function">ssh</span> --full-restart</code></pre></li></ol><p>现在就可以用 xshell 等软件登陆 Debian on windows 了，IP 是 127.0.0.1。</p><p>但是要注意，cmd 的窗口还不能关掉。关掉后 sshd 服务也会关掉，连接就断开了。</p><h3 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h3><p>如果提示下面报错，很可能是进行设置后，没有重启电脑。</p><p><img src="/images/2020/10/image-20201022170346394.png" alt="image-20201022170346394" loading="lazy"></p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vemgtY24vd2luZG93cy93c2wvaW5zdGFsbC13aW4xMA==">https://docs.microsoft.com/zh-cn/windows/wsl/install-win10<i class="fa fa-external-link-alt"></i></span></li></ul>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;WSL-介绍&quot;&gt;&lt;a href=&quot;#WSL-介绍&quot; class=&quot;headerlink&quot; title=&quot;WSL 介绍&quot;&gt;&lt;/a&gt;WSL 介绍&lt;/h3&gt;&lt;p&gt;Windows Subsystem for Linux（简称 WSL）是一个在 Windows 10 上能够运行原生 Linux 二进制可执行文件（ELF 格式）的兼容层。&lt;/p&gt;
&lt;p&gt;官网：&lt;a href=&quot;https://docs.microsoft.com/zh-cn/windows/wsl/&quot;&gt;https://docs.microsoft.com/zh-cn/windows/wsl/&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://jueee.github.io/categories/Linux/"/>
    
    <category term="软件" scheme="https://jueee.github.io/categories/%E8%BD%AF%E4%BB%B6/"/>
    
    <category term="Windows" scheme="https://jueee.github.io/categories/%E8%BD%AF%E4%BB%B6/Windows/"/>
    
    
    <category term="Linux" scheme="https://jueee.github.io/tags/Linux/"/>
    
    <category term="软件" scheme="https://jueee.github.io/tags/%E8%BD%AF%E4%BB%B6/"/>
    
    <category term="Windows" scheme="https://jueee.github.io/tags/Windows/"/>
    
  </entry>
  
</feed>
